package org.telegram.messenger;

import android.appwidget.AppWidgetManager;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.tgnet.AbstractSerializedData;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogFilter;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatParticipant;
import org.telegram.tgnet.TLRPC$TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_chatParticipants;
import org.telegram.tgnet.TLRPC$TL_contact;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterChatlist;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_inputQuickReplyShortcut;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionGiftCode;
import org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicEdit;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveaway;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveawayResults;
import org.telegram.tgnet.TLRPC$TL_messageMediaPaidMedia;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaStory;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_botResults;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_reactionCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_username;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStory;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_BotResults;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.tl.TL_stories$StoryFwdHeader;
import org.telegram.tgnet.tl.TL_stories$StoryItem;
import org.telegram.tgnet.tl.TL_stories$TL_mediaAreaChannelPost;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Adapters.DialogsSearchAdapter;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
/* loaded from: classes3.dex */
public class MessagesStorage extends BaseController {
    public static final String[] DATABASE_TABLES;
    public static final int LAST_DB_VERSION = 155;
    private int archiveUnreadCount;
    private int[][] bots;
    private File cacheFile;
    private int[][] channels;
    private int[][] contacts;
    private SQLiteDatabase database;
    private boolean databaseCreated;
    private boolean databaseMigrationInProgress;
    private ArrayList<MessagesController.DialogFilter> dialogFilters;
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap;
    private LongSparseIntArray dialogIsForum;
    private LongSparseArray<Integer> dialogsWithMentions;
    private LongSparseArray<Integer> dialogsWithUnread;
    private int[][] groups;
    private int lastDateValue;
    private int lastPtsValue;
    private int lastQtsValue;
    private int lastSavedDate;
    private int lastSavedPts;
    private int lastSavedQts;
    private int lastSavedSeq;
    private int lastSecretVersion;
    private int lastSeqValue;
    private AtomicLong lastTaskId;
    private int mainUnreadCount;
    private int[] mentionChannels;
    private int[] mentionGroups;
    private int[][] nonContacts;
    private CountDownLatch openSync;
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    private int secretG;
    private byte[] secretPBytes;
    private File shmCacheFile;
    public boolean showClearDatabaseAlert;
    private DispatchQueue storageQueue;
    private SparseArray<ArrayList<Runnable>> tasks;
    boolean tryRecover;
    private LongSparseArray<Boolean> unknownDialogsIds;
    private File walCacheFile;
    private static volatile MessagesStorage[] Instance = new MessagesStorage[4];
    private static final Object[] lockObjects = new Object[4];

    /* loaded from: classes3.dex */
    public interface BooleanCallback {
        void run(boolean z);
    }

    /* loaded from: classes3.dex */
    public interface IntCallback {
        void run(int i);
    }

    /* loaded from: classes3.dex */
    public interface LongCallback {
        void run(long j);
    }

    /* loaded from: classes3.dex */
    public interface StringCallback {
        void run(String str);
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
        DATABASE_TABLES = new String[]{"messages_holes", "media_holes_v2", "scheduled_messages_v2", "quick_replies", "messages_v2", "download_queue", "user_contacts_v7", "user_phones_v7", "dialogs", "dialog_filter", "dialog_filter_ep", "dialog_filter_pin_v2", "randoms_v2", "enc_tasks_v4", "messages_seq", "params", "media_v4", "bot_keyboard", "bot_keyboard_topics", "chat_settings_v2", "user_settings", "chat_pinned_v2", "chat_pinned_count", "chat_hints", "botcache", "users_data", "users", "chats", "enc_chats", "channel_users_v2", "channel_admins_v3", "contacts", "dialog_photos", "dialog_settings", "web_recent_v3", "stickers_v2", "stickers_featured", "stickers_dice", "stickersets", "hashtag_recent_v2", "webpage_pending_v2", "sent_files_v2", "search_recent", "media_counts_v2", "keyvalue", "bot_info_v2", "pending_tasks", "requested_holes", "sharing_locations", "shortcut_widget", "emoji_keywords_v2", "emoji_keywords_info_v2", "wallpapers2", "unread_push_messages", "polls_v2", "reactions", "reaction_mentions", "downloading_documents", "animated_emoji", "attach_menu_bots", "premium_promo", "emoji_statuses", "messages_holes_topics", "messages_topics", "saved_dialogs", "media_topics", "media_holes_topics", "topics", "media_counts_topics", "reaction_mentions_topics", "emoji_groups"};
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (lockObjects[i]) {
                messagesStorage = Instance[i];
                if (messagesStorage == null) {
                    MessagesStorage[] messagesStorageArr = Instance;
                    MessagesStorage messagesStorage2 = new MessagesStorage(i);
                    messagesStorageArr[i] = messagesStorage2;
                    messagesStorage = messagesStorage2;
                }
            }
        }
        return messagesStorage;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public MessagesStorage(int i) {
        super(i);
        this.lastTaskId = new AtomicLong(System.currentTimeMillis());
        this.tasks = new SparseArray<>();
        this.lastDateValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSeqValue = 0;
        this.lastSecretVersion = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersMap = new SparseArray<>();
        this.unknownDialogsIds = new LongSparseArray<>();
        this.openSync = new CountDownLatch(1);
        this.dialogIsForum = new LongSparseIntArray();
        this.contacts = new int[][]{new int[2], new int[2]};
        this.nonContacts = new int[][]{new int[2], new int[2]};
        this.bots = new int[][]{new int[2], new int[2]};
        this.channels = new int[][]{new int[2], new int[2]};
        this.groups = new int[][]{new int[2], new int[2]};
        this.mentionChannels = new int[2];
        this.mentionGroups = new int[2];
        this.dialogsWithMentions = new LongSparseArray<>();
        this.dialogsWithUnread = new LongSparseArray<>();
        DispatchQueue dispatchQueue = new DispatchQueue("storageQueue_" + i);
        this.storageQueue = dispatchQueue;
        dispatchQueue.setPriority(8);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda19
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$new$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        openDatabase(1);
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            this.storageQueue.cancelRunnable(arrayList.get(i2));
        }
        this.tasks.remove(i);
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        arrayList.remove(runnable);
        if (arrayList.isEmpty()) {
            this.tasks.remove(i);
        }
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long length = file != null ? 0 + file.length() : 0L;
        File file2 = this.shmCacheFile;
        return file2 != null ? length + file2.length() : length;
    }

    public void openDatabase(int i) {
        if (!NativeLoader.loaded()) {
            int i2 = 0;
            while (!NativeLoader.loaded()) {
                try {
                    Thread.sleep(1000L);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                i2++;
                if (i2 > 5) {
                    break;
                }
            }
        }
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        this.databaseCreated = false;
        boolean z = !this.cacheFile.exists();
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                createTables(this.database);
            } else {
                int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("current db version = " + intValue);
                }
                if (intValue == 0) {
                    throw new Exception("malformed");
                }
                try {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                    if (queryFinalized.next()) {
                        this.lastSeqValue = queryFinalized.intValue(0);
                        this.lastPtsValue = queryFinalized.intValue(1);
                        this.lastDateValue = queryFinalized.intValue(2);
                        this.lastQtsValue = queryFinalized.intValue(3);
                        this.lastSecretVersion = queryFinalized.intValue(4);
                        this.secretG = queryFinalized.intValue(5);
                        if (queryFinalized.isNull(6)) {
                            this.secretPBytes = null;
                        } else {
                            byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                            this.secretPBytes = byteArrayValue;
                            if (byteArrayValue != null && byteArrayValue.length == 1) {
                                this.secretPBytes = null;
                            }
                        }
                    }
                    queryFinalized.dispose();
                } catch (Exception e2) {
                    FileLog.e(e2);
                    if (e2.getMessage() != null && e2.getMessage().contains("malformed")) {
                        throw new RuntimeException("malformed");
                    }
                    try {
                        this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                        this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                }
                if (intValue < 155) {
                    try {
                        updateDbToLastVersion(intValue);
                    } catch (Exception e4) {
                        if (BuildVars.DEBUG_PRIVATE_VERSION) {
                            throw e4;
                        }
                        FileLog.e(e4);
                        throw new RuntimeException("malformed");
                    }
                }
            }
            this.databaseCreated = true;
        } catch (Exception e5) {
            FileLog.e(e5);
            if (i < 3 && e5.getMessage() != null && e5.getMessage().contains("malformed")) {
                if (i == 2) {
                    cleanupInternal(true);
                    clearLoadingDialogsOffsets();
                } else {
                    cleanupInternal(false);
                }
                openDatabase(i != 1 ? 3 : 2);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$1();
            }
        });
        loadDialogFilters();
        loadUnreadMessages();
        loadPendingTasks();
        try {
            this.openSync.countDown();
        } catch (Throwable unused) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$2();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$1() {
        if (this.databaseMigrationInProgress) {
            this.databaseMigrationInProgress = false;
            NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$2() {
        this.showClearDatabaseAlert = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseOpened, new Object[0]);
    }

    private void clearLoadingDialogsOffsets() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().saveConfig(false);
    }

    private boolean recoverDatabase() {
        this.database.close();
        boolean recoverDatabase = DatabaseMigrationHelper.recoverDatabase(this.cacheFile, this.walCacheFile, this.shmCacheFile, this.currentAccount);
        FileLog.e("Database restored = " + recoverDatabase);
        if (recoverDatabase) {
            try {
                SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
                this.database = sQLiteDatabase;
                sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
                this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            } catch (SQLiteException e) {
                FileLog.e(new Exception(e));
                recoverDatabase = false;
            }
        }
        if (!recoverDatabase) {
            cleanupInternal(true);
            openDatabase(1);
            recoverDatabase = this.databaseCreated;
            FileLog.e("Try create new database = " + recoverDatabase);
        }
        if (recoverDatabase) {
            reset();
        }
        return recoverDatabase;
    }

    public static void createTables(SQLiteDatabase sQLiteDatabase) throws SQLiteException {
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_scheduled_messages_v2 ON scheduled_messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, group_id INTEGER, reply_to_story_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_v2 ON messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_groupid_messages_v2 ON messages_v2(uid, mid, group_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_dialogs(did INTEGER PRIMARY KEY, date INTEGER, last_mid INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, last_mid_group INTEGER, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON saved_dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON saved_dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON saved_dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON saved_dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB, unread_reactions INTEGER, last_mid_group INTEGER, ttl_period INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT, color INTEGER DEFAULT -1)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard_topics(uid INTEGER, tid INTEGER, mid INTEGER, info BLOB, PRIMARY KEY(uid, tid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_topics_idx_mid_v2 ON bot_keyboard_topics(mid, uid, tid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER, inviter INTEGER, links INTEGER, participants_count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos(uid INTEGER, id INTEGER, num INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos_count(uid INTEGER PRIMARY KEY, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER, premium INTEGER, emoji INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB, proximity INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickersets2(id INTEGER PRIMATE KEY, data BLOB, hash INTEGER, date INTEGER, short_name TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_index ON stickersets2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_short_name ON stickersets2(id, short_name);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickers_featured_emoji_index ON stickers_featured(emoji);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, topicId INTEGER, is_reaction INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(message_id, dialog_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE animated_emoji(document_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE attach_menu_bots(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE premium_promo(data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_statuses(data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes_topics(uid INTEGER, topic_id INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes_topics(uid, topic_id, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, reply_to_story_id INTEGER, PRIMARY KEY(mid, topic_id, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_topics ON messages_topics(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_topics ON messages_topics(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_topics ON messages_topics(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_topics ON messages_topics(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_topics ON messages_topics(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_topics ON messages_topics(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_topics ON messages_topics(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_uid_messages_topics ON messages_topics(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_topics ON messages_topics(uid, topic_id, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_topics ON messages_topics(uid, topic_id, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_messages_topics ON messages_topics(uid, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_date_mid_messages_topics ON messages_topics(uid, topic_id, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_mid_messages_topics ON messages_topics(uid, topic_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_topics ON media_topics(uid, topic_id, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_topics(uid INTEGER, topic_id INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_topics ON media_holes_topics(uid, topic_id, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE topics(did INTEGER, topic_id INTEGER, data BLOB, top_message INTEGER, topic_message BLOB, unread_count INTEGER, max_read_id INTEGER, unread_mentions INTEGER, unread_reactions INTEGER, read_outbox INTEGER, pinned INTEGER, total_messages_count INTEGER, hidden INTEGER, edit_date INTEGER, PRIMARY KEY(did, topic_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_top_message_topics ON topics(did, top_message);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_topics ON topics(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_topics(uid INTEGER, topic_id INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions_topics(message_id INTEGER, state INTEGER, dialog_id INTEGER, topic_id INTEGER, PRIMARY KEY(message_id, dialog_id, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_topics_did ON reaction_mentions_topics(dialog_id, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_groups(type INTEGER PRIMARY KEY, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE app_config(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE effects(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories (dialog_id INTEGER, story_id INTEGER, data BLOB, custom_params BLOB, PRIMARY KEY (dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories_counter (dialog_id INTEGER PRIMARY KEY, count INTEGER, max_read INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE profile_stories (dialog_id INTEGER, story_id INTEGER, data BLOB, type INTEGER, seen INTEGER, pin INTEGER, PRIMARY KEY(dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_drafts (id INTEGER PRIMARY KEY, date INTEGER, data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_pushes (uid INTEGER, sid INTEGER, date INTEGER, localName TEXT, flags INTEGER, expire_date INTEGER, PRIMARY KEY(uid, sid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unconfirmed_auth (data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_reaction_tags (topic_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE tag_message_id(mid INTEGER, topic_id INTEGER, tag INTEGER, text TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_idx_tag_message_id ON tag_message_id(tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_text_idx_tag_message_id ON tag_message_id(tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_idx_tag_message_id ON tag_message_id(topic_id, tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_text_idx_tag_message_id ON tag_message_id(topic_id, tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_replies(topic_id INTEGER PRIMARY KEY, name TEXT, order_value INTEGER, count INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE quick_replies_messages(mid INTEGER, topic_id INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS topic_date_idx_quick_replies_messages ON quick_replies_messages(topic_id, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_quick_replies_messages ON quick_replies_messages(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_quick_replies_messages ON quick_replies_messages(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_links(data BLOB, order_value INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE fact_checks(hash INTEGER PRIMARY KEY, data BLOB, expires INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("PRAGMA user_version = 155").stepThis().dispose();
    }

    public boolean isDatabaseMigrationInProgress() {
        return this.databaseMigrationInProgress;
    }

    private void updateDbToLastVersion(int i) throws Exception {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$3();
            }
        });
        FileLog.d("MessagesStorage start db migration from " + i + " to " + LAST_DB_VERSION);
        int migrate = DatabaseMigrationHelper.migrate(this, i);
        StringBuilder sb = new StringBuilder();
        sb.append("MessagesStorage db migration finished to varsion ");
        sb.append(migrate);
        FileLog.d(sb.toString());
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$3() {
        this.databaseMigrationInProgress = true;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$4() {
        this.databaseMigrationInProgress = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void executeNoException(String str) {
        try {
            this.database.executeFast(str).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void cleanupInternal(boolean z) {
        if (z) {
            reset();
        } else {
            clearDatabaseValues();
        }
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    public void clearDatabaseValues() {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
    }

    public void cleanup(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda226
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$cleanup$6(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$6(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda23
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$cleanup$5();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$5() {
        getMessagesController().getDifference();
    }

    public void saveSecretParams(final int i, final int i2, final byte[] bArr) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveSecretParams$7(i, i2, bArr);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSecretParams$7(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(bArr != null ? bArr.length : 1);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void checkSQLException(Throwable th) {
        checkSQLException(th, true);
    }

    private void checkSQLException(Throwable th, boolean z) {
        if ((th instanceof SQLiteException) && th.getMessage() != null && th.getMessage().contains("is malformed") && !this.tryRecover) {
            this.tryRecover = true;
            FileLog.e("disk image malformed detected, try recover");
            if (recoverDatabase()) {
                this.tryRecover = false;
                clearLoadingDialogsOffsets();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda18
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$checkSQLException$8();
                    }
                });
                FileLog.e(new Exception("database restored!!"));
                return;
            }
            FileLog.e(new Exception(th), z);
            return;
        }
        FileLog.e(th, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSQLException$8() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
    }

    public void fixNotificationSettings() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fixNotificationSettings$9();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fixNotificationSettings$9() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry<String, ?> entry : all.entrySet()) {
                String key = entry.getKey();
                if (key.startsWith(NotificationsSettingsFacade.PROPERTY_NOTIFY)) {
                    Integer num = (Integer) entry.getValue();
                    if (num.intValue() == 2 || num.intValue() == 3) {
                        String replace = key.replace(NotificationsSettingsFacade.PROPERTY_NOTIFY, "");
                        long j = 1;
                        if (num.intValue() != 2) {
                            Integer num2 = (Integer) all.get(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + replace);
                            if (num2 != null) {
                                j = 1 | (num2.intValue() << 32);
                            }
                        }
                        try {
                            longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public long createPendingTask(final NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0L;
        }
        final long andAdd = this.lastTaskId.getAndAdd(1L);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createPendingTask$10(andAdd, nativeByteBuffer);
            }
        });
        return andAdd;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPendingTask$10(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            nativeByteBuffer.reuse();
        }
    }

    public void removePendingTask(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda76
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removePendingTask$11(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removePendingTask$11(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda16
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadPendingTasks$33();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00cf A[Catch: Exception -> 0x039c, TryCatch #0 {Exception -> 0x039c, blocks: (B:3:0x0002, B:4:0x000d, B:6:0x0013, B:8:0x001e, B:9:0x0023, B:10:0x0026, B:86:0x0393, B:12:0x002b, B:14:0x003d, B:17:0x0046, B:18:0x004b, B:19:0x0059, B:20:0x006f, B:21:0x0085, B:22:0x00a5, B:24:0x00b3, B:27:0x00bc, B:28:0x00c1, B:29:0x00cf, B:31:0x00e1, B:33:0x00e7, B:35:0x00ed, B:36:0x00f5, B:37:0x0106, B:38:0x0118, B:39:0x0163, B:41:0x0174, B:42:0x0179, B:43:0x0187, B:45:0x0197, B:46:0x01a5, B:47:0x01b3, B:49:0x01c3, B:50:0x01d1, B:51:0x01df, B:52:0x01f3, B:53:0x021c, B:54:0x0221, B:56:0x0234, B:57:0x023c, B:58:0x024b, B:59:0x0265, B:61:0x0274, B:64:0x027d, B:65:0x0282, B:66:0x0290, B:67:0x02b1, B:68:0x02cf, B:69:0x02f0, B:71:0x0328, B:74:0x0338, B:77:0x0342, B:80:0x034c, B:81:0x0352, B:82:0x0367, B:83:0x037f, B:85:0x0389, B:87:0x0398), top: B:92:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPendingTasks$33() {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                final long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    final int readInt32 = byteBufferValue.readInt32(false);
                    switch (readInt32) {
                        case 0:
                            final TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize != null) {
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda199
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$12(TLdeserialize, longValue);
                                    }
                                });
                                break;
                            }
                            break;
                        case 1:
                            final long readInt322 = byteBufferValue.readInt32(false);
                            final int readInt323 = byteBufferValue.readInt32(false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda85
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$13(readInt322, readInt323, longValue);
                                }
                            });
                            break;
                        case 2:
                        case 5:
                        case 8:
                        case 10:
                        case 14:
                            final TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.id = byteBufferValue.readInt64(false);
                            tLRPC$TL_dialog.top_message = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.unread_count = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.last_message_date = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.pts = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.flags = byteBufferValue.readInt32(false);
                            if (readInt32 >= 5) {
                                tLRPC$TL_dialog.pinned = byteBufferValue.readBool(false);
                                tLRPC$TL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 8) {
                                tLRPC$TL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 10) {
                                tLRPC$TL_dialog.unread_mark = byteBufferValue.readBool(false);
                            }
                            if (readInt32 >= 14) {
                                tLRPC$TL_dialog.folder_id = byteBufferValue.readInt32(false);
                            }
                            final TLRPC$InputPeer TLdeserialize2 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$14(tLRPC$TL_dialog, TLdeserialize2, longValue);
                                }
                            });
                            break;
                        case 3:
                            getSendMessagesHelper().sendGame(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC$TL_inputMediaGame) TLRPC$InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                            break;
                        case 4:
                            final long readInt64 = byteBufferValue.readInt64(false);
                            final boolean readBool = byteBufferValue.readBool(false);
                            final TLRPC$InputPeer TLdeserialize3 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$15(readInt64, readBool, TLdeserialize3, longValue);
                                }
                            });
                            break;
                        case 6:
                            final long readInt324 = byteBufferValue.readInt32(false);
                            final int readInt325 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize4 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda87
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$16(readInt324, readInt325, longValue, TLdeserialize4);
                                }
                            });
                            break;
                        case 7:
                            final long readInt326 = byteBufferValue.readInt32(false);
                            int readInt327 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize5 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false);
                            final TLObject TLdeserialize6 = TLdeserialize5 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false) : TLdeserialize5;
                            if (TLdeserialize6 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$18(readInt326, longValue, TLdeserialize6);
                                    }
                                });
                                break;
                            }
                        case 9:
                            final long readInt642 = byteBufferValue.readInt64(false);
                            final TLRPC$InputPeer TLdeserialize7 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda127
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$21(readInt642, TLdeserialize7, longValue);
                                }
                            });
                            break;
                        case 11:
                            final int readInt328 = byteBufferValue.readInt32(false);
                            final long readInt329 = byteBufferValue.readInt32(false);
                            final int readInt3210 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize8 = readInt329 != 0 ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda89
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$22(readInt329, readInt328, TLdeserialize8, readInt3210, longValue);
                                }
                            });
                            break;
                        case 12:
                        case 19:
                        case 20:
                            removePendingTask(longValue);
                            break;
                        case 13:
                            final long readInt643 = byteBufferValue.readInt64(false);
                            final boolean readBool2 = byteBufferValue.readBool(false);
                            final int readInt3211 = byteBufferValue.readInt32(false);
                            final int readInt3212 = byteBufferValue.readInt32(false);
                            final boolean readBool3 = byteBufferValue.readBool(false);
                            final TLRPC$InputPeer TLdeserialize9 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$25(readInt643, readBool2, readInt3211, readInt3212, readBool3, TLdeserialize9, longValue);
                                }
                            });
                            break;
                        case 15:
                            final TLRPC$InputPeer TLdeserialize10 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda213
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$26(TLdeserialize10, longValue);
                                }
                            });
                            break;
                        case 16:
                            final int readInt3213 = byteBufferValue.readInt32(false);
                            int readInt3214 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList = new ArrayList();
                            for (int i = 0; i < readInt3214; i++) {
                                arrayList.add(TLRPC$InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda67
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$27(readInt3213, arrayList, longValue);
                                }
                            });
                            break;
                        case 17:
                            final int readInt3215 = byteBufferValue.readInt32(false);
                            int readInt3216 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList2 = new ArrayList();
                            for (int i2 = 0; i2 < readInt3216; i2++) {
                                arrayList2.add(TLRPC$TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda66
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$28(readInt3215, arrayList2, longValue);
                                }
                            });
                            break;
                        case 18:
                            final long readInt644 = byteBufferValue.readInt64(false);
                            byteBufferValue.readInt32(false);
                            final TLRPC$TL_messages_deleteScheduledMessages TLdeserialize11 = TLRPC$TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize11 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda106
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$29(readInt644, longValue, TLdeserialize11);
                                    }
                                });
                                break;
                            }
                        case 21:
                            final Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                            byteBufferValue.readInt64(false);
                            overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.gradientColor1 = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                            final boolean readBool4 = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                            overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda224
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$24(overrideWallpaperInfo, readBool4, longValue);
                                }
                            });
                            break;
                        case 22:
                            final TLRPC$InputPeer TLdeserialize12 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$30(TLdeserialize12, longValue);
                                }
                            });
                            break;
                        case 23:
                            final long readInt645 = byteBufferValue.readInt64(false);
                            final int readInt3217 = byteBufferValue.readInt32(false);
                            final int readInt3218 = byteBufferValue.readInt32(false);
                            if (!DialogObject.isEncryptedDialog(readInt645) && DialogObject.isChatDialog(readInt645) && byteBufferValue.hasRemaining()) {
                                r1 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            }
                            final TLRPC$InputChannel tLRPC$InputChannel = r1;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda90
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$23(readInt645, readInt3217, tLRPC$InputChannel, readInt3218, longValue, readInt32);
                                }
                            });
                            break;
                        case 24:
                            final long readInt646 = byteBufferValue.readInt64(false);
                            int readInt3219 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize13 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false);
                            final TLObject TLdeserialize14 = TLdeserialize13 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false) : TLdeserialize13;
                            if (TLdeserialize14 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda107
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$19(readInt646, longValue, TLdeserialize14);
                                    }
                                });
                                break;
                            }
                        case 25:
                            final long readInt647 = byteBufferValue.readInt64(false);
                            final int readInt3220 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize15 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda88
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$17(readInt647, readInt3220, longValue, TLdeserialize15);
                                }
                            });
                            break;
                        default:
                            switch (readInt32) {
                                case 100:
                                    final int readInt3221 = byteBufferValue.readInt32(false);
                                    final boolean readBool5 = byteBufferValue.readBool(false);
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda72
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$31(readInt3221, readBool5, longValue);
                                        }
                                    });
                                    break;
                                case R.styleable.AppCompatTheme_textAppearanceLargePopupMenu /* 102 */:
                                    final long readInt648 = byteBufferValue.readInt64(false);
                                    final int readInt3222 = byteBufferValue.readInt32(false);
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda99
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$32(longValue, readInt648, readInt3222);
                                        }
                                    });
                                    break;
                                case R.styleable.AppCompatTheme_textAppearanceListItem /* 103 */:
                                    final long readInt649 = byteBufferValue.readInt64(false);
                                    final int readInt3223 = byteBufferValue.readInt32(false);
                                    int readInt3224 = byteBufferValue.readInt32(false);
                                    TLObject TLdeserialize16 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false);
                                    final TLObject TLdeserialize17 = TLdeserialize16 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false) : TLdeserialize16;
                                    if (TLdeserialize17 == null) {
                                        removePendingTask(longValue);
                                        break;
                                    } else {
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda109
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$loadPendingTasks$20(readInt649, longValue, TLdeserialize17, readInt3223);
                                            }
                                        });
                                        break;
                                    }
                            }
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$12(TLRPC$Chat tLRPC$Chat, long j) {
        getMessagesController().loadUnknownChannel(tLRPC$Chat, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$13(long j, int i, long j2) {
        getMessagesController().getChannelDifference(j, i, j2, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$14(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().checkLastDialogMessage(tLRPC$Dialog, tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$15(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().pinDialog(j, z, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$16(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$17(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$18(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, -j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$19(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$20(long j, long j2, TLObject tLObject, int i) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$21(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$22(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(-j, i, tLRPC$InputChannel, i2, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$23(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2, int i3) {
        getMessagesController().markMessageAsRead2(j, i, tLRPC$InputChannel, i2, j2, i3 == 23);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$24(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer(null, overrideWallpaperInfo, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$25(long j, boolean z, int i, int i2, boolean z2, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().deleteDialog(j, z ? 1 : 0, i, i2, z2, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$26(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().loadUnknownDialog(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$27(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$28(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder(null, i, -1, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$29(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 1, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$30(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$31(int i, boolean z, long j) {
        getSecretChatHelper().declineSecretChat(i, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$32(long j, long j2, int i) {
        getMessagesController().lambda$checkDeletingTask$78(j, j2, i);
    }

    public void saveChannelPts(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChannelPts$34(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChannelPts$34(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, -j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal */
    public void lambda$saveDiffParams$35(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq == i && this.lastSavedPts == i2 && this.lastSavedDate == i3 && this.lastQtsValue == i4) {
                return;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.bindInteger(4, i4);
            executeFast.step();
            executeFast.dispose();
            this.lastSavedSeq = i;
            this.lastSavedPts = i2;
            this.lastSavedDate = i3;
            this.lastSavedQts = i4;
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void saveDiffParams(final int i, final int i2, final int i3, final int i4) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda43
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDiffParams$35(i, i2, i3, i4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$36() {
        resetAllUnreadCounters(true);
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda7
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMutedDialogsFiltersCounters$36();
            }
        });
    }

    public void setDialogFlags(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda96
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogFlags$37(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogFlags$37(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 == intValue) {
                return;
            }
            this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            resetAllUnreadCounters(true);
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putStoryPushMessage(final NotificationsController.StoryNotification storyNotification) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putStoryPushMessage$38(storyNotification);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putStoryPushMessage$38(NotificationsController.StoryNotification storyNotification) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM story_pushes WHERE uid = " + storyNotification.dialogId).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO story_pushes VALUES(?, ?, ?, ?, ?, ?)");
            for (Map.Entry<Integer, Pair<Long, Long>> entry : storyNotification.dateByIds.entrySet()) {
                int intValue = entry.getKey().intValue();
                long longValue = ((Long) entry.getValue().first).longValue();
                long longValue2 = ((Long) entry.getValue().second).longValue();
                executeFast.requery();
                int i = 1;
                executeFast.bindLong(1, storyNotification.dialogId);
                executeFast.bindInteger(2, intValue);
                executeFast.bindLong(3, longValue);
                if (storyNotification.localName == null) {
                    storyNotification.localName = "";
                }
                executeFast.bindString(4, storyNotification.localName);
                if (!storyNotification.hidden) {
                    i = 0;
                }
                executeFast.bindInteger(5, i);
                executeFast.bindLong(6, longValue2);
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteStoryPushMessage(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda75
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteStoryPushMessage$39(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteStoryPushMessage$39(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM story_pushes WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteAllStoryPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda14
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryPushMessages$40();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryPushMessages$40() {
        try {
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteAllStoryReactionPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda15
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryReactionPushMessages$41();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryReactionPushMessages$41() {
        try {
            this.database.executeFast("DELETE FROM unread_push_messages WHERE is_reaction = 2").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putPushMessage(final MessageObject messageObject) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda191
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putPushMessage$42(messageObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putPushMessage$42(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            int i = 1;
            int i2 = messageObject.localType == 2 ? 1 : 0;
            if (messageObject.localChannel) {
                i2 |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindInteger(2, messageObject.getId());
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            CharSequence charSequence = messageObject.messageText;
            if (charSequence == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, charSequence.toString());
            }
            String str = messageObject.localName;
            if (str == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, str);
            }
            String str2 = messageObject.localUserName;
            if (str2 == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, str2);
            }
            executeFast.bindInteger(9, i2);
            executeFast.bindLong(10, MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, false));
            int i3 = messageObject.isReactionPush ? 1 : 0;
            if (!messageObject.isStoryReactionPush) {
                i = 0;
            }
            executeFast.bindInteger(11, i3 + i);
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearLocalDatabase() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda28
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearLocalDatabase$44();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:135:0x047b, code lost:
        if (r8 == null) goto L89;
     */
    /* JADX WARN: Code restructure failed: missing block: B:136:0x047d, code lost:
        r8.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x0480, code lost:
        reset();
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x0483, code lost:
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:93:0x0423, code lost:
        if (r8 != null) goto L88;
     */
    /* JADX WARN: Removed duplicated region for block: B:130:0x046e  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x0473  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0478  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x048a  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x048f  */
    /* JADX WARN: Removed duplicated region for block: B:147:0x0494  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x0499  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x039a A[Catch: all -> 0x03ab, Exception -> 0x03af, TRY_LEAVE, TryCatch #26 {Exception -> 0x03af, all -> 0x03ab, blocks: (B:63:0x02a5, B:64:0x02a8, B:66:0x039a), top: B:163:0x02a5 }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x03a8  */
    /* JADX WARN: Type inference failed for: r7v13 */
    /* JADX WARN: Type inference failed for: r7v18 */
    /* JADX WARN: Type inference failed for: r7v2, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$clearLocalDatabase$44() {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        ArrayList arrayList;
        int i;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor2;
        ArrayList arrayList2;
        int i2;
        SQLiteCursor sQLiteCursor3;
        int i3;
        Exception exc2;
        try {
            arrayList = new ArrayList();
            this.database.executeFast("DELETE FROM reaction_mentions").stepThis().dispose();
            this.database.executeFast("DELETE FROM reaction_mentions_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM downloading_documents").stepThis().dispose();
            this.database.executeFast("DELETE FROM attach_menu_bots").stepThis().dispose();
            this.database.executeFast("DELETE FROM animated_emoji").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickers_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickersets2").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_dialogs").stepThis().dispose();
            this.database.executeFast("DELETE FROM topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_counts_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM profile_stories").stepThis().dispose();
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_reaction_tags").stepThis().dispose();
            this.database.executeFast("DELETE FROM business_replies").stepThis().dispose();
            this.database.executeFast("DELETE FROM quick_replies_messages").stepThis().dispose();
            this.database.executeFast("DELETE FROM effects").stepThis().dispose();
            i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList.add(Long.valueOf(longValue));
                    }
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                }
            }
            queryFinalized.dispose();
            executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
        } catch (Exception e2) {
            exc = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
        try {
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
            try {
                this.database.beginTransaction();
                sQLiteCursor = null;
                int i4 = 0;
                while (i4 < arrayList.size()) {
                    try {
                        Long l = (Long) arrayList.get(i4);
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        sQLiteCursor = sQLiteDatabase3.queryFinalized("SELECT COUNT(mid) FROM messages_v2 WHERE uid = " + l, new Object[i]);
                        int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(i) : 0;
                        sQLiteCursor.dispose();
                        if (intValue <= 2) {
                            arrayList2 = arrayList;
                            i2 = i4;
                        } else {
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            SQLiteCursor queryFinalized2 = sQLiteDatabase4.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + l, new Object[i]);
                            try {
                                if (queryFinalized2.next()) {
                                    long longValue2 = queryFinalized2.longValue(i);
                                    arrayList2 = arrayList;
                                    long longValue3 = queryFinalized2.longValue(1);
                                    SQLiteDatabase sQLiteDatabase5 = this.database;
                                    SQLiteCursor queryFinalized3 = sQLiteDatabase5.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + l + " AND mid IN (" + longValue2 + "," + longValue3 + ")", new Object[i]);
                                    int i5 = -1;
                                    ?? r7 = i;
                                    while (queryFinalized3.next()) {
                                        try {
                                            NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(r7);
                                            if (byteBufferValue != null) {
                                                sQLiteCursor3 = queryFinalized2;
                                                try {
                                                    try {
                                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r7), r7);
                                                        if (TLdeserialize != null) {
                                                            i5 = TLdeserialize.id;
                                                            try {
                                                                i2 = i4;
                                                                try {
                                                                    TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                                                                    i5 = i5;
                                                                } catch (Exception e3) {
                                                                    exc2 = e3;
                                                                    i5 = i5;
                                                                    try {
                                                                        checkSQLException(exc2);
                                                                        i3 = i5;
                                                                        queryFinalized3.dispose();
                                                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                        sQLiteDatabase6.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                        StringBuilder sb = new StringBuilder();
                                                                        sb.append("DELETE FROM messages_holes WHERE uid = ");
                                                                        sb.append(l);
                                                                        sQLiteDatabase7.executeFast(sb.toString()).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase8 = this.database;
                                                                        sQLiteDatabase8.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase9 = this.database;
                                                                        sQLiteDatabase9.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase10 = this.database;
                                                                        sQLiteDatabase10.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase11 = this.database;
                                                                        sQLiteDatabase11.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase12 = this.database;
                                                                        sQLiteDatabase12.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                        if (i3 == -1) {
                                                                        }
                                                                        sQLiteCursor2.dispose();
                                                                        sQLiteCursor = null;
                                                                        i4 = i2 + 1;
                                                                        arrayList = arrayList2;
                                                                        i = 0;
                                                                    } catch (Exception e4) {
                                                                        e = e4;
                                                                        sQLiteCursor2 = sQLiteCursor3;
                                                                        exc = e;
                                                                        sQLiteCursor = sQLiteCursor2;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = executeFast2;
                                                                        try {
                                                                            checkSQLException(exc);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                                sQLiteDatabase2.commitTransaction();
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                                sQLitePreparedStatement.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                sQLitePreparedStatement2.dispose();
                                                                            }
                                                                        } catch (Throwable th4) {
                                                                            th = th4;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            reset();
                                                                            throw th;
                                                                        }
                                                                    } catch (Throwable th5) {
                                                                        th = th5;
                                                                        sQLiteCursor2 = sQLiteCursor3;
                                                                        th = th;
                                                                        sQLiteCursor = sQLiteCursor2;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = executeFast2;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        reset();
                                                                        throw th;
                                                                    }
                                                                }
                                                            } catch (Exception e5) {
                                                                e = e5;
                                                                i2 = i4;
                                                                exc2 = e;
                                                                checkSQLException(exc2);
                                                                i3 = i5;
                                                                queryFinalized3.dispose();
                                                                SQLiteDatabase sQLiteDatabase62 = this.database;
                                                                sQLiteDatabase62.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase72 = this.database;
                                                                StringBuilder sb2 = new StringBuilder();
                                                                sb2.append("DELETE FROM messages_holes WHERE uid = ");
                                                                sb2.append(l);
                                                                sQLiteDatabase72.executeFast(sb2.toString()).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase82 = this.database;
                                                                sQLiteDatabase82.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase92 = this.database;
                                                                sQLiteDatabase92.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase102 = this.database;
                                                                sQLiteDatabase102.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase112 = this.database;
                                                                sQLiteDatabase112.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                SQLiteDatabase sQLiteDatabase122 = this.database;
                                                                sQLiteDatabase122.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                if (i3 == -1) {
                                                                }
                                                                sQLiteCursor2.dispose();
                                                                sQLiteCursor = null;
                                                                i4 = i2 + 1;
                                                                arrayList = arrayList2;
                                                                i = 0;
                                                            }
                                                        } else {
                                                            i2 = i4;
                                                        }
                                                        try {
                                                            byteBufferValue.reuse();
                                                        } catch (Exception e6) {
                                                            e = e6;
                                                            exc2 = e;
                                                            checkSQLException(exc2);
                                                            i3 = i5;
                                                            queryFinalized3.dispose();
                                                            SQLiteDatabase sQLiteDatabase622 = this.database;
                                                            sQLiteDatabase622.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase722 = this.database;
                                                            StringBuilder sb22 = new StringBuilder();
                                                            sb22.append("DELETE FROM messages_holes WHERE uid = ");
                                                            sb22.append(l);
                                                            sQLiteDatabase722.executeFast(sb22.toString()).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase822 = this.database;
                                                            sQLiteDatabase822.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase922 = this.database;
                                                            sQLiteDatabase922.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1022 = this.database;
                                                            sQLiteDatabase1022.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1122 = this.database;
                                                            sQLiteDatabase1122.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1222 = this.database;
                                                            sQLiteDatabase1222.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                            MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                            if (i3 == -1) {
                                                            }
                                                            sQLiteCursor2.dispose();
                                                            sQLiteCursor = null;
                                                            i4 = i2 + 1;
                                                            arrayList = arrayList2;
                                                            i = 0;
                                                        }
                                                    } catch (Throwable th6) {
                                                        th = th6;
                                                        th = th;
                                                        sQLitePreparedStatement = executeFast;
                                                        sQLitePreparedStatement2 = executeFast2;
                                                        sQLiteCursor = sQLiteCursor3;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                            sQLiteDatabase.commitTransaction();
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                            sQLitePreparedStatement.dispose();
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                            sQLitePreparedStatement2.dispose();
                                                        }
                                                        if (sQLiteCursor != null) {
                                                            sQLiteCursor.dispose();
                                                        }
                                                        reset();
                                                        throw th;
                                                    }
                                                } catch (Exception e7) {
                                                    e = e7;
                                                }
                                            } else {
                                                sQLiteCursor3 = queryFinalized2;
                                                i2 = i4;
                                            }
                                            queryFinalized2 = sQLiteCursor3;
                                            i4 = i2;
                                            r7 = 0;
                                        } catch (Exception e8) {
                                            e = e8;
                                            sQLiteCursor3 = queryFinalized2;
                                        } catch (Throwable th7) {
                                            th = th7;
                                            sQLiteCursor3 = queryFinalized2;
                                        }
                                    }
                                    sQLiteCursor3 = queryFinalized2;
                                    i2 = i4;
                                    i3 = i5;
                                    queryFinalized3.dispose();
                                    SQLiteDatabase sQLiteDatabase6222 = this.database;
                                    sQLiteDatabase6222.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase7222 = this.database;
                                    StringBuilder sb222 = new StringBuilder();
                                    sb222.append("DELETE FROM messages_holes WHERE uid = ");
                                    sb222.append(l);
                                    sQLiteDatabase7222.executeFast(sb222.toString()).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase8222 = this.database;
                                    sQLiteDatabase8222.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase9222 = this.database;
                                    sQLiteDatabase9222.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase10222 = this.database;
                                    sQLiteDatabase10222.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase11222 = this.database;
                                    sQLiteDatabase11222.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase12222 = this.database;
                                    sQLiteDatabase12222.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                    MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                    if (i3 == -1) {
                                        sQLiteCursor2 = sQLiteCursor3;
                                        try {
                                            createFirstHoles(l.longValue(), executeFast, executeFast2, i3, 0L);
                                        } catch (Exception e9) {
                                            e = e9;
                                            exc = e;
                                            sQLiteCursor = sQLiteCursor2;
                                            sQLitePreparedStatement = executeFast;
                                            sQLitePreparedStatement2 = executeFast2;
                                            checkSQLException(exc);
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                        } catch (Throwable th8) {
                                            th = th8;
                                            th = th;
                                            sQLiteCursor = sQLiteCursor2;
                                            sQLitePreparedStatement = executeFast;
                                            sQLitePreparedStatement2 = executeFast2;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            reset();
                                            throw th;
                                        }
                                    } else {
                                        sQLiteCursor2 = sQLiteCursor3;
                                    }
                                } else {
                                    arrayList2 = arrayList;
                                    sQLiteCursor2 = queryFinalized2;
                                    i2 = i4;
                                }
                                sQLiteCursor2.dispose();
                                sQLiteCursor = null;
                            } catch (Exception e10) {
                                e = e10;
                                sQLiteCursor2 = queryFinalized2;
                            } catch (Throwable th9) {
                                th = th9;
                                sQLiteCursor2 = queryFinalized2;
                            }
                        }
                        i4 = i2 + 1;
                        arrayList = arrayList2;
                        i = 0;
                    } catch (Exception e11) {
                        exc = e11;
                    } catch (Throwable th10) {
                        th = th10;
                    }
                }
                executeFast.dispose();
                executeFast2.dispose();
                try {
                    this.database.commitTransaction();
                    this.database.executeFast("PRAGMA journal_size_limit = 0").stepThis().dispose();
                    this.database.executeFast("VACUUM").stepThis().dispose();
                    this.database.executeFast("PRAGMA journal_size_limit = -1").stepThis().dispose();
                    getMessagesController().getTopicsController().databaseCleared();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda29
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$clearLocalDatabase$43();
                        }
                    });
                    SQLiteDatabase sQLiteDatabase13 = this.database;
                    if (sQLiteDatabase13 != null) {
                        sQLiteDatabase13.commitTransaction();
                    }
                } catch (Exception e12) {
                    exc = e12;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    checkSQLException(exc);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                } catch (Throwable th11) {
                    th = th11;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    reset();
                    throw th;
                }
            } catch (Exception e13) {
                exc = e13;
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement2 = executeFast2;
                sQLiteCursor = null;
            } catch (Throwable th12) {
                th = th12;
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement2 = executeFast2;
                sQLiteCursor = null;
            }
        } catch (Exception e14) {
            exc = e14;
            sQLitePreparedStatement = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            checkSQLException(exc);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
        } catch (Throwable th13) {
            th = th13;
            sQLitePreparedStatement = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            reset();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearLocalDatabase$43() {
        getMessagesController().getSavedMessagesController().cleanup();
    }

    public void saveTopics(final long j, final List<TLRPC$TL_forumTopic> list, final boolean z, boolean z2, final int i) {
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda120
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$saveTopics$45(j, list, z, i);
                }
            });
        } else {
            saveTopicsInternal(j, list, z, false, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveTopics$45(long j, List list, boolean z, int i) {
        saveTopicsInternal(j, list, z, true, i);
    }

    /* JADX WARN: Removed duplicated region for block: B:41:0x0147  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0149  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x015f A[Catch: all -> 0x0260, Exception -> 0x0266, TRY_LEAVE, TryCatch #8 {Exception -> 0x0266, all -> 0x0260, blocks: (B:24:0x00a0, B:26:0x00a6, B:39:0x013a, B:43:0x014a, B:45:0x015f, B:33:0x012e, B:38:0x0137), top: B:79:0x00a0 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x018a A[Catch: all -> 0x025c, Exception -> 0x025e, TryCatch #7 {Exception -> 0x025e, all -> 0x025c, blocks: (B:47:0x0177, B:49:0x0247, B:48:0x018a, B:50:0x0250), top: B:81:0x0177 }] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0274  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x027f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void saveTopicsInternal(long j, List<TLRPC$TL_forumTopic> list, boolean z, boolean z2, int i) {
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i3;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
            try {
                HashSet hashSet = new HashSet();
                HashMap hashMap = new HashMap();
                int i4 = 0;
                while (true) {
                    i2 = 2;
                    if (i4 >= list.size()) {
                        break;
                    }
                    SQLiteDatabase sQLiteDatabase = this.database;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT did, pinned FROM topics WHERE did = " + j + " AND topic_id = " + list.get(i4).id, new Object[0]);
                    boolean next = queryFinalized.next();
                    if (next) {
                        hashMap.put(Integer.valueOf(i4), Integer.valueOf(queryFinalized.intValue(2)));
                    }
                    queryFinalized.dispose();
                    if (next) {
                        hashSet.add(Integer.valueOf(i4));
                    }
                    i4++;
                }
                if (z) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteDatabase2.executeFast("DELETE FROM topics WHERE did = " + j).stepThis().dispose();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                if (z2) {
                    try {
                        this.database.beginTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement2 = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement2 != null) {
                        }
                        this.database.commitTransaction();
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement2 = executeFast;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        this.database.commitTransaction();
                        throw th;
                    }
                }
                int i5 = 0;
                while (i5 < list.size()) {
                    try {
                        TLRPC$TL_forumTopic tLRPC$TL_forumTopic = list.get(i5);
                        boolean contains = hashSet.contains(Integer.valueOf(i5));
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindInteger(i2, tLRPC$TL_forumTopic.id);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic.getObjectSize());
                        tLRPC$TL_forumTopic.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.bindInteger(4, tLRPC$TL_forumTopic.top_message);
                        NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_forumTopic.topicStartMessage.getObjectSize());
                        tLRPC$TL_forumTopic.topicStartMessage.serializeToStream(nativeByteBuffer2);
                        executeFast.bindByteBuffer(5, nativeByteBuffer2);
                        executeFast.bindInteger(6, tLRPC$TL_forumTopic.unread_count);
                        executeFast.bindInteger(7, tLRPC$TL_forumTopic.read_inbox_max_id);
                        executeFast.bindInteger(8, tLRPC$TL_forumTopic.unread_mentions_count);
                        executeFast.bindInteger(9, tLRPC$TL_forumTopic.unread_reactions_count);
                        executeFast.bindInteger(10, tLRPC$TL_forumTopic.read_outbox_max_id);
                        if (tLRPC$TL_forumTopic.isShort) {
                            if (hashMap.containsKey(Integer.valueOf(i5))) {
                                executeFast.bindInteger(11, ((Integer) hashMap.get(Integer.valueOf(i5))).intValue());
                                executeFast.bindInteger(12, tLRPC$TL_forumTopic.totalMessagesCount);
                                executeFast.bindInteger(13, !tLRPC$TL_forumTopic.hidden ? 1 : 0);
                                executeFast.bindInteger(14, i);
                                executeFast.step();
                                nativeByteBuffer2.reuse();
                                nativeByteBuffer.reuse();
                                if (!contains) {
                                    int i6 = tLRPC$TL_forumTopic.top_message;
                                    sQLitePreparedStatement = executeFast;
                                    i3 = i5;
                                    try {
                                        closeHolesInTable("messages_holes_topics", j, i6, i6, tLRPC$TL_forumTopic.id);
                                        int i7 = tLRPC$TL_forumTopic.top_message;
                                        closeHolesInMedia(j, i7, i7, -1, 0L);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        this.database.commitTransaction();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        this.database.commitTransaction();
                                        throw th;
                                    }
                                } else {
                                    sQLitePreparedStatement = executeFast;
                                    i3 = i5;
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    Locale locale = Locale.ENGLISH;
                                    sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM messages_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_holes_topics VALUES(?, ?, ?, ?)");
                                    createFirstHoles(j, executeFast2, this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)"), tLRPC$TL_forumTopic.top_message, tLRPC$TL_forumTopic.id);
                                    executeFast2.dispose();
                                    executeFast2.dispose();
                                }
                                i5 = i3 + 1;
                                executeFast = sQLitePreparedStatement;
                                i2 = 2;
                            }
                        }
                        executeFast.bindInteger(11, tLRPC$TL_forumTopic.pinned ? tLRPC$TL_forumTopic.pinnedOrder + 1 : 0);
                        executeFast.bindInteger(12, tLRPC$TL_forumTopic.totalMessagesCount);
                        executeFast.bindInteger(13, !tLRPC$TL_forumTopic.hidden ? 1 : 0);
                        executeFast.bindInteger(14, i);
                        executeFast.step();
                        nativeByteBuffer2.reuse();
                        nativeByteBuffer.reuse();
                        if (!contains) {
                        }
                        i5 = i3 + 1;
                        executeFast = sQLitePreparedStatement;
                        i2 = 2;
                    } catch (Exception e3) {
                        e = e3;
                        sQLitePreparedStatement = executeFast;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement = executeFast;
                    }
                }
                sQLitePreparedStatement = executeFast;
                resetAllUnreadCounters(false);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            } catch (Exception e4) {
                e = e4;
            }
            this.database.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void updateTopicData(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, int i) {
        updateTopicData(j, tLRPC$TL_forumTopic, i, getConnectionsManager().getCurrentTime());
    }

    public void updateTopicData(final long j, final TLRPC$TL_forumTopic tLRPC$TL_forumTopic, final int i, final int i2) {
        if (tLRPC$TL_forumTopic == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicData$47(i, tLRPC$TL_forumTopic, j, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0091 A[Catch: all -> 0x012c, Exception -> 0x0131, TRY_ENTER, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0099 A[Catch: all -> 0x012c, Exception -> 0x0131, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00a6 A[Catch: all -> 0x012c, Exception -> 0x0131, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00b2 A[Catch: all -> 0x012c, Exception -> 0x0131, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00b6  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00bb A[Catch: all -> 0x012c, Exception -> 0x0131, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00c3 A[Catch: all -> 0x012c, Exception -> 0x0131, TryCatch #6 {Exception -> 0x0131, all -> 0x012c, blocks: (B:5:0x0019, B:15:0x0045, B:29:0x0091, B:30:0x0095, B:32:0x0099, B:33:0x00a2, B:35:0x00a6, B:36:0x00ae, B:38:0x00b2, B:40:0x00b7, B:42:0x00bb, B:43:0x00bf, B:45:0x00c3, B:46:0x00c7), top: B:91:0x0019 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ea  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00eb  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x011e  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x013a  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x013f  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x014b  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0150  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTopicData$47(final int i, final TLRPC$TL_forumTopic tLRPC$TL_forumTopic, final long j, int i2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor;
        int i3;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic2;
        int i4;
        SQLitePreparedStatement executeFast2;
        int i5 = 1;
        if ((i & 16) != 0) {
            try {
                executeFast = this.database.executeFast("UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?");
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    this.database.commitTransaction();
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    this.database.commitTransaction();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
                throw th;
            }
            try {
                executeFast.requery();
                executeFast.bindInteger(1, tLRPC$TL_forumTopic.totalMessagesCount);
                executeFast.bindLong(2, j);
                executeFast.bindInteger(3, tLRPC$TL_forumTopic.id);
                executeFast.step();
                executeFast.dispose();
                if (i == 16) {
                    executeFast.dispose();
                    this.database.commitTransaction();
                    return;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                this.database.commitTransaction();
                throw th;
            }
        } else {
            executeFast = null;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, edit_date FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id)), new Object[0]);
        try {
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (sQLiteCursor != null) {
            }
            this.database.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = executeFast;
            sQLiteCursor = queryFinalized;
            if (sQLitePreparedStatement != null) {
            }
            if (sQLiteCursor != null) {
            }
            this.database.commitTransaction();
            throw th;
        }
        if (queryFinalized.next()) {
            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
            i3 = queryFinalized.intValue(1);
            if (byteBufferValue != null) {
                tLRPC$TL_forumTopic2 = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue, byteBufferValue.readInt32(true), true);
                byteBufferValue.reuse();
                queryFinalized.dispose();
                if (tLRPC$TL_forumTopic2 != null && (i3 == 0 || i3 <= i2)) {
                    if ((i & 1) != 0) {
                        tLRPC$TL_forumTopic2.title = tLRPC$TL_forumTopic.title;
                    }
                    if ((i & 2) != 0) {
                        tLRPC$TL_forumTopic2.icon_emoji_id = tLRPC$TL_forumTopic.icon_emoji_id;
                        tLRPC$TL_forumTopic2.flags |= 1;
                    }
                    if ((i & 4) != 0) {
                        tLRPC$TL_forumTopic2.pinned = tLRPC$TL_forumTopic.pinned;
                        tLRPC$TL_forumTopic2.pinnedOrder = tLRPC$TL_forumTopic.pinnedOrder;
                    }
                    i4 = !tLRPC$TL_forumTopic2.pinned ? tLRPC$TL_forumTopic2.pinnedOrder + 1 : 0;
                    if ((i & 8) != 0) {
                        tLRPC$TL_forumTopic2.closed = tLRPC$TL_forumTopic.closed;
                    }
                    if ((i & 32) != 0) {
                        tLRPC$TL_forumTopic2.hidden = tLRPC$TL_forumTopic.hidden;
                    }
                    executeFast2 = this.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
                    try {
                        this.database.beginTransaction();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic2.getObjectSize());
                        tLRPC$TL_forumTopic2.serializeToStream(nativeByteBuffer);
                        executeFast2.bindByteBuffer(1, nativeByteBuffer);
                        executeFast2.bindInteger(2, i4);
                        if (tLRPC$TL_forumTopic2.hidden) {
                            i5 = 0;
                        }
                        executeFast2.bindInteger(3, i5);
                        executeFast2.bindInteger(4, i2);
                        executeFast2.bindLong(5, j);
                        executeFast2.bindInteger(6, tLRPC$TL_forumTopic2.id);
                        executeFast2.step();
                        nativeByteBuffer.reuse();
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda130
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateTopicData$46(j, tLRPC$TL_forumTopic, i);
                            }
                        });
                        executeFast = executeFast2;
                    } catch (Exception e4) {
                        e = e4;
                        sQLitePreparedStatement = executeFast2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        this.database.commitTransaction();
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement = executeFast2;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        this.database.commitTransaction();
                        throw th;
                    }
                }
                if (executeFast != null) {
                    executeFast.dispose();
                }
                this.database.commitTransaction();
            }
        } else {
            i3 = 0;
        }
        tLRPC$TL_forumTopic2 = null;
        queryFinalized.dispose();
        if (tLRPC$TL_forumTopic2 != null) {
            if ((i & 1) != 0) {
            }
            if ((i & 2) != 0) {
            }
            if ((i & 4) != 0) {
            }
            if (!tLRPC$TL_forumTopic2.pinned) {
            }
            if ((i & 8) != 0) {
            }
            if ((i & 32) != 0) {
            }
            executeFast2 = this.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
            this.database.beginTransaction();
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_forumTopic2.getObjectSize());
            tLRPC$TL_forumTopic2.serializeToStream(nativeByteBuffer2);
            executeFast2.bindByteBuffer(1, nativeByteBuffer2);
            executeFast2.bindInteger(2, i4);
            if (tLRPC$TL_forumTopic2.hidden) {
            }
            executeFast2.bindInteger(3, i5);
            executeFast2.bindInteger(4, i2);
            executeFast2.bindLong(5, j);
            executeFast2.bindInteger(6, tLRPC$TL_forumTopic2.id);
            executeFast2.step();
            nativeByteBuffer2.reuse();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda130
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateTopicData$46(j, tLRPC$TL_forumTopic, i);
                }
            });
            executeFast = executeFast2;
        }
        if (executeFast != null) {
        }
        this.database.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicData$46(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, int i) {
        getMessagesController().getTopicsController().updateTopicInUi(j, tLRPC$TL_forumTopic, i);
    }

    public void loadTopics(final long j, final Consumer<ArrayList<TLRPC$TL_forumTopic>> consumer) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadTopics$49(j, consumer);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:119:0x028a A[Catch: Exception -> 0x01c9, all -> 0x02ac, TRY_ENTER, TRY_LEAVE, TryCatch #2 {Exception -> 0x01c9, blocks: (B:44:0x0124, B:46:0x012f, B:48:0x013c, B:49:0x0147, B:52:0x015a, B:54:0x0160, B:55:0x016b, B:79:0x01bc, B:88:0x01db, B:112:0x0265, B:119:0x028a, B:122:0x0297), top: B:158:0x0124 }] */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0297 A[Catch: Exception -> 0x01c9, all -> 0x02ac, TRY_ENTER, TRY_LEAVE, TryCatch #2 {Exception -> 0x01c9, blocks: (B:44:0x0124, B:46:0x012f, B:48:0x013c, B:49:0x0147, B:52:0x015a, B:54:0x0160, B:55:0x016b, B:79:0x01bc, B:88:0x01db, B:112:0x0265, B:119:0x028a, B:122:0x0297), top: B:158:0x0124 }] */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02cf  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x02db  */
    /* JADX WARN: Type inference failed for: r13v4 */
    /* JADX WARN: Type inference failed for: r13v5, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r13v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadTopics$49(long j, Consumer consumer) {
        SQLiteCursor sQLiteCursor;
        ArrayList<TLRPC$TL_forumTopic> arrayList;
        SQLiteCursor sQLiteCursor2;
        String sb;
        ArrayList<TLRPC$TL_forumTopic> arrayList2;
        int i;
        long j2;
        LongSparseArray<ArrayList<Integer>> longSparseArray;
        String str;
        NativeByteBuffer byteBufferValue;
        ArrayList<TLRPC$TL_forumTopic> arrayList3;
        ArrayList arrayList4;
        String str2 = ")";
        try {
            int i2 = 1;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT top_message, data, topic_message, unread_count, max_read_id, unread_mentions, unread_reactions, read_outbox, pinned, total_messages_count FROM topics WHERE did = %d ORDER BY pinned ASC", Long.valueOf(j)), new Object[0]);
            SparseArray sparseArray = null;
            HashSet hashSet = null;
            arrayList = null;
            while (queryFinalized.next()) {
                try {
                    if (arrayList == null) {
                        try {
                            try {
                                arrayList3 = new ArrayList<>();
                            } catch (Exception e) {
                                e = e;
                            }
                            try {
                                SparseArray sparseArray2 = new SparseArray();
                                hashSet = new HashSet();
                                arrayList = arrayList3;
                                sparseArray = sparseArray2;
                            } catch (Exception e2) {
                                e = e2;
                                arrayList = arrayList3;
                                sQLiteCursor = queryFinalized;
                                try {
                                    checkSQLException(e);
                                    if (sQLiteCursor != null) {
                                    }
                                    consumer.accept(arrayList);
                                } catch (Throwable th) {
                                    th = th;
                                    if (sQLiteCursor != null) {
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    int intValue = queryFinalized.intValue(0);
                    NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(i2);
                    if (byteBufferValue2 != null) {
                        TLRPC$TL_forumTopic TLdeserialize = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue2, byteBufferValue2.readInt32(false), false);
                        if (TLdeserialize != null) {
                            TLdeserialize.top_message = intValue;
                            ArrayList arrayList5 = (ArrayList) sparseArray.get(intValue);
                            if (arrayList5 == null) {
                                arrayList4 = new ArrayList();
                                sparseArray.put(intValue, arrayList4);
                            } else {
                                arrayList4 = arrayList5;
                            }
                            arrayList4.add(TLdeserialize);
                            hashSet.add(Integer.valueOf(intValue));
                            arrayList.add(TLdeserialize);
                            NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(2);
                            TLdeserialize.topicStartMessage = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                            byteBufferValue3.reuse();
                            TLdeserialize.unread_count = queryFinalized.intValue(3);
                            TLdeserialize.read_inbox_max_id = queryFinalized.intValue(4);
                            TLdeserialize.unread_mentions_count = queryFinalized.intValue(5);
                            TLdeserialize.unread_reactions_count = queryFinalized.intValue(6);
                            TLdeserialize.read_outbox_max_id = queryFinalized.intValue(7);
                            int intValue2 = queryFinalized.intValue(8) - 1;
                            TLdeserialize.pinnedOrder = intValue2;
                            TLdeserialize.pinned = intValue2 >= 0;
                            TLdeserialize.totalMessagesCount = queryFinalized.intValue(9);
                        }
                        byteBufferValue2.reuse();
                    }
                    i2 = 1;
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor2 = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor2 = queryFinalized;
                }
            }
            ArrayList<Long> arrayList6 = new ArrayList<>();
            ArrayList<Long> arrayList7 = new ArrayList<>();
            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray2 = new LongSparseArray<>();
            LongSparseArray<ArrayList<Integer>> longSparseArray3 = new LongSparseArray<>();
            if (arrayList == null || arrayList.isEmpty()) {
                sQLiteCursor2 = queryFinalized;
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb2 = new StringBuilder();
                sQLiteCursor2 = queryFinalized;
                try {
                    try {
                        sb2.append("SELECT mid, data, replydata FROM messages_v2 WHERE uid = ");
                        sb2.append(j);
                        sb2.append(" AND mid IN (");
                        sb2.append(TextUtils.join(",", hashSet));
                        sb2.append(")");
                        sb = sb2.toString();
                        arrayList2 = arrayList;
                        i = 0;
                    } catch (Exception e4) {
                        e = e4;
                    }
                    try {
                        SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb, new Object[0]);
                        while (queryFinalized2.next()) {
                            try {
                                int intValue3 = queryFinalized2.intValue(i);
                                NativeByteBuffer byteBufferValue4 = queryFinalized2.byteBufferValue(1);
                                if (byteBufferValue4 != null) {
                                    str = str2;
                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                    if (TLdeserialize2 != null) {
                                        TLdeserialize2.readAttachPath(byteBufferValue4, UserConfig.getInstance(this.currentAccount).clientUserId);
                                    }
                                    byteBufferValue4.reuse();
                                    hashSet.remove(Integer.valueOf(intValue3));
                                    ArrayList arrayList8 = (ArrayList) sparseArray.get(intValue3);
                                    if (arrayList8 != null) {
                                        for (int i3 = 0; i3 < arrayList8.size(); i3++) {
                                            ((TLRPC$TL_forumTopic) arrayList8.get(i3)).topMessage = TLdeserialize2;
                                        }
                                    }
                                    addUsersAndChatsFromMessage(TLdeserialize2, arrayList6, arrayList7, null);
                                    if (TLdeserialize2 != null) {
                                        try {
                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize2.reply_to;
                                            if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize2.action;
                                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (!queryFinalized2.isNull(2) && (byteBufferValue = queryFinalized2.byteBufferValue(2)) != null) {
                                                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                        TLdeserialize2.replyMessage = TLdeserialize3;
                                                        TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                        byteBufferValue.reuse();
                                                        TLRPC$Message tLRPC$Message = TLdeserialize2.replyMessage;
                                                        if (tLRPC$Message != null) {
                                                            addUsersAndChatsFromMessage(tLRPC$Message, arrayList6, arrayList7, null);
                                                        }
                                                    }
                                                    if (TLdeserialize2.replyMessage == null) {
                                                        addReplyMessages(TLdeserialize2, longSparseArray2, longSparseArray3);
                                                    }
                                                }
                                            }
                                        } catch (Exception e5) {
                                            checkSQLException(e5);
                                        }
                                    }
                                } else {
                                    str = str2;
                                }
                                str2 = str;
                                i = 0;
                            } catch (Exception e6) {
                                e = e6;
                                sQLiteCursor = sQLiteCursor2;
                                arrayList = arrayList2;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                consumer.accept(arrayList);
                            }
                        }
                        String str3 = str2;
                        queryFinalized2.dispose();
                        if (hashSet.isEmpty()) {
                            j2 = j;
                        } else {
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            StringBuilder sb3 = new StringBuilder();
                            sb3.append("SELECT mid, data FROM messages_topics WHERE uid = ");
                            j2 = j;
                            sb3.append(j2);
                            sb3.append(" AND mid IN (");
                            sb3.append(TextUtils.join(",", hashSet));
                            sb3.append(str3);
                            ?? r13 = 0;
                            SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(sb3.toString(), new Object[0]);
                            while (queryFinalized3.next()) {
                                try {
                                    int intValue4 = queryFinalized3.intValue(r13);
                                    NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(1);
                                    if (byteBufferValue5 != 0) {
                                        TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(r13), r13);
                                        if (TLdeserialize4 != null) {
                                            longSparseArray = longSparseArray3;
                                            try {
                                                TLdeserialize4.readAttachPath(byteBufferValue5, UserConfig.getInstance(this.currentAccount).clientUserId);
                                            } catch (Exception e7) {
                                                e = e7;
                                                checkSQLException(e);
                                                loadReplyMessages(longSparseArray2, longSparseArray, arrayList6, arrayList7, 0);
                                                final ArrayList<TLRPC$Chat> arrayList9 = new ArrayList<>();
                                                final ArrayList<TLRPC$User> arrayList10 = new ArrayList<>();
                                                if (!arrayList7.isEmpty()) {
                                                }
                                                if (!arrayList6.isEmpty()) {
                                                }
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda182
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$loadTopics$48(arrayList10, arrayList9);
                                                    }
                                                });
                                                arrayList = arrayList2;
                                                loadGroupedMessagesForTopics(j2, arrayList);
                                                sQLiteCursor2.dispose();
                                                consumer.accept(arrayList);
                                            }
                                        } else {
                                            longSparseArray = longSparseArray3;
                                        }
                                        byteBufferValue5.reuse();
                                        hashSet.remove(Integer.valueOf(intValue4));
                                        addUsersAndChatsFromMessage(TLdeserialize4, arrayList6, arrayList7, null);
                                        ArrayList arrayList11 = (ArrayList) sparseArray.get(intValue4);
                                        if (arrayList11 != null) {
                                            for (int i4 = 0; i4 < arrayList11.size(); i4++) {
                                                ((TLRPC$TL_forumTopic) arrayList11.get(i4)).topMessage = TLdeserialize4;
                                            }
                                        }
                                    } else {
                                        longSparseArray = longSparseArray3;
                                    }
                                    longSparseArray3 = longSparseArray;
                                    r13 = 0;
                                } catch (Exception e8) {
                                    e = e8;
                                    longSparseArray = longSparseArray3;
                                }
                            }
                        }
                        longSparseArray = longSparseArray3;
                        loadReplyMessages(longSparseArray2, longSparseArray, arrayList6, arrayList7, 0);
                        final ArrayList arrayList92 = new ArrayList<>();
                        final ArrayList arrayList102 = new ArrayList<>();
                        if (!arrayList7.isEmpty()) {
                            getChatsInternal(TextUtils.join(",", arrayList7), arrayList92);
                        }
                        if (!arrayList6.isEmpty()) {
                            getUsersInternal(arrayList6, arrayList102);
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda182
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$loadTopics$48(arrayList102, arrayList92);
                            }
                        });
                        arrayList = arrayList2;
                        loadGroupedMessagesForTopics(j2, arrayList);
                    } catch (Exception e9) {
                        e = e9;
                        arrayList = arrayList2;
                        sQLiteCursor = sQLiteCursor2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        consumer.accept(arrayList);
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = sQLiteCursor2;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            sQLiteCursor2.dispose();
        } catch (Exception e10) {
            e = e10;
            sQLiteCursor = null;
            arrayList = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
        consumer.accept(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadTopics$48(ArrayList arrayList, ArrayList arrayList2) {
        if (!arrayList.isEmpty()) {
            getMessagesController().putUsers(arrayList, true);
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        getMessagesController().putChats(arrayList2, true);
    }

    public void loadGroupedMessagesForTopicUpdates(ArrayList<TopicsController.TopicUpdate> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (!arrayList.get(i).reloadTopic && !arrayList.get(i).onlyCounters && arrayList.get(i).topMessage != null) {
                    long j = arrayList.get(i).topMessage.grouped_id;
                    if (j != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(((TopicsController.TopicUpdate) arrayList3.get(0)).dialogId), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TopicsController.TopicUpdate) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void loadGroupedMessagesForTopics(long j, ArrayList<TLRPC$TL_forumTopic> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i).topMessage != null) {
                    long j2 = arrayList.get(i).topMessage.grouped_id;
                    if (j2 != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j2);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j2, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(j), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TLRPC$TL_forumTopic) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void getSavedDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda124
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSavedDialogMaxMessageId$51(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0037, code lost:
        if (r2 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getSavedDialogMaxMessageId$51(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT MAX(mid) FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(getUserConfig().getClientUserId()), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getSavedDialogMaxMessageId$50(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getSavedDialogMaxMessageId$50(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    public void deleteSavedDialog(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda77
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteSavedDialog$53(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$53(long j) {
        final long clientUserId;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                clientUserId = getUserConfig().getClientUserId();
                queryFinalized = this.database.queryFinalized("SELECT mid FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(clientUserId), Long.valueOf(j));
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            final ArrayList<Integer> arrayList = new ArrayList<>();
            while (queryFinalized.next()) {
                arrayList.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT mid, data FROM messages_v2 WHERE uid = ?", Long.valueOf(clientUserId));
            while (queryFinalized2.next()) {
                int intValue = queryFinalized2.intValue(0);
                if (!arrayList.contains(Integer.valueOf(intValue))) {
                    NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                    if (MessageObject.getSavedDialogId(clientUserId, TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)) == j) {
                        arrayList.add(Integer.valueOf(intValue));
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized2.dispose();
            if (arrayList.isEmpty()) {
                return;
            }
            lambda$markMessagesAsDeleted$209(clientUserId, arrayList, true, 0, 0);
            updateDialogsWithDeletedMessages(clientUserId, -clientUserId, arrayList, null, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda113
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteSavedDialog$52(clientUserId, arrayList);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor3 = sQLiteCursor2;
            checkSQLException(e);
            if (sQLiteCursor3 != null) {
                sQLiteCursor3.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor3 = sQLiteCursor;
            if (sQLiteCursor3 != null) {
                sQLiteCursor3.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$52(long j, ArrayList arrayList) {
        getMessagesController().markDialogMessageAsDeleted(j, arrayList);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    public void removeTopic(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda81
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopic$54(j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopic$54(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void removeTopics(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda176
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopics$55(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopics$55(ArrayList arrayList, long j) {
        try {
            String join = TextUtils.join(", ", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void updateTopicsWithReadMessages(final HashMap<TopicKey, Integer> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicsWithReadMessages$56(hashMap);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicsWithReadMessages$56(HashMap hashMap) {
        for (TopicKey topicKey : hashMap.keySet()) {
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET read_outbox = max((SELECT read_outbox FROM topics WHERE did = %d AND topic_id = %d), %d) WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId), Integer.valueOf(((Integer) hashMap.get(topicKey)).intValue()), Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId))).stepThis().dispose();
            } catch (SQLiteException e) {
                checkSQLException(e);
            }
        }
    }

    public void setDialogTtl(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda51
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogTtl$57(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogTtl$57(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET ttl_period = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (SQLiteException e) {
            checkSQLException(e);
        }
    }

    public ArrayList<File> getDatabaseFiles() {
        ArrayList<File> arrayList = new ArrayList<>();
        arrayList.add(this.cacheFile);
        arrayList.add(this.walCacheFile);
        arrayList.add(this.shmCacheFile);
        return arrayList;
    }

    public void reset() {
        clearDatabaseValues();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$reset$58();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reset$58() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().clearFilters();
        getUserConfig().clearPinnedDialogsLoaded();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMediaDataController().loadAttachMenuBots(false, true);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getMessagesController().getStoriesController().cleanup();
    }

    public void fullReset() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda25
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$60();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$60() {
        cleanupInternal(true);
        clearLoadingDialogsOffsets();
        openDatabase(1);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$59();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$59() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMessagesController().getSavedMessagesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    public void readAllDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$readAllDialogs$62(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$62(int i) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList = new ArrayList<>();
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                final LongSparseArray longSparseArray = new LongSparseArray();
                if (i >= 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", Integer.valueOf(i)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
                }
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (!DialogObject.isFolderDialogId(longValue)) {
                            ReadDialog readDialog = new ReadDialog();
                            readDialog.lastMid = queryFinalized.intValue(1);
                            readDialog.unreadCount = queryFinalized.intValue(2);
                            readDialog.date = queryFinalized.intValue(3);
                            longSparseArray.put(longValue, readDialog);
                            if (!DialogObject.isEncryptedDialog(longValue)) {
                                if (DialogObject.isChatDialog(longValue)) {
                                    long j = -longValue;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        arrayList2.add(Long.valueOf(j));
                                    }
                                } else if (!arrayList.contains(Long.valueOf(longValue))) {
                                    arrayList.add(Long.valueOf(longValue));
                                }
                            } else {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList3.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                        }
                    } catch (Exception e) {
                        sQLiteCursor = queryFinalized;
                        e = e;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        sQLiteCursor = queryFinalized;
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                final ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                final ArrayList<TLRPC$Chat> arrayList5 = new ArrayList<>();
                final ArrayList<TLRPC$EncryptedChat> arrayList6 = new ArrayList<>();
                if (!arrayList3.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList6, arrayList);
                }
                if (!arrayList.isEmpty()) {
                    getUsersInternal(arrayList, arrayList4);
                }
                if (!arrayList2.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList2), arrayList5);
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda184
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$readAllDialogs$61(arrayList4, arrayList5, arrayList6, longSparseArray);
                    }
                });
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$61(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, 0L, readDialog.unreadCount, true, 0);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x0089  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x008b  */
    /* JADX WARN: Removed duplicated region for block: B:190:0x03fe  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x00a0  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00a9  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00ab  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00bf A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00e8 A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00f2  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0107 A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:75:0x01b7  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x01c0 A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x01cf A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x01e7 A[Catch: all -> 0x03ed, Exception -> 0x03f0, TryCatch #0 {Exception -> 0x03f0, blocks: (B:4:0x002d, B:6:0x0035, B:8:0x005d, B:14:0x006d, B:18:0x008c, B:22:0x00a3, B:26:0x00ac, B:28:0x00bf, B:30:0x00c7, B:31:0x00cc, B:33:0x00e8, B:35:0x00f4, B:37:0x0107, B:39:0x0112, B:41:0x0137, B:43:0x013e, B:76:0x01ba, B:78:0x01c0, B:80:0x01c6, B:81:0x01c9, B:83:0x01cf, B:85:0x01df, B:86:0x01e7, B:88:0x01ef, B:90:0x01f9, B:91:0x0201, B:93:0x020c, B:73:0x01ac, B:74:0x01b0, B:95:0x021a), top: B:194:0x002d }] */
    /* JADX WARN: Type inference failed for: r1v2 */
    /* JADX WARN: Type inference failed for: r1v3, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r1v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$messages_Dialogs loadDialogsByIds(String str, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Integer> arrayList3) throws Exception {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLiteCursor queryFinalized;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        NativeByteBuffer byteBufferValue2;
        long j;
        int i2;
        long longValue;
        long longValue2;
        long j2;
        NativeByteBuffer byteBufferValue3;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2;
        TLRPC$TL_dialog tLRPC$TL_dialog;
        ArrayList<Integer> arrayList4;
        NativeByteBuffer byteBufferValue4;
        MessagesStorage messagesStorage = this;
        ArrayList<Long> arrayList5 = arrayList;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs3 = new TLRPC$TL_messages_dialogs();
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        try {
            int i3 = 1;
            int i4 = 0;
            SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", str), new Object[0]);
            while (true) {
                try {
                    try {
                        i = 2;
                        if (!queryFinalized2.next()) {
                            break;
                        }
                        long longValue3 = queryFinalized2.longValue(i4);
                        TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog2.id = longValue3;
                        tLRPC$TL_dialog2.top_message = queryFinalized2.intValue(i3);
                        tLRPC$TL_dialog2.unread_count = queryFinalized2.intValue(2);
                        tLRPC$TL_dialog2.last_message_date = queryFinalized2.intValue(3);
                        int intValue = queryFinalized2.intValue(10);
                        tLRPC$TL_dialog2.pts = intValue;
                        if (intValue != 0) {
                            j = longValue3;
                            if (!DialogObject.isUserDialog(tLRPC$TL_dialog2.id)) {
                                i2 = 1;
                                tLRPC$TL_dialog2.flags = i2;
                                tLRPC$TL_dialog2.read_inbox_max_id = queryFinalized2.intValue(11);
                                tLRPC$TL_dialog2.read_outbox_max_id = queryFinalized2.intValue(12);
                                int intValue2 = queryFinalized2.intValue(14);
                                tLRPC$TL_dialog2.pinnedNum = intValue2;
                                tLRPC$TL_dialog2.pinned = intValue2 == 0;
                                tLRPC$TL_dialog2.unread_mentions_count = queryFinalized2.intValue(15);
                                int intValue3 = queryFinalized2.intValue(16);
                                tLRPC$TL_dialog2.unread_mark = (intValue3 & 1) == 0;
                                tLRPC$TL_dialog2.view_forum_as_messages = (intValue3 & 64) == 0;
                                longValue = queryFinalized2.longValue(8);
                                TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                                tLRPC$TL_dialog2.notify_settings = tLRPC$TL_peerNotifySettings;
                                if ((((int) longValue) & i3) != 0) {
                                    int i5 = (int) (longValue >> 32);
                                    tLRPC$TL_peerNotifySettings.mute_until = i5;
                                    if (i5 == 0) {
                                        tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    }
                                }
                                tLRPC$TL_dialog2.folder_id = queryFinalized2.intValue(17);
                                tLRPC$TL_dialog2.unread_reactions_count = queryFinalized2.intValue(19);
                                longValue2 = queryFinalized2.longValue(20);
                                if (longValue2 == 0) {
                                    Long valueOf = Long.valueOf(longValue2);
                                    j2 = j;
                                    longSparseArray2.append(j2, valueOf);
                                } else {
                                    j2 = j;
                                }
                                tLRPC$TL_dialog2.ttl_period = queryFinalized2.intValue(21);
                                tLRPC$TL_messages_dialogs3.dialogs.add(tLRPC$TL_dialog2);
                                byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                                if (byteBufferValue3 == null) {
                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                    if (TLdeserialize != null) {
                                        TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                        byteBufferValue3.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                        TLdeserialize.id = queryFinalized2.intValue(6);
                                        int intValue4 = queryFinalized2.intValue(9);
                                        if (intValue4 != 0) {
                                            tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                            tLRPC$TL_dialog.last_message_date = intValue4;
                                        } else {
                                            tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                        }
                                        TLdeserialize.send_state = queryFinalized2.intValue(7);
                                        TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                        tLRPC$TL_messages_dialogs3.messages.add(TLdeserialize);
                                        addUsersAndChatsFromMessage(TLdeserialize, arrayList5, arrayList2, null);
                                        try {
                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                            if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (queryFinalized2.isNull(13) || (byteBufferValue4 = queryFinalized2.byteBufferValue(13)) == null) {
                                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                                    } else {
                                                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                        TLdeserialize.replyMessage = TLdeserialize2;
                                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                                        try {
                                                            TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                            byteBufferValue4.reuse();
                                                            TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                            if (tLRPC$Message != null) {
                                                                addUsersAndChatsFromMessage(tLRPC$Message, arrayList5, arrayList2, null);
                                                            }
                                                        } catch (Exception e) {
                                                            e = e;
                                                            messagesStorage.checkSQLException(e);
                                                            if (!DialogObject.isEncryptedDialog(j2)) {
                                                            }
                                                            if (DialogObject.isEncryptedDialog(j2)) {
                                                            }
                                                            tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                                                            i3 = 1;
                                                            i4 = 0;
                                                        }
                                                    }
                                                    if (TLdeserialize.replyMessage == null) {
                                                        longSparseArray.put(tLRPC$TL_dialog.id, TLdeserialize);
                                                    }
                                                }
                                            }
                                            tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        } catch (Exception e2) {
                                            e = e2;
                                            tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        }
                                    } else {
                                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                        tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                        byteBufferValue3.reuse();
                                    }
                                } else {
                                    tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                    tLRPC$TL_dialog = tLRPC$TL_dialog2;
                                }
                                if (!DialogObject.isEncryptedDialog(j2) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                    tLRPC$TL_dialog.read_inbox_max_id = 0;
                                }
                                if (DialogObject.isEncryptedDialog(j2)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(j2);
                                    arrayList4 = arrayList3;
                                    if (!arrayList4.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList4.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else {
                                    arrayList4 = arrayList3;
                                    if (DialogObject.isUserDialog(j2)) {
                                        if (!arrayList5.contains(Long.valueOf(j2))) {
                                            arrayList5.add(Long.valueOf(j2));
                                        }
                                    } else {
                                        long j3 = -j2;
                                        if (!arrayList2.contains(Long.valueOf(j3))) {
                                            arrayList2.add(Long.valueOf(j3));
                                        }
                                    }
                                }
                                tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                                i3 = 1;
                                i4 = 0;
                            }
                        } else {
                            j = longValue3;
                        }
                        i2 = 0;
                        tLRPC$TL_dialog2.flags = i2;
                        tLRPC$TL_dialog2.read_inbox_max_id = queryFinalized2.intValue(11);
                        tLRPC$TL_dialog2.read_outbox_max_id = queryFinalized2.intValue(12);
                        int intValue22 = queryFinalized2.intValue(14);
                        tLRPC$TL_dialog2.pinnedNum = intValue22;
                        tLRPC$TL_dialog2.pinned = intValue22 == 0;
                        tLRPC$TL_dialog2.unread_mentions_count = queryFinalized2.intValue(15);
                        int intValue32 = queryFinalized2.intValue(16);
                        tLRPC$TL_dialog2.unread_mark = (intValue32 & 1) == 0;
                        tLRPC$TL_dialog2.view_forum_as_messages = (intValue32 & 64) == 0;
                        longValue = queryFinalized2.longValue(8);
                        TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                        tLRPC$TL_dialog2.notify_settings = tLRPC$TL_peerNotifySettings2;
                        if ((((int) longValue) & i3) != 0) {
                        }
                        tLRPC$TL_dialog2.folder_id = queryFinalized2.intValue(17);
                        tLRPC$TL_dialog2.unread_reactions_count = queryFinalized2.intValue(19);
                        longValue2 = queryFinalized2.longValue(20);
                        if (longValue2 == 0) {
                        }
                        tLRPC$TL_dialog2.ttl_period = queryFinalized2.intValue(21);
                        tLRPC$TL_messages_dialogs3.dialogs.add(tLRPC$TL_dialog2);
                        byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                        if (byteBufferValue3 == null) {
                        }
                        if (!DialogObject.isEncryptedDialog(j2)) {
                            tLRPC$TL_dialog.read_inbox_max_id = 0;
                        }
                        if (DialogObject.isEncryptedDialog(j2)) {
                        }
                        tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                        i3 = 1;
                        i4 = 0;
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = queryFinalized2;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized2;
                }
            }
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs3;
            queryFinalized2.dispose();
            if (longSparseArray2.isEmpty()) {
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                queryFinalized = null;
            } else {
                try {
                    StringBuilder sb = new StringBuilder();
                    int i6 = 0;
                    while (i6 < longSparseArray2.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray2.keyAt(i6));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray2.valueAt(i6));
                        i6++;
                        if (i6 < longSparseArray2.size()) {
                            sb.append(" OR ");
                        }
                    }
                    int i7 = 0;
                    queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            try {
                                long longValue4 = queryFinalized.longValue(i7);
                                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs5 = tLRPC$TL_messages_dialogs4;
                                int i8 = 0;
                                while (true) {
                                    if (i8 >= tLRPC$TL_messages_dialogs5.dialogs.size()) {
                                        tLRPC$Dialog = null;
                                        break;
                                    }
                                    tLRPC$Dialog = tLRPC$TL_messages_dialogs5.dialogs.get(i8);
                                    if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                        break;
                                    }
                                    i8++;
                                }
                                if (tLRPC$Dialog != null && (byteBufferValue = queryFinalized.byteBufferValue(1)) != null) {
                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    if (TLdeserialize3 != null) {
                                        TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                        TLdeserialize3.id = queryFinalized.intValue(3);
                                        int intValue5 = queryFinalized.intValue(5);
                                        if (intValue5 != 0) {
                                            tLRPC$Dialog.last_message_date = intValue5;
                                        }
                                        TLdeserialize3.send_state = queryFinalized.intValue(4);
                                        TLdeserialize3.dialog_id = tLRPC$Dialog.id;
                                        tLRPC$TL_messages_dialogs5.messages.add(TLdeserialize3);
                                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList5, arrayList2, null);
                                        try {
                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = TLdeserialize3.reply_to;
                                            if (tLRPC$MessageReplyHeader2 != null && tLRPC$MessageReplyHeader2.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (!queryFinalized.isNull(6) && (byteBufferValue2 = queryFinalized.byteBufferValue(6)) != null) {
                                                        TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                        TLdeserialize3.replyMessage = TLdeserialize4;
                                                        TLdeserialize4.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                        if (tLRPC$Message2 != null) {
                                                            addUsersAndChatsFromMessage(tLRPC$Message2, arrayList5, arrayList2, null);
                                                        }
                                                    }
                                                    if (TLdeserialize3.replyMessage == null) {
                                                        longSparseArray.put(tLRPC$Dialog.id, TLdeserialize3);
                                                    }
                                                }
                                            }
                                        } catch (Exception e4) {
                                            messagesStorage.checkSQLException(e4);
                                        }
                                    } else {
                                        byteBufferValue.reuse();
                                    }
                                }
                                tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs5;
                                i7 = 0;
                            } catch (Exception e5) {
                                e = e5;
                                sQLiteCursor = queryFinalized;
                                try {
                                    throw e;
                                } catch (Throwable th2) {
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                    queryFinalized.dispose();
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor = null;
                    throw e;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            if (!longSparseArray.isEmpty()) {
                int size = longSparseArray.size();
                int i9 = 0;
                while (i9 < size) {
                    long keyAt = longSparseArray.keyAt(i9);
                    TLRPC$Message tLRPC$Message3 = (TLRPC$Message) longSparseArray.valueAt(i9);
                    SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                    Locale locale = Locale.US;
                    Object[] objArr = new Object[i];
                    ?? r1 = 0;
                    objArr[0] = Integer.valueOf(tLRPC$Message3.id);
                    objArr[1] = Long.valueOf(keyAt);
                    SQLiteCursor queryFinalized3 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid = %d and uid = %d", objArr), new Object[0]);
                    while (queryFinalized3.next()) {
                        NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(r1);
                        if (byteBufferValue5 != null) {
                            TLRPC$Message TLdeserialize5 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(r1), r1);
                            TLdeserialize5.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                            byteBufferValue5.reuse();
                            TLdeserialize5.id = queryFinalized3.intValue(1);
                            TLdeserialize5.date = queryFinalized3.intValue(2);
                            TLdeserialize5.dialog_id = queryFinalized3.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize5, arrayList5, arrayList2, null);
                            tLRPC$Message3.replyMessage = TLdeserialize5;
                            TLdeserialize5.dialog_id = tLRPC$Message3.dialog_id;
                        }
                        arrayList5 = arrayList;
                        r1 = 0;
                    }
                    queryFinalized3.dispose();
                    i9++;
                    messagesStorage = this;
                    arrayList5 = arrayList;
                    i = 2;
                }
            }
            if (queryFinalized != null) {
                queryFinalized.dispose();
            }
            return tLRPC$TL_messages_dialogs;
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadDialogFilters$64();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0267  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x026c  */
    /* JADX WARN: Removed duplicated region for block: B:127:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0260  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadDialogFilters$64() {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        SQLiteCursor queryFinalized;
        try {
            ArrayList<Long> arrayList = new ArrayList<>();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            ArrayList<Integer> arrayList3 = new ArrayList<>();
            ArrayList arrayList4 = new ArrayList();
            SparseArray sparseArray = new SparseArray();
            arrayList.add(Long.valueOf(getUserConfig().getClientUserId()));
            int i = 0;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title, color FROM dialog_filter WHERE 1", new Object[0]);
            boolean z = false;
            boolean z2 = false;
            while (queryFinalized2.next()) {
                try {
                    MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                    dialogFilter.id = queryFinalized2.intValue(i);
                    dialogFilter.order = queryFinalized2.intValue(1);
                    dialogFilter.unreadCount = -1;
                    dialogFilter.pendingUnreadCount = -1;
                    dialogFilter.flags = queryFinalized2.intValue(3);
                    dialogFilter.name = queryFinalized2.stringValue(4);
                    dialogFilter.color = queryFinalized2.intValue(5);
                    this.dialogFilters.add(dialogFilter);
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                    sparseArray.put(dialogFilter.id, dialogFilter);
                    if (dialogFilter.pendingUnreadCount < 0) {
                        z2 = true;
                    }
                    int i2 = 0;
                    while (i2 < 2) {
                        if (i2 == 0) {
                            queryFinalized = this.database.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]);
                        } else {
                            queryFinalized = this.database.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                        }
                        while (queryFinalized.next()) {
                            long longValue = queryFinalized.longValue(i);
                            if (i2 == 0) {
                                if (!DialogObject.isEncryptedDialog(longValue)) {
                                    dialogFilter.alwaysShow.add(Long.valueOf(longValue));
                                }
                                int intValue = queryFinalized.intValue(1);
                                if (intValue != Integer.MIN_VALUE) {
                                    dialogFilter.pinnedDialogs.put(longValue, intValue);
                                    if (!arrayList4.contains(Long.valueOf(longValue))) {
                                        arrayList4.add(Long.valueOf(longValue));
                                    }
                                }
                            } else if (!DialogObject.isEncryptedDialog(longValue)) {
                                dialogFilter.neverShow.add(Long.valueOf(longValue));
                            }
                            if (DialogObject.isChatDialog(longValue)) {
                                long j = -longValue;
                                if (!arrayList2.contains(Long.valueOf(j))) {
                                    arrayList2.add(Long.valueOf(j));
                                }
                            } else if (DialogObject.isUserDialog(longValue)) {
                                if (!arrayList.contains(Long.valueOf(longValue))) {
                                    arrayList.add(Long.valueOf(longValue));
                                }
                            } else {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList3.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                            i = 0;
                        }
                        queryFinalized.dispose();
                        i2++;
                        i = 0;
                    }
                    if (dialogFilter.id == 0) {
                        z = true;
                    }
                    i = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized2;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized2;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            queryFinalized2.dispose();
            if (!z) {
                MessagesController.DialogFilter dialogFilter2 = new MessagesController.DialogFilter();
                dialogFilter2.id = 0;
                dialogFilter2.order = 0;
                dialogFilter2.color = -1;
                dialogFilter2.name = "ALL_CHATS";
                for (int i3 = 0; i3 < this.dialogFilters.size(); i3++) {
                    this.dialogFilters.get(i3).order++;
                }
                this.dialogFilters.add(dialogFilter2);
                this.dialogFiltersMap.put(dialogFilter2.id, dialogFilter2);
                sparseArray.put(dialogFilter2.id, dialogFilter2);
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
                try {
                    executeFast.bindInteger(1, dialogFilter2.id);
                    executeFast.bindInteger(2, dialogFilter2.order);
                    executeFast.bindInteger(3, dialogFilter2.unreadCount);
                    executeFast.bindInteger(4, dialogFilter2.flags);
                    executeFast.bindString(5, dialogFilter2.name);
                    executeFast.bindInteger(6, dialogFilter2.color);
                    executeFast.stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda239
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$loadDialogFilters$63;
                    lambda$loadDialogFilters$63 = MessagesStorage.lambda$loadDialogFilters$63((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$loadDialogFilters$63;
                }
            });
            if (z2) {
                calcUnreadCounters(true);
            }
            if (!arrayList4.isEmpty()) {
                tLRPC$TL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3);
            } else {
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = tLRPC$TL_messages_dialogs;
            ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList7 = new ArrayList<>();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList7, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(arrayList, arrayList5);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList6);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, null, arrayList5, arrayList6, arrayList7, 0, null);
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$loadDialogFilters$63(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:241:0x04f1, code lost:
        if (r13.indexOfKey(r6.id) >= 0) goto L259;
     */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0340  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x047f A[Catch: all -> 0x0684, Exception -> 0x0688, TryCatch #5 {Exception -> 0x0688, all -> 0x0684, blocks: (B:7:0x000a, B:8:0x002b, B:9:0x002e, B:46:0x0122, B:48:0x014a, B:50:0x0155, B:52:0x0179, B:55:0x0183, B:56:0x018a, B:58:0x018e, B:66:0x01b7, B:59:0x0199, B:61:0x019d, B:64:0x01a2, B:65:0x01ad, B:67:0x01c7, B:70:0x01d5, B:72:0x01ee, B:74:0x01f9, B:75:0x020b, B:77:0x0214, B:94:0x0281, B:80:0x0229, B:82:0x0244, B:85:0x024e, B:86:0x0255, B:88:0x0259, B:91:0x025e, B:93:0x0273, B:92:0x0269, B:96:0x028a, B:98:0x0292, B:100:0x02a4, B:102:0x02b0, B:105:0x02b7, B:107:0x02d1, B:112:0x02e1, B:115:0x02ec, B:116:0x02f4, B:118:0x02fa, B:120:0x02fe, B:122:0x0313, B:124:0x032d, B:121:0x0309, B:123:0x031b, B:125:0x0333, B:126:0x033c, B:129:0x0342, B:132:0x0352, B:142:0x036c, B:144:0x0371, B:146:0x0376, B:148:0x0383, B:151:0x038d, B:153:0x0392, B:155:0x03a0, B:157:0x03a7, B:159:0x03ac, B:161:0x03b1, B:163:0x03be, B:164:0x03c4, B:166:0x03c9, B:168:0x03d7, B:169:0x03dc, B:171:0x03e1, B:173:0x03e6, B:175:0x03f3, B:176:0x03f9, B:178:0x03fe, B:180:0x040c, B:181:0x0411, B:183:0x0416, B:185:0x041b, B:187:0x0428, B:188:0x042e, B:190:0x0433, B:192:0x0441, B:193:0x0446, B:195:0x044b, B:197:0x0450, B:199:0x045d, B:200:0x0463, B:202:0x0468, B:204:0x0476, B:207:0x047f, B:209:0x0488, B:216:0x04a8, B:224:0x04c8, B:226:0x04cc, B:234:0x04dd, B:236:0x04e0, B:250:0x050b, B:238:0x04e4, B:240:0x04e9, B:242:0x04f3, B:244:0x04f7, B:246:0x04fc, B:227:0x04cf, B:229:0x04d3, B:232:0x04d8, B:233:0x04db, B:220:0x04b8, B:275:0x056b, B:252:0x051c, B:254:0x052d, B:256:0x0533, B:258:0x0537, B:260:0x053c, B:262:0x053f, B:263:0x0542, B:265:0x0547, B:267:0x0550, B:270:0x055c, B:272:0x0561, B:259:0x053a, B:276:0x0578, B:278:0x0585, B:286:0x05a2, B:293:0x05bb, B:295:0x05bf, B:303:0x05d0, B:305:0x05d3, B:307:0x05d8, B:311:0x05e5, B:313:0x05ea, B:315:0x05f2, B:318:0x05f9, B:296:0x05c2, B:298:0x05c6, B:301:0x05cb, B:302:0x05ce, B:290:0x05b1, B:341:0x064d, B:320:0x0605, B:322:0x0612, B:324:0x0618, B:326:0x061c, B:328:0x0621, B:330:0x0624, B:332:0x0629, B:334:0x0632, B:336:0x0637, B:338:0x0640, B:340:0x064b, B:327:0x061f, B:342:0x0655, B:344:0x0659, B:348:0x0662, B:350:0x0666, B:351:0x0669, B:353:0x066d, B:355:0x0671, B:133:0x0355, B:135:0x0359, B:137:0x0361, B:138:0x0364, B:139:0x0366, B:140:0x0368), top: B:383:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:346:0x065e  */
    /* JADX WARN: Removed duplicated region for block: B:369:0x0690  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x0698  */
    /* JADX WARN: Removed duplicated region for block: B:440:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0292 A[Catch: all -> 0x0684, Exception -> 0x0688, TryCatch #5 {Exception -> 0x0688, all -> 0x0684, blocks: (B:7:0x000a, B:8:0x002b, B:9:0x002e, B:46:0x0122, B:48:0x014a, B:50:0x0155, B:52:0x0179, B:55:0x0183, B:56:0x018a, B:58:0x018e, B:66:0x01b7, B:59:0x0199, B:61:0x019d, B:64:0x01a2, B:65:0x01ad, B:67:0x01c7, B:70:0x01d5, B:72:0x01ee, B:74:0x01f9, B:75:0x020b, B:77:0x0214, B:94:0x0281, B:80:0x0229, B:82:0x0244, B:85:0x024e, B:86:0x0255, B:88:0x0259, B:91:0x025e, B:93:0x0273, B:92:0x0269, B:96:0x028a, B:98:0x0292, B:100:0x02a4, B:102:0x02b0, B:105:0x02b7, B:107:0x02d1, B:112:0x02e1, B:115:0x02ec, B:116:0x02f4, B:118:0x02fa, B:120:0x02fe, B:122:0x0313, B:124:0x032d, B:121:0x0309, B:123:0x031b, B:125:0x0333, B:126:0x033c, B:129:0x0342, B:132:0x0352, B:142:0x036c, B:144:0x0371, B:146:0x0376, B:148:0x0383, B:151:0x038d, B:153:0x0392, B:155:0x03a0, B:157:0x03a7, B:159:0x03ac, B:161:0x03b1, B:163:0x03be, B:164:0x03c4, B:166:0x03c9, B:168:0x03d7, B:169:0x03dc, B:171:0x03e1, B:173:0x03e6, B:175:0x03f3, B:176:0x03f9, B:178:0x03fe, B:180:0x040c, B:181:0x0411, B:183:0x0416, B:185:0x041b, B:187:0x0428, B:188:0x042e, B:190:0x0433, B:192:0x0441, B:193:0x0446, B:195:0x044b, B:197:0x0450, B:199:0x045d, B:200:0x0463, B:202:0x0468, B:204:0x0476, B:207:0x047f, B:209:0x0488, B:216:0x04a8, B:224:0x04c8, B:226:0x04cc, B:234:0x04dd, B:236:0x04e0, B:250:0x050b, B:238:0x04e4, B:240:0x04e9, B:242:0x04f3, B:244:0x04f7, B:246:0x04fc, B:227:0x04cf, B:229:0x04d3, B:232:0x04d8, B:233:0x04db, B:220:0x04b8, B:275:0x056b, B:252:0x051c, B:254:0x052d, B:256:0x0533, B:258:0x0537, B:260:0x053c, B:262:0x053f, B:263:0x0542, B:265:0x0547, B:267:0x0550, B:270:0x055c, B:272:0x0561, B:259:0x053a, B:276:0x0578, B:278:0x0585, B:286:0x05a2, B:293:0x05bb, B:295:0x05bf, B:303:0x05d0, B:305:0x05d3, B:307:0x05d8, B:311:0x05e5, B:313:0x05ea, B:315:0x05f2, B:318:0x05f9, B:296:0x05c2, B:298:0x05c6, B:301:0x05cb, B:302:0x05ce, B:290:0x05b1, B:341:0x064d, B:320:0x0605, B:322:0x0612, B:324:0x0618, B:326:0x061c, B:328:0x0621, B:330:0x0624, B:332:0x0629, B:334:0x0632, B:336:0x0637, B:338:0x0640, B:340:0x064b, B:327:0x061f, B:342:0x0655, B:344:0x0659, B:348:0x0662, B:350:0x0666, B:351:0x0669, B:353:0x066d, B:355:0x0671, B:133:0x0355, B:135:0x0359, B:137:0x0361, B:138:0x0364, B:139:0x0366, B:140:0x0368), top: B:383:0x000a }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcUnreadCounters(boolean z) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        int i;
        LongSparseArray longSparseArray;
        int size;
        int i2;
        int i3;
        int i4;
        MessagesController.DialogFilter dialogFilter;
        int i5;
        LongSparseArray longSparseArray2;
        int i6;
        MessagesController.DialogFilter dialogFilter2;
        int i7;
        int i8;
        MessagesController.DialogFilter dialogFilter3;
        int i9;
        int i10;
        int i11;
        MessagesController.DialogFilter dialogFilter4;
        int i12;
        LongSparseArray longSparseArray3;
        int i13;
        int i14;
        MessagesController.DialogFilter dialogFilter5;
        LongSparseArray longSparseArray4;
        int i15;
        int i16;
        LongSparseArray longSparseArray5;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        LongSparseArray longSparseArray6;
        int i17;
        int intValue;
        LongSparseIntArray longSparseIntArray;
        int i18 = 0;
        for (int i19 = 0; i19 < 2; i19++) {
            try {
                for (int i20 = 0; i20 < 2; i20++) {
                    try {
                        int[] iArr = this.contacts[i19];
                        int[] iArr2 = this.nonContacts[i19];
                        int[] iArr3 = this.bots[i19];
                        int[] iArr4 = this.channels[i19];
                        this.groups[i19][i20] = 0;
                        iArr4[i20] = 0;
                        iArr3[i20] = 0;
                        iArr2[i20] = 0;
                        iArr[i20] = 0;
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor2 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor2 == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
            } catch (Throwable th3) {
                th = th3;
            }
        }
        this.dialogsWithMentions.clear();
        this.dialogsWithUnread.clear();
        ArrayList<TLRPC$User> arrayList = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList3 = new ArrayList<>();
        ArrayList<Long> arrayList4 = new ArrayList<>();
        ArrayList arrayList5 = new ArrayList();
        ArrayList arrayList6 = new ArrayList();
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        LongSparseIntArray longSparseIntArray3 = new LongSparseIntArray();
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT DISTINCT did FROM topics WHERE unread_count > 0 OR unread_mentions > 0", new Object[0]);
        while (true) {
            try {
                i = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(0);
                if (isForum(longValue)) {
                    longSparseIntArray3.put(longValue, 1);
                }
            } catch (Exception e2) {
                exc = e2;
                sQLiteCursor2 = queryFinalized;
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        }
        queryFinalized.dispose();
        sQLiteCursor2 = this.database.queryFinalized("SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0", new Object[0]);
        while (sQLiteCursor2.next()) {
            try {
                int intValue2 = sQLiteCursor2.intValue(i);
                long longValue2 = sQLiteCursor2.longValue(i18);
                if (isForum(longValue2)) {
                    int i21 = longSparseIntArray3.get(longValue2, i18);
                    if (i21 != 0) {
                        intValue = i21;
                    }
                } else {
                    intValue = sQLiteCursor2.intValue(2);
                    i18 = sQLiteCursor2.intValue(3);
                }
                if (intValue > 0) {
                    longSparseIntArray = longSparseIntArray3;
                    this.dialogsWithUnread.put(longValue2, Integer.valueOf(intValue));
                } else {
                    longSparseIntArray = longSparseIntArray3;
                }
                if (i18 > 0) {
                    this.dialogsWithMentions.put(longValue2, Integer.valueOf(i18));
                }
                longSparseIntArray2.put(longValue2, intValue2);
                if (DialogObject.isEncryptedDialog(longValue2)) {
                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                    if (!arrayList6.contains(Integer.valueOf(encryptedChatId))) {
                        arrayList6.add(Integer.valueOf(encryptedChatId));
                    }
                } else if (DialogObject.isUserDialog(longValue2)) {
                    if (!arrayList4.contains(Long.valueOf(longValue2))) {
                        arrayList4.add(Long.valueOf(longValue2));
                    }
                } else {
                    long j = -longValue2;
                    if (!arrayList5.contains(Long.valueOf(j))) {
                        arrayList5.add(Long.valueOf(j));
                    }
                }
                longSparseIntArray3 = longSparseIntArray;
                i18 = 0;
                i = 1;
            } catch (Exception e3) {
                exc = e3;
                checkSQLException(exc);
                if (sQLiteCursor2 == null) {
                    sQLiteCursor2.dispose();
                    return;
                }
                return;
            }
        }
        sQLiteCursor2.dispose();
        LongSparseArray longSparseArray7 = new LongSparseArray();
        LongSparseArray longSparseArray8 = new LongSparseArray();
        LongSparseArray longSparseArray9 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray4 = new LongSparseIntArray();
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseArray longSparseArray11 = new LongSparseArray();
        LongSparseArray longSparseArray12 = longSparseArray8;
        LongSparseArray longSparseArray13 = longSparseArray9;
        if (!arrayList4.isEmpty()) {
            getUsersInternal(arrayList4, arrayList, true);
            int size2 = arrayList.size();
            int i22 = 0;
            while (i22 < size2) {
                TLRPC$User tLRPC$User = arrayList.get(i22);
                ArrayList<TLRPC$Chat> arrayList7 = arrayList3;
                int i23 = size2;
                ArrayList arrayList8 = arrayList5;
                ArrayList arrayList9 = arrayList6;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0L);
                int i24 = longSparseIntArray2.get(tLRPC$User.id);
                if (isDialogMuted) {
                    longSparseArray10.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (i24 == 1) {
                    longSparseArray11.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr5 = this.bots[i24];
                    iArr5[isDialogMuted ? 1 : 0] = iArr5[isDialogMuted ? 1 : 0] + 1;
                } else {
                    if (!tLRPC$User.self && !tLRPC$User.contact) {
                        int[] iArr6 = this.nonContacts[i24];
                        iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                    }
                    int[] iArr7 = this.contacts[i24];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray7.put(tLRPC$User.id, tLRPC$User);
                i22++;
                arrayList3 = arrayList7;
                size2 = i23;
                arrayList5 = arrayList8;
                arrayList6 = arrayList9;
            }
        }
        ArrayList<TLRPC$Chat> arrayList10 = arrayList3;
        ArrayList arrayList11 = arrayList5;
        ArrayList arrayList12 = arrayList6;
        if (!arrayList12.isEmpty()) {
            ArrayList<Long> arrayList13 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList14 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList12), arrayList14, arrayList13);
            if (!arrayList13.isEmpty()) {
                getUsersInternal(arrayList13, arrayList2, true);
                int size3 = arrayList2.size();
                int i25 = 0;
                while (i25 < size3) {
                    TLRPC$User tLRPC$User2 = arrayList2.get(i25);
                    LongSparseArray longSparseArray14 = longSparseArray13;
                    longSparseArray14.put(tLRPC$User2.id, tLRPC$User2);
                    i25++;
                    longSparseArray13 = longSparseArray14;
                }
                longSparseArray = longSparseArray13;
                int size4 = arrayList14.size();
                int i26 = 0;
                while (i26 < size4) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray.get(arrayList14.get(i26).user_id);
                    if (tLRPC$User3 == null) {
                        longSparseArray6 = longSparseArray7;
                        i17 = size4;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        longSparseArray6 = longSparseArray7;
                        i17 = size4;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        int i27 = longSparseIntArray2.get(makeEncryptedDialogId);
                        if (isDialogMuted2) {
                            longSparseArray10.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (i27 == 1) {
                            longSparseArray11.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (!tLRPC$User3.self && !tLRPC$User3.contact) {
                            int[] iArr8 = this.nonContacts[i27];
                            iArr8[isDialogMuted2 ? 1 : 0] = iArr8[isDialogMuted2 ? 1 : 0] + 1;
                            longSparseIntArray4.put(tLRPC$User3.id, longSparseIntArray4.get(tLRPC$User3.id, 0) + 1);
                        }
                        int[] iArr9 = this.contacts[i27];
                        iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        longSparseIntArray4.put(tLRPC$User3.id, longSparseIntArray4.get(tLRPC$User3.id, 0) + 1);
                    }
                    i26++;
                    longSparseArray7 = longSparseArray6;
                    size4 = i17;
                }
                LongSparseArray longSparseArray15 = longSparseArray7;
                if (!arrayList11.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList11), arrayList10);
                    int size5 = arrayList10.size();
                    int i28 = 0;
                    while (i28 < size5) {
                        TLRPC$Chat tLRPC$Chat = arrayList10.get(i28);
                        if (!(tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) && !ChatObject.isNotInChat(tLRPC$Chat)) {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0L, tLRPC$Chat);
                            int i29 = longSparseIntArray2.get(-tLRPC$Chat.id);
                            char c = (!isDialogMuted3 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0) ? (char) 0 : (char) 1;
                            if (isDialogMuted3) {
                                longSparseArray10.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (i29 == 1) {
                                longSparseArray11.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                int[] iArr10 = this.channels[i29];
                                iArr10[c] = iArr10[c] + 1;
                            } else {
                                int[] iArr11 = this.groups[i29];
                                iArr11[c] = iArr11[c] + 1;
                            }
                            longSparseArray5 = longSparseArray12;
                            longSparseArray5.put(tLRPC$Chat.id, tLRPC$Chat);
                            i28++;
                            longSparseArray12 = longSparseArray5;
                        }
                        longSparseArray5 = longSparseArray12;
                        this.dialogsWithUnread.remove(-tLRPC$Chat.id);
                        this.dialogsWithMentions.remove(-tLRPC$Chat.id);
                        i28++;
                        longSparseArray12 = longSparseArray5;
                    }
                }
                LongSparseArray longSparseArray16 = longSparseArray12;
                size = this.dialogFilters.size();
                i2 = 0;
                while (i2 < size + 2) {
                    if (i2 < size) {
                        dialogFilter = this.dialogFilters.get(i2);
                        if (dialogFilter.pendingUnreadCount >= 0) {
                            longSparseArray2 = longSparseArray;
                            i2++;
                            longSparseArray = longSparseArray2;
                        } else {
                            i4 = dialogFilter.flags;
                        }
                    } else {
                        int i30 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i2 == size) {
                            if (!getNotificationsController().showBadgeMuted) {
                                i30 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            i3 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                        } else {
                            i3 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i4 = i3 | i30;
                        dialogFilter = null;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr12 = this.contacts;
                            int i31 = iArr12[0][0] + 0;
                            i5 = (MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 ? iArr12[0][1] + i31 : i31;
                        } else {
                            i5 = 0;
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr13 = this.contacts;
                            i5 += iArr13[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr13[1][1];
                            }
                        }
                    } else {
                        i5 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr14 = this.nonContacts;
                            i5 += iArr14[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr14[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr15 = this.nonContacts;
                            i5 += iArr15[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr15[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr16 = this.groups;
                            i5 += iArr16[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr16[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr17 = this.groups;
                            i5 += iArr17[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr17[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr18 = this.channels;
                            i5 += iArr18[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr18[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr19 = this.channels;
                            i5 += iArr19[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr19[1][1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i4) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i4) == 0) {
                            int[][] iArr20 = this.bots;
                            i5 += iArr20[0][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr20[0][1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0) {
                            int[][] iArr21 = this.bots;
                            i5 += iArr21[1][0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0) {
                                i5 += iArr21[1][1];
                            }
                            if (dialogFilter == null) {
                                int size6 = dialogFilter.alwaysShow.size();
                                int i32 = 0;
                                while (i32 < size6) {
                                    int i33 = i32;
                                    long longValue3 = dialogFilter.alwaysShow.get(i32).longValue();
                                    if (DialogObject.isUserDialog(longValue3)) {
                                        i12 = size6;
                                        int i34 = 0;
                                        for (int i35 = 2; i34 < i35; i35 = 2) {
                                            TLRPC$User tLRPC$User4 = (TLRPC$User) (i34 == 0 ? longSparseArray15 : longSparseArray).get(longValue3);
                                            if (tLRPC$User4 != null) {
                                                if (i34 == 0) {
                                                    i14 = size;
                                                    longSparseArray4 = longSparseArray;
                                                    i15 = 1;
                                                } else {
                                                    longSparseArray4 = longSparseArray;
                                                    int i36 = longSparseIntArray4.get(longValue3, 0);
                                                    if (i36 == 0) {
                                                        i14 = size;
                                                        dialogFilter5 = dialogFilter;
                                                    } else {
                                                        i15 = i36;
                                                        i14 = size;
                                                    }
                                                }
                                                if (tLRPC$User4.bot) {
                                                    i16 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User4.self && !tLRPC$User4.contact) {
                                                        i16 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i16 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i16 & i4) == 0) {
                                                    i5 += i15;
                                                    dialogFilter5 = dialogFilter;
                                                } else {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                                                        dialogFilter5 = dialogFilter;
                                                    } else {
                                                        dialogFilter5 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0 && longSparseArray11.indexOfKey(tLRPC$User4.id) >= 0) {
                                                        i5 += i15;
                                                    }
                                                }
                                            } else {
                                                i14 = size;
                                                dialogFilter5 = dialogFilter;
                                                longSparseArray4 = longSparseArray;
                                            }
                                            i34++;
                                            longSparseArray = longSparseArray4;
                                            size = i14;
                                            dialogFilter = dialogFilter5;
                                        }
                                        i11 = size;
                                        dialogFilter4 = dialogFilter;
                                        longSparseArray3 = longSparseArray;
                                    } else {
                                        i11 = size;
                                        dialogFilter4 = dialogFilter;
                                        i12 = size6;
                                        longSparseArray3 = longSparseArray;
                                        TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray16.get(-longValue3);
                                        if (tLRPC$Chat2 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                                i13 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i13 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i13 & i4) != 0) {
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) != 0) {
                                                    if (longSparseArray10.indexOfKey(-tLRPC$Chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                    }
                                                }
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0 && longSparseArray11.indexOfKey(-tLRPC$Chat2.id) >= 0) {
                                                }
                                            }
                                            i5++;
                                        }
                                    }
                                    i32 = i33 + 1;
                                    size6 = i12;
                                    longSparseArray = longSparseArray3;
                                    size = i11;
                                    dialogFilter = dialogFilter4;
                                }
                                int i37 = size;
                                longSparseArray2 = longSparseArray;
                                int size7 = dialogFilter.neverShow.size();
                                int i38 = 0;
                                while (i38 < size7) {
                                    long longValue4 = dialogFilter.neverShow.get(i38).longValue();
                                    if (DialogObject.isUserDialog(longValue4)) {
                                        int i39 = 0;
                                        while (i39 < 2) {
                                            TLRPC$User tLRPC$User5 = (TLRPC$User) (i39 == 0 ? longSparseArray15 : longSparseArray2).get(longValue4);
                                            if (tLRPC$User5 != null) {
                                                if (i39 == 0) {
                                                    i8 = size7;
                                                    i9 = 1;
                                                } else {
                                                    i8 = size7;
                                                    i9 = longSparseIntArray4.get(longValue4, 0);
                                                    if (i9 == 0) {
                                                    }
                                                }
                                                if (tLRPC$User5.bot) {
                                                    i10 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User5.self && !tLRPC$User5.contact) {
                                                        i10 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i10 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i10 & i4) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) != 0) {
                                                        dialogFilter3 = dialogFilter;
                                                        if (longSparseArray11.indexOfKey(tLRPC$User5.id) >= 0) {
                                                            i39++;
                                                            size7 = i8;
                                                            dialogFilter = dialogFilter3;
                                                        }
                                                    } else {
                                                        dialogFilter3 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray10.indexOfKey(tLRPC$User5.id) < 0) {
                                                        i5 -= i9;
                                                    }
                                                    i39++;
                                                    size7 = i8;
                                                    dialogFilter = dialogFilter3;
                                                }
                                            } else {
                                                i8 = size7;
                                            }
                                            dialogFilter3 = dialogFilter;
                                            i39++;
                                            size7 = i8;
                                            dialogFilter = dialogFilter3;
                                        }
                                        i6 = size7;
                                        dialogFilter2 = dialogFilter;
                                    } else {
                                        i6 = size7;
                                        dialogFilter2 = dialogFilter;
                                        TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray16.get(-longValue4);
                                        if (tLRPC$Chat3 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                                i7 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i7 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i7 & i4) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i4) == 0 || longSparseArray11.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i4) == 0 || longSparseArray10.indexOfKey(-tLRPC$Chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                                i5--;
                                            }
                                        }
                                    }
                                    i38++;
                                    size7 = i6;
                                    dialogFilter = dialogFilter2;
                                }
                                dialogFilter.pendingUnreadCount = i5;
                                if (z) {
                                    dialogFilter.unreadCount = i5;
                                }
                                size = i37;
                            } else {
                                longSparseArray2 = longSparseArray;
                                if (i2 == size) {
                                    this.pendingMainUnreadCount = i5;
                                    if (z) {
                                        this.mainUnreadCount = i5;
                                    }
                                } else if (i2 == size + 1) {
                                    this.pendingArchiveUnreadCount = i5;
                                    if (z) {
                                        this.archiveUnreadCount = i5;
                                    }
                                }
                            }
                            i2++;
                            longSparseArray = longSparseArray2;
                        }
                    }
                    if (dialogFilter == null) {
                    }
                    i2++;
                    longSparseArray = longSparseArray2;
                }
            }
        }
        longSparseArray = longSparseArray13;
        LongSparseArray longSparseArray152 = longSparseArray7;
        if (!arrayList11.isEmpty()) {
        }
        LongSparseArray longSparseArray162 = longSparseArray12;
        size = this.dialogFilters.size();
        i2 = 0;
        while (i2 < size + 2) {
        }
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            try {
                if (!this.dialogFilters.contains(dialogFilter)) {
                    if (z) {
                        if (this.dialogFilters.get(0).isDefault()) {
                            this.dialogFilters.add(1, dialogFilter);
                        } else {
                            this.dialogFilters.add(0, dialogFilter);
                        }
                    } else {
                        this.dialogFilters.add(dialogFilter);
                    }
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                }
                executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.id == 0 ? "ALL_CHATS" : dialogFilter.name);
            executeFast.bindInteger(6, dialogFilter.color);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long longValue = dialogFilter.alwaysShow.get(i2).longValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, longValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(longValue, Integer.MIN_VALUE));
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i3);
                    if (DialogObject.isEncryptedDialog(keyAt)) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i3));
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (i = 0; i < size3; i++) {
                    executeFast3.requery();
                    executeFast3.bindInteger(1, dialogFilter.id);
                    executeFast3.bindLong(2, dialogFilter.neverShow.get(i).longValue());
                    executeFast3.step();
                }
                executeFast3.dispose();
                this.database.commitTransaction();
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement3 = sQLitePreparedStatement2;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase4 = this.database;
            if (sQLiteDatabase4 != null) {
                sQLiteDatabase4.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement3 = sQLitePreparedStatement;
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
            throw th;
        }
    }

    private ArrayList<Long> toPeerIds(ArrayList<TLRPC$InputPeer> arrayList) {
        ArrayList<Long> arrayList2 = new ArrayList<>();
        if (arrayList == null) {
            return arrayList2;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$InputPeer tLRPC$InputPeer = arrayList.get(i);
            if (tLRPC$InputPeer != null) {
                long j = tLRPC$InputPeer.user_id;
                if (j == 0) {
                    long j2 = tLRPC$InputPeer.chat_id;
                    if (j2 == 0) {
                        j2 = tLRPC$InputPeer.channel_id;
                    }
                    j = -j2;
                }
                arrayList2.add(Long.valueOf(j));
            }
        }
        return arrayList2;
    }

    public void checkLoadedRemoteFilters(final ArrayList<TLRPC$DialogFilter> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkLoadedRemoteFilters$66(arrayList, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:109:0x0279 A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:116:0x02a9  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x031c A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:151:0x0328  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x032e A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0333 A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x033f  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x01af A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01db A[Catch: Exception -> 0x0589, TryCatch #0 {Exception -> 0x0589, blocks: (B:3:0x0002, B:5:0x0010, B:6:0x0020, B:8:0x0059, B:10:0x0072, B:12:0x007a, B:14:0x007e, B:15:0x0081, B:17:0x0085, B:18:0x0088, B:20:0x008c, B:21:0x008f, B:23:0x0093, B:24:0x0096, B:26:0x009a, B:27:0x009d, B:29:0x00a1, B:30:0x00a4, B:32:0x00a8, B:33:0x00ab, B:35:0x00af, B:37:0x00b6, B:38:0x00b9, B:40:0x00cd, B:42:0x00de, B:44:0x00e5, B:46:0x00eb, B:48:0x00f3, B:50:0x00f7, B:52:0x00fd, B:54:0x0101, B:56:0x0107, B:58:0x0126, B:60:0x013a, B:63:0x014a, B:65:0x0158, B:67:0x0170, B:71:0x0194, B:70:0x0185, B:75:0x01a6, B:77:0x01af, B:81:0x01ca, B:80:0x01bc, B:82:0x01cd, B:84:0x01db, B:86:0x01ed, B:92:0x0200, B:95:0x020a, B:97:0x0216, B:100:0x023d, B:102:0x024f, B:104:0x0255, B:106:0x025d, B:87:0x01f2, B:91:0x01fb, B:90:0x01f9, B:109:0x0279, B:110:0x0281, B:112:0x0287, B:118:0x02ad, B:120:0x02b2, B:122:0x02b8, B:125:0x02bf, B:126:0x02c6, B:128:0x02cc, B:129:0x02d6, B:131:0x02dc, B:138:0x02f4, B:141:0x0301, B:144:0x0308, B:145:0x030b, B:147:0x0310, B:123:0x02bb, B:119:0x02b0, B:148:0x0315, B:150:0x031c, B:153:0x032e, B:155:0x0333, B:215:0x0498, B:158:0x034e, B:160:0x036f, B:162:0x0373, B:165:0x037e, B:167:0x0387, B:169:0x0396, B:175:0x03a9, B:177:0x03b1, B:178:0x03b6, B:180:0x03d1, B:181:0x03d7, B:170:0x039b, B:174:0x03a4, B:173:0x03a2, B:184:0x03e4, B:187:0x03eb, B:189:0x03f0, B:191:0x03f7, B:193:0x0406, B:195:0x0410, B:196:0x0413, B:198:0x0419, B:212:0x0463, B:201:0x042c, B:205:0x0438, B:207:0x044d, B:208:0x0450, B:210:0x0458, B:204:0x0436, B:213:0x0472, B:188:0x03ee, B:185:0x03e7, B:214:0x048a, B:216:0x04aa, B:219:0x04be, B:221:0x04d4, B:223:0x04ed, B:225:0x04f8, B:227:0x0502, B:228:0x0518, B:230:0x0525, B:232:0x0533, B:233:0x0545, B:235:0x054b, B:237:0x0551, B:239:0x0557, B:240:0x0567, B:222:0x04e8), top: B:245:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$66(ArrayList arrayList, Runnable runnable) {
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        SparseArray<MessagesController.DialogFilter> sparseArray;
        int i;
        HashSet<Integer> hashSet;
        HashMap<Long, TLRPC$InputPeer> hashMap;
        HashMap<Long, TLRPC$InputPeer> hashMap2;
        ArrayList<Long> arrayList2;
        HashMap<Long, TLRPC$InputPeer> hashMap3;
        ArrayList<Long> arrayList3;
        HashMap<Long, TLRPC$InputPeer> hashMap4;
        ArrayList<Long> arrayList4;
        HashMap<Long, TLRPC$InputPeer> hashMap5;
        HashMap<Long, TLRPC$InputPeer> hashMap6;
        ArrayList<Long> arrayList5;
        Long valueOf;
        boolean z;
        boolean z2;
        int i2;
        boolean z3;
        boolean z4;
        ArrayList<Long> arrayList6;
        HashMap<Long, TLRPC$InputPeer> hashMap7;
        LinkedHashMap linkedHashMap;
        int size;
        int i3;
        int size2;
        int i4;
        LinkedHashMap linkedHashMap2;
        boolean z5;
        int i5;
        HashSet<Integer> hashSet2;
        Long valueOf2;
        ArrayList<Long> arrayList7;
        TLRPC$DialogFilter tLRPC$DialogFilter;
        LinkedHashMap linkedHashMap3;
        int i6;
        int i7;
        ArrayList arrayList8;
        try {
            SparseArray<MessagesController.DialogFilter> sparseArray2 = new SparseArray<>();
            int size3 = this.dialogFilters.size();
            for (int i8 = 0; i8 < size3; i8++) {
                MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i8);
                sparseArray2.put(dialogFilter.id, dialogFilter);
            }
            ArrayList<Integer> arrayList9 = new ArrayList<>();
            ArrayList<Long> arrayList10 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap8 = new HashMap<>();
            ArrayList<Long> arrayList11 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap9 = new HashMap<>();
            ArrayList arrayList12 = new ArrayList();
            HashMap<Long, TLRPC$InputPeer> hashMap10 = new HashMap<>();
            ArrayList<MessagesController.DialogFilter> arrayList13 = new ArrayList<>();
            HashMap<Integer, HashSet<Long>> hashMap11 = new HashMap<>();
            HashSet<Integer> hashSet3 = new HashSet<>();
            int size4 = arrayList.size();
            int i9 = 0;
            while (i9 < size4) {
                TLRPC$DialogFilter tLRPC$DialogFilter2 = (TLRPC$DialogFilter) arrayList.get(i9);
                int i10 = size4;
                arrayList9.add(Integer.valueOf(tLRPC$DialogFilter2.id));
                int i11 = tLRPC$DialogFilter2.contacts ? MessagesController.DIALOG_FILTER_FLAG_CONTACTS | 0 : 0;
                if (tLRPC$DialogFilter2.non_contacts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                }
                if (tLRPC$DialogFilter2.groups) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                }
                if (tLRPC$DialogFilter2.broadcasts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                }
                if (tLRPC$DialogFilter2.bots) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_BOTS;
                }
                if (tLRPC$DialogFilter2.exclude_muted) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                }
                if (tLRPC$DialogFilter2.exclude_read) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
                }
                if (tLRPC$DialogFilter2.exclude_archived) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                }
                if (tLRPC$DialogFilter2 instanceof TLRPC$TL_dialogFilterChatlist) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST;
                    if (tLRPC$DialogFilter2.has_my_invites) {
                        i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST_ADMIN;
                    }
                }
                ArrayList<Integer> arrayList14 = arrayList9;
                MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(tLRPC$DialogFilter2.id);
                boolean z6 = true;
                if (dialogFilter2 != null) {
                    sparseArray2.remove(tLRPC$DialogFilter2.id);
                    sparseArray = sparseArray2;
                    if (TextUtils.equals(dialogFilter2.name, tLRPC$DialogFilter2.title)) {
                        z = false;
                    } else {
                        dialogFilter2.name = tLRPC$DialogFilter2.title;
                        z = true;
                    }
                    if ((tLRPC$DialogFilter2.flags & 134217728) != 0) {
                        i2 = tLRPC$DialogFilter2.color;
                        z2 = z;
                    } else {
                        z2 = z;
                        i2 = -1;
                    }
                    if (dialogFilter2.color != i2) {
                        dialogFilter2.color = i2;
                        z3 = true;
                    } else {
                        z3 = z2;
                    }
                    if (dialogFilter2.flags != i11) {
                        dialogFilter2.flags = i11;
                        z3 = true;
                        z4 = true;
                    } else {
                        z4 = false;
                    }
                    boolean z7 = z3;
                    HashSet hashSet4 = new HashSet(dialogFilter2.alwaysShow);
                    hashSet4.addAll(dialogFilter2.neverShow);
                    HashSet<Long> hashSet5 = new HashSet<>();
                    boolean z8 = z4;
                    if (dialogFilter2.pinnedDialogs.size() != 0) {
                        ArrayList arrayList15 = new ArrayList();
                        i = i9;
                        int size5 = dialogFilter2.pinnedDialogs.size();
                        arrayList6 = arrayList11;
                        int i12 = 0;
                        boolean z9 = false;
                        while (i12 < size5) {
                            int i13 = size5;
                            long keyAt = dialogFilter2.pinnedDialogs.keyAt(i12);
                            if (DialogObject.isEncryptedDialog(keyAt)) {
                                z9 = true;
                            }
                            arrayList15.add(Long.valueOf(keyAt));
                            i12++;
                            size5 = i13;
                        }
                        if (z9) {
                            linkedHashMap = new LinkedHashMap();
                            final LongSparseIntArray longSparseIntArray = dialogFilter2.pinnedDialogs;
                            hashMap7 = hashMap9;
                            Collections.sort(arrayList15, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda237
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$checkLoadedRemoteFilters$65;
                                    lambda$checkLoadedRemoteFilters$65 = MessagesStorage.lambda$checkLoadedRemoteFilters$65(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                                    return lambda$checkLoadedRemoteFilters$65;
                                }
                            });
                            int size6 = arrayList15.size();
                            int i14 = 0;
                            while (i14 < size6) {
                                long longValue = ((Long) arrayList15.get(i14)).longValue();
                                if (DialogObject.isEncryptedDialog(longValue)) {
                                    i7 = size6;
                                    arrayList8 = arrayList15;
                                    linkedHashMap.put(Integer.valueOf(i14), Long.valueOf(longValue));
                                } else {
                                    i7 = size6;
                                    arrayList8 = arrayList15;
                                }
                                i14++;
                                size6 = i7;
                                arrayList15 = arrayList8;
                            }
                            size = dialogFilter2.pinnedDialogs.size();
                            for (i3 = 0; i3 < size; i3++) {
                                long keyAt2 = dialogFilter2.pinnedDialogs.keyAt(i3);
                                if (!DialogObject.isEncryptedDialog(keyAt2)) {
                                    hashSet5.add(Long.valueOf(keyAt2));
                                    hashSet4.remove(Long.valueOf(keyAt2));
                                }
                            }
                            dialogFilter2.pinnedDialogs.clear();
                            size2 = tLRPC$DialogFilter2.pinned_peers.size();
                            i4 = 0;
                            while (i4 < size2) {
                                TLRPC$InputPeer tLRPC$InputPeer = tLRPC$DialogFilter2.pinned_peers.get(i4);
                                HashMap<Integer, HashSet<Long>> hashMap12 = hashMap11;
                                HashSet<Integer> hashSet6 = hashSet3;
                                long j = tLRPC$InputPeer.user_id;
                                if (j != 0) {
                                    valueOf2 = Long.valueOf(j);
                                } else {
                                    long j2 = tLRPC$InputPeer.chat_id;
                                    if (j2 == 0) {
                                        j2 = tLRPC$InputPeer.channel_id;
                                    }
                                    valueOf2 = Long.valueOf(-j2);
                                }
                                int size7 = dialogFilter2.pinnedDialogs.size();
                                if (linkedHashMap != null) {
                                    i6 = size2;
                                    while (true) {
                                        Long l = (Long) linkedHashMap.remove(Integer.valueOf(size7));
                                        if (l == null) {
                                            break;
                                        }
                                        dialogFilter2.pinnedDialogs.put(l.longValue(), size7);
                                        size7++;
                                        arrayList10 = arrayList10;
                                        tLRPC$DialogFilter2 = tLRPC$DialogFilter2;
                                        linkedHashMap = linkedHashMap;
                                    }
                                    arrayList7 = arrayList10;
                                    tLRPC$DialogFilter = tLRPC$DialogFilter2;
                                    linkedHashMap3 = linkedHashMap;
                                } else {
                                    arrayList7 = arrayList10;
                                    tLRPC$DialogFilter = tLRPC$DialogFilter2;
                                    linkedHashMap3 = linkedHashMap;
                                    i6 = size2;
                                }
                                dialogFilter2.pinnedDialogs.put(valueOf2.longValue(), size7);
                                hashSet4.remove(valueOf2);
                                if (!hashSet5.remove(valueOf2)) {
                                    if (!hashMap10.containsKey(valueOf2)) {
                                        arrayList12.add(valueOf2);
                                        hashMap10.put(valueOf2, tLRPC$InputPeer);
                                    }
                                    z7 = true;
                                }
                                i4++;
                                size2 = i6;
                                hashMap11 = hashMap12;
                                hashSet3 = hashSet6;
                                arrayList10 = arrayList7;
                                tLRPC$DialogFilter2 = tLRPC$DialogFilter;
                                linkedHashMap = linkedHashMap3;
                            }
                            ArrayList<Long> arrayList16 = arrayList10;
                            TLRPC$DialogFilter tLRPC$DialogFilter3 = tLRPC$DialogFilter2;
                            linkedHashMap2 = linkedHashMap;
                            HashMap<Integer, HashSet<Long>> hashMap13 = hashMap11;
                            HashSet<Integer> hashSet7 = hashSet3;
                            if (linkedHashMap2 != null) {
                                for (Map.Entry entry : linkedHashMap2.entrySet()) {
                                    dialogFilter2.pinnedDialogs.put(((Long) entry.getValue()).longValue(), dialogFilter2.pinnedDialogs.size());
                                }
                            }
                            z5 = z8;
                            i5 = 0;
                            while (i5 < 2) {
                                TLRPC$DialogFilter tLRPC$DialogFilter4 = tLRPC$DialogFilter3;
                                ArrayList<Long> peerIds = toPeerIds(i5 == 0 ? tLRPC$DialogFilter4.include_peers : tLRPC$DialogFilter4.exclude_peers);
                                ArrayList<Long> arrayList17 = i5 == 0 ? dialogFilter2.alwaysShow : dialogFilter2.neverShow;
                                if (i5 == 0) {
                                    ArrayList<Long> peerIds2 = toPeerIds(tLRPC$DialogFilter4.pinned_peers);
                                    for (int i15 = 0; i15 < peerIds2.size(); i15++) {
                                        peerIds.remove(peerIds2.get(i15));
                                    }
                                    peerIds.addAll(0, peerIds2);
                                }
                                int size8 = peerIds.size();
                                boolean z10 = peerIds.size() != arrayList17.size();
                                if (!z10) {
                                    int i16 = 0;
                                    while (true) {
                                        if (i16 >= size8) {
                                            break;
                                        } else if (!arrayList17.contains(peerIds.get(i16))) {
                                            z10 = true;
                                            break;
                                        } else {
                                            i16++;
                                        }
                                    }
                                }
                                if (z10) {
                                    if (i5 == 0) {
                                        dialogFilter2.alwaysShow = peerIds;
                                    } else {
                                        dialogFilter2.neverShow = peerIds;
                                    }
                                    z5 = true;
                                    z7 = true;
                                }
                                i5++;
                                tLRPC$DialogFilter3 = tLRPC$DialogFilter4;
                            }
                            if (hashSet5.isEmpty()) {
                                hashMap11 = hashMap13;
                                hashMap11.put(Integer.valueOf(dialogFilter2.id), hashSet5);
                            } else {
                                hashMap11 = hashMap13;
                                z6 = z7;
                            }
                            if (z6) {
                                arrayList13.add(dialogFilter2);
                            }
                            if (z5) {
                                hashSet2 = hashSet7;
                            } else {
                                hashSet2 = hashSet7;
                                hashSet2.add(Integer.valueOf(dialogFilter2.id));
                            }
                            hashSet = hashSet2;
                            hashMap = hashMap10;
                            hashMap2 = hashMap8;
                            arrayList2 = arrayList6;
                            hashMap3 = hashMap7;
                            arrayList3 = arrayList16;
                        } else {
                            hashMap7 = hashMap9;
                        }
                    } else {
                        arrayList6 = arrayList11;
                        hashMap7 = hashMap9;
                        i = i9;
                    }
                    linkedHashMap = null;
                    size = dialogFilter2.pinnedDialogs.size();
                    while (i3 < size) {
                    }
                    dialogFilter2.pinnedDialogs.clear();
                    size2 = tLRPC$DialogFilter2.pinned_peers.size();
                    i4 = 0;
                    while (i4 < size2) {
                    }
                    ArrayList<Long> arrayList162 = arrayList10;
                    TLRPC$DialogFilter tLRPC$DialogFilter32 = tLRPC$DialogFilter2;
                    linkedHashMap2 = linkedHashMap;
                    HashMap<Integer, HashSet<Long>> hashMap132 = hashMap11;
                    HashSet<Integer> hashSet72 = hashSet3;
                    if (linkedHashMap2 != null) {
                    }
                    z5 = z8;
                    i5 = 0;
                    while (i5 < 2) {
                    }
                    if (hashSet5.isEmpty()) {
                    }
                    if (z6) {
                    }
                    if (z5) {
                    }
                    hashSet = hashSet2;
                    hashMap = hashMap10;
                    hashMap2 = hashMap8;
                    arrayList2 = arrayList6;
                    hashMap3 = hashMap7;
                    arrayList3 = arrayList162;
                } else {
                    sparseArray = sparseArray2;
                    ArrayList<Long> arrayList18 = arrayList10;
                    ArrayList<Long> arrayList19 = arrayList11;
                    HashMap<Long, TLRPC$InputPeer> hashMap14 = hashMap9;
                    i = i9;
                    HashSet<Integer> hashSet8 = hashSet3;
                    MessagesController.DialogFilter dialogFilter3 = new MessagesController.DialogFilter();
                    dialogFilter3.id = tLRPC$DialogFilter2.id;
                    dialogFilter3.flags = i11;
                    dialogFilter3.name = tLRPC$DialogFilter2.title;
                    dialogFilter3.color = (tLRPC$DialogFilter2.flags & 134217728) != 0 ? tLRPC$DialogFilter2.color : -1;
                    dialogFilter3.pendingUnreadCount = -1;
                    int i17 = 0;
                    int i18 = 2;
                    while (i17 < i18) {
                        if (i17 == 0) {
                            int size9 = tLRPC$DialogFilter2.pinned_peers.size();
                            int i19 = 0;
                            while (i19 < size9) {
                                TLRPC$InputPeer tLRPC$InputPeer2 = tLRPC$DialogFilter2.pinned_peers.get(i19);
                                int i20 = size9;
                                long j3 = tLRPC$InputPeer2.user_id;
                                if (j3 != 0) {
                                    valueOf = Long.valueOf(j3);
                                } else {
                                    long j4 = tLRPC$InputPeer2.chat_id;
                                    if (j4 == 0) {
                                        j4 = tLRPC$InputPeer2.channel_id;
                                    }
                                    valueOf = Long.valueOf(-j4);
                                }
                                if (!dialogFilter3.alwaysShow.contains(valueOf)) {
                                    dialogFilter3.alwaysShow.add(valueOf);
                                }
                                HashSet<Integer> hashSet9 = hashSet8;
                                dialogFilter3.pinnedDialogs.put(valueOf.longValue(), dialogFilter3.pinnedDialogs.size() + 1);
                                if (!hashMap10.containsKey(valueOf)) {
                                    arrayList12.add(valueOf);
                                    hashMap10.put(valueOf, tLRPC$InputPeer2);
                                }
                                i19++;
                                size9 = i20;
                                hashSet8 = hashSet9;
                            }
                        }
                        HashSet<Integer> hashSet10 = hashSet8;
                        ArrayList<TLRPC$InputPeer> arrayList20 = i17 == 0 ? tLRPC$DialogFilter2.include_peers : tLRPC$DialogFilter2.exclude_peers;
                        ArrayList<Long> arrayList21 = i17 == 0 ? dialogFilter3.alwaysShow : dialogFilter3.neverShow;
                        int size10 = arrayList20.size();
                        int i21 = 0;
                        while (i21 < size10) {
                            TLRPC$InputPeer tLRPC$InputPeer3 = arrayList20.get(i21);
                            TLRPC$DialogFilter tLRPC$DialogFilter5 = tLRPC$DialogFilter2;
                            ArrayList<TLRPC$InputPeer> arrayList22 = arrayList20;
                            long j5 = tLRPC$InputPeer3.user_id;
                            if (j5 != 0) {
                                Long valueOf3 = Long.valueOf(j5);
                                if (!arrayList21.contains(valueOf3)) {
                                    arrayList21.add(valueOf3);
                                }
                                if (hashMap8.containsKey(valueOf3)) {
                                    arrayList4 = arrayList18;
                                } else {
                                    arrayList4 = arrayList18;
                                    arrayList4.add(valueOf3);
                                    hashMap8.put(valueOf3, tLRPC$InputPeer3);
                                }
                                hashMap4 = hashMap10;
                                hashMap5 = hashMap8;
                                arrayList5 = arrayList19;
                                hashMap6 = hashMap14;
                            } else {
                                hashMap4 = hashMap10;
                                arrayList4 = arrayList18;
                                long j6 = tLRPC$InputPeer3.chat_id;
                                if (j6 == 0) {
                                    j6 = tLRPC$InputPeer3.channel_id;
                                }
                                Long valueOf4 = Long.valueOf(j6);
                                hashMap5 = hashMap8;
                                Long valueOf5 = Long.valueOf(-valueOf4.longValue());
                                if (!arrayList21.contains(valueOf5)) {
                                    arrayList21.add(valueOf5);
                                }
                                hashMap6 = hashMap14;
                                if (hashMap6.containsKey(valueOf4)) {
                                    arrayList5 = arrayList19;
                                } else {
                                    arrayList5 = arrayList19;
                                    arrayList5.add(valueOf4);
                                    hashMap6.put(valueOf4, tLRPC$InputPeer3);
                                }
                            }
                            i21++;
                            arrayList18 = arrayList4;
                            arrayList20 = arrayList22;
                            arrayList19 = arrayList5;
                            hashMap14 = hashMap6;
                            hashMap8 = hashMap5;
                            hashMap10 = hashMap4;
                            tLRPC$DialogFilter2 = tLRPC$DialogFilter5;
                        }
                        i17++;
                        hashMap8 = hashMap8;
                        hashSet8 = hashSet10;
                        i18 = 2;
                        hashMap10 = hashMap10;
                        tLRPC$DialogFilter2 = tLRPC$DialogFilter2;
                    }
                    hashSet = hashSet8;
                    hashMap = hashMap10;
                    hashMap2 = hashMap8;
                    arrayList2 = arrayList19;
                    hashMap3 = hashMap14;
                    arrayList3 = arrayList18;
                    arrayList13.add(dialogFilter3);
                }
                i9 = i + 1;
                arrayList10 = arrayList3;
                arrayList11 = arrayList2;
                hashMap9 = hashMap3;
                size4 = i10;
                hashMap8 = hashMap2;
                arrayList9 = arrayList14;
                sparseArray2 = sparseArray;
                hashSet3 = hashSet;
                hashMap10 = hashMap;
            }
            SparseArray<MessagesController.DialogFilter> sparseArray3 = sparseArray2;
            ArrayList<Integer> arrayList23 = arrayList9;
            HashSet<Integer> hashSet11 = hashSet3;
            HashMap<Long, TLRPC$InputPeer> hashMap15 = hashMap10;
            HashMap<Long, TLRPC$InputPeer> hashMap16 = hashMap8;
            ArrayList<Long> arrayList24 = arrayList11;
            HashMap<Long, TLRPC$InputPeer> hashMap17 = hashMap9;
            ArrayList<Long> arrayList25 = arrayList10;
            if (!arrayList12.isEmpty()) {
                tLRPC$TL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList12), arrayList25, arrayList24, new ArrayList<>());
                int size11 = tLRPC$TL_messages_dialogs.dialogs.size();
                for (int i22 = 0; i22 < size11; i22++) {
                    hashMap15.remove(Long.valueOf(tLRPC$TL_messages_dialogs.dialogs.get(i22).id));
                }
            } else {
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            ArrayList<TLRPC$User> arrayList26 = new ArrayList<>();
            if (!arrayList25.isEmpty()) {
                getUsersInternal(arrayList25, arrayList26);
                int size12 = arrayList26.size();
                int i23 = 0;
                while (i23 < size12) {
                    HashMap<Long, TLRPC$InputPeer> hashMap18 = hashMap16;
                    hashMap18.remove(Long.valueOf(arrayList26.get(i23).id));
                    i23++;
                    hashMap16 = hashMap18;
                }
            }
            HashMap<Long, TLRPC$InputPeer> hashMap19 = hashMap16;
            ArrayList<TLRPC$Chat> arrayList27 = new ArrayList<>();
            if (!arrayList24.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList24), arrayList27);
                int size13 = arrayList27.size();
                for (int i24 = 0; i24 < size13; i24++) {
                    hashMap17.remove(Long.valueOf(arrayList27.get(i24).id));
                }
            }
            if (hashMap19.isEmpty() && hashMap17.isEmpty() && hashMap15.isEmpty()) {
                lambda$processLoadedFilterPeers$68(tLRPC$TL_messages_dialogs, null, arrayList26, arrayList27, arrayList13, sparseArray3, arrayList23, hashMap11, hashSet11, runnable);
            } else {
                getMessagesController().loadFilterPeers(hashMap15, hashMap19, hashMap17, tLRPC$TL_messages_dialogs, new TLRPC$TL_messages_dialogs(), arrayList26, arrayList27, arrayList13, sparseArray3, arrayList23, hashMap11, hashSet11, runnable);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkLoadedRemoteFilters$65(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal */
    public void lambda$processLoadedFilterPeers$68(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashSet<Integer> hashSet, Runnable runnable) {
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$69(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry<Integer, HashSet<Long>> entry : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(entry.getKey().intValue());
            if (dialogFilter2 != null) {
                Iterator<Long> it2 = entry.getValue().iterator();
                while (it2.hasNext()) {
                    dialogFilter2.pinnedDialogs.delete(it2.next().longValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter3.id));
            if (dialogFilter3.order != indexOf) {
                dialogFilter3.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda240
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processLoadedFilterPeersInternal$67;
                    lambda$processLoadedFilterPeersInternal$67 = MessagesStorage.lambda$processLoadedFilterPeersInternal$67((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$processLoadedFilterPeersInternal$67;
                }
            });
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, null, i4, runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedFilterPeersInternal$67(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void processLoadedFilterPeers(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final ArrayList<MessagesController.DialogFilter> arrayList3, final SparseArray<MessagesController.DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap, final HashSet<Integer> hashSet, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda223
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processLoadedFilterPeers$68(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashSet, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal */
    public void lambda$deleteDialogFilter$69(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            sQLiteDatabase3.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteDialogFilter(final MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialogFilter$69(dialogFilter);
            }
        });
    }

    public void saveDialogFilter(final MessagesController.DialogFilter dialogFilter, final boolean z, final boolean z2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda194
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$71(dialogFilter, z, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$71(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda10
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$70();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$70() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void saveDialogFiltersOrderInternal() {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
                int size = this.dialogFilters.size();
                for (int i = 0; i < size; i++) {
                    MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, dialogFilter.order);
                    sQLitePreparedStatement.bindInteger(2, dialogFilter.flags);
                    sQLitePreparedStatement.bindInteger(3, dialogFilter.id);
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveDialogFiltersOrder() {
        final ArrayList arrayList = new ArrayList(getMessagesController().dialogFilters);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda159
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFiltersOrder$72(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFiltersOrder$72(ArrayList arrayList) {
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.dialogFilters.addAll(arrayList);
        for (int i = 0; i < arrayList.size(); i++) {
            ((MessagesController.DialogFilter) arrayList.get(i)).order = i;
            this.dialogFiltersMap.put(((MessagesController.DialogFilter) arrayList.get(i)).id, (MessagesController.DialogFilter) arrayList.get(i));
        }
        saveDialogFiltersOrderInternal();
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void addReplyMessages(TLRPC$Message tLRPC$Message, LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        int i = tLRPC$Message.reply_to.reply_to_msg_id;
        long replyToDialogId = (tLRPC$Message.flags & 1073741824) != 0 ? tLRPC$Message.quick_reply_shortcut_id : MessageObject.getReplyToDialogId(tLRPC$Message);
        SparseArray<ArrayList<TLRPC$Message>> sparseArray = longSparseArray.get(replyToDialogId);
        ArrayList<Integer> arrayList = longSparseArray2.get(replyToDialogId);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            longSparseArray.put(replyToDialogId, sparseArray);
        }
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            longSparseArray2.put(replyToDialogId, arrayList);
        }
        ArrayList<TLRPC$Message> arrayList2 = sparseArray.get(tLRPC$Message.reply_to.reply_to_msg_id);
        if (arrayList2 == null) {
            arrayList2 = new ArrayList<>();
            sparseArray.put(tLRPC$Message.reply_to.reply_to_msg_id, arrayList2);
            if (!arrayList.contains(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id));
            }
        }
        arrayList2.add(tLRPC$Message);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00e8 A[Catch: all -> 0x017c, Exception -> 0x0180, TryCatch #4 {Exception -> 0x0180, all -> 0x017c, blocks: (B:41:0x00e2, B:43:0x00e8, B:45:0x00ee, B:47:0x0114, B:49:0x012b, B:51:0x013d, B:53:0x0144, B:48:0x0125, B:56:0x0162), top: B:75:0x00e2 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0162 A[Catch: all -> 0x017c, Exception -> 0x0180, TRY_LEAVE, TryCatch #4 {Exception -> 0x0180, all -> 0x017c, blocks: (B:41:0x00e2, B:43:0x00e8, B:45:0x00ee, B:47:0x0114, B:49:0x012b, B:51:0x013d, B:53:0x0144, B:48:0x0125, B:56:0x0162), top: B:75:0x00e2 }] */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0186  */
    /* JADX WARN: Type inference failed for: r8v15 */
    /* JADX WARN: Type inference failed for: r8v17 */
    /* JADX WARN: Type inference failed for: r8v6, types: [int, boolean] */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:55:0x015d -> B:31:0x008e). Please submit an issue!!! */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void loadReplyMessages(LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, int i) throws SQLiteException {
        boolean z;
        int i2;
        int i3;
        boolean z2;
        int i4;
        SQLiteCursor queryFinalized;
        Throwable th;
        ?? r8;
        SQLiteCursor sQLiteCursor;
        int i5;
        int i6;
        MessagesStorage messagesStorage = this;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray3 = longSparseArray;
        if (longSparseArray.isEmpty()) {
            return;
        }
        int i7 = 1;
        boolean z3 = i == 1;
        boolean z4 = i == 5;
        long clientUserId = getUserConfig().getClientUserId();
        int size = longSparseArray.size();
        int i8 = 0;
        while (i8 < size) {
            long keyAt = longSparseArray3.keyAt(i8);
            SparseArray<ArrayList<TLRPC$Message>> valueAt = longSparseArray3.valueAt(i8);
            ArrayList<Integer> arrayList3 = longSparseArray2.get(keyAt);
            if (arrayList3 == null) {
                z = z3;
                i2 = size;
                i3 = i8;
            } else {
                int i9 = 0;
                SQLiteCursor sQLiteCursor2 = null;
                while (i9 < 2) {
                    if (i9 != i7 || z3) {
                        boolean z5 = i9 == i7;
                        try {
                            if (z4) {
                                try {
                                    try {
                                        z2 = z3;
                                        i4 = size;
                                        queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, topic_id FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                    } catch (Throwable th2) {
                                        th = th2;
                                        if (sQLiteCursor2 != null) {
                                            sQLiteCursor2.dispose();
                                        }
                                        throw th;
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    throw e;
                                }
                            } else {
                                z2 = z3;
                                i4 = size;
                                if (z5) {
                                    queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                } else {
                                    r8 = 0;
                                    sQLiteCursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                    if (sQLiteCursor.next()) {
                                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(r8);
                                        if (byteBufferValue != null) {
                                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r8), r8);
                                            i6 = i8;
                                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLdeserialize.id = sQLiteCursor.intValue(1);
                                            TLdeserialize.date = sQLiteCursor.intValue(2);
                                            if (z4) {
                                                TLdeserialize.dialog_id = clientUserId;
                                                TLdeserialize.flags |= 1073741824;
                                                TLdeserialize.quick_reply_shortcut_id = sQLiteCursor.intValue(3);
                                            } else {
                                                TLdeserialize.dialog_id = sQLiteCursor.longValue(3);
                                            }
                                            addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                            ArrayList<TLRPC$Message> arrayList4 = valueAt.get(TLdeserialize.id);
                                            if (arrayList4 != null) {
                                                int size2 = arrayList4.size();
                                                int i10 = 0;
                                                while (i10 < size2) {
                                                    arrayList4.get(i10).replyMessage = TLdeserialize;
                                                    MessageObject.getDialogId(TLdeserialize);
                                                    i10++;
                                                    arrayList4 = arrayList4;
                                                }
                                            }
                                        } else {
                                            i6 = i8;
                                        }
                                        i8 = i6;
                                        r8 = 0;
                                        if (sQLiteCursor.next()) {
                                        }
                                    } else {
                                        i5 = i8;
                                        sQLiteCursor.dispose();
                                        sQLiteCursor2 = sQLiteCursor;
                                    }
                                }
                            }
                            if (sQLiteCursor.next()) {
                            }
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor2 = sQLiteCursor;
                            throw e;
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor2 = sQLiteCursor;
                            if (sQLiteCursor2 != null) {
                            }
                            throw th;
                        }
                        sQLiteCursor = queryFinalized;
                        r8 = 0;
                    } else {
                        z2 = z3;
                        i4 = size;
                        i5 = i8;
                    }
                    i9++;
                    messagesStorage = this;
                    i8 = i5;
                    z3 = z2;
                    size = i4;
                    i7 = 1;
                }
                z = z3;
                i2 = size;
                i3 = i8;
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
            }
            messagesStorage = this;
            i8 = i3 + 1;
            z3 = z;
            size = i2;
            i7 = 1;
            longSparseArray3 = longSparseArray;
        }
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUnreadMessages$74();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x01c5, code lost:
        if ((r6 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore) == false) goto L108;
     */
    /* JADX WARN: Removed duplicated region for block: B:248:0x0591  */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v8 */
    /* JADX WARN: Type inference failed for: r6v9, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUnreadMessages$74() {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        String str;
        ArrayList arrayList;
        ArrayList<Long> arrayList2;
        LongSparseArray longSparseArray;
        ArrayList arrayList3;
        String str2;
        final ArrayList<TLRPC$User> arrayList4;
        ArrayList<TLRPC$Chat> arrayList5;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        LongSparseArray longSparseArray2;
        ArrayList arrayList6;
        ArrayList arrayList7;
        ArrayList<TLRPC$EncryptedChat> arrayList8;
        ArrayList arrayList9;
        LongSparseArray longSparseArray3;
        ArrayList<Long> arrayList10;
        String stringValue;
        int i;
        LongSparseArray longSparseArray4;
        String str3;
        ArrayList<TLRPC$User> arrayList11;
        ArrayList arrayList12;
        Exception exc2;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        NativeByteBuffer byteBufferValue;
        LongSparseArray longSparseArray5;
        try {
            ArrayList<Long> arrayList13 = new ArrayList<>();
            ArrayList<Long> arrayList14 = new ArrayList<>();
            ArrayList arrayList15 = new ArrayList();
            LongSparseArray longSparseArray6 = new LongSparseArray();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
            try {
                StringBuilder sb = new StringBuilder();
                int currentTime = getConnectionsManager().getCurrentTime();
                while (true) {
                    str = ",";
                    if (!queryFinalized.next()) {
                        break;
                    }
                    long longValue = queryFinalized.longValue(2);
                    boolean z = (longValue & 1) != 0;
                    LongSparseArray longSparseArray7 = longSparseArray6;
                    int i2 = (int) (longValue >> 32);
                    if (!queryFinalized.isNull(2) && z && (i2 == 0 || i2 >= currentTime)) {
                        longSparseArray5 = longSparseArray7;
                        longSparseArray6 = longSparseArray5;
                    }
                    long longValue2 = queryFinalized.longValue(0);
                    if (DialogObject.isFolderDialogId(longValue2)) {
                        longSparseArray6 = longSparseArray7;
                    } else {
                        longSparseArray5 = longSparseArray7;
                        longSparseArray5.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(longValue2);
                        if (DialogObject.isEncryptedDialog(longValue2)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                            if (!arrayList15.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList15.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(longValue2)) {
                            if (!arrayList13.contains(Long.valueOf(longValue2))) {
                                arrayList13.add(Long.valueOf(longValue2));
                            }
                        } else {
                            long j = -longValue2;
                            if (!arrayList14.contains(Long.valueOf(j))) {
                                arrayList14.add(Long.valueOf(j));
                            }
                        }
                        longSparseArray6 = longSparseArray5;
                    }
                }
                LongSparseArray longSparseArray8 = longSparseArray6;
                queryFinalized.dispose();
                LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray9 = new LongSparseArray<>();
                LongSparseArray<ArrayList<Integer>> longSparseArray10 = new LongSparseArray<>();
                ArrayList arrayList16 = new ArrayList();
                ArrayList arrayList17 = new ArrayList();
                ArrayList<TLRPC$User> arrayList18 = new ArrayList<>();
                ArrayList<TLRPC$Chat> arrayList19 = new ArrayList<>();
                ArrayList<TLRPC$EncryptedChat> arrayList20 = new ArrayList<>();
                if (sb.length() > 0) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages_v2 WHERE uid IN (" + sb.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50", new Object[0]);
                    int i3 = 0;
                    while (queryFinalized2.next()) {
                        try {
                            try {
                                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                                if (byteBufferValue2 != null) {
                                    longSparseArray4 = longSparseArray8;
                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                    str3 = str;
                                    arrayList11 = arrayList18;
                                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                    byteBufferValue2.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(0));
                                    TLdeserialize.id = queryFinalized2.intValue(3);
                                    TLdeserialize.date = queryFinalized2.intValue(4);
                                    TLdeserialize.dialog_id = queryFinalized2.longValue(5);
                                    arrayList16.add(TLdeserialize);
                                    i3 = Math.max(i3, TLdeserialize.date);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList13, arrayList14, null);
                                    TLdeserialize.send_state = queryFinalized2.intValue(2);
                                    if ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0) {
                                        TLdeserialize.send_state = 0;
                                    }
                                    if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id) && !queryFinalized2.isNull(5)) {
                                        TLdeserialize.random_id = queryFinalized2.longValue(5);
                                    }
                                    try {
                                        tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                    } catch (Exception e) {
                                        e = e;
                                        arrayList12 = arrayList16;
                                    }
                                    if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                        TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                        if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                            try {
                                                if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent)) {
                                                }
                                            } catch (Exception e2) {
                                                exc2 = e2;
                                                arrayList12 = arrayList16;
                                                checkSQLException(exc2);
                                                arrayList16 = arrayList12;
                                                longSparseArray8 = longSparseArray4;
                                                str = str3;
                                                arrayList18 = arrayList11;
                                            }
                                        }
                                        if (queryFinalized2.isNull(6) || (byteBufferValue = queryFinalized2.byteBufferValue(6)) == null) {
                                            arrayList12 = arrayList16;
                                        } else {
                                            TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                            TLdeserialize.replyMessage = TLdeserialize2;
                                            arrayList12 = arrayList16;
                                            try {
                                                TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                byteBufferValue.reuse();
                                                TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                if (tLRPC$Message != null) {
                                                    addUsersAndChatsFromMessage(tLRPC$Message, arrayList13, arrayList14, null);
                                                }
                                            } catch (Exception e3) {
                                                e = e3;
                                                exc2 = e;
                                                checkSQLException(exc2);
                                                arrayList16 = arrayList12;
                                                longSparseArray8 = longSparseArray4;
                                                str = str3;
                                                arrayList18 = arrayList11;
                                            }
                                        }
                                        if (TLdeserialize.replyMessage == null) {
                                            addReplyMessages(TLdeserialize, longSparseArray9, longSparseArray10);
                                        }
                                        arrayList16 = arrayList12;
                                        longSparseArray8 = longSparseArray4;
                                        str = str3;
                                        arrayList18 = arrayList11;
                                    }
                                } else {
                                    longSparseArray4 = longSparseArray8;
                                    str3 = str;
                                    arrayList11 = arrayList18;
                                }
                                arrayList12 = arrayList16;
                                arrayList16 = arrayList12;
                                longSparseArray8 = longSparseArray4;
                                str = str3;
                                arrayList18 = arrayList11;
                            } catch (Exception e4) {
                                exc = e4;
                                sQLiteCursor = sQLiteCursor3;
                                try {
                                    checkSQLException(exc);
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th3) {
                                    th2 = th3;
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            sQLiteCursor = sQLiteCursor2;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    LongSparseArray longSparseArray11 = longSparseArray8;
                    String str4 = str;
                    ArrayList<TLRPC$User> arrayList21 = arrayList18;
                    ArrayList arrayList22 = arrayList16;
                    queryFinalized2.dispose();
                    this.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i3).stepThis().dispose();
                    ?? r6 = 0;
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags, topicId, is_reaction FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                    while (queryFinalized3.next()) {
                        NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(r6);
                        if (byteBufferValue3 != null) {
                            TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r6), r6);
                            byteBufferValue3.reuse();
                            TLdeserialize3.id = queryFinalized3.intValue(1);
                            TLdeserialize3.date = queryFinalized3.intValue(2);
                            TLdeserialize3.dialog_id = queryFinalized3.longValue(3);
                            TLdeserialize3.random_id = queryFinalized3.longValue(4);
                            if (queryFinalized3.isNull(5)) {
                                i = 6;
                                stringValue = null;
                            } else {
                                stringValue = queryFinalized3.stringValue(5);
                                i = 6;
                            }
                            String stringValue2 = queryFinalized3.isNull(i) ? null : queryFinalized3.stringValue(i);
                            String stringValue3 = queryFinalized3.isNull(7) ? null : queryFinalized3.stringValue(7);
                            int intValue = queryFinalized3.intValue(8);
                            int intValue2 = queryFinalized3.intValue(9);
                            if (MessageObject.getFromChatId(TLdeserialize3) == 0 && DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                TLdeserialize3.from_id = tLRPC$TL_peerUser;
                                arrayList10 = arrayList13;
                                tLRPC$TL_peerUser.user_id = TLdeserialize3.dialog_id;
                            } else {
                                arrayList10 = arrayList13;
                            }
                            if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                if (!arrayList10.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                    arrayList10.add(Long.valueOf(TLdeserialize3.dialog_id));
                                }
                            } else if (DialogObject.isChatDialog(TLdeserialize3.dialog_id) && !arrayList14.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                arrayList14.add(Long.valueOf(-TLdeserialize3.dialog_id));
                            }
                            if (intValue2 != 0) {
                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = new TLRPC$TL_messageReplyHeader();
                                TLdeserialize3.reply_to = tLRPC$TL_messageReplyHeader;
                                tLRPC$TL_messageReplyHeader.forum_topic = true;
                                tLRPC$TL_messageReplyHeader.reply_to_top_id = intValue2;
                            }
                            MessageObject messageObject = new MessageObject(this.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) != 0, (intValue & 2) != 0, (TLdeserialize3.flags & Integer.MIN_VALUE) != 0, false);
                            int intValue3 = queryFinalized3.intValue(10);
                            messageObject.isReactionPush = intValue3 == 1;
                            messageObject.isStoryReactionPush = intValue3 == 2;
                            arrayList17.add(messageObject);
                            addUsersAndChatsFromMessage(TLdeserialize3, arrayList10, arrayList14, null);
                        } else {
                            arrayList10 = arrayList13;
                        }
                        arrayList13 = arrayList10;
                        r6 = 0;
                    }
                    arrayList2 = arrayList13;
                    queryFinalized3.dispose();
                    ArrayList arrayList23 = arrayList17;
                    arrayList5 = arrayList19;
                    ArrayList<TLRPC$EncryptedChat> arrayList24 = arrayList20;
                    loadReplyMessages(longSparseArray9, longSparseArray10, arrayList2, arrayList14, 0);
                    if (arrayList15.isEmpty()) {
                        str2 = str4;
                    } else {
                        str2 = str4;
                        getEncryptedChatsInternal(TextUtils.join(str2, arrayList15), arrayList24, arrayList2);
                    }
                    if (arrayList2.isEmpty()) {
                        arrayList4 = arrayList21;
                    } else {
                        arrayList4 = arrayList21;
                        getUsersInternal(arrayList2, arrayList4);
                    }
                    if (!arrayList14.isEmpty()) {
                        getChatsInternal(TextUtils.join(str2, arrayList14), arrayList5);
                        int i4 = 0;
                        while (i4 < arrayList5.size()) {
                            TLRPC$Chat tLRPC$Chat = arrayList5.get(i4);
                            if (tLRPC$Chat == null || !(ChatObject.isNotInChat(tLRPC$Chat) || tLRPC$Chat.min || tLRPC$Chat.migrated_to != null)) {
                                arrayList7 = arrayList23;
                                arrayList8 = arrayList24;
                                arrayList9 = arrayList22;
                                longSparseArray3 = longSparseArray11;
                            } else {
                                long j2 = -tLRPC$Chat.id;
                                this.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j2).stepThis().dispose();
                                arrayList7 = arrayList23;
                                arrayList8 = arrayList24;
                                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", Long.valueOf(j2))).stepThis().dispose();
                                arrayList5.remove(i4);
                                i4--;
                                longSparseArray3 = longSparseArray11;
                                longSparseArray3.remove(j2);
                                int i5 = 0;
                                while (i5 < arrayList22.size()) {
                                    ArrayList arrayList25 = arrayList22;
                                    if (((TLRPC$Message) arrayList25.get(i5)).dialog_id == j2) {
                                        arrayList25.remove(i5);
                                        i5--;
                                    }
                                    i5++;
                                    arrayList22 = arrayList25;
                                }
                                arrayList9 = arrayList22;
                            }
                            i4++;
                            longSparseArray11 = longSparseArray3;
                            arrayList22 = arrayList9;
                            arrayList23 = arrayList7;
                            arrayList24 = arrayList8;
                        }
                    }
                    arrayList = arrayList23;
                    arrayList20 = arrayList24;
                    arrayList3 = arrayList22;
                    longSparseArray = longSparseArray11;
                } else {
                    arrayList = arrayList17;
                    arrayList2 = arrayList13;
                    longSparseArray = longSparseArray8;
                    arrayList3 = arrayList16;
                    str2 = ",";
                    arrayList4 = arrayList18;
                    arrayList5 = arrayList19;
                }
                Collections.reverse(arrayList3);
                arrayList2.clear();
                arrayList14.clear();
                SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT uid, sid, date, expire_date, localName, flags FROM story_pushes", new Object[0]);
                final HashMap hashMap = new HashMap();
                while (queryFinalized4.next()) {
                    long longValue3 = queryFinalized4.longValue(0);
                    if (longValue3 >= 0) {
                        if (!arrayList2.contains(Long.valueOf(longValue3))) {
                            arrayList2.add(Long.valueOf(longValue3));
                        }
                    } else if (!arrayList14.contains(Long.valueOf(longValue3))) {
                        arrayList14.add(Long.valueOf(longValue3));
                    }
                    int intValue4 = queryFinalized4.intValue(1);
                    long longValue4 = queryFinalized4.longValue(2);
                    long longValue5 = queryFinalized4.longValue(3);
                    String stringValue4 = queryFinalized4.stringValue(4);
                    int intValue5 = queryFinalized4.intValue(5);
                    NotificationsController.StoryNotification storyNotification = (NotificationsController.StoryNotification) hashMap.get(Long.valueOf(longValue3));
                    if (storyNotification != null) {
                        arrayList6 = arrayList3;
                        longSparseArray2 = longSparseArray;
                        storyNotification.dateByIds.put(Integer.valueOf(intValue4), new Pair<>(Long.valueOf(longValue4), Long.valueOf(longValue5)));
                        storyNotification.date = storyNotification.getLeastDate();
                        storyNotification.hidden |= (intValue5 & 1) != 0;
                        if (!TextUtils.isEmpty(stringValue4)) {
                            storyNotification.localName = stringValue4;
                        }
                    } else {
                        longSparseArray2 = longSparseArray;
                        arrayList6 = arrayList3;
                        NotificationsController.StoryNotification storyNotification2 = new NotificationsController.StoryNotification(longValue3, stringValue4, intValue4, longValue4, longValue5);
                        storyNotification2.hidden = (intValue5 & 1) != 0;
                        hashMap.put(Long.valueOf(longValue3), storyNotification2);
                    }
                    arrayList3 = arrayList6;
                    longSparseArray = longSparseArray2;
                }
                final LongSparseArray longSparseArray12 = longSparseArray;
                final ArrayList arrayList26 = arrayList3;
                queryFinalized4.dispose();
                if (!arrayList2.isEmpty()) {
                    getUsersInternal(arrayList2, arrayList4);
                }
                if (!arrayList14.isEmpty()) {
                    getChatsInternal(TextUtils.join(str2, arrayList14), arrayList5);
                }
                final ArrayList arrayList27 = arrayList;
                final ArrayList<TLRPC$Chat> arrayList28 = arrayList5;
                final ArrayList<TLRPC$EncryptedChat> arrayList29 = arrayList20;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda148
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$loadUnreadMessages$73(longSparseArray12, arrayList26, arrayList27, arrayList4, arrayList28, arrayList29, hashMap);
                    }
                });
            } catch (Exception e5) {
                sQLiteCursor = queryFinalized;
                exc = e5;
            } catch (Throwable th5) {
                th2 = th5;
                sQLiteCursor = queryFinalized;
                th = th2;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e6) {
            exc = e6;
            sQLiteCursor = null;
        } catch (Throwable th6) {
            th = th6;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$73(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5, HashMap hashMap) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5, hashMap.values());
    }

    public void putWallpapers(final ArrayList<TLRPC$WallPaper> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda63
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWallpapers$75(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0093  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0098  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00a0  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWallpapers$75(int i, ArrayList arrayList) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (i == 1) {
            try {
                try {
                    this.database.executeFast("DELETE FROM wallpapers2 WHERE num >= -1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                    sQLiteDatabase.commitTransaction();
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        }
        this.database.beginTransaction();
        if (i != 0) {
            executeFast = this.database.executeFast("REPLACE INTO wallpapers2 VALUES(?, ?, ?)");
        } else {
            executeFast = this.database.executeFast("UPDATE wallpapers2 SET data = ? WHERE uid = ?");
        }
        try {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) arrayList.get(i2);
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$WallPaper.getObjectSize());
                tLRPC$WallPaper.serializeToStream(nativeByteBuffer);
                if (i != 0) {
                    executeFast.bindLong(1, tLRPC$WallPaper.id);
                    executeFast.bindByteBuffer(2, nativeByteBuffer);
                    if (i < 0) {
                        executeFast.bindInteger(3, i);
                    } else {
                        executeFast.bindInteger(3, i == 2 ? -1 : i2);
                    }
                } else {
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, tLRPC$WallPaper.id);
                }
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement == null) {
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    public void deleteWallpaper(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda79
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteWallpaper$76(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteWallpaper$76(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM wallpapers2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWallpapers$78();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWallpapers$78() {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
                final ArrayList arrayList = new ArrayList();
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$WallPaper TLdeserialize = TLRPC$WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.lambda$getWallpapers$77(arrayList);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getWallpapers$77(ArrayList arrayList) {
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.wallpapersDidLoad, arrayList);
    }

    public void addRecentLocalFile(final String str, final String str2, final TLRPC$Document tLRPC$Document) {
        if (str == null || str.length() == 0) {
            return;
        }
        if ((str2 == null || str2.length() == 0) && tLRPC$Document == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$addRecentLocalFile$79(tLRPC$Document, str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addRecentLocalFile$79(TLRPC$Document tLRPC$Document, String str, String str2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (tLRPC$Document != null) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Document.getObjectSize());
                    tLRPC$Document.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindString(1, str2);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void deleteUserChatHistory(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda98
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteUserChatHistory$82(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00c5  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00df A[Catch: all -> 0x00ee, Exception -> 0x00f1, TRY_LEAVE, TryCatch #7 {Exception -> 0x00f1, all -> 0x00ee, blocks: (B:3:0x0004, B:35:0x00a0, B:39:0x00c7, B:41:0x00df), top: B:69:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00ff  */
    /* JADX WARN: Removed duplicated region for block: B:74:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r13v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteUserChatHistory$82(final long j, long j2) {
        SQLiteCursor sQLiteCursor;
        ArrayList<Pair<Long, Integer>> arrayList;
        boolean z;
        try {
            final ArrayList<Integer> arrayList2 = new ArrayList<>();
            SQLiteDatabase sQLiteDatabase = this.database;
            ?? r13 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    final ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                                if (TLdeserialize != null) {
                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    if ((UserObject.isReplyUser(j) && MessageObject.getPeerId(TLdeserialize.fwd_from.from_id) == j2) || (MessageObject.getFromChatId(TLdeserialize) == j2 && TLdeserialize.id != 1)) {
                                        arrayList2.add(Integer.valueOf(TLdeserialize.id));
                                        z = true;
                                        arrayList = arrayList5;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList3, arrayList5, arrayList4, false);
                                            byteBufferValue.reuse();
                                        } catch (Exception e) {
                                            e = e;
                                            checkSQLException(e);
                                            queryFinalized.dispose();
                                            deleteFromDownloadQueue(arrayList, z);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                                                }
                                            });
                                            lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                                            lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                                            getFileLoader().deleteFiles(arrayList3, 0);
                                            if (arrayList2.isEmpty()) {
                                            }
                                        }
                                    }
                                }
                                arrayList = arrayList5;
                                z = true;
                                byteBufferValue.reuse();
                            } else {
                                arrayList = arrayList5;
                            }
                            arrayList5 = arrayList;
                            r13 = 0;
                        } catch (Exception e2) {
                            e = e2;
                            arrayList = arrayList5;
                            z = true;
                        }
                    }
                    arrayList = arrayList5;
                    z = true;
                    queryFinalized.dispose();
                    deleteFromDownloadQueue(arrayList, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                        }
                    });
                    lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                    lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                    getFileLoader().deleteFiles(arrayList3, 0);
                    if (arrayList2.isEmpty()) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda177
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$deleteUserChatHistory$81(arrayList2, j);
                            }
                        });
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$80(ArrayList arrayList, long j, ArrayList arrayList2) {
        getFileLoader().cancelLoadFiles(arrayList);
        getMessagesController().markDialogMessageAsDeleted(j, arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$81(ArrayList arrayList, long j) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.messagesDeleted;
        Object[] objArr = new Object[3];
        objArr[0] = arrayList;
        objArr[1] = Long.valueOf(DialogObject.isChatDialog(j) ? -j : 0L);
        objArr[2] = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, objArr);
    }

    private boolean addFilesToDelete(TLRPC$Message tLRPC$Message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, ArrayList<String> arrayList3, boolean z) {
        long j;
        int i;
        int i2 = 0;
        if (tLRPC$Message == null) {
            return false;
        }
        TLRPC$Document document = MessageObject.getDocument(tLRPC$Message);
        TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message);
        if (MessageObject.isVoiceMessage(tLRPC$Message)) {
            if (document == null || getMediaDataController().ringtoneDataStore.contains(document.id)) {
                return false;
            }
            j = document.id;
            i = 2;
        } else {
            if (MessageObject.isStickerMessage(tLRPC$Message) || MessageObject.isAnimatedStickerMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
            } else if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isGifMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
                i = 4;
            } else if (document != null) {
                if (getMediaDataController().ringtoneDataStore.contains(document.id)) {
                    return false;
                }
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        }
        if (j != 0) {
            arrayList2.add(new Pair<>(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                TLRPC$PhotoSize tLRPC$PhotoSize = photo.sizes.get(i2);
                String attachFileName = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                if (!TextUtils.isEmpty(attachFileName)) {
                    arrayList3.add(attachFileName);
                }
                File pathToAttach = getFileLoader().getPathToAttach(tLRPC$PhotoSize, z);
                if (pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        } else if (document != null) {
            String attachFileName2 = FileLoader.getAttachFileName(document);
            if (!TextUtils.isEmpty(attachFileName2)) {
                arrayList3.add(attachFileName2);
            }
            File pathToAttach2 = getFileLoader().getPathToAttach(document, z);
            if (pathToAttach2.toString().length() > 0) {
                arrayList.add(pathToAttach2);
            }
            int size2 = document.thumbs.size();
            while (i2 < size2) {
                File pathToAttach3 = getFileLoader().getPathToAttach(document.thumbs.get(i2));
                if (pathToAttach3.toString().length() > 0) {
                    arrayList.add(pathToAttach3);
                }
                i2++;
            }
            return true;
        } else {
            return false;
        }
    }

    public void deleteDialog(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda53
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$85(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:100:0x02fd  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0400 A[Catch: all -> 0x0579, Exception -> 0x0581, TryCatch #19 {Exception -> 0x0581, all -> 0x0579, blocks: (B:4:0x000c, B:20:0x0045, B:54:0x0102, B:137:0x0448, B:139:0x048e, B:140:0x04aa, B:131:0x0364, B:133:0x0400, B:135:0x0406, B:136:0x0426, B:26:0x0055, B:46:0x00d6), top: B:205:0x000c }] */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0426 A[Catch: all -> 0x0579, Exception -> 0x0581, TryCatch #19 {Exception -> 0x0581, all -> 0x0579, blocks: (B:4:0x000c, B:20:0x0045, B:54:0x0102, B:137:0x0448, B:139:0x048e, B:140:0x04aa, B:131:0x0364, B:133:0x0400, B:135:0x0406, B:136:0x0426, B:26:0x0055, B:46:0x00d6), top: B:205:0x000c }] */
    /* JADX WARN: Removed duplicated region for block: B:139:0x048e A[Catch: all -> 0x0579, Exception -> 0x0581, TryCatch #19 {Exception -> 0x0581, all -> 0x0579, blocks: (B:4:0x000c, B:20:0x0045, B:54:0x0102, B:137:0x0448, B:139:0x048e, B:140:0x04aa, B:131:0x0364, B:133:0x0400, B:135:0x0406, B:136:0x0426, B:26:0x0055, B:46:0x00d6), top: B:205:0x000c }] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x058d  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0592  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x0597  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x059c  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x05a4  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x05a9  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x05ae  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x05b3  */
    /* JADX WARN: Removed duplicated region for block: B:212:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01f9 A[Catch: all -> 0x033e, Exception -> 0x0341, TryCatch #21 {all -> 0x033e, blocks: (B:59:0x0163, B:91:0x01c3, B:93:0x01f9, B:94:0x0223, B:103:0x0304, B:119:0x033a, B:34:0x00aa, B:44:0x00d0, B:45:0x00d3), top: B:179:0x00aa }] */
    /* JADX WARN: Removed duplicated region for block: B:98:0x02ef  */
    /* JADX WARN: Type inference failed for: r12v0 */
    /* JADX WARN: Type inference failed for: r12v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r12v8 */
    /* JADX WARN: Type inference failed for: r14v21 */
    /* JADX WARN: Type inference failed for: r14v22, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r14v23 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteDialog$85(int i, long j) {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor;
        Throwable th2;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        final ArrayList<String> arrayList;
        ArrayList<File> arrayList2;
        String str;
        boolean z;
        String str2;
        String str3;
        String str4;
        long j2;
        String str5;
        String str6;
        long j3;
        int i2;
        int i3;
        long j4;
        ?? r12 = 0;
        if (i == 3) {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                    queryFinalized.dispose();
                    if (intValue != 0) {
                        return;
                    }
                } catch (Exception e) {
                    th2 = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2 = null;
                    try {
                        checkSQLException(th2);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2 = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                th2 = e2;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                checkSQLException(th2);
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
            } catch (Throwable th5) {
                th = th5;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                throw th;
            }
        }
        String str7 = "SELECT data FROM messages_v2 WHERE uid = ";
        if (DialogObject.isEncryptedDialog(j) || i == 2) {
            SQLiteDatabase sQLiteDatabase2 = this.database;
            SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized2.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(r12);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r12), r12);
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                arrayList = arrayList4;
                                arrayList2 = arrayList3;
                                sQLiteCursor3 = queryFinalized2;
                                str = str7;
                                z = true;
                                try {
                                    try {
                                        addFilesToDelete(TLdeserialize, arrayList2, arrayList5, arrayList, false);
                                    } catch (Exception e3) {
                                        e = e3;
                                        try {
                                            checkSQLException(e);
                                            sQLiteCursor3.dispose();
                                            deleteFromDownloadQueue(arrayList5, z);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda164
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                                                }
                                            });
                                            getFileLoader().deleteFiles(arrayList2, i);
                                            if (i != 0) {
                                            }
                                            str2 = "DELETE FROM media_holes_v2 WHERE uid = ";
                                            str3 = "DELETE FROM media_v4 WHERE uid = ";
                                            str4 = "DELETE FROM bot_keyboard WHERE uid = ";
                                            j2 = j;
                                            str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                                            str6 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                                            SQLiteDatabase sQLiteDatabase3 = this.database;
                                            sQLiteDatabase3.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase4 = this.database;
                                            sQLiteDatabase4.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase5 = this.database;
                                            sQLiteDatabase5.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase6 = this.database;
                                            sQLiteDatabase6.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase7 = this.database;
                                            sQLiteDatabase7.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
                                            if (DialogObject.isEncryptedDialog(j)) {
                                            }
                                            SQLiteDatabase sQLiteDatabase8 = this.database;
                                            sQLiteDatabase8.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase9 = this.database;
                                            sQLiteDatabase9.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                                            if (j2 == getUserConfig().getClientUserId()) {
                                            }
                                            SQLiteDatabase sQLiteDatabase10 = this.database;
                                            sQLiteDatabase10.executeFast(str4 + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase11 = this.database;
                                            sQLiteDatabase11.executeFast(str6 + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase12 = this.database;
                                            sQLiteDatabase12.executeFast(str5 + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase13 = this.database;
                                            sQLiteDatabase13.executeFast(str3 + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase14 = this.database;
                                            sQLiteDatabase14.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase15 = this.database;
                                            sQLiteDatabase15.executeFast(str2 + j2).stepThis().dispose();
                                            getMediaDataController().clearBotKeyboard(j2);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda26
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteDialog$84();
                                                }
                                            });
                                            resetAllUnreadCounters(false);
                                            updateWidgets(j2);
                                        } catch (Exception e4) {
                                            e = e4;
                                            th2 = e;
                                            sQLiteCursor = sQLiteCursor3;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement2 = null;
                                            sQLiteCursor2 = null;
                                            checkSQLException(th2);
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLiteCursor2 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                        }
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    th = th;
                                    sQLiteCursor = sQLiteCursor3;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    sQLiteCursor2 = null;
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                arrayList = arrayList4;
                                arrayList2 = arrayList3;
                                sQLiteCursor3 = queryFinalized2;
                                str = str7;
                            }
                            arrayList4 = arrayList;
                            arrayList3 = arrayList2;
                            str7 = str;
                            queryFinalized2 = sQLiteCursor3;
                            r12 = 0;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList4;
                            arrayList2 = arrayList3;
                            sQLiteCursor3 = queryFinalized2;
                            str = str7;
                            z = true;
                        }
                    }
                    arrayList = arrayList4;
                    arrayList2 = arrayList3;
                    sQLiteCursor3 = queryFinalized2;
                    str = str7;
                    z = true;
                    sQLiteCursor3.dispose();
                    deleteFromDownloadQueue(arrayList5, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda164
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                        }
                    });
                    getFileLoader().deleteFiles(arrayList2, i);
                } catch (Throwable th7) {
                    th = th7;
                    sQLiteCursor3 = queryFinalized2;
                    th = th;
                    sQLiteCursor = sQLiteCursor3;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2 = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            } catch (Exception e6) {
                e = e6;
                sQLiteCursor3 = queryFinalized2;
                th2 = e;
                sQLiteCursor = sQLiteCursor3;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor2 = null;
                checkSQLException(th2);
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
            }
        } else {
            str = "SELECT data FROM messages_v2 WHERE uid = ";
        }
        if (i != 0 || i == 3) {
            str2 = "DELETE FROM media_holes_v2 WHERE uid = ";
            str3 = "DELETE FROM media_v4 WHERE uid = ";
            str4 = "DELETE FROM bot_keyboard WHERE uid = ";
            j2 = j;
            str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
            str6 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
            SQLiteDatabase sQLiteDatabase32 = this.database;
            sQLiteDatabase32.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase42 = this.database;
            sQLiteDatabase42.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase52 = this.database;
            sQLiteDatabase52.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase62 = this.database;
            sQLiteDatabase62.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase72 = this.database;
            sQLiteDatabase72.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
            if (DialogObject.isEncryptedDialog(j)) {
                if (DialogObject.isChatDialog(j)) {
                    SQLiteDatabase sQLiteDatabase16 = this.database;
                    sQLiteDatabase16.executeFast("DELETE FROM chat_settings_v2 WHERE uid = " + (-j2)).stepThis().dispose();
                }
            } else {
                SQLiteDatabase sQLiteDatabase17 = this.database;
                sQLiteDatabase17.executeFast("DELETE FROM enc_chats WHERE uid = " + DialogObject.getEncryptedChatId(j)).stepThis().dispose();
            }
        } else if (i == 2) {
            SQLiteDatabase sQLiteDatabase18 = this.database;
            SQLiteCursor queryFinalized3 = sQLiteDatabase18.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
            try {
                if (queryFinalized3.next()) {
                    long longValue = queryFinalized3.longValue(0);
                    long longValue2 = queryFinalized3.longValue(1);
                    SQLiteDatabase sQLiteDatabase19 = this.database;
                    sQLiteCursor3 = queryFinalized3;
                    ?? r14 = 0;
                    SQLiteCursor queryFinalized4 = sQLiteDatabase19.queryFinalized(str + j + " AND mid IN (" + longValue + "," + longValue2 + ")", new Object[0]);
                    int i4 = -1;
                    while (queryFinalized4.next()) {
                        try {
                            try {
                                NativeByteBuffer byteBufferValue2 = queryFinalized4.byteBufferValue(r14);
                                if (byteBufferValue2 != null) {
                                    i2 = i4;
                                    try {
                                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r14), r14);
                                        if (TLdeserialize2 != null) {
                                            j3 = longValue2;
                                            try {
                                                TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                            } catch (Exception e7) {
                                                e = e7;
                                                try {
                                                    checkSQLException(e);
                                                    queryFinalized4.dispose();
                                                    SQLiteDatabase sQLiteDatabase20 = this.database;
                                                    StringBuilder sb = new StringBuilder();
                                                    sb.append("DELETE FROM messages_v2 WHERE uid = ");
                                                    sb.append(j);
                                                    sb.append(" AND mid != ");
                                                    sb.append(longValue);
                                                    sb.append(" AND mid != ");
                                                    long j5 = j3;
                                                    sb.append(j5);
                                                    sQLiteDatabase20.executeFast(sb.toString()).stepThis().dispose();
                                                    if (j == getUserConfig().getClientUserId()) {
                                                    }
                                                    SQLiteDatabase sQLiteDatabase21 = this.database;
                                                    sQLiteDatabase21.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
                                                    SQLiteDatabase sQLiteDatabase22 = this.database;
                                                    sQLiteDatabase22.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j).stepThis().dispose();
                                                    SQLiteDatabase sQLiteDatabase23 = this.database;
                                                    sQLiteDatabase23.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                                                    SQLiteDatabase sQLiteDatabase24 = this.database;
                                                    sQLiteDatabase24.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                    SQLiteDatabase sQLiteDatabase25 = this.database;
                                                    sQLiteDatabase25.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                    SQLiteDatabase sQLiteDatabase26 = this.database;
                                                    sQLiteDatabase26.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                    getMediaDataController().clearBotKeyboard(j);
                                                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                    sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                    i3 = i2;
                                                    if (i3 == -1) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Exception e8) {
                                                    th2 = e8;
                                                    sQLiteCursor2 = queryFinalized4;
                                                    sQLiteCursor = sQLiteCursor3;
                                                    sQLitePreparedStatement = null;
                                                    sQLitePreparedStatement2 = null;
                                                    checkSQLException(th2);
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    if (sQLiteCursor2 != null) {
                                                        sQLiteCursor2.dispose();
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                        sQLitePreparedStatement.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                        return;
                                                    }
                                                    return;
                                                }
                                                try {
                                                    sQLitePreparedStatement2.dispose();
                                                    updateWidgets(j4);
                                                    sQLiteCursor3.dispose();
                                                    return;
                                                } catch (Exception e9) {
                                                    th2 = e9;
                                                    sQLiteCursor = sQLiteCursor3;
                                                    sQLitePreparedStatement = null;
                                                    sQLiteCursor2 = null;
                                                    checkSQLException(th2);
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                } catch (Throwable th8) {
                                                    th = th8;
                                                    sQLiteCursor = sQLiteCursor3;
                                                    sQLitePreparedStatement = null;
                                                    sQLiteCursor2 = null;
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                        } else {
                                            j3 = longValue2;
                                        }
                                        byteBufferValue2.reuse();
                                        if (TLdeserialize2 != null) {
                                            i4 = TLdeserialize2.id;
                                            longValue2 = j3;
                                            r14 = 0;
                                        }
                                    } catch (Exception e10) {
                                        e = e10;
                                        j3 = longValue2;
                                    }
                                } else {
                                    j3 = longValue2;
                                    i2 = i4;
                                }
                                i4 = i2;
                                longValue2 = j3;
                                r14 = 0;
                            } catch (Exception e11) {
                                e = e11;
                                j3 = longValue2;
                                i2 = i4;
                            }
                        } catch (Throwable th9) {
                            th = th9;
                            sQLiteCursor2 = queryFinalized4;
                            sQLiteCursor = sQLiteCursor3;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            if (sQLiteCursor != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            throw th;
                        }
                    }
                    j3 = longValue2;
                    i2 = i4;
                    queryFinalized4.dispose();
                    SQLiteDatabase sQLiteDatabase202 = this.database;
                    StringBuilder sb2 = new StringBuilder();
                    sb2.append("DELETE FROM messages_v2 WHERE uid = ");
                    sb2.append(j);
                    sb2.append(" AND mid != ");
                    sb2.append(longValue);
                    sb2.append(" AND mid != ");
                    long j52 = j3;
                    sb2.append(j52);
                    sQLiteDatabase202.executeFast(sb2.toString()).stepThis().dispose();
                    if (j == getUserConfig().getClientUserId()) {
                        SQLiteDatabase sQLiteDatabase27 = this.database;
                        sQLiteDatabase27.executeFast("DELETE FROM messages_topics WHERE uid = " + j + " AND mid != " + longValue + " AND mid != " + j52).stepThis().dispose();
                    }
                    SQLiteDatabase sQLiteDatabase212 = this.database;
                    sQLiteDatabase212.executeFast("DELETE FROM messages_holes WHERE uid = " + j).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase222 = this.database;
                    sQLiteDatabase222.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase232 = this.database;
                    sQLiteDatabase232.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase242 = this.database;
                    sQLiteDatabase242.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase252 = this.database;
                    sQLiteDatabase252.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                    SQLiteDatabase sQLiteDatabase262 = this.database;
                    sQLiteDatabase262.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                    getMediaDataController().clearBotKeyboard(j);
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                    try {
                        sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                        i3 = i2;
                        if (i3 == -1) {
                            j4 = j;
                            try {
                                createFirstHoles(j, sQLitePreparedStatement, sQLitePreparedStatement2, i3, 0L);
                            } catch (Exception e12) {
                                th2 = e12;
                                sQLiteCursor = sQLiteCursor3;
                                sQLiteCursor2 = null;
                                checkSQLException(th2);
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                            } catch (Throwable th10) {
                                th = th10;
                                sQLiteCursor = sQLiteCursor3;
                                sQLiteCursor2 = null;
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                throw th;
                            }
                        } else {
                            j4 = j;
                        }
                        sQLitePreparedStatement.dispose();
                        sQLitePreparedStatement2.dispose();
                        updateWidgets(j4);
                    } catch (Exception e13) {
                        th2 = e13;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor2 = null;
                        checkSQLException(th2);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                    } catch (Throwable th11) {
                        th = th11;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor2 = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLiteCursor3 = queryFinalized3;
                }
                sQLiteCursor3.dispose();
                return;
            } catch (Exception e14) {
                e = e14;
                sQLiteCursor3 = queryFinalized3;
                th2 = e;
                sQLiteCursor = sQLiteCursor3;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor2 = null;
                checkSQLException(th2);
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
            } catch (Throwable th12) {
                th = th12;
                sQLiteCursor3 = queryFinalized3;
                th = th;
                sQLiteCursor = sQLiteCursor3;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteCursor2 = null;
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                throw th;
            }
        } else {
            str2 = "DELETE FROM media_holes_v2 WHERE uid = ";
            str3 = "DELETE FROM media_v4 WHERE uid = ";
            str4 = "DELETE FROM bot_keyboard WHERE uid = ";
            j2 = j;
            str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
            str6 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
        }
        SQLiteDatabase sQLiteDatabase82 = this.database;
        sQLiteDatabase82.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase92 = this.database;
        sQLiteDatabase92.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
        if (j2 == getUserConfig().getClientUserId()) {
            SQLiteDatabase sQLiteDatabase28 = this.database;
            sQLiteDatabase28.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
        }
        SQLiteDatabase sQLiteDatabase102 = this.database;
        sQLiteDatabase102.executeFast(str4 + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase112 = this.database;
        sQLiteDatabase112.executeFast(str6 + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase122 = this.database;
        sQLiteDatabase122.executeFast(str5 + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase132 = this.database;
        sQLiteDatabase132.executeFast(str3 + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase142 = this.database;
        sQLiteDatabase142.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase152 = this.database;
        sQLiteDatabase152.executeFast(str2 + j2).stepThis().dispose();
        getMediaDataController().clearBotKeyboard(j2);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda26
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$84();
            }
        });
        resetAllUnreadCounters(false);
        updateWidgets(j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$83(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$84() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    public void onDeleteQueryComplete(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onDeleteQueryComplete$86(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onDeleteQueryComplete$86(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearUserPhotos(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhotos$87(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhotos$87(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_photos WHERE uid = " + j).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_photos_count WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearUserPhoto(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda95
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhoto$88(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhoto$88(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_photos WHERE uid = " + j + " AND id = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("UPDATE dialog_photos_count SET count = count - 1 WHERE uid = " + j + " AND count > 0").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i, final int i2, final int i3, final int i4, final int i5, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<ArrayList<MessageObject>> longSparseArray2, final TLRPC$Message tLRPC$Message, final int i6) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda222
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetDialogs$90(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, tLRPC$Message, i, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:102:0x035c  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0361  */
    /* JADX WARN: Removed duplicated region for block: B:134:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x02ee A[Catch: all -> 0x0342, Exception -> 0x0345, LOOP:5: B:77:0x02eb->B:79:0x02ee, LOOP_END, TryCatch #4 {Exception -> 0x0345, all -> 0x0342, blocks: (B:3:0x0006, B:4:0x0024, B:6:0x002c, B:7:0x0040, B:21:0x0094, B:23:0x01da, B:25:0x01e8, B:41:0x022e, B:28:0x01ed, B:32:0x0208, B:34:0x0210, B:35:0x0213, B:37:0x0223, B:38:0x0225, B:40:0x0229, B:42:0x0234, B:45:0x0261, B:47:0x0269, B:49:0x0277, B:79:0x02ee, B:80:0x030d, B:50:0x027a, B:54:0x0287, B:57:0x0290, B:59:0x0298, B:61:0x02a6, B:62:0x02a9, B:65:0x02b7, B:68:0x02c0, B:70:0x02c8, B:72:0x02d6, B:73:0x02dd), top: B:112:0x0006 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x0338  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetDialogs$90(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, TLRPC$Message tLRPC$Message, int i6, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j;
        long j2;
        long j3;
        long j4;
        long j5;
        int i7;
        SQLiteDatabase sQLiteDatabase2;
        long j6;
        try {
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$messages_Dialogs.dialogs.size() - i;
            final LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i8 = i; i8 < tLRPC$messages_Dialogs.dialogs.size(); i8++) {
                arrayList3.add(Long.valueOf(tLRPC$messages_Dialogs.dialogs.get(i8).id));
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
            int i9 = 0;
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    int intValue = queryFinalized.intValue(1);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList.add(Long.valueOf(longValue));
                        if (intValue > 0) {
                            i9 = Math.max(intValue, i9);
                            longSparseIntArray.put(longValue, intValue);
                            arrayList2.add(Long.valueOf(longValue));
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(arrayList2, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda238
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$resetDialogs$89;
                    lambda$resetDialogs$89 = MessagesStorage.lambda$resetDialogs$89(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                    return lambda$resetDialogs$89;
                }
            });
            while (arrayList2.size() < size) {
                arrayList2.add(0, 0L);
            }
            queryFinalized.dispose();
            String str = "(" + TextUtils.join(",", arrayList) + ")";
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialogs WHERE did IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM polls_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_v4 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.commitTransaction();
            for (int i10 = 0; i10 < size; i10++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i + i10);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialog) || tLRPC$Dialog.pinned) {
                    int indexOf = arrayList2.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    int indexOf2 = arrayList3.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    if (indexOf != -1 && indexOf2 != -1) {
                        if (indexOf == indexOf2) {
                            int i11 = longSparseIntArray.get(tLRPC$Dialog.id, -1);
                            if (i11 != -1) {
                                tLRPC$Dialog.pinnedNum = i11;
                            }
                        } else {
                            int i12 = longSparseIntArray.get(((Long) arrayList2.get(indexOf2)).longValue(), -1);
                            if (i12 != -1) {
                                tLRPC$Dialog.pinnedNum = i12;
                            }
                        }
                    }
                    if (tLRPC$Dialog.pinnedNum == 0) {
                        tLRPC$Dialog.pinnedNum = (size - i10) + i9;
                    }
                }
            }
            putDialogsInternal(tLRPC$messages_Dialogs, 0);
            lambda$saveDiffParams$35(i2, i3, i4, i5);
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(0) + tLRPC$messages_Dialogs.dialogs.size();
            int i13 = tLRPC$Message.id;
            int i14 = tLRPC$Message.date;
            TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
            long j7 = tLRPC$Peer.channel_id;
            if (j7 == 0) {
                long j8 = tLRPC$Peer.chat_id;
                if (j8 != 0) {
                    int i15 = 0;
                    while (true) {
                        if (i15 >= tLRPC$messages_Dialogs.chats.size()) {
                            j5 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs.chats.get(i15);
                        if (tLRPC$Chat.id == j8) {
                            j5 = tLRPC$Chat.access_hash;
                            break;
                        }
                        i15++;
                    }
                    j4 = j5;
                    j3 = j8;
                    j = 0;
                    j2 = 0;
                } else {
                    j = tLRPC$Peer.user_id;
                    if (j != 0) {
                        for (int i16 = 0; i16 < tLRPC$messages_Dialogs.users.size(); i16++) {
                            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i16);
                            if (tLRPC$User.id == j) {
                                j4 = tLRPC$User.access_hash;
                                j2 = 0;
                            }
                        }
                    } else {
                        j = 0;
                    }
                    j2 = 0;
                    j3 = 0;
                    j4 = 0;
                }
                for (i7 = 0; i7 < 2; i7++) {
                    getUserConfig().setDialogsLoadOffset(i7, i13, i14, j, j3, j2, j4);
                    getUserConfig().setTotalDialogsCount(i7, totalDialogsCount);
                }
                getUserConfig().draftsLoaded = false;
                getUserConfig().saveConfig(false);
                getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    sQLiteDatabase2.commitTransaction();
                    return;
                }
                return;
            }
            int i17 = 0;
            while (true) {
                if (i17 >= tLRPC$messages_Dialogs.chats.size()) {
                    j6 = 0;
                    break;
                }
                TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i17);
                if (tLRPC$Chat2.id == j7) {
                    j6 = tLRPC$Chat2.access_hash;
                    break;
                }
                i17++;
            }
            j4 = j6;
            j2 = j7;
            j = 0;
            j3 = 0;
            while (i7 < 2) {
            }
            getUserConfig().draftsLoaded = false;
            getUserConfig().saveConfig(false);
            getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$resetDialogs$89(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    public void emptyMessagesMedia(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$emptyMessagesMedia$94(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0241  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x024d  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x0252  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x01ff A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:140:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:40:0x012f A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0135 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0142 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0156 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x015e  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0172  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0183 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0197 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:62:0x01a1 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x01ac A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x01bf A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:71:0x01c3 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01d1 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:75:0x01d7 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x01e0 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01e6 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01f2 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01f7 A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x01fc A[Catch: all -> 0x0229, Exception -> 0x022b, TryCatch #7 {Exception -> 0x022b, all -> 0x0229, blocks: (B:29:0x00d0, B:31:0x00d6, B:33:0x0115, B:38:0x011d, B:40:0x012f, B:42:0x013c, B:44:0x0142, B:46:0x015a, B:52:0x0165, B:56:0x0173, B:58:0x0183, B:60:0x019b, B:62:0x01a1, B:66:0x01a8, B:68:0x01b0, B:70:0x01bf, B:72:0x01c8, B:74:0x01d1, B:76:0x01da, B:78:0x01e0, B:80:0x01ea, B:82:0x01f2, B:84:0x01f7, B:86:0x01fc, B:87:0x01ff, B:79:0x01e6, B:75:0x01d7, B:71:0x01c3, B:65:0x01a6, B:67:0x01ac, B:59:0x0197, B:45:0x0156, B:41:0x0135, B:89:0x0208, B:90:0x020c, B:92:0x0216), top: B:125:0x00d0 }] */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$emptyMessagesMedia$94(ArrayList arrayList, long j) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        int i;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        NativeByteBuffer writeLocalParams;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        try {
            ArrayList<File> arrayList2 = new ArrayList<>();
            final ArrayList<String> arrayList3 = new ArrayList<>();
            ArrayList<Pair<Long, Integer>> arrayList4 = new ArrayList<>();
            final ArrayList arrayList5 = new ArrayList();
            int i2 = 2;
            ?? r13 = 0;
            int i3 = 1;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid, custom_params FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", arrayList), Long.valueOf(j)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (TLdeserialize.media != null && addFilesToDelete(TLdeserialize, arrayList2, arrayList4, arrayList3, true)) {
                            TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                            if (tLRPC$MessageMedia.document != null) {
                                tLRPC$MessageMedia.document = new TLRPC$TL_documentEmpty();
                            } else if (tLRPC$MessageMedia.photo != null) {
                                tLRPC$MessageMedia.photo = new TLRPC$TL_photoEmpty();
                            }
                            TLdeserialize.media.flags &= -2;
                            TLdeserialize.id = queryFinalized.intValue(1);
                            TLdeserialize.date = queryFinalized.intValue(2);
                            TLdeserialize.dialog_id = queryFinalized.longValue(3);
                            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
                            if (byteBufferValue2 != null) {
                                MessageCustomParamsHelper.readLocalParams(TLdeserialize, byteBufferValue2);
                                byteBufferValue2.reuse();
                            }
                            arrayList5.add(TLdeserialize);
                        }
                    }
                    r13 = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            int i4 = 3;
            queryFinalized.dispose();
            deleteFromDownloadQueue(arrayList4, true);
            if (arrayList5.isEmpty()) {
                sQLitePreparedStatement = null;
            } else {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                int i5 = 0;
                while (i5 < arrayList5.size()) {
                    try {
                        TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList5.get(i5);
                        MessageObject.normalizeFlags(tLRPC$Message);
                        NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                        tLRPC$Message.serializeToStream(nativeByteBuffer3);
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindInteger(i3, tLRPC$Message.id);
                        sQLitePreparedStatement.bindLong(i2, tLRPC$Message.dialog_id);
                        sQLitePreparedStatement.bindInteger(i4, MessageObject.getUnreadFlags(tLRPC$Message));
                        sQLitePreparedStatement.bindInteger(4, tLRPC$Message.send_state);
                        sQLitePreparedStatement.bindInteger(5, tLRPC$Message.date);
                        sQLitePreparedStatement.bindByteBuffer(6, nativeByteBuffer3);
                        if (!MessageObject.isOut(tLRPC$Message) && !tLRPC$Message.from_scheduled) {
                            i = 0;
                            sQLitePreparedStatement.bindInteger(7, i);
                            sQLitePreparedStatement.bindInteger(8, tLRPC$Message.ttl);
                            if ((tLRPC$Message.flags & 1024) == 0) {
                                sQLitePreparedStatement.bindInteger(9, tLRPC$Message.views);
                            } else {
                                sQLitePreparedStatement.bindInteger(9, getMessageMediaType(tLRPC$Message));
                            }
                            if (tLRPC$Message.replyStory == null) {
                                nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.replyStory.getObjectSize());
                                tLRPC$Message.replyStory.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement.bindByteBuffer(10, nativeByteBuffer);
                            } else {
                                sQLitePreparedStatement.bindNull(10);
                                nativeByteBuffer = null;
                            }
                            int i6 = tLRPC$Message.stickerVerified;
                            sQLitePreparedStatement.bindInteger(11, i6 != 0 ? 1 : i6 == i2 ? 2 : 0);
                            sQLitePreparedStatement.bindInteger(12, !tLRPC$Message.mentioned ? 1 : 0);
                            sQLitePreparedStatement.bindInteger(13, tLRPC$Message.forwards);
                            if (tLRPC$Message.replies == null) {
                                nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer2);
                                sQLitePreparedStatement.bindByteBuffer(14, nativeByteBuffer2);
                            } else {
                                sQLitePreparedStatement.bindNull(14);
                                nativeByteBuffer2 = null;
                            }
                            tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader == null) {
                                int i7 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                if (i7 == 0) {
                                    i7 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                }
                                sQLitePreparedStatement.bindInteger(15, i7);
                            } else {
                                sQLitePreparedStatement.bindInteger(15, 0);
                            }
                            sQLitePreparedStatement.bindLong(16, MessageObject.getChannelId(tLRPC$Message));
                            writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message);
                            if (writeLocalParams == null) {
                                sQLitePreparedStatement.bindByteBuffer(16, writeLocalParams);
                            } else {
                                sQLitePreparedStatement.bindNull(17);
                            }
                            if ((tLRPC$Message.flags & 131072) == 0) {
                                sQLitePreparedStatement.bindLong(18, tLRPC$Message.grouped_id);
                            } else {
                                sQLitePreparedStatement.bindNull(18);
                            }
                            tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader2 == null) {
                                sQLitePreparedStatement.bindInteger(19, tLRPC$MessageReplyHeader2.story_id);
                            } else {
                                sQLitePreparedStatement.bindInteger(19, 0);
                            }
                            sQLitePreparedStatement.step();
                            nativeByteBuffer3.reuse();
                            if (nativeByteBuffer2 != null) {
                                nativeByteBuffer2.reuse();
                            }
                            if (writeLocalParams != null) {
                                writeLocalParams.reuse();
                            }
                            if (nativeByteBuffer == null) {
                                nativeByteBuffer.reuse();
                            }
                            i5++;
                            i2 = 2;
                            i4 = 3;
                            i3 = 1;
                        }
                        i = 1;
                        sQLitePreparedStatement.bindInteger(7, i);
                        sQLitePreparedStatement.bindInteger(8, tLRPC$Message.ttl);
                        if ((tLRPC$Message.flags & 1024) == 0) {
                        }
                        if (tLRPC$Message.replyStory == null) {
                        }
                        int i62 = tLRPC$Message.stickerVerified;
                        sQLitePreparedStatement.bindInteger(11, i62 != 0 ? 1 : i62 == i2 ? 2 : 0);
                        sQLitePreparedStatement.bindInteger(12, !tLRPC$Message.mentioned ? 1 : 0);
                        sQLitePreparedStatement.bindInteger(13, tLRPC$Message.forwards);
                        if (tLRPC$Message.replies == null) {
                        }
                        tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                        if (tLRPC$MessageReplyHeader == null) {
                        }
                        sQLitePreparedStatement.bindLong(16, MessageObject.getChannelId(tLRPC$Message));
                        writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message);
                        if (writeLocalParams == null) {
                        }
                        if ((tLRPC$Message.flags & 131072) == 0) {
                        }
                        tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                        if (tLRPC$MessageReplyHeader2 == null) {
                        }
                        sQLitePreparedStatement.step();
                        nativeByteBuffer3.reuse();
                        if (nativeByteBuffer2 != null) {
                        }
                        if (writeLocalParams != null) {
                        }
                        if (nativeByteBuffer == null) {
                        }
                        i5++;
                        i2 = 2;
                        i4 = 3;
                        i3 = 1;
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement == null) {
                            return;
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                    sQLitePreparedStatement = null;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda163
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$emptyMessagesMedia$91(arrayList5);
                    }
                });
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda170
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$emptyMessagesMedia$92(arrayList3);
                }
            });
            getFileLoader().deleteFiles(arrayList2, 0);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
        sQLitePreparedStatement.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$91(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$92(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    private /* synthetic */ void lambda$emptyMessagesMedia$93(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public void updateMessagePollResults(final long j, final TLRPC$Poll tLRPC$Poll, final TLRPC$PollResults tLRPC$PollResults) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda128
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessagePollResults$95(j, tLRPC$Poll, tLRPC$PollResults);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Type inference failed for: r8v11 */
    /* JADX WARN: Type inference failed for: r8v12, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r8v22 */
    public /* synthetic */ void lambda$updateMessagePollResults$95(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        LongSparseArray longSparseArray;
        int i;
        ArrayList arrayList;
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement sQLitePreparedStatement;
        ?? r8;
        int i2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                int i3 = 1;
                int i4 = 0;
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM polls_v2 WHERE id = %d", Long.valueOf(j)), new Object[0]);
                LongSparseArray longSparseArray2 = null;
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray();
                        }
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized2.intValue(1)));
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized2;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized2;
                    }
                }
                queryFinalized2.dispose();
                if (longSparseArray2 != null) {
                    this.database.beginTransaction();
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                    int size = longSparseArray2.size();
                    int i5 = 0;
                    while (i5 < size) {
                        long keyAt = longSparseArray2.keyAt(i5);
                        ArrayList arrayList3 = (ArrayList) longSparseArray2.valueAt(i5);
                        int size2 = arrayList3.size();
                        int i6 = 0;
                        while (i6 < size2) {
                            Integer num = (Integer) arrayList3.get(i6);
                            SQLiteCursor sQLiteCursor2 = sQLiteCursor;
                            boolean z = false;
                            while (i4 < 2) {
                                if (i4 == i3) {
                                    try {
                                        longSparseArray = longSparseArray2;
                                        i = size;
                                        arrayList = arrayList3;
                                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                        sQLitePreparedStatement = executeFast2;
                                        r8 = 0;
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLiteCursor = sQLiteCursor2;
                                        checkSQLException(e);
                                        if (sQLiteCursor == null) {
                                            return;
                                        }
                                        sQLiteCursor.dispose();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor = sQLiteCursor2;
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        throw th;
                                    }
                                } else {
                                    longSparseArray = longSparseArray2;
                                    i = size;
                                    arrayList = arrayList3;
                                    r8 = 0;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                    sQLitePreparedStatement = executeFast;
                                }
                                if (queryFinalized.next()) {
                                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r8);
                                    if (byteBufferValue != null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r8), r8);
                                        i2 = i5;
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                            TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia;
                                            if (tLRPC$Poll != null) {
                                                tLRPC$TL_messageMediaPoll.poll = tLRPC$Poll;
                                            }
                                            if (tLRPC$PollResults != null) {
                                                MessageObject.updatePollResults(tLRPC$TL_messageMediaPoll, tLRPC$PollResults);
                                            }
                                            MessageObject.normalizeFlags(TLdeserialize);
                                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                            TLdeserialize.serializeToStream(nativeByteBuffer);
                                            sQLitePreparedStatement.requery();
                                            sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                                            sQLitePreparedStatement.bindInteger(2, num.intValue());
                                            sQLitePreparedStatement.bindLong(3, keyAt);
                                            sQLitePreparedStatement.step();
                                            nativeByteBuffer.reuse();
                                        }
                                    } else {
                                        i2 = i5;
                                    }
                                    z = true;
                                } else {
                                    i2 = i5;
                                }
                                queryFinalized.dispose();
                                i4++;
                                sQLiteCursor2 = queryFinalized;
                                longSparseArray2 = longSparseArray;
                                size = i;
                                arrayList3 = arrayList;
                                i5 = i2;
                                i3 = 1;
                            }
                            LongSparseArray longSparseArray3 = longSparseArray2;
                            int i7 = size;
                            int i8 = i5;
                            ArrayList arrayList4 = arrayList3;
                            if (!z) {
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM polls_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt))).stepThis().dispose();
                            }
                            i6++;
                            sQLiteCursor = sQLiteCursor2;
                            longSparseArray2 = longSparseArray3;
                            size = i7;
                            arrayList3 = arrayList4;
                            i5 = i8;
                            i3 = 1;
                            i4 = 0;
                        }
                        i5++;
                        longSparseArray2 = longSparseArray2;
                        i3 = 1;
                        i4 = 0;
                    }
                    executeFast.dispose();
                    executeFast2.dispose();
                    this.database.commitTransaction();
                }
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e3) {
            e = e3;
        }
        sQLiteCursor.dispose();
    }

    public void searchSavedByTag(final TLRPC$Reaction tLRPC$Reaction, final long j, final String str, final int i, final int i2, final Utilities.Callback4<ArrayList<MessageObject>, ArrayList<TLRPC$User>, ArrayList<TLRPC$Chat>, ArrayList<TLRPC$Document>> callback4, final boolean z) {
        if (callback4 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$searchSavedByTag$97(str, j, tLRPC$Reaction, i, i2, z, callback4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:128:0x026a  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x026f  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x0274  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x027b  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x0285  */
    /* JADX WARN: Removed duplicated region for block: B:170:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$searchSavedByTag$97(String str, long j, TLRPC$Reaction tLRPC$Reaction, int i, int i2, boolean z, final Utilities.Callback4 callback4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor2;
        long j2;
        int i3;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$Document> arrayList;
        ArrayList<TLRPC$Document> arrayList2;
        NativeByteBuffer byteBufferValue;
        try {
            long clientUserId = getUserConfig().getClientUserId();
            SQLiteDatabase sQLiteDatabase = this.database;
            StringBuilder sb = new StringBuilder();
            sb.append("SELECT m.data, m.replydata, m.group_id FROM messages_v2 m INNER JOIN tag_message_id t ON m.mid = t.mid WHERE m.uid = ? AND t.tag = ?");
            String str2 = "";
            sb.append(!TextUtils.isEmpty(str) ? " AND t.text LIKE '%' || ? || '%'" : "");
            sb.append(j != 0 ? " AND topic_id = ? " : "");
            sb.append(" ORDER BY m.mid DESC LIMIT ? OFFSET ?");
            SQLitePreparedStatement executeFast = sQLiteDatabase.executeFast(sb.toString());
            try {
                final ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
                final ArrayList<TLRPC$Chat> arrayList4 = new ArrayList<>();
                ArrayList arrayList5 = new ArrayList();
                ArrayList<Long> arrayList6 = new ArrayList<>();
                ArrayList arrayList7 = new ArrayList();
                ArrayList<TLRPC$Document> arrayList8 = new ArrayList<>();
                executeFast.bindLong(1, clientUserId);
                if (tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) {
                    j2 = ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon.hashCode();
                } else {
                    j2 = tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji ? ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction).document_id : 0L;
                }
                executeFast.bindLong(2, j2);
                if (TextUtils.isEmpty(str)) {
                    i3 = 3;
                } else {
                    String translitString = LocaleController.getInstance().getTranslitString(str);
                    if (translitString != null) {
                        str2 = translitString;
                    }
                    i3 = 4;
                    executeFast.bindString(3, str2);
                }
                if (j != 0) {
                    executeFast.bindLong(i3, j);
                    i3++;
                }
                executeFast.bindInteger(i3, i);
                executeFast.bindInteger(i3 + 1, i2);
                boolean z2 = false;
                sQLiteCursor = executeFast.query(new Object[0]);
                try {
                    final ArrayList arrayList9 = new ArrayList();
                    SQLiteCursor sQLiteCursor4 = null;
                    while (sQLiteCursor.next()) {
                        try {
                            long longValue = sQLiteCursor.longValue(2);
                            if (longValue != 0 && z) {
                                sQLiteCursor3 = sQLiteCursor4;
                                try {
                                    arrayList2 = arrayList8;
                                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data, replydata, group_id FROM messages_v2 WHERE uid = ? AND group_id = ? ORDER BY mid DESC", Long.valueOf(clientUserId), Long.valueOf(longValue));
                                    try {
                                        ArrayList arrayList10 = new ArrayList();
                                        while (queryFinalized.next()) {
                                            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(0);
                                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                            TLdeserialize.readAttachPath(byteBufferValue2, clientUserId);
                                            byteBufferValue2.reuse();
                                            addUsersAndChatsFromMessage(TLdeserialize, arrayList6, arrayList7, arrayList5);
                                            MessageObject messageObject = new MessageObject(this.currentAccount, TLdeserialize, null, null, null, null, null, true, true, 0L, false, false, true);
                                            if (TLdeserialize.reactions != null) {
                                                messageObject.isPrimaryGroupMessage = true;
                                            }
                                            arrayList10.add(messageObject);
                                        }
                                        queryFinalized.dispose();
                                        arrayList9.addAll(arrayList10);
                                        sQLiteCursor4 = queryFinalized;
                                    } catch (Exception e) {
                                        e = e;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement = null;
                                        try {
                                            FileLog.e(e);
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLiteCursor2 == null) {
                                            }
                                        } catch (Throwable th) {
                                            th = th;
                                            if (sQLitePreparedStatement != null) {
                                                sQLitePreparedStatement.dispose();
                                            }
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            if (sQLiteCursor2 != null) {
                                                sQLiteCursor2.dispose();
                                            }
                                            throw th;
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    sQLitePreparedStatement = null;
                                    FileLog.e(e);
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLiteCursor2 == null) {
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    sQLitePreparedStatement = null;
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                arrayList2 = arrayList8;
                                SQLiteCursor sQLiteCursor5 = sQLiteCursor4;
                                NativeByteBuffer byteBufferValue3 = sQLiteCursor.byteBufferValue(z2 ? 1 : 0);
                                if (byteBufferValue3 == null) {
                                    sQLiteCursor4 = sQLiteCursor5;
                                    arrayList8 = arrayList2;
                                } else {
                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(z2), z2);
                                    if (TLdeserialize2 != null) {
                                        TLdeserialize2.readAttachPath(byteBufferValue3, clientUserId);
                                        byteBufferValue3.reuse();
                                        addUsersAndChatsFromMessage(TLdeserialize2, arrayList6, arrayList7, arrayList5);
                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize2.reply_to;
                                        if (tLRPC$MessageReplyHeader != null) {
                                            if (tLRPC$MessageReplyHeader.reply_to_msg_id == 0 && tLRPC$MessageReplyHeader.reply_to_random_id == 0) {
                                            }
                                            if (!sQLiteCursor.isNull(1) && (byteBufferValue = sQLiteCursor.byteBufferValue(1)) != null) {
                                                TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                TLdeserialize2.replyMessage = TLdeserialize3;
                                                TLdeserialize3.readAttachPath(byteBufferValue, clientUserId);
                                                byteBufferValue.reuse();
                                                TLRPC$Message tLRPC$Message = TLdeserialize2.replyMessage;
                                                if (tLRPC$Message != null) {
                                                    addUsersAndChatsFromMessage(tLRPC$Message, arrayList6, arrayList7, arrayList5);
                                                }
                                            }
                                        }
                                        arrayList9.add(new MessageObject(this.currentAccount, TLdeserialize2, null, null, null, null, null, true, true, 0L, false, false, true));
                                    }
                                    sQLiteCursor4 = sQLiteCursor5;
                                }
                            }
                            arrayList8 = arrayList2;
                            z2 = false;
                        } catch (Exception e3) {
                            e = e3;
                            sQLiteCursor3 = sQLiteCursor4;
                        } catch (Throwable th4) {
                            th = th4;
                            sQLiteCursor3 = sQLiteCursor4;
                        }
                    }
                    ArrayList<TLRPC$Document> arrayList11 = arrayList8;
                    sQLiteCursor3 = sQLiteCursor4;
                    sQLiteCursor.dispose();
                    if (!arrayList6.isEmpty()) {
                        getUsersInternal(arrayList6, arrayList3);
                    }
                    if (!arrayList7.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList7), arrayList4);
                    }
                    if (arrayList5.isEmpty()) {
                        arrayList = arrayList11;
                    } else {
                        arrayList = arrayList11;
                        getAnimatedEmoji(TextUtils.join(",", arrayList5), arrayList);
                    }
                    final ArrayList<TLRPC$Document> arrayList12 = arrayList;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda236
                        @Override // java.lang.Runnable
                        public final void run() {
                            Utilities.Callback4.this.run(arrayList9, arrayList3, arrayList4, arrayList12);
                        }
                    });
                    sQLiteCursor.dispose();
                    if (sQLiteCursor3 != null) {
                        sQLiteCursor3.dispose();
                    }
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement = null;
                    sQLiteCursor2 = null;
                    FileLog.e(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLiteCursor2 == null) {
                        sQLiteCursor2.dispose();
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = null;
                    sQLiteCursor2 = null;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLiteCursor2 != null) {
                    }
                    throw th;
                }
            } catch (Exception e5) {
                e = e5;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                FileLog.e(e);
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 == null) {
                }
            } catch (Throwable th6) {
                th = th6;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    public void updateMessageReactions(final long j, final int i, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda58
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageReactions$98(i, j, tLRPC$TL_messageReactions);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0152  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0157  */
    /* JADX WARN: Type inference failed for: r9v1 */
    /* JADX WARN: Type inference failed for: r9v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateMessageReactions$98(int i, long j, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        int i2;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement executeFast;
        long j2;
        try {
            long clientUserId = getUserConfig().getClientUserId();
            long j3 = 0;
            this.database.beginTransaction();
            int i3 = 0;
            int i4 = 0;
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions2 = null;
            while (i4 < 2) {
                if (i4 == 0) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    Locale locale = Locale.US;
                    Object[] objArr = new Object[2];
                    objArr[i3] = Integer.valueOf(i);
                    objArr[1] = Long.valueOf(j);
                    sQLiteCursor = sQLiteDatabase2.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[i3]);
                } else {
                    SQLiteDatabase sQLiteDatabase3 = this.database;
                    Locale locale2 = Locale.US;
                    Object[] objArr2 = new Object[2];
                    objArr2[i3] = Integer.valueOf(i);
                    objArr2[1] = Long.valueOf(j);
                    sQLiteCursor = sQLiteDatabase3.queryFinalized(String.format(locale2, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", objArr2), new Object[i3]);
                }
                try {
                    try {
                        if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(i3)) == null) {
                            i2 = i4;
                        } else {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i3), i3);
                            if (TLdeserialize != null) {
                                i2 = i4;
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                if (tLRPC$TL_messageReactions2 == null) {
                                    tLRPC$TL_messageReactions2 = TLdeserialize.reactions;
                                    j3 = MessageObject.getSavedDialogId(clientUserId, TLdeserialize);
                                }
                                MessageObject.updateReactions(TLdeserialize, tLRPC$TL_messageReactions);
                                if (i2 == 0) {
                                    executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                                } else {
                                    executeFast = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                                }
                                MessageObject.normalizeFlags(TLdeserialize);
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                TLdeserialize.serializeToStream(nativeByteBuffer);
                                executeFast.requery();
                                executeFast.bindByteBuffer(1, nativeByteBuffer);
                                executeFast.bindInteger(2, i);
                                executeFast.bindLong(3, j);
                                executeFast.step();
                                nativeByteBuffer.reuse();
                                executeFast.dispose();
                                if (clientUserId == j) {
                                    j2 = j3;
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid = %d", Integer.valueOf(TLdeserialize.id))).stepThis().dispose();
                                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                    bindMessageTags(executeFast2, TLdeserialize);
                                    executeFast2.dispose();
                                } else {
                                    j2 = j3;
                                }
                                j3 = j2;
                            } else {
                                i2 = i4;
                                byteBufferValue.reuse();
                            }
                        }
                        sQLiteCursor.dispose();
                        i4 = i2 + 1;
                        i3 = 0;
                    } catch (Exception e) {
                        e = e;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                            sQLiteDatabase4.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            this.database.commitTransaction();
            if (j == clientUserId && tLRPC$TL_messageReactions2 != null) {
                onReactionsUpdate(j3, tLRPC$TL_messageReactions2, tLRPC$TL_messageReactions);
            }
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class SavedReactionsUpdate {
        TLRPC$TL_messageReactions last;
        TLRPC$TL_messageReactions old;
        long topic_id;

        public SavedReactionsUpdate(long j, TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
            this.topic_id = MessageObject.getSavedDialogId(j, tLRPC$Message2);
            this.old = tLRPC$Message.reactions;
            this.last = tLRPC$Message2.reactions;
        }
    }

    private void onReactionsUpdate(final ArrayList<SavedReactionsUpdate> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onReactionsUpdate$99(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$99(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            SavedReactionsUpdate savedReactionsUpdate = (SavedReactionsUpdate) arrayList.get(i);
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions = savedReactionsUpdate.old;
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions2 = savedReactionsUpdate.last;
            longSparseArray.clear();
            longSparseArray2.clear();
            if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.results != null && tLRPC$TL_messageReactions.reactions_as_tags) {
                for (int i2 = 0; i2 < tLRPC$TL_messageReactions.results.size(); i2++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions.results.get(i2).reaction);
                    if (fromTL != null) {
                        longSparseArray.put(fromTL.hash, fromTL);
                    }
                }
            }
            if (tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.results != null && tLRPC$TL_messageReactions2.reactions_as_tags) {
                for (int i3 = 0; i3 < tLRPC$TL_messageReactions2.results.size(); i3++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions2.results.get(i3).reaction);
                    if (fromTL2 != null) {
                        longSparseArray2.put(fromTL2.hash, fromTL2);
                    }
                }
            }
            for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                long keyAt = longSparseArray.keyAt(i4);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i4);
                if (!longSparseArray2.containsKey(keyAt) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction, false, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                long keyAt2 = longSparseArray2.keyAt(i5);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i5);
                if (!longSparseArray.containsKey(keyAt2) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction2, true, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
        }
        if (!z || hashSet.isEmpty()) {
            return;
        }
        getMessagesController().updateSavedReactionTags(hashSet);
    }

    private void onReactionsUpdate(final long j, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions2) {
        ArrayList<TLRPC$ReactionCount> arrayList;
        if (tLRPC$TL_messageReactions == null || (arrayList = tLRPC$TL_messageReactions.results) == null) {
            return;
        }
        if (arrayList == null || !arrayList.isEmpty() || tLRPC$TL_messageReactions2 == null || !tLRPC$TL_messageReactions2.results.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda216
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$onReactionsUpdate$100(tLRPC$TL_messageReactions, tLRPC$TL_messageReactions2, j);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$100(TLRPC$TL_messageReactions tLRPC$TL_messageReactions, TLRPC$TL_messageReactions tLRPC$TL_messageReactions2, long j) {
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.results != null && tLRPC$TL_messageReactions.reactions_as_tags) {
            for (int i = 0; i < tLRPC$TL_messageReactions.results.size(); i++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions.results.get(i).reaction);
                longSparseArray.put(fromTL.hash, fromTL);
            }
        }
        if (tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.results != null && tLRPC$TL_messageReactions2.reactions_as_tags) {
            for (int i2 = 0; i2 < tLRPC$TL_messageReactions2.results.size(); i2++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions2.results.get(i2).reaction);
                longSparseArray2.put(fromTL2.hash, fromTL2);
            }
        }
        boolean z = false;
        for (int i3 = 0; i3 < longSparseArray.size(); i3++) {
            long keyAt = longSparseArray.keyAt(i3);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i3);
            if (!longSparseArray2.containsKey(keyAt)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction, false, false) || z;
            }
        }
        for (int i4 = 0; i4 < longSparseArray2.size(); i4++) {
            long keyAt2 = longSparseArray2.keyAt(i4);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i4);
            if (!longSparseArray.containsKey(keyAt2)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction2, true, false) || z;
            }
        }
        if (z) {
            if (j != 0) {
                getMessagesController().updateSavedReactionTags(0L);
            }
            getMessagesController().updateSavedReactionTags(j);
        }
    }

    private void bindMessageTags(SQLitePreparedStatement sQLitePreparedStatement, TLRPC$Message tLRPC$Message) throws SQLiteException {
        ArrayList<TLRPC$ReactionCount> arrayList;
        long clientUserId = getUserConfig().getClientUserId();
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
        if (tLRPC$TL_messageReactions == null || !tLRPC$TL_messageReactions.reactions_as_tags || (arrayList = tLRPC$TL_messageReactions.results) == null || arrayList.isEmpty()) {
            return;
        }
        LocaleController localeController = LocaleController.getInstance();
        String str = tLRPC$Message.message;
        if (str == null) {
            str = "";
        }
        String translitString = localeController.getTranslitString(str);
        Iterator<TLRPC$ReactionCount> it = tLRPC$Message.reactions.results.iterator();
        while (it.hasNext()) {
            TLRPC$ReactionCount next = it.next();
            TLRPC$Reaction tLRPC$Reaction = next.reaction;
            if ((tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) || (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji)) {
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, tLRPC$Message.id);
                sQLitePreparedStatement.bindLong(2, MessageObject.getSavedDialogId(clientUserId, tLRPC$Message));
                long j = 0;
                TLRPC$Reaction tLRPC$Reaction2 = next.reaction;
                if (tLRPC$Reaction2 instanceof TLRPC$TL_reactionEmoji) {
                    j = ((TLRPC$TL_reactionEmoji) tLRPC$Reaction2).emoticon.hashCode();
                } else if (tLRPC$Reaction2 instanceof TLRPC$TL_reactionCustomEmoji) {
                    j = ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction2).document_id;
                }
                sQLitePreparedStatement.bindLong(3, j);
                sQLitePreparedStatement.bindString(4, translitString == null ? "" : translitString);
                sQLitePreparedStatement.step();
            }
        }
    }

    public void updateMessageVoiceTranscriptionOpen(final long j, final int i, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscriptionOpen$101(i, j, tLRPC$Message);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscriptionOpen$101(int i, long j, TLRPC$Message tLRPC$Message) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final long j2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$102(i, j, z, j2, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$102(int i, long j, boolean z, long j2, String str) {
        TLRPC$Message messageWithCustomParamsOnlyInternal;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = z;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = j2;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            executeFast.requery();
            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
            if (writeLocalParams != null) {
                executeFast.bindByteBuffer(1, writeLocalParams);
            } else {
                executeFast.bindNull(1);
            }
            executeFast.bindInteger(2, i);
            executeFast.bindLong(3, j);
            executeFast.step();
            executeFast.dispose();
            this.database.commitTransaction();
            if (writeLocalParams != null) {
                writeLocalParams.reuse();
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda57
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$103(i, j, tLRPC$Message, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$103(int i, long j, TLRPC$Message tLRPC$Message, String str) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        this.database.commitTransaction();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateMessageCustomParams(final long j, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageCustomParams$104(tLRPC$Message, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageCustomParams$104(TLRPC$Message tLRPC$Message, long j) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(tLRPC$Message.id, j);
                MessageCustomParamsHelper.copyParams(tLRPC$Message, messageWithCustomParamsOnlyInternal);
                for (int i = 0; i < 2; i++) {
                    if (i == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, tLRPC$Message.id);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public TLRPC$Message getMessageWithCustomParamsOnlyInternal(int i, long j) {
        SQLiteCursor queryFinalized;
        boolean z;
        TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT custom_params FROM messages_v2 WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
            } catch (Throwable th) {
                th = th;
            }
        } catch (SQLiteException e) {
            e = e;
        }
        try {
            if (queryFinalized.next()) {
                MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, queryFinalized.byteBufferValue(0));
                z = true;
            } else {
                z = false;
            }
            queryFinalized.dispose();
            if (!z) {
                sQLiteCursor = this.database.queryFinalized("SELECT custom_params FROM messages_topics WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, sQLiteCursor.byteBufferValue(0));
                }
                sQLiteCursor.dispose();
            }
        } catch (SQLiteException e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            return tLRPC$TL_message;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        return tLRPC$TL_message;
    }

    public void getNewTask(final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda146
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getNewTask$105(longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:21:0x00a5, code lost:
        if (r15 > 0) goto L16;
     */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00f9  */
    /* JADX WARN: Removed duplicated region for block: B:63:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNewTask$105(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        Throwable th;
        Exception e;
        boolean z;
        LongSparseArray<ArrayList<Integer>> longSparseArray3;
        SQLiteCursor sQLiteCursor = null;
        if (longSparseArray != null) {
            try {
                try {
                    int size = longSparseArray.size();
                    for (int i = 0; i < size; i++) {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 0", TextUtils.join(",", (Iterable) longSparseArray.valueAt(i)), Long.valueOf(longSparseArray.keyAt(i)))).stepThis().dispose();
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        }
        if (longSparseArray2 != null) {
            int size2 = longSparseArray2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 1", TextUtils.join(",", (Iterable) longSparseArray2.valueAt(i2)), Long.valueOf(longSparseArray2.keyAt(i2)))).stepThis().dispose();
            }
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, date, media, uid FROM enc_tasks_v4 WHERE date = (SELECT min(date) FROM enc_tasks_v4)", new Object[0]);
        LongSparseArray<ArrayList<Integer>> longSparseArray4 = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray5 = null;
        int i3 = 0;
        while (queryFinalized.next()) {
            try {
                int intValue = queryFinalized.intValue(0);
                int intValue2 = queryFinalized.intValue(1);
                int intValue3 = queryFinalized.intValue(2);
                long longValue = queryFinalized.longValue(3);
                if (intValue3 != -1) {
                    z = intValue3 != 0;
                }
                if (z) {
                    if (longSparseArray5 == null) {
                        longSparseArray5 = new LongSparseArray<>();
                    }
                    longSparseArray3 = longSparseArray5;
                } else {
                    if (longSparseArray4 == null) {
                        longSparseArray4 = new LongSparseArray<>();
                    }
                    longSparseArray3 = longSparseArray5;
                    longSparseArray5 = longSparseArray4;
                }
                ArrayList<Integer> arrayList = longSparseArray5.get(longValue);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    longSparseArray5.put(longValue, arrayList);
                }
                arrayList.add(Integer.valueOf(intValue));
                i3 = intValue2;
                longSparseArray5 = longSparseArray3;
            } catch (Exception e3) {
                sQLiteCursor = queryFinalized;
                e = e3;
                checkSQLException(e);
                if (sQLiteCursor == null) {
                }
            } catch (Throwable th3) {
                sQLiteCursor = queryFinalized;
                th = th3;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        queryFinalized.dispose();
        getMessagesController().processLoadedDeleteTask(i3, longSparseArray4, longSparseArray5);
    }

    public void markMentionMessageAsRead(final long j, final int i, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMentionMessageAsRead$106(i, j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$106(int i, long j, long j2) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                try {
                    int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
                    queryFinalized.dispose();
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(max), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, max);
                    if (max == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                    }
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(locale, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    long j3 = 0;
                    while (queryFinalized2.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                j3 = MessageObject.getTopicId(this.currentAccount, TLdeserialize, isForum(j));
                            }
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized2;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized2;
                        }
                    }
                    queryFinalized2.dispose();
                    if (j3 != 0) {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale2 = Locale.US;
                        SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j3)), new Object[0]);
                        try {
                            int max2 = queryFinalized3.next() ? Math.max(0, queryFinalized3.intValue(0) - 1) : 0;
                            queryFinalized3.dispose();
                            this.database.executeFast(String.format(locale2, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(max2), Long.valueOf(j), Long.valueOf(j3))).stepThis().dispose();
                            getMessagesController().getTopicsController().updateMentionsUnread(j, j3, max2);
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = queryFinalized3;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized3;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized;
                }
            } catch (Exception e4) {
                e = e4;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void markMessageAsMention(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda47
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsMention$107(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsMention$107(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET mention = 1, read_state = read_state & ~2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetMentionsCount(final long j, final long j2, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetMentionsCount$108(j2, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetMentionsCount$108(long j, long j2, int i) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (j == 0) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                    try {
                        int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                        queryFinalized.dispose();
                        if (intValue == 0 && i == 0) {
                            return;
                        }
                        if (i == 0) {
                            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2))).stepThis().dispose();
                        }
                        this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j2))).stepThis().dispose();
                        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                        longSparseIntArray.put(j2, i);
                        getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                        if (i == 0) {
                            updateFiltersReadCounter(null, longSparseIntArray, true);
                            return;
                        }
                        return;
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i), Long.valueOf(j2), Long.valueOf(j))).stepThis().dispose();
                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                topicUpdate.dialogId = j2;
                topicUpdate.topicId = j;
                topicUpdate.onlyCounters = true;
                topicUpdate.unreadMentions = i;
                topicUpdate.unreadCount = -1;
                getMessagesController().getTopicsController().processUpdate(Collections.singletonList(topicUpdate));
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void createTaskForMid(final long j, final int i, final int i2, final int i3, final int i4, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda44
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForMid$110(i2, i3, i4, i, z, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$110(int i, int i2, int i3, int i4, final boolean z, final long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                int max = Math.max(i, i2) + i3;
                SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
                final ArrayList<Integer> arrayList = new ArrayList<>();
                arrayList.add(Integer.valueOf(i4));
                sparseArray.put(max, arrayList);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda229
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForMid$109(z, j, arrayList);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i5 = 0; i5 < sparseArray.size(); i5++) {
                    try {
                        int keyAt = sparseArray.keyAt(i5);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                            executeFast.requery();
                            executeFast.bindInteger(1, arrayList2.get(i6).intValue());
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            executeFast.step();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid = %d AND uid = %d", Integer.valueOf(i4), Long.valueOf(j))).stepThis().dispose();
                getMessagesController().didAddedNewTask(max, j, sparseArray);
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$109(boolean z, long j, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(j, arrayList, 0, 0);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Removed duplicated region for block: B:38:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00cf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createTaskForSecretMedia(long j, SparseArray<ArrayList<Integer>> sparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
        try {
            ArrayList arrayList = new ArrayList();
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i2 = 0; i2 < sparseArray.size(); i2++) {
                    try {
                        int keyAt = sparseArray.keyAt(i2);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i3 = 0; i3 < arrayList2.size(); i3++) {
                            int intValue = arrayList2.get(i3).intValue();
                            executeFast.requery();
                            executeFast.bindInteger(1, intValue);
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            i = Math.min(i, intValue);
                            executeFast.step();
                            arrayList.add(arrayList2.get(i3));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(", ", arrayList))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i, j, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    public void createTaskForSecretChat(final int i, final int i2, final int i3, final int i4, final ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda64
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForSecretChat$112(i, arrayList, i4, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015b  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0165  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x016e  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0173  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0178  */
    /* JADX WARN: Removed duplicated region for block: B:95:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$createTaskForSecretChat$112(int i, ArrayList arrayList, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor queryFinalized;
        try {
            final long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(i);
            SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
            final ArrayList arrayList2 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            if (arrayList == null) {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", Long.valueOf(makeEncryptedDialogId), Integer.valueOf(i2), Integer.valueOf(i3)), new Object[0]);
            } else {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            }
            int i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(1);
                    int intValue2 = queryFinalized.intValue(0);
                    if (arrayList != null) {
                        arrayList2.add(Integer.valueOf(intValue2));
                    }
                    if (intValue > 0) {
                        int max = Math.max(i3, i4) + intValue;
                        i5 = Math.min(i5, max);
                        ArrayList<Integer> arrayList3 = sparseArray.get(max);
                        if (arrayList3 == null) {
                            arrayList3 = new ArrayList<>();
                            sparseArray.put(max, arrayList3);
                        }
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(intValue2);
                        arrayList3.add(Integer.valueOf(intValue2));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda112
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForSecretChat$111(makeEncryptedDialogId, arrayList2);
                    }
                });
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    try {
                        int keyAt = sparseArray.keyAt(i6);
                        ArrayList<Integer> arrayList4 = sparseArray.get(keyAt);
                        for (int i7 = 0; i7 < arrayList4.size(); i7++) {
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(1, arrayList4.get(i7).intValue());
                            sQLitePreparedStatement.bindLong(2, makeEncryptedDialogId);
                            sQLitePreparedStatement.bindInteger(3, keyAt);
                            sQLitePreparedStatement.bindInteger(4, 0);
                            sQLitePreparedStatement.step();
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d", sb.toString(), Long.valueOf(makeEncryptedDialogId))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, makeEncryptedDialogId, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$111(long j, ArrayList arrayList) {
        markMessagesContentAsRead(j, arrayList, 0, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Code restructure failed: missing block: B:189:0x03f9, code lost:
        if (r3.indexOfKey(-r5.id) >= 0) goto L186;
     */
    /* JADX WARN: Code restructure failed: missing block: B:308:0x0600, code lost:
        if (r9 == 0) goto L313;
     */
    /* JADX WARN: Code restructure failed: missing block: B:327:0x062e, code lost:
        if (r12.indexOfKey(r4.id) >= 0) goto L320;
     */
    /* JADX WARN: Removed duplicated region for block: B:141:0x032c  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x03a4  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x03af  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x03b4  */
    /* JADX WARN: Removed duplicated region for block: B:188:0x03f0  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x041b  */
    /* JADX WARN: Removed duplicated region for block: B:203:0x0448  */
    /* JADX WARN: Removed duplicated region for block: B:228:0x04ad  */
    /* JADX WARN: Removed duplicated region for block: B:242:0x04e4  */
    /* JADX WARN: Removed duplicated region for block: B:290:0x059d  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x0804  */
    /* JADX WARN: Removed duplicated region for block: B:464:0x083a  */
    /* JADX WARN: Removed duplicated region for block: B:512:0x08f0  */
    /* JADX WARN: Removed duplicated region for block: B:634:0x0aca  */
    /* JADX WARN: Removed duplicated region for block: B:635:0x0ad1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateFiltersReadCounter(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, boolean z) throws Exception {
        int i;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int size;
        int i2;
        MessagesController.DialogFilter dialogFilter;
        int i3;
        int i4;
        int i5;
        int i6;
        LongSparseArray longSparseArray3;
        int i7;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        int i8;
        int i9;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        LongSparseArray longSparseArray8;
        LongSparseArray longSparseArray9;
        LongSparseArray longSparseArray10;
        LongSparseArray longSparseArray11;
        LongSparseArray longSparseArray12;
        LongSparseArray longSparseArray13;
        long j;
        char c;
        char c2;
        char c3;
        int i10;
        int i11;
        char c4;
        int i12;
        int i13;
        char c5;
        char c6;
        char c7;
        char c8;
        int i14;
        int i15;
        LongSparseArray longSparseArray14;
        int i16;
        int i17;
        LongSparseArray longSparseArray15;
        int i18;
        int intValue;
        int i19;
        LongSparseArray longSparseArray16;
        int i20;
        int i21;
        LongSparseArray longSparseArray17;
        int i22;
        LongSparseArray longSparseArray18;
        int i23;
        LongSparseArray longSparseArray19;
        LongSparseArray longSparseArray20;
        int i24;
        LongSparseArray longSparseArray21;
        int intValue2;
        int i25;
        char c9;
        char c10;
        char c11;
        int i26;
        int i27;
        char c12;
        int i28;
        int i29;
        char c13;
        char c14;
        char c15;
        char c16;
        int i30;
        ArrayList<TLRPC$Chat> arrayList;
        LongSparseArray longSparseArray22;
        LongSparseArray longSparseArray23;
        int i31;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        LongSparseArray longSparseArray24;
        int i32;
        int i33;
        ArrayList<TLRPC$User> arrayList2;
        LongSparseArray longSparseArray25;
        LongSparseIntArray longSparseIntArray3;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray2;
        if ((longSparseIntArray == null || longSparseIntArray.size() == 0) && (longSparseIntArray4 == null || longSparseIntArray2.size() == 0)) {
            return;
        }
        int i34 = 0;
        while (true) {
            if (i34 >= 2) {
                break;
            }
            for (int i35 = 0; i35 < 2; i35++) {
                int[] iArr = this.contacts[i34];
                int[] iArr2 = this.nonContacts[i34];
                int[] iArr3 = this.bots[i34];
                int[] iArr4 = this.channels[i34];
                this.groups[i34][i35] = 0;
                iArr4[i35] = 0;
                iArr3[i35] = 0;
                iArr2[i35] = 0;
                iArr[i35] = 0;
            }
            int[] iArr5 = this.mentionChannels;
            this.mentionGroups[i34] = 0;
            iArr5[i34] = 0;
            i34++;
        }
        ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList5 = new ArrayList<>();
        ArrayList<Long> arrayList6 = new ArrayList<>();
        ArrayList arrayList7 = new ArrayList();
        ArrayList arrayList8 = new ArrayList();
        LongSparseArray longSparseArray26 = new LongSparseArray();
        LongSparseArray longSparseArray27 = new LongSparseArray();
        int i36 = 0;
        for (i = 2; i36 < i; i = 2) {
            LongSparseIntArray longSparseIntArray5 = i36 == 0 ? longSparseIntArray : longSparseIntArray4;
            if (longSparseIntArray5 != null) {
                int i37 = 0;
                while (i37 < longSparseIntArray5.size()) {
                    Integer valueOf = Integer.valueOf(longSparseIntArray5.valueAt(i37));
                    if ((!z || valueOf.intValue() == 0) && (z || valueOf.intValue() != 0)) {
                        arrayList2 = arrayList4;
                        long keyAt = longSparseIntArray5.keyAt(i37);
                        if (!z) {
                            if (this.dialogsWithMentions.indexOfKey(keyAt) < 0 && this.dialogsWithUnread.indexOfKey(keyAt) < 0) {
                                longSparseArray27.put(keyAt, valueOf);
                            }
                            if (i36 == 0) {
                                this.dialogsWithUnread.put(keyAt, valueOf);
                            } else {
                                this.dialogsWithMentions.put(keyAt, valueOf);
                            }
                        } else if (i36 == 0) {
                            this.dialogsWithUnread.remove(keyAt);
                        } else {
                            this.dialogsWithMentions.remove(keyAt);
                        }
                        if (longSparseArray26.indexOfKey(keyAt) < 0) {
                            SQLiteDatabase sQLiteDatabase = this.database;
                            StringBuilder sb = new StringBuilder();
                            longSparseIntArray3 = longSparseIntArray5;
                            sb.append("SELECT folder_id FROM dialogs WHERE did = ");
                            sb.append(keyAt);
                            longSparseArray25 = longSparseArray27;
                            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                            int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                            longSparseArray26.put(keyAt, Integer.valueOf(intValue3));
                        } else {
                            longSparseArray25 = longSparseArray27;
                            longSparseIntArray3 = longSparseIntArray5;
                        }
                        if (DialogObject.isEncryptedDialog(keyAt)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(keyAt);
                            if (!arrayList8.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList8.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(keyAt)) {
                            if (!arrayList6.contains(Long.valueOf(keyAt))) {
                                arrayList6.add(Long.valueOf(keyAt));
                            }
                        } else {
                            long j2 = -keyAt;
                            if (!arrayList7.contains(Long.valueOf(j2))) {
                                arrayList7.add(Long.valueOf(j2));
                            }
                        }
                    } else {
                        arrayList2 = arrayList4;
                        longSparseArray25 = longSparseArray27;
                        longSparseIntArray3 = longSparseIntArray5;
                    }
                    i37++;
                    arrayList4 = arrayList2;
                    longSparseIntArray5 = longSparseIntArray3;
                    longSparseArray27 = longSparseArray25;
                }
            }
            i36++;
            arrayList4 = arrayList4;
            longSparseArray27 = longSparseArray27;
        }
        ArrayList<TLRPC$User> arrayList9 = arrayList4;
        LongSparseArray longSparseArray28 = longSparseArray27;
        LongSparseArray longSparseArray29 = new LongSparseArray();
        LongSparseArray longSparseArray30 = new LongSparseArray();
        LongSparseArray longSparseArray31 = new LongSparseArray();
        LongSparseArray longSparseArray32 = new LongSparseArray();
        LongSparseArray longSparseArray33 = new LongSparseArray();
        LongSparseArray longSparseArray34 = new LongSparseArray();
        LongSparseArray longSparseArray35 = longSparseArray30;
        LongSparseArray longSparseArray36 = longSparseArray31;
        if (!arrayList6.isEmpty()) {
            getUsersInternal(arrayList6, arrayList3);
            int size2 = arrayList3.size();
            int i38 = 0;
            while (i38 < size2) {
                TLRPC$User tLRPC$User = arrayList3.get(i38);
                int i39 = size2;
                ArrayList<TLRPC$Chat> arrayList10 = arrayList5;
                ArrayList arrayList11 = arrayList7;
                ArrayList arrayList12 = arrayList8;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0L);
                Integer num = (Integer) longSparseArray26.get(tLRPC$User.id);
                int intValue4 = (num == null || num.intValue() < 0 || num.intValue() > 1) ? 0 : num.intValue();
                if (isDialogMuted) {
                    longSparseArray33.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (intValue4 == 1) {
                    longSparseArray34.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr6 = this.bots[intValue4];
                    iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                } else if (tLRPC$User.self || tLRPC$User.contact) {
                    int[] iArr7 = this.contacts[intValue4];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                } else {
                    int[] iArr8 = this.nonContacts[intValue4];
                    iArr8[isDialogMuted ? 1 : 0] = iArr8[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray29.put(tLRPC$User.id, tLRPC$User);
                i38++;
                arrayList5 = arrayList10;
                size2 = i39;
                arrayList7 = arrayList11;
                arrayList8 = arrayList12;
            }
        }
        ArrayList<TLRPC$Chat> arrayList13 = arrayList5;
        ArrayList arrayList14 = arrayList7;
        ArrayList arrayList15 = arrayList8;
        if (!arrayList15.isEmpty()) {
            ArrayList<Long> arrayList16 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList17 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList15), arrayList17, arrayList16);
            if (!arrayList16.isEmpty()) {
                getUsersInternal(arrayList16, arrayList9);
                int size3 = arrayList9.size();
                int i40 = 0;
                while (i40 < size3) {
                    TLRPC$User tLRPC$User2 = arrayList9.get(i40);
                    LongSparseArray longSparseArray37 = longSparseArray36;
                    longSparseArray37.put(tLRPC$User2.id, tLRPC$User2);
                    i40++;
                    longSparseArray36 = longSparseArray37;
                }
                longSparseArray2 = longSparseArray36;
                int size4 = arrayList17.size();
                int i41 = 0;
                while (i41 < size4) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray2.get(arrayList17.get(i41).user_id);
                    if (tLRPC$User3 == null) {
                        longSparseArray24 = longSparseArray29;
                        i32 = size4;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        longSparseArray24 = longSparseArray29;
                        i32 = size4;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        Integer num2 = (Integer) longSparseArray26.get(makeEncryptedDialogId);
                        int intValue5 = (num2 == null || num2.intValue() < 0 || num2.intValue() > 1) ? 0 : num2.intValue();
                        if (isDialogMuted2) {
                            longSparseArray33.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (intValue5 == 1) {
                            longSparseArray34.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (tLRPC$User3.self || tLRPC$User3.contact) {
                            i33 = 1;
                            int[] iArr9 = this.contacts[intValue5];
                            iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        } else {
                            int[] iArr10 = this.nonContacts[intValue5];
                            i33 = 1;
                            iArr10[isDialogMuted2 ? 1 : 0] = iArr10[isDialogMuted2 ? 1 : 0] + 1;
                        }
                        longSparseArray32.put(tLRPC$User3.id, Integer.valueOf(((Integer) longSparseArray32.get(tLRPC$User3.id, 0)).intValue() + i33));
                    }
                    i41++;
                    longSparseArray29 = longSparseArray24;
                    size4 = i32;
                }
                longSparseArray = longSparseArray29;
                if (!arrayList14.isEmpty()) {
                    ArrayList<TLRPC$Chat> arrayList18 = arrayList13;
                    getChatsInternal(TextUtils.join(",", arrayList14), arrayList18);
                    int size5 = arrayList18.size();
                    int i42 = 0;
                    while (i42 < size5) {
                        TLRPC$Chat tLRPC$Chat = arrayList18.get(i42);
                        if ((tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) || ChatObject.isNotInChat(tLRPC$Chat)) {
                            i30 = size5;
                            arrayList = arrayList18;
                            longSparseArray22 = longSparseArray28;
                            longSparseArray23 = longSparseArray35;
                        } else {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0L, tLRPC$Chat);
                            boolean z2 = this.dialogsWithUnread.indexOfKey(-tLRPC$Chat.id) >= 0;
                            boolean z3 = this.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0;
                            Integer num3 = (Integer) longSparseArray26.get(-tLRPC$Chat.id);
                            if (num3 == null || num3.intValue() < 0) {
                                i30 = size5;
                            } else {
                                i30 = size5;
                                if (num3.intValue() <= 1) {
                                    i31 = num3.intValue();
                                    if (isDialogMuted3) {
                                        arrayList = arrayList18;
                                    } else {
                                        arrayList = arrayList18;
                                        longSparseArray33.put(-tLRPC$Chat.id, Boolean.TRUE);
                                    }
                                    if (i31 == 1) {
                                        longSparseArray34.put(-tLRPC$Chat.id, Boolean.TRUE);
                                    }
                                    if (isDialogMuted3 && longSparseIntArray4 != null && longSparseIntArray4.indexOfKey(-tLRPC$Chat.id) >= 0) {
                                        if (!ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                            int[] iArr11 = this.mentionChannels;
                                            iArr11[i31] = iArr11[i31] + 1;
                                        } else {
                                            int[] iArr12 = this.mentionGroups;
                                            iArr12[i31] = iArr12[i31] + 1;
                                        }
                                    }
                                    if (z || z2 || z3) {
                                        if (z) {
                                            longSparseArray22 = longSparseArray28;
                                        } else {
                                            longSparseArray22 = longSparseArray28;
                                        }
                                        longSparseArray23 = longSparseArray35;
                                        longSparseArray23.put(tLRPC$Chat.id, tLRPC$Chat);
                                    } else {
                                        longSparseArray22 = longSparseArray28;
                                    }
                                    if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                        int[] iArr13 = this.channels[i31];
                                        iArr13[isDialogMuted3 ? 1 : 0] = iArr13[isDialogMuted3 ? 1 : 0] + 1;
                                    } else {
                                        int[] iArr14 = this.groups[i31];
                                        iArr14[isDialogMuted3 ? 1 : 0] = iArr14[isDialogMuted3 ? 1 : 0] + 1;
                                    }
                                    longSparseArray23 = longSparseArray35;
                                    longSparseArray23.put(tLRPC$Chat.id, tLRPC$Chat);
                                }
                            }
                            i31 = 0;
                            if (isDialogMuted3) {
                            }
                            if (i31 == 1) {
                            }
                            if (isDialogMuted3) {
                                if (!ChatObject.isChannel(tLRPC$Chat)) {
                                }
                                int[] iArr122 = this.mentionGroups;
                                iArr122[i31] = iArr122[i31] + 1;
                            }
                            if (z) {
                            }
                            if (z) {
                            }
                            longSparseArray23 = longSparseArray35;
                            longSparseArray23.put(tLRPC$Chat.id, tLRPC$Chat);
                        }
                        i42++;
                        longSparseArray35 = longSparseArray23;
                        longSparseArray28 = longSparseArray22;
                        size5 = i30;
                        arrayList18 = arrayList;
                    }
                }
                LongSparseArray longSparseArray38 = longSparseArray35;
                LongSparseArray longSparseArray39 = longSparseArray28;
                size = this.dialogFilters.size();
                i2 = 0;
                while (i2 < size + 2) {
                    if (i2 < size) {
                        dialogFilter = this.dialogFilters.get(i2);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            longSparseArray10 = longSparseArray39;
                            i15 = size;
                            longSparseArray9 = longSparseArray2;
                            longSparseArray7 = longSparseArray32;
                            longSparseArray6 = longSparseArray34;
                            i14 = i2;
                            longSparseArray8 = longSparseArray;
                            i2 = i14 + 1;
                            longSparseArray34 = longSparseArray6;
                            size = i15;
                            longSparseArray39 = longSparseArray10;
                            longSparseArray2 = longSparseArray9;
                            longSparseArray = longSparseArray8;
                            longSparseArray32 = longSparseArray7;
                            longSparseIntArray4 = longSparseIntArray2;
                        } else {
                            i6 = dialogFilter.pendingUnreadCount;
                            i5 = dialogFilter.flags;
                        }
                    } else {
                        dialogFilter = null;
                        int i43 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i2 == size) {
                            i3 = this.pendingMainUnreadCount;
                            i43 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                            if (!getNotificationsController().showBadgeMuted) {
                                i4 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            int i44 = i3;
                            i5 = i43;
                            i6 = i44;
                        } else {
                            i3 = this.pendingArchiveUnreadCount;
                            i4 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i43 |= i4;
                        int i442 = i3;
                        i5 = i43;
                        i6 = i442;
                    }
                    if (z) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr15 = this.contacts;
                                c15 = 0;
                                i6 -= iArr15[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c16 = 1;
                                    i6 -= iArr15[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr16 = this.contacts;
                                        i6 -= iArr16[c16][c15];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 -= iArr16[c16][c16];
                                        }
                                    }
                                }
                            } else {
                                c15 = 0;
                            }
                            c16 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr17 = this.nonContacts;
                                c13 = 0;
                                i6 -= iArr17[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c14 = 1;
                                    i6 -= iArr17[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr18 = this.nonContacts;
                                        i6 -= iArr18[c14][c13];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 -= iArr18[c14][c14];
                                        }
                                    }
                                }
                            } else {
                                c13 = 0;
                            }
                            c14 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr19 = this.groups;
                                c12 = 0;
                                int i45 = i6 - iArr19[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i29 = iArr19[0][1];
                                } else {
                                    i29 = this.mentionGroups[0];
                                }
                                i6 = i45 - i29;
                            } else {
                                c12 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[][] iArr20 = this.groups;
                                int i46 = i6 - iArr20[1][c12];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i28 = iArr20[1][1];
                                } else {
                                    i28 = this.mentionGroups[1];
                                }
                                i6 = i46 - i28;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr21 = this.channels;
                                c11 = 0;
                                int i47 = i6 - iArr21[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i27 = iArr21[0][1];
                                } else {
                                    i27 = this.mentionChannels[0];
                                }
                                i6 = i47 - i27;
                            } else {
                                c11 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[][] iArr22 = this.channels;
                                int i48 = i6 - iArr22[1][c11];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i26 = iArr22[1][1];
                                } else {
                                    i26 = this.mentionChannels[1];
                                }
                                i6 = i48 - i26;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr23 = this.bots;
                                c9 = 0;
                                i6 -= iArr23[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c10 = 1;
                                    i6 -= iArr23[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr24 = this.bots;
                                        i6 -= iArr24[c10][c9];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 -= iArr24[c10][c10];
                                        }
                                    }
                                }
                            } else {
                                c9 = 0;
                            }
                            c10 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if (dialogFilter != null) {
                            int size6 = dialogFilter.alwaysShow.size();
                            int i49 = 0;
                            while (i49 < size6) {
                                int i50 = i2;
                                long longValue = dialogFilter.alwaysShow.get(i49).longValue();
                                if (DialogObject.isUserDialog(longValue)) {
                                    i20 = size;
                                    i21 = size6;
                                    int i51 = 0;
                                    for (int i52 = 2; i51 < i52; i52 = 2) {
                                        TLRPC$User tLRPC$User4 = (TLRPC$User) (i51 == 0 ? longSparseArray : longSparseArray2).get(longValue);
                                        if (tLRPC$User4 != null) {
                                            if (i51 == 0) {
                                                longSparseArray19 = longSparseArray39;
                                                longSparseArray20 = longSparseArray2;
                                                intValue2 = 1;
                                            } else {
                                                longSparseArray20 = longSparseArray2;
                                                intValue2 = ((Integer) longSparseArray32.get(longValue, 0)).intValue();
                                                longSparseArray19 = longSparseArray39;
                                            }
                                            if (tLRPC$User4.bot) {
                                                i25 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                            } else if (tLRPC$User4.self || tLRPC$User4.contact) {
                                                i25 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                            } else {
                                                i25 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                            }
                                            if ((i25 & i5) == 0) {
                                                i6 -= intValue2;
                                            } else {
                                                i24 = i49;
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0) {
                                                    longSparseArray21 = longSparseArray32;
                                                } else {
                                                    longSparseArray21 = longSparseArray32;
                                                }
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                    if (longSparseArray34.indexOfKey(tLRPC$User4.id) < 0) {
                                                    }
                                                    i6 -= intValue2;
                                                }
                                                i51++;
                                                longSparseArray32 = longSparseArray21;
                                                longSparseArray2 = longSparseArray20;
                                                longSparseArray39 = longSparseArray19;
                                                i49 = i24;
                                            }
                                        } else {
                                            longSparseArray19 = longSparseArray39;
                                            longSparseArray20 = longSparseArray2;
                                        }
                                        i24 = i49;
                                        longSparseArray21 = longSparseArray32;
                                        i51++;
                                        longSparseArray32 = longSparseArray21;
                                        longSparseArray2 = longSparseArray20;
                                        longSparseArray39 = longSparseArray19;
                                        i49 = i24;
                                    }
                                    longSparseArray16 = longSparseArray39;
                                    longSparseArray17 = longSparseArray2;
                                    i22 = i49;
                                    longSparseArray18 = longSparseArray32;
                                } else {
                                    longSparseArray16 = longSparseArray39;
                                    i20 = size;
                                    i21 = size6;
                                    longSparseArray17 = longSparseArray2;
                                    i22 = i49;
                                    longSparseArray18 = longSparseArray32;
                                    TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray38.get(-longValue);
                                    if (tLRPC$Chat2 != null) {
                                        if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                            i23 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                        } else {
                                            i23 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                        }
                                        if ((i23 & i5) == 0 || (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseArray33.indexOfKey(-tLRPC$Chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-tLRPC$Chat2.id) < 0) || ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0 && longSparseArray34.indexOfKey(-tLRPC$Chat2.id) >= 0))) {
                                            i6--;
                                        }
                                    }
                                }
                                i49 = i22 + 1;
                                size6 = i21;
                                longSparseArray32 = longSparseArray18;
                                i2 = i50;
                                size = i20;
                                longSparseArray2 = longSparseArray17;
                                longSparseArray39 = longSparseArray16;
                            }
                            longSparseArray3 = longSparseArray39;
                            i7 = size;
                            longSparseArray4 = longSparseArray2;
                            LongSparseArray longSparseArray40 = longSparseArray32;
                            i8 = i2;
                            int size7 = dialogFilter.neverShow.size();
                            int i53 = 0;
                            while (i53 < size7) {
                                long longValue2 = dialogFilter.neverShow.get(i53).longValue();
                                if (longSparseIntArray4 == null || longSparseIntArray4.indexOfKey(longValue2) < 0 || longSparseArray33.indexOfKey(longValue2) >= 0) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        int i54 = 0;
                                        while (i54 < 2) {
                                            TLRPC$User tLRPC$User5 = (TLRPC$User) (i54 == 0 ? longSparseArray : longSparseArray4).get(longValue2);
                                            if (tLRPC$User5 != null) {
                                                if (i54 == 0) {
                                                    i18 = size7;
                                                    intValue = 1;
                                                } else {
                                                    intValue = ((Integer) longSparseArray40.get(longValue2, 0)).intValue();
                                                    if (intValue != 0) {
                                                        i18 = size7;
                                                    }
                                                }
                                                if (tLRPC$User5.bot) {
                                                    i19 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else if (tLRPC$User5.self || tLRPC$User5.contact) {
                                                    i19 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                } else {
                                                    i19 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                }
                                                if ((i19 & i5) != 0) {
                                                    longSparseArray15 = longSparseArray40;
                                                    if (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray34.indexOfKey(tLRPC$User5.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray33.indexOfKey(tLRPC$User5.id) < 0)) {
                                                        i6 += intValue;
                                                    }
                                                } else {
                                                    longSparseArray15 = longSparseArray40;
                                                }
                                                i54++;
                                                size7 = i18;
                                                longSparseArray40 = longSparseArray15;
                                            }
                                            longSparseArray15 = longSparseArray40;
                                            i18 = size7;
                                            i54++;
                                            size7 = i18;
                                            longSparseArray40 = longSparseArray15;
                                        }
                                    } else {
                                        longSparseArray14 = longSparseArray40;
                                        i16 = size7;
                                        TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray38.get(-longValue2);
                                        if (tLRPC$Chat3 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                                i17 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i17 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i17 & i5) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray34.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray33.indexOfKey(-tLRPC$Chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                                i6++;
                                            }
                                        }
                                        i53++;
                                        size7 = i16;
                                        longSparseArray40 = longSparseArray14;
                                    }
                                }
                                longSparseArray14 = longSparseArray40;
                                i16 = size7;
                                i53++;
                                size7 = i16;
                                longSparseArray40 = longSparseArray14;
                            }
                            longSparseArray5 = longSparseArray40;
                        } else {
                            longSparseArray3 = longSparseArray39;
                            i7 = size;
                            longSparseArray4 = longSparseArray2;
                            longSparseArray5 = longSparseArray32;
                            i8 = i2;
                        }
                        if (i6 < 0) {
                            longSparseArray6 = longSparseArray34;
                            longSparseArray7 = longSparseArray5;
                            longSparseArray8 = longSparseArray;
                            longSparseArray9 = longSparseArray4;
                            longSparseArray10 = longSparseArray3;
                            i9 = 0;
                            if (dialogFilter == null) {
                                dialogFilter.pendingUnreadCount = i9;
                                i14 = i8;
                                i15 = i7;
                            } else {
                                i14 = i8;
                                i15 = i7;
                                if (i14 == i15) {
                                    this.pendingMainUnreadCount = i9;
                                } else if (i14 == i15 + 1) {
                                    this.pendingArchiveUnreadCount = i9;
                                }
                            }
                        } else {
                            i9 = i6;
                            longSparseArray6 = longSparseArray34;
                            longSparseArray7 = longSparseArray5;
                            longSparseArray8 = longSparseArray;
                            longSparseArray9 = longSparseArray4;
                            longSparseArray10 = longSparseArray3;
                            if (dialogFilter == null) {
                            }
                        }
                    } else {
                        longSparseArray3 = longSparseArray39;
                        i7 = size;
                        longSparseArray4 = longSparseArray2;
                        longSparseArray5 = longSparseArray32;
                        i8 = i2;
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr25 = this.contacts;
                                c7 = 0;
                                i6 += iArr25[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c8 = 1;
                                    i6 += iArr25[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr26 = this.contacts;
                                        i6 += iArr26[c8][c7];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr26[c8][c8];
                                        }
                                    }
                                }
                            } else {
                                c7 = 0;
                            }
                            c8 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr27 = this.nonContacts;
                                c5 = 0;
                                i6 += iArr27[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c6 = 1;
                                    i6 += iArr27[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr28 = this.nonContacts;
                                        i6 += iArr28[c6][c5];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr28[c6][c6];
                                        }
                                    }
                                }
                            } else {
                                c5 = 0;
                            }
                            c6 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr29 = this.groups;
                                c4 = 0;
                                int i55 = i6 + iArr29[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i13 = iArr29[0][1];
                                } else {
                                    i13 = this.mentionGroups[0];
                                }
                                i6 = i55 + i13;
                            } else {
                                c4 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[][] iArr30 = this.groups;
                                int i56 = i6 + iArr30[1][c4];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i12 = iArr30[1][1];
                                } else {
                                    i12 = this.mentionGroups[1];
                                }
                                i6 = i56 + i12;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr31 = this.channels;
                                c3 = 0;
                                int i57 = i6 + iArr31[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i11 = iArr31[0][1];
                                } else {
                                    i11 = this.mentionChannels[0];
                                }
                                i6 = i57 + i11;
                            } else {
                                c3 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[][] iArr32 = this.channels;
                                int i58 = i6 + iArr32[1][c3];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i10 = iArr32[1][1];
                                } else {
                                    i10 = this.mentionChannels[1];
                                }
                                i6 = i58 + i10;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[][] iArr33 = this.bots;
                                c = 0;
                                i6 += iArr33[0][0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c2 = 1;
                                    i6 += iArr33[0][1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[][] iArr34 = this.bots;
                                        i6 += iArr34[c2][c];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr34[c2][c2];
                                        }
                                    }
                                }
                            } else {
                                c = 0;
                            }
                            c2 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        i9 = i6;
                        if (dialogFilter != null) {
                            if (dialogFilter.alwaysShow.isEmpty()) {
                                longSparseArray6 = longSparseArray34;
                                longSparseArray7 = longSparseArray5;
                                longSparseArray8 = longSparseArray;
                                longSparseArray9 = longSparseArray4;
                                longSparseArray10 = longSparseArray3;
                            } else {
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseIntArray4 != null) {
                                    int size8 = longSparseIntArray2.size();
                                    int i59 = 0;
                                    while (i59 < size8) {
                                        long keyAt2 = longSparseIntArray4.keyAt(i59);
                                        LongSparseArray longSparseArray41 = longSparseArray34;
                                        TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray38.get(-keyAt2);
                                        if (ChatObject.isChannel(tLRPC$Chat4) && !tLRPC$Chat4.megagroup) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) == 0) {
                                                i59++;
                                                longSparseArray34 = longSparseArray41;
                                            }
                                            if (longSparseArray33.indexOfKey(keyAt2) >= 0) {
                                                i9--;
                                            }
                                            i59++;
                                            longSparseArray34 = longSparseArray41;
                                        } else {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) == 0) {
                                                i59++;
                                                longSparseArray34 = longSparseArray41;
                                            }
                                            if (longSparseArray33.indexOfKey(keyAt2) >= 0 && dialogFilter.alwaysShow.contains(Long.valueOf(keyAt2))) {
                                                i9--;
                                            }
                                            i59++;
                                            longSparseArray34 = longSparseArray41;
                                        }
                                    }
                                }
                                longSparseArray6 = longSparseArray34;
                                int size9 = dialogFilter.alwaysShow.size();
                                int i60 = i9;
                                int i61 = 0;
                                while (i61 < size9) {
                                    long longValue3 = dialogFilter.alwaysShow.get(i61).longValue();
                                    LongSparseArray longSparseArray42 = longSparseArray3;
                                    if (longSparseArray42.indexOfKey(longValue3) < 0) {
                                        longSparseArray11 = longSparseArray5;
                                        longSparseArray12 = longSparseArray;
                                        longSparseArray13 = longSparseArray4;
                                    } else if (DialogObject.isUserDialog(longValue3)) {
                                        longSparseArray12 = longSparseArray;
                                        TLRPC$User tLRPC$User6 = (TLRPC$User) longSparseArray12.get(longValue3);
                                        if (tLRPC$User6 != null) {
                                            j = longValue3;
                                            if (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseArray33.indexOfKey(tLRPC$User6.id) >= 0) || (!tLRPC$User6.bot ? !(tLRPC$User6.self || tLRPC$User6.contact ? (MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0 : (MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) : (MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) == 0)) {
                                                i60++;
                                            }
                                        } else {
                                            j = longValue3;
                                        }
                                        longSparseArray13 = longSparseArray4;
                                        long j3 = j;
                                        TLRPC$User tLRPC$User7 = (TLRPC$User) longSparseArray13.get(j3);
                                        if (tLRPC$User7 != null) {
                                            longSparseArray11 = longSparseArray5;
                                            int intValue6 = ((Integer) longSparseArray11.get(j3, 0)).intValue();
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray33.indexOfKey(tLRPC$User7.id) < 0) {
                                                if (tLRPC$User7.bot) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                                                    }
                                                } else if (tLRPC$User7.self || tLRPC$User7.contact) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                                                }
                                            }
                                            i60 += intValue6;
                                        } else {
                                            longSparseArray11 = longSparseArray5;
                                        }
                                    } else {
                                        longSparseArray11 = longSparseArray5;
                                        longSparseArray12 = longSparseArray;
                                        longSparseArray13 = longSparseArray4;
                                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray38.get(-longValue3);
                                        if (tLRPC$Chat5 != null) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray33.indexOfKey(-tLRPC$Chat5.id) < 0) {
                                                if (ChatObject.isChannel(tLRPC$Chat5) && !tLRPC$Chat5.megagroup) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                                                }
                                            }
                                            i60++;
                                        }
                                    }
                                    i61++;
                                    longSparseArray3 = longSparseArray42;
                                    longSparseArray4 = longSparseArray13;
                                    longSparseArray = longSparseArray12;
                                    longSparseArray5 = longSparseArray11;
                                }
                                longSparseArray7 = longSparseArray5;
                                longSparseArray8 = longSparseArray;
                                longSparseArray9 = longSparseArray4;
                                longSparseArray10 = longSparseArray3;
                                i9 = i60;
                            }
                            int size10 = dialogFilter.neverShow.size();
                            int i62 = i9;
                            for (int i63 = 0; i63 < size10; i63++) {
                                long longValue4 = dialogFilter.neverShow.get(i63).longValue();
                                if (DialogObject.isUserDialog(longValue4)) {
                                    if (((TLRPC$User) longSparseArray8.get(longValue4)) != null) {
                                        i62--;
                                    }
                                    if (((TLRPC$User) longSparseArray9.get(longValue4)) != null) {
                                        i62 -= ((Integer) longSparseArray7.get(longValue4, 0)).intValue();
                                    }
                                } else if (((TLRPC$Chat) longSparseArray38.get(-longValue4)) != null) {
                                    i62--;
                                }
                            }
                            i9 = i62;
                            if (dialogFilter == null) {
                            }
                        }
                        longSparseArray6 = longSparseArray34;
                        longSparseArray7 = longSparseArray5;
                        longSparseArray8 = longSparseArray;
                        longSparseArray9 = longSparseArray4;
                        longSparseArray10 = longSparseArray3;
                        if (dialogFilter == null) {
                        }
                    }
                    i2 = i14 + 1;
                    longSparseArray34 = longSparseArray6;
                    size = i15;
                    longSparseArray39 = longSparseArray10;
                    longSparseArray2 = longSparseArray9;
                    longSparseArray = longSparseArray8;
                    longSparseArray32 = longSparseArray7;
                    longSparseIntArray4 = longSparseIntArray2;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda13
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateFiltersReadCounter$113();
                    }
                });
            }
        }
        longSparseArray = longSparseArray29;
        longSparseArray2 = longSparseArray36;
        if (!arrayList14.isEmpty()) {
        }
        LongSparseArray longSparseArray382 = longSparseArray35;
        LongSparseArray longSparseArray392 = longSparseArray28;
        size = this.dialogFilters.size();
        i2 = 0;
        while (i2 < size + 2) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda13
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateFiltersReadCounter$113();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateFiltersReadCounter$113() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x03a0 A[Catch: Exception -> 0x03a8, TRY_LEAVE, TryCatch #0 {Exception -> 0x03a8, blocks: (B:3:0x0008, B:7:0x0024, B:8:0x003c, B:10:0x0042, B:13:0x0049, B:16:0x0050, B:18:0x005a, B:19:0x005e, B:20:0x0064, B:93:0x02b3, B:95:0x02b9, B:131:0x0390, B:133:0x03a0, B:99:0x02c3, B:101:0x02ce, B:102:0x02dc, B:104:0x02e2, B:106:0x02ec, B:116:0x0340, B:107:0x02f4, B:109:0x0318, B:111:0x031e, B:113:0x0323, B:115:0x032a, B:117:0x0342, B:119:0x034b, B:121:0x0351, B:122:0x035a, B:124:0x0360, B:126:0x036a, B:128:0x0384, B:127:0x0372, B:129:0x0386, B:130:0x0389, B:21:0x0069, B:24:0x0070, B:26:0x0076, B:31:0x008b, B:33:0x0092, B:55:0x015f, B:36:0x00af, B:37:0x00d1, B:40:0x00d9, B:43:0x00e0, B:45:0x0108, B:47:0x0113, B:51:0x0143, B:48:0x012b, B:50:0x012f, B:52:0x0147, B:54:0x014b, B:29:0x0083, B:56:0x019e, B:58:0x01a4, B:60:0x01ab, B:61:0x01d4, B:63:0x01da, B:65:0x01f2, B:67:0x01f8, B:69:0x01ff, B:71:0x0206, B:73:0x0228, B:75:0x022f, B:78:0x024c, B:76:0x023d, B:79:0x0256, B:83:0x0267, B:85:0x0271, B:86:0x0278, B:87:0x027e, B:90:0x0285, B:92:0x028b), top: B:138:0x0008 }] */
    /* JADX WARN: Removed duplicated region for block: B:175:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateDialogsWithReadMessagesInternal(ArrayList<Integer> arrayList, LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseIntArray longSparseIntArray3) {
        int i;
        boolean z;
        int i2;
        int i3;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray;
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray3;
        try {
            LongSparseIntArray longSparseIntArray6 = new LongSparseIntArray();
            LongSparseIntArray longSparseIntArray7 = new LongSparseIntArray();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            int i4 = 2;
            if (!isEmpty(arrayList)) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized.next()) {
                    if (queryFinalized.intValue(2) == 0 && queryFinalized.intValue(1) == 0) {
                        long longValue = queryFinalized.longValue(0);
                        int i5 = longSparseIntArray6.get(longValue);
                        if (i5 == 0) {
                            longSparseIntArray6.put(longValue, 1);
                        } else {
                            longSparseIntArray6.put(longValue, i5 + 1);
                        }
                    }
                }
                queryFinalized.dispose();
            } else {
                if (!isEmpty(longSparseIntArray)) {
                    int i6 = 0;
                    while (i6 < longSparseIntArray.size()) {
                        long keyAt = longSparseIntArray4.keyAt(i6);
                        int i7 = longSparseIntArray4.get(keyAt);
                        int i8 = longSparseIntArray5 == null ? -2 : longSparseIntArray5.get(keyAt, -2);
                        if (i8 >= 0) {
                            longSparseIntArray6.put(keyAt, i8);
                            if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " update unread messages count by still unread " + i8);
                            }
                        } else {
                            if (longSparseIntArray5 == null || i8 == -2) {
                                z = true;
                            } else {
                                SQLiteDatabase sQLiteDatabase = this.database;
                                Locale locale = Locale.US;
                                Object[] objArr = new Object[i4];
                                objArr[0] = Long.valueOf(keyAt);
                                objArr[1] = Integer.valueOf(i7);
                                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM messages_holes WHERE uid = %d AND end > %d", objArr), new Object[0]);
                                z = true;
                                while (queryFinalized2.next()) {
                                    z = false;
                                }
                                queryFinalized2.dispose();
                            }
                            if (z) {
                                SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i7)), new Object[0]);
                                if (queryFinalized3.next()) {
                                    int intValue = queryFinalized3.intValue(0);
                                    longSparseIntArray6.put(keyAt, intValue);
                                    if (BuildVars.DEBUG_VERSION) {
                                        FileLog.d(keyAt + " update unread messages count " + intValue);
                                    }
                                } else if (BuildVars.DEBUG_VERSION) {
                                    FileLog.d(keyAt + " can't update unread messages count cursor trouble");
                                }
                                queryFinalized3.dispose();
                            } else if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " can't update unread messages count");
                            }
                        }
                        FileLog.d(keyAt + " set inbox max " + i7);
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i7);
                        executeFast.bindLong(3, keyAt);
                        executeFast.step();
                        executeFast.dispose();
                        i6++;
                        longSparseIntArray4 = longSparseIntArray;
                        longSparseIntArray5 = longSparseIntArray3;
                        i4 = 2;
                    }
                }
                if (!isEmpty(longSparseArray)) {
                    int size = longSparseArray.size();
                    int i9 = 0;
                    while (i9 < size) {
                        ArrayList<Integer> valueAt = longSparseArray.valueAt(i9);
                        ArrayList arrayList3 = new ArrayList(valueAt);
                        int i10 = 0;
                        SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out, mention, mid, is_channel FROM messages_v2 WHERE mid IN(%s)", TextUtils.join(",", valueAt)), new Object[0]);
                        long j = 0;
                        while (queryFinalized4.next()) {
                            long longValue2 = queryFinalized4.longValue(i10);
                            arrayList3.remove(Integer.valueOf(queryFinalized4.intValue(4)));
                            if (queryFinalized4.intValue(1) < 2 && queryFinalized4.intValue(2) == 0 && queryFinalized4.intValue(3) == 1) {
                                int i11 = longSparseIntArray7.get(longValue2, -1);
                                if (i11 < 0) {
                                    i = size;
                                    SQLiteCursor queryFinalized5 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + longValue2, new Object[0]);
                                    int intValue2 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                    queryFinalized5.dispose();
                                    longSparseIntArray7.put(longValue2, Math.max(0, intValue2 - 1));
                                } else {
                                    i = size;
                                    longSparseIntArray7.put(longValue2, Math.max(0, i11 - 1));
                                }
                            } else {
                                i = size;
                            }
                            j = queryFinalized4.longValue(5);
                            size = i;
                            i10 = 0;
                        }
                        int i12 = size;
                        queryFinalized4.dispose();
                        if (!arrayList3.isEmpty() && j != 0 && !arrayList2.contains(Long.valueOf(j))) {
                            arrayList2.add(Long.valueOf(j));
                        }
                        i9++;
                        size = i12;
                    }
                }
                if (!isEmpty(longSparseIntArray2)) {
                    for (int i13 = 0; i13 < longSparseIntArray2.size(); i13++) {
                        long keyAt2 = longSparseIntArray2.keyAt(i13);
                        int i14 = longSparseIntArray2.get(keyAt2);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast2.requery();
                        executeFast2.bindLong(1, keyAt2);
                        executeFast2.bindInteger(2, i14);
                        executeFast2.bindLong(3, keyAt2);
                        executeFast2.step();
                        executeFast2.dispose();
                    }
                }
            }
            if (longSparseIntArray6.size() <= 0) {
                if (longSparseIntArray7.size() > 0) {
                }
                updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
                if (arrayList2.isEmpty()) {
                    getMessagesController().reloadMentionsCountForChannels(arrayList2);
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            if (longSparseIntArray6.size() > 0) {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
                int i15 = 0;
                while (i15 < longSparseIntArray6.size()) {
                    long keyAt3 = longSparseIntArray6.keyAt(i15);
                    if (isForum(keyAt3)) {
                        longSparseIntArray6.removeAt(i15);
                        i15--;
                        i3 = 1;
                    } else {
                        int valueAt2 = longSparseIntArray6.valueAt(i15);
                        SQLiteCursor queryFinalized6 = this.database.queryFinalized("SELECT unread_count FROM dialogs WHERE did = " + keyAt3, new Object[0]);
                        int intValue3 = queryFinalized6.next() ? queryFinalized6.intValue(0) : 0;
                        queryFinalized6.dispose();
                        if (intValue3 == valueAt2) {
                            longSparseIntArray6.removeAt(i15);
                            i15--;
                        } else {
                            executeFast3.requery();
                            executeFast3.bindInteger(1, valueAt2);
                            executeFast3.bindLong(2, keyAt3);
                            executeFast3.step();
                            arrayList4.add(Long.valueOf(keyAt3));
                        }
                        i3 = 1;
                    }
                    i15 += i3;
                }
                executeFast3.dispose();
                updateWidgets(arrayList4);
            }
            if (longSparseIntArray7.size() > 0) {
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count_i = ? WHERE did = ?");
                int i16 = 0;
                while (i16 < longSparseIntArray7.size()) {
                    long keyAt4 = longSparseIntArray7.keyAt(i16);
                    if (isForum(keyAt4)) {
                        longSparseIntArray7.removeAt(i16);
                        i16--;
                        i2 = 1;
                    } else {
                        executeFast4.requery();
                        i2 = 1;
                        executeFast4.bindInteger(1, longSparseIntArray7.valueAt(i16));
                        executeFast4.bindLong(2, keyAt4);
                        executeFast4.step();
                    }
                    i16 += i2;
                }
                executeFast4.dispose();
            }
            this.database.commitTransaction();
            updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
            getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
            if (arrayList2.isEmpty()) {
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseIntArray longSparseIntArray) {
        return longSparseIntArray == null || longSparseIntArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray<?> longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    public void updateDialogsWithReadMessages(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseIntArray longSparseIntArray3, boolean z) {
        if (isEmpty(longSparseIntArray) && isEmpty(longSparseIntArray2) && isEmpty(longSparseArray) && isEmpty(longSparseIntArray3)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda197
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithReadMessages$114(longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
                }
            });
        } else {
            updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogsWithReadMessages$114(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray, LongSparseIntArray longSparseIntArray3) {
        updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
    }

    public void updateChatParticipants(final TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        if (tLRPC$ChatParticipants == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatParticipants$116(tLRPC$ChatParticipants);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$116(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatParticipants.chat_id, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                tLRPC$ChatFull.participants = tLRPC$ChatParticipants;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatParticipants$115(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.bindInteger(7, tLRPC$ChatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$115(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void loadChannelAdmins(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChannelAdmins$117(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$117(long j) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid, data FROM channel_admins_v3 WHERE did = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = new LongSparseArray<>();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$ChannelParticipant TLdeserialize = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        longSparseArray.put(queryFinalized.longValue(0), TLdeserialize);
                    }
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(longSparseArray, j, true);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void putChannelAdmins(final long j, final LongSparseArray<TLRPC$ChannelParticipant> longSparseArray) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda110
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelAdmins$118(j, longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelAdmins$118(long j, LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM channel_admins_v3 WHERE did = " + j).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v3 VALUES(?, ?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindLong(2, longSparseArray.keyAt(i));
                        TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) longSparseArray.valueAt(i);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                        tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateChannelUsers(final long j, final ArrayList<TLRPC$ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChannelUsers$119(j, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUsers$119(long j, ArrayList arrayList) {
        SQLitePreparedStatement executeFast;
        long j2 = -j;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindLong(2, MessageObject.getPeerId(tLRPC$ChannelParticipant.peer));
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(j, true, null, false, true);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveBotCache(final String str, final TLObject tLObject) {
        if (tLObject == null || TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveBotCache$120(tLObject, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveBotCache$120(TLObject tLObject, String str) {
        int currentTime;
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                currentTime = getConnectionsManager().getCurrentTime();
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (tLObject instanceof TLRPC$TL_messages_botCallbackAnswer) {
                i = ((TLRPC$TL_messages_botCallbackAnswer) tLObject).cache_time;
            } else {
                if (tLObject instanceof TLRPC$TL_messages_botResults) {
                    i = ((TLRPC$TL_messages_botResults) tLObject).cache_time;
                }
                executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                return;
            }
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast.bindString(1, str);
            executeFast.bindInteger(2, currentTime);
            executeFast.bindByteBuffer(3, nativeByteBuffer2);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer2.reuse();
            return;
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
                return;
            }
            return;
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        currentTime += i;
        executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
    }

    public void getBotCache(final String str, final RequestDelegate requestDelegate) {
        if (str == null || requestDelegate == null) {
            return;
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda60
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getBotCache$121(currentTime, str, requestDelegate);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0080  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getBotCache$121(int i, String str, RequestDelegate requestDelegate) {
        SQLiteCursor sQLiteCursor;
        TLObject tLObject;
        NativeByteBuffer byteBufferValue;
        try {
            this.database.executeFast("DELETE FROM botcache WHERE date < " + i).stepThis().dispose();
            sQLiteCursor = this.database.queryFinalized("SELECT data FROM botcache WHERE id = ?", str);
            try {
                try {
                    if (sQLiteCursor.next()) {
                        try {
                            byteBufferValue = sQLiteCursor.byteBufferValue(0);
                        } catch (Exception e) {
                            e = e;
                            tLObject = null;
                        }
                        if (byteBufferValue != null) {
                            int readInt32 = byteBufferValue.readInt32(false);
                            if (readInt32 == 911761060) {
                                tLObject = TLRPC$TL_messages_botCallbackAnswer.TLdeserialize(byteBufferValue, readInt32, false);
                            } else {
                                tLObject = TLRPC$messages_BotResults.TLdeserialize(byteBufferValue, readInt32, false);
                            }
                            try {
                                try {
                                    byteBufferValue.reuse();
                                } catch (Exception e2) {
                                    e = e2;
                                    try {
                                        checkSQLException(e);
                                        sQLiteCursor.dispose();
                                        requestDelegate.run(tLObject, null);
                                    } catch (Exception e3) {
                                        e = e3;
                                        checkSQLException(e);
                                        requestDelegate.run(tLObject, null);
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                            return;
                                        }
                                        return;
                                    }
                                }
                                sQLiteCursor.dispose();
                                requestDelegate.run(tLObject, null);
                            } catch (Throwable th) {
                                th = th;
                                requestDelegate.run(tLObject, null);
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        }
                    }
                    tLObject = null;
                    sQLiteCursor.dispose();
                    requestDelegate.run(tLObject, null);
                } catch (Throwable th2) {
                    th = th2;
                    tLObject = null;
                    requestDelegate.run(tLObject, null);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e4) {
                e = e4;
                tLObject = null;
            }
        } catch (Exception e5) {
            e = e5;
            sQLiteCursor = null;
            tLObject = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
            tLObject = null;
        }
    }

    public ArrayList<TLRPC$UserFull> loadUserInfos(HashSet<Long> hashSet) {
        ArrayList<TLRPC$UserFull> arrayList = new ArrayList<>();
        try {
            String join = TextUtils.join(",", hashSet);
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid IN(" + join + ")", new Object[0]);
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$UserFull TLdeserialize = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    TLdeserialize.pinned_msg_id = queryFinalized.intValue(1);
                    arrayList.add(TLdeserialize);
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return arrayList;
    }

    public void loadUserInfo(final TLRPC$User tLRPC$User, final boolean z, final int i, int i2) {
        if (tLRPC$User == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda219
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUserInfo$123(tLRPC$User, z, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:121:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01c4  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x01d9  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUserInfo$123(TLRPC$User tLRPC$User, boolean z, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        SQLiteCursor sQLiteCursor;
        int i2;
        boolean z2;
        TLRPC$UserFull tLRPC$UserFull2;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        int i3;
        boolean z3;
        ArrayList<MessageObject> loadPinnedMessages;
        NativeByteBuffer byteBufferValue;
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList = new ArrayList<>();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + tLRPC$User.id, new Object[0]);
            try {
                if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                    tLRPC$UserFull2 = null;
                } else {
                    tLRPC$UserFull2 = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    try {
                        tLRPC$UserFull2.pinned_msg_id = queryFinalized.intValue(1);
                        byteBufferValue.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = sQLiteCursor3;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = 0;
                        z2 = false;
                        try {
                            checkSQLException(e);
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = sQLiteCursor2;
                        tLRPC$UserFull = tLRPC$UserFull2;
                        i2 = 0;
                        z2 = false;
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                try {
                    SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(tLRPC$User.id)), new Object[0]);
                    while (queryFinalized2.next()) {
                        int intValue = queryFinalized2.intValue(0);
                        arrayList.add(Integer.valueOf(intValue));
                        hashMap.put(Integer.valueOf(intValue), null);
                    }
                    queryFinalized2.dispose();
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + tLRPC$User.id, new Object[0]);
                    if (queryFinalized3.next()) {
                        i2 = queryFinalized3.intValue(0);
                        try {
                            z3 = queryFinalized3.intValue(1) != 0;
                            i3 = i2;
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = queryFinalized3;
                            tLRPC$UserFull = tLRPC$UserFull2;
                            z2 = false;
                            checkSQLException(e);
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized3;
                            tLRPC$UserFull = tLRPC$UserFull2;
                            z2 = false;
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } else {
                        i3 = 0;
                        z3 = false;
                    }
                    try {
                        queryFinalized3.dispose();
                        if (tLRPC$UserFull2 != null) {
                            try {
                                if (tLRPC$UserFull2.pinned_msg_id != 0 && (arrayList.isEmpty() || tLRPC$UserFull2.pinned_msg_id > arrayList.get(0).intValue())) {
                                    arrayList.clear();
                                    arrayList.add(Integer.valueOf(tLRPC$UserFull2.pinned_msg_id));
                                    hashMap.put(Integer.valueOf(tLRPC$UserFull2.pinned_msg_id), null);
                                }
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor = null;
                                tLRPC$UserFull = tLRPC$UserFull2;
                                i2 = i3;
                                z2 = z3;
                                checkSQLException(e);
                                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor = null;
                                tLRPC$UserFull = tLRPC$UserFull2;
                                i2 = i3;
                                z2 = z3;
                                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        }
                        if (!arrayList.isEmpty() && (loadPinnedMessages = getMediaDataController().loadPinnedMessages(tLRPC$User.id, 0L, arrayList, false)) != null) {
                            int size = loadPinnedMessages.size();
                            for (int i4 = 0; i4 < size; i4++) {
                                MessageObject messageObject = loadPinnedMessages.get(i4);
                                hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                            }
                        }
                        ArrayList arrayList2 = new ArrayList();
                        if (tLRPC$UserFull2 != null && (tLRPC$UserFull2.flags2 & 64) != 0) {
                            long j = tLRPC$UserFull2.personal_channel_id;
                            if (j != 0) {
                                arrayList2.add(Long.valueOf(j));
                            }
                        }
                        if (!arrayList2.isEmpty()) {
                            final ArrayList<TLRPC$Chat> arrayList3 = new ArrayList<>();
                            getChatsInternal(TextUtils.join(",", arrayList2), arrayList3);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda155
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadUserInfo$122(arrayList3);
                                }
                            });
                        }
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList, hashMap, i3, z3);
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor = queryFinalized3;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor = queryFinalized3;
                    }
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor = null;
                    tLRPC$UserFull = tLRPC$UserFull2;
                    i2 = 0;
                    z2 = false;
                    checkSQLException(e);
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = null;
                    tLRPC$UserFull = tLRPC$UserFull2;
                    i2 = 0;
                    z2 = false;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e6) {
                e = e6;
                tLRPC$UserFull = null;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th7) {
                th = th7;
                tLRPC$UserFull = null;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e7) {
            e = e7;
            tLRPC$UserFull = null;
            sQLiteCursor = null;
        } catch (Throwable th8) {
            th = th8;
            tLRPC$UserFull = null;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUserInfo$122(ArrayList arrayList) {
        getMessagesController().putChats(arrayList, true);
    }

    public void updateUserInfo(final TLRPC$UserFull tLRPC$UserFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda220
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfo$124(tLRPC$UserFull, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00b0  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00b5  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00c1  */
    /* JADX WARN: Removed duplicated region for block: B:54:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUserInfo$124(TLRPC$UserFull tLRPC$UserFull, boolean z) {
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        TLRPC$User tLRPC$User = tLRPC$UserFull.user;
        long j = tLRPC$User != null ? tLRPC$User.id : tLRPC$UserFull.id;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        if (z) {
            try {
                queryFinalized = this.database.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + j, new Object[0]);
                try {
                    try {
                        boolean next = queryFinalized.next();
                        queryFinalized.dispose();
                        if (!next) {
                            return;
                        }
                    } catch (Exception e) {
                        e = e;
                        checkSQLException(e);
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (queryFinalized == null) {
                            queryFinalized.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement3 != null) {
                        sQLitePreparedStatement3.dispose();
                    }
                    if (queryFinalized != null) {
                        queryFinalized.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                queryFinalized = null;
            } catch (Throwable th2) {
                th = th2;
                queryFinalized = null;
                if (sQLitePreparedStatement3 != null) {
                }
                if (queryFinalized != null) {
                }
                throw th;
            }
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
            tLRPC$UserFull.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, j);
            executeFast.bindByteBuffer(2, nativeByteBuffer);
            executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
            if ((tLRPC$UserFull.flags & 2048) != 0) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                executeFast2.bindInteger(1, tLRPC$UserFull.folder_id);
                executeFast2.bindLong(2, j);
                executeFast2.step();
                executeFast2.dispose();
                this.unknownDialogsIds.remove(j);
            }
            if ((tLRPC$UserFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM) != 0) {
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                executeFast3.bindInteger(1, tLRPC$UserFull.ttl_period);
                executeFast3.bindLong(2, j);
                executeFast3.step();
                executeFast3.dispose();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement3 = sQLitePreparedStatement2;
            queryFinalized = null;
            checkSQLException(e);
            if (sQLitePreparedStatement3 != null) {
            }
            if (queryFinalized == null) {
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement3 = sQLitePreparedStatement;
            queryFinalized = null;
            if (sQLitePreparedStatement3 != null) {
            }
            if (queryFinalized != null) {
            }
            throw th;
        }
    }

    public void updateUserInfoPremiumBlocked(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfoPremiumBlocked$125(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateUserInfoPremiumBlocked$125(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        TLRPC$UserFull tLRPC$UserFull;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLiteCursor2 = this.database.queryFinalized("SELECT uid, info, pinned FROM user_settings WHERE uid = " + j, new Object[0]);
                try {
                    boolean next = sQLiteCursor2.next();
                    if (next) {
                        NativeByteBuffer byteBufferValue = sQLiteCursor2.byteBufferValue(1);
                        tLRPC$UserFull = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (tLRPC$UserFull != null) {
                            tLRPC$UserFull.pinned_msg_id = sQLiteCursor2.intValue(2);
                        }
                        byteBufferValue.reuse();
                    } else {
                        tLRPC$UserFull = null;
                    }
                    sQLiteCursor2.dispose();
                    if (next && tLRPC$UserFull != null && tLRPC$UserFull.contact_require_premium != z) {
                        tLRPC$UserFull.contact_require_premium = z;
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
                        try {
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
                            tLRPC$UserFull.serializeToStream(nativeByteBuffer);
                            executeFast.bindLong(1, j);
                            executeFast.bindByteBuffer(2, nativeByteBuffer);
                            executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
                            executeFast.step();
                            executeFast.dispose();
                            nativeByteBuffer.reuse();
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor2 = null;
                            sQLitePreparedStatement = executeFast;
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor2 != null) {
                                sQLiteCursor2.dispose();
                            }
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = executeFast;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor2 = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    public void saveChatInviter(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda97
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatInviter$126(j2, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatInviter$126(long j, long j2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET inviter = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindLong(2, j2);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveChatLinksCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda49
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatLinksCount$127(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatLinksCount$127(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET links = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateChatInfo(final TLRPC$ChatFull tLRPC$ChatFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda202
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$128(tLRPC$ChatFull, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:66:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0162  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0169  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x016e  */
    /* JADX WARN: Removed duplicated region for block: B:88:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v11 */
    /* JADX WARN: Type inference failed for: r13v22 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatInfo$128(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        int i;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT online, inviter, links FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatFull.id, new Object[0]);
                try {
                    if (queryFinalized.next()) {
                        i = queryFinalized.intValue(0);
                        tLRPC$ChatFull.inviterId = queryFinalized.longValue(1);
                        i2 = queryFinalized.intValue(2);
                    } else {
                        i = -1;
                        i2 = 0;
                    }
                    queryFinalized.dispose();
                    if (z == 0 || i != -1) {
                        if (i >= 0 && (tLRPC$ChatFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM) == 0) {
                            tLRPC$ChatFull.online_count = i;
                        }
                        if (i2 >= 0) {
                            tLRPC$ChatFull.invitesCount = i2;
                        }
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                        try {
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                            tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                            executeFast.bindLong(1, tLRPC$ChatFull.id);
                            executeFast.bindByteBuffer(2, nativeByteBuffer);
                            executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                            executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                            executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                            executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                            executeFast.bindInteger(7, tLRPC$ChatFull.participants_count);
                            executeFast.step();
                            executeFast.dispose();
                            nativeByteBuffer.reuse();
                            if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-tLRPC$ChatFull.id), new Object[0]);
                                try {
                                    if (!queryFinalized2.next() || queryFinalized2.intValue(0) >= tLRPC$ChatFull.read_inbox_max_id) {
                                        sQLitePreparedStatement2 = null;
                                    } else {
                                        int intValue = queryFinalized2.intValue(1);
                                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                                        try {
                                            sQLitePreparedStatement2.bindInteger(1, tLRPC$ChatFull.unread_count);
                                            sQLitePreparedStatement2.bindInteger(2, tLRPC$ChatFull.read_inbox_max_id);
                                            sQLitePreparedStatement2.bindInteger(3, Math.max(intValue, tLRPC$ChatFull.read_outbox_max_id));
                                            sQLitePreparedStatement2.bindLong(4, -tLRPC$ChatFull.id);
                                            sQLitePreparedStatement2.step();
                                            sQLitePreparedStatement2.dispose();
                                        } catch (Exception e) {
                                            e = e;
                                            sQLiteCursor = queryFinalized2;
                                            sQLitePreparedStatement = sQLitePreparedStatement2;
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                        } catch (Throwable th) {
                                            th = th;
                                            sQLiteCursor = queryFinalized2;
                                            z = sQLitePreparedStatement2;
                                            if (sQLiteCursor != null) {
                                            }
                                            if (z != 0) {
                                            }
                                            throw th;
                                        }
                                    }
                                    queryFinalized2.dispose();
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor = queryFinalized2;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLiteCursor = queryFinalized2;
                                    z = 0;
                                    if (sQLiteCursor != null) {
                                    }
                                    if (z != 0) {
                                    }
                                    throw th;
                                }
                            } else {
                                sQLitePreparedStatement2 = null;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        }
                        try {
                            if ((tLRPC$ChatFull.flags & 2048) != 0) {
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                                executeFast2.bindInteger(1, tLRPC$ChatFull.folder_id);
                                executeFast2.bindLong(2, -tLRPC$ChatFull.id);
                                executeFast2.step();
                                executeFast2.dispose();
                                this.unknownDialogsIds.remove(-tLRPC$ChatFull.id);
                                sQLitePreparedStatement2 = null;
                            }
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                            executeFast3.bindInteger(1, tLRPC$ChatFull.ttl_period);
                            executeFast3.bindLong(2, -tLRPC$ChatFull.id);
                            executeFast3.step();
                            executeFast3.dispose();
                        } catch (Exception e4) {
                            e = e4;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            z = sQLitePreparedStatement2;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (z != 0) {
                                z.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e5) {
                    e = e5;
                    sQLitePreparedStatement = null;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th4) {
                    th = th4;
                    z = 0;
                    sQLiteCursor = queryFinalized;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        } catch (Exception e6) {
            e = e6;
            sQLitePreparedStatement = null;
        } catch (Throwable th6) {
            th = th6;
            z = 0;
        }
    }

    public void updateChatOnlineCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatOnlineCount$129(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatOnlineCount$129(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updatePinnedMessages(final long j, final ArrayList<Integer> arrayList, final boolean z, final int i, final int i2, final boolean z2, final HashMap<Integer, MessageObject> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda232
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updatePinnedMessages$132(z, hashMap, i2, j, arrayList, i, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0335  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x033a  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0343  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0348  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x034d  */
    /* JADX WARN: Removed duplicated region for block: B:157:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r1v29, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117] */
    /* JADX WARN: Type inference failed for: r1v9, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda116] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updatePinnedMessages$132(boolean z, final HashMap hashMap, final int i, final long j, final ArrayList arrayList, int i2, boolean z2) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int i3;
        boolean z3;
        int i4;
        final int max;
        final boolean z4;
        int intValue;
        int i5;
        final boolean z5;
        int max2;
        NativeByteBuffer nativeByteBuffer;
        String str = "SELECT count, end FROM chat_pinned_count WHERE uid = %d";
        int i6 = 2;
        int i7 = 1;
        try {
            try {
                try {
                    try {
                        if (z) {
                            this.database.beginTransaction();
                            if (hashMap != null) {
                                if (i == 0) {
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                                }
                                intValue = 0;
                            } else {
                                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d AND mid IN (%s)", Long.valueOf(j), TextUtils.join(",", arrayList)), new Object[0]);
                                intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                                queryFinalized.dispose();
                            }
                            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_pinned_v2 VALUES(?, ?, ?)");
                            try {
                                int size = arrayList.size();
                                int i8 = 0;
                                while (i8 < size) {
                                    Integer num = (Integer) arrayList.get(i8);
                                    executeFast.requery();
                                    executeFast.bindLong(1, j);
                                    executeFast.bindInteger(i6, num.intValue());
                                    MessageObject messageObject = hashMap != null ? (MessageObject) hashMap.get(num) : null;
                                    if (messageObject != null) {
                                        nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
                                        messageObject.messageOwner.serializeToStream(nativeByteBuffer);
                                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                                    } else {
                                        executeFast.bindNull(3);
                                        nativeByteBuffer = null;
                                    }
                                    executeFast.step();
                                    if (nativeByteBuffer != null) {
                                        nativeByteBuffer.reuse();
                                    }
                                    i8++;
                                    i6 = 2;
                                }
                                executeFast.dispose();
                                this.database.commitTransaction();
                                SQLiteDatabase sQLiteDatabase4 = this.database;
                                Locale locale = Locale.US;
                                SQLiteCursor queryFinalized2 = sQLiteDatabase4.queryFinalized(String.format(locale, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue2 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                queryFinalized2.dispose();
                                if (hashMap != null) {
                                    max2 = Math.max(i2, intValue2);
                                    z5 = z2;
                                } else {
                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                    if (queryFinalized3.next()) {
                                        i5 = queryFinalized3.intValue(0);
                                        if (queryFinalized3.intValue(1) != 0) {
                                            z5 = true;
                                            queryFinalized3.dispose();
                                            max2 = Math.max(i5 + (arrayList.size() - intValue), intValue2);
                                        }
                                    } else {
                                        i5 = 0;
                                    }
                                    z5 = false;
                                    queryFinalized3.dispose();
                                    max2 = Math.max(i5 + (arrayList.size() - intValue), intValue2);
                                }
                                final int i9 = max2;
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                                executeFast2.requery();
                                executeFast2.bindLong(1, j);
                                executeFast2.bindInteger(2, i9);
                                if (!z5) {
                                    i7 = 0;
                                }
                                executeFast2.bindInteger(3, i7);
                                executeFast2.step();
                                executeFast2.dispose();
                                ?? r1 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$updatePinnedMessages$130(j, arrayList, hashMap, i, i9, z5);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(r1);
                                str = r1;
                            } catch (Exception e) {
                                e = e;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor = null;
                                try {
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                        sQLiteDatabase2.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement == null) {
                                        sQLitePreparedStatement.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th) {
                                    th = th;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLitePreparedStatement = executeFast;
                                sQLiteCursor = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } else {
                            if (arrayList == null) {
                                SQLiteDatabase sQLiteDatabase5 = this.database;
                                sQLiteDatabase5.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                                if (DialogObject.isChatDialog(j)) {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d", Long.valueOf(-j))).stepThis().dispose();
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
                                }
                                max = 0;
                                z4 = true;
                                i3 = 0;
                            } else {
                                String join = TextUtils.join(",", arrayList);
                                if (DialogObject.isChatDialog(j)) {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-j), join)).stepThis().dispose();
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
                                }
                                SQLiteDatabase sQLiteDatabase6 = this.database;
                                Locale locale2 = Locale.US;
                                sQLiteDatabase6.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), join)).stepThis().dispose();
                                SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                int intValue3 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                                queryFinalized4.dispose();
                                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale2, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue4 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                queryFinalized5.dispose();
                                i3 = 0;
                                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(locale2, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                try {
                                    if (queryFinalized6.next()) {
                                        i4 = Math.max(0, queryFinalized6.intValue(0) - intValue3);
                                        z3 = queryFinalized6.intValue(1) != 0;
                                    } else {
                                        z3 = false;
                                        i4 = 0;
                                    }
                                    queryFinalized6.dispose();
                                    max = Math.max(intValue4, i4);
                                    z4 = z3;
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor = queryFinalized6;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor = queryFinalized6;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                            executeFast3.requery();
                            executeFast3.bindLong(1, j);
                            executeFast3.bindInteger(2, max);
                            if (z4) {
                                i3 = 1;
                            }
                            executeFast3.bindInteger(3, i3);
                            executeFast3.step();
                            executeFast3.dispose();
                            ?? r12 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda116
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$updatePinnedMessages$131(j, arrayList, hashMap, i, max, z4);
                                }
                            };
                            AndroidUtilities.runOnUIThread(r12);
                            str = r12;
                        }
                        SQLiteDatabase sQLiteDatabase7 = this.database;
                        if (sQLiteDatabase7 != null) {
                            sQLiteDatabase7.commitTransaction();
                        }
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d";
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d";
                    }
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement = str;
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = str;
                }
            } catch (Exception e5) {
                e = e5;
                sQLiteCursor = "DELETE FROM chat_pinned_v2 WHERE uid = ";
            } catch (Throwable th6) {
                th = th6;
                sQLiteCursor = "DELETE FROM chat_pinned_v2 WHERE uid = ";
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$130(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.TRUE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$131(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.FALSE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    public void updateChatInfo(final long j, final long j2, final int i, final long j3, final int i2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda86
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$134(j, i, j2, j3, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$134(long j, int i, long j2, long j3, int i2) {
        int i3;
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatParticipant tLRPC$TL_chatParticipant;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                i3 = 0;
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                if (i == 1) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        } else if (tLRPC$ChatFull.participants.participants.get(i3).user_id == j2) {
                            tLRPC$ChatFull.participants.participants.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                } else if (i == 0) {
                    Iterator<TLRPC$ChatParticipant> it = tLRPC$ChatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == j2) {
                            return;
                        }
                    }
                    TLRPC$TL_chatParticipant tLRPC$TL_chatParticipant2 = new TLRPC$TL_chatParticipant();
                    tLRPC$TL_chatParticipant2.user_id = j2;
                    tLRPC$TL_chatParticipant2.inviter_id = j3;
                    tLRPC$TL_chatParticipant2.date = getConnectionsManager().getCurrentTime();
                    tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatParticipant2);
                } else if (i == 2) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatFull.participants.participants.get(i3);
                        if (tLRPC$ChatParticipant.user_id == j2) {
                            if (j3 == 1) {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipantAdmin();
                            } else {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipant();
                            }
                            tLRPC$TL_chatParticipant.user_id = tLRPC$ChatParticipant.user_id;
                            tLRPC$TL_chatParticipant.date = tLRPC$ChatParticipant.date;
                            tLRPC$TL_chatParticipant.inviter_id = tLRPC$ChatParticipant.inviter_id;
                            tLRPC$ChatFull.participants.participants.set(i3, tLRPC$TL_chatParticipant);
                        } else {
                            i3++;
                        }
                    }
                }
                tLRPC$ChatFull.participants.version = i2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatInfo$133(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.bindInteger(7, tLRPC$ChatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$133(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public boolean isMigratedChat(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isMigratedChat$135(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$isMigratedChat$135(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) && tLRPC$ChatFull.migrated_from_chat_id != 0;
            countDownLatch.countDown();
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public TLRPC$Message getMessage(final long j, final long j2) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final AtomicReference atomicReference = new AtomicReference();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessage$136(j, j2, atomicReference, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return (TLRPC$Message) atomicReference.get();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessage$136(long j, long j2, AtomicReference atomicReference, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j + " AND mid = " + j2 + " LIMIT 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        atomicReference.set(TLdeserialize);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public boolean hasInviteMeMessage(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda141
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasInviteMeMessage$137(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hasInviteMeMessage$137(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                long clientUserId = getUserConfig().getClientUserId();
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + (-j) + " AND out = 0 ORDER BY mid DESC LIMIT 100", new Object[0]);
                while (true) {
                    if (!sQLiteCursor.next()) {
                        break;
                    }
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction.users.contains(Long.valueOf(clientUserId))) {
                            zArr[0] = true;
                            break;
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public HashMap<Long, Integer> getSmallGroupsParticipantsCount() {
        HashMap<Long, Integer> hashMap = new HashMap<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT uid, info, participants_count FROM chat_settings_v2 WHERE participants_count > 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    long longValue = sQLiteCursor.longValue(0);
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                    int intValue = sQLiteCursor.intValue(2);
                    if (byteBufferValue != null) {
                        TLRPC$ChatFull TLdeserialize = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC$TL_channelFull) {
                            hashMap.put(Long.valueOf(longValue), Integer.valueOf(intValue));
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            return hashMap;
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(10:(4:(9:(3:282|283|(36:285|287|288|289|9|10|12|13|(3:15|(4:19|20|16|17)|21)(2:213|(39:215|216|217|218|219|220|221|(9:224|225|(2:246|247)(1:227)|228|(1:230)(1:245)|(1:234)|(4:237|(1:239)|240|241)|242|222)|255|256|257|(2:260|258)|261|23|(2:25|(1:27))|(2:33|(3:36|37|34))|63|64|65|66|67|(8:71|72|73|74|75|76|68|69)|88|89|90|91|93|94|96|97|(6:162|163|164|165|(1:167)|168)(1:99)|100|101|(3:130|131|(10:133|(3:145|146|(5:148|104|(6:106|(1:108)(1:127)|109|110|111|(3:113|(2:115|116)|118))(1:129)|119|120))(1:135)|136|137|138|139|104|(0)(0)|119|120))|103|104|(0)(0)|119|120))|22|23|(0)|(4:29|31|33|(1:34))|63|64|65|66|67|(2:68|69)|88|89|90|91|93|94|96|97|(0)(0)|100|101|(0)|103|104|(0)(0)|119|120))|100|101|(0)|103|104|(0)(0)|119|120)|96|97|(0)(0))|66|67|(2:68|69)|88|89|90|91|93|94) */
    /* JADX WARN: Can't wrap try/catch for region: R(11:(21:(3:282|283|(36:285|287|288|289|9|10|12|13|(3:15|(4:19|20|16|17)|21)(2:213|(39:215|216|217|218|219|220|221|(9:224|225|(2:246|247)(1:227)|228|(1:230)(1:245)|(1:234)|(4:237|(1:239)|240|241)|242|222)|255|256|257|(2:260|258)|261|23|(2:25|(1:27))|(2:33|(3:36|37|34))|63|64|65|66|67|(8:71|72|73|74|75|76|68|69)|88|89|90|91|93|94|96|97|(6:162|163|164|165|(1:167)|168)(1:99)|100|101|(3:130|131|(10:133|(3:145|146|(5:148|104|(6:106|(1:108)(1:127)|109|110|111|(3:113|(2:115|116)|118))(1:129)|119|120))(1:135)|136|137|138|139|104|(0)(0)|119|120))|103|104|(0)(0)|119|120))|22|23|(0)|(4:29|31|33|(1:34))|63|64|65|66|67|(2:68|69)|88|89|90|91|93|94|96|97|(0)(0)|100|101|(0)|103|104|(0)(0)|119|120))|66|67|(2:68|69)|88|89|90|91|93|94|96|97|(0)(0)|100|101|(0)|103|104|(0)(0)|119|120)|12|13|(0)(0)|22|23|(0)|(0)|63|64|65) */
    /* JADX WARN: Code restructure failed: missing block: B:199:0x0368, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:201:0x036a, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x036c, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:205:0x036e, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x0373, code lost:
        r19 = r15;
        r2 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x0385, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x038f, code lost:
        r0 = e;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0294  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x02f8 A[Catch: all -> 0x034c, Exception -> 0x0357, TRY_LEAVE, TryCatch #33 {Exception -> 0x0357, all -> 0x034c, blocks: (B:140:0x0298, B:169:0x02f2, B:171:0x02f8), top: B:311:0x0298 }] */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0332  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0089  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x03d0  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x03e7  */
    /* JADX WARN: Removed duplicated region for block: B:275:0x029d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0226 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:313:0x0275 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00b4 A[Catch: all -> 0x0399, Exception -> 0x039f, TRY_ENTER, TRY_LEAVE, TryCatch #30 {Exception -> 0x039f, all -> 0x0399, blocks: (B:22:0x0080, B:34:0x00b4), top: B:317:0x0080 }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01b1 A[Catch: all -> 0x01bf, Exception -> 0x01c6, TryCatch #37 {Exception -> 0x01c6, all -> 0x01bf, blocks: (B:84:0x01b1, B:86:0x01b7, B:92:0x01cf, B:94:0x01d3, B:97:0x01da, B:99:0x01e7, B:38:0x00c7, B:70:0x0170, B:72:0x0178), top: B:303:0x00c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:92:0x01cf A[Catch: all -> 0x01bf, Exception -> 0x01c6, TryCatch #37 {Exception -> 0x01c6, all -> 0x01bf, blocks: (B:84:0x01b1, B:86:0x01b7, B:92:0x01cf, B:94:0x01d3, B:97:0x01da, B:99:0x01e7, B:38:0x00c7, B:70:0x0170, B:72:0x0178), top: B:303:0x00c7 }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01e7 A[Catch: all -> 0x01bf, Exception -> 0x01c6, TRY_LEAVE, TryCatch #37 {Exception -> 0x01c6, all -> 0x01bf, blocks: (B:84:0x01b1, B:86:0x01b7, B:92:0x01cf, B:94:0x01d3, B:97:0x01da, B:99:0x01e7, B:38:0x00c7, B:70:0x0170, B:72:0x0178), top: B:303:0x00c7 }] */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v12, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r5v13 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$ChatFull loadChatInfoInternal(long j, boolean z, boolean z2, boolean z3, int i) {
        SQLiteCursor sQLiteCursor;
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        int i2;
        boolean z4;
        TLRPC$ChatFull tLRPC$ChatFull3;
        SQLiteDatabase sQLiteDatabase;
        StringBuilder sb;
        ArrayList<Integer> arrayList;
        TLRPC$User TLdeserialize;
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        SQLiteCursor queryFinalized;
        int i3;
        boolean z5;
        TLRPC$ChatFull tLRPC$ChatFull4;
        int i4;
        ArrayList<Long> arrayList2;
        int i5;
        long j2 = j;
        ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList4 = new ArrayList<>();
        ?? r5 = 0;
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT info, pinned, online, inviter, links FROM chat_settings_v2 WHERE uid = " + j2, new Object[0]);
            try {
                try {
                    try {
                        try {
                            try {
                                try {
                                    if (queryFinalized2.next()) {
                                        try {
                                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                                            if (byteBufferValue != null) {
                                                TLRPC$ChatFull TLdeserialize2 = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                try {
                                                    byteBufferValue.reuse();
                                                    TLdeserialize2.pinned_msg_id = queryFinalized2.intValue(1);
                                                    TLdeserialize2.online_count = queryFinalized2.intValue(2);
                                                    TLdeserialize2.inviterId = queryFinalized2.longValue(3);
                                                    TLdeserialize2.invitesCount = queryFinalized2.intValue(4);
                                                    tLRPC$ChatFull2 = TLdeserialize2;
                                                    queryFinalized2.dispose();
                                                    ArrayList<Long> arrayList5 = new ArrayList<>();
                                                    if (!(tLRPC$ChatFull2 instanceof TLRPC$TL_chatFull)) {
                                                        for (int i6 = 0; i6 < tLRPC$ChatFull2.participants.participants.size(); i6++) {
                                                            try {
                                                                arrayList5.add(Long.valueOf(tLRPC$ChatFull2.participants.participants.get(i6).user_id));
                                                            } catch (Exception e) {
                                                                e = e;
                                                                sQLiteCursor = null;
                                                                i2 = 0;
                                                                z4 = false;
                                                                try {
                                                                    checkSQLException(e);
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                    return tLRPC$ChatFull2;
                                                                } catch (Throwable th) {
                                                                    th = th;
                                                                    tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                    if (sQLiteCursor != null) {
                                                                        sQLiteCursor.dispose();
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                    throw th;
                                                                }
                                                            } catch (Throwable th2) {
                                                                th = th2;
                                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                sQLiteCursor = null;
                                                                i2 = 0;
                                                                z4 = false;
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                throw th;
                                                            }
                                                        }
                                                    } else if (tLRPC$ChatFull2 instanceof TLRPC$TL_channelFull) {
                                                        try {
                                                            sQLiteDatabase = this.database;
                                                            sb = new StringBuilder();
                                                            sb.append("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = ");
                                                            arrayList = arrayList4;
                                                        } catch (Exception e2) {
                                                            e = e2;
                                                            sQLiteCursor = null;
                                                            i2 = 0;
                                                            z4 = false;
                                                            checkSQLException(e);
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                            return tLRPC$ChatFull2;
                                                        } catch (Throwable th3) {
                                                            th = th3;
                                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                                            sQLiteCursor = null;
                                                            i2 = 0;
                                                            z4 = false;
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                            throw th;
                                                        }
                                                        try {
                                                            sb.append(-j2);
                                                            sb.append(" ORDER BY cu.date DESC");
                                                            SQLiteCursor queryFinalized3 = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                                                            try {
                                                                try {
                                                                    tLRPC$ChatFull2.participants = new TLRPC$TL_chatParticipants();
                                                                    while (queryFinalized3.next()) {
                                                                        try {
                                                                            NativeByteBuffer byteBufferValue2 = queryFinalized3.byteBufferValue(r5);
                                                                            if (byteBufferValue2 != null) {
                                                                                try {
                                                                                    TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r5), r5);
                                                                                    byteBufferValue2.reuse();
                                                                                } catch (Throwable th4) {
                                                                                    th = th4;
                                                                                    arrayList4 = arrayList;
                                                                                    sQLiteCursor = queryFinalized3;
                                                                                    tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                                    i2 = 0;
                                                                                    z4 = false;
                                                                                    if (sQLiteCursor != null) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                    throw th;
                                                                                }
                                                                            } else {
                                                                                TLdeserialize = null;
                                                                            }
                                                                            NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(2);
                                                                            if (byteBufferValue3 != 0) {
                                                                                tLRPC$ChannelParticipant = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r5), r5);
                                                                                byteBufferValue3.reuse();
                                                                            } else {
                                                                                tLRPC$ChannelParticipant = null;
                                                                            }
                                                                            if (tLRPC$ChannelParticipant != null && tLRPC$ChannelParticipant.user_id == getUserConfig().clientUserId) {
                                                                                TLdeserialize = getUserConfig().getCurrentUser();
                                                                            }
                                                                            if (TLdeserialize != null && tLRPC$ChannelParticipant != null) {
                                                                                TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                                                                                if (tLRPC$UserStatus != null) {
                                                                                    tLRPC$UserStatus.expires = queryFinalized3.intValue(1);
                                                                                }
                                                                                arrayList3.add(TLdeserialize);
                                                                                tLRPC$ChannelParticipant.date = queryFinalized3.intValue(3);
                                                                                TLRPC$TL_chatChannelParticipant tLRPC$TL_chatChannelParticipant = new TLRPC$TL_chatChannelParticipant();
                                                                                tLRPC$TL_chatChannelParticipant.user_id = MessageObject.getPeerId(tLRPC$ChannelParticipant.peer);
                                                                                tLRPC$TL_chatChannelParticipant.date = tLRPC$ChannelParticipant.date;
                                                                                tLRPC$TL_chatChannelParticipant.inviter_id = tLRPC$ChannelParticipant.inviter_id;
                                                                                tLRPC$TL_chatChannelParticipant.channelParticipant = tLRPC$ChannelParticipant;
                                                                                tLRPC$ChatFull2.participants.participants.add(tLRPC$TL_chatChannelParticipant);
                                                                            }
                                                                        } catch (Exception e3) {
                                                                            checkSQLException(e3);
                                                                        }
                                                                        j2 = j;
                                                                        r5 = 0;
                                                                    }
                                                                    queryFinalized3.dispose();
                                                                    for (int i7 = 0; i7 < tLRPC$ChatFull2.bot_info.size(); i7++) {
                                                                        arrayList5.add(Long.valueOf(tLRPC$ChatFull2.bot_info.get(i7).user_id));
                                                                    }
                                                                    if (tLRPC$ChatFull2 != null) {
                                                                        long j3 = tLRPC$ChatFull2.inviterId;
                                                                        if (j3 != 0) {
                                                                            arrayList5.add(Long.valueOf(j3));
                                                                        }
                                                                    }
                                                                    if (tLRPC$ChatFull2 != null && (arrayList2 = tLRPC$ChatFull2.recent_requesters) != null && !arrayList2.isEmpty()) {
                                                                        for (i5 = 0; i5 < Math.min(3, tLRPC$ChatFull2.recent_requesters.size()); i5++) {
                                                                            ArrayList<Long> arrayList6 = tLRPC$ChatFull2.recent_requesters;
                                                                            arrayList5.add(arrayList6.get((arrayList6.size() - 1) - i5));
                                                                        }
                                                                    }
                                                                    getUsersInternal(arrayList5, arrayList3);
                                                                    SQLiteDatabase database = getMessagesStorage().getDatabase();
                                                                    Locale locale = Locale.US;
                                                                    Object[] objArr = new Object[1];
                                                                    long j4 = -j;
                                                                    int i8 = 0;
                                                                    objArr[0] = Long.valueOf(j4);
                                                                    queryFinalized = database.queryFinalized(String.format(locale, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", objArr), new Object[0]);
                                                                    while (queryFinalized.next()) {
                                                                        try {
                                                                            try {
                                                                                int intValue = queryFinalized.intValue(i8);
                                                                                arrayList4 = arrayList;
                                                                                try {
                                                                                    arrayList4.add(Integer.valueOf(intValue));
                                                                                    hashMap.put(Integer.valueOf(intValue), null);
                                                                                    arrayList = arrayList4;
                                                                                    i8 = 0;
                                                                                } catch (Exception e4) {
                                                                                    e = e4;
                                                                                    sQLiteCursor = queryFinalized;
                                                                                    i2 = 0;
                                                                                    z4 = false;
                                                                                    checkSQLException(e);
                                                                                    if (sQLiteCursor != null) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                    return tLRPC$ChatFull2;
                                                                                } catch (Throwable th5) {
                                                                                    th = th5;
                                                                                    sQLiteCursor = queryFinalized;
                                                                                    tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                                    i2 = 0;
                                                                                    z4 = false;
                                                                                    if (sQLiteCursor != null) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                    throw th;
                                                                                }
                                                                            } catch (Exception e5) {
                                                                                e = e5;
                                                                                arrayList4 = arrayList;
                                                                            } catch (Throwable th6) {
                                                                                th = th6;
                                                                                arrayList4 = arrayList;
                                                                            }
                                                                        } catch (Exception e6) {
                                                                            e = e6;
                                                                            arrayList4 = arrayList;
                                                                        } catch (Throwable th7) {
                                                                            th = th7;
                                                                            arrayList4 = arrayList;
                                                                        }
                                                                    }
                                                                    arrayList4 = arrayList;
                                                                    queryFinalized.dispose();
                                                                    sQLiteCursor = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j4, new Object[0]);
                                                                    if (sQLiteCursor.next()) {
                                                                        try {
                                                                            int intValue2 = sQLiteCursor.intValue(0);
                                                                            try {
                                                                                i3 = intValue2;
                                                                                z5 = sQLiteCursor.intValue(1) != 0;
                                                                            } catch (Exception e7) {
                                                                                e = e7;
                                                                                i2 = intValue2;
                                                                                z4 = false;
                                                                                checkSQLException(e);
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                return tLRPC$ChatFull2;
                                                                            } catch (Throwable th8) {
                                                                                th = th8;
                                                                                i2 = intValue2;
                                                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                                z4 = false;
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                throw th;
                                                                            }
                                                                        } catch (Exception e8) {
                                                                            e = e8;
                                                                            i2 = 0;
                                                                            z4 = false;
                                                                            checkSQLException(e);
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                            return tLRPC$ChatFull2;
                                                                        } catch (Throwable th9) {
                                                                            th = th9;
                                                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                            i2 = 0;
                                                                            z4 = false;
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        i3 = 0;
                                                                        z5 = false;
                                                                    }
                                                                    sQLiteCursor.dispose();
                                                                    if (tLRPC$ChatFull2 != null) {
                                                                        try {
                                                                            if (tLRPC$ChatFull2.pinned_msg_id != 0) {
                                                                                try {
                                                                                    if (arrayList4.isEmpty()) {
                                                                                        i4 = 0;
                                                                                    } else {
                                                                                        try {
                                                                                            i4 = 0;
                                                                                            if (tLRPC$ChatFull2.pinned_msg_id <= arrayList4.get(0).intValue()) {
                                                                                                sQLiteCursor = null;
                                                                                                if (arrayList4.isEmpty()) {
                                                                                                    tLRPC$ChatFull4 = tLRPC$ChatFull2;
                                                                                                } else {
                                                                                                    tLRPC$ChatFull4 = tLRPC$ChatFull2;
                                                                                                    try {
                                                                                                        ArrayList<MessageObject> loadPinnedMessages = getMediaDataController().loadPinnedMessages(j4, z ? j : 0L, arrayList4, false);
                                                                                                        if (loadPinnedMessages != null) {
                                                                                                            int size = loadPinnedMessages.size();
                                                                                                            while (i4 < size) {
                                                                                                                MessageObject messageObject = loadPinnedMessages.get(i4);
                                                                                                                hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                                                                                                i4++;
                                                                                                            }
                                                                                                        }
                                                                                                    } catch (Exception e9) {
                                                                                                        e = e9;
                                                                                                        tLRPC$ChatFull2 = tLRPC$ChatFull4;
                                                                                                        i2 = i3;
                                                                                                        z4 = z5;
                                                                                                        checkSQLException(e);
                                                                                                        if (sQLiteCursor != null) {
                                                                                                        }
                                                                                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                                        return tLRPC$ChatFull2;
                                                                                                    } catch (Throwable th10) {
                                                                                                        th = th10;
                                                                                                        tLRPC$ChatFull = tLRPC$ChatFull4;
                                                                                                        i2 = i3;
                                                                                                        z4 = z5;
                                                                                                        if (sQLiteCursor != null) {
                                                                                                        }
                                                                                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                                        throw th;
                                                                                                    }
                                                                                                }
                                                                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull4, arrayList3, true, z2, z3, arrayList4, hashMap, i3, z5);
                                                                                                return tLRPC$ChatFull4;
                                                                                            }
                                                                                        } catch (Exception e10) {
                                                                                            e = e10;
                                                                                            i2 = i3;
                                                                                            z4 = z5;
                                                                                            sQLiteCursor = null;
                                                                                            checkSQLException(e);
                                                                                            if (sQLiteCursor != null) {
                                                                                            }
                                                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                            return tLRPC$ChatFull2;
                                                                                        } catch (Throwable th11) {
                                                                                            th = th11;
                                                                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                                            i2 = i3;
                                                                                            z4 = z5;
                                                                                            sQLiteCursor = null;
                                                                                            if (sQLiteCursor != null) {
                                                                                            }
                                                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    hashMap.put(Integer.valueOf(tLRPC$ChatFull2.pinned_msg_id), null);
                                                                                    if (arrayList4.isEmpty()) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull4, arrayList3, true, z2, z3, arrayList4, hashMap, i3, z5);
                                                                                    return tLRPC$ChatFull4;
                                                                                } catch (Exception e11) {
                                                                                    e = e11;
                                                                                    i2 = i3;
                                                                                    z4 = z5;
                                                                                    checkSQLException(e);
                                                                                    if (sQLiteCursor != null) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                    return tLRPC$ChatFull2;
                                                                                } catch (Throwable th12) {
                                                                                    th = th12;
                                                                                    tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                                    i2 = i3;
                                                                                    z4 = z5;
                                                                                    if (sQLiteCursor != null) {
                                                                                    }
                                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                                    throw th;
                                                                                }
                                                                                arrayList4.clear();
                                                                                arrayList4.add(Integer.valueOf(tLRPC$ChatFull2.pinned_msg_id));
                                                                                sQLiteCursor = null;
                                                                            }
                                                                        } catch (Exception e12) {
                                                                            e = e12;
                                                                            sQLiteCursor = null;
                                                                        } catch (Throwable th13) {
                                                                            th = th13;
                                                                            sQLiteCursor = null;
                                                                        }
                                                                    }
                                                                    sQLiteCursor = null;
                                                                    i4 = 0;
                                                                    if (arrayList4.isEmpty()) {
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull4, arrayList3, true, z2, z3, arrayList4, hashMap, i3, z5);
                                                                    return tLRPC$ChatFull4;
                                                                } catch (Exception e13) {
                                                                    e = e13;
                                                                    arrayList4 = arrayList;
                                                                    sQLiteCursor = queryFinalized3;
                                                                    i2 = 0;
                                                                    z4 = false;
                                                                    checkSQLException(e);
                                                                    if (sQLiteCursor != null) {
                                                                        sQLiteCursor.dispose();
                                                                    }
                                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                                    return tLRPC$ChatFull2;
                                                                }
                                                            } catch (Throwable th14) {
                                                                th = th14;
                                                                arrayList4 = arrayList;
                                                                sQLiteCursor = queryFinalized3;
                                                                tLRPC$ChatFull = tLRPC$ChatFull2;
                                                                i2 = 0;
                                                                z4 = false;
                                                            }
                                                        } catch (Exception e14) {
                                                            e = e14;
                                                            arrayList4 = arrayList;
                                                            sQLiteCursor = null;
                                                            i2 = 0;
                                                            z4 = false;
                                                            checkSQLException(e);
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                            return tLRPC$ChatFull2;
                                                        } catch (Throwable th15) {
                                                            th = th15;
                                                            arrayList4 = arrayList;
                                                            tLRPC$ChatFull = tLRPC$ChatFull2;
                                                            sQLiteCursor = null;
                                                            i2 = 0;
                                                            z4 = false;
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                            throw th;
                                                        }
                                                    }
                                                    arrayList = arrayList4;
                                                    if (tLRPC$ChatFull2 != null) {
                                                    }
                                                    if (tLRPC$ChatFull2 != null) {
                                                        while (i5 < Math.min(3, tLRPC$ChatFull2.recent_requesters.size())) {
                                                        }
                                                    }
                                                    getUsersInternal(arrayList5, arrayList3);
                                                    SQLiteDatabase database2 = getMessagesStorage().getDatabase();
                                                    Locale locale2 = Locale.US;
                                                    Object[] objArr2 = new Object[1];
                                                    long j42 = -j;
                                                    int i82 = 0;
                                                    objArr2[0] = Long.valueOf(j42);
                                                    queryFinalized = database2.queryFinalized(String.format(locale2, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", objArr2), new Object[0]);
                                                    while (queryFinalized.next()) {
                                                    }
                                                    arrayList4 = arrayList;
                                                    queryFinalized.dispose();
                                                    sQLiteCursor = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j42, new Object[0]);
                                                    if (sQLiteCursor.next()) {
                                                    }
                                                    sQLiteCursor.dispose();
                                                    if (tLRPC$ChatFull2 != null) {
                                                    }
                                                    sQLiteCursor = null;
                                                    i4 = 0;
                                                    if (arrayList4.isEmpty()) {
                                                    }
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull4, arrayList3, true, z2, z3, arrayList4, hashMap, i3, z5);
                                                    return tLRPC$ChatFull4;
                                                } catch (Exception e15) {
                                                    e = e15;
                                                    sQLiteCursor = queryFinalized2;
                                                    tLRPC$ChatFull2 = TLdeserialize2;
                                                    i2 = 0;
                                                    z4 = false;
                                                    checkSQLException(e);
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                    return tLRPC$ChatFull2;
                                                } catch (Throwable th16) {
                                                    th = th16;
                                                    sQLiteCursor = queryFinalized2;
                                                    tLRPC$ChatFull = TLdeserialize2;
                                                    i2 = 0;
                                                    z4 = false;
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                                    throw th;
                                                }
                                            }
                                        } catch (Exception e16) {
                                            e = e16;
                                            sQLiteCursor = queryFinalized2;
                                            i2 = 0;
                                            z4 = false;
                                            tLRPC$ChatFull2 = null;
                                            checkSQLException(e);
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                            return tLRPC$ChatFull2;
                                        } catch (Throwable th17) {
                                            th = th17;
                                            sQLiteCursor = queryFinalized2;
                                            tLRPC$ChatFull = null;
                                        }
                                    }
                                    sQLiteCursor.dispose();
                                    if (tLRPC$ChatFull2 != null) {
                                    }
                                    sQLiteCursor = null;
                                    i4 = 0;
                                    if (arrayList4.isEmpty()) {
                                    }
                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull4, arrayList3, true, z2, z3, arrayList4, hashMap, i3, z5);
                                    return tLRPC$ChatFull4;
                                } catch (Exception e17) {
                                    e = e17;
                                } catch (Throwable th18) {
                                    th = th18;
                                    tLRPC$ChatFull4 = tLRPC$ChatFull2;
                                }
                                if (sQLiteCursor.next()) {
                                }
                            } catch (Exception e18) {
                                e = e18;
                                i2 = 0;
                                z4 = false;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                }
                                getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                return tLRPC$ChatFull2;
                            } catch (Throwable th19) {
                                th = th19;
                                tLRPC$ChatFull3 = tLRPC$ChatFull2;
                                tLRPC$ChatFull = tLRPC$ChatFull3;
                                i2 = 0;
                                z4 = false;
                                if (sQLiteCursor != null) {
                                }
                                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                                throw th;
                            }
                            int i822 = 0;
                            objArr2[0] = Long.valueOf(j42);
                            queryFinalized = database2.queryFinalized(String.format(locale2, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", objArr2), new Object[0]);
                            while (queryFinalized.next()) {
                            }
                            arrayList4 = arrayList;
                            queryFinalized.dispose();
                            sQLiteCursor = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j42, new Object[0]);
                        } catch (Exception e19) {
                            e = e19;
                            arrayList4 = arrayList;
                            sQLiteCursor = null;
                            i2 = 0;
                            z4 = false;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                            return tLRPC$ChatFull2;
                        } catch (Throwable th20) {
                            th = th20;
                            arrayList4 = arrayList;
                            tLRPC$ChatFull3 = tLRPC$ChatFull2;
                            sQLiteCursor = null;
                            tLRPC$ChatFull = tLRPC$ChatFull3;
                            i2 = 0;
                            z4 = false;
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                            throw th;
                        }
                        ArrayList<Long> arrayList52 = new ArrayList<>();
                        if (!(tLRPC$ChatFull2 instanceof TLRPC$TL_chatFull)) {
                        }
                        arrayList = arrayList4;
                        if (tLRPC$ChatFull2 != null) {
                        }
                        if (tLRPC$ChatFull2 != null) {
                        }
                        getUsersInternal(arrayList52, arrayList3);
                        SQLiteDatabase database22 = getMessagesStorage().getDatabase();
                        Locale locale22 = Locale.US;
                        Object[] objArr22 = new Object[1];
                        long j422 = -j;
                    } catch (Exception e20) {
                        e = e20;
                    } catch (Throwable th21) {
                        th = th21;
                        tLRPC$ChatFull3 = tLRPC$ChatFull2;
                        sQLiteCursor = null;
                    }
                    queryFinalized2.dispose();
                } catch (Exception e21) {
                    e = e21;
                    sQLiteCursor = queryFinalized2;
                    i2 = 0;
                    z4 = false;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList3, true, z2, z3, arrayList4, hashMap, i2, z4);
                    return tLRPC$ChatFull2;
                } catch (Throwable th22) {
                    th = th22;
                    tLRPC$ChatFull3 = tLRPC$ChatFull2;
                    sQLiteCursor = queryFinalized2;
                }
                tLRPC$ChatFull2 = null;
            } catch (Exception e22) {
                e = e22;
                tLRPC$ChatFull2 = null;
            } catch (Throwable th23) {
                th = th23;
                tLRPC$ChatFull = null;
                sQLiteCursor = queryFinalized2;
            }
        } catch (Exception e23) {
            e = e23;
            sQLiteCursor = null;
            tLRPC$ChatFull2 = null;
        } catch (Throwable th24) {
            th = th24;
            sQLiteCursor = null;
            tLRPC$ChatFull = null;
        }
    }

    public TLRPC$ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3) {
        return loadChatInfo(j, z, countDownLatch, z2, z3, 0);
    }

    public TLRPC$ChatFull loadChatInfo(final long j, final boolean z, final CountDownLatch countDownLatch, final boolean z2, final boolean z3, final int i) {
        final TLRPC$ChatFull[] tLRPC$ChatFullArr = new TLRPC$ChatFull[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda234
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChatInfo$138(tLRPC$ChatFullArr, j, z, z2, z3, i, countDownLatch);
            }
        });
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return tLRPC$ChatFullArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChatInfo$138(TLRPC$ChatFull[] tLRPC$ChatFullArr, long j, boolean z, boolean z2, boolean z3, int i, CountDownLatch countDownLatch) {
        tLRPC$ChatFullArr[0] = loadChatInfoInternal(j, z, z2, z3, i);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    public TLRPC$ChatFull loadChatInfoInQueue(long j, boolean z, boolean z2, boolean z3, int i) {
        return loadChatInfoInternal(j, z, z2, z3, i);
    }

    public void processPendingRead(final long j, final int i, final int i2, final int i3) {
        final int i4 = this.lastSavedDate;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processPendingRead$139(j, i, i3, i4, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01ab  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x01b0  */
    /* JADX WARN: Removed duplicated region for block: B:119:0x01be  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x01c3  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:153:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processPendingRead$139(long j, int i, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int intValue;
        int i5;
        int intValue2;
        int intValue3;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement executeFast;
        int i6 = i4;
        long j2 = 0;
        try {
            int i7 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
            try {
                if (queryFinalized.next()) {
                    try {
                        intValue = queryFinalized.intValue(0);
                        i5 = intValue;
                        intValue2 = queryFinalized.intValue(1);
                        j2 = queryFinalized.longValue(2);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 == null) {
                            }
                            sQLiteDatabase2.commitTransaction();
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                } else {
                    intValue = 0;
                    i5 = 0;
                    intValue2 = 0;
                }
                queryFinalized.dispose();
                this.database.beginTransaction();
                if (!DialogObject.isEncryptedDialog(j)) {
                    try {
                        i6 = Math.max(intValue2, i);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                        try {
                            executeFast2.requery();
                            executeFast2.bindLong(1, j);
                            executeFast2.bindInteger(2, i6);
                            executeFast2.step();
                            executeFast2.dispose();
                            sQLitePreparedStatement3 = executeFast2;
                            if (i6 >= j2) {
                                sQLiteCursor = null;
                            } else {
                                try {
                                    sQLiteCursor = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                    try {
                                        int intValue4 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) + i2 : 0;
                                        sQLiteCursor.dispose();
                                        i7 = Math.max(0, intValue - intValue4);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLitePreparedStatement = sQLitePreparedStatement3;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th3) {
                                        th = th3;
                                        sQLitePreparedStatement = sQLitePreparedStatement3;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                    sQLiteCursor = null;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                } catch (Throwable th4) {
                                    th = th4;
                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                    sQLiteCursor = null;
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                        } catch (Exception e4) {
                            e = e4;
                            sQLitePreparedStatement3 = executeFast2;
                        } catch (Throwable th5) {
                            th = th5;
                            sQLitePreparedStatement3 = executeFast2;
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindInteger(2, i6);
                        executeFast.step();
                        executeFast.dispose();
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                        executeFast3.requery();
                        executeFast3.bindLong(1, j);
                        executeFast3.bindInteger(2, i3);
                        executeFast3.step();
                        executeFast3.dispose();
                    } catch (Exception e6) {
                        e = e6;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th7) {
                        th = th7;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                    try {
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindLong(1, j);
                        sQLitePreparedStatement.bindInteger(2, i6);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                        if (i6 <= j2) {
                            sQLiteCursor = null;
                        } else {
                            sQLiteCursor = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            try {
                                if (sQLiteCursor.next()) {
                                    try {
                                        intValue3 = sQLiteCursor.intValue(0) + i2;
                                    } catch (Exception e7) {
                                        e = e7;
                                        sQLitePreparedStatement = null;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th8) {
                                        th = th8;
                                        sQLitePreparedStatement = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    intValue3 = 0;
                                }
                                sQLiteCursor.dispose();
                                i7 = Math.max(0, intValue - intValue3);
                            } catch (Exception e8) {
                                e = e8;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th9) {
                                th = th9;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        }
                    } catch (Exception e9) {
                        e = e9;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                            return;
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th10) {
                        th = th10;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                }
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
                executeFast4.requery();
                executeFast4.bindInteger(1, i7);
                executeFast4.bindInteger(2, i6);
                executeFast4.bindLong(3, j);
                executeFast4.step();
                executeFast4.dispose();
                this.database.commitTransaction();
                if (i5 == 0 || i7 != 0 || isForum(j)) {
                    sQLitePreparedStatement2 = null;
                } else {
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, i7);
                    sQLitePreparedStatement2 = null;
                    updateFiltersReadCounter(longSparseIntArray, null, true);
                }
                updateWidgets(j);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    return;
                }
            } catch (Exception e10) {
                e = e10;
                sQLitePreparedStatement = null;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th11) {
                th = th11;
                sQLitePreparedStatement = null;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e11) {
            e = e11;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th12) {
            th = th12;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
        sQLiteDatabase2.commitTransaction();
    }

    public void putContacts(ArrayList<TLRPC$TL_contact> arrayList, final boolean z) {
        if (!arrayList.isEmpty() || z) {
            final ArrayList arrayList2 = new ArrayList(arrayList);
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda231
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putContacts$140(z, arrayList2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0063  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0070  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0077  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putContacts$140(boolean z, ArrayList arrayList) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (z) {
            try {
                try {
                    this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                    sQLiteDatabase.commitTransaction();
                }
                throw th;
            }
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            try {
                TLRPC$TL_contact tLRPC$TL_contact = (TLRPC$TL_contact) arrayList.get(i);
                executeFast.requery();
                int i2 = 1;
                executeFast.bindLong(1, tLRPC$TL_contact.user_id);
                if (!tLRPC$TL_contact.mutual) {
                    i2 = 0;
                }
                executeFast.bindInteger(2, i2);
                executeFast.step();
            } catch (Exception e3) {
                sQLitePreparedStatement = executeFast;
                e = e3;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th3) {
                sQLitePreparedStatement = executeFast;
                th = th3;
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                throw th;
            }
        }
        executeFast.dispose();
        this.database.commitTransaction();
        sQLiteDatabase2 = this.database;
        if (sQLiteDatabase2 == null) {
            return;
        }
        sQLiteDatabase2.commitTransaction();
    }

    public void deleteContacts(final ArrayList<Long> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda169
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteContacts$141(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteContacts$141(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void applyPhoneBookUpdates(final String str, final String str2) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda152
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$applyPhoneBookUpdates$142(str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyPhoneBookUpdates$142(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", str)).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", str2)).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putCachedPhoneBook(final HashMap<String, ContactsController.Contact> hashMap, final boolean z, boolean z2) {
        if (hashMap != null) {
            if (!hashMap.isEmpty() || z || z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putCachedPhoneBook$143(hashMap, z);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:46:0x012b  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:82:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putCachedPhoneBook$143(HashMap hashMap, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
            try {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
                }
                this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
                this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
                try {
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLitePreparedStatement = null;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
        try {
            Iterator it = hashMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                if (!contact.phones.isEmpty() && !contact.shortPhones.isEmpty()) {
                    executeFast.requery();
                    executeFast.bindString(1, contact.key);
                    executeFast.bindInteger(2, contact.contact_id);
                    executeFast.bindString(3, contact.first_name);
                    executeFast.bindString(4, contact.last_name);
                    executeFast.bindInteger(5, contact.imported);
                    executeFast.step();
                    for (int i = 0; i < contact.phones.size(); i++) {
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindString(1, contact.key);
                        sQLitePreparedStatement.bindString(2, contact.phones.get(i));
                        sQLitePreparedStatement.bindString(3, contact.shortPhones.get(i));
                        sQLitePreparedStatement.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                        sQLitePreparedStatement.step();
                    }
                }
            }
            executeFast.dispose();
            try {
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                if (z) {
                    this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                    this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                    getCachedPhoneBook(false);
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase == null) {
                    return;
                }
            } catch (Exception e3) {
                e = e3;
                checkSQLException(e);
                if (sQLitePreparedStatement2 != null) {
                    sQLitePreparedStatement2.dispose();
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase == null) {
                    return;
                }
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement2 = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement2 = executeFast;
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement2.dispose();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase.commitTransaction();
    }

    public void getCachedPhoneBook(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda225
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getCachedPhoneBook$144(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x013a, code lost:
        if (r10 != null) goto L75;
     */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00f9 A[Catch: all -> 0x0132, TRY_LEAVE, TryCatch #2 {all -> 0x0132, blocks: (B:51:0x00e9, B:53:0x00f9), top: B:132:0x00e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x012a  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0144 A[Catch: all -> 0x01ee, Exception -> 0x01f0, TRY_ENTER, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x015e A[Catch: all -> 0x01ee, Exception -> 0x01f0, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /* JADX WARN: Removed duplicated region for block: B:81:0x016f A[Catch: all -> 0x01ee, Exception -> 0x01f0, TryCatch #0 {Exception -> 0x01f0, blocks: (B:76:0x0144, B:79:0x0169, B:81:0x016f, B:83:0x017b, B:85:0x019d, B:86:0x019f, B:88:0x01a3, B:89:0x01a5, B:90:0x01a8, B:93:0x01b0, B:96:0x01bc, B:98:0x01c2, B:100:0x01c8, B:101:0x01cc, B:103:0x01ea, B:77:0x015e), top: B:128:0x0142, outer: #8 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getCachedPhoneBook$144(boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        int i2;
        int i3;
        HashMap<String, ContactsController.Contact> hashMap;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor2;
        boolean next;
        int i4 = 6;
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'", new Object[0]);
            try {
                next = queryFinalized2.next();
                queryFinalized2.dispose();
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = sQLiteCursor2;
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
        }
        if (next) {
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1", new Object[0]);
            int min = queryFinalized3.next() ? Math.min(5000, queryFinalized3.intValue(0)) : 16;
            queryFinalized3.dispose();
            SparseArray<ContactsController.Contact> sparseArray = new SparseArray<>(min);
            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1", new Object[0]);
            while (queryFinalized4.next()) {
                try {
                    int intValue = queryFinalized4.intValue(0);
                    ContactsController.Contact contact = sparseArray.get(intValue);
                    if (contact == null) {
                        contact = new ContactsController.Contact();
                        contact.first_name = queryFinalized4.stringValue(1);
                        contact.last_name = queryFinalized4.stringValue(2);
                        contact.imported = queryFinalized4.intValue(i4);
                        if (contact.first_name == null) {
                            contact.first_name = "";
                        }
                        if (contact.last_name == null) {
                            contact.last_name = "";
                        }
                        contact.contact_id = intValue;
                        sparseArray.put(intValue, contact);
                    }
                    String stringValue = queryFinalized4.stringValue(3);
                    if (stringValue != null) {
                        contact.phones.add(stringValue);
                        String stringValue2 = queryFinalized4.stringValue(4);
                        if (stringValue2 != null) {
                            if (stringValue2.length() == 8 && stringValue.length() != 8) {
                                stringValue2 = PhoneFormat.stripExceptNumbers(stringValue);
                            }
                            contact.shortPhones.add(stringValue2);
                            contact.phoneDeleted.add(Integer.valueOf(queryFinalized4.intValue(5)));
                            contact.phoneTypes.add("");
                            if (sparseArray.size() == 5000) {
                                break;
                            }
                            i4 = 6;
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized4;
                    try {
                        checkSQLException(th);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        try {
                            sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
                            if (sQLiteCursor.next()) {
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            i = 0;
                        }
                        sQLiteCursor.dispose();
                        hashMap = new HashMap<>(i2);
                        try {
                            try {
                                if (i3 == 0) {
                                }
                                sQLiteCursor = queryFinalized;
                                while (sQLiteCursor.next()) {
                                }
                                sQLiteCursor.dispose();
                            } catch (Exception e) {
                                hashMap.clear();
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                            }
                            getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
                        } catch (Throwable th5) {
                            throw th5;
                        }
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            }
            queryFinalized4.dispose();
            getContactsController().migratePhoneBookToV7(sparseArray);
            return;
        }
        sQLiteCursor = null;
        sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
        if (sQLiteCursor.next()) {
            i = 0;
            i2 = 16;
            i3 = 0;
        } else {
            i = sQLiteCursor.intValue(0);
            try {
                i2 = Math.min(5000, i);
                i3 = i > 5000 ? i - 5000 : 0;
                try {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(this.currentAccount + " current cached contacts count = " + i);
                    }
                } catch (Throwable th6) {
                    th = th6;
                    try {
                        checkSQLException(th);
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                i2 = 16;
                i3 = 0;
                checkSQLException(th);
            }
        }
        sQLiteCursor.dispose();
        hashMap = new HashMap<>(i2);
        if (i3 == 0) {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0," + i, new Object[0]);
        } else {
            queryFinalized = this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new Object[0]);
        }
        sQLiteCursor = queryFinalized;
        while (sQLiteCursor.next()) {
            String stringValue3 = sQLiteCursor.stringValue(0);
            ContactsController.Contact contact2 = hashMap.get(stringValue3);
            if (contact2 == null) {
                contact2 = new ContactsController.Contact();
                contact2.contact_id = sQLiteCursor.intValue(1);
                contact2.first_name = sQLiteCursor.stringValue(2);
                contact2.last_name = sQLiteCursor.stringValue(3);
                contact2.imported = sQLiteCursor.intValue(7);
                if (contact2.first_name == null) {
                    contact2.first_name = "";
                }
                if (contact2.last_name == null) {
                    contact2.last_name = "";
                }
                hashMap.put(stringValue3, contact2);
            }
            String stringValue4 = sQLiteCursor.stringValue(4);
            if (stringValue4 != null) {
                contact2.phones.add(stringValue4);
                String stringValue5 = sQLiteCursor.stringValue(5);
                if (stringValue5 != null) {
                    if (stringValue5.length() == 8 && stringValue4.length() != 8) {
                        stringValue5 = PhoneFormat.stripExceptNumbers(stringValue4);
                    }
                    contact2.shortPhones.add(stringValue5);
                    contact2.phoneDeleted.add(Integer.valueOf(sQLiteCursor.intValue(6)));
                    contact2.phoneTypes.add("");
                    if (hashMap.size() == 5000) {
                        break;
                    }
                }
            }
        }
        sQLiteCursor.dispose();
        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda21
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getContacts$145();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Not initialized variable reg: 4, insn: 0x0072: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]), block:B:29:0x0072 */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0075  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getContacts$145() {
        SQLiteCursor sQLiteCursor;
        Exception e;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC$TL_contact> arrayList = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
                try {
                    ArrayList<Long> arrayList3 = new ArrayList<>();
                    while (sQLiteCursor.next()) {
                        TLRPC$TL_contact tLRPC$TL_contact = new TLRPC$TL_contact();
                        tLRPC$TL_contact.user_id = sQLiteCursor.intValue(0);
                        tLRPC$TL_contact.mutual = sQLiteCursor.intValue(1) == 1;
                        arrayList.add(tLRPC$TL_contact);
                        arrayList3.add(Long.valueOf(tLRPC$TL_contact.user_id));
                    }
                    sQLiteCursor.dispose();
                    if (!arrayList3.isEmpty()) {
                        getUsersInternal(arrayList3, arrayList2);
                    }
                } catch (Exception e2) {
                    e = e2;
                    arrayList.clear();
                    arrayList2.clear();
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor3 = sQLiteCursor2;
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th;
            }
        } catch (Exception e3) {
            sQLiteCursor = null;
            e = e3;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor3 != null) {
            }
            throw th;
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    public void getUnsentMessages(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnsentMessages$146(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:175:0x0462  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x046a  */
    /* JADX WARN: Removed duplicated region for block: B:212:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r8v11 */
    /* JADX WARN: Type inference failed for: r8v20 */
    /* JADX WARN: Type inference failed for: r8v3 */
    /* JADX WARN: Type inference failed for: r8v4, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r8v5 */
    /* JADX WARN: Type inference failed for: r8v6, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getUnsentMessages$146(int i) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        SQLiteCursor sQLiteCursor2;
        Exception exc;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$Message> arrayList;
        ArrayList arrayList2;
        ArrayList<TLRPC$EncryptedChat> arrayList3;
        ArrayList<Long> arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        ArrayList<TLRPC$User> arrayList7;
        ArrayList<TLRPC$Chat> arrayList8;
        ArrayList<TLRPC$User> arrayList9;
        ArrayList<TLRPC$Chat> arrayList10;
        ArrayList<TLRPC$User> arrayList11;
        ArrayList<TLRPC$Chat> arrayList12;
        try {
            try {
                SparseArray sparseArray = new SparseArray();
                arrayList = new ArrayList<>();
                arrayList2 = new ArrayList();
                ArrayList<TLRPC$User> arrayList13 = new ArrayList<>();
                ArrayList<TLRPC$Chat> arrayList14 = new ArrayList<>();
                arrayList3 = new ArrayList<>();
                arrayList4 = new ArrayList<>();
                arrayList5 = new ArrayList();
                arrayList6 = new ArrayList();
                ArrayList arrayList15 = new ArrayList();
                boolean z = false;
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                            TLdeserialize.send_state = queryFinalized.intValue(2);
                            arrayList11 = arrayList13;
                            arrayList12 = arrayList14;
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                                MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                                TLdeserialize.id = queryFinalized.intValue(3);
                                TLdeserialize.date = queryFinalized.intValue(4);
                                if (!queryFinalized.isNull(5)) {
                                    TLdeserialize.random_id = queryFinalized.longValue(5);
                                }
                                TLdeserialize.dialog_id = queryFinalized.longValue(6);
                                TLdeserialize.seq_in = queryFinalized.intValue(7);
                                TLdeserialize.seq_out = queryFinalized.intValue(8);
                                TLdeserialize.ttl = queryFinalized.intValue(9);
                                if (TLdeserialize.media instanceof TLRPC$TL_messageMediaPaidMedia) {
                                    arrayList15.add(TLdeserialize);
                                } else {
                                    arrayList.add(TLdeserialize);
                                }
                                sparseArray.put(TLdeserialize.id, TLdeserialize);
                                if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(TLdeserialize.dialog_id);
                                    if (!arrayList6.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList6.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (DialogObject.isUserDialog(TLdeserialize.dialog_id)) {
                                    if (!arrayList4.contains(Long.valueOf(TLdeserialize.dialog_id))) {
                                        arrayList4.add(Long.valueOf(TLdeserialize.dialog_id));
                                    }
                                } else if (!arrayList5.contains(Long.valueOf(-TLdeserialize.dialog_id))) {
                                    arrayList5.add(Long.valueOf(-TLdeserialize.dialog_id));
                                }
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, null);
                                if (TLdeserialize.send_state != 3 && ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0)) {
                                    TLdeserialize.send_state = 0;
                                }
                            }
                        } else {
                            arrayList11 = arrayList13;
                            arrayList12 = arrayList14;
                        }
                        arrayList13 = arrayList11;
                        arrayList14 = arrayList12;
                        z = false;
                    } catch (Exception e) {
                        exc = e;
                    }
                }
                arrayList7 = arrayList13;
                arrayList8 = arrayList14;
                queryFinalized.dispose();
                if (!arrayList15.isEmpty()) {
                    try {
                        Iterator it = arrayList15.iterator();
                        while (it.hasNext()) {
                            TLRPC$Message tLRPC$Message = (TLRPC$Message) it.next();
                            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + tLRPC$Message.dialog_id + " AND mid = " + tLRPC$Message.id).stepThis().dispose();
                        }
                    } catch (Exception e2) {
                        exc = e2;
                        sQLiteCursor3 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor3 == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor2 = null;
                        if (sQLiteCursor2 != null) {
                        }
                        throw th;
                    }
                }
                ?? r8 = 0;
                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
                while (queryFinalized2.next()) {
                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(r8);
                    if (byteBufferValue2 != null) {
                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r8), r8);
                        TLdeserialize2.send_state = queryFinalized2.intValue(1);
                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                        byteBufferValue2.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                            TLdeserialize2.id = queryFinalized2.intValue(2);
                            TLdeserialize2.date = queryFinalized2.intValue(3);
                            if (!queryFinalized2.isNull(4)) {
                                TLdeserialize2.random_id = queryFinalized2.longValue(4);
                            }
                            TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                            TLdeserialize2.ttl = queryFinalized2.intValue(6);
                            arrayList2.add(TLdeserialize2);
                            sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                            if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                                int encryptedChatId2 = DialogObject.getEncryptedChatId(TLdeserialize2.dialog_id);
                                if (!arrayList6.contains(Integer.valueOf(encryptedChatId2))) {
                                    arrayList6.add(Integer.valueOf(encryptedChatId2));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize2.dialog_id)) {
                                if (!arrayList4.contains(Long.valueOf(TLdeserialize2.dialog_id))) {
                                    arrayList4.add(Long.valueOf(TLdeserialize2.dialog_id));
                                }
                            } else if (!arrayList5.contains(Long.valueOf(-TLdeserialize2.dialog_id))) {
                                arrayList5.add(Long.valueOf(-TLdeserialize2.dialog_id));
                            }
                            addUsersAndChatsFromMessage(TLdeserialize2, arrayList4, arrayList5, null);
                            if (TLdeserialize2.send_state != 3 && ((TLdeserialize2.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize2) && !DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) || TLdeserialize2.id > 0)) {
                                TLdeserialize2.send_state = 0;
                            }
                            r8 = 0;
                        }
                    }
                    r8 = 0;
                }
                queryFinalized2.dispose();
                getUserConfig().getClientUserId();
                ?? r82 = 0;
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, m.topic_id, m.ttl FROM quick_replies_messages as m WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY mid DESC", new Object[0]);
                while (queryFinalized3.next()) {
                    NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(r82);
                    if (byteBufferValue3 != null) {
                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r82), r82);
                        TLdeserialize3.send_state = queryFinalized3.intValue(1);
                        TLdeserialize3.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                        byteBufferValue3.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize3.id) < 0) {
                            TLdeserialize3.id = queryFinalized3.intValue(2);
                            int intValue = queryFinalized3.intValue(4);
                            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT name FROM business_replies WHERE topic_id = ?", Integer.valueOf(intValue));
                            String stringValue = queryFinalized4.next() ? queryFinalized4.stringValue(1) : null;
                            queryFinalized4.dispose();
                            if (stringValue == null) {
                                this.database.executeFast("DELETE FROM quick_replies_messages WHERE mid = " + TLdeserialize3.id + " AND topic_id = " + intValue).stepThis().dispose();
                            } else {
                                TLRPC$TL_inputQuickReplyShortcut tLRPC$TL_inputQuickReplyShortcut = new TLRPC$TL_inputQuickReplyShortcut();
                                tLRPC$TL_inputQuickReplyShortcut.shortcut = stringValue;
                                TLdeserialize3.quick_reply_shortcut = tLRPC$TL_inputQuickReplyShortcut;
                                TLdeserialize3.quick_reply_shortcut_id = intValue;
                                if (intValue != 0) {
                                    TLdeserialize3.flags |= 1073741824;
                                }
                                TLdeserialize3.date = queryFinalized3.intValue(3);
                                TLdeserialize3.ttl = queryFinalized3.intValue(5);
                                arrayList2.add(TLdeserialize3);
                                sparseArray.put(TLdeserialize3.id, TLdeserialize3);
                                if (DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) {
                                    int encryptedChatId3 = DialogObject.getEncryptedChatId(TLdeserialize3.dialog_id);
                                    if (!arrayList6.contains(Integer.valueOf(encryptedChatId3))) {
                                        arrayList6.add(Integer.valueOf(encryptedChatId3));
                                    }
                                } else if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    if (!arrayList4.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                        arrayList4.add(Long.valueOf(TLdeserialize3.dialog_id));
                                    }
                                } else if (!arrayList5.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                    arrayList5.add(Long.valueOf(-TLdeserialize3.dialog_id));
                                }
                                addUsersAndChatsFromMessage(TLdeserialize3, arrayList4, arrayList5, null);
                                if (TLdeserialize3.send_state != 3 && ((TLdeserialize3.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize3) && !DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) || TLdeserialize3.id > 0)) {
                                    TLdeserialize3.send_state = 0;
                                }
                            }
                            r82 = 0;
                        }
                    }
                    r82 = 0;
                }
                sQLiteCursor = null;
                queryFinalized3.dispose();
            } catch (Throwable th3) {
                th = th3;
            }
            try {
                if (!arrayList6.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList6), arrayList3, arrayList4);
                }
                if (arrayList4.isEmpty()) {
                    arrayList9 = arrayList7;
                } else {
                    arrayList9 = arrayList7;
                    getUsersInternal(arrayList4, arrayList9);
                }
                if (arrayList5.isEmpty()) {
                    arrayList10 = arrayList8;
                } else {
                    StringBuilder sb = new StringBuilder();
                    for (int i2 = 0; i2 < arrayList5.size(); i2++) {
                        Long l = (Long) arrayList5.get(i2);
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(l);
                    }
                    arrayList10 = arrayList8;
                    getChatsInternal(sb.toString(), arrayList10);
                }
                getSendMessagesHelper().processUnsentMessages(arrayList, arrayList2, arrayList9, arrayList10, arrayList3);
            } catch (Exception e3) {
                e = e3;
                exc = e;
                sQLiteCursor3 = sQLiteCursor;
                checkSQLException(exc);
                if (sQLiteCursor3 == null) {
                    sQLiteCursor3.dispose();
                }
            } catch (Throwable th4) {
                th = th4;
                th = th;
                sQLiteCursor2 = sQLiteCursor;
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
    }

    public boolean checkMessageByRandomId(final long j) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageByRandomId$147(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x002a, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageByRandomId$147(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT random_id FROM randoms_v2 WHERE random_id = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean checkMessageId(final long j, final int i) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageId$148(j, i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageId$148(long j, int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getUnreadMention(final long j, final long j2, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda105
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnreadMention$150(j2, j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnreadMention$150(long j, long j2, final IntCallback intCallback) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (j != 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2)), new Object[0]);
                }
                sQLiteCursor = queryFinalized;
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getMessagesCount(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda123
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessagesCount$152(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesCount$152(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:379:0x0921
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    public java.lang.Runnable getMessagesInternal(long r57, long r59, int r61, int r62, int r63, int r64, int r65, int r66, int r67, long r68, int r70, boolean r71, boolean r72, org.telegram.messenger.MessageLoaderLogger r73) {
        /*
            Method dump skipped, instructions count: 8996
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, int, long, int, boolean, boolean, org.telegram.messenger.MessageLoaderLogger):java.lang.Runnable");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$getMessagesInternal$153(TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
        int i;
        int i2;
        int i3 = tLRPC$Message.id;
        if (i3 > 0 && (i2 = tLRPC$Message2.id) > 0) {
            if (i3 > i2) {
                return -1;
            }
            return i3 < i2 ? 1 : 0;
        } else if (i3 < 0 && (i = tLRPC$Message2.id) < 0) {
            if (i3 < i) {
                return -1;
            }
            return i3 > i ? 1 : 0;
        } else {
            int i4 = tLRPC$Message.date;
            int i5 = tLRPC$Message2.date;
            if (i4 > i5) {
                return -1;
            }
            return i4 < i5 ? 1 : 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesInternal$154(TLRPC$TL_messages_messages tLRPC$TL_messages_messages, int i, long j, long j2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z, int i11, long j3, int i12, boolean z2, int i13, boolean z3, boolean z4, MessageLoaderLogger messageLoaderLogger) {
        getMessagesController().processLoadedMessages(tLRPC$TL_messages_messages, i, j, j2, i2, i3, i4, true, i5, i6, i7, i8, i9, i10, z, i11, j3, i12, z2, i13, z3, z4, messageLoaderLogger);
    }

    public void getAnimatedEmoji(String str, ArrayList<TLRPC$Document> arrayList) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM animated_emoji WHERE document_id IN (%s)", str), new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    try {
                        TLRPC$Document TLdeserialize = TLRPC$Document.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (TLdeserialize != null && TLdeserialize.id != 0) {
                            arrayList.add(TLdeserialize);
                        }
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                    if (byteBufferValue != null) {
                        byteBufferValue.reuse();
                    }
                }
            } catch (Throwable th) {
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (SQLiteException e2) {
            e2.printStackTrace();
            if (sQLiteCursor == null) {
                return;
            }
        }
        sQLiteCursor.dispose();
    }

    public void getMessages(final long j, final long j2, boolean z, final int i, final int i2, final int i3, final int i4, final int i5, final int i6, final int i7, final long j3, final int i8, final boolean z2, final boolean z3, final MessageLoaderLogger messageLoaderLogger) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda190
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessages$156(messageLoaderLogger, j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z2, z3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessages$156(final MessageLoaderLogger messageLoaderLogger, long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, long j3, int i8, boolean z, boolean z2) {
        if (messageLoaderLogger != null) {
            messageLoaderLogger.logStorageQueuePost();
        }
        final Runnable messagesInternal = getMessagesInternal(j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z, z2, messageLoaderLogger);
        if (messageLoaderLogger != null) {
            messageLoaderLogger.logStorageProccessing();
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.lambda$getMessages$155(MessageLoaderLogger.this, messagesInternal);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getMessages$155(MessageLoaderLogger messageLoaderLogger, Runnable runnable) {
        if (messageLoaderLogger != null) {
            messageLoaderLogger.logStageQueuePost();
        }
        runnable.run();
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda17
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearSentMedia$157();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearSentMedia$157() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public Object[] getSentFile(final String str, final int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSentFile$158(str, i, objArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSentFile$158(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", MD5, Integer.valueOf(i)), new Object[0]);
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                        TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC$TL_messageMediaDocument) {
                            objArr[0] = ((TLRPC$TL_messageMediaDocument) TLdeserialize).document;
                        } else if (TLdeserialize instanceof TLRPC$TL_messageMediaPhoto) {
                            objArr[0] = ((TLRPC$TL_messageMediaPhoto) TLdeserialize).photo;
                        }
                        if (objArr[0] != null) {
                            objArr[1] = queryFinalized.stringValue(1);
                        }
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    private void updateWidgets(long j) {
        ArrayList<Long> arrayList = new ArrayList<>();
        arrayList.add(Long.valueOf(j));
        updateWidgets(arrayList);
    }

    private void updateWidgets(ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        AppWidgetManager appWidgetManager = null;
        try {
            TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT DISTINCT id FROM shortcut_widget WHERE did IN(%s,-1)", TextUtils.join(",", arrayList)), new Object[0]);
            while (queryFinalized.next()) {
                if (appWidgetManager == null) {
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                appWidgetManager.notifyAppWidgetViewDataChanged(queryFinalized.intValue(0), R.id.list_view);
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putWidgetDialogs(final int i, final ArrayList<TopicKey> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda61
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWidgetDialogs$159(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWidgetDialogs$159(int i, ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO shortcut_widget VALUES(?, ?, ?)");
            if (arrayList.isEmpty()) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, -1L);
                executeFast.bindInteger(3, 0);
                executeFast.step();
            } else {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long j = ((TopicKey) arrayList.get(i2)).dialogId;
                    executeFast.requery();
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, j);
                    executeFast.bindInteger(3, i2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearWidgetDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearWidgetDialogs$160(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearWidgetDialogs$160(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWidgetDialogIds(final int i, final int i2, final ArrayList<Long> arrayList, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final boolean z) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda68
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogIds$161(i, arrayList, arrayList2, arrayList3, z, i2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogIds$161(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, boolean z, int i2, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue)) {
                                    arrayList4.add(Long.valueOf(longValue));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue));
                                }
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.isEmpty()) {
                    if (i2 == 0) {
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = 0 ORDER BY pinned DESC, date DESC LIMIT 0,10", new Object[0]);
                        while (queryFinalized2.next()) {
                            long longValue2 = queryFinalized2.longValue(0);
                            if (!DialogObject.isFolderDialogId(longValue2)) {
                                arrayList.add(Long.valueOf(longValue2));
                                if (arrayList2 != null && arrayList3 != null) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        arrayList4.add(Long.valueOf(longValue2));
                                    } else {
                                        arrayList5.add(Long.valueOf(-longValue2));
                                    }
                                }
                            }
                        }
                        queryFinalized2.dispose();
                    } else {
                        SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                        while (queryFinalized3.next()) {
                            long longValue3 = queryFinalized3.longValue(0);
                            arrayList.add(Long.valueOf(longValue3));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue3)) {
                                    arrayList4.add(Long.valueOf(longValue3));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue3));
                                }
                            }
                        }
                        queryFinalized3.dispose();
                    }
                }
                if (arrayList2 != null && arrayList3 != null) {
                    if (!arrayList5.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList5), arrayList3);
                    }
                    if (!arrayList4.isEmpty()) {
                        getUsersInternal(arrayList4, arrayList2);
                    }
                }
            } catch (Exception e2) {
                e = e2;
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void getWidgetDialogs(final int i, final int i2, final ArrayList<Long> arrayList, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<TLRPC$Message> longSparseArray2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda65
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogs$162(i, arrayList, i2, longSparseArray, longSparseArray2, arrayList3, arrayList2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogs$162(int i, ArrayList arrayList, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList arrayList2, ArrayList arrayList3, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        boolean z;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (DialogObject.isUserDialog(longValue)) {
                                arrayList4.add(Long.valueOf(longValue));
                            } else {
                                arrayList5.add(Long.valueOf(-longValue));
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized2.dispose();
                if (arrayList.isEmpty() && i2 == 1) {
                    SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                    while (queryFinalized3.next()) {
                        long longValue2 = queryFinalized3.longValue(0);
                        arrayList.add(Long.valueOf(longValue2));
                        if (DialogObject.isUserDialog(longValue2)) {
                            arrayList4.add(Long.valueOf(longValue2));
                        } else {
                            arrayList5.add(Long.valueOf(-longValue2));
                        }
                    }
                    queryFinalized3.dispose();
                }
                if (arrayList.isEmpty()) {
                    queryFinalized = this.database.queryFinalized("SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.folder_id = 0 ORDER BY d.pinned DESC, d.date DESC LIMIT 0,10", new Object[0]);
                    z = true;
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                    z = false;
                }
                while (queryFinalized.next()) {
                    long longValue3 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue3)) {
                        if (z) {
                            arrayList.add(Long.valueOf(longValue3));
                        }
                        TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog.id = longValue3;
                        tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                        tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                        tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                        longSparseArray.put(tLRPC$TL_dialog.id, tLRPC$TL_dialog);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(4);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                            TLdeserialize.id = queryFinalized.intValue(6);
                            TLdeserialize.send_state = queryFinalized.intValue(7);
                            int intValue = queryFinalized.intValue(8);
                            if (intValue != 0) {
                                tLRPC$TL_dialog.last_message_date = intValue;
                            }
                            long j = tLRPC$TL_dialog.id;
                            TLdeserialize.dialog_id = j;
                            longSparseArray2.put(j, TLdeserialize);
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, null);
                        }
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.size() > longSparseArray.size()) {
                    int size = arrayList.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        long longValue4 = ((Long) arrayList.get(i3)).longValue();
                        if (longSparseArray.get(((Long) arrayList.get(i3)).longValue()) == null) {
                            TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog2.id = longValue4;
                            longSparseArray.put(longValue4, tLRPC$TL_dialog2);
                            if (DialogObject.isChatDialog(longValue4)) {
                                long j2 = -longValue4;
                                if (arrayList5.contains(Long.valueOf(j2))) {
                                    arrayList5.add(Long.valueOf(j2));
                                }
                            } else if (arrayList4.contains(Long.valueOf(longValue4))) {
                                arrayList4.add(Long.valueOf(longValue4));
                            }
                        }
                    }
                }
                if (!arrayList5.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList5), arrayList2);
                }
                if (!arrayList4.isEmpty()) {
                    getUsersInternal(arrayList4, arrayList3);
                }
            } catch (Exception e2) {
                e = e2;
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void putSentFile(final String str, final TLObject tLObject, final int i, final String str2) {
        if (str == null || tLObject == null || str2 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda153
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putSentFile$163(str, tLObject, i, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putSentFile$163(String str, TLObject tLObject, int i, String str2) {
        TLRPC$MessageMedia tLRPC$MessageMedia;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    if (tLObject instanceof TLRPC$Photo) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaPhoto();
                        tLRPC$MessageMedia.photo = (TLRPC$Photo) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else if (tLObject instanceof TLRPC$Document) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaDocument();
                        tLRPC$MessageMedia.document = (TLRPC$Document) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else {
                        tLRPC$MessageMedia = null;
                    }
                    if (tLRPC$MessageMedia == null) {
                        return;
                    }
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageMedia.getObjectSize());
                    tLRPC$MessageMedia.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindString(1, MD5);
                    sQLitePreparedStatement.bindInteger(2, i);
                    sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(4, str2);
                    sQLitePreparedStatement.step();
                    nativeByteBuffer.reuse();
                }
                if (sQLitePreparedStatement == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatSeq(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final boolean z) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatSeq$164(tLRPC$EncryptedChat, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatSeq$164(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(3, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                if (z && tLRPC$EncryptedChat.in_seq_no != 0) {
                    long encryptedChatId = DialogObject.getEncryptedChatId(tLRPC$EncryptedChat.id);
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM messages_v2 WHERE mid IN (SELECT m.mid FROM messages_v2 as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d) AND uid = %d", Long.valueOf(encryptedChatId), Integer.valueOf(tLRPC$EncryptedChat.in_seq_no), Long.valueOf(encryptedChatId))).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatTTL(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda209
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatTTL$165(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatTTL$165(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatLayer(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda207
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatLayer$166(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatLayer$166(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda208
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChat$167(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChat$167(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                byte[] bArr2 = tLRPC$EncryptedChat.key_hash;
                if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat.auth_key) != null) {
                    tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr3 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
                byte[] bArr4 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
                byte[] bArr5 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
                byte[] bArr6 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                byte[] bArr7 = tLRPC$EncryptedChat.a_or_b;
                if (bArr7 != null) {
                    nativeByteBuffer2.writeBytes(bArr7);
                }
                byte[] bArr8 = tLRPC$EncryptedChat.auth_key;
                if (bArr8 != null) {
                    nativeByteBuffer3.writeBytes(bArr8);
                }
                byte[] bArr9 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr9 != null) {
                    nativeByteBuffer4.writeBytes(bArr9);
                }
                byte[] bArr10 = tLRPC$EncryptedChat.key_hash;
                if (bArr10 != null) {
                    nativeByteBuffer5.writeBytes(bArr10);
                }
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
                sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
                sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
                sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
                sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
                sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
                sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindLong(15, tLRPC$EncryptedChat.admin_id);
                sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void isDialogHasTopMessage(final long j, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda111
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isDialogHasTopMessage$168(j, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x0032, code lost:
        if (r1 == null) goto L10;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$isDialogHasTopMessage$168(long j, Runnable runnable) {
        boolean z = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    if (sQLiteCursor.intValue(0) != 0) {
                        z = true;
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            if (z) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean hasAuthMessage(final int i) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasAuthMessage$169(i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0028, code lost:
        if (r0 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$hasAuthMessage$169(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", Integer.valueOf(i)), new Object[0]);
                zArr[0] = sQLiteCursor.next();
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public void getEncryptedChat(final long j, final CountDownLatch countDownLatch, final ArrayList<TLObject> arrayList) {
        if (countDownLatch == null || arrayList == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda118
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getEncryptedChat$170(j, arrayList, countDownLatch);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getEncryptedChat$170(long j, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            try {
                ArrayList<Long> arrayList2 = new ArrayList<>();
                ArrayList<TLRPC$EncryptedChat> arrayList3 = new ArrayList<>();
                getEncryptedChatsInternal("" + j, arrayList3, arrayList2);
                if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                    ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList4);
                    if (!arrayList4.isEmpty()) {
                        arrayList.add(arrayList3.get(0));
                        arrayList.add(arrayList4.get(0));
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    public void putEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final TLRPC$User tLRPC$User, final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda210
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putEncryptedChat$171(tLRPC$EncryptedChat, tLRPC$User, tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0193  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putEncryptedChat$171(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        try {
            byte[] bArr2 = tLRPC$EncryptedChat.key_hash;
            if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat.auth_key) != null) {
                tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr3 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
                byte[] bArr4 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
                byte[] bArr5 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
                byte[] bArr6 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$EncryptedChat.id);
                executeFast.bindLong(2, tLRPC$User.id);
                executeFast.bindString(3, formatUserSearchName(tLRPC$User));
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                byte[] bArr7 = tLRPC$EncryptedChat.a_or_b;
                if (bArr7 != null) {
                    nativeByteBuffer2.writeBytes(bArr7);
                }
                byte[] bArr8 = tLRPC$EncryptedChat.auth_key;
                if (bArr8 != null) {
                    nativeByteBuffer3.writeBytes(bArr8);
                }
                byte[] bArr9 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr9 != null) {
                    nativeByteBuffer4.writeBytes(bArr9);
                }
                byte[] bArr10 = tLRPC$EncryptedChat.key_hash;
                if (bArr10 != null) {
                    nativeByteBuffer5.writeBytes(bArr10);
                }
                executeFast.bindByteBuffer(5, nativeByteBuffer2);
                executeFast.bindByteBuffer(6, nativeByteBuffer3);
                executeFast.bindInteger(7, tLRPC$EncryptedChat.ttl);
                executeFast.bindInteger(8, tLRPC$EncryptedChat.layer);
                executeFast.bindInteger(9, tLRPC$EncryptedChat.seq_in);
                executeFast.bindInteger(10, tLRPC$EncryptedChat.seq_out);
                executeFast.bindInteger(11, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                executeFast.bindLong(12, tLRPC$EncryptedChat.exchange_id);
                executeFast.bindInteger(13, tLRPC$EncryptedChat.key_create_date);
                executeFast.bindLong(14, tLRPC$EncryptedChat.future_key_fingerprint);
                executeFast.bindByteBuffer(15, nativeByteBuffer4);
                executeFast.bindByteBuffer(16, nativeByteBuffer5);
                executeFast.bindInteger(17, tLRPC$EncryptedChat.in_seq_no);
                executeFast.bindLong(18, tLRPC$EncryptedChat.admin_id);
                executeFast.bindInteger(19, tLRPC$EncryptedChat.mtproto_seq);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                if (tLRPC$Dialog != null) {
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    executeFast2.bindLong(1, tLRPC$Dialog.id);
                    executeFast2.bindInteger(2, tLRPC$Dialog.last_message_date);
                    executeFast2.bindInteger(3, tLRPC$Dialog.unread_count);
                    executeFast2.bindInteger(4, tLRPC$Dialog.top_message);
                    executeFast2.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                    executeFast2.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                    executeFast2.bindInteger(7, 0);
                    executeFast2.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                    executeFast2.bindInteger(9, tLRPC$Dialog.pts);
                    executeFast2.bindInteger(10, 0);
                    executeFast2.bindInteger(11, tLRPC$Dialog.pinnedNum);
                    executeFast2.bindInteger(12, tLRPC$Dialog.flags);
                    executeFast2.bindInteger(13, tLRPC$Dialog.folder_id);
                    executeFast2.bindNull(14);
                    executeFast2.bindInteger(15, tLRPC$Dialog.unread_reactions_count);
                    executeFast2.bindInteger(16, 0);
                    executeFast2.bindInteger(17, tLRPC$Dialog.ttl_period);
                    executeFast2.step();
                    executeFast2.dispose();
                }
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = sQLitePreparedStatement3;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = sQLitePreparedStatement2;
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    private String formatUserSearchName(TLRPC$User tLRPC$User) {
        StringBuilder sb = new StringBuilder();
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            sb.append(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(tLRPC$User.last_name);
        }
        sb.append(";;;");
        String str3 = tLRPC$User.username;
        if (str3 != null && str3.length() > 0) {
            sb.append(tLRPC$User.username);
        } else {
            ArrayList<TLRPC$TL_username> arrayList = tLRPC$User.usernames;
            if (arrayList != null && arrayList.size() > 0) {
                for (int i = 0; i < tLRPC$User.usernames.size(); i++) {
                    TLRPC$TL_username tLRPC$TL_username = tLRPC$User.usernames.get(i);
                    if (tLRPC$TL_username != null && tLRPC$TL_username.active) {
                        sb.append(tLRPC$TL_username.username);
                        sb.append(";;");
                    }
                }
            }
        }
        return sb.toString().toLowerCase();
    }

    public boolean containsLocalDialog(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Boolean[] boolArr = {Boolean.FALSE};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$containsLocalDialog$172(j, boolArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return boolArr[0].booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x002c, code lost:
        if (r0 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$containsLocalDialog$172(long j, Boolean[] boolArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT date FROM dialogs WHERE did = " + j, new Object[0]);
                boolArr[0] = Boolean.valueOf(sQLiteCursor.next());
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    private void putUsersInternal(List<TLRPC$User> list) throws Exception {
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
        for (int i = 0; i < list.size(); i++) {
            TLRPC$User tLRPC$User = list.get(i);
            if (tLRPC$User != null) {
                if (tLRPC$User.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", Long.valueOf(tLRPC$User.id)), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    String str = tLRPC$User.username;
                                    if (str != null) {
                                        TLdeserialize.username = str;
                                        TLdeserialize.flags |= 8;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -9;
                                    }
                                    if (tLRPC$User.apply_min_photo) {
                                        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                                        if (tLRPC$UserProfilePhoto != null) {
                                            TLdeserialize.photo = tLRPC$UserProfilePhoto;
                                            TLdeserialize.flags |= 32;
                                        } else {
                                            TLdeserialize.photo = null;
                                            TLdeserialize.flags &= -33;
                                        }
                                    }
                                    tLRPC$User = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            checkSQLException(e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$User.getObjectSize());
                tLRPC$User.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$User.id);
                executeFast.bindString(2, formatUserSearchName(tLRPC$User));
                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                if (tLRPC$UserStatus != null) {
                    if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1000 : -100;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1001 : -101;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1002 : -102;
                    }
                    executeFast.bindInteger(3, tLRPC$UserStatus.expires);
                } else {
                    executeFast.bindInteger(3, 0);
                }
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
        }
        executeFast.dispose();
    }

    public void updateChatDefaultBannedRights(final long j, final TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final int i) {
        if (tLRPC$TL_chatBannedRights == null || j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda91
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatDefaultBannedRights$173(j, i, tLRPC$TL_chatBannedRights);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v10 */
    /* JADX WARN: Type inference failed for: r8v15, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r8v5, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    public /* synthetic */ void lambda$updateChatDefaultBannedRights$173(long j, int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights) {
        SQLiteCursor queryFinalized;
        TLRPC$Chat tLRPC$Chat;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(j)), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
            j = 0;
        } catch (Throwable th2) {
            th = th2;
            j = 0;
        }
        try {
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$Chat = null;
            } else {
                tLRPC$Chat = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$Chat != null) {
                if (tLRPC$Chat.default_banned_rights == null || i >= tLRPC$Chat.version) {
                    tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights;
                    tLRPC$Chat.flags |= 262144;
                    tLRPC$Chat.version = i;
                    j = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                    try {
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                        tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        j.bindByteBuffer(1, nativeByteBuffer);
                        j.bindLong(2, tLRPC$Chat.id);
                        j.step();
                        nativeByteBuffer.reuse();
                        j.dispose();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (j != 0) {
                            j.dispose();
                        }
                    }
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
            j = 0;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            j = 0;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            if (j != 0) {
                j.dispose();
            }
            throw th;
        }
    }

    private void putChatsInternal(List<TLRPC$Chat> list) throws Exception {
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
        for (int i = 0; i < list.size(); i++) {
            TLRPC$Chat tLRPC$Chat = list.get(i);
            if (tLRPC$Chat.min) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(tLRPC$Chat.id)), new Object[0]);
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            if (TLdeserialize != null) {
                                TLdeserialize.title = tLRPC$Chat.title;
                                TLdeserialize.photo = tLRPC$Chat.photo;
                                TLdeserialize.broadcast = tLRPC$Chat.broadcast;
                                TLdeserialize.verified = tLRPC$Chat.verified;
                                TLdeserialize.megagroup = tLRPC$Chat.megagroup;
                                TLdeserialize.call_not_empty = tLRPC$Chat.call_not_empty;
                                TLdeserialize.call_active = tLRPC$Chat.call_active;
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat.default_banned_rights;
                                if (tLRPC$TL_chatBannedRights != null) {
                                    TLdeserialize.default_banned_rights = tLRPC$TL_chatBannedRights;
                                    TLdeserialize.flags |= 262144;
                                }
                                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                                if (tLRPC$TL_chatAdminRights != null) {
                                    TLdeserialize.admin_rights = tLRPC$TL_chatAdminRights;
                                    TLdeserialize.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                }
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                                if (tLRPC$TL_chatBannedRights2 != null) {
                                    TLdeserialize.banned_rights = tLRPC$TL_chatBannedRights2;
                                    TLdeserialize.flags |= LiteMode.FLAG_CHAT_SCALE;
                                }
                                String str = tLRPC$Chat.username;
                                if (str != null) {
                                    TLdeserialize.username = str;
                                    TLdeserialize.flags |= 64;
                                } else {
                                    TLdeserialize.username = null;
                                    TLdeserialize.flags &= -65;
                                }
                                int i2 = tLRPC$Chat.participants_count;
                                if (i2 > 0) {
                                    TLdeserialize.participants_count = i2;
                                }
                                tLRPC$Chat = TLdeserialize;
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                queryFinalized.dispose();
            }
            executeFast.requery();
            tLRPC$Chat.flags |= 131072;
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
            tLRPC$Chat.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, tLRPC$Chat.id);
            String str2 = tLRPC$Chat.title;
            if (str2 != null) {
                executeFast.bindString(2, str2.toLowerCase());
            } else {
                executeFast.bindString(2, "");
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            nativeByteBuffer.reuse();
            this.dialogIsForum.put(-tLRPC$Chat.id, tLRPC$Chat.forum ? 1 : 0);
        }
        executeFast.dispose();
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC$User> arrayList2) throws Exception {
        getUsersInternal(arrayList, arrayList2, false);
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC$User> arrayList2, boolean z) throws Exception {
        if (arrayList == null || arrayList.isEmpty() || arrayList2 == null) {
            return;
        }
        if (arrayList.size() > 50) {
            int i = 0;
            while (i < arrayList.size()) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(arrayList.get(i).longValue()));
                if (user != null) {
                    arrayList2.add(user);
                    arrayList.remove(i);
                    i--;
                }
                i++;
            }
        }
        if (arrayList.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                        if (tLRPC$UserStatus != null) {
                            tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList2.add(TLdeserialize);
                        if (arrayList.size() > 50 && z) {
                            getMessagesController().putUser(TLdeserialize, true, false);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getUsersInternal(HashSet<Long> hashSet, ArrayList<TLRPC$User> arrayList) throws Exception {
        if (hashSet == null || hashSet.isEmpty() || arrayList == null) {
            return;
        }
        if (hashSet.size() > 50) {
            Iterator<Long> it = hashSet.iterator();
            while (it.hasNext()) {
                TLRPC$User user = getMessagesController().getUser(it.next());
                if (user != null) {
                    arrayList.add(user);
                    it.remove();
                }
            }
        }
        if (hashSet.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", hashSet)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                        if (tLRPC$UserStatus != null) {
                            tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList) throws Exception {
        getChatsInternal(str, arrayList, true);
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList, boolean z) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false, z);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC$EncryptedChat> arrayList, ArrayList<Long> arrayList2) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$EncryptedChat TLdeserialize = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        long longValue = queryFinalized.longValue(1);
                        TLdeserialize.user_id = longValue;
                        if (arrayList2 != null && !arrayList2.contains(Long.valueOf(longValue))) {
                            arrayList2.add(Long.valueOf(TLdeserialize.user_id));
                        }
                        TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                        TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                        TLdeserialize.ttl = queryFinalized.intValue(4);
                        TLdeserialize.layer = queryFinalized.intValue(5);
                        TLdeserialize.seq_in = queryFinalized.intValue(6);
                        TLdeserialize.seq_out = queryFinalized.intValue(7);
                        int intValue = queryFinalized.intValue(8);
                        TLdeserialize.key_use_count_in = (short) (intValue >> 16);
                        TLdeserialize.key_use_count_out = (short) intValue;
                        TLdeserialize.exchange_id = queryFinalized.longValue(9);
                        TLdeserialize.key_create_date = queryFinalized.intValue(10);
                        TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                        TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                        TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                        TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                        long longValue2 = queryFinalized.longValue(15);
                        if (longValue2 != 0) {
                            TLdeserialize.admin_id = longValue2;
                        }
                        TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal */
    public void lambda$putUsersAndChats$174(List<TLRPC$User> list, List<TLRPC$Chat> list2, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        try {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                }
            }
            putUsersInternal(list);
            putChatsInternal(list2);
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
                return;
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th) {
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            throw th;
        }
    }

    public void putUsersAndChats(final List<TLRPC$User> list, final List<TLRPC$Chat> list2, final boolean z, boolean z2) {
        if (list == null || !list.isEmpty() || list2 == null || !list2.isEmpty()) {
            if (z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda189
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putUsersAndChats$174(list, list2, z);
                    }
                });
            } else {
                lambda$putUsersAndChats$174(list, list2, z);
            }
        }
    }

    public void removeFromDownloadQueue(final long j, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda227
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeFromDownloadQueue$175(z, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFromDownloadQueue$175(boolean z, int i, long j) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    Locale locale = Locale.US;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT min(date) FROM download_queue WHERE type = %d", Integer.valueOf(i)), new Object[0]);
                    try {
                        int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                        queryFinalized.dispose();
                        if (intValue != -1) {
                            this.database.executeFast(String.format(locale, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } else {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x006f  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x007e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void deleteFromDownloadQueue(final ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        Throwable th;
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (z) {
            try {
                try {
                    this.database.beginTransaction();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (z || (sQLiteDatabase2 = this.database) == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                if (z && (sQLiteDatabase = this.database) != null) {
                    sQLiteDatabase.commitTransaction();
                }
                throw th;
            }
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair<Long, Integer> pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(2, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda165
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteFromDownloadQueue$176(arrayList);
                }
            });
            if (!z || (sQLiteDatabase2 = this.database) == null) {
                return;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                return;
            }
            return;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                sQLiteDatabase.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFromDownloadQueue$176(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    public void clearDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearDownloadQueue$177(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDownloadQueue$177(int i) {
        try {
            if (i == 0) {
                this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", Integer.valueOf(i))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDownloadQueue$179(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$179(final int i) {
        int i2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                final ArrayList arrayList = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        DownloadObject downloadObject = new DownloadObject();
                        downloadObject.type = queryFinalized.intValue(1);
                        downloadObject.id = queryFinalized.longValue(0);
                        downloadObject.parent = queryFinalized.stringValue(3);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(2);
                        if (byteBufferValue != null) {
                            TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            TLRPC$Document tLRPC$Document = TLdeserialize.document;
                            if (tLRPC$Document != null) {
                                downloadObject.object = tLRPC$Document;
                                downloadObject.secret = (MessageObject.isVideoDocument(tLRPC$Document) || MessageObject.isVoiceDocument(TLdeserialize.document) || MessageObject.isRoundVideoDocument(TLdeserialize.document)) && (((i2 = TLdeserialize.ttl_seconds) > 0 && i2 <= 60) || i2 == Integer.MAX_VALUE);
                            } else {
                                TLRPC$Photo tLRPC$Photo = TLdeserialize.photo;
                                if (tLRPC$Photo != null) {
                                    downloadObject.object = tLRPC$Photo;
                                    int i3 = TLdeserialize.ttl_seconds;
                                    downloadObject.secret = (i3 > 0 && i3 <= 60) || i3 == Integer.MAX_VALUE;
                                }
                            }
                            downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) != 0;
                        }
                        arrayList.add(downloadObject);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda62
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDownloadQueue$178(i, arrayList);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$178(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    public int getMessageMediaType(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message instanceof TLRPC$TL_message_secret) {
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isGifMessage(tLRPC$Message) || MessageObject.isVoiceMessage(tLRPC$Message) || MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message)) {
                int i = tLRPC$Message.ttl;
                return (i <= 0 || i > 60) ? 0 : 1;
            }
            return -1;
        }
        if (tLRPC$Message instanceof TLRPC$TL_message) {
            TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
            if (((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) && tLRPC$MessageMedia.ttl_seconds != 0) {
                return 1;
            }
        }
        return ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) ? 0 : -1;
    }

    public void putWebPages(final LongSparseArray<TLRPC$WebPage> longSparseArray) {
        if (isEmpty(longSparseArray)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWebPages$181(longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:131:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01a8  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01ad  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x01b2  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x01c0  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01c5  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x01d1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWebPages$181(LongSparseArray longSparseArray) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        final ArrayList arrayList;
        try {
            arrayList = new ArrayList();
            int size = longSparseArray.size();
            int i = 0;
            int i2 = 0;
            while (true) {
                int i3 = 2;
                if (i2 >= size) {
                    break;
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized("SELECT mid, uid FROM webpage_pending_v2 WHERE id = " + longSparseArray.keyAt(i2), new Object[i]);
                try {
                    LongSparseArray longSparseArray2 = new LongSparseArray();
                    while (queryFinalized.next()) {
                        long longValue = queryFinalized.longValue(1);
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized.intValue(i)));
                    }
                    queryFinalized.dispose();
                    if (!longSparseArray2.isEmpty()) {
                        int size2 = longSparseArray2.size();
                        int i4 = 0;
                        while (i4 < size2) {
                            long keyAt = longSparseArray2.keyAt(i4);
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            Locale locale = Locale.US;
                            Object[] objArr = new Object[i3];
                            objArr[0] = TextUtils.join(",", (ArrayList) longSparseArray2.valueAt(i4));
                            objArr[1] = Long.valueOf(keyAt);
                            sQLiteCursor = sQLiteDatabase4.queryFinalized(String.format(locale, "SELECT mid, data FROM messages_v2 WHERE mid IN (%s) AND uid = %d", objArr), new Object[0]);
                            while (sQLiteCursor.next()) {
                                try {
                                    int intValue = sQLiteCursor.intValue(0);
                                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue != null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                            TLdeserialize.id = intValue;
                                            tLRPC$MessageMedia.webpage = (TLRPC$WebPage) longSparseArray.valueAt(i2);
                                            arrayList.add(TLdeserialize);
                                        }
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    try {
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th) {
                                        th = th;
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            sQLiteCursor.dispose();
                            i4++;
                            i3 = 2;
                        }
                    }
                    i2++;
                    i = 0;
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
        if (arrayList.isEmpty()) {
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
                return;
            }
            return;
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE media_v4 SET data = ? WHERE mid = ? AND uid = ?");
            for (int i5 = 0; i5 < arrayList.size(); i5++) {
                try {
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i5);
                    MessageObject.normalizeFlags(tLRPC$Message);
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                    tLRPC$Message.serializeToStream(nativeByteBuffer);
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, tLRPC$Message.id);
                    executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    executeFast.step();
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindInteger(2, tLRPC$Message.id);
                    sQLitePreparedStatement.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    sQLitePreparedStatement.step();
                    nativeByteBuffer.reuse();
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    throw th;
                }
            }
            executeFast.dispose();
        } catch (Exception e5) {
            e = e5;
            sQLitePreparedStatement2 = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th6) {
            th = th6;
            sQLitePreparedStatement2 = executeFast;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
        try {
            sQLitePreparedStatement.dispose();
            this.database.commitTransaction();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda158
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putWebPages$180(arrayList);
                }
            });
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
                return;
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            checkSQLException(e);
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 == null) {
            }
            sQLiteDatabase2.commitTransaction();
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$180(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceivedWebpages, arrayList);
    }

    public void overwriteChannel(final long j, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, final int i, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$183(j, i, tLRPC$TL_updates_channelDifferenceTooLong, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:14:0x0229  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0258  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x026c A[Catch: all -> 0x027e, Exception -> 0x0281, TRY_LEAVE, TryCatch #4 {Exception -> 0x0281, all -> 0x027e, blocks: (B:3:0x000a, B:12:0x003c, B:16:0x022c, B:19:0x025a, B:20:0x0262, B:22:0x026c), top: B:48:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0294  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$overwriteChannel$183(long j, int i, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, Runnable runnable) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int intValue;
        boolean z;
        final long j2 = -j;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + j2, new Object[0]);
            try {
            } catch (Exception e) {
                e = e;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (runnable != null) {
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
        if (queryFinalized.next()) {
            intValue = queryFinalized.intValue(0);
        } else {
            intValue = 0;
            if (i != 0) {
                z = true;
                queryFinalized.dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                sQLiteDatabase4.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase5 = this.database;
                sQLiteDatabase5.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase6 = this.database;
                sQLiteDatabase6.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase7 = this.database;
                sQLiteDatabase7.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase8 = this.database;
                sQLiteDatabase8.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase9 = this.database;
                sQLiteDatabase9.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase10 = this.database;
                sQLiteDatabase10.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase11 = this.database;
                sQLiteDatabase11.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase12 = this.database;
                sQLiteDatabase12.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase13 = this.database;
                sQLiteDatabase13.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase14 = this.database;
                sQLiteDatabase14.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase15 = this.database;
                sQLiteDatabase15.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase16 = this.database;
                sQLiteDatabase16.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
                getMediaDataController().clearBotKeyboard(j2);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
                tLRPC$Dialog.id = j2;
                tLRPC$Dialog.flags = 1;
                tLRPC$Dialog.notify_settings = null;
                tLRPC$Dialog.pinned = intValue == 0;
                tLRPC$Dialog.pinnedNum = intValue;
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$Dialog);
                putDialogsInternal(tLRPC$TL_messages_dialogs, 0);
                updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$overwriteChannel$182(j2, tLRPC$TL_updates_channelDifferenceTooLong);
                    }
                });
                if (z) {
                    if (i == 1) {
                        getMessagesController().checkChatInviter(j, true);
                    } else {
                        getMessagesController().generateJoinMessage(j, false);
                    }
                }
                if (i != 1) {
                    getMessagesController().getTopicsController().reloadTopics(j);
                }
                if (runnable != null) {
                    runnable.run();
                    return;
                }
                return;
            }
        }
        z = false;
        queryFinalized.dispose();
        SQLiteDatabase sQLiteDatabase22 = this.database;
        sQLiteDatabase22.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase32 = this.database;
        sQLiteDatabase32.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase42 = this.database;
        sQLiteDatabase42.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase52 = this.database;
        sQLiteDatabase52.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase62 = this.database;
        sQLiteDatabase62.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase72 = this.database;
        sQLiteDatabase72.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase82 = this.database;
        sQLiteDatabase82.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase92 = this.database;
        sQLiteDatabase92.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase102 = this.database;
        sQLiteDatabase102.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase112 = this.database;
        sQLiteDatabase112.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase122 = this.database;
        sQLiteDatabase122.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase132 = this.database;
        sQLiteDatabase132.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase142 = this.database;
        sQLiteDatabase142.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase152 = this.database;
        sQLiteDatabase152.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase162 = this.database;
        sQLiteDatabase162.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
        getMediaDataController().clearBotKeyboard(j2);
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs2.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
        tLRPC$TL_messages_dialogs2.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
        tLRPC$TL_messages_dialogs2.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
        tLRPC$Dialog2.id = j2;
        tLRPC$Dialog2.flags = 1;
        tLRPC$Dialog2.notify_settings = null;
        tLRPC$Dialog2.pinned = intValue == 0;
        tLRPC$Dialog2.pinnedNum = intValue;
        tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$Dialog2);
        putDialogsInternal(tLRPC$TL_messages_dialogs2, 0);
        updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$182(j2, tLRPC$TL_updates_channelDifferenceTooLong);
            }
        });
        if (z) {
        }
        if (i != 1) {
        }
        if (runnable != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$overwriteChannel$182(long j, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE, tLRPC$TL_updates_channelDifferenceTooLong);
    }

    public void putChannelViews(final LongSparseArray<SparseIntArray> longSparseArray, final LongSparseArray<SparseIntArray> longSparseArray2, final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3, final boolean z) {
        if (isEmpty(longSparseArray) && isEmpty(longSparseArray2) && isEmpty(longSparseArray3)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda147
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelViews$184(longSparseArray, longSparseArray2, longSparseArray3, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:136:0x023e  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x0247  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x024e  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x0257  */
    /* JADX WARN: Removed duplicated region for block: B:183:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0136 A[Catch: all -> 0x0215, Exception -> 0x0219, TRY_LEAVE, TryCatch #12 {Exception -> 0x0219, all -> 0x0215, blocks: (B:43:0x00d0, B:45:0x00d6, B:47:0x00e7, B:58:0x012b, B:61:0x0136, B:96:0x01d8), top: B:166:0x00d0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putChannelViews$184(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase2;
        TLRPC$TL_messageReplies TLdeserialize;
        int i;
        int i2;
        LongSparseArray longSparseArray4 = longSparseArray3;
        char c = 1;
        try {
            try {
                this.database.beginTransaction();
                try {
                    int i3 = 2;
                    if (!isEmpty(longSparseArray)) {
                        try {
                            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET media = max((SELECT media FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                            for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                                try {
                                    long keyAt = longSparseArray.keyAt(i4);
                                    SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.valueAt(i4);
                                    int size = sparseIntArray.size();
                                    for (int i5 = 0; i5 < size; i5++) {
                                        int valueAt = sparseIntArray.valueAt(i5);
                                        int keyAt2 = sparseIntArray.keyAt(i5);
                                        executeFast.requery();
                                        executeFast.bindInteger(1, keyAt2);
                                        executeFast.bindLong(2, keyAt);
                                        executeFast.bindInteger(3, valueAt);
                                        executeFast.bindInteger(4, keyAt2);
                                        executeFast.bindLong(5, keyAt);
                                        executeFast.step();
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    sQLitePreparedStatement2 = executeFast;
                                    checkSQLException(e);
                                    if (c != 0) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    sQLitePreparedStatement = executeFast;
                                    if (c != 0) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            executeFast.dispose();
                        } catch (Exception e2) {
                            e = e2;
                            sQLitePreparedStatement2 = null;
                            checkSQLException(e);
                            if (c != 0) {
                            }
                            if (sQLitePreparedStatement2 == null) {
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLitePreparedStatement = null;
                            if (c != 0) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    if (!isEmpty(longSparseArray2)) {
                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_v2 SET forwards = max((SELECT forwards FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i6 = 0; i6 < longSparseArray2.size(); i6++) {
                            try {
                                long keyAt3 = longSparseArray2.keyAt(i6);
                                SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.valueAt(i6);
                                int size2 = sparseIntArray2.size();
                                for (int i7 = 0; i7 < size2; i7++) {
                                    int valueAt2 = sparseIntArray2.valueAt(i7);
                                    int keyAt4 = sparseIntArray2.keyAt(i7);
                                    sQLitePreparedStatement2.requery();
                                    sQLitePreparedStatement2.bindInteger(1, keyAt4);
                                    sQLitePreparedStatement2.bindLong(2, keyAt3);
                                    sQLitePreparedStatement2.bindInteger(3, valueAt2);
                                    sQLitePreparedStatement2.bindInteger(4, keyAt4);
                                    sQLitePreparedStatement2.bindLong(5, keyAt3);
                                    sQLitePreparedStatement2.step();
                                }
                            } catch (Exception e3) {
                                e = e3;
                                checkSQLException(e);
                                if (c != 0 && (sQLiteDatabase2 = this.database) != null) {
                                    sQLiteDatabase2.commitTransaction();
                                }
                                if (sQLitePreparedStatement2 == null) {
                                    sQLitePreparedStatement2.dispose();
                                    return;
                                }
                                return;
                            }
                        }
                        sQLitePreparedStatement2.dispose();
                    }
                    if (!isEmpty(longSparseArray3)) {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                        int i8 = 0;
                        while (i8 < longSparseArray3.size()) {
                            try {
                                long keyAt5 = longSparseArray4.keyAt(i8);
                                SparseArray sparseArray = (SparseArray) longSparseArray4.valueAt(i8);
                                int size3 = sparseArray.size();
                                int i9 = 0;
                                while (i9 < size3) {
                                    int keyAt6 = sparseArray.keyAt(i9);
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    Locale locale = Locale.US;
                                    Object[] objArr = new Object[i3];
                                    objArr[0] = Integer.valueOf(keyAt6);
                                    objArr[c] = Long.valueOf(keyAt5);
                                    SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                    boolean next = queryFinalized.next();
                                    if (next) {
                                        try {
                                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                                            if (byteBufferValue != null) {
                                                TLdeserialize = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                byteBufferValue.reuse();
                                                queryFinalized.dispose();
                                                if (next) {
                                                    TLRPC$MessageReplies tLRPC$MessageReplies = (TLRPC$MessageReplies) sparseArray.get(sparseArray.keyAt(i9));
                                                    if (z || TLdeserialize == null || (i2 = TLdeserialize.replies_pts) == 0 || tLRPC$MessageReplies.replies_pts > i2 || tLRPC$MessageReplies.read_max_id > TLdeserialize.read_max_id || tLRPC$MessageReplies.max_id > TLdeserialize.max_id) {
                                                        if (z) {
                                                            if (TLdeserialize == null) {
                                                                TLRPC$TL_messageReplies tLRPC$TL_messageReplies = new TLRPC$TL_messageReplies();
                                                                tLRPC$TL_messageReplies.flags |= 2;
                                                                TLdeserialize = tLRPC$TL_messageReplies;
                                                            }
                                                            try {
                                                                TLdeserialize.replies += tLRPC$MessageReplies.replies;
                                                                int size4 = tLRPC$MessageReplies.recent_repliers.size();
                                                                for (int i10 = 0; i10 < size4; i10++) {
                                                                    long peerId = MessageObject.getPeerId(tLRPC$MessageReplies.recent_repliers.get(i10));
                                                                    int size5 = TLdeserialize.recent_repliers.size();
                                                                    int i11 = 0;
                                                                    while (i11 < size5) {
                                                                        if (peerId == MessageObject.getPeerId(TLdeserialize.recent_repliers.get(i11))) {
                                                                            TLdeserialize.recent_repliers.remove(i11);
                                                                            i11--;
                                                                            size5--;
                                                                        }
                                                                        i11++;
                                                                    }
                                                                }
                                                                TLdeserialize.recent_repliers.addAll(0, tLRPC$MessageReplies.recent_repliers);
                                                                while (TLdeserialize.recent_repliers.size() > 3) {
                                                                    TLdeserialize.recent_repliers.remove(0);
                                                                }
                                                                tLRPC$MessageReplies = TLdeserialize;
                                                            } catch (Exception e4) {
                                                                e = e4;
                                                                sQLitePreparedStatement2 = executeFast2;
                                                                c = 1;
                                                                checkSQLException(e);
                                                                if (c != 0) {
                                                                }
                                                                if (sQLitePreparedStatement2 == null) {
                                                                }
                                                            } catch (Throwable th3) {
                                                                th = th3;
                                                                sQLitePreparedStatement = executeFast2;
                                                                c = 1;
                                                                if (c != 0) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        }
                                                        if (TLdeserialize != null && (i = TLdeserialize.read_max_id) > tLRPC$MessageReplies.read_max_id) {
                                                            tLRPC$MessageReplies.read_max_id = i;
                                                        }
                                                        executeFast2.requery();
                                                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                                                        tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                                                        executeFast2.bindByteBuffer(1, nativeByteBuffer);
                                                        i3 = 2;
                                                        executeFast2.bindInteger(2, keyAt6);
                                                        executeFast2.bindLong(3, keyAt5);
                                                        executeFast2.step();
                                                        nativeByteBuffer.reuse();
                                                        i9++;
                                                        c = 1;
                                                    }
                                                }
                                                i3 = 2;
                                                i9++;
                                                c = 1;
                                            }
                                        } catch (Exception e5) {
                                            e = e5;
                                            sQLitePreparedStatement2 = executeFast2;
                                            checkSQLException(e);
                                            if (c != 0) {
                                                sQLiteDatabase2.commitTransaction();
                                            }
                                            if (sQLitePreparedStatement2 == null) {
                                            }
                                        } catch (Throwable th4) {
                                            th = th4;
                                            sQLitePreparedStatement = executeFast2;
                                            if (c != 0 && (sQLiteDatabase = this.database) != null) {
                                                sQLiteDatabase.commitTransaction();
                                            }
                                            if (sQLitePreparedStatement != null) {
                                                sQLitePreparedStatement.dispose();
                                            }
                                            throw th;
                                        }
                                    }
                                    TLdeserialize = null;
                                    queryFinalized.dispose();
                                    if (next) {
                                    }
                                    i3 = 2;
                                    i9++;
                                    c = 1;
                                }
                                i8++;
                                longSparseArray4 = longSparseArray3;
                                c = 1;
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th5) {
                                th = th5;
                            }
                        }
                        executeFast2.dispose();
                    }
                } catch (Exception e7) {
                    e = e7;
                } catch (Throwable th6) {
                    th = th6;
                }
            } catch (Throwable th7) {
                th = th7;
            }
            try {
                this.database.commitTransaction();
            } catch (Exception e8) {
                e = e8;
                sQLitePreparedStatement2 = null;
                c = 1;
                checkSQLException(e);
                if (c != 0) {
                }
                if (sQLitePreparedStatement2 == null) {
                }
            } catch (Throwable th8) {
                th = th8;
                sQLitePreparedStatement = null;
                c = 1;
                if (c != 0) {
                    sQLiteDatabase.commitTransaction();
                }
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e9) {
            e = e9;
            c = 0;
        } catch (Throwable th9) {
            th = th9;
            c = 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:106:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:107:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x027b  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0287  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x028c  */
    /* renamed from: updateRepliesMaxReadIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateRepliesMaxReadId$186(final long j, final int i, final int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        final int i4;
        int i5;
        SQLiteCursor queryFinalized;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        long j2 = -j;
        try {
            if (!isForum(j2)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                try {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    try {
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
                try {
                    if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                        tLRPC$MessageReplies = null;
                    } else {
                        tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                    }
                    queryFinalized.dispose();
                    if (tLRPC$MessageReplies != null) {
                        tLRPC$MessageReplies.read_max_id = i2;
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                        tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j2);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    }
                    executeFast.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = executeFast;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = executeFast;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT max_read_id FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
            try {
                boolean z = queryFinalized2.next() && i2 >= queryFinalized2.intValue(0);
                queryFinalized2.dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 1 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
                if (i3 < 0) {
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                    queryFinalized3.dispose();
                    if (intValue == 0) {
                        i4 = intValue;
                        i5 = 0;
                        if (z) {
                            return;
                        }
                        if (i5 >= 0) {
                            if (BuildVars.DEBUG_PRIVATE_VERSION && i5 > 0) {
                                FileLog.d("(updateRepliesMaxReadIdInternal) new unread mentions " + i5 + " for dialog_id=" + j2 + " topic_id=" + i);
                            }
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d, unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Integer.valueOf(i5), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        } else {
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        }
                        final int i6 = i5;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda84
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateRepliesMaxReadIdInternal$185(j, i, i2, i4, i6);
                            }
                        });
                        resetForumBadgeIfNeed(j2);
                        return;
                    }
                    SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue2 = queryFinalized4.next() ? queryFinalized4.intValue(0) : -1;
                    queryFinalized4.dispose();
                    SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    int intValue3 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                    queryFinalized5.dispose();
                    if (intValue2 > intValue3) {
                        intValue2 = intValue3;
                    }
                    i5 = intValue2;
                    i4 = intValue;
                    if (z) {
                    }
                } else {
                    i4 = i3;
                    if (i3 != 0) {
                        i5 = -1;
                        if (z) {
                        }
                    }
                    i5 = 0;
                    if (z) {
                    }
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = sQLiteCursor3;
                sQLitePreparedStatement = null;
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = sQLiteCursor2;
                sQLitePreparedStatement = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateRepliesMaxReadIdInternal$185(long j, int i, int i2, int i3, int i4) {
        getMessagesController().getTopicsController().updateMaxReadId(j, i, i2, i3, i4);
    }

    private void resetForumBadgeIfNeed(long j) {
        LongSparseIntArray longSparseIntArray;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.ENGLISH;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT topic_id FROM topics WHERE did = %d AND unread_count > 0", Long.valueOf(j)), new Object[0]);
            try {
                if (queryFinalized.next()) {
                    longSparseIntArray = null;
                } else {
                    longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, 0);
                }
                queryFinalized.dispose();
                if (longSparseIntArray != null) {
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = %d", Long.valueOf(j))).stepThis().dispose();
                }
                updateFiltersReadCounter(longSparseIntArray, null, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray, null);
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(th);
                } finally {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateRepliesMaxReadId(final long j, final int i, final int i2, final int i3, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda82
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
                }
            });
        } else {
            lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
        }
    }

    public void updateRepliesCount(final long j, final int i, final ArrayList<TLRPC$Peer> arrayList, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda54
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateRepliesCount$187(i, j, i3, arrayList, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00b3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateRepliesCount$187(int i, long j, int i2, ArrayList arrayList, int i3) {
        SQLiteCursor sQLiteCursor;
        long j2;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            try {
                j2 = -j;
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
            } catch (Exception e) {
                e = e;
                sQLiteCursor = null;
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = null;
            }
            try {
                if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                    tLRPC$MessageReplies = null;
                } else {
                    tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                }
                sQLiteCursor.dispose();
                if (tLRPC$MessageReplies != null) {
                    int i4 = tLRPC$MessageReplies.replies + i2;
                    tLRPC$MessageReplies.replies = i4;
                    if (i4 < 0) {
                        tLRPC$MessageReplies.replies = 0;
                    }
                    if (arrayList != null) {
                        tLRPC$MessageReplies.recent_repliers = arrayList;
                        tLRPC$MessageReplies.flags |= 2;
                    }
                    if (i3 != 0) {
                        tLRPC$MessageReplies.max_id = i3;
                    }
                    executeFast.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                    tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, i);
                    executeFast.bindLong(3, j2);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                }
                executeFast.dispose();
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = executeFast;
                try {
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    private boolean isValidKeyboardToSave(TLRPC$Message tLRPC$Message) {
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
        return (tLRPC$ReplyMarkup == null || (tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) || (tLRPC$ReplyMarkup.selective && !tLRPC$Message.mentioned)) ? false : true;
    }

    public void updateMessageVerifyFlags(final ArrayList<TLRPC$Message> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda154
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVerifyFlags$188(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVerifyFlags$188(ArrayList arrayList) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        boolean z = false;
        try {
            try {
                this.database.beginTransaction();
                try {
                    executeFast = this.database.executeFast("UPDATE messages_v2 SET imp = ? WHERE mid = ? AND uid = ?");
                } catch (Exception e) {
                    e = e;
                } catch (Throwable th) {
                    th = th;
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i);
                executeFast.requery();
                int i2 = tLRPC$Message.stickerVerified;
                executeFast.bindInteger(1, i2 == 0 ? 1 : i2 == 2 ? 2 : 0);
                executeFast.bindInteger(2, tLRPC$Message.id);
                executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            z = true;
            checkSQLException(e);
            if (z && (sQLiteDatabase2 = this.database) != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = executeFast;
            z = true;
            if (z && (sQLiteDatabase = this.database) != null) {
                sQLiteDatabase.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(10:1|(11:(3:1648|1649|(19:1653|(2:1655|1656)(1:1658)|1657|4|(1:6)(1:1647)|(1:8)(1:1646)|9|10|11|12|(15:(2:15|16)(1:183)|17|18|19|20|21|(4:24|(2:26|27)(9:29|(1:31)|32|33|34|35|(1:37)|38|(2:40|41)(1:42))|28|22)|124|125|126|127|(2:129|130)(1:156)|131|(2:133|134)|135)(1:(11:(2:186|187)(1:234)|188|189|190|(4:193|(2:195|196)(6:198|(1:200)|201|(4:203|204|205|206)(1:216)|207|(2:209|210)(1:211))|197|191)|217|218|(2:220|221)(1:227)|222|(2:224|225)|226)(102:235|(7:237|238|(1:240)|241|(1:243)(1:1626)|244|(1:246))(1:1627)|(1:248)|249|251|252|253|254|255|256|257|259|260|261|262|263|264|265|266|267|268|269|(4:270|271|272|(10:274|275|(1:407)(4:279|(1:281)(1:406)|282|(3:284|(1:286)|287))|288|(1:405)(14:304|(3:306|(1:308)(1:310)|309)|311|(4:315|316|317|(7:319|(1:321)(1:392)|(3:323|(1:325)(1:390)|326)(1:391)|327|(1:389)(3:333|(1:335)|336)|337|(3:339|(1:341)|342))(1:393))|394|(1:396)|397|(1:399)(1:404)|400|(1:402)|403|316|317|(0)(0))|343|(12:(1:346)(1:387)|347|(1:349)(1:386)|350|(1:352)|353|(1:355)|356|(1:358)|359|(7:361|(1:363)(1:384)|364|(1:366)|367|(1:369)|370)(1:385)|371)(1:388)|372|(2:374|(2:380|381)(1:378))(2:382|383)|379)(1:412))|413|414|(3:416|(2:419|417)|420)|(4:422|(9:424|(4:427|(2:429|430)(3:(4:(1:434)(1:439)|435|(1:437)|438)|440|441)|431|425)|442|443|(1:445)|446|(6:448|(1:450)(1:469)|(1:452)|453|(5:457|(1:459)(1:466)|(1:461)(1:465)|462|463)|464)|470|471)|472|473)(1:1583)|474|(8:477|(4:480|(2:482|483)(3:(3:(1:487)|488|(1:490))|491|492)|484|478)|493|494|(7:496|(1:498)(2:520|(5:522|500|501|(6:505|(1:507)(2:514|(1:516)(1:517))|508|(1:510)|511|512)|513))|499|500|501|(1:519)(7:503|505|(0)(0)|508|(0)|511|512)|513)|523|524|475)|525|526|527|(3:529|(3:531|(2:533|534)(7:536|(5:539|(1:541)|(2:543|544)(1:546)|545|537)|547|548|(1:550)|551|(4:553|(1:555)|556|557)(2:558|559))|535)|560)|561|562|(3:564|(5:567|(2:570|568)|571|572|565)|573)|574|(3:576|(6:579|(4:582|(2:584|585)(1:587)|586|580)|588|589|590|577)|591)|593|(4:594|595|596|(5:598|599|600|(2:602|603)(36:605|(1:607)(1:1063)|608|609|610|611|(3:1043|1044|(28:1048|615|(2:(1:620)|621)|622|(2:(1:625)|626)|(6:628|(2:630|(6:632|(1:634)|(1:639)|640|(2:642|(3:644|(2:646|(3:648|(1:650)|(1:655)))(1:1038)|1037))|1039))(1:1041)|1040|640|(0)|1039)(1:1042)|656|(8:658|(1:660)(1:820)|661|(39:669|670|671|(2:673|(1:675)(4:676|(5:678|679|680|681|(7:683|684|685|(4:(1:690)(1:801)|691|692|693)|666|667|668))(1:813)|807|693))(1:814)|694|695|696|697|698|(1:700)(1:792)|701|(27:706|707|(1:709)(1:790)|710|(1:712)(1:789)|713|(1:715)(2:785|(1:787)(1:788))|716|(1:718)(1:784)|719|(1:721)(1:783)|722|(3:724|(1:726)(1:781)|727)(1:782)|728|729|730|(3:732|733|734)(2:768|769)|(2:736|(1:738)(2:739|740))|741|(1:743)(2:761|762)|744|(1:746)|(1:748)|(1:750)|751|(5:753|754|(1:756)|757|758)(2:759|760)|668)|791|707|(0)(0)|710|(0)(0)|713|(0)(0)|716|(0)(0)|719|(0)(0)|722|(0)(0)|728|729|730|(0)(0)|(0)|741|(0)(0)|744|(0)|(0)|(0)|751|(0)(0)|668)(1:664)|665|666|667|668)|821|822|823|824|825|(5:1019|1020|1021|1022|1023)(1:827)|828|829|(5:831|832|833|834|(4:(1:837)(1:853)|838|839|840))(1:1009)|854|(1:1003)(3:(2:859|860)(1:1002)|861|862)|863|864|(4:(2:867|868)(1:968)|869|870|871)(3:969|(5:973|974|975|976|977)(1:971)|972)|872|873|(5:875|876|(2:949|950)|878|(2:882|(4:888|(2:890|891)(6:921|(5:926|(1:(1:934)(1:(2:944|(11:894|(1:896)|897|898|899|900|(1:902)(1:907)|903|904|905|906))(5:938|(1:940)(1:943)|941|942|(0))))|945|946|(0))|947|948|942|(0))|892|(0))))|957|905|906))(1:613)|614|615|(3:617|(0)|621)|622|(0)|(0)(0)|656|(0)|821|822|823|824|825|(0)(0)|828|829|(0)(0)|854|(1:856)|1003|863|864|(0)(0)|872|873|(0)|957|905|906)|604)(1:1069))|1070|1071|1072|(3:1564|1565|1566)(1:1074)|(3:1556|1557|1558)(1:1076)|(5:1546|1547|1548|1549|1550)(1:1078)|(2:1080|1081)(1:1545)|1082|1083|1084|1085|1086|1087|(2:1089|(4:1093|1094|1090|1091))|1100|1101|1102|1103|1105|1106|1107|1108|1109|1110|(8:1113|1114|1115|(1:1117)(26:1121|1122|1123|1124|1125|1126|1127|1128|1129|1130|(2:1244|1245)(3:1132|(1:1134)|1135)|1136|1137|1138|1139|1140|(1:1142)(1:1233)|(1:1144)(1:1232)|(2:1223|1224)(1:1146)|(1:1148)(1:1222)|1150|1151|(2:(1:1220)(2:1155|1156)|(4:1159|1160|1161|(7:(3:1164|(4:1166|(1:1168)|1169|(1:1174)(1:1173))(1:1176)|1175)|1178|(1:1182)|1183|(1:1189)(1:1187)|1188|1175)(12:1190|1191|1192|1193|(1:1197)|1198|(1:1200)(1:1209)|1201|(1:1208)(1:1205)|1206|1207|1120)))(1:1221)|1219|1161|(0)(0))|1118|1119|1120|1111)|1273|1274|1275|1276|1278|1279|1280|1281|1282|1283|(8:1286|1287|(4:1291|(3:1358|1359|1360)(1:1293)|1294|(5:1354|1355|1356|1357|1335)(22:1296|1297|1298|(1:1300)|(2:1302|(1:1304))(1:1353)|(1:1306)(1:1352)|(1:1308)(1:1351)|(1:1310)(1:1350)|1311|(1:1313)(1:1349)|1314|(1:1348)(2:1317|1318)|1319|1320|1321|1322|(2:(1:1337)(1:1326)|(1:1336)(1:1329))(1:1338)|1330|(1:1332)|1333|1334|1335))|1368|1333|1334|1335|1284)|1375|1376|1377|1378|(7:1443|1444|1445|1446|(4:1448|(5:1450|(1:1452)(1:1459)|1453|(2:1455|1456)(1:1458)|1457)|1460|1461)|1462|1463)(1:1380)|1381|1382|1383|1384|1385|(6:1387|1388|1389|(8:1392|(1:1394)(1:1405)|1395|(1:1397)(1:1404)|1398|(2:1400|1401)(1:1403)|1402|1390)|1406|1407)|1417|1418|(1:1420)|1421|(1:1423)|1424|(1:1426)|1432|(1:140)|(1:142)|(1:144)|(1:146)|(1:148)|(1:150)|(2:152|153)(1:154)))|136|(2:138|140)|(0)|(0)|(0)|(0)|(0)|(0)(0)))|12|(0)(0)|136|(0)|(0)|(0)|(0)|(0)|(0)|(0)(0))|3|4|(0)(0)|(0)(0)|9|10|11|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:1006:0x167c, code lost:
        if (r11 != 0) goto L1151;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1032:0x16c9, code lost:
        if (r15.id < r10) goto L1169;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1416:0x2032, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1418:0x2036, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:525:0x0d7e, code lost:
        if (r14.id <= r2) goto L636;
     */
    /* JADX WARN: Code restructure failed: missing block: B:543:0x0db8, code lost:
        if (r14.id <= r7) goto L652;
     */
    /* JADX WARN: Code restructure failed: missing block: B:795:0x122c, code lost:
        if (r14.post != false) goto L878;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1025:0x16ba  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x01e6  */
    /* JADX WARN: Removed duplicated region for block: B:1052:0x172a A[Catch: all -> 0x17c6, Exception -> 0x17ce, TRY_ENTER, TRY_LEAVE, TryCatch #104 {Exception -> 0x17ce, all -> 0x17c6, blocks: (B:990:0x1653, B:1010:0x1683, B:1023:0x16ad, B:1052:0x172a, B:996:0x1665, B:993:0x165b), top: B:1609:0x1653 }] */
    /* JADX WARN: Removed duplicated region for block: B:1257:0x1c77  */
    /* JADX WARN: Removed duplicated region for block: B:1261:0x1c80  */
    /* JADX WARN: Removed duplicated region for block: B:1263:0x1c85  */
    /* JADX WARN: Removed duplicated region for block: B:1265:0x1c8a  */
    /* JADX WARN: Removed duplicated region for block: B:1267:0x1c8f  */
    /* JADX WARN: Removed duplicated region for block: B:1269:0x1c94  */
    /* JADX WARN: Removed duplicated region for block: B:1271:0x1c99  */
    /* JADX WARN: Removed duplicated region for block: B:1422:0x203f  */
    /* JADX WARN: Removed duplicated region for block: B:1426:0x2048  */
    /* JADX WARN: Removed duplicated region for block: B:1428:0x204d  */
    /* JADX WARN: Removed duplicated region for block: B:1430:0x2052  */
    /* JADX WARN: Removed duplicated region for block: B:1432:0x2057  */
    /* JADX WARN: Removed duplicated region for block: B:1434:0x205c  */
    /* JADX WARN: Removed duplicated region for block: B:1436:0x2061  */
    /* JADX WARN: Removed duplicated region for block: B:1438:0x2066  */
    /* JADX WARN: Removed duplicated region for block: B:1440:0x206b  */
    /* JADX WARN: Removed duplicated region for block: B:1442:0x2070  */
    /* JADX WARN: Removed duplicated region for block: B:1444:0x2075  */
    /* JADX WARN: Removed duplicated region for block: B:1446:0x207a  */
    /* JADX WARN: Removed duplicated region for block: B:1448:0x207f  */
    /* JADX WARN: Removed duplicated region for block: B:1450:0x2084  */
    /* JADX WARN: Removed duplicated region for block: B:1452:0x2089  */
    /* JADX WARN: Removed duplicated region for block: B:1457:0x2091  */
    /* JADX WARN: Removed duplicated region for block: B:1461:0x209a  */
    /* JADX WARN: Removed duplicated region for block: B:1463:0x209f  */
    /* JADX WARN: Removed duplicated region for block: B:1465:0x20a4  */
    /* JADX WARN: Removed duplicated region for block: B:1467:0x20a9  */
    /* JADX WARN: Removed duplicated region for block: B:1469:0x20ae  */
    /* JADX WARN: Removed duplicated region for block: B:1471:0x20b3  */
    /* JADX WARN: Removed duplicated region for block: B:1473:0x20b8  */
    /* JADX WARN: Removed duplicated region for block: B:1475:0x20bd  */
    /* JADX WARN: Removed duplicated region for block: B:1477:0x20c2  */
    /* JADX WARN: Removed duplicated region for block: B:1479:0x20c7  */
    /* JADX WARN: Removed duplicated region for block: B:1481:0x20cc  */
    /* JADX WARN: Removed duplicated region for block: B:1483:0x20d1  */
    /* JADX WARN: Removed duplicated region for block: B:1485:0x20d6  */
    /* JADX WARN: Removed duplicated region for block: B:1487:0x20db  */
    /* JADX WARN: Removed duplicated region for block: B:1603:0x107f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1720:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1722:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:247:0x05ae A[Catch: all -> 0x0796, Exception -> 0x07ad, TryCatch #121 {Exception -> 0x07ad, all -> 0x0796, blocks: (B:190:0x044c, B:192:0x046d, B:194:0x0471, B:196:0x047d, B:198:0x048c, B:200:0x0499, B:202:0x04c3, B:203:0x04cb, B:205:0x04d7, B:207:0x04dd, B:209:0x04e3, B:213:0x04ed, B:215:0x04f1, B:217:0x04f7, B:221:0x0505, B:223:0x050e, B:225:0x0530, B:227:0x0536, B:228:0x053e, B:247:0x05ae, B:252:0x05cc, B:254:0x05fb, B:256:0x0601, B:258:0x0612, B:260:0x0616, B:262:0x061a, B:264:0x061e, B:266:0x0628, B:267:0x062d, B:269:0x063d, B:271:0x0641, B:273:0x0649, B:274:0x064e, B:277:0x0675, B:280:0x067d, B:282:0x069c, B:284:0x06a6, B:286:0x06b7, B:288:0x06bd, B:289:0x06c0, B:291:0x06cd, B:292:0x06d7, B:294:0x06e8, B:295:0x06f2, B:297:0x06ff, B:299:0x0712, B:301:0x0721, B:303:0x0727, B:304:0x072a, B:306:0x0737, B:307:0x073f, B:311:0x075f, B:313:0x0765, B:315:0x0775, B:317:0x077b, B:250:0x05c3, B:234:0x0569, B:236:0x0573, B:237:0x057d, B:239:0x0583, B:241:0x058b, B:243:0x0598, B:244:0x05a2, B:328:0x07d9, B:329:0x07e1, B:331:0x07e7, B:333:0x07fd, B:335:0x0806, B:336:0x0861, B:338:0x0867, B:340:0x0876, B:343:0x0882, B:345:0x088a, B:347:0x0892, B:349:0x089d, B:351:0x08a2, B:353:0x08a7, B:354:0x08ac, B:356:0x08b3, B:358:0x08c9, B:362:0x08e4, B:364:0x08eb, B:366:0x08f2, B:368:0x08fa, B:373:0x0912, B:369:0x0906, B:359:0x08d7, B:381:0x0968, B:382:0x09a9, B:384:0x09af, B:386:0x09c9, B:389:0x09d5, B:390:0x09da, B:392:0x09e4, B:393:0x09ee, B:395:0x09f4, B:397:0x0a08, B:399:0x0a26, B:405:0x0a40, B:407:0x0a4b, B:409:0x0a52, B:411:0x0a5a, B:419:0x0a79, B:412:0x0a64, B:416:0x0a71, B:400:0x0a2f, B:404:0x0a3b, B:425:0x0a9a, B:427:0x0aa1, B:430:0x0ab5, B:431:0x0af5, B:433:0x0afb, B:435:0x0b05, B:437:0x0b0a, B:439:0x0b0f, B:442:0x0b1c, B:444:0x0b26, B:447:0x0b30, B:454:0x0b4f, B:455:0x0b57, B:457:0x0b5d, B:458:0x0b9f, B:460:0x0ba5, B:461:0x0bb2, B:465:0x0c05, B:467:0x0c0b, B:468:0x0c1b, B:470:0x0c21, B:472:0x0c2b, B:473:0x0c30, B:474:0x0c36), top: B:1575:0x044c }] */
    /* JADX WARN: Removed duplicated region for block: B:275:0x065c  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0078  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x007a  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x007f  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x008d  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x0a5a A[Catch: all -> 0x0796, Exception -> 0x07ad, TryCatch #121 {Exception -> 0x07ad, all -> 0x0796, blocks: (B:190:0x044c, B:192:0x046d, B:194:0x0471, B:196:0x047d, B:198:0x048c, B:200:0x0499, B:202:0x04c3, B:203:0x04cb, B:205:0x04d7, B:207:0x04dd, B:209:0x04e3, B:213:0x04ed, B:215:0x04f1, B:217:0x04f7, B:221:0x0505, B:223:0x050e, B:225:0x0530, B:227:0x0536, B:228:0x053e, B:247:0x05ae, B:252:0x05cc, B:254:0x05fb, B:256:0x0601, B:258:0x0612, B:260:0x0616, B:262:0x061a, B:264:0x061e, B:266:0x0628, B:267:0x062d, B:269:0x063d, B:271:0x0641, B:273:0x0649, B:274:0x064e, B:277:0x0675, B:280:0x067d, B:282:0x069c, B:284:0x06a6, B:286:0x06b7, B:288:0x06bd, B:289:0x06c0, B:291:0x06cd, B:292:0x06d7, B:294:0x06e8, B:295:0x06f2, B:297:0x06ff, B:299:0x0712, B:301:0x0721, B:303:0x0727, B:304:0x072a, B:306:0x0737, B:307:0x073f, B:311:0x075f, B:313:0x0765, B:315:0x0775, B:317:0x077b, B:250:0x05c3, B:234:0x0569, B:236:0x0573, B:237:0x057d, B:239:0x0583, B:241:0x058b, B:243:0x0598, B:244:0x05a2, B:328:0x07d9, B:329:0x07e1, B:331:0x07e7, B:333:0x07fd, B:335:0x0806, B:336:0x0861, B:338:0x0867, B:340:0x0876, B:343:0x0882, B:345:0x088a, B:347:0x0892, B:349:0x089d, B:351:0x08a2, B:353:0x08a7, B:354:0x08ac, B:356:0x08b3, B:358:0x08c9, B:362:0x08e4, B:364:0x08eb, B:366:0x08f2, B:368:0x08fa, B:373:0x0912, B:369:0x0906, B:359:0x08d7, B:381:0x0968, B:382:0x09a9, B:384:0x09af, B:386:0x09c9, B:389:0x09d5, B:390:0x09da, B:392:0x09e4, B:393:0x09ee, B:395:0x09f4, B:397:0x0a08, B:399:0x0a26, B:405:0x0a40, B:407:0x0a4b, B:409:0x0a52, B:411:0x0a5a, B:419:0x0a79, B:412:0x0a64, B:416:0x0a71, B:400:0x0a2f, B:404:0x0a3b, B:425:0x0a9a, B:427:0x0aa1, B:430:0x0ab5, B:431:0x0af5, B:433:0x0afb, B:435:0x0b05, B:437:0x0b0a, B:439:0x0b0f, B:442:0x0b1c, B:444:0x0b26, B:447:0x0b30, B:454:0x0b4f, B:455:0x0b57, B:457:0x0b5d, B:458:0x0b9f, B:460:0x0ba5, B:461:0x0bb2, B:465:0x0c05, B:467:0x0c0b, B:468:0x0c1b, B:470:0x0c21, B:472:0x0c2b, B:473:0x0c30, B:474:0x0c36), top: B:1575:0x044c }] */
    /* JADX WARN: Removed duplicated region for block: B:412:0x0a64 A[Catch: all -> 0x0796, Exception -> 0x07ad, TryCatch #121 {Exception -> 0x07ad, all -> 0x0796, blocks: (B:190:0x044c, B:192:0x046d, B:194:0x0471, B:196:0x047d, B:198:0x048c, B:200:0x0499, B:202:0x04c3, B:203:0x04cb, B:205:0x04d7, B:207:0x04dd, B:209:0x04e3, B:213:0x04ed, B:215:0x04f1, B:217:0x04f7, B:221:0x0505, B:223:0x050e, B:225:0x0530, B:227:0x0536, B:228:0x053e, B:247:0x05ae, B:252:0x05cc, B:254:0x05fb, B:256:0x0601, B:258:0x0612, B:260:0x0616, B:262:0x061a, B:264:0x061e, B:266:0x0628, B:267:0x062d, B:269:0x063d, B:271:0x0641, B:273:0x0649, B:274:0x064e, B:277:0x0675, B:280:0x067d, B:282:0x069c, B:284:0x06a6, B:286:0x06b7, B:288:0x06bd, B:289:0x06c0, B:291:0x06cd, B:292:0x06d7, B:294:0x06e8, B:295:0x06f2, B:297:0x06ff, B:299:0x0712, B:301:0x0721, B:303:0x0727, B:304:0x072a, B:306:0x0737, B:307:0x073f, B:311:0x075f, B:313:0x0765, B:315:0x0775, B:317:0x077b, B:250:0x05c3, B:234:0x0569, B:236:0x0573, B:237:0x057d, B:239:0x0583, B:241:0x058b, B:243:0x0598, B:244:0x05a2, B:328:0x07d9, B:329:0x07e1, B:331:0x07e7, B:333:0x07fd, B:335:0x0806, B:336:0x0861, B:338:0x0867, B:340:0x0876, B:343:0x0882, B:345:0x088a, B:347:0x0892, B:349:0x089d, B:351:0x08a2, B:353:0x08a7, B:354:0x08ac, B:356:0x08b3, B:358:0x08c9, B:362:0x08e4, B:364:0x08eb, B:366:0x08f2, B:368:0x08fa, B:373:0x0912, B:369:0x0906, B:359:0x08d7, B:381:0x0968, B:382:0x09a9, B:384:0x09af, B:386:0x09c9, B:389:0x09d5, B:390:0x09da, B:392:0x09e4, B:393:0x09ee, B:395:0x09f4, B:397:0x0a08, B:399:0x0a26, B:405:0x0a40, B:407:0x0a4b, B:409:0x0a52, B:411:0x0a5a, B:419:0x0a79, B:412:0x0a64, B:416:0x0a71, B:400:0x0a2f, B:404:0x0a3b, B:425:0x0a9a, B:427:0x0aa1, B:430:0x0ab5, B:431:0x0af5, B:433:0x0afb, B:435:0x0b05, B:437:0x0b0a, B:439:0x0b0f, B:442:0x0b1c, B:444:0x0b26, B:447:0x0b30, B:454:0x0b4f, B:455:0x0b57, B:457:0x0b5d, B:458:0x0b9f, B:460:0x0ba5, B:461:0x0bb2, B:465:0x0c05, B:467:0x0c0b, B:468:0x0c1b, B:470:0x0c21, B:472:0x0c2b, B:473:0x0c30, B:474:0x0c36), top: B:1575:0x044c }] */
    /* JADX WARN: Removed duplicated region for block: B:418:0x0a78  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x0d49 A[Catch: all -> 0x0d0c, Exception -> 0x0d23, TryCatch #85 {Exception -> 0x0d23, all -> 0x0d0c, blocks: (B:492:0x0cfe, B:494:0x0d06, B:507:0x0d41, B:510:0x0d49, B:511:0x0d4f, B:515:0x0d5a, B:516:0x0d5f, B:518:0x0d64, B:520:0x0d70, B:522:0x0d78, B:524:0x0d7c, B:527:0x0d82, B:534:0x0d94, B:536:0x0d9a, B:538:0x0da8, B:540:0x0db2, B:542:0x0db6, B:545:0x0dbc, B:549:0x0dc5, B:531:0x0d89), top: B:1644:0x0cfe }] */
    /* JADX WARN: Removed duplicated region for block: B:514:0x0d58  */
    /* JADX WARN: Removed duplicated region for block: B:518:0x0d64 A[Catch: all -> 0x0d0c, Exception -> 0x0d23, TryCatch #85 {Exception -> 0x0d23, all -> 0x0d0c, blocks: (B:492:0x0cfe, B:494:0x0d06, B:507:0x0d41, B:510:0x0d49, B:511:0x0d4f, B:515:0x0d5a, B:516:0x0d5f, B:518:0x0d64, B:520:0x0d70, B:522:0x0d78, B:524:0x0d7c, B:527:0x0d82, B:534:0x0d94, B:536:0x0d9a, B:538:0x0da8, B:540:0x0db2, B:542:0x0db6, B:545:0x0dbc, B:549:0x0dc5, B:531:0x0d89), top: B:1644:0x0cfe }] */
    /* JADX WARN: Removed duplicated region for block: B:534:0x0d94 A[Catch: all -> 0x0d0c, Exception -> 0x0d23, TryCatch #85 {Exception -> 0x0d23, all -> 0x0d0c, blocks: (B:492:0x0cfe, B:494:0x0d06, B:507:0x0d41, B:510:0x0d49, B:511:0x0d4f, B:515:0x0d5a, B:516:0x0d5f, B:518:0x0d64, B:520:0x0d70, B:522:0x0d78, B:524:0x0d7c, B:527:0x0d82, B:534:0x0d94, B:536:0x0d9a, B:538:0x0da8, B:540:0x0db2, B:542:0x0db6, B:545:0x0dbc, B:549:0x0dc5, B:531:0x0d89), top: B:1644:0x0cfe }] */
    /* JADX WARN: Removed duplicated region for block: B:552:0x0dd0  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x0dde  */
    /* JADX WARN: Removed duplicated region for block: B:616:0x0ec2 A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:617:0x0eca A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:620:0x0ed7 A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:621:0x0eed A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:624:0x0ef7  */
    /* JADX WARN: Removed duplicated region for block: B:625:0x0efb  */
    /* JADX WARN: Removed duplicated region for block: B:631:0x0f0e  */
    /* JADX WARN: Removed duplicated region for block: B:632:0x0f10  */
    /* JADX WARN: Removed duplicated region for block: B:635:0x0f1f A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:636:0x0f35 A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:639:0x0f3f A[Catch: all -> 0x1035, Exception -> 0x1037, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:644:0x0f4e A[Catch: all -> 0x1035, Exception -> 0x1037, TRY_LEAVE, TryCatch #147 {Exception -> 0x1037, all -> 0x1035, blocks: (B:603:0x0e74, B:605:0x0e7d, B:607:0x0e84, B:609:0x0eaa, B:614:0x0eb2, B:616:0x0ec2, B:618:0x0ed3, B:620:0x0ed7, B:622:0x0ef3, B:629:0x0f03, B:633:0x0f11, B:635:0x0f1f, B:637:0x0f3b, B:639:0x0f3f, B:643:0x0f4a, B:679:0x0fdf, B:681:0x1002, B:682:0x100a, B:642:0x0f48, B:644:0x0f4e, B:636:0x0f35, B:621:0x0eed, B:617:0x0eca), top: B:1525:0x0e74 }] */
    /* JADX WARN: Removed duplicated region for block: B:648:0x0f68  */
    /* JADX WARN: Removed duplicated region for block: B:655:0x0f9c  */
    /* JADX WARN: Removed duplicated region for block: B:658:0x0fa3 A[Catch: all -> 0x0f6e, Exception -> 0x0f85, TRY_ENTER, TryCatch #115 {Exception -> 0x0f85, all -> 0x0f6e, blocks: (B:649:0x0f6a, B:658:0x0fa3, B:660:0x0fa9, B:661:0x0fb3, B:665:0x0fbd, B:671:0x0fcc, B:673:0x0fd1, B:675:0x0fd6), top: B:1587:0x0f6a }] */
    /* JADX WARN: Removed duplicated region for block: B:665:0x0fbd A[Catch: all -> 0x0f6e, Exception -> 0x0f85, TRY_ENTER, TRY_LEAVE, TryCatch #115 {Exception -> 0x0f85, all -> 0x0f6e, blocks: (B:649:0x0f6a, B:658:0x0fa3, B:660:0x0fa9, B:661:0x0fb3, B:665:0x0fbd, B:671:0x0fcc, B:673:0x0fd1, B:675:0x0fd6), top: B:1587:0x0f6a }] */
    /* JADX WARN: Removed duplicated region for block: B:667:0x0fc3  */
    /* JADX WARN: Removed duplicated region for block: B:671:0x0fcc A[Catch: all -> 0x0f6e, Exception -> 0x0f85, TRY_ENTER, TryCatch #115 {Exception -> 0x0f85, all -> 0x0f6e, blocks: (B:649:0x0f6a, B:658:0x0fa3, B:660:0x0fa9, B:661:0x0fb3, B:665:0x0fbd, B:671:0x0fcc, B:673:0x0fd1, B:675:0x0fd6), top: B:1587:0x0f6a }] */
    /* JADX WARN: Removed duplicated region for block: B:673:0x0fd1 A[Catch: all -> 0x0f6e, Exception -> 0x0f85, TryCatch #115 {Exception -> 0x0f85, all -> 0x0f6e, blocks: (B:649:0x0f6a, B:658:0x0fa3, B:660:0x0fa9, B:661:0x0fb3, B:665:0x0fbd, B:671:0x0fcc, B:673:0x0fd1, B:675:0x0fd6), top: B:1587:0x0f6a }] */
    /* JADX WARN: Removed duplicated region for block: B:675:0x0fd6 A[Catch: all -> 0x0f6e, Exception -> 0x0f85, TRY_LEAVE, TryCatch #115 {Exception -> 0x0f85, all -> 0x0f6e, blocks: (B:649:0x0f6a, B:658:0x0fa3, B:660:0x0fa9, B:661:0x0fb3, B:665:0x0fbd, B:671:0x0fcc, B:673:0x0fd1, B:675:0x0fd6), top: B:1587:0x0f6a }] */
    /* JADX WARN: Removed duplicated region for block: B:678:0x0fdd  */
    /* JADX WARN: Removed duplicated region for block: B:684:0x1014  */
    /* JADX WARN: Removed duplicated region for block: B:722:0x10a6  */
    /* JADX WARN: Removed duplicated region for block: B:725:0x10b0 A[Catch: all -> 0x109a, Exception -> 0x109d, TRY_ENTER, TRY_LEAVE, TryCatch #111 {Exception -> 0x109d, all -> 0x109a, blocks: (B:712:0x1087, B:725:0x10b0, B:730:0x10e4, B:746:0x1152, B:749:0x1158), top: B:1595:0x1087 }] */
    /* JADX WARN: Removed duplicated region for block: B:743:0x114c  */
    /* JADX WARN: Removed duplicated region for block: B:761:0x119f  */
    /* JADX WARN: Removed duplicated region for block: B:773:0x11e2 A[Catch: all -> 0x13ed, Exception -> 0x13f9, TRY_ENTER, TRY_LEAVE, TryCatch #124 {Exception -> 0x13f9, all -> 0x13ed, blocks: (B:759:0x1199, B:773:0x11e2), top: B:1569:0x1199 }] */
    /* JADX WARN: Removed duplicated region for block: B:791:0x1220 A[Catch: all -> 0x13db, Exception -> 0x13e4, TRY_LEAVE, TryCatch #140 {Exception -> 0x13e4, all -> 0x13db, blocks: (B:789:0x121b, B:791:0x1220, B:801:0x1235, B:803:0x1243, B:805:0x124e, B:811:0x125c, B:845:0x1312, B:848:0x1322, B:816:0x127e, B:842:0x12fe), top: B:1538:0x121b }] */
    /* JADX WARN: Removed duplicated region for block: B:845:0x1312 A[Catch: all -> 0x13db, Exception -> 0x13e4, TRY_LEAVE, TryCatch #140 {Exception -> 0x13e4, all -> 0x13db, blocks: (B:789:0x121b, B:791:0x1220, B:801:0x1235, B:803:0x1243, B:805:0x124e, B:811:0x125c, B:845:0x1312, B:848:0x1322, B:816:0x127e, B:842:0x12fe), top: B:1538:0x121b }] */
    /* JADX WARN: Type inference failed for: r3v0, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v15 */
    /* JADX WARN: Type inference failed for: r3v17 */
    /* JADX WARN: Type inference failed for: r3v218 */
    /* JADX WARN: Type inference failed for: r3v219 */
    /* JADX WARN: Type inference failed for: r3v220 */
    /* JADX WARN: Type inference failed for: r3v221 */
    /* JADX WARN: Type inference failed for: r3v222 */
    /* JADX WARN: Type inference failed for: r3v227 */
    /* JADX WARN: Type inference failed for: r3v231 */
    /* JADX WARN: Type inference failed for: r3v234 */
    /* JADX WARN: Type inference failed for: r3v235 */
    /* JADX WARN: Type inference failed for: r3v236 */
    /* JADX WARN: Type inference failed for: r3v237 */
    /* JADX WARN: Type inference failed for: r3v242 */
    /* JADX WARN: Type inference failed for: r3v245, types: [int] */
    /* JADX WARN: Type inference failed for: r3v255 */
    /* JADX WARN: Type inference failed for: r62v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r62v1 */
    /* JADX WARN: Type inference failed for: r62v2 */
    /* JADX WARN: Type inference failed for: r62v3 */
    /* JADX WARN: Type inference failed for: r62v4 */
    /* renamed from: putMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$putMessages$192(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, int i, boolean z3, int i2, long j) {
        long quickReplyId;
        int i3;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        ArrayList<TLRPC$Message> arrayList2;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLiteDatabase sQLiteDatabase;
        Throwable th2;
        SQLiteDatabase sQLiteDatabase2;
        boolean z4;
        ArrayList<TLRPC$Message> arrayList3;
        SQLitePreparedStatement sQLitePreparedStatement15;
        HashMap hashMap;
        HashMap hashMap2;
        LongSparseArray longSparseArray;
        String str;
        String str2;
        HashMap hashMap3;
        HashMap hashMap4;
        String str3;
        LongSparseArray longSparseArray2;
        CharSequence charSequence;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        SparseArray sparseArray;
        SparseArray sparseArray2;
        LongSparseIntArray longSparseIntArray;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLitePreparedStatement sQLitePreparedStatement17;
        SQLitePreparedStatement sQLitePreparedStatement18;
        final ArrayList arrayList4;
        String str4;
        LongSparseIntArray longSparseIntArray2;
        SparseArray sparseArray3;
        HashMap hashMap5;
        final int i4;
        HashMap hashMap6;
        LongSparseArray longSparseArray6;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        SQLitePreparedStatement sQLitePreparedStatement21;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        ArrayList<Long> arrayList5;
        LongSparseIntArray longSparseIntArray3;
        LongSparseIntArray longSparseIntArray4;
        SQLitePreparedStatement sQLitePreparedStatement23;
        ArrayList<TopicsController.TopicUpdate> arrayList6;
        ArrayList<Long> arrayList7;
        SQLitePreparedStatement sQLitePreparedStatement24;
        String str5;
        LongSparseIntArray longSparseIntArray5;
        SQLitePreparedStatement executeFast3;
        ArrayList<TopicsController.TopicUpdate> arrayList8;
        LongSparseIntArray longSparseIntArray6;
        int i5;
        int i6;
        SQLitePreparedStatement sQLitePreparedStatement25;
        SQLitePreparedStatement sQLitePreparedStatement26;
        SQLitePreparedStatement sQLitePreparedStatement27;
        ArrayList<TLRPC$Message> arrayList9;
        int i7;
        int i8;
        Iterator it;
        ArrayList<Long> arrayList10;
        HashMap hashMap7;
        String str6;
        LongSparseIntArray longSparseIntArray7;
        int intValue;
        int intValue2;
        int intValue3;
        int i9;
        boolean z5;
        int i10;
        LongSparseIntArray longSparseIntArray8;
        SQLitePreparedStatement sQLitePreparedStatement28;
        SQLitePreparedStatement sQLitePreparedStatement29;
        LongSparseArray longSparseArray7;
        SQLiteCursor queryFinalized;
        boolean next;
        int i11;
        int max;
        int i12;
        int i13;
        int i14;
        int i15;
        int i16;
        int i17;
        LongSparseIntArray longSparseIntArray9;
        LongSparseIntArray longSparseIntArray10;
        LongSparseIntArray longSparseIntArray11;
        ArrayList<Long> arrayList11;
        LongSparseIntArray longSparseIntArray12;
        SparseArray sparseArray4;
        HashMap hashMap8;
        String str7;
        int i18;
        boolean z6;
        int i19;
        HashMap hashMap9;
        LongSparseArray longSparseArray8;
        ArrayList arrayList12;
        int i20;
        int i21;
        HashMap hashMap10;
        int i22;
        SQLitePreparedStatement sQLitePreparedStatement30;
        SQLitePreparedStatement sQLitePreparedStatement31;
        int i23;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        SQLitePreparedStatement sQLitePreparedStatement32;
        long j2;
        String str8;
        SQLitePreparedStatement sQLitePreparedStatement33;
        long j3;
        TLRPC$MessageMedia tLRPC$TL_messageMediaDocument;
        int i24;
        int i25;
        SQLitePreparedStatement sQLitePreparedStatement34;
        SQLitePreparedStatement sQLitePreparedStatement35;
        HashMap hashMap11;
        long j4;
        SQLitePreparedStatement sQLitePreparedStatement36;
        int i26;
        long j5;
        int i27;
        int i28;
        int i29;
        NativeByteBuffer nativeByteBuffer2;
        int i30;
        NativeByteBuffer nativeByteBuffer3;
        int i31;
        int i32;
        NativeByteBuffer nativeByteBuffer4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        int i33;
        int i34;
        int i35;
        NativeByteBuffer writeLocalParams;
        int i36;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        int i37;
        LongSparseIntArray longSparseIntArray13;
        LongSparseIntArray longSparseIntArray14;
        int intValue4;
        int i38;
        HashMap hashMap12;
        int intValue5;
        int i39;
        int i40;
        int i41;
        int i42;
        int i43;
        int i44;
        int i45;
        String str9;
        String str10;
        LongSparseArray longSparseArray9;
        HashMap hashMap13;
        HashMap hashMap14;
        String str11;
        LongSparseIntArray longSparseIntArray15;
        HashMap hashMap15;
        LongSparseArray longSparseArray10;
        LongSparseArray longSparseArray11;
        long j6;
        HashMap hashMap16;
        HashMap hashMap17;
        HashMap hashMap18;
        HashMap hashMap19;
        LongSparseArray longSparseArray12;
        LongSparseArray longSparseArray13;
        long j7;
        LongSparseArray longSparseArray14;
        LongSparseArray longSparseArray15;
        StringBuilder sb;
        int intValue6;
        int i46;
        ArrayList<TLRPC$Message> arrayList13;
        ArrayList<TLRPC$Message> arrayList14;
        ArrayList<TLRPC$Message> arrayList15;
        long j8;
        SQLiteDatabase sQLiteDatabase3;
        ArrayList<TLRPC$Message> arrayList16;
        ArrayList<TLRPC$Message> arrayList17;
        final MessagesStorage messagesStorage = this;
        ArrayList<TLRPC$Message> arrayList18 = arrayList;
        int i47 = "_";
        try {
            try {
                try {
                    if (arrayList18 != null) {
                        try {
                            if (!arrayList.isEmpty() && MessageObject.isQuickReply(arrayList18.get(0))) {
                                quickReplyId = j == 0 ? MessageObject.getQuickReplyId(messagesStorage.currentAccount, arrayList18.get(0)) : j;
                                i3 = 5;
                                z4 = i3 != 1;
                                boolean z7 = i3 != 5;
                                long clientUserId = getUserConfig().getClientUserId();
                                int i48 = 2;
                                if (!z4) {
                                    if (z) {
                                        messagesStorage.database.beginTransaction();
                                        arrayList16 = 1;
                                    } else {
                                        arrayList16 = 0;
                                    }
                                    SQLitePreparedStatement executeFast4 = messagesStorage.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                                    try {
                                        SQLitePreparedStatement executeFast5 = messagesStorage.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                                        try {
                                            ArrayList arrayList19 = new ArrayList();
                                            int i49 = 0;
                                            arrayList16 = arrayList16;
                                            while (i49 < arrayList.size()) {
                                                TLRPC$Message tLRPC$Message = arrayList18.get(i49);
                                                if (tLRPC$Message instanceof TLRPC$TL_messageEmpty) {
                                                    arrayList17 = arrayList16 == true ? 1 : 0;
                                                } else {
                                                    messagesStorage.fixUnsupportedMedia(tLRPC$Message);
                                                    executeFast4.requery();
                                                    int i50 = tLRPC$Message.id;
                                                    int i51 = tLRPC$Message.local_id;
                                                    if (i51 != 0) {
                                                        i50 = i51;
                                                    }
                                                    MessageObject.normalizeFlags(tLRPC$Message);
                                                    NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                                    tLRPC$Message.serializeToStream(nativeByteBuffer5);
                                                    long dialogId = MessageObject.getDialogId(tLRPC$Message);
                                                    executeFast4.bindInteger(1, i50);
                                                    executeFast4.bindLong(i48, dialogId);
                                                    executeFast4.bindInteger(3, tLRPC$Message.send_state);
                                                    executeFast4.bindInteger(4, tLRPC$Message.date);
                                                    executeFast4.bindByteBuffer(5, nativeByteBuffer5);
                                                    executeFast4.bindInteger(6, tLRPC$Message.ttl);
                                                    executeFast4.step();
                                                    arrayList17 = arrayList16 == true ? 1 : 0;
                                                    try {
                                                        if (tLRPC$Message.random_id != 0) {
                                                            executeFast5.requery();
                                                            executeFast5.bindLong(1, tLRPC$Message.random_id);
                                                            executeFast5.bindInteger(2, i50);
                                                            executeFast5.bindLong(3, tLRPC$Message.dialog_id);
                                                            executeFast5.step();
                                                        }
                                                        nativeByteBuffer5.reuse();
                                                        if (!arrayList19.contains(Long.valueOf(dialogId))) {
                                                            arrayList19.add(Long.valueOf(dialogId));
                                                        }
                                                    } catch (Exception e) {
                                                        e = e;
                                                        arrayList2 = arrayList17;
                                                        exc = e;
                                                        sQLitePreparedStatement14 = executeFast5;
                                                        sQLitePreparedStatement3 = executeFast4;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        try {
                                                            messagesStorage.checkSQLException(exc);
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 == null) {
                                                            }
                                                        } catch (Throwable th3) {
                                                            th2 = th3;
                                                            th = th2;
                                                            if (arrayList2 != null && (sQLiteDatabase = messagesStorage.database) != null) {
                                                                sQLiteDatabase.commitTransaction();
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                                sQLitePreparedStatement3.dispose();
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                                sQLitePreparedStatement8.dispose();
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                                sQLitePreparedStatement14.dispose();
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                                sQLitePreparedStatement7.dispose();
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                                sQLitePreparedStatement6.dispose();
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                                sQLitePreparedStatement5.dispose();
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                                sQLitePreparedStatement13.dispose();
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                                sQLitePreparedStatement2.dispose();
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                                sQLitePreparedStatement12.dispose();
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                                sQLitePreparedStatement9.dispose();
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                                sQLitePreparedStatement10.dispose();
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                                sQLitePreparedStatement.dispose();
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                                sQLitePreparedStatement4.dispose();
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                                sQLitePreparedStatement11.dispose();
                                                            }
                                                            throw th;
                                                        }
                                                    } catch (Throwable th4) {
                                                        th = th4;
                                                        arrayList2 = arrayList17;
                                                        th = th;
                                                        sQLitePreparedStatement14 = executeFast5;
                                                        sQLitePreparedStatement3 = executeFast4;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                }
                                                i49++;
                                                arrayList16 = arrayList17;
                                                i48 = 2;
                                            }
                                            arrayList17 = arrayList16 == true ? 1 : 0;
                                            executeFast4.dispose();
                                            try {
                                                executeFast5.dispose();
                                                if (z) {
                                                    messagesStorage.database.commitTransaction();
                                                    arrayList15 = null;
                                                } else {
                                                    arrayList15 = arrayList17;
                                                }
                                                i47 = arrayList19.size();
                                                for (int i52 = 0; i52 < i47; i52++) {
                                                    messagesStorage.broadcastScheduledMessagesChange((Long) arrayList19.get(i52));
                                                }
                                            } catch (Exception e2) {
                                                arrayList2 = arrayList17;
                                                exc = e2;
                                                sQLitePreparedStatement14 = executeFast5;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 == null) {
                                                }
                                            } catch (Throwable th5) {
                                                arrayList2 = arrayList17;
                                                th = th5;
                                                sQLitePreparedStatement14 = executeFast5;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e3) {
                                            e = e3;
                                            arrayList17 = arrayList16;
                                        } catch (Throwable th6) {
                                            th = th6;
                                            arrayList17 = arrayList16;
                                        }
                                    } catch (Exception e4) {
                                        arrayList2 = arrayList16 == true ? 1 : 0;
                                        exc = e4;
                                        sQLitePreparedStatement3 = executeFast4;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement6 = null;
                                        sQLitePreparedStatement14 = null;
                                        messagesStorage.checkSQLException(exc);
                                        if (arrayList2 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement14 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement11 == null) {
                                        }
                                    } catch (Throwable th7) {
                                        arrayList2 = arrayList16 == true ? 1 : 0;
                                        th = th7;
                                        sQLitePreparedStatement3 = executeFast4;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement6 = null;
                                        sQLitePreparedStatement14 = null;
                                        if (arrayList2 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement14 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        throw th;
                                    }
                                } else if (z7) {
                                    if (z) {
                                        messagesStorage.database.beginTransaction();
                                        arrayList13 = 1;
                                    } else {
                                        arrayList13 = 0;
                                    }
                                    SQLitePreparedStatement executeFast6 = messagesStorage.database.executeFast("REPLACE INTO quick_replies_messages VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                                    try {
                                        ArrayList arrayList20 = new ArrayList();
                                        int i53 = 0;
                                        arrayList13 = arrayList13;
                                        while (i53 < arrayList.size()) {
                                            TLRPC$Message tLRPC$Message2 = arrayList18.get(i53);
                                            if (tLRPC$Message2 instanceof TLRPC$TL_messageEmpty) {
                                                arrayList14 = arrayList13 == true ? 1 : 0;
                                                j8 = quickReplyId;
                                            } else {
                                                messagesStorage.fixUnsupportedMedia(tLRPC$Message2);
                                                executeFast6.requery();
                                                int i54 = tLRPC$Message2.id;
                                                int i55 = tLRPC$Message2.local_id;
                                                if (i55 != 0) {
                                                    i54 = i55;
                                                }
                                                MessageObject.normalizeFlags(tLRPC$Message2);
                                                NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                tLRPC$Message2.serializeToStream(nativeByteBuffer6);
                                                long quickReplyId2 = MessageObject.getQuickReplyId(messagesStorage.currentAccount, tLRPC$Message2);
                                                if (quickReplyId2 != 0) {
                                                    SQLiteDatabase sQLiteDatabase4 = messagesStorage.database;
                                                    Locale locale = Locale.ENGLISH;
                                                    arrayList14 = arrayList13 == true ? 1 : 0;
                                                    try {
                                                        j8 = quickReplyId;
                                                        sQLiteDatabase4.executeFast(String.format(locale, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", Integer.valueOf(i54), Long.valueOf(quickReplyId2))).stepThis().dispose();
                                                    } catch (Exception e5) {
                                                        e = e5;
                                                        arrayList2 = arrayList14;
                                                        exc = e;
                                                        sQLitePreparedStatement3 = executeFast6;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (arrayList2 != null) {
                                                            sQLiteDatabase2.commitTransaction();
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 == null) {
                                                        }
                                                    } catch (Throwable th8) {
                                                        th = th8;
                                                        arrayList2 = arrayList14;
                                                        th = th;
                                                        sQLitePreparedStatement3 = executeFast6;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } else {
                                                    arrayList14 = arrayList13 == true ? 1 : 0;
                                                    j8 = quickReplyId;
                                                }
                                                long dialogId2 = MessageObject.getDialogId(tLRPC$Message2);
                                                executeFast6.bindInteger(1, i54);
                                                executeFast6.bindLong(2, quickReplyId2);
                                                executeFast6.bindInteger(3, tLRPC$Message2.send_state);
                                                executeFast6.bindInteger(4, tLRPC$Message2.date);
                                                executeFast6.bindByteBuffer(5, nativeByteBuffer6);
                                                executeFast6.bindInteger(6, tLRPC$Message2.ttl);
                                                executeFast6.step();
                                                nativeByteBuffer6.reuse();
                                                if (!arrayList20.contains(Long.valueOf(dialogId2))) {
                                                    arrayList20.add(Long.valueOf(dialogId2));
                                                }
                                            }
                                            i53++;
                                            arrayList18 = arrayList;
                                            arrayList13 = arrayList14;
                                            quickReplyId = j8;
                                        }
                                        arrayList14 = arrayList13 == true ? 1 : 0;
                                        long j9 = quickReplyId;
                                        executeFast6.dispose();
                                        if (z) {
                                            messagesStorage.database.commitTransaction();
                                            arrayList15 = null;
                                        } else {
                                            arrayList15 = arrayList14;
                                        }
                                        i47 = arrayList20.size();
                                        int i56 = 0;
                                        while (i56 < i47) {
                                            long j10 = j9;
                                            messagesStorage.broadcastQuickRepliesMessagesChange((Long) arrayList20.get(i56), j10);
                                            i56++;
                                            j9 = j10;
                                        }
                                    } catch (Exception e6) {
                                        e = e6;
                                        arrayList14 = arrayList13;
                                    } catch (Throwable th9) {
                                        th = th9;
                                        arrayList14 = arrayList13;
                                    }
                                } else {
                                    long j11 = quickReplyId;
                                    if (z3) {
                                        arrayList3 = arrayList;
                                        TLRPC$Message tLRPC$Message3 = arrayList3.get(0);
                                        if (tLRPC$Message3.dialog_id == 0) {
                                            MessageObject.getDialogId(tLRPC$Message3);
                                        }
                                        SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Message3.dialog_id, new Object[0]);
                                        int intValue7 = queryFinalized2.next() ? queryFinalized2.intValue(0) : -1;
                                        queryFinalized2.dispose();
                                        if (intValue7 != 0) {
                                            return;
                                        }
                                    } else {
                                        arrayList3 = arrayList;
                                    }
                                    if (z) {
                                        messagesStorage.database.beginTransaction();
                                    }
                                    LongSparseArray longSparseArray16 = new LongSparseArray();
                                    LongSparseIntArray longSparseIntArray16 = new LongSparseIntArray();
                                    LongSparseIntArray longSparseIntArray17 = new LongSparseIntArray();
                                    LongSparseIntArray longSparseIntArray18 = new LongSparseIntArray();
                                    LongSparseIntArray longSparseIntArray19 = new LongSparseIntArray();
                                    HashMap hashMap20 = new HashMap();
                                    LongSparseArray longSparseArray17 = new LongSparseArray();
                                    LongSparseIntArray longSparseIntArray20 = longSparseIntArray18;
                                    LongSparseIntArray longSparseIntArray21 = new LongSparseIntArray();
                                    LongSparseIntArray longSparseIntArray22 = longSparseIntArray17;
                                    LongSparseArray longSparseArray18 = new LongSparseArray();
                                    String str12 = "_";
                                    LongSparseArray longSparseArray19 = new LongSparseArray();
                                    HashMap hashMap21 = new HashMap();
                                    HashMap hashMap22 = new HashMap();
                                    LongSparseArray longSparseArray20 = longSparseArray16;
                                    HashMap hashMap23 = new HashMap();
                                    LongSparseIntArray longSparseIntArray23 = longSparseIntArray19;
                                    HashMap hashMap24 = new HashMap();
                                    HashMap hashMap25 = new HashMap();
                                    LongSparseIntArray longSparseIntArray24 = longSparseIntArray16;
                                    HashMap hashMap26 = new HashMap();
                                    SparseArray sparseArray5 = new SparseArray();
                                    long j12 = clientUserId;
                                    HashMap hashMap27 = new HashMap();
                                    HashMap hashMap28 = new HashMap();
                                    SparseArray sparseArray6 = sparseArray5;
                                    HashMap hashMap29 = hashMap20;
                                    SQLitePreparedStatement executeFast7 = messagesStorage.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                                    try {
                                        sQLitePreparedStatement15 = executeFast7;
                                        try {
                                            SQLitePreparedStatement executeFast8 = messagesStorage.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                                            try {
                                                SQLitePreparedStatement executeFast9 = messagesStorage.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                                                try {
                                                    sQLitePreparedStatement8 = executeFast8;
                                                    try {
                                                        SQLitePreparedStatement executeFast10 = messagesStorage.database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?, ?)");
                                                        try {
                                                            sQLitePreparedStatement7 = executeFast10;
                                                            try {
                                                                sQLitePreparedStatement6 = messagesStorage.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                                                sQLitePreparedStatement14 = executeFast9;
                                                                LongSparseArray longSparseArray21 = null;
                                                                int i57 = 0;
                                                                LongSparseArray longSparseArray22 = null;
                                                                LongSparseArray longSparseArray23 = null;
                                                                while (true) {
                                                                    try {
                                                                        hashMap = hashMap28;
                                                                        hashMap2 = hashMap27;
                                                                        longSparseArray = longSparseArray21;
                                                                        str = " ";
                                                                        if (i57 >= arrayList.size()) {
                                                                            break;
                                                                        }
                                                                        try {
                                                                            TLRPC$Message tLRPC$Message4 = arrayList3.get(i57);
                                                                            int i58 = tLRPC$Message4.id;
                                                                            MessageObject.getDialogId(tLRPC$Message4);
                                                                            int i59 = i57;
                                                                            HashMap hashMap30 = hashMap21;
                                                                            HashMap hashMap31 = hashMap22;
                                                                            long topicId = MessageObject.getTopicId(messagesStorage.currentAccount, tLRPC$Message4, messagesStorage.isForum(tLRPC$Message4.dialog_id));
                                                                            if (tLRPC$Message4.mentioned && tLRPC$Message4.media_unread) {
                                                                                str9 = ",";
                                                                                ArrayList arrayList21 = (ArrayList) longSparseArray19.get(tLRPC$Message4.dialog_id);
                                                                                if (arrayList21 == null) {
                                                                                    arrayList21 = new ArrayList();
                                                                                    str10 = " AND topic_id = ";
                                                                                    longSparseArray19.put(tLRPC$Message4.dialog_id, arrayList21);
                                                                                } else {
                                                                                    str10 = " AND topic_id = ";
                                                                                }
                                                                                arrayList21.add(Integer.valueOf(i58));
                                                                                if (topicId != 0) {
                                                                                    FileLog.d("add message with message to " + tLRPC$Message4.dialog_id + " " + topicId);
                                                                                    TopicKey of = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                                    ArrayList arrayList22 = (ArrayList) hashMap25.get(of);
                                                                                    if (arrayList22 == null) {
                                                                                        arrayList22 = new ArrayList();
                                                                                        hashMap25.put(of, arrayList22);
                                                                                    }
                                                                                    arrayList22.add(Integer.valueOf(i58));
                                                                                }
                                                                            } else {
                                                                                str9 = ",";
                                                                                str10 = " AND topic_id = ";
                                                                            }
                                                                            if ((tLRPC$Message4.action instanceof TLRPC$TL_messageActionHistoryClear) || ((MessageObject.isOut(tLRPC$Message4) && !tLRPC$Message4.from_scheduled && topicId == 0) || ((tLRPC$Message4.id <= 0 && !MessageObject.isUnread(tLRPC$Message4)) || (messagesStorage.isForum(tLRPC$Message4.dialog_id) && topicId == 0)))) {
                                                                                longSparseArray9 = longSparseArray19;
                                                                                hashMap13 = hashMap30;
                                                                                hashMap14 = hashMap31;
                                                                                str11 = str9;
                                                                                longSparseIntArray15 = longSparseIntArray21;
                                                                                hashMap15 = hashMap25;
                                                                                longSparseArray10 = longSparseArray17;
                                                                            } else {
                                                                                int i60 = longSparseIntArray21.get(tLRPC$Message4.dialog_id, -1);
                                                                                if (i60 == -1) {
                                                                                    SQLiteCursor queryFinalized3 = messagesStorage.database.queryFinalized("SELECT inbox_max FROM dialogs WHERE did = " + tLRPC$Message4.dialog_id, new Object[0]);
                                                                                    i60 = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                                                    queryFinalized3.dispose();
                                                                                    longSparseIntArray21.put(tLRPC$Message4.dialog_id, i60);
                                                                                }
                                                                                FileLog.d("update messageRead currentMaxId = " + i60 + " dialogId = " + tLRPC$Message4.dialog_id);
                                                                                int i61 = tLRPC$Message4.id;
                                                                                if (i61 >= 0 && i60 >= i61) {
                                                                                    str11 = str9;
                                                                                    if (topicId == 0) {
                                                                                        TopicKey of2 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                                        hashMap13 = hashMap30;
                                                                                        Integer num = (Integer) hashMap13.get(of2);
                                                                                        if (num == null) {
                                                                                            longSparseIntArray15 = longSparseIntArray21;
                                                                                            i46 = -1;
                                                                                            intValue6 = -1;
                                                                                        } else {
                                                                                            intValue6 = num.intValue();
                                                                                            longSparseIntArray15 = longSparseIntArray21;
                                                                                            i46 = -1;
                                                                                        }
                                                                                        if (intValue6 == i46) {
                                                                                            SQLiteDatabase sQLiteDatabase5 = messagesStorage.database;
                                                                                            StringBuilder sb2 = new StringBuilder();
                                                                                            hashMap15 = hashMap25;
                                                                                            sb2.append("SELECT top_message FROM topics WHERE did = ");
                                                                                            longSparseArray10 = longSparseArray17;
                                                                                            longSparseArray9 = longSparseArray19;
                                                                                            sb2.append(tLRPC$Message4.dialog_id);
                                                                                            sb2.append(str10);
                                                                                            sb2.append(topicId);
                                                                                            SQLiteCursor queryFinalized4 = sQLiteDatabase5.queryFinalized(sb2.toString(), new Object[0]);
                                                                                            int intValue8 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                                                                                            queryFinalized4.dispose();
                                                                                            hashMap13.put(of2, Integer.valueOf(intValue8));
                                                                                            intValue6 = intValue8;
                                                                                        } else {
                                                                                            longSparseArray9 = longSparseArray19;
                                                                                            hashMap15 = hashMap25;
                                                                                            longSparseArray10 = longSparseArray17;
                                                                                        }
                                                                                        if (intValue6 >= tLRPC$Message4.id || !tLRPC$Message4.unread || tLRPC$Message4.out) {
                                                                                            hashMap14 = hashMap31;
                                                                                        } else {
                                                                                            hashMap14 = hashMap31;
                                                                                            Integer num2 = (Integer) hashMap14.get(of2);
                                                                                            if (num2 == null) {
                                                                                                num2 = 0;
                                                                                            }
                                                                                            hashMap14.put(of2, Integer.valueOf(num2.intValue() + 1));
                                                                                        }
                                                                                        if (intValue6 < tLRPC$Message4.id) {
                                                                                            Integer num3 = (Integer) hashMap23.get(of2);
                                                                                            if (num3 == null) {
                                                                                                num3 = 0;
                                                                                            }
                                                                                            hashMap23.put(of2, Integer.valueOf(num3.intValue() + 1));
                                                                                        }
                                                                                    } else {
                                                                                        longSparseArray9 = longSparseArray19;
                                                                                        hashMap15 = hashMap25;
                                                                                        hashMap13 = hashMap30;
                                                                                        hashMap14 = hashMap31;
                                                                                        longSparseArray10 = longSparseArray17;
                                                                                        longSparseIntArray15 = longSparseIntArray21;
                                                                                    }
                                                                                }
                                                                                StringBuilder sb3 = (StringBuilder) longSparseArray17.get(tLRPC$Message4.dialog_id);
                                                                                if (sb3 == null) {
                                                                                    sb3 = new StringBuilder();
                                                                                    longSparseArray17.put(tLRPC$Message4.dialog_id, sb3);
                                                                                }
                                                                                if (sb3.length() > 0) {
                                                                                    str11 = str9;
                                                                                    sb3.append(str11);
                                                                                } else {
                                                                                    str11 = str9;
                                                                                }
                                                                                sb3.append(i58);
                                                                                ArrayList arrayList23 = (ArrayList) longSparseArray18.get(tLRPC$Message4.dialog_id);
                                                                                if (arrayList23 == null) {
                                                                                    arrayList23 = new ArrayList();
                                                                                    longSparseArray18.put(tLRPC$Message4.dialog_id, arrayList23);
                                                                                }
                                                                                arrayList23.add(Integer.valueOf(i58));
                                                                                if (topicId == 0) {
                                                                                }
                                                                            }
                                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message4)) {
                                                                                if (longSparseArray == null) {
                                                                                    LongSparseArray longSparseArray24 = new LongSparseArray();
                                                                                    LongSparseArray longSparseArray25 = new LongSparseArray();
                                                                                    longSparseArray13 = new LongSparseArray();
                                                                                    hashMap16 = hashMap13;
                                                                                    longSparseArray21 = longSparseArray24;
                                                                                    longSparseArray12 = longSparseArray25;
                                                                                } else {
                                                                                    hashMap16 = hashMap13;
                                                                                    longSparseArray12 = longSparseArray22;
                                                                                    longSparseArray13 = longSparseArray23;
                                                                                    longSparseArray21 = longSparseArray;
                                                                                }
                                                                                StringBuilder sb4 = (StringBuilder) longSparseArray21.get(tLRPC$Message4.dialog_id);
                                                                                if (sb4 == null) {
                                                                                    sb4 = new StringBuilder();
                                                                                    longSparseArray11 = longSparseArray18;
                                                                                    j7 = topicId;
                                                                                    longSparseArray21.put(tLRPC$Message4.dialog_id, sb4);
                                                                                } else {
                                                                                    longSparseArray11 = longSparseArray18;
                                                                                    j7 = topicId;
                                                                                }
                                                                                if (sb4.length() > 0) {
                                                                                    sb4.append(str11);
                                                                                }
                                                                                sb4.append(i58);
                                                                                ArrayList arrayList24 = (ArrayList) longSparseArray12.get(tLRPC$Message4.dialog_id);
                                                                                if (arrayList24 == null) {
                                                                                    arrayList24 = new ArrayList();
                                                                                    longSparseArray12.put(tLRPC$Message4.dialog_id, arrayList24);
                                                                                }
                                                                                arrayList24.add(Integer.valueOf(i58));
                                                                                SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray13.get(tLRPC$Message4.dialog_id);
                                                                                if (sparseIntArray == null) {
                                                                                    sparseIntArray = new SparseIntArray();
                                                                                    longSparseArray13.put(tLRPC$Message4.dialog_id, sparseIntArray);
                                                                                }
                                                                                sparseIntArray.put(i58, MediaDataController.getMediaType(tLRPC$Message4));
                                                                                if (j7 != 0) {
                                                                                    longSparseArray15 = longSparseArray13;
                                                                                    j6 = j7;
                                                                                    TopicKey of3 = TopicKey.of(tLRPC$Message4.dialog_id, j6);
                                                                                    hashMap18 = hashMap2;
                                                                                    StringBuilder sb5 = (StringBuilder) hashMap18.get(of3);
                                                                                    if (sb5 == null) {
                                                                                        longSparseArray14 = longSparseArray12;
                                                                                        sb = new StringBuilder();
                                                                                        hashMap18.put(of3, sb);
                                                                                    } else {
                                                                                        longSparseArray14 = longSparseArray12;
                                                                                        sb = sb5;
                                                                                    }
                                                                                    if (sb.length() > 0) {
                                                                                        sb.append(str11);
                                                                                    }
                                                                                    sb.append(i58);
                                                                                    hashMap17 = hashMap;
                                                                                    ArrayList arrayList25 = (ArrayList) hashMap17.get(of3);
                                                                                    if (arrayList25 == null) {
                                                                                        arrayList25 = new ArrayList();
                                                                                        hashMap17.put(of3, arrayList25);
                                                                                    }
                                                                                    arrayList25.add(Integer.valueOf(i58));
                                                                                } else {
                                                                                    longSparseArray14 = longSparseArray12;
                                                                                    longSparseArray15 = longSparseArray13;
                                                                                    hashMap17 = hashMap;
                                                                                    hashMap18 = hashMap2;
                                                                                    j6 = j7;
                                                                                }
                                                                                longSparseArray22 = longSparseArray14;
                                                                                longSparseArray23 = longSparseArray15;
                                                                            } else {
                                                                                longSparseArray11 = longSparseArray18;
                                                                                j6 = topicId;
                                                                                hashMap16 = hashMap13;
                                                                                hashMap17 = hashMap;
                                                                                hashMap18 = hashMap2;
                                                                                longSparseArray21 = longSparseArray;
                                                                            }
                                                                            if (messagesStorage.isValidKeyboardToSave(tLRPC$Message4)) {
                                                                                TopicKey of4 = TopicKey.of(tLRPC$Message4.dialog_id, j6);
                                                                                hashMap19 = hashMap29;
                                                                                TLRPC$Message tLRPC$Message5 = (TLRPC$Message) hashMap19.get(of4);
                                                                                if (tLRPC$Message5 == null || tLRPC$Message5.id < tLRPC$Message4.id) {
                                                                                    hashMap19.put(of4, tLRPC$Message4);
                                                                                }
                                                                            } else {
                                                                                hashMap19 = hashMap29;
                                                                            }
                                                                            i57 = i59 + 1;
                                                                            arrayList3 = arrayList;
                                                                            hashMap22 = hashMap14;
                                                                            hashMap29 = hashMap19;
                                                                            hashMap27 = hashMap18;
                                                                            longSparseArray18 = longSparseArray11;
                                                                            longSparseIntArray21 = longSparseIntArray15;
                                                                            hashMap21 = hashMap16;
                                                                            longSparseArray19 = longSparseArray9;
                                                                            hashMap28 = hashMap17;
                                                                            longSparseArray17 = longSparseArray10;
                                                                            hashMap25 = hashMap15;
                                                                        } catch (Exception e7) {
                                                                            exc = e7;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            sQLitePreparedStatement5 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement13 = null;
                                                                            sQLitePreparedStatement12 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            sQLitePreparedStatement9 = null;
                                                                            messagesStorage.checkSQLException(exc);
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                            }
                                                                        } catch (Throwable th10) {
                                                                            th = th10;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            sQLitePreparedStatement5 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement13 = null;
                                                                            sQLitePreparedStatement12 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            sQLitePreparedStatement9 = null;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e8) {
                                                                        e = e8;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        sQLitePreparedStatement5 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement13 = null;
                                                                        sQLitePreparedStatement12 = null;
                                                                        sQLitePreparedStatement11 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement9 = null;
                                                                    } catch (Throwable th11) {
                                                                        th2 = th11;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        sQLitePreparedStatement5 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement13 = null;
                                                                        sQLitePreparedStatement12 = null;
                                                                        sQLitePreparedStatement11 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement9 = null;
                                                                    }
                                                                }
                                                                LongSparseArray longSparseArray26 = longSparseArray19;
                                                                HashMap hashMap32 = hashMap22;
                                                                HashMap hashMap33 = hashMap25;
                                                                CharSequence charSequence2 = ",";
                                                                HashMap hashMap34 = hashMap;
                                                                LongSparseArray longSparseArray27 = longSparseArray17;
                                                                String str13 = " AND topic_id = ";
                                                                LongSparseArray longSparseArray28 = longSparseArray18;
                                                                HashMap hashMap35 = hashMap29;
                                                                if (!hashMap35.isEmpty()) {
                                                                    for (TopicKey topicKey : hashMap35.keySet()) {
                                                                        getMediaDataController().putBotKeyboard(topicKey, (TLRPC$Message) hashMap35.get(topicKey));
                                                                    }
                                                                }
                                                                if (longSparseArray != null) {
                                                                    int size = longSparseArray.size();
                                                                    int i62 = 0;
                                                                    longSparseArray5 = null;
                                                                    sparseArray = null;
                                                                    while (i62 < size) {
                                                                        String str14 = str13;
                                                                        HashMap hashMap36 = hashMap32;
                                                                        LongSparseArray longSparseArray29 = longSparseArray;
                                                                        long keyAt = longSparseArray29.keyAt(i62);
                                                                        longSparseArray = longSparseArray29;
                                                                        LongSparseArray longSparseArray30 = longSparseArray23;
                                                                        int i63 = size;
                                                                        SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray30.get(keyAt);
                                                                        LongSparseArray longSparseArray31 = longSparseArray5;
                                                                        LongSparseArray longSparseArray32 = longSparseArray22;
                                                                        ArrayList arrayList26 = (ArrayList) longSparseArray32.get(keyAt);
                                                                        LongSparseArray longSparseArray33 = longSparseArray28;
                                                                        HashMap hashMap37 = hashMap23;
                                                                        String str15 = str;
                                                                        LongSparseArray longSparseArray34 = longSparseArray27;
                                                                        CharSequence charSequence3 = charSequence2;
                                                                        int i64 = 0;
                                                                        SQLiteCursor queryFinalized5 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d", ((StringBuilder) longSparseArray29.valueAt(i62)).toString(), Long.valueOf(keyAt)), new Object[0]);
                                                                        SparseIntArray sparseIntArray3 = null;
                                                                        while (queryFinalized5.next()) {
                                                                            int intValue9 = queryFinalized5.intValue(i64);
                                                                            int intValue10 = queryFinalized5.intValue(1);
                                                                            if (intValue10 == sparseIntArray2.get(intValue9)) {
                                                                                arrayList26.remove(Integer.valueOf(intValue9));
                                                                            } else {
                                                                                if (sparseIntArray3 == null) {
                                                                                    LongSparseArray longSparseArray35 = longSparseArray31 == null ? new LongSparseArray() : longSparseArray31;
                                                                                    SparseIntArray sparseIntArray4 = (SparseIntArray) longSparseArray35.get(keyAt);
                                                                                    if (sparseIntArray4 == null) {
                                                                                        sparseIntArray4 = new SparseIntArray();
                                                                                        longSparseArray35.put(keyAt, sparseIntArray4);
                                                                                    }
                                                                                    longSparseArray31 = longSparseArray35;
                                                                                    sparseIntArray3 = sparseIntArray4;
                                                                                }
                                                                                sparseIntArray3.put(intValue9, intValue10);
                                                                            }
                                                                            i64 = 0;
                                                                        }
                                                                        queryFinalized5.dispose();
                                                                        if (sparseArray == null) {
                                                                            sparseArray = new SparseArray();
                                                                        }
                                                                        int size2 = arrayList26.size();
                                                                        int i65 = 0;
                                                                        while (i65 < size2) {
                                                                            int intValue11 = ((Integer) arrayList26.get(i65)).intValue();
                                                                            int i66 = sparseIntArray2.get(intValue11);
                                                                            LongSparseIntArray longSparseIntArray25 = (LongSparseIntArray) sparseArray.get(i66);
                                                                            if (longSparseIntArray25 == null) {
                                                                                longSparseIntArray25 = new LongSparseIntArray();
                                                                                sparseArray.put(i66, longSparseIntArray25);
                                                                                i40 = size2;
                                                                                i41 = 0;
                                                                                i39 = Integer.MIN_VALUE;
                                                                            } else {
                                                                                i39 = Integer.MIN_VALUE;
                                                                                i40 = size2;
                                                                                i41 = longSparseIntArray25.get(keyAt, Integer.MIN_VALUE);
                                                                            }
                                                                            if (i41 == i39) {
                                                                                i41 = 0;
                                                                            }
                                                                            longSparseIntArray25.put(keyAt, i41 + 1);
                                                                            if (sparseIntArray3 != null && (i42 = sparseIntArray3.get(intValue11, -1)) >= 0) {
                                                                                LongSparseIntArray longSparseIntArray26 = (LongSparseIntArray) sparseArray.get(i42);
                                                                                if (longSparseIntArray26 == null) {
                                                                                    longSparseIntArray26 = new LongSparseIntArray();
                                                                                    sparseArray.put(i42, longSparseIntArray26);
                                                                                    i43 = Integer.MIN_VALUE;
                                                                                    i44 = 0;
                                                                                } else {
                                                                                    i43 = Integer.MIN_VALUE;
                                                                                    i44 = longSparseIntArray26.get(keyAt, Integer.MIN_VALUE);
                                                                                }
                                                                                if (i44 == i43) {
                                                                                    i45 = -1;
                                                                                    i44 = 0;
                                                                                } else {
                                                                                    i45 = -1;
                                                                                }
                                                                                longSparseIntArray26.put(keyAt, i44 + i45);
                                                                            }
                                                                            i65++;
                                                                            size2 = i40;
                                                                        }
                                                                        i62++;
                                                                        longSparseArray28 = longSparseArray33;
                                                                        longSparseArray5 = longSparseArray31;
                                                                        longSparseArray23 = longSparseArray30;
                                                                        size = i63;
                                                                        longSparseArray22 = longSparseArray32;
                                                                        hashMap23 = hashMap37;
                                                                        hashMap32 = hashMap36;
                                                                        str13 = str14;
                                                                        str = str15;
                                                                        charSequence2 = charSequence3;
                                                                        longSparseArray27 = longSparseArray34;
                                                                    }
                                                                    str2 = str13;
                                                                    hashMap3 = hashMap32;
                                                                    hashMap4 = hashMap23;
                                                                    str3 = str;
                                                                    longSparseArray2 = longSparseArray27;
                                                                    charSequence = charSequence2;
                                                                    longSparseArray3 = longSparseArray28;
                                                                    longSparseArray4 = longSparseArray23;
                                                                } else {
                                                                    str2 = str13;
                                                                    hashMap3 = hashMap32;
                                                                    hashMap4 = hashMap23;
                                                                    str3 = " ";
                                                                    longSparseArray2 = longSparseArray27;
                                                                    charSequence = charSequence2;
                                                                    longSparseArray3 = longSparseArray28;
                                                                    longSparseArray4 = longSparseArray23;
                                                                    longSparseArray5 = null;
                                                                    sparseArray = null;
                                                                }
                                                                Iterator it2 = hashMap2.keySet().iterator();
                                                                while (it2.hasNext()) {
                                                                    TopicKey topicKey2 = (TopicKey) it2.next();
                                                                    ArrayList arrayList27 = (ArrayList) hashMap34.get(topicKey2);
                                                                    SparseArray sparseArray7 = sparseArray;
                                                                    SQLiteCursor queryFinalized6 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid, type FROM media_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", ((StringBuilder) hashMap2.get(topicKey2)).toString(), Long.valueOf(topicKey2.dialogId), Long.valueOf(topicKey2.topicId)), new Object[0]);
                                                                    SparseIntArray sparseIntArray5 = null;
                                                                    while (queryFinalized6.next()) {
                                                                        LongSparseArray longSparseArray36 = longSparseArray4;
                                                                        int intValue12 = queryFinalized6.intValue(0);
                                                                        int intValue13 = queryFinalized6.intValue(1);
                                                                        if (intValue13 == ((SparseIntArray) longSparseArray36.get(topicKey2.dialogId)).get(intValue12)) {
                                                                            arrayList27.remove(Integer.valueOf(intValue12));
                                                                        } else {
                                                                            if (sparseIntArray5 == null) {
                                                                                if (longSparseArray5 == null) {
                                                                                    longSparseArray5 = new LongSparseArray();
                                                                                }
                                                                                sparseIntArray5 = (SparseIntArray) longSparseArray5.get(topicKey2.dialogId);
                                                                                if (sparseIntArray5 == null) {
                                                                                    sparseIntArray5 = new SparseIntArray();
                                                                                    longSparseArray5.put(topicKey2.dialogId, sparseIntArray5);
                                                                                }
                                                                            }
                                                                            sparseIntArray5.put(intValue12, intValue13);
                                                                        }
                                                                        longSparseArray4 = longSparseArray36;
                                                                    }
                                                                    LongSparseArray longSparseArray37 = longSparseArray4;
                                                                    queryFinalized6.dispose();
                                                                    SparseIntArray sparseIntArray6 = (SparseIntArray) longSparseArray37.get(topicKey2.dialogId);
                                                                    int size3 = arrayList27.size();
                                                                    int i67 = 0;
                                                                    while (i67 < size3) {
                                                                        int intValue14 = ((Integer) arrayList27.get(i67)).intValue();
                                                                        int i68 = sparseIntArray6.get(intValue14);
                                                                        Iterator it3 = it2;
                                                                        SparseArray sparseArray8 = sparseArray6;
                                                                        HashMap hashMap38 = hashMap34;
                                                                        HashMap hashMap39 = (HashMap) sparseArray8.get(i68);
                                                                        if (hashMap39 == null) {
                                                                            hashMap39 = new HashMap();
                                                                            sparseArray8.put(i68, hashMap39);
                                                                        } else {
                                                                            Integer num4 = (Integer) hashMap39.get(topicKey2);
                                                                            if (num4 != null) {
                                                                                intValue4 = num4.intValue();
                                                                                hashMap39.put(topicKey2, Integer.valueOf(intValue4 + 1));
                                                                                if (sparseIntArray5 != null && (i38 = sparseIntArray5.get(intValue14, -1)) >= 0) {
                                                                                    hashMap12 = (HashMap) sparseArray8.get(i38);
                                                                                    if (hashMap12 != null) {
                                                                                        hashMap12 = new HashMap();
                                                                                        sparseArray8.put(i38, hashMap12);
                                                                                        intValue5 = 0;
                                                                                    } else {
                                                                                        Integer num5 = (Integer) hashMap12.get(topicKey2);
                                                                                        intValue5 = num5 == null ? Integer.MIN_VALUE : num5.intValue();
                                                                                    }
                                                                                    if (intValue5 == Integer.MIN_VALUE) {
                                                                                        intValue5 = 0;
                                                                                    }
                                                                                    hashMap12.put(topicKey2, Integer.valueOf(intValue5 - 1));
                                                                                }
                                                                                i67++;
                                                                                sparseArray6 = sparseArray8;
                                                                                it2 = it3;
                                                                                hashMap34 = hashMap38;
                                                                            }
                                                                        }
                                                                        intValue4 = 0;
                                                                        hashMap39.put(topicKey2, Integer.valueOf(intValue4 + 1));
                                                                        if (sparseIntArray5 != null) {
                                                                            hashMap12 = (HashMap) sparseArray8.get(i38);
                                                                            if (hashMap12 != null) {
                                                                            }
                                                                            if (intValue5 == Integer.MIN_VALUE) {
                                                                            }
                                                                            hashMap12.put(topicKey2, Integer.valueOf(intValue5 - 1));
                                                                        }
                                                                        i67++;
                                                                        sparseArray6 = sparseArray8;
                                                                        it2 = it3;
                                                                        hashMap34 = hashMap38;
                                                                    }
                                                                    sparseArray = sparseArray7;
                                                                    longSparseArray4 = longSparseArray37;
                                                                }
                                                                SparseArray sparseArray9 = sparseArray;
                                                                SparseArray sparseArray10 = sparseArray6;
                                                                if (!longSparseArray2.isEmpty()) {
                                                                    int size4 = longSparseArray2.size();
                                                                    int i69 = 0;
                                                                    while (i69 < size4) {
                                                                        LongSparseArray longSparseArray38 = longSparseArray2;
                                                                        long keyAt2 = longSparseArray38.keyAt(i69);
                                                                        if (keyAt2 == j12) {
                                                                            i37 = size4;
                                                                            longSparseArray2 = longSparseArray38;
                                                                            longSparseIntArray14 = longSparseIntArray23;
                                                                            longSparseIntArray13 = longSparseIntArray24;
                                                                        } else {
                                                                            LongSparseArray longSparseArray39 = longSparseArray3;
                                                                            ArrayList arrayList28 = (ArrayList) longSparseArray39.get(keyAt2);
                                                                            LongSparseArray longSparseArray40 = longSparseArray26;
                                                                            ArrayList arrayList29 = (ArrayList) longSparseArray40.get(keyAt2);
                                                                            i37 = size4;
                                                                            longSparseArray2 = longSparseArray38;
                                                                            longSparseArray3 = longSparseArray39;
                                                                            longSparseArray26 = longSparseArray40;
                                                                            int i70 = 0;
                                                                            SQLiteCursor queryFinalized7 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", ((StringBuilder) longSparseArray38.valueAt(i69)).toString(), Long.valueOf(keyAt2)), new Object[0]);
                                                                            while (queryFinalized7.next()) {
                                                                                Integer valueOf = Integer.valueOf(queryFinalized7.intValue(i70));
                                                                                if (arrayList28 != null) {
                                                                                    arrayList28.remove(valueOf);
                                                                                }
                                                                                if (arrayList29 != null) {
                                                                                    arrayList29.remove(valueOf);
                                                                                }
                                                                                i70 = 0;
                                                                            }
                                                                            queryFinalized7.dispose();
                                                                            longSparseIntArray13 = longSparseIntArray24;
                                                                            int i71 = longSparseIntArray13.get(keyAt2, -1);
                                                                            if (i71 < 0) {
                                                                                i71 = 0;
                                                                            }
                                                                            longSparseIntArray13.put(keyAt2, i71 + arrayList28.size());
                                                                            if (arrayList29 != null) {
                                                                                longSparseIntArray14 = longSparseIntArray23;
                                                                                int i72 = longSparseIntArray14.get(keyAt2, -1);
                                                                                if (i72 < 0) {
                                                                                    i72 = 0;
                                                                                }
                                                                                longSparseIntArray14.put(keyAt2, i72 + arrayList29.size());
                                                                            } else {
                                                                                longSparseIntArray14 = longSparseIntArray23;
                                                                            }
                                                                        }
                                                                        i69++;
                                                                        longSparseIntArray24 = longSparseIntArray13;
                                                                        longSparseIntArray23 = longSparseIntArray14;
                                                                        size4 = i37;
                                                                    }
                                                                }
                                                                LongSparseIntArray longSparseIntArray27 = longSparseIntArray23;
                                                                LongSparseIntArray longSparseIntArray28 = longSparseIntArray24;
                                                                if (!hashMap33.isEmpty()) {
                                                                    for (TopicKey topicKey3 : hashMap33.keySet()) {
                                                                        HashMap hashMap40 = hashMap33;
                                                                        ArrayList arrayList30 = (ArrayList) hashMap40.get(topicKey3);
                                                                        CharSequence charSequence4 = charSequence;
                                                                        SparseArray sparseArray11 = sparseArray10;
                                                                        LongSparseIntArray longSparseIntArray29 = longSparseIntArray28;
                                                                        int i73 = 0;
                                                                        SQLiteCursor queryFinalized8 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", TextUtils.join(charSequence4, arrayList30), Long.valueOf(topicKey3.dialogId), Long.valueOf(topicKey3.topicId)), new Object[0]);
                                                                        while (queryFinalized8.next()) {
                                                                            arrayList30.remove(Integer.valueOf(queryFinalized8.intValue(i73)));
                                                                            i73 = 0;
                                                                        }
                                                                        queryFinalized8.dispose();
                                                                        StringBuilder sb6 = new StringBuilder();
                                                                        sb6.append("new unread mentions ");
                                                                        sb6.append(topicKey3.dialogId);
                                                                        String str16 = str3;
                                                                        sb6.append(str16);
                                                                        sb6.append(topicKey3.topicId);
                                                                        sb6.append(str16);
                                                                        sb6.append(arrayList30.size());
                                                                        FileLog.d(sb6.toString());
                                                                        HashMap hashMap41 = hashMap26;
                                                                        hashMap41.put(topicKey3, Integer.valueOf(arrayList30.size()));
                                                                        str3 = str16;
                                                                        hashMap33 = hashMap40;
                                                                        hashMap26 = hashMap41;
                                                                        charSequence = charSequence4;
                                                                        longSparseIntArray28 = longSparseIntArray29;
                                                                        sparseArray10 = sparseArray11;
                                                                    }
                                                                }
                                                                sparseArray2 = sparseArray10;
                                                                longSparseIntArray = longSparseIntArray28;
                                                                HashMap hashMap42 = hashMap26;
                                                                String str17 = str3;
                                                                if (longSparseArray5 != null) {
                                                                    for (int i74 = 0; i74 < longSparseArray5.size(); i74++) {
                                                                        long keyAt3 = longSparseArray5.keyAt(i74);
                                                                        SparseIntArray sparseIntArray7 = (SparseIntArray) longSparseArray5.valueAt(i74);
                                                                        StringBuilder sb7 = new StringBuilder();
                                                                        for (int i75 = 0; i75 < longSparseArray5.size(); i75++) {
                                                                            int keyAt4 = sparseIntArray7.keyAt(i75);
                                                                            if (sb7.length() != 0) {
                                                                                sb7.append(", ");
                                                                            }
                                                                            sb7.append(keyAt4);
                                                                        }
                                                                        SQLiteDatabase sQLiteDatabase6 = messagesStorage.database;
                                                                        Locale locale2 = Locale.US;
                                                                        sQLiteDatabase6.executeFast(String.format(locale2, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", sb7.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                                                        messagesStorage.database.executeFast(String.format(locale2, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", sb7.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                                                    }
                                                                }
                                                                int i76 = 0;
                                                                SQLitePreparedStatement sQLitePreparedStatement37 = null;
                                                                SQLitePreparedStatement sQLitePreparedStatement38 = null;
                                                                SQLitePreparedStatement sQLitePreparedStatement39 = null;
                                                                SQLitePreparedStatement sQLitePreparedStatement40 = null;
                                                                int i77 = 0;
                                                                ArrayList arrayList31 = null;
                                                                int i78 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                                ArrayList arrayList32 = null;
                                                                while (true) {
                                                                    try {
                                                                        arrayList4 = arrayList32;
                                                                        if (i76 >= arrayList.size()) {
                                                                            break;
                                                                        }
                                                                        try {
                                                                            TLRPC$Message tLRPC$Message6 = arrayList.get(i76);
                                                                            if (tLRPC$Message6 == null) {
                                                                                i18 = i76;
                                                                                str7 = str17;
                                                                                longSparseIntArray12 = longSparseIntArray27;
                                                                                sparseArray4 = sparseArray9;
                                                                                hashMap8 = hashMap42;
                                                                                str8 = str12;
                                                                                arrayList32 = arrayList4;
                                                                                hashMap10 = hashMap24;
                                                                                sQLitePreparedStatement33 = sQLitePreparedStatement7;
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement6;
                                                                                sQLitePreparedStatement31 = sQLitePreparedStatement14;
                                                                                longSparseArray8 = longSparseArray20;
                                                                                j2 = j12;
                                                                            } else {
                                                                                messagesStorage.fixUnsupportedMedia(tLRPC$Message6);
                                                                                longSparseIntArray12 = longSparseIntArray27;
                                                                                sparseArray4 = sparseArray9;
                                                                                long topicId2 = MessageObject.getTopicId(messagesStorage.currentAccount, tLRPC$Message6, messagesStorage.isForum(tLRPC$Message6.dialog_id));
                                                                                sQLitePreparedStatement15.requery();
                                                                                int i79 = tLRPC$Message6.id;
                                                                                int i80 = tLRPC$Message6.local_id;
                                                                                if (i80 == 0) {
                                                                                    i80 = i79;
                                                                                }
                                                                                MessageObject.normalizeFlags(tLRPC$Message6);
                                                                                hashMap8 = hashMap42;
                                                                                str7 = str17;
                                                                                NativeByteBuffer nativeByteBuffer7 = new NativeByteBuffer(tLRPC$Message6.getObjectSize());
                                                                                tLRPC$Message6.serializeToStream(nativeByteBuffer7);
                                                                                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message6.action;
                                                                                sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                                try {
                                                                                    try {
                                                                                        try {
                                                                                            try {
                                                                                                try {
                                                                                                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageEncryptedAction) {
                                                                                                        try {
                                                                                                            TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction = tLRPC$MessageAction.encryptedAction;
                                                                                                            i18 = i76;
                                                                                                            if (!(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) && !(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionScreenshotMessages)) {
                                                                                                                z6 = false;
                                                                                                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) && !MessageObject.isOut(tLRPC$Message6)) {
                                                                                                                    if (arrayList31 == null) {
                                                                                                                        arrayList31 = new ArrayList();
                                                                                                                    }
                                                                                                                    arrayList31.add(tLRPC$Message6);
                                                                                                                }
                                                                                                                if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                                                                                    if (arrayList31 == null) {
                                                                                                                        arrayList31 = new ArrayList();
                                                                                                                    }
                                                                                                                    arrayList31.add(tLRPC$Message6);
                                                                                                                }
                                                                                                                if (z6) {
                                                                                                                    i19 = i77;
                                                                                                                    hashMap9 = hashMap24;
                                                                                                                    longSparseArray8 = longSparseArray20;
                                                                                                                    arrayList12 = arrayList31;
                                                                                                                } else {
                                                                                                                    LongSparseArray longSparseArray41 = longSparseArray20;
                                                                                                                    TLRPC$Message tLRPC$Message7 = (TLRPC$Message) longSparseArray41.get(tLRPC$Message6.dialog_id);
                                                                                                                    if (tLRPC$Message7 != null) {
                                                                                                                        arrayList12 = arrayList31;
                                                                                                                        if (tLRPC$Message6.date <= tLRPC$Message7.date) {
                                                                                                                            int i81 = tLRPC$Message7.id;
                                                                                                                            if (i81 > 0) {
                                                                                                                            }
                                                                                                                            if (i81 < 0 && tLRPC$Message6.id < i81) {
                                                                                                                            }
                                                                                                                            if (topicId2 != 0) {
                                                                                                                                long j13 = tLRPC$Message6.dialog_id;
                                                                                                                                if (j13 != j12) {
                                                                                                                                    TopicKey of5 = TopicKey.of(j13, topicId2);
                                                                                                                                    hashMap9 = hashMap24;
                                                                                                                                    TLRPC$Message tLRPC$Message8 = (TLRPC$Message) hashMap9.get(of5);
                                                                                                                                    if (tLRPC$Message8 != null) {
                                                                                                                                        longSparseArray8 = longSparseArray41;
                                                                                                                                        i19 = i77;
                                                                                                                                        if (tLRPC$Message6.date <= tLRPC$Message8.date) {
                                                                                                                                            int i82 = tLRPC$Message8.id;
                                                                                                                                            if (i82 > 0) {
                                                                                                                                            }
                                                                                                                                            if (i82 < 0 && tLRPC$Message6.id < i82) {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        longSparseArray8 = longSparseArray41;
                                                                                                                                        i19 = i77;
                                                                                                                                    }
                                                                                                                                    hashMap9.put(of5, tLRPC$Message6);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            i19 = i77;
                                                                                                                            hashMap9 = hashMap24;
                                                                                                                            longSparseArray8 = longSparseArray41;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        arrayList12 = arrayList31;
                                                                                                                    }
                                                                                                                    longSparseArray41.put(tLRPC$Message6.dialog_id, tLRPC$Message6);
                                                                                                                    if (topicId2 != 0) {
                                                                                                                    }
                                                                                                                    i19 = i77;
                                                                                                                    hashMap9 = hashMap24;
                                                                                                                    longSparseArray8 = longSparseArray41;
                                                                                                                }
                                                                                                                sQLitePreparedStatement38 = sQLitePreparedStatement17;
                                                                                                                i20 = 0;
                                                                                                                i21 = 2;
                                                                                                                while (i20 < i21) {
                                                                                                                    boolean z8 = i20 == 1;
                                                                                                                    if (j11 == 0 || z8) {
                                                                                                                        i25 = i78;
                                                                                                                        try {
                                                                                                                            long j14 = tLRPC$Message6.dialog_id;
                                                                                                                            try {
                                                                                                                                try {
                                                                                                                                    try {
                                                                                                                                        if (!z8) {
                                                                                                                                            hashMap11 = hashMap9;
                                                                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                                            j4 = j12;
                                                                                                                                            sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                                            sQLitePreparedStatement36 = sQLitePreparedStatement15;
                                                                                                                                        } else if (topicId2 == 0) {
                                                                                                                                            hashMap11 = hashMap9;
                                                                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                                        } else {
                                                                                                                                            if (j12 == j14) {
                                                                                                                                                hashMap11 = hashMap9;
                                                                                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                                                j4 = j12;
                                                                                                                                                try {
                                                                                                                                                    if (MessageObject.getSavedDialogId(j4, tLRPC$Message6) != 0) {
                                                                                                                                                        sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                                                        try {
                                                                                                                                                            if (tLRPC$Message6.id >= 0 || MessageObject.getSavedDialogId(j4, tLRPC$Message6) == j4) {
                                                                                                                                                                ArrayList arrayList33 = arrayList4 == null ? new ArrayList() : arrayList4;
                                                                                                                                                                arrayList33.add(tLRPC$Message6);
                                                                                                                                                                arrayList4 = arrayList33;
                                                                                                                                                                sQLitePreparedStatement36 = sQLitePreparedStatement8;
                                                                                                                                                            }
                                                                                                                                                            j5 = topicId2;
                                                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                                            nativeByteBuffer3 = nativeByteBuffer7;
                                                                                                                                                            i33 = i80;
                                                                                                                                                            i35 = i20;
                                                                                                                                                            i20 = i35 + 1;
                                                                                                                                                            sQLitePreparedStatement40 = sQLitePreparedStatement35;
                                                                                                                                                            sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                                                                                            i78 = i25;
                                                                                                                                                            topicId2 = j5;
                                                                                                                                                            nativeByteBuffer7 = nativeByteBuffer3;
                                                                                                                                                            i80 = i33;
                                                                                                                                                            i21 = 2;
                                                                                                                                                            j12 = j4;
                                                                                                                                                            sQLitePreparedStatement37 = sQLitePreparedStatement34;
                                                                                                                                                            hashMap9 = hashMap11;
                                                                                                                                                        } catch (Exception e9) {
                                                                                                                                                            e = e9;
                                                                                                                                                            exc = e;
                                                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                                                            arrayList2 = null;
                                                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                                                            if (arrayList2 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                                                                                            }
                                                                                                                                                        } catch (Throwable th12) {
                                                                                                                                                            th = th12;
                                                                                                                                                            th = th;
                                                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                                                            arrayList2 = null;
                                                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                                                            if (arrayList2 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                                                            }
                                                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                                                            }
                                                                                                                                                            throw th;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } catch (Exception e10) {
                                                                                                                                                    e = e10;
                                                                                                                                                    sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                                                } catch (Throwable th13) {
                                                                                                                                                    th = th13;
                                                                                                                                                    sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                hashMap11 = hashMap9;
                                                                                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                                                j4 = j12;
                                                                                                                                            }
                                                                                                                                            sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                                            sQLitePreparedStatement36 = sQLitePreparedStatement8;
                                                                                                                                        }
                                                                                                                                        if (!MessageObject.isOut(tLRPC$Message6) && !tLRPC$Message6.from_scheduled) {
                                                                                                                                            i27 = 0;
                                                                                                                                            sQLitePreparedStatement36.bindInteger(r6, i27);
                                                                                                                                            int i83 = r5 + 1;
                                                                                                                                            sQLitePreparedStatement36.bindInteger(r5, tLRPC$Message6.ttl);
                                                                                                                                            if ((tLRPC$Message6.flags & 1024) == 0) {
                                                                                                                                                i28 = i83 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i83, tLRPC$Message6.views);
                                                                                                                                            } else {
                                                                                                                                                i28 = i83 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i83, messagesStorage.getMessageMediaType(tLRPC$Message6));
                                                                                                                                            }
                                                                                                                                            if (tLRPC$Message6.replyStory == null) {
                                                                                                                                                nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message6.replyStory.getObjectSize());
                                                                                                                                                tLRPC$Message6.replyStory.serializeToStream(nativeByteBuffer2);
                                                                                                                                                i29 = i28 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindByteBuffer(i28, nativeByteBuffer2);
                                                                                                                                            } else {
                                                                                                                                                i29 = i28 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindNull(i28);
                                                                                                                                                nativeByteBuffer2 = null;
                                                                                                                                            }
                                                                                                                                            i30 = tLRPC$Message6.stickerVerified;
                                                                                                                                            if (i30 != 0) {
                                                                                                                                                nativeByteBuffer3 = nativeByteBuffer7;
                                                                                                                                                i31 = 1;
                                                                                                                                            } else {
                                                                                                                                                nativeByteBuffer3 = nativeByteBuffer7;
                                                                                                                                                i31 = i30 == 2 ? 2 : 0;
                                                                                                                                            }
                                                                                                                                            int i84 = i29 + 1;
                                                                                                                                            sQLitePreparedStatement36.bindInteger(i29, i31);
                                                                                                                                            int i85 = i84 + 1;
                                                                                                                                            sQLitePreparedStatement36.bindInteger(i84, !tLRPC$Message6.mentioned ? 1 : 0);
                                                                                                                                            int i86 = i85 + 1;
                                                                                                                                            sQLitePreparedStatement36.bindInteger(i85, tLRPC$Message6.forwards);
                                                                                                                                            if (tLRPC$Message6.replies == null) {
                                                                                                                                                nativeByteBuffer4 = new NativeByteBuffer(tLRPC$Message6.replies.getObjectSize());
                                                                                                                                                tLRPC$Message6.replies.serializeToStream(nativeByteBuffer4);
                                                                                                                                                i32 = i86 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindByteBuffer(i86, nativeByteBuffer4);
                                                                                                                                            } else {
                                                                                                                                                i32 = i86 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindNull(i86);
                                                                                                                                                nativeByteBuffer4 = null;
                                                                                                                                            }
                                                                                                                                            tLRPC$MessageReplyHeader = tLRPC$Message6.reply_to;
                                                                                                                                            if (tLRPC$MessageReplyHeader == null) {
                                                                                                                                                i34 = i32 + 1;
                                                                                                                                                i33 = i80;
                                                                                                                                                int i87 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                                                                                                if (i87 == 0) {
                                                                                                                                                    i87 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                                                                                                }
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i32, i87);
                                                                                                                                            } else {
                                                                                                                                                i33 = i80;
                                                                                                                                                i34 = i32 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i32, 0);
                                                                                                                                            }
                                                                                                                                            int i88 = i34;
                                                                                                                                            int i89 = i88 + 1;
                                                                                                                                            i35 = i20;
                                                                                                                                            sQLitePreparedStatement36.bindLong(i88, MessageObject.getChannelId(tLRPC$Message6));
                                                                                                                                            writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message6);
                                                                                                                                            if (writeLocalParams == null) {
                                                                                                                                                i36 = i89 + 1;
                                                                                                                                                try {
                                                                                                                                                    sQLitePreparedStatement36.bindByteBuffer(i89, writeLocalParams);
                                                                                                                                                } catch (Exception e11) {
                                                                                                                                                    sQLitePreparedStatement = null;
                                                                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                                                                    arrayList2 = null;
                                                                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                                                                    messagesStorage = this;
                                                                                                                                                    exc = e11;
                                                                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                                                                    if (arrayList2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement11 == null) {
                                                                                                                                                    }
                                                                                                                                                } catch (Throwable th14) {
                                                                                                                                                    sQLitePreparedStatement = null;
                                                                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                                                                    arrayList2 = null;
                                                                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                                                                    messagesStorage = this;
                                                                                                                                                    th = th14;
                                                                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                                    if (arrayList2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                                                                    }
                                                                                                                                                    throw th;
                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                i36 = i89 + 1;
                                                                                                                                                sQLitePreparedStatement36.bindNull(i89);
                                                                                                                                            }
                                                                                                                                            if (!z8) {
                                                                                                                                                if ((tLRPC$Message6.flags & 131072) != 0) {
                                                                                                                                                    sQLitePreparedStatement36.bindLong(i36, tLRPC$Message6.grouped_id);
                                                                                                                                                    i36++;
                                                                                                                                                } else {
                                                                                                                                                    int i90 = i36 + 1;
                                                                                                                                                    sQLitePreparedStatement36.bindNull(i36);
                                                                                                                                                    i36 = i90;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            tLRPC$MessageReplyHeader2 = tLRPC$Message6.reply_to;
                                                                                                                                            if (tLRPC$MessageReplyHeader2 == null) {
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i36, tLRPC$MessageReplyHeader2.story_id);
                                                                                                                                            } else {
                                                                                                                                                sQLitePreparedStatement36.bindInteger(i36, 0);
                                                                                                                                            }
                                                                                                                                            sQLitePreparedStatement36.step();
                                                                                                                                            if (nativeByteBuffer4 != null) {
                                                                                                                                                nativeByteBuffer4.reuse();
                                                                                                                                            }
                                                                                                                                            if (writeLocalParams != null) {
                                                                                                                                                writeLocalParams.reuse();
                                                                                                                                            }
                                                                                                                                            if (nativeByteBuffer2 != null) {
                                                                                                                                                nativeByteBuffer2.reuse();
                                                                                                                                            }
                                                                                                                                            if (j14 != j4) {
                                                                                                                                                messagesStorage = this;
                                                                                                                                                messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid = %d", Integer.valueOf(tLRPC$Message6.id))).stepThis().dispose();
                                                                                                                                                if (sQLitePreparedStatement38 == null) {
                                                                                                                                                    sQLitePreparedStatement38 = messagesStorage.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                                                                                                                                }
                                                                                                                                                sQLitePreparedStatement38.requery();
                                                                                                                                                messagesStorage.bindMessageTags(sQLitePreparedStatement38, tLRPC$Message6);
                                                                                                                                                sQLitePreparedStatement38.step();
                                                                                                                                            } else {
                                                                                                                                                messagesStorage = this;
                                                                                                                                            }
                                                                                                                                            i20 = i35 + 1;
                                                                                                                                            sQLitePreparedStatement40 = sQLitePreparedStatement35;
                                                                                                                                            sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                                                                            i78 = i25;
                                                                                                                                            topicId2 = j5;
                                                                                                                                            nativeByteBuffer7 = nativeByteBuffer3;
                                                                                                                                            i80 = i33;
                                                                                                                                            i21 = 2;
                                                                                                                                            j12 = j4;
                                                                                                                                            sQLitePreparedStatement37 = sQLitePreparedStatement34;
                                                                                                                                            hashMap9 = hashMap11;
                                                                                                                                        }
                                                                                                                                        sQLitePreparedStatement36.bindLong(i88, MessageObject.getChannelId(tLRPC$Message6));
                                                                                                                                        writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message6);
                                                                                                                                        if (writeLocalParams == null) {
                                                                                                                                        }
                                                                                                                                        if (!z8) {
                                                                                                                                        }
                                                                                                                                        tLRPC$MessageReplyHeader2 = tLRPC$Message6.reply_to;
                                                                                                                                        if (tLRPC$MessageReplyHeader2 == null) {
                                                                                                                                        }
                                                                                                                                        sQLitePreparedStatement36.step();
                                                                                                                                        if (nativeByteBuffer4 != null) {
                                                                                                                                        }
                                                                                                                                        if (writeLocalParams != null) {
                                                                                                                                        }
                                                                                                                                        if (nativeByteBuffer2 != null) {
                                                                                                                                        }
                                                                                                                                        if (j14 != j4) {
                                                                                                                                        }
                                                                                                                                        i20 = i35 + 1;
                                                                                                                                        sQLitePreparedStatement40 = sQLitePreparedStatement35;
                                                                                                                                        sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                                                                        i78 = i25;
                                                                                                                                        topicId2 = j5;
                                                                                                                                        nativeByteBuffer7 = nativeByteBuffer3;
                                                                                                                                        i80 = i33;
                                                                                                                                        i21 = 2;
                                                                                                                                        j12 = j4;
                                                                                                                                        sQLitePreparedStatement37 = sQLitePreparedStatement34;
                                                                                                                                        hashMap9 = hashMap11;
                                                                                                                                    } catch (Exception e12) {
                                                                                                                                        e = e12;
                                                                                                                                        messagesStorage = this;
                                                                                                                                        exc = e;
                                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                                        arrayList2 = null;
                                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                                        if (arrayList2 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement11 == null) {
                                                                                                                                        }
                                                                                                                                    } catch (Throwable th15) {
                                                                                                                                        th = th15;
                                                                                                                                        messagesStorage = this;
                                                                                                                                        th = th;
                                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement35;
                                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement34;
                                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                                        arrayList2 = null;
                                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                                        if (arrayList2 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                                        }
                                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                                        }
                                                                                                                                        throw th;
                                                                                                                                    }
                                                                                                                                    sQLitePreparedStatement36.bindInteger(1, i80);
                                                                                                                                    sQLitePreparedStatement36.bindLong(2, j14);
                                                                                                                                    if (z8) {
                                                                                                                                        sQLitePreparedStatement36.bindLong(3, topicId2);
                                                                                                                                        i26 = 4;
                                                                                                                                    } else {
                                                                                                                                        i26 = 3;
                                                                                                                                    }
                                                                                                                                    j5 = topicId2;
                                                                                                                                    int i91 = i26 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i26, MessageObject.getUnreadFlags(tLRPC$Message6));
                                                                                                                                    int i92 = i91 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i91, tLRPC$Message6.send_state);
                                                                                                                                    int i93 = i92 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i92, tLRPC$Message6.date);
                                                                                                                                    int i94 = i93 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindByteBuffer(i93, nativeByteBuffer7);
                                                                                                                                    int i95 = i94 + 1;
                                                                                                                                    i27 = 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i94, i27);
                                                                                                                                    int i832 = i95 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i95, tLRPC$Message6.ttl);
                                                                                                                                    if ((tLRPC$Message6.flags & 1024) == 0) {
                                                                                                                                    }
                                                                                                                                    if (tLRPC$Message6.replyStory == null) {
                                                                                                                                    }
                                                                                                                                    i30 = tLRPC$Message6.stickerVerified;
                                                                                                                                    if (i30 != 0) {
                                                                                                                                    }
                                                                                                                                    int i842 = i29 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i29, i31);
                                                                                                                                    int i852 = i842 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i842, !tLRPC$Message6.mentioned ? 1 : 0);
                                                                                                                                    int i862 = i852 + 1;
                                                                                                                                    sQLitePreparedStatement36.bindInteger(i852, tLRPC$Message6.forwards);
                                                                                                                                    if (tLRPC$Message6.replies == null) {
                                                                                                                                    }
                                                                                                                                    tLRPC$MessageReplyHeader = tLRPC$Message6.reply_to;
                                                                                                                                    if (tLRPC$MessageReplyHeader == null) {
                                                                                                                                    }
                                                                                                                                    int i882 = i34;
                                                                                                                                    int i892 = i882 + 1;
                                                                                                                                    i35 = i20;
                                                                                                                                } catch (Exception e13) {
                                                                                                                                    e = e13;
                                                                                                                                } catch (Throwable th16) {
                                                                                                                                    th = th16;
                                                                                                                                }
                                                                                                                                sQLitePreparedStatement36.requery();
                                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            } catch (Exception e14) {
                                                                                                                                e = e14;
                                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            } catch (Throwable th17) {
                                                                                                                                th = th17;
                                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            }
                                                                                                                        } catch (Exception e15) {
                                                                                                                            e = e15;
                                                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                        } catch (Throwable th18) {
                                                                                                                            th = th18;
                                                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        hashMap11 = hashMap9;
                                                                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement37;
                                                                                                                        i25 = i78;
                                                                                                                    }
                                                                                                                    j4 = j12;
                                                                                                                    sQLitePreparedStatement35 = sQLitePreparedStatement40;
                                                                                                                    j5 = topicId2;
                                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                    nativeByteBuffer3 = nativeByteBuffer7;
                                                                                                                    i33 = i80;
                                                                                                                    i35 = i20;
                                                                                                                    i20 = i35 + 1;
                                                                                                                    sQLitePreparedStatement40 = sQLitePreparedStatement35;
                                                                                                                    sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                                                    i78 = i25;
                                                                                                                    topicId2 = j5;
                                                                                                                    nativeByteBuffer7 = nativeByteBuffer3;
                                                                                                                    i80 = i33;
                                                                                                                    i21 = 2;
                                                                                                                    j12 = j4;
                                                                                                                    sQLitePreparedStatement37 = sQLitePreparedStatement34;
                                                                                                                    hashMap9 = hashMap11;
                                                                                                                }
                                                                                                                hashMap10 = hashMap9;
                                                                                                                sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                                                                long j15 = topicId2;
                                                                                                                NativeByteBuffer nativeByteBuffer8 = nativeByteBuffer7;
                                                                                                                i22 = i78;
                                                                                                                int i96 = i80;
                                                                                                                long j16 = j12;
                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                sQLitePreparedStatement30 = sQLitePreparedStatement40;
                                                                                                                if (tLRPC$Message6.random_id == 0) {
                                                                                                                    try {
                                                                                                                        sQLitePreparedStatement14.requery();
                                                                                                                        sQLitePreparedStatement31 = sQLitePreparedStatement14;
                                                                                                                        try {
                                                                                                                            sQLitePreparedStatement31.bindLong(1, tLRPC$Message6.random_id);
                                                                                                                            i23 = i96;
                                                                                                                            sQLitePreparedStatement31.bindInteger(2, i23);
                                                                                                                            sQLitePreparedStatement31.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                                            sQLitePreparedStatement31.step();
                                                                                                                        } catch (Exception e16) {
                                                                                                                            e = e16;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            exc = e;
                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                                                            }
                                                                                                                        } catch (Throwable th19) {
                                                                                                                            th2 = th19;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            th = th2;
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            throw th;
                                                                                                                        }
                                                                                                                    } catch (Exception e17) {
                                                                                                                        e = e17;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        exc = e;
                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 == null) {
                                                                                                                        }
                                                                                                                    } catch (Throwable th20) {
                                                                                                                        th2 = th20;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        th = th2;
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        throw th;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    sQLitePreparedStatement31 = sQLitePreparedStatement14;
                                                                                                                    i23 = i96;
                                                                                                                }
                                                                                                                if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                                                                    nativeByteBuffer = nativeByteBuffer8;
                                                                                                                } else {
                                                                                                                    sQLitePreparedStatement2 = messagesStorage.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                                                                                                    try {
                                                                                                                        sQLitePreparedStatement2.requery();
                                                                                                                        sQLitePreparedStatement2.bindInteger(1, i23);
                                                                                                                        sQLitePreparedStatement2.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                                        sQLitePreparedStatement2.bindInteger(3, tLRPC$Message6.date);
                                                                                                                        sQLitePreparedStatement2.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                                                        nativeByteBuffer = nativeByteBuffer8;
                                                                                                                        sQLitePreparedStatement2.bindByteBuffer(5, nativeByteBuffer);
                                                                                                                        sQLitePreparedStatement2.step();
                                                                                                                        if (j15 != 0) {
                                                                                                                            SQLitePreparedStatement executeFast11 = sQLitePreparedStatement16 == null ? messagesStorage.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)") : sQLitePreparedStatement16;
                                                                                                                            try {
                                                                                                                                executeFast11.requery();
                                                                                                                                executeFast11.bindInteger(1, i23);
                                                                                                                                executeFast11.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                                                executeFast11.bindLong(3, j15);
                                                                                                                                executeFast11.bindInteger(4, tLRPC$Message6.date);
                                                                                                                                executeFast11.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                                                                executeFast11.bindByteBuffer(6, nativeByteBuffer);
                                                                                                                                executeFast11.step();
                                                                                                                                sQLitePreparedStatement16 = executeFast11;
                                                                                                                            } catch (Exception e18) {
                                                                                                                                e = e18;
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                sQLitePreparedStatement5 = executeFast11;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement = null;
                                                                                                                                sQLitePreparedStatement2 = null;
                                                                                                                                sQLitePreparedStatement4 = null;
                                                                                                                                arrayList2 = null;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                exc = e;
                                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                                if (arrayList2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                                                                }
                                                                                                                            } catch (Throwable th21) {
                                                                                                                                th2 = th21;
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                sQLitePreparedStatement5 = executeFast11;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement = null;
                                                                                                                                sQLitePreparedStatement2 = null;
                                                                                                                                sQLitePreparedStatement4 = null;
                                                                                                                                arrayList2 = null;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                th = th2;
                                                                                                                                if (arrayList2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                                }
                                                                                                                                throw th;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } catch (Exception e19) {
                                                                                                                        e = e19;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        exc = e;
                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 == null) {
                                                                                                                        }
                                                                                                                    } catch (Throwable th22) {
                                                                                                                        th2 = th22;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        th = th2;
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        throw th;
                                                                                                                    }
                                                                                                                }
                                                                                                                if (tLRPC$Message6.ttl_period != 0 || tLRPC$Message6.id <= 0) {
                                                                                                                    i78 = i22;
                                                                                                                    sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                                                } else {
                                                                                                                    sQLitePreparedStatement39 = sQLitePreparedStatement9 == null ? messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)") : sQLitePreparedStatement9;
                                                                                                                    try {
                                                                                                                        sQLitePreparedStatement39.requery();
                                                                                                                        sQLitePreparedStatement39.bindInteger(1, i23);
                                                                                                                        sQLitePreparedStatement39.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                                        sQLitePreparedStatement39.bindInteger(3, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                                        sQLitePreparedStatement39.bindInteger(4, 0);
                                                                                                                        sQLitePreparedStatement39.step();
                                                                                                                        i78 = Math.min(i22, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                                    } catch (Exception e20) {
                                                                                                                        e = e20;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        exc = e;
                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 == null) {
                                                                                                                        }
                                                                                                                    } catch (Throwable th23) {
                                                                                                                        th2 = th23;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        th = th2;
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        throw th;
                                                                                                                    }
                                                                                                                }
                                                                                                                tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                                                                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll)) {
                                                                                                                    sQLitePreparedStatement40 = sQLitePreparedStatement30 == null ? messagesStorage.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)") : sQLitePreparedStatement30;
                                                                                                                    try {
                                                                                                                        sQLitePreparedStatement40.requery();
                                                                                                                        sQLitePreparedStatement40.bindInteger(1, i23);
                                                                                                                        sQLitePreparedStatement40.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                                        sQLitePreparedStatement40.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message6.media).poll.id);
                                                                                                                        sQLitePreparedStatement40.step();
                                                                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement6;
                                                                                                                    } catch (Exception e21) {
                                                                                                                        e = e21;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        exc = e;
                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 == null) {
                                                                                                                        }
                                                                                                                    } catch (Throwable th24) {
                                                                                                                        th2 = th24;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                        sQLitePreparedStatement = null;
                                                                                                                        sQLitePreparedStatement2 = null;
                                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                                        arrayList2 = null;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        th = th2;
                                                                                                                        if (arrayList2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        throw th;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                                        try {
                                                                                                                            sQLitePreparedStatement6.requery();
                                                                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement6;
                                                                                                                            try {
                                                                                                                                sQLitePreparedStatement32.bindLong(1, tLRPC$Message6.media.webpage.id);
                                                                                                                                sQLitePreparedStatement32.bindInteger(2, i23);
                                                                                                                                sQLitePreparedStatement32.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                                                sQLitePreparedStatement32.step();
                                                                                                                            } catch (Exception e22) {
                                                                                                                                e = e22;
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                                sQLitePreparedStatement = null;
                                                                                                                                sQLitePreparedStatement2 = null;
                                                                                                                                sQLitePreparedStatement4 = null;
                                                                                                                                arrayList2 = null;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                exc = e;
                                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                                if (arrayList2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                                                                }
                                                                                                                            } catch (Throwable th25) {
                                                                                                                                th2 = th25;
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                                sQLitePreparedStatement = null;
                                                                                                                                sQLitePreparedStatement2 = null;
                                                                                                                                sQLitePreparedStatement4 = null;
                                                                                                                                arrayList2 = null;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                th = th2;
                                                                                                                                if (arrayList2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                                }
                                                                                                                                throw th;
                                                                                                                            }
                                                                                                                        } catch (Exception e23) {
                                                                                                                            e = e23;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            exc = e;
                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                                                            }
                                                                                                                        } catch (Throwable th26) {
                                                                                                                            th2 = th26;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            th = th2;
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            throw th;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement6;
                                                                                                                    }
                                                                                                                    sQLitePreparedStatement40 = sQLitePreparedStatement30;
                                                                                                                }
                                                                                                                nativeByteBuffer.reuse();
                                                                                                                if (i != 0) {
                                                                                                                    if (tLRPC$Message6.peer_id.channel_id != 0) {
                                                                                                                        try {
                                                                                                                        } catch (Exception e24) {
                                                                                                                            e = e24;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            exc = e;
                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                                                            }
                                                                                                                        } catch (Throwable th27) {
                                                                                                                            th2 = th27;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                            sQLitePreparedStatement = null;
                                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                                            arrayList2 = null;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            th = th2;
                                                                                                                            if (arrayList2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            throw th;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    if (tLRPC$Message6.date >= getConnectionsManager().getCurrentTime() - 3600 && getDownloadController().canDownloadMedia(tLRPC$Message6) == 1) {
                                                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message6.media;
                                                                                                                        if ((tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) || (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaWebPage)) {
                                                                                                                            TLRPC$Document document = MessageObject.getDocument(tLRPC$Message6);
                                                                                                                            TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message6);
                                                                                                                            if (MessageObject.isVoiceMessage(tLRPC$Message6)) {
                                                                                                                                j3 = document.id;
                                                                                                                                tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                                tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                                tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                                i24 = 2;
                                                                                                                            } else {
                                                                                                                                if (!MessageObject.isStickerMessage(tLRPC$Message6) && !MessageObject.isAnimatedStickerMessage(tLRPC$Message6)) {
                                                                                                                                    if (!MessageObject.isVideoMessage(tLRPC$Message6) && !MessageObject.isRoundVideoMessage(tLRPC$Message6) && !MessageObject.isGifMessage(tLRPC$Message6)) {
                                                                                                                                        if (document != null) {
                                                                                                                                            j3 = document.id;
                                                                                                                                            tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                                            tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                                            tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                                            i24 = 8;
                                                                                                                                        } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                                                                                                                                            i24 = 0;
                                                                                                                                            tLRPC$TL_messageMediaDocument = null;
                                                                                                                                            j3 = 0;
                                                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                                                int i97 = tLRPC$Message6.media.ttl_seconds;
                                                                                                                                                if (i97 != 0) {
                                                                                                                                                    tLRPC$TL_messageMediaDocument.ttl_seconds = i97;
                                                                                                                                                    tLRPC$TL_messageMediaDocument.flags |= 4;
                                                                                                                                                }
                                                                                                                                                j2 = j16;
                                                                                                                                                MessageObject messageObject = new MessageObject(messagesStorage.currentAccount, tLRPC$Message6, false, false);
                                                                                                                                                int i98 = i19 | i24;
                                                                                                                                                sQLitePreparedStatement7.requery();
                                                                                                                                                NativeByteBuffer nativeByteBuffer9 = new NativeByteBuffer(tLRPC$TL_messageMediaDocument.getObjectSize());
                                                                                                                                                tLRPC$TL_messageMediaDocument.serializeToStream(nativeByteBuffer9);
                                                                                                                                                sQLitePreparedStatement33 = sQLitePreparedStatement7;
                                                                                                                                                try {
                                                                                                                                                    sQLitePreparedStatement33.bindLong(1, j3);
                                                                                                                                                    sQLitePreparedStatement33.bindInteger(2, i24);
                                                                                                                                                    sQLitePreparedStatement33.bindInteger(3, tLRPC$Message6.date);
                                                                                                                                                    sQLitePreparedStatement33.bindByteBuffer(4, nativeByteBuffer9);
                                                                                                                                                    StringBuilder sb8 = new StringBuilder();
                                                                                                                                                    sb8.append("sent_");
                                                                                                                                                    TLRPC$Peer tLRPC$Peer = tLRPC$Message6.peer_id;
                                                                                                                                                    sb8.append(tLRPC$Peer != null ? tLRPC$Peer.channel_id : 0L);
                                                                                                                                                    str8 = str12;
                                                                                                                                                    sb8.append(str8);
                                                                                                                                                    sb8.append(tLRPC$Message6.id);
                                                                                                                                                    sb8.append(str8);
                                                                                                                                                    sb8.append(DialogObject.getPeerDialogId(tLRPC$Message6.peer_id));
                                                                                                                                                    sb8.append(str8);
                                                                                                                                                    sb8.append(messageObject.type);
                                                                                                                                                    sb8.append(str8);
                                                                                                                                                    sb8.append(messageObject.getSize());
                                                                                                                                                    sQLitePreparedStatement33.bindString(5, sb8.toString());
                                                                                                                                                    sQLitePreparedStatement33.step();
                                                                                                                                                    nativeByteBuffer9.reuse();
                                                                                                                                                    arrayList31 = arrayList12;
                                                                                                                                                    arrayList32 = arrayList4;
                                                                                                                                                    i77 = i98;
                                                                                                                                                    sQLitePreparedStatement37 = sQLitePreparedStatement16;
                                                                                                                                                } catch (Exception e25) {
                                                                                                                                                    e = e25;
                                                                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement33;
                                                                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                                                    sQLitePreparedStatement = null;
                                                                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                                                                    arrayList2 = null;
                                                                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                                                                    exc = e;
                                                                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                                                                    if (arrayList2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement11 == null) {
                                                                                                                                                    }
                                                                                                                                                } catch (Throwable th28) {
                                                                                                                                                    th2 = th28;
                                                                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement33;
                                                                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                                                                                    sQLitePreparedStatement = null;
                                                                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                                                                    arrayList2 = null;
                                                                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                                                                    th = th2;
                                                                                                                                                    if (arrayList2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                                                                    }
                                                                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                                                                    }
                                                                                                                                                    throw th;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            j3 = photo.id;
                                                                                                                                            TLRPC$TL_messageMediaPhoto tLRPC$TL_messageMediaPhoto = new TLRPC$TL_messageMediaPhoto();
                                                                                                                                            tLRPC$TL_messageMediaPhoto.photo = photo;
                                                                                                                                            int i99 = tLRPC$TL_messageMediaPhoto.flags | 1;
                                                                                                                                            tLRPC$TL_messageMediaPhoto.flags = i99;
                                                                                                                                            if (tLRPC$Message6.media instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                                                                tLRPC$TL_messageMediaPhoto.flags = i99 | Integer.MIN_VALUE;
                                                                                                                                            }
                                                                                                                                            tLRPC$TL_messageMediaDocument = tLRPC$TL_messageMediaPhoto;
                                                                                                                                            i24 = 1;
                                                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j3 = document.id;
                                                                                                                                    tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                                    tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                                    tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                                    i24 = 4;
                                                                                                                                    if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j3 = document.id;
                                                                                                                                tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                                tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                                tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                                i24 = 1;
                                                                                                                                if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            if (tLRPC$TL_messageMediaDocument != null) {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j16;
                                                                                                                str8 = str12;
                                                                                                                sQLitePreparedStatement33 = sQLitePreparedStatement7;
                                                                                                                arrayList31 = arrayList12;
                                                                                                                arrayList32 = arrayList4;
                                                                                                                i77 = i19;
                                                                                                                sQLitePreparedStatement37 = sQLitePreparedStatement16;
                                                                                                            }
                                                                                                        } catch (Exception e26) {
                                                                                                            exc = e26;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement37;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            arrayList2 = null;
                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                            if (arrayList2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                                            }
                                                                                                        } catch (Throwable th29) {
                                                                                                            th = th29;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement37;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement40;
                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement = null;
                                                                                                            sQLitePreparedStatement2 = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            arrayList2 = null;
                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            if (arrayList2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    } else {
                                                                                                        i18 = i76;
                                                                                                    }
                                                                                                    nativeByteBuffer.reuse();
                                                                                                    if (i != 0) {
                                                                                                    }
                                                                                                    j2 = j16;
                                                                                                    str8 = str12;
                                                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement7;
                                                                                                    arrayList31 = arrayList12;
                                                                                                    arrayList32 = arrayList4;
                                                                                                    i77 = i19;
                                                                                                    sQLitePreparedStatement37 = sQLitePreparedStatement16;
                                                                                                } catch (Exception e27) {
                                                                                                    e = e27;
                                                                                                } catch (Throwable th30) {
                                                                                                    th2 = th30;
                                                                                                }
                                                                                                tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                                                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll)) {
                                                                                                }
                                                                                            } catch (Exception e28) {
                                                                                                e = e28;
                                                                                            } catch (Throwable th31) {
                                                                                                th2 = th31;
                                                                                            }
                                                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                                            }
                                                                                            if (tLRPC$Message6.ttl_period != 0) {
                                                                                            }
                                                                                            i78 = i22;
                                                                                            sQLitePreparedStatement39 = sQLitePreparedStatement9;
                                                                                        } catch (Exception e29) {
                                                                                            e = e29;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            arrayList2 = null;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            exc = e;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                            }
                                                                                        } catch (Throwable th32) {
                                                                                            th2 = th32;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement38;
                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement30;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                            sQLitePreparedStatement = null;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            sQLitePreparedStatement4 = null;
                                                                                            arrayList2 = null;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            th = th2;
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                        if (tLRPC$Message6.random_id == 0) {
                                                                                        }
                                                                                    } catch (Exception e30) {
                                                                                        e = e30;
                                                                                    } catch (Throwable th33) {
                                                                                        th2 = th33;
                                                                                    }
                                                                                    z6 = true;
                                                                                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
                                                                                        if (arrayList31 == null) {
                                                                                        }
                                                                                        arrayList31.add(tLRPC$Message6);
                                                                                    }
                                                                                    if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                                                    }
                                                                                    if (z6) {
                                                                                    }
                                                                                    sQLitePreparedStatement38 = sQLitePreparedStatement17;
                                                                                    i20 = 0;
                                                                                    i21 = 2;
                                                                                    while (i20 < i21) {
                                                                                    }
                                                                                    hashMap10 = hashMap9;
                                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                                    long j152 = topicId2;
                                                                                    NativeByteBuffer nativeByteBuffer82 = nativeByteBuffer7;
                                                                                    i22 = i78;
                                                                                    int i962 = i80;
                                                                                    long j162 = j12;
                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                    sQLitePreparedStatement30 = sQLitePreparedStatement40;
                                                                                } catch (Exception e31) {
                                                                                    e = e31;
                                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement40;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                    sQLitePreparedStatement = null;
                                                                                    sQLitePreparedStatement2 = null;
                                                                                    sQLitePreparedStatement4 = null;
                                                                                    arrayList2 = null;
                                                                                    sQLitePreparedStatement11 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    exc = e;
                                                                                    messagesStorage.checkSQLException(exc);
                                                                                    if (arrayList2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 == null) {
                                                                                    }
                                                                                } catch (Throwable th34) {
                                                                                    th2 = th34;
                                                                                    sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement40;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                                    sQLitePreparedStatement = null;
                                                                                    sQLitePreparedStatement2 = null;
                                                                                    sQLitePreparedStatement4 = null;
                                                                                    arrayList2 = null;
                                                                                    sQLitePreparedStatement11 = null;
                                                                                    sQLitePreparedStatement10 = null;
                                                                                    th = th2;
                                                                                    if (arrayList2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            }
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement33;
                                                                            str12 = str8;
                                                                            longSparseArray20 = longSparseArray8;
                                                                            j12 = j2;
                                                                            hashMap42 = hashMap8;
                                                                            str17 = str7;
                                                                            hashMap24 = hashMap10;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement32;
                                                                            i76 = i18 + 1;
                                                                            sparseArray9 = sparseArray4;
                                                                            longSparseIntArray27 = longSparseIntArray12;
                                                                        } catch (Exception e32) {
                                                                            e = e32;
                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                            sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                        } catch (Throwable th35) {
                                                                            th2 = th35;
                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                            sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                        }
                                                                    } catch (Exception e33) {
                                                                        e = e33;
                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                        sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement40;
                                                                    } catch (Throwable th36) {
                                                                        th2 = th36;
                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                        sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement40;
                                                                    }
                                                                }
                                                                str4 = str17;
                                                                sQLitePreparedStatement16 = sQLitePreparedStatement37;
                                                                longSparseIntArray2 = longSparseIntArray27;
                                                                sparseArray3 = sparseArray9;
                                                                sQLitePreparedStatement17 = sQLitePreparedStatement38;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement39;
                                                                hashMap5 = hashMap42;
                                                                sQLitePreparedStatement18 = sQLitePreparedStatement40;
                                                                i4 = i77;
                                                                int i100 = i78;
                                                                hashMap6 = hashMap24;
                                                                SQLitePreparedStatement sQLitePreparedStatement41 = sQLitePreparedStatement7;
                                                                SQLitePreparedStatement sQLitePreparedStatement42 = sQLitePreparedStatement6;
                                                                SQLitePreparedStatement sQLitePreparedStatement43 = sQLitePreparedStatement14;
                                                                longSparseArray6 = longSparseArray20;
                                                                try {
                                                                    sQLitePreparedStatement15.dispose();
                                                                    sQLitePreparedStatement8.dispose();
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                        try {
                                                                            sQLitePreparedStatement16.dispose();
                                                                            sQLitePreparedStatement19 = null;
                                                                        } catch (Exception e34) {
                                                                            e = e34;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            exc = e;
                                                                            messagesStorage.checkSQLException(exc);
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                            }
                                                                        } catch (Throwable th37) {
                                                                            th2 = th37;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement16;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            th = th2;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        sQLitePreparedStatement19 = sQLitePreparedStatement16;
                                                                    }
                                                                    if (sQLitePreparedStatement17 != null) {
                                                                        try {
                                                                            sQLitePreparedStatement17.dispose();
                                                                            sQLitePreparedStatement20 = null;
                                                                        } catch (Exception e35) {
                                                                            e = e35;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            exc = e;
                                                                            messagesStorage.checkSQLException(exc);
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                            }
                                                                        } catch (Throwable th38) {
                                                                            th2 = th38;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement17;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                            th = th2;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement17;
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                        try {
                                                                            sQLitePreparedStatement9.dispose();
                                                                            sQLitePreparedStatement4 = null;
                                                                        } catch (Exception e36) {
                                                                            e = e36;
                                                                            sQLitePreparedStatement4 = null;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            arrayList2 = null;
                                                                            exc = e;
                                                                            messagesStorage.checkSQLException(exc);
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                            }
                                                                        } catch (Throwable th39) {
                                                                            th2 = th39;
                                                                            sQLitePreparedStatement4 = null;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            arrayList2 = null;
                                                                            th = th2;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                        try {
                                                                            getMessagesController().didAddedNewTask(i100, 0L, null);
                                                                            sQLitePreparedStatement9 = null;
                                                                        } catch (Exception e37) {
                                                                            e = e37;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            arrayList2 = null;
                                                                            exc = e;
                                                                            messagesStorage.checkSQLException(exc);
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                            }
                                                                        } catch (Throwable th40) {
                                                                            th2 = th40;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            arrayList2 = null;
                                                                            th = th2;
                                                                            if (arrayList2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement14 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        sQLitePreparedStatement4 = null;
                                                                    }
                                                                    if (sQLitePreparedStatement18 != null) {
                                                                        sQLitePreparedStatement18.dispose();
                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                    } else {
                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement18;
                                                                    }
                                                                    try {
                                                                        sQLitePreparedStatement43.dispose();
                                                                        try {
                                                                            sQLitePreparedStatement41.dispose();
                                                                            try {
                                                                                sQLitePreparedStatement42.dispose();
                                                                                if (arrayList31 != null) {
                                                                                    for (int i101 = 0; i101 < arrayList31.size(); i101++) {
                                                                                        try {
                                                                                            TLRPC$Message tLRPC$Message9 = (TLRPC$Message) arrayList31.get(i101);
                                                                                            messagesStorage.createOrEditTopic(tLRPC$Message9.dialog_id, tLRPC$Message9);
                                                                                        } catch (Exception e38) {
                                                                                            exc = e38;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement10;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement6;
                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            arrayList2 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                            }
                                                                                        } catch (Throwable th41) {
                                                                                            th = th41;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement4;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                                            sQLitePreparedStatement11 = sQLitePreparedStatement2;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement11;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement10;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement6;
                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            arrayList2 = null;
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                try {
                                                                                    executeFast = messagesStorage.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                                    try {
                                                                                        sQLitePreparedStatement = messagesStorage.database.executeFast("UPDATE dialogs SET date = ?, unread_count = ?, last_mid = ?, last_mid_group = ?, unread_count_i = ? WHERE did = ?");
                                                                                    } catch (Exception e39) {
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                        exc = e39;
                                                                                        sQLitePreparedStatement10 = executeFast;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                        sQLitePreparedStatement = null;
                                                                                    } catch (Throwable th42) {
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                        th = th42;
                                                                                        sQLitePreparedStatement10 = executeFast;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                        sQLitePreparedStatement = null;
                                                                                    }
                                                                                } catch (Exception e40) {
                                                                                    e = e40;
                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement19;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                } catch (Throwable th43) {
                                                                                    th = th43;
                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement19;
                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                }
                                                                            } catch (Exception e41) {
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                exc = e41;
                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement2 = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement11 = null;
                                                                                sQLitePreparedStatement10 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                }
                                                                            } catch (Throwable th44) {
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                                th = th44;
                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement = null;
                                                                                sQLitePreparedStatement2 = null;
                                                                                sQLitePreparedStatement4 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement11 = null;
                                                                                sQLitePreparedStatement10 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } catch (Exception e42) {
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            exc = e42;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                        } catch (Throwable th45) {
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                            th = th45;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement = null;
                                                                            sQLitePreparedStatement2 = null;
                                                                            sQLitePreparedStatement4 = null;
                                                                            arrayList2 = null;
                                                                            sQLitePreparedStatement11 = null;
                                                                            sQLitePreparedStatement10 = null;
                                                                        }
                                                                    } catch (Exception e43) {
                                                                        e = e43;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement11 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        exc = e;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 == null) {
                                                                        }
                                                                    } catch (Throwable th46) {
                                                                        th2 = th46;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement43;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement41;
                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement42;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement11 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        th = th2;
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e44) {
                                                                    e = e44;
                                                                } catch (Throwable th47) {
                                                                    th2 = th47;
                                                                }
                                                            } catch (Exception e45) {
                                                                e = e45;
                                                                sQLitePreparedStatement14 = executeFast9;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                sQLitePreparedStatement = null;
                                                                sQLitePreparedStatement2 = null;
                                                                sQLitePreparedStatement4 = null;
                                                                sQLitePreparedStatement5 = null;
                                                                arrayList2 = null;
                                                                sQLitePreparedStatement13 = null;
                                                                sQLitePreparedStatement12 = null;
                                                                sQLitePreparedStatement11 = null;
                                                                sQLitePreparedStatement10 = null;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement6 = null;
                                                                exc = e;
                                                                messagesStorage.checkSQLException(exc);
                                                                if (arrayList2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement14 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement13 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 == null) {
                                                                }
                                                            } catch (Throwable th48) {
                                                                th2 = th48;
                                                                sQLitePreparedStatement14 = executeFast9;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                sQLitePreparedStatement = null;
                                                                sQLitePreparedStatement2 = null;
                                                                sQLitePreparedStatement4 = null;
                                                                sQLitePreparedStatement5 = null;
                                                                arrayList2 = null;
                                                                sQLitePreparedStatement13 = null;
                                                                sQLitePreparedStatement12 = null;
                                                                sQLitePreparedStatement11 = null;
                                                                sQLitePreparedStatement10 = null;
                                                                sQLitePreparedStatement9 = null;
                                                                sQLitePreparedStatement6 = null;
                                                                th = th2;
                                                                if (arrayList2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement14 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement13 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } catch (Exception e46) {
                                                            e = e46;
                                                            sQLitePreparedStatement14 = executeFast9;
                                                            sQLitePreparedStatement7 = executeFast10;
                                                        } catch (Throwable th49) {
                                                            th2 = th49;
                                                            sQLitePreparedStatement14 = executeFast9;
                                                            sQLitePreparedStatement7 = executeFast10;
                                                        }
                                                    } catch (Exception e47) {
                                                        e = e47;
                                                        sQLitePreparedStatement14 = executeFast9;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        exc = e;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 == null) {
                                                        }
                                                    } catch (Throwable th50) {
                                                        th2 = th50;
                                                        sQLitePreparedStatement14 = executeFast9;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        th = th2;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                    try {
                                                        executeFast2 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                                        try {
                                                            SQLitePreparedStatement executeFast12 = messagesStorage.database.executeFast("UPDATE topics SET unread_count = ?, top_message = ?, unread_mentions = ?, total_messages_count = ? WHERE did = ? AND topic_id = ?");
                                                            try {
                                                                ArrayList<Long> arrayList34 = new ArrayList<>();
                                                                int i102 = 0;
                                                                while (i102 < longSparseArray6.size()) {
                                                                    LongSparseArray longSparseArray42 = longSparseArray6;
                                                                    try {
                                                                        long keyAt5 = longSparseArray42.keyAt(i102);
                                                                        if (keyAt5 == 0) {
                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement19;
                                                                            sQLitePreparedStatement11 = executeFast12;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                            arrayList11 = arrayList34;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                            i14 = i102;
                                                                            longSparseArray7 = longSparseArray42;
                                                                            longSparseIntArray11 = longSparseIntArray22;
                                                                            longSparseIntArray10 = longSparseIntArray;
                                                                            sQLitePreparedStatement29 = executeFast;
                                                                        } else {
                                                                            TLRPC$Message tLRPC$Message10 = (TLRPC$Message) longSparseArray42.valueAt(i102);
                                                                            ArrayList<Long> arrayList35 = arrayList34;
                                                                            long channelId = MessageObject.getChannelId(tLRPC$Message10);
                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement19;
                                                                            try {
                                                                                SQLiteDatabase sQLiteDatabase7 = messagesStorage.database;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                try {
                                                                                    StringBuilder sb9 = new StringBuilder();
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                    try {
                                                                                        sb9.append("SELECT date, unread_count, last_mid, unread_count_i FROM dialogs WHERE did = ");
                                                                                        sb9.append(keyAt5);
                                                                                        longSparseArray7 = longSparseArray42;
                                                                                        queryFinalized = sQLiteDatabase7.queryFinalized(sb9.toString(), new Object[0]);
                                                                                        next = queryFinalized.next();
                                                                                        if (next) {
                                                                                            try {
                                                                                                int intValue15 = queryFinalized.intValue(0);
                                                                                                int max2 = Math.max(0, queryFinalized.intValue(1));
                                                                                                int intValue16 = queryFinalized.intValue(2);
                                                                                                i11 = max2;
                                                                                                max = Math.max(0, queryFinalized.intValue(3));
                                                                                                i12 = intValue16;
                                                                                                sQLitePreparedStatement11 = executeFast12;
                                                                                                executeFast12 = intValue15;
                                                                                                i13 = executeFast12;
                                                                                            } catch (Exception e48) {
                                                                                                e = e48;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                                sQLitePreparedStatement10 = executeFast;
                                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                                sQLitePreparedStatement11 = executeFast12;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                sQLitePreparedStatement2 = null;
                                                                                                arrayList2 = null;
                                                                                                sQLitePreparedStatement7 = null;
                                                                                                sQLitePreparedStatement6 = null;
                                                                                                sQLitePreparedStatement14 = null;
                                                                                                exc = e;
                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                if (arrayList2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                                }
                                                                                            } catch (Throwable th51) {
                                                                                                th2 = th51;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                                sQLitePreparedStatement10 = executeFast;
                                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                                sQLitePreparedStatement11 = executeFast12;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                sQLitePreparedStatement2 = null;
                                                                                                arrayList2 = null;
                                                                                                sQLitePreparedStatement7 = null;
                                                                                                sQLitePreparedStatement6 = null;
                                                                                                sQLitePreparedStatement14 = null;
                                                                                                th = th2;
                                                                                                if (arrayList2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                }
                                                                                                throw th;
                                                                                            }
                                                                                        } else {
                                                                                            if (channelId != 0) {
                                                                                                getMessagesController().checkChatInviter(channelId, true);
                                                                                            }
                                                                                            sQLitePreparedStatement11 = executeFast12;
                                                                                            i13 = 0;
                                                                                            i12 = 0;
                                                                                            max = 0;
                                                                                            i11 = 0;
                                                                                        }
                                                                                    } catch (Exception e49) {
                                                                                        e = e49;
                                                                                        sQLitePreparedStatement29 = executeFast;
                                                                                        sQLitePreparedStatement11 = executeFast12;
                                                                                    } catch (Throwable th52) {
                                                                                        th = th52;
                                                                                        sQLitePreparedStatement29 = executeFast;
                                                                                        sQLitePreparedStatement11 = executeFast12;
                                                                                    }
                                                                                } catch (Exception e50) {
                                                                                    e = e50;
                                                                                    sQLitePreparedStatement29 = executeFast;
                                                                                    sQLitePreparedStatement11 = executeFast12;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                } catch (Throwable th53) {
                                                                                    th = th53;
                                                                                    sQLitePreparedStatement29 = executeFast;
                                                                                    sQLitePreparedStatement11 = executeFast12;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                }
                                                                            } catch (Exception e51) {
                                                                                e = e51;
                                                                                sQLitePreparedStatement11 = executeFast12;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                sQLitePreparedStatement29 = executeFast;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                exc = e;
                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement2 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                }
                                                                            } catch (Throwable th54) {
                                                                                th = th54;
                                                                                sQLitePreparedStatement11 = executeFast12;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                                sQLitePreparedStatement29 = executeFast;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                th = th;
                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement2 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                            try {
                                                                                queryFinalized.dispose();
                                                                                i14 = i102;
                                                                                LongSparseIntArray longSparseIntArray30 = longSparseIntArray2;
                                                                                int i103 = -1;
                                                                                int i104 = longSparseIntArray30.get(keyAt5, -1);
                                                                                LongSparseIntArray longSparseIntArray31 = longSparseIntArray;
                                                                                sQLitePreparedStatement10 = executeFast;
                                                                                try {
                                                                                    int i105 = longSparseIntArray31.get(keyAt5, -1);
                                                                                    if (i105 == -1) {
                                                                                        i105 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray31.put(keyAt5, i105 + i11);
                                                                                        i103 = -1;
                                                                                    }
                                                                                    if (i104 == i103) {
                                                                                        i104 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray30.put(keyAt5, i104 + max);
                                                                                    }
                                                                                    if (tLRPC$Message10 != null) {
                                                                                        try {
                                                                                            i15 = tLRPC$Message10.id;
                                                                                        } catch (Exception e52) {
                                                                                            e = e52;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement4 = executeFast2;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            arrayList2 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement14 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                            }
                                                                                        } catch (Throwable th55) {
                                                                                            th = th55;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement4 = executeFast2;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                            sQLitePreparedStatement2 = null;
                                                                                            arrayList2 = null;
                                                                                            sQLitePreparedStatement7 = null;
                                                                                            sQLitePreparedStatement6 = null;
                                                                                            sQLitePreparedStatement14 = null;
                                                                                            if (arrayList2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        i15 = i12;
                                                                                    }
                                                                                    if (tLRPC$Message10 != null) {
                                                                                        i16 = i15;
                                                                                        i17 = tLRPC$Message10.local_id;
                                                                                    } else {
                                                                                        i16 = i15;
                                                                                    }
                                                                                    i17 = i16;
                                                                                    if (messagesStorage.isForum(keyAt5)) {
                                                                                        longSparseIntArray2 = longSparseIntArray30;
                                                                                        longSparseIntArray9 = longSparseIntArray22;
                                                                                    } else {
                                                                                        if (i11 != 0 || i105 == 0) {
                                                                                            longSparseIntArray2 = longSparseIntArray30;
                                                                                            longSparseIntArray9 = longSparseIntArray22;
                                                                                        } else {
                                                                                            longSparseIntArray2 = longSparseIntArray30;
                                                                                            longSparseIntArray9 = longSparseIntArray22;
                                                                                            longSparseIntArray9.put(keyAt5, i105);
                                                                                        }
                                                                                        if (max == 0 && i104 != 0) {
                                                                                            longSparseIntArray10 = longSparseIntArray31;
                                                                                            LongSparseIntArray longSparseIntArray32 = longSparseIntArray20;
                                                                                            longSparseIntArray32.put(keyAt5, i104);
                                                                                            longSparseIntArray20 = longSparseIntArray32;
                                                                                            longSparseIntArray11 = longSparseIntArray9;
                                                                                            arrayList11 = arrayList35;
                                                                                            arrayList11.add(Long.valueOf(keyAt5));
                                                                                            if (!next) {
                                                                                                if (tLRPC$Message10 != null) {
                                                                                                    if (DialogObject.isEncryptedDialog(keyAt5)) {
                                                                                                        if (tLRPC$Message10.date > i13) {
                                                                                                        }
                                                                                                        if (tLRPC$Message10.send_state == 0 || (tLRPC$Message10.flags & LiteMode.FLAG_CHAT_SCALE) != 0) {
                                                                                                            executeFast2.requery();
                                                                                                            executeFast2.bindInteger(1, i11 + i105);
                                                                                                            executeFast2.bindInteger(2, max + i104);
                                                                                                            executeFast2.bindLong(3, keyAt5);
                                                                                                            executeFast2.step();
                                                                                                        }
                                                                                                    }
                                                                                                    sQLitePreparedStatement29 = sQLitePreparedStatement10;
                                                                                                }
                                                                                                sQLitePreparedStatement.requery();
                                                                                                int i106 = i13;
                                                                                                i106 = i13;
                                                                                                if (tLRPC$Message10 != null && (z2 == 0 || i13 == 0)) {
                                                                                                    i106 = tLRPC$Message10.date;
                                                                                                }
                                                                                                sQLitePreparedStatement.bindInteger(1, i106);
                                                                                                sQLitePreparedStatement.bindInteger(2, i11 + i105);
                                                                                                sQLitePreparedStatement.bindInteger(3, i17);
                                                                                                if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                    sQLitePreparedStatement.bindLong(4, tLRPC$Message10.grouped_id);
                                                                                                } else {
                                                                                                    sQLitePreparedStatement.bindNull(4);
                                                                                                }
                                                                                                sQLitePreparedStatement.bindInteger(5, max + i104);
                                                                                                sQLitePreparedStatement.bindLong(6, keyAt5);
                                                                                                sQLitePreparedStatement.step();
                                                                                                sQLitePreparedStatement29 = sQLitePreparedStatement10;
                                                                                            } else {
                                                                                                sQLitePreparedStatement10.requery();
                                                                                                sQLitePreparedStatement29 = sQLitePreparedStatement10;
                                                                                                try {
                                                                                                    sQLitePreparedStatement29.bindLong(1, keyAt5);
                                                                                                    int i107 = i13;
                                                                                                    i107 = i13;
                                                                                                    if (tLRPC$Message10 != null && (z2 == 0 || i13 == 0)) {
                                                                                                        i107 = tLRPC$Message10.date;
                                                                                                    }
                                                                                                    sQLitePreparedStatement29.bindInteger(2, i107);
                                                                                                    sQLitePreparedStatement29.bindInteger(3, i11 + i105);
                                                                                                    sQLitePreparedStatement29.bindInteger(4, i17);
                                                                                                    sQLitePreparedStatement29.bindInteger(5, 0);
                                                                                                    sQLitePreparedStatement29.bindInteger(6, 0);
                                                                                                    sQLitePreparedStatement29.bindLong(7, 0L);
                                                                                                    sQLitePreparedStatement29.bindInteger(8, max + i104);
                                                                                                    sQLitePreparedStatement29.bindInteger(9, channelId != 0 ? 1 : 0);
                                                                                                    sQLitePreparedStatement29.bindInteger(10, 0);
                                                                                                    sQLitePreparedStatement29.bindInteger(11, 0);
                                                                                                    sQLitePreparedStatement29.bindInteger(12, 0);
                                                                                                    sQLitePreparedStatement29.bindInteger(13, 0);
                                                                                                    sQLitePreparedStatement29.bindNull(14);
                                                                                                    sQLitePreparedStatement29.bindInteger(15, 0);
                                                                                                    if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                        sQLitePreparedStatement29.bindLong(16, tLRPC$Message10.grouped_id);
                                                                                                    } else {
                                                                                                        sQLitePreparedStatement29.bindNull(16);
                                                                                                    }
                                                                                                    sQLitePreparedStatement29.bindInteger(17, 0);
                                                                                                    sQLitePreparedStatement29.step();
                                                                                                    messagesStorage.unknownDialogsIds.put(keyAt5, Boolean.TRUE);
                                                                                                    i102 = i14 + 1;
                                                                                                    arrayList34 = arrayList11;
                                                                                                    executeFast = sQLitePreparedStatement29;
                                                                                                    longSparseIntArray = longSparseIntArray10;
                                                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement13;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement12;
                                                                                                    executeFast12 = sQLitePreparedStatement11;
                                                                                                    longSparseArray6 = longSparseArray7;
                                                                                                    longSparseIntArray22 = longSparseIntArray11;
                                                                                                    sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                                                } catch (Exception e53) {
                                                                                                    e = e53;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                                    exc = e;
                                                                                                    sQLitePreparedStatement4 = executeFast2;
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                    arrayList2 = null;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement6 = null;
                                                                                                    sQLitePreparedStatement14 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (arrayList2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 == null) {
                                                                                                    }
                                                                                                } catch (Throwable th56) {
                                                                                                    th = th56;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                                    th = th;
                                                                                                    sQLitePreparedStatement4 = executeFast2;
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                                    sQLitePreparedStatement2 = null;
                                                                                                    arrayList2 = null;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement6 = null;
                                                                                                    sQLitePreparedStatement14 = null;
                                                                                                    if (arrayList2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    longSparseIntArray10 = longSparseIntArray31;
                                                                                    longSparseIntArray11 = longSparseIntArray9;
                                                                                    arrayList11 = arrayList35;
                                                                                    arrayList11.add(Long.valueOf(keyAt5));
                                                                                    if (!next) {
                                                                                    }
                                                                                } catch (Exception e54) {
                                                                                    e = e54;
                                                                                } catch (Throwable th57) {
                                                                                    th = th57;
                                                                                }
                                                                            } catch (Exception e55) {
                                                                                e = e55;
                                                                                sQLitePreparedStatement29 = executeFast;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                exc = e;
                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement2 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                }
                                                                            } catch (Throwable th58) {
                                                                                th = th58;
                                                                                sQLitePreparedStatement29 = executeFast;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement28;
                                                                                th = th;
                                                                                sQLitePreparedStatement4 = executeFast2;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement29;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                                sQLitePreparedStatement2 = null;
                                                                                arrayList2 = null;
                                                                                sQLitePreparedStatement7 = null;
                                                                                sQLitePreparedStatement6 = null;
                                                                                sQLitePreparedStatement14 = null;
                                                                                if (arrayList2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        i102 = i14 + 1;
                                                                        arrayList34 = arrayList11;
                                                                        executeFast = sQLitePreparedStatement29;
                                                                        longSparseIntArray = longSparseIntArray10;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement12;
                                                                        executeFast12 = sQLitePreparedStatement11;
                                                                        longSparseArray6 = longSparseArray7;
                                                                        longSparseIntArray22 = longSparseIntArray11;
                                                                        sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                    } catch (Exception e56) {
                                                                        e = e56;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement19;
                                                                    } catch (Throwable th59) {
                                                                        th = th59;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement19;
                                                                    }
                                                                }
                                                                sQLitePreparedStatement22 = sQLitePreparedStatement19;
                                                                sQLitePreparedStatement11 = executeFast12;
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                arrayList5 = arrayList34;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                longSparseIntArray3 = longSparseIntArray22;
                                                                longSparseIntArray4 = longSparseIntArray;
                                                                sQLitePreparedStatement23 = executeFast;
                                                                try {
                                                                    sQLitePreparedStatement.dispose();
                                                                } catch (Exception e57) {
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                    exc = e57;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                    arrayList2 = null;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement6 = null;
                                                                    sQLitePreparedStatement14 = null;
                                                                    sQLitePreparedStatement4 = executeFast2;
                                                                    sQLitePreparedStatement2 = null;
                                                                    messagesStorage.checkSQLException(exc);
                                                                    if (arrayList2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement14 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 == null) {
                                                                    }
                                                                } catch (Throwable th60) {
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                    th = th60;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                    arrayList2 = null;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement6 = null;
                                                                    sQLitePreparedStatement14 = null;
                                                                    sQLitePreparedStatement4 = executeFast2;
                                                                    sQLitePreparedStatement2 = null;
                                                                    if (arrayList2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement14 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e58) {
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                SQLitePreparedStatement sQLitePreparedStatement44 = executeFast;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                exc = e58;
                                                                sQLitePreparedStatement10 = sQLitePreparedStatement44;
                                                                sQLitePreparedStatement11 = executeFast12;
                                                            } catch (Throwable th61) {
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                                SQLitePreparedStatement sQLitePreparedStatement45 = executeFast;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                                th = th61;
                                                                sQLitePreparedStatement10 = sQLitePreparedStatement45;
                                                                sQLitePreparedStatement11 = executeFast12;
                                                            }
                                                        } catch (Exception e59) {
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                            exc = e59;
                                                            sQLitePreparedStatement4 = executeFast2;
                                                            sQLitePreparedStatement10 = executeFast;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                            sQLitePreparedStatement2 = null;
                                                            arrayList2 = null;
                                                            sQLitePreparedStatement11 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement6 = null;
                                                            sQLitePreparedStatement14 = null;
                                                            messagesStorage.checkSQLException(exc);
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 == null) {
                                                            }
                                                        } catch (Throwable th62) {
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                            sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                            th = th62;
                                                            sQLitePreparedStatement4 = executeFast2;
                                                            sQLitePreparedStatement10 = executeFast;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                            sQLitePreparedStatement2 = null;
                                                            arrayList2 = null;
                                                            sQLitePreparedStatement11 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement6 = null;
                                                            sQLitePreparedStatement14 = null;
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    } catch (Exception e60) {
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                        exc = e60;
                                                        sQLitePreparedStatement10 = executeFast;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 == null) {
                                                        }
                                                    } catch (Throwable th63) {
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement19;
                                                        th = th63;
                                                        sQLitePreparedStatement10 = executeFast;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e61) {
                                                    e = e61;
                                                    sQLitePreparedStatement8 = executeFast8;
                                                } catch (Throwable th64) {
                                                    th2 = th64;
                                                    sQLitePreparedStatement8 = executeFast8;
                                                }
                                            } catch (Exception e62) {
                                                sQLitePreparedStatement8 = executeFast8;
                                                exc = e62;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement9 = null;
                                            } catch (Throwable th65) {
                                                sQLitePreparedStatement8 = executeFast8;
                                                th = th65;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement9 = null;
                                            }
                                        } catch (Exception e63) {
                                            e = e63;
                                            exc = e;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement2 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement5 = null;
                                            arrayList2 = null;
                                            sQLitePreparedStatement13 = null;
                                            sQLitePreparedStatement12 = null;
                                            sQLitePreparedStatement11 = null;
                                            sQLitePreparedStatement10 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement14 = null;
                                            messagesStorage.checkSQLException(exc);
                                            if (arrayList2 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement14 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement11 == null) {
                                            }
                                        } catch (Throwable th66) {
                                            th = th66;
                                            th = th;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement2 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement5 = null;
                                            arrayList2 = null;
                                            sQLitePreparedStatement13 = null;
                                            sQLitePreparedStatement12 = null;
                                            sQLitePreparedStatement11 = null;
                                            sQLitePreparedStatement10 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement14 = null;
                                            if (arrayList2 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement14 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            throw th;
                                        }
                                        try {
                                            executeFast2.dispose();
                                            try {
                                                sQLitePreparedStatement23.dispose();
                                                try {
                                                    arrayList6 = new ArrayList<>();
                                                    Iterator it4 = hashMap6.keySet().iterator();
                                                    while (it4.hasNext()) {
                                                        try {
                                                            TopicKey topicKey4 = (TopicKey) it4.next();
                                                            if (topicKey4.dialogId != 0 && topicKey4.topicId != 0) {
                                                                HashMap hashMap43 = hashMap6;
                                                                TLRPC$Message tLRPC$Message11 = (TLRPC$Message) hashMap43.get(topicKey4);
                                                                SQLiteDatabase sQLiteDatabase8 = messagesStorage.database;
                                                                StringBuilder sb10 = new StringBuilder();
                                                                sb10.append("SELECT unread_count, top_message, unread_mentions, total_messages_count FROM topics WHERE did = ");
                                                                sb10.append(topicKey4.dialogId);
                                                                String str18 = str2;
                                                                sb10.append(str18);
                                                                sb10.append(topicKey4.topicId);
                                                                SQLiteCursor queryFinalized9 = sQLiteDatabase8.queryFinalized(sb10.toString(), new Object[0]);
                                                                if (queryFinalized9.next()) {
                                                                    try {
                                                                        int intValue17 = queryFinalized9.intValue(0);
                                                                        intValue = queryFinalized9.intValue(1);
                                                                        intValue2 = queryFinalized9.intValue(2);
                                                                        intValue3 = queryFinalized9.intValue(3);
                                                                        i9 = intValue17;
                                                                        z5 = true;
                                                                    } catch (Exception e64) {
                                                                        e = e64;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                        exc = e;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement7 = null;
                                                                        sQLitePreparedStatement6 = null;
                                                                        sQLitePreparedStatement14 = null;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 == null) {
                                                                        }
                                                                    } catch (Throwable th67) {
                                                                        th = th67;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                        th = th;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement7 = null;
                                                                        sQLitePreparedStatement6 = null;
                                                                        sQLitePreparedStatement14 = null;
                                                                        if (arrayList2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    z5 = false;
                                                                    i9 = 0;
                                                                    intValue = 0;
                                                                    intValue2 = 0;
                                                                    intValue3 = 0;
                                                                }
                                                                queryFinalized9.dispose();
                                                                if (!z5) {
                                                                    TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                                                                    topicUpdate.dialogId = topicKey4.dialogId;
                                                                    topicUpdate.topicId = topicKey4.topicId;
                                                                    topicUpdate.reloadTopic = true;
                                                                    arrayList6.add(topicUpdate);
                                                                    StringBuilder sb11 = new StringBuilder();
                                                                    sb11.append("unknown topic need reload ");
                                                                    sb11.append(topicKey4.dialogId);
                                                                    String str19 = str4;
                                                                    sb11.append(str19);
                                                                    sb11.append(topicKey4.topicId);
                                                                    FileLog.d(sb11.toString());
                                                                    hashMap6 = hashMap43;
                                                                    str4 = str19;
                                                                    str2 = str18;
                                                                } else {
                                                                    HashMap hashMap44 = hashMap3;
                                                                    str6 = str4;
                                                                    Integer num6 = (Integer) hashMap44.get(topicKey4);
                                                                    HashMap hashMap45 = hashMap5;
                                                                    Integer num7 = (Integer) hashMap45.get(topicKey4);
                                                                    it = it4;
                                                                    HashMap hashMap46 = hashMap4;
                                                                    Integer num8 = (Integer) hashMap46.get(topicKey4);
                                                                    if (tLRPC$Message11 != null) {
                                                                        intValue = tLRPC$Message11.id;
                                                                    }
                                                                    if (tLRPC$Message11 != null) {
                                                                        hashMap4 = hashMap46;
                                                                        int i108 = tLRPC$Message11.local_id;
                                                                        if (i108 != 0) {
                                                                            intValue = i108;
                                                                        }
                                                                    } else {
                                                                        hashMap4 = hashMap46;
                                                                    }
                                                                    int intValue18 = num6 != null ? num6.intValue() : 0;
                                                                    int intValue19 = num7 != null ? num7.intValue() : 0;
                                                                    int intValue20 = num8 != null ? num8.intValue() : 0;
                                                                    int i109 = intValue18 + i9;
                                                                    int i110 = intValue19 + intValue2;
                                                                    if (intValue3 == 0) {
                                                                        hashMap6 = hashMap43;
                                                                        i10 = 0;
                                                                    } else {
                                                                        hashMap6 = hashMap43;
                                                                        i10 = intValue3 + intValue20;
                                                                    }
                                                                    if (!BuildVars.DEBUG_PRIVATE_VERSION || i110 <= 0) {
                                                                        hashMap7 = hashMap45;
                                                                        hashMap3 = hashMap44;
                                                                        str2 = str18;
                                                                    } else {
                                                                        hashMap7 = hashMap45;
                                                                        StringBuilder sb12 = new StringBuilder();
                                                                        hashMap3 = hashMap44;
                                                                        sb12.append("(putMessagesInternal) new unread mentions ");
                                                                        sb12.append(i110);
                                                                        sb12.append(" for dialog_id=");
                                                                        str2 = str18;
                                                                        sb12.append(topicKey4.dialogId);
                                                                        sb12.append(" topic_id=");
                                                                        sb12.append(topicKey4.topicId);
                                                                        FileLog.d(sb12.toString());
                                                                    }
                                                                    sQLitePreparedStatement11.requery();
                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement11;
                                                                    try {
                                                                        sQLitePreparedStatement24.bindInteger(1, i109);
                                                                        sQLitePreparedStatement24.bindInteger(2, intValue);
                                                                        sQLitePreparedStatement24.bindInteger(3, i110);
                                                                        sQLitePreparedStatement24.bindInteger(4, i10);
                                                                        arrayList10 = arrayList5;
                                                                        sQLitePreparedStatement24.bindLong(5, topicKey4.dialogId);
                                                                        sQLitePreparedStatement24.bindLong(6, topicKey4.topicId);
                                                                        sQLitePreparedStatement24.step();
                                                                        if (messagesStorage.isForum(topicKey4.dialogId)) {
                                                                            if (i9 != 0 || i109 == 0) {
                                                                                longSparseIntArray8 = longSparseIntArray3;
                                                                            } else {
                                                                                longSparseIntArray8 = longSparseIntArray3;
                                                                                longSparseIntArray8.put(topicKey4.dialogId, 1);
                                                                            }
                                                                            if (intValue2 != 0 || i110 == 0) {
                                                                                longSparseIntArray7 = longSparseIntArray20;
                                                                            } else {
                                                                                longSparseIntArray7 = longSparseIntArray20;
                                                                                longSparseIntArray7.put(topicKey4.dialogId, i110);
                                                                            }
                                                                        } else {
                                                                            longSparseIntArray7 = longSparseIntArray20;
                                                                            longSparseIntArray8 = longSparseIntArray3;
                                                                        }
                                                                        StringBuilder sb13 = new StringBuilder();
                                                                        sb13.append("update topic ");
                                                                        longSparseIntArray3 = longSparseIntArray8;
                                                                        sb13.append(topicKey4.dialogId);
                                                                        sb13.append(str6);
                                                                        sb13.append(topicKey4.topicId);
                                                                        sb13.append(str6);
                                                                        sb13.append(i109);
                                                                        sb13.append(str6);
                                                                        sb13.append(i110);
                                                                        FileLog.d(sb13.toString());
                                                                        if (tLRPC$Message11 != null) {
                                                                            TopicsController.TopicUpdate topicUpdate2 = new TopicsController.TopicUpdate();
                                                                            topicUpdate2.dialogId = topicKey4.dialogId;
                                                                            topicUpdate2.topicId = topicKey4.topicId;
                                                                            topicUpdate2.topMessage = tLRPC$Message11;
                                                                            topicUpdate2.unreadMentions = i110;
                                                                            topicUpdate2.topMessageId = intValue;
                                                                            topicUpdate2.unreadCount = i109;
                                                                            topicUpdate2.totalMessagesCount = i10;
                                                                            arrayList6.add(topicUpdate2);
                                                                        }
                                                                        it4 = it;
                                                                        longSparseIntArray20 = longSparseIntArray7;
                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                                        str4 = str6;
                                                                        arrayList5 = arrayList10;
                                                                        hashMap5 = hashMap7;
                                                                    } catch (Exception e65) {
                                                                        e = e65;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                        exc = e;
                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement7 = null;
                                                                        sQLitePreparedStatement6 = null;
                                                                        sQLitePreparedStatement14 = null;
                                                                        messagesStorage.checkSQLException(exc);
                                                                        if (arrayList2 != null && (sQLiteDatabase2 = messagesStorage.database) != null) {
                                                                            sQLiteDatabase2.commitTransaction();
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                            sQLitePreparedStatement3.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                            sQLitePreparedStatement8.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                            sQLitePreparedStatement14.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                            sQLitePreparedStatement7.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                            sQLitePreparedStatement6.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                            sQLitePreparedStatement5.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                            sQLitePreparedStatement13.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                            sQLitePreparedStatement2.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                            sQLitePreparedStatement12.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                            sQLitePreparedStatement9.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                            sQLitePreparedStatement10.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                            sQLitePreparedStatement.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                            sQLitePreparedStatement4.dispose();
                                                                        }
                                                                        if (sQLitePreparedStatement11 == null) {
                                                                            sQLitePreparedStatement11.dispose();
                                                                            return;
                                                                        }
                                                                        return;
                                                                    } catch (Throwable th68) {
                                                                        th = th68;
                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                                        th = th;
                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLitePreparedStatement2 = null;
                                                                        sQLitePreparedStatement4 = null;
                                                                        arrayList2 = null;
                                                                        sQLitePreparedStatement10 = null;
                                                                        sQLitePreparedStatement7 = null;
                                                                        sQLitePreparedStatement6 = null;
                                                                        sQLitePreparedStatement14 = null;
                                                                        if (arrayList2 != null) {
                                                                            sQLiteDatabase.commitTransaction();
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement14 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                }
                                                            }
                                                            it = it4;
                                                            arrayList10 = arrayList5;
                                                            sQLitePreparedStatement24 = sQLitePreparedStatement11;
                                                            hashMap7 = hashMap5;
                                                            str6 = str4;
                                                            longSparseIntArray7 = longSparseIntArray20;
                                                            it4 = it;
                                                            longSparseIntArray20 = longSparseIntArray7;
                                                            sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                            str4 = str6;
                                                            arrayList5 = arrayList10;
                                                            hashMap5 = hashMap7;
                                                        } catch (Exception e66) {
                                                            e = e66;
                                                        } catch (Throwable th69) {
                                                            th = th69;
                                                        }
                                                    }
                                                    arrayList7 = arrayList5;
                                                    sQLitePreparedStatement24 = sQLitePreparedStatement11;
                                                    str5 = str4;
                                                    longSparseIntArray5 = longSparseIntArray20;
                                                } catch (Exception e67) {
                                                    e = e67;
                                                } catch (Throwable th70) {
                                                    th = th70;
                                                }
                                            } catch (Exception e68) {
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                exc = e68;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 == null) {
                                                }
                                            } catch (Throwable th71) {
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                th = th71;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                throw th;
                                            }
                                            try {
                                                sQLitePreparedStatement24.dispose();
                                                if (sparseArray3 != null) {
                                                    try {
                                                        executeFast3 = messagesStorage.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)");
                                                    } catch (Exception e69) {
                                                        e = e69;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                        exc = e;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 == null) {
                                                        }
                                                    } catch (Throwable th72) {
                                                        th = th72;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                        th = th;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        sQLitePreparedStatement14 = null;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                    try {
                                                        int size5 = sparseArray3.size();
                                                        for (int i111 = 0; i111 < size5; i111++) {
                                                            SparseArray sparseArray12 = sparseArray3;
                                                            int keyAt6 = sparseArray12.keyAt(i111);
                                                            LongSparseIntArray longSparseIntArray33 = (LongSparseIntArray) sparseArray12.valueAt(i111);
                                                            int size6 = longSparseIntArray33.size();
                                                            int i112 = 0;
                                                            while (i112 < size6) {
                                                                long keyAt7 = longSparseIntArray33.keyAt(i112);
                                                                int i113 = size5;
                                                                int i114 = size6;
                                                                ArrayList<TopicsController.TopicUpdate> arrayList36 = arrayList6;
                                                                SparseArray sparseArray13 = sparseArray12;
                                                                LongSparseIntArray longSparseIntArray34 = longSparseIntArray5;
                                                                SQLiteCursor queryFinalized10 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", Long.valueOf(keyAt7), Integer.valueOf(keyAt6)), new Object[0]);
                                                                if (queryFinalized10.next()) {
                                                                    i5 = queryFinalized10.intValue(0);
                                                                    i6 = queryFinalized10.intValue(1);
                                                                } else {
                                                                    i5 = -1;
                                                                    i6 = 0;
                                                                }
                                                                queryFinalized10.dispose();
                                                                if (i5 != -1) {
                                                                    executeFast3.requery();
                                                                    executeFast3.bindLong(1, keyAt7);
                                                                    executeFast3.bindInteger(2, keyAt6);
                                                                    executeFast3.bindInteger(3, Math.max(0, i5 + longSparseIntArray33.valueAt(i112)));
                                                                    executeFast3.bindInteger(4, i6);
                                                                    executeFast3.step();
                                                                }
                                                                i112++;
                                                                size5 = i113;
                                                                size6 = i114;
                                                                arrayList6 = arrayList36;
                                                                longSparseIntArray5 = longSparseIntArray34;
                                                                sparseArray12 = sparseArray13;
                                                            }
                                                            sparseArray3 = sparseArray12;
                                                        }
                                                        arrayList8 = arrayList6;
                                                        longSparseIntArray6 = longSparseIntArray5;
                                                        executeFast3.dispose();
                                                    } catch (Exception e70) {
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                        exc = e70;
                                                        sQLitePreparedStatement14 = executeFast3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 == null) {
                                                        }
                                                    } catch (Throwable th73) {
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                        th = th73;
                                                        sQLitePreparedStatement14 = executeFast3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        arrayList2 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement6 = null;
                                                        if (arrayList2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } else {
                                                    arrayList8 = arrayList6;
                                                    longSparseIntArray6 = longSparseIntArray5;
                                                }
                                            } catch (Exception e71) {
                                                e = e71;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                exc = e;
                                                sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 == null) {
                                                }
                                            } catch (Throwable th74) {
                                                th = th74;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                th = th;
                                                sQLitePreparedStatement11 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                throw th;
                                            }
                                            try {
                                                SQLitePreparedStatement executeFast13 = messagesStorage.database.executeFast("REPLACE INTO media_counts_topics VALUES(?, ?, ?, ?, ?)");
                                                try {
                                                    int size7 = sparseArray2.size();
                                                    for (int i115 = 0; i115 < size7; i115++) {
                                                        SparseArray sparseArray14 = sparseArray2;
                                                        try {
                                                            int keyAt8 = sparseArray14.keyAt(i115);
                                                            HashMap hashMap47 = (HashMap) sparseArray14.valueAt(i115);
                                                            for (TopicKey topicKey5 : hashMap47.keySet()) {
                                                                int i116 = size7;
                                                                SparseArray sparseArray15 = sparseArray14;
                                                                SQLiteCursor queryFinalized11 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_topics WHERE uid = %d AND topic_id = %d AND type = %d LIMIT 1", Long.valueOf(topicKey5.dialogId), Long.valueOf(topicKey5.topicId), Integer.valueOf(keyAt8)), new Object[0]);
                                                                if (queryFinalized11.next()) {
                                                                    i7 = queryFinalized11.intValue(0);
                                                                    i8 = queryFinalized11.intValue(1);
                                                                } else {
                                                                    i7 = -1;
                                                                    i8 = 0;
                                                                }
                                                                queryFinalized11.dispose();
                                                                if (i7 != -1) {
                                                                    executeFast13.requery();
                                                                    i7 += ((Integer) hashMap47.get(topicKey5)).intValue();
                                                                    executeFast13.bindLong(1, topicKey5.dialogId);
                                                                    executeFast13.bindLong(2, topicKey5.topicId);
                                                                    executeFast13.bindInteger(3, keyAt8);
                                                                    executeFast13.bindInteger(4, Math.max(0, i7));
                                                                    executeFast13.bindInteger(5, i8);
                                                                    executeFast13.step();
                                                                }
                                                                if (BuildVars.DEBUG_PRIVATE_VERSION) {
                                                                    FileLog.d("update" + topicKey5.dialogId + topicKey5.topicId + str5 + keyAt8 + str5 + i7);
                                                                }
                                                                size7 = i116;
                                                                sparseArray14 = sparseArray15;
                                                            }
                                                            sparseArray2 = sparseArray14;
                                                        } catch (Exception e72) {
                                                            e = e72;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                            sQLitePreparedStatement14 = executeFast13;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement2 = null;
                                                            sQLitePreparedStatement4 = null;
                                                            arrayList2 = null;
                                                            sQLitePreparedStatement11 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement6 = null;
                                                            exc = e;
                                                            messagesStorage.checkSQLException(exc);
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 == null) {
                                                            }
                                                        } catch (Throwable th75) {
                                                            th2 = th75;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                            sQLitePreparedStatement14 = executeFast13;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement2 = null;
                                                            sQLitePreparedStatement4 = null;
                                                            arrayList2 = null;
                                                            sQLitePreparedStatement11 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement6 = null;
                                                            th = th2;
                                                            if (arrayList2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                    executeFast13.dispose();
                                                    if (z) {
                                                        messagesStorage.database.commitTransaction();
                                                    }
                                                    messagesStorage.updateFiltersReadCounter(longSparseIntArray3, longSparseIntArray6, false);
                                                    ArrayList<TopicsController.TopicUpdate> arrayList37 = arrayList8;
                                                    messagesStorage.loadGroupedMessagesForTopicUpdates(arrayList37);
                                                    getMessagesController().processDialogsUpdateRead(longSparseIntArray4, longSparseIntArray2);
                                                    getMessagesController().getTopicsController().processUpdate(arrayList37);
                                                    if (i4 != 0) {
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda35
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$putMessagesInternal$189(i4);
                                                            }
                                                        });
                                                    }
                                                    messagesStorage.updateWidgets(arrayList7);
                                                    if (arrayList4 != null) {
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda171
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$putMessagesInternal$190(arrayList4);
                                                            }
                                                        });
                                                    }
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement26 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement27 = sQLitePreparedStatement8;
                                                    arrayList9 = null;
                                                    if (arrayList9 != null && (sQLiteDatabase3 = messagesStorage.database) != null) {
                                                        sQLiteDatabase3.commitTransaction();
                                                    }
                                                    if (sQLitePreparedStatement26 != null) {
                                                        sQLitePreparedStatement26.dispose();
                                                    }
                                                    if (sQLitePreparedStatement27 != null) {
                                                        sQLitePreparedStatement27.dispose();
                                                    }
                                                    if (sQLitePreparedStatement25 != null) {
                                                        sQLitePreparedStatement25.dispose();
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                        sQLitePreparedStatement13.dispose();
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                        sQLitePreparedStatement12.dispose();
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                        sQLitePreparedStatement9.dispose();
                                                        return;
                                                    }
                                                    return;
                                                } catch (Exception e73) {
                                                    e = e73;
                                                } catch (Throwable th76) {
                                                    th2 = th76;
                                                }
                                            } catch (Exception e74) {
                                                e = e74;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                exc = e;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 == null) {
                                                }
                                            } catch (Throwable th77) {
                                                th = th77;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                                th = th;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement4 = null;
                                                arrayList2 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement14 = null;
                                                if (arrayList2 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e75) {
                                            sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                            exc = e75;
                                            sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement = null;
                                            arrayList2 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement14 = null;
                                            sQLitePreparedStatement4 = executeFast2;
                                            sQLitePreparedStatement2 = null;
                                            messagesStorage.checkSQLException(exc);
                                            if (arrayList2 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement14 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement11 == null) {
                                            }
                                        } catch (Throwable th78) {
                                            sQLitePreparedStatement5 = sQLitePreparedStatement22;
                                            th = th78;
                                            sQLitePreparedStatement10 = sQLitePreparedStatement23;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement15;
                                            sQLitePreparedStatement = null;
                                            arrayList2 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement14 = null;
                                            sQLitePreparedStatement4 = executeFast2;
                                            sQLitePreparedStatement2 = null;
                                            if (arrayList2 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement14 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e76) {
                                        e = e76;
                                        sQLitePreparedStatement15 = executeFast7;
                                    } catch (Throwable th79) {
                                        th = th79;
                                        sQLitePreparedStatement15 = executeFast7;
                                    }
                                }
                                arrayList9 = arrayList15;
                                sQLitePreparedStatement25 = null;
                                sQLitePreparedStatement26 = null;
                                sQLitePreparedStatement27 = null;
                                sQLitePreparedStatement13 = null;
                                sQLitePreparedStatement12 = null;
                                sQLitePreparedStatement9 = null;
                                if (arrayList9 != null) {
                                    sQLiteDatabase3.commitTransaction();
                                }
                                if (sQLitePreparedStatement26 != null) {
                                }
                                if (sQLitePreparedStatement27 != null) {
                                }
                                if (sQLitePreparedStatement25 != null) {
                                }
                                if (sQLitePreparedStatement13 != null) {
                                }
                                if (sQLitePreparedStatement12 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                            }
                        } catch (Exception e77) {
                            e = e77;
                            exc = e;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            arrayList2 = null;
                            sQLitePreparedStatement13 = null;
                            sQLitePreparedStatement12 = null;
                            sQLitePreparedStatement11 = null;
                            sQLitePreparedStatement10 = null;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement14 = null;
                            messagesStorage.checkSQLException(exc);
                            if (arrayList2 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement14 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement13 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement12 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement11 == null) {
                            }
                        } catch (Throwable th80) {
                            th = th80;
                            th = th;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            arrayList2 = null;
                            sQLitePreparedStatement13 = null;
                            sQLitePreparedStatement12 = null;
                            sQLitePreparedStatement11 = null;
                            sQLitePreparedStatement10 = null;
                            sQLitePreparedStatement9 = null;
                            sQLitePreparedStatement8 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement14 = null;
                            if (arrayList2 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement8 != null) {
                            }
                            if (sQLitePreparedStatement14 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                            if (sQLitePreparedStatement5 != null) {
                            }
                            if (sQLitePreparedStatement13 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement12 != null) {
                            }
                            if (sQLitePreparedStatement9 != null) {
                            }
                            if (sQLitePreparedStatement10 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement4 != null) {
                            }
                            if (sQLitePreparedStatement11 != null) {
                            }
                            throw th;
                        }
                    }
                    if (!z4) {
                    }
                    arrayList9 = arrayList15;
                    sQLitePreparedStatement25 = null;
                    sQLitePreparedStatement26 = null;
                    sQLitePreparedStatement27 = null;
                    sQLitePreparedStatement13 = null;
                    sQLitePreparedStatement12 = null;
                    sQLitePreparedStatement9 = null;
                    if (arrayList9 != null) {
                    }
                    if (sQLitePreparedStatement26 != null) {
                    }
                    if (sQLitePreparedStatement27 != null) {
                    }
                    if (sQLitePreparedStatement25 != null) {
                    }
                    if (sQLitePreparedStatement13 != null) {
                    }
                    if (sQLitePreparedStatement12 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                } catch (Exception e78) {
                    e = e78;
                    arrayList2 = arrayList18;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement13 = null;
                    sQLitePreparedStatement12 = null;
                    sQLitePreparedStatement11 = null;
                    sQLitePreparedStatement10 = null;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                } catch (Throwable th81) {
                    th2 = th81;
                    arrayList2 = arrayList18;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement13 = null;
                    sQLitePreparedStatement12 = null;
                    sQLitePreparedStatement11 = null;
                    sQLitePreparedStatement10 = null;
                    sQLitePreparedStatement9 = null;
                    sQLitePreparedStatement8 = null;
                }
            } catch (Exception e79) {
                e = e79;
                z2 = i47;
                arrayList2 = z2;
                exc = e;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLitePreparedStatement3 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement13 = null;
                sQLitePreparedStatement12 = null;
                sQLitePreparedStatement11 = null;
                sQLitePreparedStatement10 = null;
                sQLitePreparedStatement9 = null;
                sQLitePreparedStatement8 = null;
                sQLitePreparedStatement7 = null;
                sQLitePreparedStatement6 = null;
                sQLitePreparedStatement14 = null;
                messagesStorage.checkSQLException(exc);
                if (arrayList2 != null) {
                }
                if (sQLitePreparedStatement3 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement14 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement4 != null) {
                }
                if (sQLitePreparedStatement11 == null) {
                }
            } catch (Throwable th82) {
                th = th82;
                z2 = i47;
                arrayList2 = z2;
                th = th;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLitePreparedStatement3 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement13 = null;
                sQLitePreparedStatement12 = null;
                sQLitePreparedStatement11 = null;
                sQLitePreparedStatement10 = null;
                sQLitePreparedStatement9 = null;
                sQLitePreparedStatement8 = null;
                sQLitePreparedStatement7 = null;
                sQLitePreparedStatement6 = null;
                sQLitePreparedStatement14 = null;
                if (arrayList2 != null) {
                }
                if (sQLitePreparedStatement3 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement14 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement4 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                throw th;
            }
        } catch (Exception e80) {
            e = e80;
            arrayList2 = z2;
            exc = e;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement13 = null;
            sQLitePreparedStatement12 = null;
            sQLitePreparedStatement11 = null;
            sQLitePreparedStatement10 = null;
            sQLitePreparedStatement9 = null;
            sQLitePreparedStatement8 = null;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement6 = null;
            sQLitePreparedStatement14 = null;
            messagesStorage.checkSQLException(exc);
            if (arrayList2 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement14 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement11 == null) {
            }
        } catch (Throwable th83) {
            th = th83;
            arrayList2 = z2;
            th = th;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement13 = null;
            sQLitePreparedStatement12 = null;
            sQLitePreparedStatement11 = null;
            sQLitePreparedStatement10 = null;
            sQLitePreparedStatement9 = null;
            sQLitePreparedStatement8 = null;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement6 = null;
            sQLitePreparedStatement14 = null;
            if (arrayList2 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement14 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            throw th;
        }
        i3 = i2;
        quickReplyId = j;
        if (i3 != 1) {
        }
        if (i3 != 5) {
        }
        long clientUserId2 = getUserConfig().getClientUserId();
        int i482 = 2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$189(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$190(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    private void createOrEditTopic(final long j, TLRPC$Message tLRPC$Message) {
        final TLRPC$TL_forumTopic tLRPC$TL_forumTopic = new TLRPC$TL_forumTopic();
        tLRPC$TL_forumTopic.topicStartMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.top_message = tLRPC$Message.id;
        tLRPC$TL_forumTopic.topMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.from_id = tLRPC$Message.from_id;
        tLRPC$TL_forumTopic.notify_settings = new TLRPC$TL_peerNotifySettings();
        tLRPC$TL_forumTopic.unread_count = 0;
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
            TLRPC$TL_messageActionTopicCreate tLRPC$TL_messageActionTopicCreate = (TLRPC$TL_messageActionTopicCreate) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = tLRPC$Message.id;
            long j2 = tLRPC$TL_messageActionTopicCreate.icon_emoji_id;
            tLRPC$TL_forumTopic.icon_emoji_id = j2;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicCreate.title;
            tLRPC$TL_forumTopic.icon_color = tLRPC$TL_messageActionTopicCreate.icon_color;
            if (j2 != 0) {
                tLRPC$TL_forumTopic.flags |= 1;
            }
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$TL_forumTopic);
            saveTopics(j, arrayList, false, false, tLRPC$Message.date);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda129
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$createOrEditTopic$191(j, tLRPC$TL_forumTopic);
                }
            });
        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicEdit) {
            TLRPC$TL_messageActionTopicEdit tLRPC$TL_messageActionTopicEdit = (TLRPC$TL_messageActionTopicEdit) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = (int) MessageObject.getTopicId(this.currentAccount, tLRPC$Message, true);
            tLRPC$TL_forumTopic.icon_emoji_id = tLRPC$TL_messageActionTopicEdit.icon_emoji_id;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicEdit.title;
            tLRPC$TL_forumTopic.closed = tLRPC$TL_messageActionTopicEdit.closed;
            tLRPC$TL_forumTopic.hidden = tLRPC$TL_messageActionTopicEdit.hidden;
            int i = tLRPC$TL_messageActionTopicEdit.flags;
            int i2 = (i & 1) != 0 ? 1 : 0;
            if ((i & 2) != 0) {
                i2 += 2;
            }
            if ((i & 4) != 0) {
                i2 += 8;
            }
            if ((i & 8) != 0) {
                i2 += 32;
            }
            updateTopicData(j, tLRPC$TL_forumTopic, i2, tLRPC$Message.date);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createOrEditTopic$191(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        getMessagesController().getTopicsController().onTopicCreated(j, tLRPC$TL_forumTopic, false);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, int i2, long j) {
        putMessages(arrayList, z, z2, z3, i, false, i2, j);
    }

    public void putMessages(final ArrayList<TLRPC$Message> arrayList, final boolean z, boolean z2, final boolean z3, final int i, final boolean z4, final int i2, final long j) {
        if (arrayList.size() == 0) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda186
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
                }
            });
        } else {
            lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
        }
    }

    public void markMessageAsSendError(final TLRPC$Message tLRPC$Message, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda69
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsSendError$193(i, tLRPC$Message);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsSendError$193(int i, TLRPC$Message tLRPC$Message) {
        try {
            long j = tLRPC$Message.id;
            if (MessageObject.isQuickReply(tLRPC$Message)) {
                i = 5;
            }
            if (i == 5) {
                this.database.executeFast(String.format(Locale.US, "UPDATE quick_replies_messages SET send_state = 2 WHERE mid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(MessageObject.getQuickReplyId(this.currentAccount, tLRPC$Message)))).stepThis().dispose();
            } else if (i == 1) {
                this.database.executeFast(String.format(Locale.US, "UPDATE scheduled_messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void setMessageSeq(final int i, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda42
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setMessageSeq$194(i, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageSeq$194(int i, int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindInteger(2, i2);
                sQLitePreparedStatement.bindInteger(3, i3);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(13:(1:36)|(1:38)(2:82|(1:84)(2:85|(1:87)(11:88|40|41|42|(1:44)(1:78)|45|(4:47|48|49|50)(1:77)|51|(1:53)|54|55)))|39|40|41|42|(0)(0)|45|(0)(0)|51|(0)|54|55) */
    /* JADX WARN: Can't wrap try/catch for region: R(14:197|(2:198|199)|(1:201)|(1:203)|156|157|158|(2:159|160)|161|162|163|164|101|102) */
    /* JADX WARN: Can't wrap try/catch for region: R(33:1|2|(7:307|308|309|310|(3:312|313|314)(1:325)|315|(1:317))(1:4)|5|(2:280|(17:282|283|284|285|286|287|288|289|21|(10:238|239|240|241|(2:243|244)(1:264)|245|246|247|(2:249|250)(1:253)|251)(1:24)|(1:26)(1:237)|222|223|(2:225|226)|228|28|(2:33|(4:93|(18:147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164)(3:95|96|(5:126|127|128|129|130)(3:98|99|(6:103|104|105|106|107|108)))|101|102)(13:36|(1:38)(2:82|(1:84)(2:85|(1:87)(11:88|40|41|42|(1:44)(1:78)|45|(4:47|48|49|50)(1:77)|51|(1:53)|54|55)))|39|40|41|42|(0)(0)|45|(0)(0)|51|(0)|54|55))(1:32)))|7|(6:9|(1:11)(1:20)|12|13|14|15)|21|(0)|238|239|240|241|(0)(0)|245|246|247|(0)(0)|251|(0)(0)|222|223|(0)|228|28|(1:30)|33|(0)|93|(0)(0)|101|102|(13:(0)|(1:188)|(1:232)|(1:191)|(1:169)|(1:114)|(1:136)|(0)|(0)|(0)|(0)|(0)|(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:100:0x01a9, code lost:
        if (r8 != null) goto L261;
     */
    /* JADX WARN: Code restructure failed: missing block: B:101:0x01ab, code lost:
        r8.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x01ae, code lost:
        r5 = r28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:105:0x01b3, code lost:
        if (r4 == 1) goto L222;
     */
    /* JADX WARN: Code restructure failed: missing block: B:116:0x01e5, code lost:
        if (r8 == null) goto L28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:161:0x0265, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x0268, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x0391, code lost:
        if (r3 != null) goto L158;
     */
    /* JADX WARN: Code restructure failed: missing block: B:226:0x03f9, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x03fa, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x03fd, code lost:
        if (r5 == null) goto L101;
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x046b, code lost:
        if (r5 == 0) goto L101;
     */
    /* JADX WARN: Code restructure failed: missing block: B:278:0x04c9, code lost:
        if (r4 == 0) goto L101;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x00a3, code lost:
        if (r10 == null) goto L21;
     */
    /* JADX WARN: Code restructure failed: missing block: B:82:0x0163, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x0164, code lost:
        r8 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:84:0x0168, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x0169, code lost:
        r8 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:98:0x01a5, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:99:0x01a6, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Not initialized variable reg: 8, insn: 0x005a: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]), block:B:27:0x005a */
    /* JADX WARN: Removed duplicated region for block: B:104:0x01b2  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x01b6  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01d6 A[Catch: all -> 0x01de, Exception -> 0x01e1, TRY_LEAVE, TryCatch #10 {Exception -> 0x01e1, blocks: (B:108:0x01b7, B:110:0x01d6), top: B:311:0x01b7, outer: #22 }] */
    /* JADX WARN: Removed duplicated region for block: B:120:0x01f0  */
    /* JADX WARN: Removed duplicated region for block: B:126:0x01f8 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0231 A[Catch: all -> 0x0265, Exception -> 0x0268, TryCatch #50 {Exception -> 0x0268, all -> 0x0265, blocks: (B:143:0x0228, B:145:0x0231, B:147:0x0234, B:149:0x023d), top: B:350:0x0228 }] */
    /* JADX WARN: Removed duplicated region for block: B:146:0x0233  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x023d A[Catch: all -> 0x0265, Exception -> 0x0268, TRY_LEAVE, TryCatch #50 {Exception -> 0x0268, all -> 0x0265, blocks: (B:143:0x0228, B:145:0x0231, B:147:0x0234, B:149:0x023d), top: B:350:0x0228 }] */
    /* JADX WARN: Removed duplicated region for block: B:157:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x0261  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x0284  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x0289  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x03e2  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x0421  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0058 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:261:0x0473  */
    /* JADX WARN: Removed duplicated region for block: B:293:0x04f2  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x0079 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:360:0x028f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00bc  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0129 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0153 A[Catch: Exception -> 0x0161, all -> 0x04ef, TRY_LEAVE, TryCatch #9 {Exception -> 0x0161, blocks: (B:74:0x014d, B:76:0x0153), top: B:309:0x014d }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x015b  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0195 A[Catch: all -> 0x01a2, Exception -> 0x01a5, TRY_LEAVE, TryCatch #35 {Exception -> 0x01a5, blocks: (B:90:0x0175, B:92:0x0195), top: B:300:0x0175, outer: #0 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x019b  */
    /* JADX WARN: Type inference failed for: r10v1 */
    /* JADX WARN: Type inference failed for: r10v10, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r10v28 */
    /* JADX WARN: Type inference failed for: r10v29 */
    /* JADX WARN: Type inference failed for: r10v30 */
    /* JADX WARN: Type inference failed for: r10v6, types: [long] */
    /* JADX WARN: Type inference failed for: r10v7 */
    /* JADX WARN: Type inference failed for: r3v0, types: [int] */
    /* JADX WARN: Type inference failed for: r3v1 */
    /* JADX WARN: Type inference failed for: r3v10 */
    /* JADX WARN: Type inference failed for: r3v2 */
    /* JADX WARN: Type inference failed for: r3v24, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v3, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r3v4 */
    /* JADX WARN: Type inference failed for: r3v5 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /* JADX WARN: Type inference failed for: r3v7, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r3v8 */
    /* JADX WARN: Type inference failed for: r4v12 */
    /* JADX WARN: Type inference failed for: r4v13 */
    /* JADX WARN: Type inference failed for: r4v17, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r4v32 */
    /* JADX WARN: Type inference failed for: r4v42 */
    /* JADX WARN: Type inference failed for: r4v44 */
    /* JADX WARN: Type inference failed for: r4v45, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r4v52 */
    /* JADX WARN: Type inference failed for: r4v53 */
    /* JADX WARN: Type inference failed for: r4v54 */
    /* JADX WARN: Type inference failed for: r5v11, types: [int] */
    /* JADX WARN: Type inference failed for: r5v30 */
    /* JADX WARN: Type inference failed for: r5v31, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r5v32 */
    /* JADX WARN: Type inference failed for: r5v33 */
    /* JADX WARN: Type inference failed for: r5v34 */
    /* JADX WARN: Type inference failed for: r5v35, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r5v36, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* renamed from: updateMessageStateAndIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public long[] lambda$updateMessageStateAndId$196(long j, long j2, Integer num, int i, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        Integer num2;
        SQLiteCursor sQLiteCursor2;
        long j3;
        long j4;
        int intValue;
        SQLiteCursor sQLiteCursor3;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor4;
        long j5;
        int i5;
        int i6;
        int i7;
        int i8;
        SQLitePreparedStatement sQLitePreparedStatement2;
        long j6;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10 = i2;
        int i9 = i3;
        SQLiteCursor sQLiteCursor5 = null;
        SQLitePreparedStatement sQLitePreparedStatement11 = null;
        try {
            if (num == null) {
                try {
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id = %d LIMIT 1", Long.valueOf(j)), new Object[0]);
                    try {
                        if (sQLiteCursor2.next()) {
                            num2 = Integer.valueOf(sQLiteCursor2.intValue(0));
                            try {
                                j4 = sQLiteCursor2.longValue(1);
                            } catch (Exception e) {
                                e = e;
                                checkSQLException(e);
                                if (sQLiteCursor2 != null) {
                                    sQLiteCursor2.dispose();
                                }
                                j3 = j2;
                                if (num2 == null) {
                                }
                                getUserConfig().getClientUserId();
                                intValue = num2.intValue();
                                if (num2.intValue() < 0) {
                                }
                                sQLiteCursor3 = sQLiteCursor2;
                                if (num2.intValue() > 0) {
                                }
                                if (i9 != -1) {
                                }
                                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                try {
                                    try {
                                        if (sQLiteCursor4.next()) {
                                        }
                                        sQLiteCursor4.dispose();
                                    } catch (Exception e2) {
                                        e = e2;
                                        checkSQLException(e);
                                        if (sQLiteCursor4 != null) {
                                            sQLiteCursor4.dispose();
                                        }
                                        j5 = 0;
                                        sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                        if (sQLiteCursor4.next()) {
                                        }
                                        sQLiteCursor4.dispose();
                                        i5 = i6;
                                        if (i9 == -1) {
                                        }
                                        try {
                                            SQLiteDatabase sQLiteDatabase = this.database;
                                            Locale locale = Locale.US;
                                            Object[] objArr = new Object[i7];
                                            objArr[0] = Integer.valueOf(intValue);
                                            sQLiteCursor4 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr), new Object[0]);
                                            i8 = i9;
                                            if (sQLiteCursor4.next()) {
                                            }
                                        } catch (Exception e3) {
                                            checkSQLException(e3);
                                            sQLitePreparedStatement2 = i9;
                                            i8 = i9;
                                        }
                                        sQLiteCursor4.dispose();
                                        sQLitePreparedStatement2 = i8;
                                        j6 = j5;
                                        if (j6 == 0) {
                                        }
                                        SQLitePreparedStatement sQLitePreparedStatement12 = null;
                                        if (intValue != i) {
                                        }
                                        try {
                                            if (sQLitePreparedStatement2 != 0) {
                                            }
                                            return new long[]{j6, num2.intValue()};
                                        } catch (Throwable th) {
                                            th = th;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement10;
                                            sQLitePreparedStatement4 = sQLitePreparedStatement2;
                                        }
                                    }
                                    sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                    if (sQLiteCursor4.next()) {
                                    }
                                    sQLiteCursor4.dispose();
                                    i5 = i6;
                                    if (i9 == -1) {
                                    }
                                    try {
                                        SQLiteDatabase sQLiteDatabase2 = this.database;
                                        Locale locale2 = Locale.US;
                                        Object[] objArr2 = new Object[i7];
                                        objArr2[0] = Integer.valueOf(intValue);
                                        sQLiteCursor4 = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr2), new Object[0]);
                                        i8 = i9;
                                        if (sQLiteCursor4.next()) {
                                        }
                                        sQLiteCursor4.dispose();
                                        sQLitePreparedStatement2 = i8;
                                        j6 = j5;
                                        if (j6 == 0) {
                                        }
                                        SQLitePreparedStatement sQLitePreparedStatement122 = null;
                                        if (intValue != i) {
                                        }
                                        if (sQLitePreparedStatement2 != 0) {
                                        }
                                        return new long[]{j6, num2.intValue()};
                                    } catch (Throwable th2) {
                                        if (sQLiteCursor4 != null) {
                                            sQLiteCursor4.dispose();
                                        }
                                        throw th2;
                                    }
                                } catch (Throwable th3) {
                                    if (sQLiteCursor4 != null) {
                                        sQLiteCursor4.dispose();
                                    }
                                    throw th3;
                                }
                            }
                        } else {
                            j4 = j2;
                            num2 = num;
                        }
                        sQLiteCursor2.dispose();
                        j3 = j4;
                    } catch (Exception e4) {
                        e = e4;
                        num2 = num;
                    }
                } catch (Exception e5) {
                    e = e5;
                    num2 = num;
                    sQLiteCursor2 = null;
                } catch (Throwable th4) {
                    th = th4;
                    if (sQLiteCursor5 != null) {
                        sQLiteCursor5.dispose();
                    }
                    throw th;
                }
                if (num2 == null) {
                    return null;
                }
            } else {
                j3 = j2;
                num2 = num;
                sQLiteCursor2 = null;
            }
            getUserConfig().getClientUserId();
            intValue = num2.intValue();
            try {
                if (num2.intValue() < 0) {
                    try {
                        if (i9 == 1) {
                            try {
                                sQLitePreparedStatement = this.database.executeFast("UPDATE randoms_v2 SET mid = ? WHERE random_id = ? AND mid = ?");
                                try {
                                    sQLitePreparedStatement.bindInteger(1, i);
                                    sQLiteCursor3 = sQLiteCursor2;
                                } catch (Exception e6) {
                                    e = e6;
                                    sQLiteCursor3 = sQLiteCursor2;
                                }
                                try {
                                    sQLitePreparedStatement.bindLong(2, j);
                                    sQLitePreparedStatement.bindInteger(3, intValue);
                                    sQLitePreparedStatement.step();
                                    j3 = sQLitePreparedStatement;
                                } catch (Exception e7) {
                                    e = e7;
                                    checkSQLException(e);
                                    j3 = sQLitePreparedStatement;
                                }
                            } catch (Exception e8) {
                                e = e8;
                                sQLiteCursor3 = sQLiteCursor2;
                                sQLitePreparedStatement = null;
                            } catch (Throwable th5) {
                                th = th5;
                                throw th;
                            }
                            j3.dispose();
                            if (i9 != -1 || i9 == 0) {
                                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                if (sQLiteCursor4.next()) {
                                    j5 = sQLiteCursor4.longValue(0);
                                    i9 = 0;
                                } else {
                                    j5 = 0;
                                }
                                sQLiteCursor4.dispose();
                                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                                if (sQLiteCursor4.next()) {
                                    i6 = i4;
                                } else {
                                    i6 = sQLiteCursor4.intValue(0);
                                    i9 = 2;
                                }
                                sQLiteCursor4.dispose();
                                i5 = i6;
                            } else {
                                sQLiteCursor4 = sQLiteCursor3;
                                i5 = i4;
                                j5 = 0;
                            }
                            if (i9 == -1) {
                                i7 = 1;
                                sQLitePreparedStatement2 = i9;
                            } else {
                                i7 = 1;
                            }
                            SQLiteDatabase sQLiteDatabase22 = this.database;
                            Locale locale22 = Locale.US;
                            Object[] objArr22 = new Object[i7];
                            objArr22[0] = Integer.valueOf(intValue);
                            sQLiteCursor4 = sQLiteDatabase22.queryFinalized(String.format(locale22, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr22), new Object[0]);
                            i8 = i9;
                            if (sQLiteCursor4.next()) {
                                j5 = sQLiteCursor4.longValue(0);
                                i8 = 1;
                            }
                            sQLiteCursor4.dispose();
                            sQLitePreparedStatement2 = i8;
                            j6 = j5;
                            if (j6 == 0 || sQLitePreparedStatement2 == 2) {
                                SQLitePreparedStatement sQLitePreparedStatement1222 = null;
                                if (intValue != i && sQLitePreparedStatement10 != 0) {
                                    try {
                                    } catch (Exception e9) {
                                        e = e9;
                                        sQLitePreparedStatement7 = null;
                                    } catch (Throwable th6) {
                                        th = th6;
                                        sQLitePreparedStatement7 = null;
                                    }
                                    if (sQLitePreparedStatement2 == 0) {
                                        executeFast = this.database.executeFast("UPDATE messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                    } else if (sQLitePreparedStatement2 == 1) {
                                        executeFast = this.database.executeFast("UPDATE scheduled_messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                    } else if (sQLitePreparedStatement2 == 2) {
                                        executeFast = this.database.executeFast("UPDATE quick_replies_messages SET send_state = 0, date = ? WHERE mid = ? AND topic_id = ?");
                                    } else {
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement8.bindInteger(1, sQLitePreparedStatement10);
                                        sQLitePreparedStatement8.bindInteger(2, i);
                                        sQLitePreparedStatement8.bindLong(3, sQLitePreparedStatement2 != 2 ? (long) i5 : j6);
                                        sQLitePreparedStatement8.step();
                                        if (sQLitePreparedStatement2 != 0) {
                                            sQLitePreparedStatement9 = this.database.executeFast("UPDATE messages_topics SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                            try {
                                                sQLitePreparedStatement9.bindInteger(1, sQLitePreparedStatement10);
                                                sQLitePreparedStatement9.bindInteger(2, i);
                                                sQLitePreparedStatement9.bindLong(3, j6);
                                                sQLitePreparedStatement9.step();
                                            } catch (Exception e10) {
                                                e = e10;
                                                sQLitePreparedStatement1222 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                                try {
                                                    checkSQLException(e);
                                                    if (sQLitePreparedStatement7 != null) {
                                                        sQLitePreparedStatement7.dispose();
                                                    }
                                                    if (sQLitePreparedStatement1222 != null) {
                                                        sQLitePreparedStatement1222.dispose();
                                                    }
                                                    return new long[]{j6, i};
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                    if (sQLitePreparedStatement7 != null) {
                                                        sQLitePreparedStatement7.dispose();
                                                    }
                                                    if (sQLitePreparedStatement1222 != null) {
                                                        sQLitePreparedStatement1222.dispose();
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th8) {
                                                th = th8;
                                                sQLitePreparedStatement1222 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement7 = sQLitePreparedStatement8;
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement1222 != null) {
                                                }
                                                throw th;
                                            }
                                        } else {
                                            sQLitePreparedStatement9 = null;
                                        }
                                        sQLitePreparedStatement8.dispose();
                                        if (sQLitePreparedStatement9 != null) {
                                            sQLitePreparedStatement9.dispose();
                                        }
                                        return new long[]{j6, i};
                                    }
                                    sQLitePreparedStatement8 = executeFast;
                                    sQLitePreparedStatement8.bindInteger(1, sQLitePreparedStatement10);
                                    sQLitePreparedStatement8.bindInteger(2, i);
                                    sQLitePreparedStatement8.bindLong(3, sQLitePreparedStatement2 != 2 ? (long) i5 : j6);
                                    sQLitePreparedStatement8.step();
                                    if (sQLitePreparedStatement2 != 0) {
                                    }
                                    sQLitePreparedStatement8.dispose();
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    return new long[]{j6, i};
                                }
                                if (sQLitePreparedStatement2 != 0) {
                                    try {
                                        sQLitePreparedStatement10 = this.database.executeFast("UPDATE messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                        try {
                                            sQLitePreparedStatement10.bindInteger(1, i);
                                            sQLitePreparedStatement10.bindInteger(2, intValue);
                                            sQLitePreparedStatement10.bindLong(3, j6);
                                            sQLitePreparedStatement10.step();
                                            sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_topics SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                            try {
                                                sQLitePreparedStatement2.bindInteger(1, i);
                                                sQLitePreparedStatement2.bindInteger(2, intValue);
                                                sQLitePreparedStatement2.bindLong(3, j6);
                                                sQLitePreparedStatement2.step();
                                                sQLitePreparedStatement10.dispose();
                                                sQLitePreparedStatement2.dispose();
                                                sQLitePreparedStatement10 = 0;
                                            } catch (Exception unused) {
                                                try {
                                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                                    Locale locale3 = Locale.US;
                                                    sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j6))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale3, "DELETE FROM messages_seq WHERE mid = %d", Integer.valueOf(intValue))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale3, "DELETE FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j6))).stepThis().dispose();
                                                } catch (Exception e11) {
                                                    checkSQLException(e11);
                                                }
                                                if (sQLitePreparedStatement10 != 0) {
                                                    sQLitePreparedStatement10.dispose();
                                                    sQLitePreparedStatement10 = 0;
                                                }
                                                if (sQLitePreparedStatement2 != 0) {
                                                    sQLitePreparedStatement2.dispose();
                                                }
                                                try {
                                                    try {
                                                        sQLitePreparedStatement10 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                        sQLitePreparedStatement10.bindInteger(1, i);
                                                        sQLitePreparedStatement10.bindInteger(2, intValue);
                                                        sQLitePreparedStatement10.bindLong(3, j6);
                                                        sQLitePreparedStatement10.step();
                                                    } catch (Exception unused2) {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j6))).stepThis().dispose();
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement10;
                                                    }
                                                } catch (Exception e12) {
                                                    checkSQLException(e12);
                                                    sQLitePreparedStatement10 = sQLitePreparedStatement10;
                                                }
                                                sQLitePreparedStatement10.dispose();
                                                sQLitePreparedStatement10 = null;
                                                try {
                                                    try {
                                                        sQLitePreparedStatement10 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                        sQLitePreparedStatement10.bindInteger(1, i);
                                                        sQLitePreparedStatement10.bindInteger(2, intValue);
                                                        sQLitePreparedStatement10.bindLong(3, j6);
                                                        sQLitePreparedStatement10.step();
                                                    } finally {
                                                        if (sQLitePreparedStatement10 != null) {
                                                            sQLitePreparedStatement10.dispose();
                                                        }
                                                    }
                                                } catch (Exception unused3) {
                                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_topics WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j6))).stepThis().dispose();
                                                    sQLitePreparedStatement10 = sQLitePreparedStatement10;
                                                    if (sQLitePreparedStatement10 == null) {
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement10;
                                                        sQLitePreparedStatement5 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                        sQLitePreparedStatement5.bindInteger(1, i);
                                                        sQLitePreparedStatement5.bindInteger(2, intValue);
                                                        sQLitePreparedStatement5.step();
                                                        sQLitePreparedStatement5.dispose();
                                                        return new long[]{j6, num2.intValue()};
                                                    }
                                                    sQLitePreparedStatement10.dispose();
                                                    sQLitePreparedStatement5 = null;
                                                    sQLitePreparedStatement5 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                    sQLitePreparedStatement5.bindInteger(1, i);
                                                    sQLitePreparedStatement5.bindInteger(2, intValue);
                                                    sQLitePreparedStatement5.step();
                                                    sQLitePreparedStatement5.dispose();
                                                    return new long[]{j6, num2.intValue()};
                                                }
                                                sQLitePreparedStatement10.dispose();
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement5 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                sQLitePreparedStatement5.bindInteger(1, i);
                                                sQLitePreparedStatement5.bindInteger(2, intValue);
                                                sQLitePreparedStatement5.step();
                                                sQLitePreparedStatement5.dispose();
                                                return new long[]{j6, num2.intValue()};
                                            }
                                        } catch (Exception unused4) {
                                            sQLitePreparedStatement2 = 0;
                                        } catch (Throwable th9) {
                                            th = th9;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement10;
                                            sQLitePreparedStatement4 = null;
                                            if (sQLitePreparedStatement3 != null) {
                                                sQLitePreparedStatement3.dispose();
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                                sQLitePreparedStatement4.dispose();
                                            }
                                            throw th;
                                        }
                                    } catch (Exception unused5) {
                                        sQLitePreparedStatement10 = 0;
                                        sQLitePreparedStatement2 = null;
                                    } catch (Throwable th10) {
                                        th = th10;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement3 = null;
                                    }
                                    try {
                                        sQLitePreparedStatement10 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                        sQLitePreparedStatement10.bindInteger(1, i);
                                        sQLitePreparedStatement10.bindInteger(2, intValue);
                                        sQLitePreparedStatement10.bindLong(3, j6);
                                        sQLitePreparedStatement10.step();
                                        sQLitePreparedStatement10.dispose();
                                        sQLitePreparedStatement10 = null;
                                        try {
                                            try {
                                                sQLitePreparedStatement10 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                sQLitePreparedStatement10.bindInteger(1, i);
                                                sQLitePreparedStatement10.bindInteger(2, intValue);
                                                sQLitePreparedStatement10.bindLong(3, j6);
                                                sQLitePreparedStatement10.step();
                                            } catch (Exception e13) {
                                                checkSQLException(e13);
                                                sQLitePreparedStatement10 = sQLitePreparedStatement10;
                                                if (sQLitePreparedStatement10 == null) {
                                                }
                                                sQLitePreparedStatement10.dispose();
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement5 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                sQLitePreparedStatement5.bindInteger(1, i);
                                                sQLitePreparedStatement5.bindInteger(2, intValue);
                                                sQLitePreparedStatement5.step();
                                                sQLitePreparedStatement5.dispose();
                                                return new long[]{j6, num2.intValue()};
                                            }
                                            sQLitePreparedStatement5 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                            sQLitePreparedStatement5.bindInteger(1, i);
                                            sQLitePreparedStatement5.bindInteger(2, intValue);
                                            sQLitePreparedStatement5.step();
                                            sQLitePreparedStatement5.dispose();
                                        } catch (Throwable th11) {
                                            if (sQLitePreparedStatement5 != null) {
                                                sQLitePreparedStatement5.dispose();
                                            }
                                            throw th11;
                                        }
                                        sQLitePreparedStatement10.dispose();
                                        sQLitePreparedStatement5 = null;
                                    } finally {
                                        if (sQLitePreparedStatement10 != 0) {
                                            sQLitePreparedStatement10.dispose();
                                        }
                                    }
                                } else {
                                    try {
                                        if (sQLitePreparedStatement2 == 1) {
                                            try {
                                                i5 = this.database.executeFast("UPDATE scheduled_messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                                try {
                                                    i5.bindInteger(1, i);
                                                    i5.bindInteger(2, intValue);
                                                    i5.bindLong(3, j6);
                                                    i5.step();
                                                } catch (Exception unused6) {
                                                    try {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(intValue), Long.valueOf(j6))).stepThis().dispose();
                                                    } catch (Exception e14) {
                                                        checkSQLException(e14);
                                                    }
                                                }
                                            } catch (Exception unused7) {
                                                i5 = 0;
                                            } catch (Throwable th12) {
                                                th = th12;
                                                i5 = 0;
                                                if (i5 != 0) {
                                                }
                                                throw th;
                                            }
                                            i5.dispose();
                                        } else {
                                            try {
                                                if (sQLitePreparedStatement2 == 2) {
                                                    try {
                                                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE quick_replies_messages SET mid = ?, topic_id = ?, send_state = 0 WHERE mid = ? AND topic_id = ?");
                                                        try {
                                                            sQLitePreparedStatement2.bindInteger(1, i);
                                                            sQLitePreparedStatement2.bindInteger(2, i4);
                                                            sQLitePreparedStatement2.bindInteger(3, intValue);
                                                            sQLitePreparedStatement2.bindLong(4, (long) i5);
                                                            sQLitePreparedStatement2.step();
                                                        } catch (Exception unused8) {
                                                            try {
                                                                this.database.executeFast(String.format(Locale.US, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", Integer.valueOf(intValue), Integer.valueOf((int) i5))).stepThis().dispose();
                                                            } catch (Exception e15) {
                                                                checkSQLException(e15);
                                                            }
                                                        }
                                                    } catch (Exception unused9) {
                                                        sQLitePreparedStatement2 = null;
                                                    } catch (Throwable th13) {
                                                        th = th13;
                                                        sQLitePreparedStatement6 = null;
                                                        if (sQLitePreparedStatement6 != null) {
                                                            sQLitePreparedStatement6.dispose();
                                                        }
                                                        throw th;
                                                    }
                                                    sQLitePreparedStatement2.dispose();
                                                }
                                            } catch (Throwable th14) {
                                                th = th14;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                            }
                                        }
                                    } catch (Throwable th15) {
                                        th = th15;
                                        if (i5 != 0) {
                                            i5.dispose();
                                        }
                                        throw th;
                                    }
                                }
                                return new long[]{j6, num2.intValue()};
                            }
                            return null;
                        }
                    } catch (Throwable th16) {
                        th = th16;
                        sQLitePreparedStatement11 = j3;
                    }
                }
                if (sQLiteCursor4.next()) {
                }
                sQLiteCursor4.dispose();
                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
                if (sQLiteCursor4.next()) {
                }
                sQLiteCursor4.dispose();
                i5 = i6;
                if (i9 == -1) {
                }
                SQLiteDatabase sQLiteDatabase222 = this.database;
                Locale locale222 = Locale.US;
                Object[] objArr222 = new Object[i7];
                objArr222[0] = Integer.valueOf(intValue);
                sQLiteCursor4 = sQLiteDatabase222.queryFinalized(String.format(locale222, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", objArr222), new Object[0]);
                i8 = i9;
                if (sQLiteCursor4.next()) {
                }
                sQLiteCursor4.dispose();
                sQLitePreparedStatement2 = i8;
                j6 = j5;
                if (j6 == 0) {
                }
                SQLitePreparedStatement sQLitePreparedStatement12222 = null;
                if (intValue != i) {
                }
                if (sQLitePreparedStatement2 != 0) {
                }
                return new long[]{j6, num2.intValue()};
            } catch (Throwable th17) {
                th = th17;
                if (sQLiteCursor4 != null) {
                    sQLiteCursor4.dispose();
                }
                throw th;
            }
            sQLiteCursor3 = sQLiteCursor2;
            if (num2.intValue() > 0) {
                TLRPC$TL_updateDeleteScheduledMessages tLRPC$TL_updateDeleteScheduledMessages = new TLRPC$TL_updateDeleteScheduledMessages();
                tLRPC$TL_updateDeleteScheduledMessages.messages.add(Integer.valueOf(intValue));
                if (DialogObject.isChatDialog(j3)) {
                    TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                    tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerChannel;
                    tLRPC$TL_peerChannel.channel_id = -j3;
                } else {
                    TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                    tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerUser;
                    tLRPC$TL_peerUser.user_id = j3;
                }
                final TLRPC$TL_updates tLRPC$TL_updates = new TLRPC$TL_updates();
                tLRPC$TL_updates.updates.add(tLRPC$TL_updateDeleteScheduledMessages);
                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda218
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateMessageStateAndIdInternal$195(tLRPC$TL_updates);
                    }
                });
                try {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM randoms_v2 WHERE random_id = %d AND mid = %d AND uid = %d", Long.valueOf(j), num2, Long.valueOf((long) j3))).stepThis().dispose();
                } catch (Exception e16) {
                    checkSQLException(e16);
                }
                return null;
            }
            if (i9 != -1) {
            }
            sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", Integer.valueOf(intValue)), new Object[0]);
        } catch (Throwable th18) {
            th = th18;
            sQLiteCursor5 = sQLiteCursor;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageStateAndIdInternal$195(TLRPC$TL_updates tLRPC$TL_updates) {
        getMessagesController().processUpdates(tLRPC$TL_updates, false);
    }

    public long[] updateMessageStateAndId(final long j, final long j2, final Integer num, final int i, final int i2, boolean z, final int i3, final int i4) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda102
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
                }
            });
            return null;
        }
        return lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: updateUsersInternal */
    public void lambda$updateUsers$197(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (z) {
                    if (z2) {
                        this.database.beginTransaction();
                    }
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
                    try {
                        int size = arrayList.size();
                        for (int i = 0; i < size; i++) {
                            TLRPC$User tLRPC$User = arrayList.get(i);
                            executeFast.requery();
                            TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                            if (tLRPC$UserStatus != null) {
                                executeFast.bindInteger(1, tLRPC$UserStatus.expires);
                            } else {
                                executeFast.bindInteger(1, 0);
                            }
                            executeFast.bindLong(2, tLRPC$User.id);
                            executeFast.step();
                        }
                        executeFast.dispose();
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } else {
                    ArrayList<Long> arrayList2 = new ArrayList<>();
                    LongSparseArray longSparseArray = new LongSparseArray();
                    int size2 = arrayList.size();
                    for (int i2 = 0; i2 < size2; i2++) {
                        TLRPC$User tLRPC$User2 = arrayList.get(i2);
                        arrayList2.add(Long.valueOf(tLRPC$User2.id));
                        longSparseArray.put(tLRPC$User2.id, tLRPC$User2);
                    }
                    ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList3);
                    int size3 = arrayList3.size();
                    for (int i3 = 0; i3 < size3; i3++) {
                        TLRPC$User tLRPC$User3 = arrayList3.get(i3);
                        TLRPC$User tLRPC$User4 = (TLRPC$User) longSparseArray.get(tLRPC$User3.id);
                        if (tLRPC$User4 != null) {
                            if (tLRPC$User4.first_name != null && tLRPC$User4.last_name != null) {
                                if (!UserObject.isContact(tLRPC$User3)) {
                                    tLRPC$User3.first_name = tLRPC$User4.first_name;
                                    tLRPC$User3.last_name = tLRPC$User4.last_name;
                                }
                                tLRPC$User3.username = tLRPC$User4.username;
                            } else {
                                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User4.photo;
                                if (tLRPC$UserProfilePhoto != null) {
                                    tLRPC$User3.photo = tLRPC$UserProfilePhoto;
                                } else {
                                    String str = tLRPC$User4.phone;
                                    if (str != null) {
                                        tLRPC$User3.phone = str;
                                    }
                                }
                            }
                        }
                    }
                    if (!arrayList3.isEmpty()) {
                        if (z2) {
                            this.database.beginTransaction();
                        }
                        putUsersInternal(arrayList3);
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateUsers(final ArrayList<TLRPC$User> arrayList, final boolean z, final boolean z2, boolean z3) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        if (z3) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda185
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateUsers$197(arrayList, z, z2);
                }
            });
        } else {
            lambda$updateUsers$197(arrayList, z, z2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00e6  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /* renamed from: markMessagesAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessagesAsRead$199(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        try {
            if (!isEmpty(longSparseIntArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < longSparseIntArray.size(); i++) {
                    try {
                        long keyAt = longSparseIntArray.keyAt(i);
                        int i2 = longSparseIntArray.get(keyAt);
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i2))).stepThis().dispose();
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i2);
                        executeFast.step();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            }
            if (!isEmpty(longSparseIntArray2)) {
                for (int i3 = 0; i3 < longSparseIntArray2.size(); i3++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i3);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", Long.valueOf(keyAt2), Integer.valueOf(longSparseIntArray2.get(keyAt2)))).stepThis().dispose();
                }
            }
            if (sparseIntArray == null || isEmpty(sparseIntArray)) {
                return;
            }
            for (int i4 = 0; i4 < sparseIntArray.size(); i4++) {
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(sparseIntArray.keyAt(i4));
                int valueAt = sparseIntArray.valueAt(i4);
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                try {
                    executeFast2.requery();
                    executeFast2.bindLong(1, makeEncryptedDialogId);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    private void markMessagesContentAsReadInternal(long j, ArrayList<Integer> arrayList, int i) {
        SQLiteCursor sQLiteCursor = null;
        ArrayList<Integer> arrayList2 = null;
        sQLiteCursor = null;
        try {
            try {
                String join = TextUtils.join(",", arrayList);
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid IN (%s) AND uid = %d", join, Long.valueOf(j))).stepThis().dispose();
                if (i != 0) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT mid, ttl FROM messages_v2 WHERE mid IN (%s) AND uid = %d AND ttl > 0", join, Long.valueOf(j)), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList<>();
                            }
                            arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    if (arrayList2 != null) {
                        emptyMessagesMedia(j, arrayList2);
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void markMessagesContentAsRead(final long j, final ArrayList<Integer> arrayList, final int i, final int i2) {
        if (isEmpty(arrayList)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda115
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesContentAsRead$198(j, arrayList, i2, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00d2  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$markMessagesContentAsRead$198(long j, ArrayList arrayList, int i, int i2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        Exception e;
        int i3;
        if (j == 0) {
            try {
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid, ttl FROM messages_v2 WHERE mid IN (%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (sQLiteCursor.next()) {
                    try {
                        try {
                            long longValue = sQLiteCursor.longValue(0);
                            int intValue = sQLiteCursor.intValue(1);
                            int intValue2 = sQLiteCursor.intValue(2);
                            if (intValue2 > 0 && intValue2 != Integer.MAX_VALUE && i != 0 && (i3 = intValue2 + i) >= i2) {
                                SparseArray sparseArray = (SparseArray) longSparseArray2.get(longValue);
                                if (sparseArray == null) {
                                    sparseArray = new SparseArray();
                                    longSparseArray2.put(longValue, sparseArray);
                                }
                                ArrayList arrayList2 = (ArrayList) sparseArray.get(i3);
                                if (arrayList2 == null) {
                                    arrayList2 = new ArrayList();
                                    sparseArray.put(i3, arrayList2);
                                }
                                arrayList2.add(Integer.valueOf(intValue));
                            }
                            ArrayList arrayList3 = (ArrayList) longSparseArray.get(longValue);
                            if (arrayList3 == null) {
                                arrayList3 = new ArrayList();
                                longSparseArray.put(longValue, arrayList3);
                            }
                            arrayList3.add(Integer.valueOf(intValue));
                        } catch (Exception e2) {
                            e = e2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                sQLiteCursor.dispose();
                int size = longSparseArray.size();
                for (int i4 = 0; i4 < size; i4++) {
                    markMessagesContentAsReadInternal(longSparseArray.keyAt(i4), (ArrayList) longSparseArray.valueAt(i4), i2);
                }
                int size2 = longSparseArray2.size();
                for (int i5 = 0; i5 < size2; i5++) {
                    createTaskForSecretMedia(longSparseArray2.keyAt(i5), (SparseArray) longSparseArray2.valueAt(i5));
                }
            } catch (Exception e3) {
                sQLiteCursor = null;
                e = e3;
            } catch (Throwable th3) {
                sQLiteCursor = null;
                th = th3;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } else {
            markMessagesContentAsReadInternal(j, arrayList, i2);
        }
    }

    public void markMessagesAsRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda196
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
                }
            });
        } else {
            lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
        }
    }

    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$201(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$201(ArrayList arrayList) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(1);
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (longSparseArray.isEmpty()) {
                return;
            }
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                long keyAt = longSparseArray.keyAt(i);
                final ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray.valueAt(i);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda161
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$200(arrayList3);
                    }
                });
                updateDialogsWithReadMessagesInternal(arrayList3, null, null, null, null);
                lambda$markMessagesAsDeleted$209(keyAt, arrayList3, true, 0, 0);
                lambda$updateDialogsWithDeletedMessages$208(keyAt, 0L, arrayList3, null);
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$200(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(",", arrayList))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void broadcastScheduledMessagesChange(final Long l) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages_v2 WHERE uid = %d", l), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            final int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda149
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$broadcastScheduledMessagesChange$202(l, intValue);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$202(Long l, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i), Boolean.TRUE);
    }

    private void broadcastQuickRepliesMessagesChange(Long l, long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda31
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$broadcastQuickRepliesMessagesChange$203();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastQuickRepliesMessagesChange$203() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.quickRepliesUpdated, new Object[0]);
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:282:0x0740
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: markMessagesAsDeletedInternal */
    public java.util.ArrayList<java.lang.Long> lambda$markMessagesAsDeleted$209(long r42, java.util.ArrayList<java.lang.Integer> r44, boolean r45, int r46, int r47) {
        /*
            Method dump skipped, instructions count: 3547
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$markMessagesAsDeleted$209(long, java.util.ArrayList, boolean, int, int):java.util.ArrayList");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$204(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$205(LongSparseArray longSparseArray) {
        getMessagesController().getSavedMessagesController().updateDeleted(longSparseArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$206(ArrayList arrayList, long j) {
        HashSet<Long> hashSet = new HashSet<>();
        Iterator it = arrayList.iterator();
        boolean z = false;
        while (it.hasNext()) {
            TLRPC$Message tLRPC$Message = (TLRPC$Message) it.next();
            if (getMessagesController().processDeletedReactionTags(tLRPC$Message)) {
                hashSet.add(Long.valueOf(MessageObject.getSavedDialogId(j, tLRPC$Message)));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$207(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        long[] jArr = new long[1];
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            if (getMediaDataController().processDeletedMessage(((Integer) arrayList.get(i)).intValue(), jArr)) {
                hashSet.add(Long.valueOf(jArr[0]));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:197:0x0418  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x041d  */
    /* JADX WARN: Removed duplicated region for block: B:201:0x0422  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x042b  */
    /* JADX WARN: Removed duplicated region for block: B:208:0x0430  */
    /* JADX WARN: Removed duplicated region for block: B:210:0x0435  */
    /* JADX WARN: Removed duplicated region for block: B:261:? A[RETURN, SYNTHETIC] */
    /* renamed from: updateDialogsWithDeletedMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateDialogsWithDeletedMessages$208(long j, long j2, ArrayList<Integer> arrayList, ArrayList<Long> arrayList2) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC$EncryptedChat> arrayList3;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        ArrayList<TLRPC$EncryptedChat> arrayList4;
        TLRPC$TL_dialog tLRPC$TL_dialog;
        SQLitePreparedStatement executeFast;
        long j3 = j2;
        try {
            ArrayList arrayList5 = new ArrayList();
            try {
                if (!arrayList.isEmpty()) {
                    if (j3 != 0) {
                        arrayList5.add(Long.valueOf(-j3));
                        executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ?)) WHERE did = ?");
                    } else {
                        if (j == 0) {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s) AND flags = 0", TextUtils.join(",", arrayList)), new Object[0]);
                            while (queryFinalized.next()) {
                                try {
                                    arrayList5.add(Long.valueOf(queryFinalized.longValue(0)));
                                } catch (Exception e) {
                                    e = e;
                                    sQLiteCursor = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    try {
                                        checkSQLException(e);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement == null) {
                                        }
                                    } catch (Throwable th) {
                                        th = th;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLiteCursor = queryFinalized;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            queryFinalized.dispose();
                        } else {
                            arrayList5.add(Long.valueOf(j));
                        }
                        executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ? AND date != 0)) WHERE did = ?");
                    }
                    try {
                        this.database.beginTransaction();
                        for (int i = 0; i < arrayList5.size(); i++) {
                            long longValue = ((Long) arrayList5.get(i)).longValue();
                            executeFast.requery();
                            executeFast.bindLong(1, longValue);
                            executeFast.bindLong(2, longValue);
                            executeFast.bindLong(3, longValue);
                            executeFast.step();
                        }
                        executeFast.dispose();
                        this.database.commitTransaction();
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } else {
                    arrayList5.add(Long.valueOf(-j3));
                }
                if (arrayList2 != null) {
                    for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                        Long l = arrayList2.get(i2);
                        if (!arrayList5.contains(l)) {
                            arrayList5.add(l);
                        }
                    }
                }
                String join = TextUtils.join(",", arrayList5);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                ArrayList<TLRPC$EncryptedChat> arrayList6 = new ArrayList<>();
                ArrayList<Long> arrayList7 = new ArrayList<>();
                ArrayList arrayList8 = new ArrayList();
                ArrayList arrayList9 = new ArrayList();
                LongSparseArray longSparseArray = new LongSparseArray();
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL WHERE d.did IN(%s)", join), new Object[0]);
                while (queryFinalized2.next()) {
                    try {
                        try {
                            long longValue2 = queryFinalized2.longValue(0);
                            if (DialogObject.isFolderDialogId(longValue2)) {
                                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
                                if (queryFinalized2.isNull(16)) {
                                    arrayList4 = arrayList6;
                                    tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                } else {
                                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(16);
                                    if (byteBufferValue2 != null) {
                                        arrayList4 = arrayList6;
                                        tLRPC$TL_dialogFolder.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                        byteBufferValue2.reuse();
                                        tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                    } else {
                                        arrayList4 = arrayList6;
                                        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
                                        tLRPC$TL_folder.id = queryFinalized2.intValue(15);
                                        tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                    }
                                }
                            } else {
                                arrayList4 = arrayList6;
                                tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            }
                            tLRPC$TL_dialog.id = longValue2;
                            tLRPC$TL_dialog.top_message = queryFinalized2.intValue(1);
                            tLRPC$TL_dialog.read_inbox_max_id = queryFinalized2.intValue(10);
                            tLRPC$TL_dialog.read_outbox_max_id = queryFinalized2.intValue(11);
                            tLRPC$TL_dialog.unread_count = queryFinalized2.intValue(2);
                            tLRPC$TL_dialog.unread_mentions_count = queryFinalized2.intValue(13);
                            tLRPC$TL_dialog.last_message_date = queryFinalized2.intValue(3);
                            tLRPC$TL_dialog.pts = queryFinalized2.intValue(9);
                            tLRPC$TL_dialog.flags = j3 == 0 ? 0 : 1;
                            int intValue = queryFinalized2.intValue(12);
                            tLRPC$TL_dialog.pinnedNum = intValue;
                            tLRPC$TL_dialog.pinned = intValue != 0;
                            int intValue2 = queryFinalized2.intValue(14);
                            tLRPC$TL_dialog.unread_mark = (intValue2 & 1) != 0;
                            tLRPC$TL_dialog.view_forum_as_messages = (intValue2 & 64) != 0;
                            tLRPC$TL_dialog.folder_id = queryFinalized2.intValue(15);
                            tLRPC$TL_dialog.unread_reactions_count = queryFinalized2.intValue(17);
                            long longValue3 = queryFinalized2.longValue(18);
                            if (longValue3 != 0) {
                                longSparseArray.put(longValue2, Long.valueOf(longValue3));
                            }
                            tLRPC$TL_dialog.ttl_period = queryFinalized2.intValue(19);
                            tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                            NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                            if (byteBufferValue3 != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                byteBufferValue3.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                TLdeserialize.id = queryFinalized2.intValue(6);
                                TLdeserialize.send_state = queryFinalized2.intValue(7);
                                int intValue3 = queryFinalized2.intValue(8);
                                if (intValue3 != 0) {
                                    tLRPC$TL_dialog.last_message_date = intValue3;
                                }
                                TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                tLRPC$TL_messages_dialogs.messages.add(TLdeserialize);
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList7, arrayList8, null);
                            }
                            if (!DialogObject.isEncryptedDialog(longValue2) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                tLRPC$TL_dialog.read_inbox_max_id = 0;
                            }
                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList9.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isUserDialog(longValue2)) {
                                if (!arrayList7.contains(Long.valueOf(longValue2))) {
                                    arrayList7.add(Long.valueOf(longValue2));
                                }
                            } else {
                                long j4 = -longValue2;
                                if (!arrayList8.contains(Long.valueOf(j4))) {
                                    arrayList8.add(Long.valueOf(j4));
                                }
                            }
                            j3 = j2;
                            arrayList6 = arrayList4;
                        } catch (Exception e3) {
                            e = e3;
                            sQLiteCursor = queryFinalized2;
                            sQLitePreparedStatement = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement == null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th4) {
                            th = th4;
                            sQLiteCursor = queryFinalized2;
                            sQLitePreparedStatement = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = queryFinalized2;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement2 = null;
                        sQLiteCursor = queryFinalized2;
                    }
                }
                ArrayList<TLRPC$EncryptedChat> arrayList10 = arrayList6;
                queryFinalized2.dispose();
                if (longSparseArray.isEmpty()) {
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2 = null;
                } else {
                    StringBuilder sb = new StringBuilder();
                    int i3 = 0;
                    while (i3 < longSparseArray.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray.keyAt(i3));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray.valueAt(i3));
                        i3++;
                        if (i3 < longSparseArray.size()) {
                            sb.append(" OR ");
                        }
                    }
                    int i4 = 0;
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, group_id FROM messages_v2 WHERE %s", sb), new Object[0]);
                    while (sQLiteCursor2.next()) {
                        try {
                            long longValue4 = sQLiteCursor2.longValue(i4);
                            int i5 = 0;
                            while (true) {
                                if (i5 >= tLRPC$TL_messages_dialogs.dialogs.size()) {
                                    tLRPC$Dialog = null;
                                    break;
                                }
                                try {
                                    tLRPC$Dialog = tLRPC$TL_messages_dialogs.dialogs.get(i5);
                                    if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                        break;
                                    }
                                    i5++;
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = null;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            if (tLRPC$Dialog != null && (byteBufferValue = sQLiteCursor2.byteBufferValue(1)) != null) {
                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize2, sQLiteCursor2.intValue(2));
                                TLdeserialize2.id = sQLiteCursor2.intValue(3);
                                TLdeserialize2.send_state = sQLiteCursor2.intValue(4);
                                int intValue4 = sQLiteCursor2.intValue(5);
                                if (intValue4 != 0) {
                                    tLRPC$Dialog.last_message_date = intValue4;
                                }
                                TLdeserialize2.dialog_id = tLRPC$Dialog.id;
                                tLRPC$TL_messages_dialogs.messages.add(TLdeserialize2);
                                sQLitePreparedStatement2 = null;
                                try {
                                    addUsersAndChatsFromMessage(TLdeserialize2, arrayList7, arrayList8, null);
                                } catch (Exception e6) {
                                    e = e6;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = sQLitePreparedStatement2;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                } catch (Throwable th7) {
                                    th = th7;
                                    sQLiteCursor = sQLiteCursor2;
                                    sQLitePreparedStatement = sQLitePreparedStatement2;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            i4 = 0;
                        } catch (Exception e7) {
                            e = e7;
                            sQLitePreparedStatement2 = null;
                            sQLiteCursor = sQLiteCursor2;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th8) {
                            th = th8;
                            sQLitePreparedStatement2 = null;
                            sQLiteCursor = sQLiteCursor2;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor2.dispose();
                }
                if (arrayList9.isEmpty()) {
                    arrayList3 = arrayList10;
                } else {
                    arrayList3 = arrayList10;
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList9), arrayList3, arrayList7);
                }
                if (!arrayList8.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList8), tLRPC$TL_messages_dialogs.chats);
                }
                if (!arrayList7.isEmpty()) {
                    getUsersInternal(arrayList7, tLRPC$TL_messages_dialogs.users);
                }
                getMessagesController().getTopicsController().updateTopicsWithDeletedMessages(j, arrayList);
                if (!tLRPC$TL_messages_dialogs.dialogs.isEmpty() || !arrayList3.isEmpty()) {
                    getMessagesController().processDialogsUpdate(tLRPC$TL_messages_dialogs, arrayList3, true);
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
            } catch (Exception e8) {
                e = e8;
                sQLiteCursor = null;
            } catch (Throwable th9) {
                th = th9;
                sQLiteCursor = null;
            }
        } catch (Exception e9) {
            e = e9;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        } catch (Throwable th10) {
            th = th10;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
        }
    }

    public void updateDialogsWithDeletedMessages(final long j, final long j2, final ArrayList<Integer> arrayList, final ArrayList<Long> arrayList2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda103
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
                }
            });
        } else {
            lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final ArrayList<Integer> arrayList, boolean z, final boolean z2, final int i, final int i2) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda119
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0338  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0348  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x034d  */
    /* JADX WARN: Removed duplicated region for block: B:158:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00d4 A[Catch: all -> 0x0110, Exception -> 0x011b, TRY_LEAVE, TryCatch #15 {Exception -> 0x011b, all -> 0x0110, blocks: (B:5:0x004b, B:7:0x0051, B:29:0x00bf, B:33:0x00cd, B:35:0x00d4), top: B:142:0x004b }] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00fd  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0141 A[Catch: all -> 0x031d, Exception -> 0x031f, TRY_LEAVE, TryCatch #14 {Exception -> 0x031f, all -> 0x031d, blocks: (B:54:0x0127, B:55:0x013b, B:57:0x0141, B:63:0x0179, B:75:0x01cf, B:82:0x0231, B:91:0x0276), top: B:144:0x0127 }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0226 A[Catch: all -> 0x0318, Exception -> 0x031b, TryCatch #13 {Exception -> 0x031b, all -> 0x0318, blocks: (B:76:0x0220, B:78:0x0226, B:80:0x022c, B:83:0x0248, B:85:0x024e, B:90:0x0273), top: B:146:0x0220 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0231 A[Catch: all -> 0x031d, Exception -> 0x031f, TRY_ENTER, TRY_LEAVE, TryCatch #14 {Exception -> 0x031f, all -> 0x031d, blocks: (B:54:0x0127, B:55:0x013b, B:57:0x0141, B:63:0x0179, B:75:0x01cf, B:82:0x0231, B:91:0x0276), top: B:144:0x0127 }] */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v5 */
    /* renamed from: markMessagesAsDeletedInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$211(long j, int i, boolean z) {
        final MessagesStorage messagesStorage;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        LongSparseArray longSparseArray;
        ArrayList<File> arrayList;
        final ArrayList arrayList2;
        ArrayList<Pair<Long, Integer>> arrayList3;
        ArrayList<Long> arrayList4;
        long j2;
        SQLiteCursor sQLiteCursor3;
        boolean z2;
        int i2;
        int i3;
        Locale locale;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor4;
        int intValue;
        int i4;
        int i5;
        ArrayList<Long> arrayList5;
        boolean z3;
        NativeByteBuffer byteBufferValue;
        try {
            ArrayList<Long> arrayList6 = new ArrayList<>();
            longSparseArray = new LongSparseArray();
            arrayList = new ArrayList<>();
            arrayList2 = new ArrayList();
            arrayList3 = new ArrayList<>();
            long clientUserId = getUserConfig().getClientUserId();
            arrayList4 = arrayList6;
            j2 = -j;
            int i6 = 0;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    long longValue = queryFinalized2.longValue(i6);
                    if (longValue != clientUserId) {
                        try {
                            int intValue2 = queryFinalized2.intValue(2);
                            if (queryFinalized2.intValue(3) == 0) {
                                Integer[] numArr = (Integer[]) longSparseArray.get(longValue);
                                if (numArr == null) {
                                    numArr = new Integer[]{0, 0};
                                    longSparseArray.put(longValue, numArr);
                                }
                                if (intValue2 < 2) {
                                    Integer num = numArr[1];
                                    numArr[1] = Integer.valueOf(numArr[1].intValue() + 1);
                                }
                                if (intValue2 == 0 || intValue2 == 2) {
                                    Integer num2 = numArr[0];
                                    numArr[0] = Integer.valueOf(numArr[0].intValue() + 1);
                                }
                                if (!DialogObject.isEncryptedDialog(longValue) || z) {
                                    byteBufferValue = queryFinalized2.byteBufferValue(1);
                                    if (byteBufferValue == null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        sQLiteCursor3 = queryFinalized2;
                                        z2 = true;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList, arrayList3, arrayList2, false);
                                        } catch (Exception e) {
                                            e = e;
                                            messagesStorage = this;
                                            z3 = z2;
                                            try {
                                                messagesStorage.checkSQLException(e);
                                                i2 = z3;
                                                sQLiteCursor3.dispose();
                                                messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList2);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList, 0);
                                                i3 = 0;
                                                while (i3 < longSparseArray.size()) {
                                                }
                                                ArrayList<Long> arrayList7 = arrayList4;
                                                SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                                                locale = Locale.US;
                                                Object[] objArr = new Object[2];
                                                objArr[0] = Long.valueOf(j);
                                                objArr[i2] = Integer.valueOf(i);
                                                sQLiteDatabase.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase2 = messagesStorage.database;
                                                Object[] objArr2 = new Object[2];
                                                objArr2[0] = Long.valueOf(j);
                                                objArr2[i2] = Integer.valueOf(i);
                                                sQLiteDatabase2.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr2)).stepThis().dispose();
                                                queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
                                                if (queryFinalized.next()) {
                                                }
                                                queryFinalized.dispose();
                                                if (intValue > 0) {
                                                }
                                                SQLiteDatabase sQLiteDatabase3 = messagesStorage.database;
                                                Object[] objArr3 = new Object[2];
                                                objArr3[0] = Long.valueOf(j2);
                                                objArr3[i2] = Integer.valueOf(i);
                                                sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr3)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase4 = messagesStorage.database;
                                                Object[] objArr4 = new Object[2];
                                                objArr4[0] = Long.valueOf(j2);
                                                objArr4[i2] = Integer.valueOf(i);
                                                sQLiteDatabase4.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr4)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase5 = messagesStorage.database;
                                                Object[] objArr5 = new Object[2];
                                                objArr5[0] = Long.valueOf(j2);
                                                objArr5[i2] = Integer.valueOf(i);
                                                sQLiteDatabase5.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr5)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase6 = messagesStorage.database;
                                                Object[] objArr6 = new Object[i2];
                                                objArr6[0] = Long.valueOf(j2);
                                                sQLiteDatabase6.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr6)).stepThis().dispose();
                                                SQLiteDatabase sQLiteDatabase7 = messagesStorage.database;
                                                Object[] objArr7 = new Object[i2];
                                                objArr7[0] = Long.valueOf(j2);
                                                sQLiteDatabase7.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr7)).stepThis().dispose();
                                                messagesStorage.updateWidgets(arrayList7);
                                                return arrayList7;
                                            } catch (Exception e2) {
                                                e = e2;
                                                sQLiteCursor2 = sQLiteCursor3;
                                                sQLitePreparedStatement2 = null;
                                                messagesStorage.checkSQLException(e);
                                                if (sQLiteCursor2 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                sQLiteCursor = sQLiteCursor3;
                                                sQLitePreparedStatement = null;
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            sQLitePreparedStatement = null;
                                            sQLiteCursor = sQLiteCursor3;
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            throw th;
                                        }
                                    } else {
                                        sQLiteCursor3 = queryFinalized2;
                                    }
                                    i6 = 0;
                                    queryFinalized2 = sQLiteCursor3;
                                } else {
                                    i6 = 0;
                                }
                            }
                        } catch (Exception e3) {
                            e = e3;
                            z3 = true;
                            messagesStorage = this;
                            sQLiteCursor3 = queryFinalized2;
                            messagesStorage.checkSQLException(e);
                            i2 = z3;
                            sQLiteCursor3.dispose();
                            messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList2);
                                }
                            });
                            getFileLoader().deleteFiles(arrayList, 0);
                            i3 = 0;
                            while (i3 < longSparseArray.size()) {
                            }
                            ArrayList<Long> arrayList72 = arrayList4;
                            SQLiteDatabase sQLiteDatabase8 = messagesStorage.database;
                            locale = Locale.US;
                            Object[] objArr8 = new Object[2];
                            objArr8[0] = Long.valueOf(j);
                            objArr8[i2] = Integer.valueOf(i);
                            sQLiteDatabase8.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr8)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase22 = messagesStorage.database;
                            Object[] objArr22 = new Object[2];
                            objArr22[0] = Long.valueOf(j);
                            objArr22[i2] = Integer.valueOf(i);
                            sQLiteDatabase22.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr22)).stepThis().dispose();
                            queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
                            if (queryFinalized.next()) {
                            }
                            queryFinalized.dispose();
                            if (intValue > 0) {
                            }
                            SQLiteDatabase sQLiteDatabase32 = messagesStorage.database;
                            Object[] objArr32 = new Object[2];
                            objArr32[0] = Long.valueOf(j2);
                            objArr32[i2] = Integer.valueOf(i);
                            sQLiteDatabase32.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr32)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase42 = messagesStorage.database;
                            Object[] objArr42 = new Object[2];
                            objArr42[0] = Long.valueOf(j2);
                            objArr42[i2] = Integer.valueOf(i);
                            sQLiteDatabase42.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr42)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase52 = messagesStorage.database;
                            Object[] objArr52 = new Object[2];
                            objArr52[0] = Long.valueOf(j2);
                            objArr52[i2] = Integer.valueOf(i);
                            sQLiteDatabase52.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr52)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase62 = messagesStorage.database;
                            Object[] objArr62 = new Object[i2];
                            objArr62[0] = Long.valueOf(j2);
                            sQLiteDatabase62.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr62)).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase72 = messagesStorage.database;
                            Object[] objArr72 = new Object[i2];
                            objArr72[0] = Long.valueOf(j2);
                            sQLiteDatabase72.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr72)).stepThis().dispose();
                            messagesStorage.updateWidgets(arrayList72);
                            return arrayList72;
                        } catch (Throwable th3) {
                            th = th3;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = queryFinalized2;
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    if (DialogObject.isEncryptedDialog(longValue)) {
                    }
                    byteBufferValue = queryFinalized2.byteBufferValue(1);
                    if (byteBufferValue == null) {
                    }
                    i6 = 0;
                    queryFinalized2 = sQLiteCursor3;
                } catch (Exception e4) {
                    e = e4;
                    sQLiteCursor3 = queryFinalized2;
                    z2 = true;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor3 = queryFinalized2;
                }
            }
            sQLiteCursor3 = queryFinalized2;
            i2 = 1;
            messagesStorage = this;
            sQLiteCursor3.dispose();
        } catch (Exception e5) {
            e = e5;
            messagesStorage = this;
        } catch (Throwable th5) {
            th = th5;
        }
        try {
            messagesStorage.deleteFromDownloadQueue(arrayList3, i2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList2);
                }
            });
            getFileLoader().deleteFiles(arrayList, 0);
            i3 = 0;
            while (i3 < longSparseArray.size()) {
                long keyAt = longSparseArray.keyAt(i3);
                Integer[] numArr2 = (Integer[]) longSparseArray.valueAt(i3);
                SQLiteDatabase sQLiteDatabase9 = messagesStorage.database;
                SQLiteCursor queryFinalized3 = sQLiteDatabase9.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt, new Object[0]);
                try {
                    if (queryFinalized3.next()) {
                        i4 = queryFinalized3.intValue(0);
                        i5 = queryFinalized3.intValue(i2);
                    } else {
                        i4 = 0;
                        i5 = 0;
                    }
                    queryFinalized3.dispose();
                    arrayList5 = arrayList4;
                    arrayList5.add(Long.valueOf(keyAt));
                    sQLitePreparedStatement2 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor2 = queryFinalized3;
                    sQLitePreparedStatement2 = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement2 == null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = queryFinalized3;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
                try {
                    sQLitePreparedStatement2.requery();
                    sQLitePreparedStatement2.bindInteger(i2, Math.max(0, i4 - numArr2[0].intValue()));
                    sQLitePreparedStatement2.bindInteger(2, Math.max(0, i5 - numArr2[i2].intValue()));
                    sQLitePreparedStatement2.bindLong(3, keyAt);
                    sQLitePreparedStatement2.step();
                    sQLitePreparedStatement2.dispose();
                    i3++;
                    arrayList4 = arrayList5;
                } catch (Exception e7) {
                    e = e7;
                    sQLiteCursor2 = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement2 == null) {
                    }
                } catch (Throwable th7) {
                    th = th7;
                    sQLitePreparedStatement = sQLitePreparedStatement2;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            ArrayList<Long> arrayList722 = arrayList4;
            SQLiteDatabase sQLiteDatabase82 = messagesStorage.database;
            locale = Locale.US;
            Object[] objArr82 = new Object[2];
            objArr82[0] = Long.valueOf(j);
            objArr82[i2] = Integer.valueOf(i);
            sQLiteDatabase82.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", objArr82)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase222 = messagesStorage.database;
            Object[] objArr222 = new Object[2];
            objArr222[0] = Long.valueOf(j);
            objArr222[i2] = Integer.valueOf(i);
            sQLiteDatabase222.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", objArr222)).stepThis().dispose();
            queryFinalized = messagesStorage.database.queryFinalized("SELECT changes()", new Object[0]);
        } catch (Exception e8) {
            e = e8;
            sQLiteCursor2 = null;
            sQLitePreparedStatement2 = null;
            messagesStorage.checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement2 == null) {
            }
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
            sQLitePreparedStatement = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
        try {
            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (intValue > 0) {
                SQLiteDatabase sQLiteDatabase10 = messagesStorage.database;
                Object[] objArr9 = new Object[i2];
                objArr9[0] = Long.valueOf(j2);
                sQLiteCursor2 = sQLiteDatabase10.queryFinalized(String.format(locale, "SELECT count FROM chat_pinned_count WHERE uid = %d", objArr9), new Object[0]);
                if (sQLiteCursor2.next()) {
                    int intValue3 = sQLiteCursor2.intValue(0);
                    sQLitePreparedStatement2 = messagesStorage.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                    try {
                        try {
                            sQLitePreparedStatement2.requery();
                            sQLitePreparedStatement2.bindInteger(i2, Math.max(0, intValue3 - intValue));
                            sQLitePreparedStatement2.bindLong(2, j2);
                            sQLitePreparedStatement2.step();
                            sQLitePreparedStatement2.dispose();
                        } catch (Exception e9) {
                            e = e9;
                            messagesStorage.checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                                sQLiteCursor2.dispose();
                            }
                            if (sQLitePreparedStatement2 == null) {
                                sQLitePreparedStatement2.dispose();
                                return null;
                            }
                            return null;
                        }
                    } catch (Throwable th9) {
                        th = th9;
                        sQLiteCursor = sQLiteCursor2;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                sQLiteCursor2.dispose();
            }
            SQLiteDatabase sQLiteDatabase322 = messagesStorage.database;
            Object[] objArr322 = new Object[2];
            objArr322[0] = Long.valueOf(j2);
            objArr322[i2] = Integer.valueOf(i);
            sQLiteDatabase322.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", objArr322)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase422 = messagesStorage.database;
            Object[] objArr422 = new Object[2];
            objArr422[0] = Long.valueOf(j2);
            objArr422[i2] = Integer.valueOf(i);
            sQLiteDatabase422.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", objArr422)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase522 = messagesStorage.database;
            Object[] objArr522 = new Object[2];
            objArr522[0] = Long.valueOf(j2);
            objArr522[i2] = Integer.valueOf(i);
            sQLiteDatabase522.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", objArr522)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase622 = messagesStorage.database;
            Object[] objArr622 = new Object[i2];
            objArr622[0] = Long.valueOf(j2);
            sQLiteDatabase622.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", objArr622)).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase722 = messagesStorage.database;
            Object[] objArr722 = new Object[i2];
            objArr722[0] = Long.valueOf(j2);
            sQLiteDatabase722.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", objArr722)).stepThis().dispose();
            messagesStorage.updateWidgets(arrayList722);
            return arrayList722;
        } catch (Exception e10) {
            e = e10;
            sQLitePreparedStatement2 = null;
            messagesStorage.checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement2 == null) {
            }
        } catch (Throwable th10) {
            th = th10;
            sQLiteCursor = sQLiteCursor4;
            sQLitePreparedStatement = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$210(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final int i, boolean z, final boolean z2) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda93
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$211(j, i, z2);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$211(j, i, z2);
    }

    private void fixUnsupportedMedia(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message == null) {
            return;
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported_old) {
            if (tLRPC$MessageMedia.bytes.length == 0) {
                tLRPC$MessageMedia.bytes = Utilities.intToBytes(183);
            }
        } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported) {
            TLRPC$TL_messageMediaUnsupported_old tLRPC$TL_messageMediaUnsupported_old = new TLRPC$TL_messageMediaUnsupported_old();
            tLRPC$Message.media = tLRPC$TL_messageMediaUnsupported_old;
            tLRPC$TL_messageMediaUnsupported_old.bytes = Utilities.intToBytes(183);
            tLRPC$Message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
        }
    }

    private void doneHolesInTable(String str, long j, int i, long j2) throws Exception {
        SQLitePreparedStatement executeFast;
        int i2 = 2;
        if (j2 != 0) {
            if (i == 0) {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                Locale locale2 = Locale.US;
                sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            }
        } else if (i == 0) {
            SQLiteDatabase sQLiteDatabase3 = this.database;
            Locale locale3 = Locale.US;
            sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
        } else {
            SQLiteDatabase sQLiteDatabase4 = this.database;
            Locale locale4 = Locale.US;
            sQLiteDatabase4.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = 0", Long.valueOf(j))).stepThis().dispose();
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (j2 != 0) {
                    SQLiteDatabase sQLiteDatabase5 = this.database;
                    executeFast = sQLiteDatabase5.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                } else {
                    SQLiteDatabase sQLiteDatabase6 = this.database;
                    executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                }
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                if (j2 != 0) {
                    sQLitePreparedStatement.bindLong(2, j2);
                    i2 = 3;
                }
                sQLitePreparedStatement.bindInteger(i2, 1);
                sQLitePreparedStatement.bindInteger(i2 + 1, 1);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                throw e;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00ea  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x01dd  */
    /* JADX WARN: Type inference failed for: r8v7 */
    /* JADX WARN: Type inference failed for: r8v8 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doneHolesInMedia(long j, int i, int i2, long j2) throws Exception {
        SQLitePreparedStatement executeFast;
        int i3;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement executeFast2;
        int i4;
        if (i2 == -1) {
            if (j2 != 0) {
                if (i == 0) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    String format = String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2));
                    sQLiteDatabase.executeFast(format).stepThis().dispose();
                    sQLitePreparedStatement = format;
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    String format2 = String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2));
                    sQLiteDatabase2.executeFast(format2).stepThis().dispose();
                    sQLitePreparedStatement = format2;
                }
            } else if (i == 0) {
                SQLiteDatabase sQLiteDatabase3 = this.database;
                String format3 = String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d", Long.valueOf(j));
                sQLiteDatabase3.executeFast(format3).stepThis().dispose();
                sQLitePreparedStatement = format3;
            } else {
                SQLiteDatabase sQLiteDatabase4 = this.database;
                String format4 = String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", Long.valueOf(j));
                sQLiteDatabase4.executeFast(format4).stepThis().dispose();
                sQLitePreparedStatement = format4;
            }
            try {
                try {
                    if (j2 != 0) {
                        executeFast2 = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                    } else {
                        executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                    }
                    SQLitePreparedStatement sQLitePreparedStatement2 = executeFast2;
                    for (int i5 = 0; i5 < 8; i5++) {
                        try {
                            sQLitePreparedStatement2.requery();
                            sQLitePreparedStatement2.bindLong(1, j);
                            if (j2 != 0) {
                                sQLitePreparedStatement2.bindLong(2, j2);
                                i4 = 3;
                            } else {
                                i4 = 2;
                            }
                            int i6 = i4 + 1;
                            sQLitePreparedStatement2.bindInteger(i4, i5);
                            sQLitePreparedStatement2.bindInteger(i6, 1);
                            sQLitePreparedStatement2.bindInteger(i6 + 1, 1);
                            sQLitePreparedStatement2.step();
                        } catch (Exception e) {
                            throw e;
                        }
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != 0) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                throw e2;
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = 0;
                if (sQLitePreparedStatement != 0) {
                }
                throw th;
            }
        }
        if (j2 != 0) {
            if (i == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2))).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2))).stepThis().dispose();
            }
        } else if (i == 0) {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", Long.valueOf(j), Integer.valueOf(i2))).stepThis().dispose();
        }
        SQLitePreparedStatement sQLitePreparedStatement3 = 0;
        try {
            try {
                if (j2 != 0) {
                    executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                } else {
                    executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                }
                SQLitePreparedStatement sQLitePreparedStatement4 = executeFast;
                try {
                    sQLitePreparedStatement4.requery();
                    sQLitePreparedStatement4.bindLong(1, j);
                    if (j2 != 0) {
                        sQLitePreparedStatement4.bindLong(2, j2);
                        i3 = 3;
                    } else {
                        i3 = 2;
                    }
                    int i7 = i3 + 1;
                    sQLitePreparedStatement4.bindInteger(i3, i2);
                    sQLitePreparedStatement4.bindInteger(i7, 1);
                    sQLitePreparedStatement4.bindInteger(i7 + 1, 1);
                    sQLitePreparedStatement4.step();
                    sQLitePreparedStatement4.dispose();
                    sQLitePreparedStatement4.dispose();
                } catch (Exception e3) {
                }
            } catch (Throwable th3) {
                th = th3;
                if (sQLitePreparedStatement3 != 0) {
                    sQLitePreparedStatement3.dispose();
                }
                throw th;
            }
        } catch (Exception e4) {
            throw e4;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement3 = 0;
            if (sQLitePreparedStatement3 != 0) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:118:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x04c1  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x04c6  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x04ce  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x04d3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closeHolesInMedia(long j, int i, int i2, int i3, long j2) {
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement executeFast;
        int i4;
        int i5 = 2;
        int i6 = 1;
        try {
            try {
                if (j2 != 0) {
                    if (i3 < 0) {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    } else {
                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    }
                } else if (i3 < 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                }
                ArrayList arrayList = null;
                while (queryFinalized.next()) {
                    try {
                        if (arrayList == null) {
                            arrayList = new ArrayList();
                        }
                        int intValue = queryFinalized.intValue(0);
                        int intValue2 = queryFinalized.intValue(1);
                        int intValue3 = queryFinalized.intValue(i5);
                        if (intValue2 != intValue3 || intValue2 != 1) {
                            arrayList.add(new Hole(intValue, intValue2, intValue3));
                        }
                        i5 = 2;
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(exc);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor == null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList != null) {
                    for (int i7 = 0; i7 < arrayList.size(); i7++) {
                        Hole hole = (Hole) arrayList.get(i7);
                        int i8 = hole.end;
                        if (i2 < i8 - 1 || i > hole.start + i6) {
                            if (i2 < i8 - 1) {
                                int i9 = hole.start;
                                if (i > i9 + 1) {
                                    if (j2 != 0) {
                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                                    } else {
                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                    }
                                    try {
                                        executeFast.requery();
                                        executeFast.bindLong(1, j);
                                        if (j2 != 0) {
                                            executeFast.bindLong(2, j2);
                                            i4 = 3;
                                        } else {
                                            i4 = 2;
                                        }
                                        int i10 = i4 + 1;
                                        executeFast.bindInteger(i4, hole.type);
                                        executeFast.bindInteger(i10, hole.start);
                                        executeFast.bindInteger(i10 + 1, i);
                                        executeFast.step();
                                        executeFast.requery();
                                        i6 = 1;
                                        executeFast.bindLong(1, j);
                                        executeFast.bindInteger(2, hole.type);
                                        executeFast.bindInteger(3, i2);
                                        executeFast.bindInteger(4, hole.end);
                                        executeFast.step();
                                        executeFast.dispose();
                                    } catch (Exception e2) {
                                        exc = e2;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        checkSQLException(exc);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor == null) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } else if (i9 != i2) {
                                    if (j2 != 0) {
                                        try {
                                            this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET start = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        } catch (Exception e3) {
                                            checkSQLException(e3, false);
                                        }
                                    } else {
                                        this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    }
                                }
                            } else if (i8 != i) {
                                if (j2 != 0) {
                                    try {
                                        this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET end = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    } catch (Exception e4) {
                                        checkSQLException(e4, false);
                                    }
                                } else {
                                    this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                }
                            }
                        } else if (j2 != 0) {
                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                        } else {
                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                        }
                        i6 = 1;
                    }
                }
            } catch (Throwable th5) {
                th = th5;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e5) {
            exc = e5;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:118:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0562  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0567  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x056f  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0574  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void closeHolesInTable(String str, long j, int i, int i2, long j2) {
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int i3;
        SQLitePreparedStatement executeFast;
        long j3;
        int i4;
        int i5;
        try {
            try {
                if (j2 != 0) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    Locale locale = Locale.US;
                    queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM " + str + " WHERE uid = %d AND topic_id = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    Locale locale2 = Locale.US;
                    queryFinalized = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT start, end FROM " + str + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                }
                ArrayList arrayList = null;
                while (queryFinalized.next()) {
                    try {
                        if (arrayList == null) {
                            arrayList = new ArrayList();
                        }
                        int intValue = queryFinalized.intValue(0);
                        int intValue2 = queryFinalized.intValue(1);
                        if (intValue != intValue2 || intValue != 1) {
                            arrayList.add(new Hole(intValue, intValue2));
                        }
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        try {
                            checkSQLException(exc);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor == null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList != null) {
                    int i6 = 0;
                    while (i6 < arrayList.size()) {
                        Hole hole = (Hole) arrayList.get(i6);
                        int i7 = hole.end;
                        ArrayList arrayList2 = arrayList;
                        if (i2 < i7 - 1 || i > hole.start + 1) {
                            i3 = i6;
                            if (i2 < i7 - 1) {
                                int i8 = hole.start;
                                if (i > i8 + 1) {
                                    if (j2 != 0) {
                                        SQLiteDatabase sQLiteDatabase3 = this.database;
                                        Locale locale3 = Locale.US;
                                        sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase4 = this.database;
                                        executeFast = sQLiteDatabase4.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                                    } else {
                                        SQLiteDatabase sQLiteDatabase5 = this.database;
                                        Locale locale4 = Locale.US;
                                        sQLiteDatabase5.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                        executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                                    }
                                    try {
                                        executeFast.requery();
                                        j3 = j;
                                        executeFast.bindLong(1, j3);
                                        if (j2 != 0) {
                                            executeFast.bindLong(2, j2);
                                            i4 = 3;
                                        } else {
                                            i4 = 2;
                                        }
                                        executeFast.bindInteger(i4, hole.start);
                                        executeFast.bindInteger(i4 + 1, i);
                                        executeFast.step();
                                        executeFast.requery();
                                        executeFast.bindLong(1, j3);
                                        if (j2 != 0) {
                                            executeFast.bindLong(2, j2);
                                            i5 = 3;
                                        } else {
                                            i5 = 2;
                                        }
                                        executeFast.bindInteger(i5, i2);
                                        executeFast.bindInteger(i5 + 1, hole.end);
                                        executeFast.step();
                                        executeFast.dispose();
                                        arrayList = arrayList2;
                                        i6 = i3 + 1;
                                    } catch (Exception e2) {
                                        exc = e2;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        checkSQLException(exc);
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor == null) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor = null;
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } else if (i8 != i2) {
                                    if (j2 != 0) {
                                        try {
                                            SQLiteDatabase sQLiteDatabase7 = this.database;
                                            Locale locale5 = Locale.US;
                                            sQLiteDatabase7.executeFast(String.format(locale5, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                            SQLiteDatabase sQLiteDatabase8 = this.database;
                                            sQLiteDatabase8.executeFast(String.format(locale5, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2), Integer.valueOf(hole.end))).stepThis().dispose();
                                        } catch (Exception e3) {
                                            checkSQLException(e3, false);
                                        }
                                    } else {
                                        SQLiteDatabase sQLiteDatabase9 = this.database;
                                        Locale locale6 = Locale.US;
                                        sQLiteDatabase9.executeFast(String.format(locale6, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase10 = this.database;
                                        sQLiteDatabase10.executeFast(String.format(locale6, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(hole.end))).stepThis().dispose();
                                    }
                                }
                            } else if (i7 != i) {
                                if (j2 != 0) {
                                    try {
                                        SQLiteDatabase sQLiteDatabase11 = this.database;
                                        Locale locale7 = Locale.US;
                                        sQLiteDatabase11.executeFast(String.format(locale7, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase12 = this.database;
                                        sQLiteDatabase12.executeFast(String.format(locale7, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(i))).stepThis().dispose();
                                    } catch (Exception e4) {
                                        checkSQLException(e4, false);
                                    }
                                } else {
                                    SQLiteDatabase sQLiteDatabase13 = this.database;
                                    Locale locale8 = Locale.US;
                                    sQLiteDatabase13.executeFast(String.format(locale8, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    SQLiteDatabase sQLiteDatabase14 = this.database;
                                    sQLiteDatabase14.executeFast(String.format(locale8, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(i))).stepThis().dispose();
                                }
                            }
                        } else {
                            if (j2 != 0) {
                                SQLiteDatabase sQLiteDatabase15 = this.database;
                                Locale locale9 = Locale.US;
                                sQLiteDatabase15.executeFast(String.format(locale9, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            } else {
                                SQLiteDatabase sQLiteDatabase16 = this.database;
                                Locale locale10 = Locale.US;
                                sQLiteDatabase16.executeFast(String.format(locale10, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            }
                            i3 = i6;
                        }
                        j3 = j;
                        arrayList = arrayList2;
                        i6 = i3 + 1;
                    }
                }
            } catch (Throwable th5) {
                th = th5;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e5) {
            exc = e5;
            sQLitePreparedStatement = null;
        }
    }

    public void replaceMessageIfExists(final TLRPC$Message tLRPC$Message, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final boolean z) {
        if (tLRPC$Message == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$replaceMessageIfExists$214(tLRPC$Message, z, arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:106:0x01e7 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:107:0x01ee A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01fa A[Catch: all -> 0x0312, Exception -> 0x0317, TRY_ENTER, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:112:0x01ff A[Catch: all -> 0x0312, Exception -> 0x0317, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:120:0x021c  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x0296 A[Catch: all -> 0x0312, Exception -> 0x0317, TRY_ENTER, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:149:0x02a3 A[Catch: all -> 0x0312, Exception -> 0x0317, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:159:0x0302 A[Catch: all -> 0x0312, Exception -> 0x0317, TRY_LEAVE, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:162:0x030e  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x032a  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x032f  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x0334  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0342  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x0347  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0202 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:214:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:216:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:27:0x005b A[Catch: all -> 0x0312, Exception -> 0x0317, TRY_ENTER, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x006c A[Catch: all -> 0x0312, Exception -> 0x0317, TryCatch #11 {Exception -> 0x0317, all -> 0x0312, blocks: (B:7:0x0034, B:14:0x0047, B:29:0x005f, B:31:0x006c, B:32:0x006f, B:37:0x0094, B:113:0x0202, B:42:0x00b1, B:110:0x01fa, B:112:0x01ff, B:51:0x00d0, B:118:0x0214, B:127:0x0228, B:133:0x0242, B:134:0x024b, B:146:0x0296, B:147:0x0299, B:149:0x02a3, B:150:0x02ae, B:152:0x02b4, B:154:0x02c9, B:156:0x02cf, B:157:0x02e3, B:159:0x0302, B:27:0x005b, B:171:0x031f, B:172:0x0322), top: B:200:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x008d  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0128 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0130 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x013d A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0153 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:73:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x015f  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x0172  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x0181 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0197 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x01a1 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01ae A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x01c1 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01c7 A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01ce A[Catch: all -> 0x020e, Exception -> 0x0211, TryCatch #9 {Exception -> 0x0211, all -> 0x020e, blocks: (B:45:0x00bd, B:48:0x00c7, B:49:0x00cc, B:52:0x00d8, B:54:0x00e7, B:56:0x00ee, B:58:0x0110, B:63:0x0118, B:65:0x0128, B:67:0x0139, B:69:0x013d, B:71:0x0159, B:78:0x0165, B:82:0x0173, B:84:0x0181, B:86:0x019d, B:88:0x01a1, B:92:0x01aa, B:94:0x01b4, B:96:0x01c1, B:99:0x01ce, B:101:0x01d5, B:102:0x01dd, B:104:0x01e3, B:106:0x01e7, B:108:0x01f2, B:107:0x01ee, B:97:0x01c7, B:91:0x01a8, B:93:0x01ae, B:85:0x0197, B:70:0x0153, B:66:0x0130), top: B:202:0x00bd }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$replaceMessageIfExists$214(TLRPC$Message tLRPC$Message, boolean z, ArrayList arrayList, ArrayList arrayList2) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i;
        NativeByteBuffer nativeByteBuffer;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int i2;
        final ArrayList arrayList3;
        SQLiteDatabase sQLiteDatabase3;
        int i3;
        int i4;
        NativeByteBuffer nativeByteBuffer2;
        int i5;
        int i6;
        int i7;
        NativeByteBuffer nativeByteBuffer3;
        int i8;
        NativeByteBuffer nativeByteBuffer4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        int i9;
        long j;
        int i10;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        int i11;
        int i12 = 2;
        int i13 = 1;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d LIMIT 1", Integer.valueOf(tLRPC$Message.id), Long.valueOf(MessageObject.getDialogId(tLRPC$Message))), new Object[0]);
                try {
                    try {
                    } catch (Exception e) {
                        e = e;
                        i = 0;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        nativeByteBuffer = null;
                        this.database.beginTransaction();
                        long j2 = 0;
                        if (tLRPC$Message.dialog_id == 0) {
                        }
                        fixUnsupportedMedia(tLRPC$Message);
                        MessageObject.normalizeFlags(tLRPC$Message);
                        NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                        tLRPC$Message.serializeToStream(nativeByteBuffer5);
                        long clientUserId = getUserConfig().getClientUserId();
                        i2 = 0;
                        arrayList3 = null;
                        while (i2 < i12) {
                        }
                        NativeByteBuffer nativeByteBuffer6 = nativeByteBuffer5;
                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                        }
                        if (nativeByteBuffer != null) {
                        }
                        nativeByteBuffer6.reuse();
                        this.database.commitTransaction();
                        if (z) {
                        }
                        if (arrayList3 != null) {
                        }
                        sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                        }
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                try {
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                throw th;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
        if (!sQLiteCursor.next()) {
            sQLiteCursor.dispose();
            sQLiteCursor.dispose();
            SQLiteDatabase sQLiteDatabase4 = this.database;
            if (sQLiteDatabase4 != null) {
                sQLiteDatabase4.commitTransaction();
                return;
            }
            return;
        }
        i = sQLiteCursor.intValue(1);
        try {
            nativeByteBuffer = sQLiteCursor.byteBufferValue(2);
            sQLiteCursor.dispose();
        } catch (Exception e4) {
            e = e4;
            checkSQLException(e);
            if (sQLiteCursor != null) {
            }
            nativeByteBuffer = null;
            this.database.beginTransaction();
            long j22 = 0;
            if (tLRPC$Message.dialog_id == 0) {
            }
            fixUnsupportedMedia(tLRPC$Message);
            MessageObject.normalizeFlags(tLRPC$Message);
            NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
            tLRPC$Message.serializeToStream(nativeByteBuffer52);
            long clientUserId2 = getUserConfig().getClientUserId();
            i2 = 0;
            arrayList3 = null;
            while (i2 < i12) {
            }
            NativeByteBuffer nativeByteBuffer62 = nativeByteBuffer52;
            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
            }
            if (nativeByteBuffer != null) {
            }
            nativeByteBuffer62.reuse();
            this.database.commitTransaction();
            if (z) {
            }
            if (arrayList3 != null) {
            }
            sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
            }
        }
        this.database.beginTransaction();
        long j222 = 0;
        if (tLRPC$Message.dialog_id == 0) {
            MessageObject.getDialogId(tLRPC$Message);
        }
        fixUnsupportedMedia(tLRPC$Message);
        MessageObject.normalizeFlags(tLRPC$Message);
        NativeByteBuffer nativeByteBuffer522 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
        tLRPC$Message.serializeToStream(nativeByteBuffer522);
        long clientUserId22 = getUserConfig().getClientUserId();
        i2 = 0;
        arrayList3 = null;
        while (i2 < i12) {
            boolean z2 = i2 == i13;
            long topicId = MessageObject.getTopicId(this.currentAccount, tLRPC$Message, isForum(tLRPC$Message.dialog_id));
            NativeByteBuffer nativeByteBuffer7 = nativeByteBuffer522;
            long j3 = tLRPC$Message.dialog_id;
            if (!z2) {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
            } else if (topicId == j222) {
                j = clientUserId22;
                nativeByteBuffer2 = nativeByteBuffer7;
                i2++;
                nativeByteBuffer522 = nativeByteBuffer2;
                clientUserId22 = j;
                i12 = 2;
                i13 = 1;
                j222 = 0;
            } else {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                if (j3 == clientUserId22) {
                    try {
                        if (MessageObject.getSavedDialogId(clientUserId22, tLRPC$Message) != j222) {
                            if (arrayList3 == null) {
                                arrayList3 = new ArrayList();
                            }
                            arrayList3.add(tLRPC$Message);
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLitePreparedStatement2 = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement2 = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
            }
            sQLitePreparedStatement.requery();
            sQLitePreparedStatement.bindInteger(1, tLRPC$Message.id);
            sQLitePreparedStatement.bindLong(2, j3);
            if (z2) {
                sQLitePreparedStatement.bindLong(3, topicId);
                i4 = 4;
            } else {
                i4 = 3;
            }
            int i14 = i4 + 1;
            sQLitePreparedStatement.bindInteger(i4, i);
            int i15 = i14 + 1;
            sQLitePreparedStatement.bindInteger(i14, tLRPC$Message.send_state);
            int i16 = i15 + 1;
            sQLitePreparedStatement.bindInteger(i15, tLRPC$Message.date);
            int i17 = i16 + 1;
            nativeByteBuffer2 = nativeByteBuffer7;
            sQLitePreparedStatement.bindByteBuffer(i16, nativeByteBuffer2);
            int i18 = i17 + 1;
            if (!MessageObject.isOut(tLRPC$Message) && !tLRPC$Message.from_scheduled) {
                i5 = 0;
                sQLitePreparedStatement.bindInteger(i17, i5);
                int i19 = i18 + 1;
                sQLitePreparedStatement.bindInteger(i18, tLRPC$Message.ttl);
                if ((tLRPC$Message.flags & 1024) == 0) {
                    i6 = i19 + 1;
                    sQLitePreparedStatement.bindInteger(i19, tLRPC$Message.views);
                } else {
                    i6 = i19 + 1;
                    sQLitePreparedStatement.bindInteger(i19, getMessageMediaType(tLRPC$Message));
                }
                if (tLRPC$Message.replyStory == null) {
                    nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message.replyStory.getObjectSize());
                    tLRPC$Message.replyStory.serializeToStream(nativeByteBuffer3);
                    i7 = i6 + 1;
                    sQLitePreparedStatement.bindByteBuffer(i6, nativeByteBuffer3);
                } else {
                    i7 = i6 + 1;
                    sQLitePreparedStatement.bindNull(i6);
                    nativeByteBuffer3 = null;
                }
                int i20 = tLRPC$Message.stickerVerified;
                int i21 = i7 + 1;
                sQLitePreparedStatement.bindInteger(i7, i20 != 0 ? 1 : i20 == 2 ? 2 : 0);
                int i22 = i21 + 1;
                sQLitePreparedStatement.bindInteger(i21, !tLRPC$Message.mentioned ? 1 : 0);
                int i23 = i22 + 1;
                sQLitePreparedStatement.bindInteger(i22, tLRPC$Message.forwards);
                if (tLRPC$Message.replies == null) {
                    nativeByteBuffer4 = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                    tLRPC$Message.replies.serializeToStream(nativeByteBuffer4);
                    i8 = i23 + 1;
                    sQLitePreparedStatement.bindByteBuffer(i23, nativeByteBuffer4);
                } else {
                    i8 = i23 + 1;
                    sQLitePreparedStatement.bindNull(i23);
                    nativeByteBuffer4 = null;
                }
                tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                if (tLRPC$MessageReplyHeader == null) {
                    i9 = i8 + 1;
                    int i24 = tLRPC$MessageReplyHeader.reply_to_top_id;
                    if (i24 == 0) {
                        i24 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                    }
                    sQLitePreparedStatement.bindInteger(i8, i24);
                } else {
                    i9 = i8 + 1;
                    sQLitePreparedStatement.bindInteger(i8, 0);
                }
                int i25 = i9 + 1;
                j = clientUserId22;
                sQLitePreparedStatement.bindLong(i9, MessageObject.getChannelId(tLRPC$Message));
                if (nativeByteBuffer == null) {
                    i10 = i25 + 1;
                    sQLitePreparedStatement.bindByteBuffer(i25, nativeByteBuffer);
                } else {
                    i10 = i25 + 1;
                    sQLitePreparedStatement.bindNull(i25);
                }
                if (!z2) {
                    if ((tLRPC$Message.flags & 131072) != 0) {
                        i11 = i10 + 1;
                        sQLitePreparedStatement.bindLong(i10, tLRPC$Message.grouped_id);
                    } else {
                        i11 = i10 + 1;
                        sQLitePreparedStatement.bindNull(i10);
                    }
                    i10 = i11;
                }
                tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                if (tLRPC$MessageReplyHeader2 == null) {
                    sQLitePreparedStatement.bindInteger(i10, tLRPC$MessageReplyHeader2.story_id);
                } else {
                    sQLitePreparedStatement.bindInteger(i10, 0);
                }
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
                if (nativeByteBuffer4 != null) {
                    nativeByteBuffer4.reuse();
                }
                if (nativeByteBuffer3 == null) {
                    nativeByteBuffer3.reuse();
                }
                i2++;
                nativeByteBuffer522 = nativeByteBuffer2;
                clientUserId22 = j;
                i12 = 2;
                i13 = 1;
                j222 = 0;
            }
            i5 = 1;
            sQLitePreparedStatement.bindInteger(i17, i5);
            int i192 = i18 + 1;
            sQLitePreparedStatement.bindInteger(i18, tLRPC$Message.ttl);
            if ((tLRPC$Message.flags & 1024) == 0) {
            }
            if (tLRPC$Message.replyStory == null) {
            }
            int i202 = tLRPC$Message.stickerVerified;
            int i212 = i7 + 1;
            sQLitePreparedStatement.bindInteger(i7, i202 != 0 ? 1 : i202 == 2 ? 2 : 0);
            int i222 = i212 + 1;
            sQLitePreparedStatement.bindInteger(i212, !tLRPC$Message.mentioned ? 1 : 0);
            int i232 = i222 + 1;
            sQLitePreparedStatement.bindInteger(i222, tLRPC$Message.forwards);
            if (tLRPC$Message.replies == null) {
            }
            tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
            if (tLRPC$MessageReplyHeader == null) {
            }
            int i252 = i9 + 1;
            j = clientUserId22;
            sQLitePreparedStatement.bindLong(i9, MessageObject.getChannelId(tLRPC$Message));
            if (nativeByteBuffer == null) {
            }
            if (!z2) {
            }
            tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
            if (tLRPC$MessageReplyHeader2 == null) {
            }
            sQLitePreparedStatement.step();
            sQLitePreparedStatement.dispose();
            if (nativeByteBuffer4 != null) {
            }
            if (nativeByteBuffer3 == null) {
            }
            i2++;
            nativeByteBuffer522 = nativeByteBuffer2;
            clientUserId22 = j;
            i12 = 2;
            i13 = 1;
            j222 = 0;
        }
        NativeByteBuffer nativeByteBuffer622 = nativeByteBuffer522;
        if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
            int i26 = 0;
            while (i26 < 2) {
                boolean z3 = i26 == 1;
                long topicId2 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message, isForum(tLRPC$Message.dialog_id));
                if (!z3 || topicId2 != 0) {
                    SQLitePreparedStatement executeFast = i26 == 0 ? this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                    try {
                        executeFast.requery();
                        executeFast.bindInteger(1, tLRPC$Message.id);
                        executeFast.bindLong(2, tLRPC$Message.dialog_id);
                        if (i26 != 0) {
                            executeFast.bindLong(3, topicId2);
                            i3 = 4;
                        } else {
                            i3 = 3;
                        }
                        int i27 = i3 + 1;
                        executeFast.bindInteger(i3, tLRPC$Message.date);
                        executeFast.bindInteger(i27, MediaDataController.getMediaType(tLRPC$Message));
                        executeFast.bindByteBuffer(i27 + 1, nativeByteBuffer622);
                        executeFast.step();
                        executeFast.dispose();
                    } catch (Exception e6) {
                        e = e6;
                        sQLitePreparedStatement2 = executeFast;
                        sQLitePreparedStatement = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th6) {
                        th = th6;
                        sQLitePreparedStatement2 = executeFast;
                        sQLitePreparedStatement = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
                i26++;
            }
        }
        if (nativeByteBuffer != null) {
            nativeByteBuffer.reuse();
        }
        nativeByteBuffer622.reuse();
        this.database.commitTransaction();
        if (z) {
            HashMap hashMap = new HashMap();
            HashMap hashMap2 = new HashMap();
            for (int i28 = 0; i28 < arrayList.size(); i28++) {
                TLRPC$User tLRPC$User = (TLRPC$User) arrayList.get(i28);
                hashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
            }
            for (int i29 = 0; i29 < arrayList2.size(); i29++) {
                TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) arrayList2.get(i29);
                hashMap2.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            }
            final MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message, (AbstractMap<Long, TLRPC$User>) hashMap, (AbstractMap<Long, TLRPC$Chat>) hashMap2, true, true);
            final ArrayList arrayList4 = new ArrayList();
            arrayList4.add(messageObject);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda192
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$replaceMessageIfExists$212(messageObject, arrayList4);
                }
            });
        }
        if (arrayList3 != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda172
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$replaceMessageIfExists$213(arrayList3);
                }
            });
        }
        sQLiteDatabase3 = this.database;
        if (sQLiteDatabase3 != null) {
            sQLiteDatabase3.commitTransaction();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$212(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$213(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public void loadMessageAttachPaths(final ArrayList<MessageObject> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda180
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadMessageAttachPaths$215(arrayList, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessageAttachPaths$215(ArrayList arrayList, Runnable runnable) {
        NativeByteBuffer byteBufferValue;
        long clientUserId = getUserConfig().getClientUserId();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            MessageObject messageObject = (MessageObject) it.next();
            if (!messageObject.scheduled && !messageObject.isQuickReply()) {
                SQLiteCursor sQLiteCursor = null;
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = ? AND mid = ?", Long.valueOf(messageObject.getDialogId()), Integer.valueOf(messageObject.getId()));
                        if (sQLiteCursor.next() && (byteBufferValue = sQLiteCursor.byteBufferValue(0)) != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, clientUserId);
                            byteBufferValue.reuse();
                            messageObject.messageOwner.attachPath = TLdeserialize.attachPath;
                            messageObject.checkMediaExistance();
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                        if (sQLiteCursor != null) {
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Throwable th) {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    public void putMessages(final TLRPC$messages_Messages tLRPC$messages_Messages, final long j, final int i, final int i2, final boolean z, final int i3, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putMessages$218(i3, tLRPC$messages_Messages, j, j2, i, i2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:130:0x03a7, code lost:
        if (r28.intValue() < r4.id) goto L108;
     */
    /* JADX WARN: Code restructure failed: missing block: B:188:0x04cc, code lost:
        if (r4.id == r3.id) goto L491;
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x0260, code lost:
        if (r13 == 4) goto L729;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:154:0x03f7 A[Catch: all -> 0x03c4, Exception -> 0x03c6, TRY_LEAVE, TryCatch #49 {Exception -> 0x03c6, all -> 0x03c4, blocks: (B:131:0x03a9, B:133:0x03b5, B:154:0x03f7, B:129:0x03a5), top: B:742:0x03a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:203:0x04ee A[Catch: all -> 0x0596, Exception -> 0x0598, TryCatch #47 {Exception -> 0x0598, all -> 0x0596, blocks: (B:169:0x046d, B:171:0x0483, B:173:0x048b, B:175:0x0499, B:177:0x04a6, B:179:0x04b2, B:181:0x04b8, B:183:0x04be, B:185:0x04c2, B:187:0x04c6, B:203:0x04ee, B:205:0x04fd, B:207:0x0507, B:209:0x051a, B:213:0x0525, B:217:0x0532, B:219:0x0555, B:220:0x055a, B:226:0x0566, B:233:0x0583, B:227:0x0569, B:229:0x056d, B:190:0x04d0, B:192:0x04d4, B:194:0x04da, B:196:0x04de, B:198:0x04e2), top: B:746:0x046d }] */
    /* JADX WARN: Removed duplicated region for block: B:204:0x04fc  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0507 A[Catch: all -> 0x0596, Exception -> 0x0598, TryCatch #47 {Exception -> 0x0598, all -> 0x0596, blocks: (B:169:0x046d, B:171:0x0483, B:173:0x048b, B:175:0x0499, B:177:0x04a6, B:179:0x04b2, B:181:0x04b8, B:183:0x04be, B:185:0x04c2, B:187:0x04c6, B:203:0x04ee, B:205:0x04fd, B:207:0x0507, B:209:0x051a, B:213:0x0525, B:217:0x0532, B:219:0x0555, B:220:0x055a, B:226:0x0566, B:233:0x0583, B:227:0x0569, B:229:0x056d, B:190:0x04d0, B:192:0x04d4, B:194:0x04da, B:196:0x04de, B:198:0x04e2), top: B:746:0x046d }] */
    /* JADX WARN: Removed duplicated region for block: B:235:0x0588  */
    /* JADX WARN: Removed duplicated region for block: B:258:0x05c6  */
    /* JADX WARN: Removed duplicated region for block: B:304:0x0723  */
    /* JADX WARN: Removed duplicated region for block: B:422:0x08f1  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x08ff  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x090a A[Catch: all -> 0x0b1d, Exception -> 0x0b21, TRY_LEAVE, TryCatch #50 {Exception -> 0x0b21, blocks: (B:427:0x0904, B:429:0x090a), top: B:703:0x0904 }] */
    /* JADX WARN: Removed duplicated region for block: B:432:0x0931 A[Catch: all -> 0x0b19, Exception -> 0x0b1b, TryCatch #46 {Exception -> 0x0b1b, blocks: (B:441:0x098d, B:455:0x09e2, B:457:0x09e9, B:460:0x09ef, B:470:0x0a3b, B:473:0x0a43, B:496:0x0ac1, B:498:0x0ac7, B:503:0x0ae5, B:506:0x0aed, B:507:0x0af2, B:501:0x0adb, B:483:0x0a81, B:486:0x0a87, B:449:0x09ac, B:451:0x09b2, B:454:0x09c9, B:431:0x0912, B:432:0x0931, B:434:0x0939, B:440:0x098a), top: B:701:0x09e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:443:0x099f  */
    /* JADX WARN: Removed duplicated region for block: B:451:0x09b2 A[Catch: all -> 0x0b19, Exception -> 0x0b1b, TryCatch #46 {Exception -> 0x0b1b, blocks: (B:441:0x098d, B:455:0x09e2, B:457:0x09e9, B:460:0x09ef, B:470:0x0a3b, B:473:0x0a43, B:496:0x0ac1, B:498:0x0ac7, B:503:0x0ae5, B:506:0x0aed, B:507:0x0af2, B:501:0x0adb, B:483:0x0a81, B:486:0x0a87, B:449:0x09ac, B:451:0x09b2, B:454:0x09c9, B:431:0x0912, B:432:0x0931, B:434:0x0939, B:440:0x098a), top: B:701:0x09e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:472:0x0a41  */
    /* JADX WARN: Removed duplicated region for block: B:482:0x0a7f  */
    /* JADX WARN: Removed duplicated region for block: B:496:0x0ac1 A[Catch: all -> 0x0b19, Exception -> 0x0b1b, TRY_ENTER, TryCatch #46 {Exception -> 0x0b1b, blocks: (B:441:0x098d, B:455:0x09e2, B:457:0x09e9, B:460:0x09ef, B:470:0x0a3b, B:473:0x0a43, B:496:0x0ac1, B:498:0x0ac7, B:503:0x0ae5, B:506:0x0aed, B:507:0x0af2, B:501:0x0adb, B:483:0x0a81, B:486:0x0a87, B:449:0x09ac, B:451:0x09b2, B:454:0x09c9, B:431:0x0912, B:432:0x0931, B:434:0x0939, B:440:0x098a), top: B:701:0x09e9 }] */
    /* JADX WARN: Removed duplicated region for block: B:583:0x0ca9 A[Catch: all -> 0x0cd4, Exception -> 0x0cd6, TryCatch #45 {Exception -> 0x0cd6, all -> 0x0cd4, blocks: (B:566:0x0c42, B:569:0x0c49, B:574:0x0c6a, B:576:0x0c89, B:583:0x0ca9, B:584:0x0cb1, B:581:0x0c96, B:573:0x0c58), top: B:750:0x0c42 }] */
    /* JADX WARN: Removed duplicated region for block: B:588:0x0cbb  */
    /* JADX WARN: Removed duplicated region for block: B:590:0x0cc0  */
    /* JADX WARN: Removed duplicated region for block: B:592:0x0cc5  */
    /* JADX WARN: Removed duplicated region for block: B:594:0x0cca  */
    /* JADX WARN: Removed duplicated region for block: B:596:0x0ccf  */
    /* JADX WARN: Removed duplicated region for block: B:651:0x0dd2  */
    /* JADX WARN: Removed duplicated region for block: B:653:0x0dd7  */
    /* JADX WARN: Removed duplicated region for block: B:655:0x0ddc  */
    /* JADX WARN: Removed duplicated region for block: B:657:0x0de1  */
    /* JADX WARN: Removed duplicated region for block: B:659:0x0de6  */
    /* JADX WARN: Removed duplicated region for block: B:661:0x0deb  */
    /* JADX WARN: Removed duplicated region for block: B:663:0x0df0  */
    /* JADX WARN: Removed duplicated region for block: B:665:0x0df5  */
    /* JADX WARN: Removed duplicated region for block: B:667:0x0dfa  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x0dff  */
    /* JADX WARN: Removed duplicated region for block: B:675:0x0e0d  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x0e12  */
    /* JADX WARN: Removed duplicated region for block: B:679:0x0e17  */
    /* JADX WARN: Removed duplicated region for block: B:681:0x0e1c  */
    /* JADX WARN: Removed duplicated region for block: B:683:0x0e21  */
    /* JADX WARN: Removed duplicated region for block: B:685:0x0e26  */
    /* JADX WARN: Removed duplicated region for block: B:687:0x0e2b  */
    /* JADX WARN: Removed duplicated region for block: B:689:0x0e30  */
    /* JADX WARN: Removed duplicated region for block: B:691:0x0e35  */
    /* JADX WARN: Removed duplicated region for block: B:693:0x0e3a  */
    /* JADX WARN: Removed duplicated region for block: B:701:0x09e9 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:721:0x0400 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:780:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:782:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r1v199 */
    /* JADX WARN: Type inference failed for: r1v7 */
    /* JADX WARN: Type inference failed for: r1v8 */
    /* JADX WARN: Type inference failed for: r50v0, types: [org.telegram.messenger.MessagesStorage, org.telegram.messenger.BaseController] */
    /* JADX WARN: Type inference failed for: r7v128 */
    /* JADX WARN: Type inference failed for: r7v134 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putMessages$218(int i, TLRPC$messages_Messages tLRPC$messages_Messages, long j, long j2, int i2, int i3, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        SQLiteCursor sQLiteCursor5;
        SQLiteCursor sQLiteCursor6;
        long j3;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLiteCursor sQLiteCursor7;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLiteCursor sQLiteCursor8;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLitePreparedStatement sQLitePreparedStatement14;
        long j4;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLitePreparedStatement sQLitePreparedStatement17;
        boolean z2;
        final ArrayList arrayList;
        SQLitePreparedStatement sQLitePreparedStatement18;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        TLRPC$Message tLRPC$Message;
        int i4;
        SQLitePreparedStatement sQLitePreparedStatement21;
        ArrayList arrayList2;
        SQLiteCursor sQLiteCursor9;
        int i5;
        ArrayList arrayList3;
        long j5;
        HashMap hashMap;
        long j6;
        int i6;
        int i7;
        ArrayList arrayList4;
        TLRPC$Message tLRPC$Message2;
        ArrayList arrayList5;
        SQLitePreparedStatement sQLitePreparedStatement22;
        long j7;
        int i8;
        TLRPC$Message tLRPC$Message3;
        TLRPC$Message tLRPC$Message4;
        TLRPC$Message tLRPC$Message5;
        TLRPC$Document tLRPC$Document;
        TLRPC$Document tLRPC$Document2;
        boolean z3;
        NativeByteBuffer byteBufferValue;
        int i9;
        int i10;
        int min;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        int i11;
        HashMap hashMap2;
        TLRPC$Message tLRPC$Message6;
        ArrayList arrayList6;
        SQLitePreparedStatement sQLitePreparedStatement23;
        long j8;
        int i12;
        int i13;
        int i14;
        int i15;
        NativeByteBuffer nativeByteBuffer;
        int i16;
        NativeByteBuffer nativeByteBuffer2;
        ArrayList arrayList7;
        int i17;
        int i18;
        long j9;
        long j10;
        int i19;
        int i20;
        int i21;
        ArrayList<TLRPC$Message> arrayList8;
        SQLiteDatabase sQLiteDatabase3;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        long j11 = j;
        int i22 = i2;
        try {
            long clientUserId = getUserConfig().getClientUserId();
            boolean z4 = i == 1;
            ?? r1 = i == 5 ? 1 : 0;
            long j12 = 0;
            int i23 = 2;
            try {
                try {
                    if (r1 != 0) {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO quick_replies_messages VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                        int size = tLRPC$messages_Messages2.messages.size();
                        int i24 = 0;
                        while (i24 < size) {
                            TLRPC$Message tLRPC$Message7 = tLRPC$messages_Messages2.messages.get(i24);
                            if (!(tLRPC$Message7 instanceof TLRPC$TL_messageEmpty)) {
                                long quickReplyId = MessageObject.getQuickReplyId(this.currentAccount, tLRPC$Message7);
                                if (quickReplyId != j12) {
                                    SQLiteDatabase sQLiteDatabase4 = this.database;
                                    Locale locale = Locale.ENGLISH;
                                    Object[] objArr = new Object[i23];
                                    objArr[0] = Integer.valueOf(tLRPC$Message7.id);
                                    objArr[1] = Long.valueOf(quickReplyId);
                                    sQLiteDatabase4.executeFast(String.format(locale, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", objArr)).stepThis().dispose();
                                }
                                fixUnsupportedMedia(tLRPC$Message7);
                                MessageObject.normalizeFlags(tLRPC$Message7);
                                executeFast2.requery();
                                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message7.getObjectSize());
                                tLRPC$Message7.serializeToStream(nativeByteBuffer3);
                                executeFast2.bindInteger(1, tLRPC$Message7.id);
                                executeFast2.bindLong(2, quickReplyId);
                                executeFast2.bindInteger(3, tLRPC$Message7.send_state);
                                executeFast2.bindInteger(4, tLRPC$Message7.date);
                                executeFast2.bindByteBuffer(5, nativeByteBuffer3);
                                executeFast2.bindInteger(6, tLRPC$Message7.ttl);
                                executeFast2.step();
                                nativeByteBuffer3.reuse();
                            }
                            i24++;
                            j12 = 0;
                            i23 = 2;
                        }
                        executeFast2.dispose();
                        putUsersInternal(tLRPC$messages_Messages2.users);
                        putChatsInternal(tLRPC$messages_Messages2.chats);
                        this.database.commitTransaction();
                    } else if (z4) {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE uid = %d AND mid > 0", Long.valueOf(j))).stepThis().dispose();
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                        int size2 = tLRPC$messages_Messages2.messages.size();
                        for (int i25 = 0; i25 < size2; i25++) {
                            TLRPC$Message tLRPC$Message8 = tLRPC$messages_Messages2.messages.get(i25);
                            if (!(tLRPC$Message8 instanceof TLRPC$TL_messageEmpty)) {
                                fixUnsupportedMedia(tLRPC$Message8);
                                MessageObject.normalizeFlags(tLRPC$Message8);
                                executeFast3.requery();
                                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$Message8.getObjectSize());
                                tLRPC$Message8.serializeToStream(nativeByteBuffer4);
                                executeFast3.bindInteger(1, tLRPC$Message8.id);
                                executeFast3.bindLong(2, j11);
                                executeFast3.bindInteger(3, tLRPC$Message8.send_state);
                                executeFast3.bindInteger(4, tLRPC$Message8.date);
                                executeFast3.bindByteBuffer(5, nativeByteBuffer4);
                                executeFast3.bindInteger(6, tLRPC$Message8.ttl);
                                executeFast3.step();
                                nativeByteBuffer4.reuse();
                            }
                        }
                        executeFast3.dispose();
                        putUsersInternal(tLRPC$messages_Messages2.users);
                        putChatsInternal(tLRPC$messages_Messages2.chats);
                        this.database.commitTransaction();
                        broadcastScheduledMessagesChange(Long.valueOf(j));
                    } else {
                        String str = (j2 > 0L ? 1 : (j2 == 0L ? 0 : -1)) != 0 ? "messages_holes_topics" : "messages_holes";
                        if (tLRPC$messages_Messages2.messages.isEmpty()) {
                            if (i22 == 0) {
                                doneHolesInTable(str, j, i3, j2);
                                doneHolesInMedia(j, i3, -1, j2);
                            }
                            SQLiteDatabase sQLiteDatabase5 = this.database;
                            if (sQLiteDatabase5 != null) {
                                sQLiteDatabase5.commitTransaction();
                                return;
                            }
                            return;
                        }
                        this.database.beginTransaction();
                        if (i22 == 0) {
                            int i26 = tLRPC$messages_Messages2.messages.get(arrayList8.size() - 1).id;
                            j3 = clientUserId;
                            closeHolesInTable(str, j, i26, i3, j2);
                            closeHolesInMedia(j, i26, i3, -1, j2);
                        } else {
                            j3 = clientUserId;
                            if (i22 == 1) {
                                int i27 = tLRPC$messages_Messages2.messages.get(0).id;
                                closeHolesInTable(str, j, i3, i27, j2);
                                closeHolesInMedia(j, i3, i27, -1, j2);
                            } else {
                                int i28 = (i22 == 3 || i22 == 2) ? 4 : 4;
                                int i29 = (i3 != 0 || i22 == i28) ? tLRPC$messages_Messages2.messages.get(0).id : ConnectionsManager.DEFAULT_DATACENTER_ID;
                                ArrayList<TLRPC$Message> arrayList9 = tLRPC$messages_Messages2.messages;
                                int i30 = arrayList9.get(arrayList9.size() - 1).id;
                                closeHolesInTable(str, j, i30, i29, j2);
                                closeHolesInMedia(j, i30, i29, -1, j2);
                            }
                        }
                        int size3 = tLRPC$messages_Messages2.messages.size();
                        ArrayList<File> arrayList10 = new ArrayList<>();
                        ArrayList arrayList11 = new ArrayList();
                        ArrayList arrayList12 = new ArrayList();
                        long j13 = j3;
                        ArrayList arrayList13 = j11 == j13 ? new ArrayList() : null;
                        sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                        try {
                            SQLitePreparedStatement executeFast4 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                            try {
                                SQLitePreparedStatement executeFast5 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                try {
                                    SQLitePreparedStatement sQLitePreparedStatement24 = executeFast5;
                                    try {
                                        SQLitePreparedStatement executeFast6 = this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                                        if (j13 == j11) {
                                            try {
                                                ArrayList arrayList14 = new ArrayList();
                                                j4 = j13;
                                                for (int i31 = 0; i31 < size3; i31++) {
                                                    arrayList14.add(Integer.valueOf(tLRPC$messages_Messages2.messages.get(i31).id));
                                                }
                                                SQLiteDatabase sQLiteDatabase6 = this.database;
                                                StringBuilder sb = new StringBuilder();
                                                sQLitePreparedStatement15 = executeFast6;
                                                sb.append("DELETE FROM tag_message_id WHERE mid IN (");
                                                sb.append(TextUtils.join(",", arrayList14));
                                                sb.append(")");
                                                sQLiteDatabase6.executeFast(sb.toString()).stepThis().dispose();
                                                executeFast = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                            } catch (Exception e) {
                                                sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                exc = e;
                                                sQLitePreparedStatement7 = executeFast4;
                                                sQLitePreparedStatement9 = null;
                                                sQLiteCursor4 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLiteCursor2 = sQLiteCursor4;
                                                try {
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                } catch (Throwable th2) {
                                                    th = th2;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement10;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement9;
                                                    sQLiteCursor = sQLiteCursor2;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                        sQLiteDatabase.commitTransaction();
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                        sQLitePreparedStatement.dispose();
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                        sQLitePreparedStatement8.dispose();
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                        sQLitePreparedStatement7.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                        sQLitePreparedStatement6.dispose();
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                        sQLitePreparedStatement4.dispose();
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                        sQLitePreparedStatement5.dispose();
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                        sQLitePreparedStatement3.dispose();
                                                    }
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th3) {
                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                th = th3;
                                                sQLitePreparedStatement7 = executeFast4;
                                                sQLiteCursor3 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLiteCursor = sQLiteCursor3;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                throw th;
                                            }
                                        } else {
                                            j4 = j13;
                                            sQLitePreparedStatement15 = executeFast6;
                                            executeFast = null;
                                        }
                                        int i32 = 0;
                                        Long l = null;
                                        int i33 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        HashMap hashMap3 = null;
                                        long j14 = 0;
                                        Integer num = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement6 = null;
                                        int i34 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        ArrayList arrayList15 = null;
                                        while (i32 < size3) {
                                            int i35 = i33;
                                            try {
                                                tLRPC$Message = tLRPC$messages_Messages2.messages.get(i32);
                                            } catch (Exception e2) {
                                                e = e2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement20 = executeFast;
                                                sQLitePreparedStatement7 = executeFast4;
                                            } catch (Throwable th4) {
                                                th = th4;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement20 = executeFast;
                                                sQLitePreparedStatement7 = executeFast4;
                                            }
                                            try {
                                                try {
                                                    try {
                                                        if (num != null || tLRPC$Message == null) {
                                                            if (num != null) {
                                                                i4 = i32;
                                                                try {
                                                                    sQLitePreparedStatement21 = executeFast;
                                                                } catch (Exception e3) {
                                                                    e = e3;
                                                                    sQLitePreparedStatement21 = executeFast;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                    exc = e;
                                                                    sQLitePreparedStatement7 = executeFast4;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLiteCursor2 = null;
                                                                    checkSQLException(exc);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLiteCursor2 != null) {
                                                                    }
                                                                } catch (Throwable th5) {
                                                                    th = th5;
                                                                    sQLitePreparedStatement21 = executeFast;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                    th = th;
                                                                    sQLitePreparedStatement7 = executeFast4;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                    sQLiteCursor9 = null;
                                                                    sQLitePreparedStatement3 = null;
                                                                    sQLiteCursor = sQLiteCursor9;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } else {
                                                                i4 = i32;
                                                                sQLitePreparedStatement21 = executeFast;
                                                            }
                                                            arrayList2 = arrayList11;
                                                            Long l2 = l;
                                                            if (j14 == 0) {
                                                                j14 = tLRPC$Message.peer_id.channel_id;
                                                            }
                                                            if (i22 != -2) {
                                                                try {
                                                                    SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                    Locale locale2 = Locale.US;
                                                                    i5 = size3;
                                                                    Object[] objArr2 = new Object[2];
                                                                    sQLitePreparedStatement7 = executeFast4;
                                                                    try {
                                                                        objArr2[0] = Integer.valueOf(tLRPC$Message.id);
                                                                        objArr2[1] = Long.valueOf(MessageObject.getDialogId(tLRPC$Message));
                                                                        sQLiteCursor9 = sQLiteDatabase7.queryFinalized(String.format(locale2, "SELECT mid, data, ttl, mention, read_state, send_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d", objArr2), new Object[0]);
                                                                        try {
                                                                            boolean next = sQLiteCursor9.next();
                                                                            if (next) {
                                                                                NativeByteBuffer byteBufferValue2 = sQLiteCursor9.byteBufferValue(1);
                                                                                if (byteBufferValue2 != null) {
                                                                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                                                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                                                    byteBufferValue2.reuse();
                                                                                    if (arrayList13 != null) {
                                                                                        arrayList3 = arrayList13;
                                                                                        hashMap = hashMap3;
                                                                                        j6 = j4;
                                                                                        i6 = i34;
                                                                                        i7 = i35;
                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                                        tLRPC$Message3 = TLdeserialize;
                                                                                        arrayList4 = arrayList2;
                                                                                        try {
                                                                                            arrayList3.add(new SavedReactionsUpdate(j6, TLdeserialize, tLRPC$Message));
                                                                                        } catch (Exception e4) {
                                                                                            e = e4;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLiteCursor2 = sQLiteCursor9;
                                                                                            checkSQLException(exc);
                                                                                            sQLiteDatabase2 = this.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor2 != null) {
                                                                                            }
                                                                                        } catch (Throwable th6) {
                                                                                            th = th6;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                            sQLitePreparedStatement3 = null;
                                                                                            sQLiteCursor = sQLiteCursor9;
                                                                                            sQLiteDatabase = this.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        arrayList3 = arrayList13;
                                                                                        tLRPC$Message3 = TLdeserialize;
                                                                                        hashMap = hashMap3;
                                                                                        j6 = j4;
                                                                                        i6 = i34;
                                                                                        i7 = i35;
                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                                        arrayList4 = arrayList2;
                                                                                    }
                                                                                    if (sQLiteCursor9.intValue(5) != 3) {
                                                                                        if (MessageObject.getFileName(tLRPC$Message3).equals(MessageObject.getFileName(tLRPC$Message))) {
                                                                                            tLRPC$Message4 = tLRPC$Message3;
                                                                                            tLRPC$Message5 = tLRPC$Message;
                                                                                            tLRPC$Message5.attachPath = tLRPC$Message4.attachPath;
                                                                                        } else {
                                                                                            tLRPC$Message4 = tLRPC$Message3;
                                                                                            tLRPC$Message5 = tLRPC$Message;
                                                                                        }
                                                                                        tLRPC$Message5.ttl = sQLiteCursor9.intValue(2);
                                                                                    } else {
                                                                                        tLRPC$Message4 = tLRPC$Message3;
                                                                                        tLRPC$Message5 = tLRPC$Message;
                                                                                    }
                                                                                    TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message4.media;
                                                                                    if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto) {
                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message5.media;
                                                                                        if ((tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) && (r4 = tLRPC$MessageMedia2.photo) != null && (r3 = tLRPC$MessageMedia3.photo) != null) {
                                                                                        }
                                                                                    }
                                                                                    if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) {
                                                                                        TLRPC$MessageMedia tLRPC$MessageMedia4 = tLRPC$Message5.media;
                                                                                        if ((tLRPC$MessageMedia4 instanceof TLRPC$TL_messageMediaDocument) && (tLRPC$Document = tLRPC$MessageMedia2.document) != null && (tLRPC$Document2 = tLRPC$MessageMedia4.document) != null && tLRPC$Document.id == tLRPC$Document2.id) {
                                                                                            z3 = true;
                                                                                            if (z3) {
                                                                                                tLRPC$Message2 = tLRPC$Message5;
                                                                                                addFilesToDelete(tLRPC$Message4, arrayList10, arrayList12, arrayList4, false);
                                                                                            } else {
                                                                                                tLRPC$Message2 = tLRPC$Message5;
                                                                                            }
                                                                                            byteBufferValue = sQLiteCursor9.byteBufferValue(6);
                                                                                            MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue);
                                                                                            if (byteBufferValue != null) {
                                                                                                byteBufferValue.reuse();
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    z3 = false;
                                                                                    if (z3) {
                                                                                    }
                                                                                    byteBufferValue = sQLiteCursor9.byteBufferValue(6);
                                                                                    MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue);
                                                                                    if (byteBufferValue != null) {
                                                                                    }
                                                                                } else {
                                                                                    arrayList3 = arrayList13;
                                                                                    tLRPC$Message2 = tLRPC$Message;
                                                                                    hashMap = hashMap3;
                                                                                    j6 = j4;
                                                                                    i6 = i34;
                                                                                    i7 = i35;
                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                                    arrayList4 = arrayList2;
                                                                                }
                                                                                boolean z5 = sQLiteCursor9.intValue(3) != 0;
                                                                                int intValue = sQLiteCursor9.intValue(4);
                                                                                if (z5 != tLRPC$Message2.mentioned) {
                                                                                    if (i7 == Integer.MAX_VALUE) {
                                                                                        SQLiteDatabase sQLiteDatabase8 = this.database;
                                                                                        StringBuilder sb2 = new StringBuilder();
                                                                                        sb2.append("SELECT unread_count_i FROM dialogs WHERE did = ");
                                                                                        j5 = j;
                                                                                        sb2.append(j5);
                                                                                        SQLiteCursor queryFinalized = sQLiteDatabase8.queryFinalized(sb2.toString(), new Object[0]);
                                                                                        if (queryFinalized.next()) {
                                                                                            i7 = queryFinalized.intValue(0);
                                                                                        }
                                                                                        queryFinalized.dispose();
                                                                                    } else {
                                                                                        j5 = j;
                                                                                    }
                                                                                    i33 = i7;
                                                                                    if (z5) {
                                                                                        if (intValue <= 1) {
                                                                                            i33--;
                                                                                        }
                                                                                    } else if (tLRPC$Message2.media_unread) {
                                                                                        i33++;
                                                                                    }
                                                                                    sQLiteCursor9.dispose();
                                                                                    if (!next) {
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                                        arrayList5 = arrayList3;
                                                                                        i34 = i6;
                                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                                                        j7 = j5;
                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                                        i8 = i2;
                                                                                        executeFast = sQLitePreparedStatement20;
                                                                                        i32 = i4 + 1;
                                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                                                        j11 = j7;
                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                                                        l = l2;
                                                                                        arrayList11 = arrayList4;
                                                                                        size3 = i5;
                                                                                        executeFast4 = sQLitePreparedStatement7;
                                                                                        hashMap3 = hashMap;
                                                                                        j4 = j6;
                                                                                        i22 = i8;
                                                                                        arrayList13 = arrayList5;
                                                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                    }
                                                                                } else {
                                                                                    j5 = j;
                                                                                }
                                                                            } else {
                                                                                arrayList3 = arrayList13;
                                                                                j5 = j11;
                                                                                hashMap = hashMap3;
                                                                                j6 = j4;
                                                                                i6 = i34;
                                                                                i7 = i35;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                                arrayList4 = arrayList2;
                                                                                tLRPC$Message2 = tLRPC$Message;
                                                                            }
                                                                            i33 = i7;
                                                                            sQLiteCursor9.dispose();
                                                                            if (!next) {
                                                                            }
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                        } catch (Throwable th7) {
                                                                            th = th7;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                        }
                                                                    } catch (Exception e6) {
                                                                        e = e6;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                        exc = e;
                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                        sQLitePreparedStatement9 = null;
                                                                        sQLiteCursor2 = null;
                                                                        checkSQLException(exc);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 != null) {
                                                                        }
                                                                    } catch (Throwable th8) {
                                                                        th = th8;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                        th = th;
                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                        sQLiteCursor9 = null;
                                                                        sQLitePreparedStatement3 = null;
                                                                        sQLiteCursor = sQLiteCursor9;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e7) {
                                                                    e = e7;
                                                                    sQLitePreparedStatement7 = executeFast4;
                                                                } catch (Throwable th9) {
                                                                    th = th9;
                                                                    sQLitePreparedStatement7 = executeFast4;
                                                                }
                                                            } else {
                                                                arrayList3 = arrayList13;
                                                                i5 = size3;
                                                                j5 = j11;
                                                                hashMap = hashMap3;
                                                                sQLitePreparedStatement7 = executeFast4;
                                                                j6 = j4;
                                                                i6 = i34;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                                arrayList4 = arrayList2;
                                                                tLRPC$Message2 = tLRPC$Message;
                                                                i33 = i35;
                                                            }
                                                            if (i4 != 0 && z) {
                                                                try {
                                                                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = " + j5, new Object[0]);
                                                                    try {
                                                                        boolean next2 = queryFinalized2.next();
                                                                        if (next2) {
                                                                            i19 = queryFinalized2.intValue(0);
                                                                            i20 = queryFinalized2.intValue(1);
                                                                            i21 = queryFinalized2.intValue(2);
                                                                        } else {
                                                                            i19 = 0;
                                                                            i20 = 0;
                                                                            i21 = 0;
                                                                        }
                                                                        queryFinalized2.dispose();
                                                                        if (next2) {
                                                                            sQLitePreparedStatement9 = this.database.executeFast("UPDATE dialogs SET date = ?, last_mid = ?, last_mid_group = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?");
                                                                            try {
                                                                                sQLitePreparedStatement9.bindInteger(1, tLRPC$Message2.date);
                                                                                sQLitePreparedStatement9.bindInteger(2, tLRPC$Message2.id);
                                                                                if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                    sQLitePreparedStatement9.bindLong(3, tLRPC$Message2.grouped_id);
                                                                                } else {
                                                                                    sQLitePreparedStatement9.bindNull(3);
                                                                                }
                                                                                sQLitePreparedStatement9.bindInteger(4, tLRPC$Message2.id);
                                                                                sQLitePreparedStatement9.bindInteger(5, tLRPC$Message2.id);
                                                                                sQLitePreparedStatement9.bindInteger(6, tLRPC$messages_Messages.pts);
                                                                                sQLitePreparedStatement9.bindInteger(7, tLRPC$Message2.date);
                                                                                sQLitePreparedStatement9.bindLong(8, j5);
                                                                            } catch (Exception e8) {
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                                exc = e8;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                sQLiteCursor2 = null;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLiteCursor2 != null) {
                                                                                }
                                                                            } catch (Throwable th10) {
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                                th = th10;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement9;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                sQLiteCursor = null;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            sQLitePreparedStatement9 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                            sQLitePreparedStatement9.bindLong(1, j5);
                                                                            sQLitePreparedStatement9.bindInteger(2, tLRPC$Message2.date);
                                                                            sQLitePreparedStatement9.bindInteger(3, 0);
                                                                            sQLitePreparedStatement9.bindInteger(4, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement9.bindInteger(5, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement9.bindInteger(6, 0);
                                                                            sQLitePreparedStatement9.bindInteger(7, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement9.bindInteger(8, i20);
                                                                            sQLitePreparedStatement9.bindInteger(9, tLRPC$messages_Messages.pts);
                                                                            sQLitePreparedStatement9.bindInteger(10, tLRPC$Message2.date);
                                                                            sQLitePreparedStatement9.bindInteger(11, i19);
                                                                            sQLitePreparedStatement9.bindInteger(12, i21);
                                                                            sQLitePreparedStatement9.bindInteger(13, -1);
                                                                            sQLitePreparedStatement9.bindNull(14);
                                                                            sQLitePreparedStatement9.bindInteger(15, 0);
                                                                            if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                sQLitePreparedStatement9.bindLong(16, tLRPC$Message2.grouped_id);
                                                                            } else {
                                                                                sQLitePreparedStatement9.bindNull(16);
                                                                            }
                                                                            sQLitePreparedStatement9.bindInteger(17, 0);
                                                                            this.unknownDialogsIds.put(j5, Boolean.TRUE);
                                                                        }
                                                                        sQLitePreparedStatement9.step();
                                                                        sQLitePreparedStatement9.dispose();
                                                                    } catch (Exception e9) {
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                        exc = e9;
                                                                        sQLiteCursor9 = queryFinalized2;
                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                        sQLitePreparedStatement9 = null;
                                                                        sQLiteCursor2 = sQLiteCursor9;
                                                                        checkSQLException(exc);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 != null) {
                                                                        }
                                                                    } catch (Throwable th11) {
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                        th = th11;
                                                                        sQLiteCursor9 = queryFinalized2;
                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                        sQLitePreparedStatement3 = null;
                                                                        sQLiteCursor = sQLiteCursor9;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e10) {
                                                                    e = e10;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                    exc = e;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLiteCursor2 = null;
                                                                    checkSQLException(exc);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLiteCursor2 != null) {
                                                                    }
                                                                } catch (Throwable th12) {
                                                                    th = th12;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                    th = th;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                    sQLiteCursor9 = null;
                                                                    sQLitePreparedStatement3 = null;
                                                                    sQLiteCursor = sQLiteCursor9;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            }
                                                            fixUnsupportedMedia(tLRPC$Message2);
                                                            MessageObject.normalizeFlags(tLRPC$Message2);
                                                            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                            tLRPC$Message2.serializeToStream(nativeByteBuffer5);
                                                            i9 = 0;
                                                            i10 = 2;
                                                            while (i9 < i10) {
                                                                boolean z6 = i9 == 1;
                                                                try {
                                                                    if (z6) {
                                                                        arrayList6 = arrayList3;
                                                                        if (j2 == 0) {
                                                                            j10 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                                            j9 = 0;
                                                                        } else {
                                                                            j9 = 0;
                                                                            j10 = j2;
                                                                        }
                                                                        if (j10 == j9) {
                                                                            i12 = i33;
                                                                            arrayList7 = arrayList6;
                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                            i9++;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                            i33 = i12;
                                                                            arrayList3 = arrayList7;
                                                                            i10 = 2;
                                                                            j5 = j;
                                                                        } else {
                                                                            long j15 = j10;
                                                                            long j16 = j6;
                                                                            if (j5 == j16 && MessageObject.getSavedDialogId(j16, tLRPC$Message2) != j9) {
                                                                                ArrayList arrayList16 = arrayList15 == null ? new ArrayList() : arrayList15;
                                                                                arrayList16.add(tLRPC$Message2);
                                                                                arrayList15 = arrayList16;
                                                                            }
                                                                            j6 = j16;
                                                                            sQLitePreparedStatement23 = sQLitePreparedStatement;
                                                                            j8 = j15;
                                                                        }
                                                                    } else {
                                                                        arrayList6 = arrayList3;
                                                                        j6 = j6;
                                                                        sQLitePreparedStatement23 = sQLitePreparedStatement7;
                                                                        j8 = j2;
                                                                    }
                                                                    sQLitePreparedStatement23.requery();
                                                                    i12 = i33;
                                                                    sQLitePreparedStatement23.bindInteger(1, tLRPC$Message2.id);
                                                                    sQLitePreparedStatement23.bindLong(2, j5);
                                                                    if (z6) {
                                                                        sQLitePreparedStatement23.bindLong(3, j8);
                                                                        i13 = 4;
                                                                    } else {
                                                                        i13 = 3;
                                                                    }
                                                                    int i36 = i13 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i13, MessageObject.getUnreadFlags(tLRPC$Message2));
                                                                    int i37 = i36 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i36, tLRPC$Message2.send_state);
                                                                    int i38 = i37 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i37, tLRPC$Message2.date);
                                                                    int i39 = i38 + 1;
                                                                    sQLitePreparedStatement23.bindByteBuffer(i38, nativeByteBuffer5);
                                                                    int i40 = i39 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i39, (MessageObject.isOut(tLRPC$Message2) || tLRPC$Message2.from_scheduled) ? 1 : 0);
                                                                    int i41 = i40 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i40, tLRPC$Message2.ttl);
                                                                    if ((tLRPC$Message2.flags & 1024) != 0) {
                                                                        i14 = i41 + 1;
                                                                        sQLitePreparedStatement23.bindInteger(i41, tLRPC$Message2.views);
                                                                    } else {
                                                                        i14 = i41 + 1;
                                                                        sQLitePreparedStatement23.bindInteger(i41, getMessageMediaType(tLRPC$Message2));
                                                                    }
                                                                    if (tLRPC$Message2.replyStory != null) {
                                                                        nativeByteBuffer = new NativeByteBuffer(tLRPC$Message2.replyStory.getObjectSize());
                                                                        tLRPC$Message2.replyStory.serializeToStream(nativeByteBuffer);
                                                                        i15 = i14 + 1;
                                                                        sQLitePreparedStatement23.bindByteBuffer(i14, nativeByteBuffer);
                                                                    } else {
                                                                        i15 = i14 + 1;
                                                                        sQLitePreparedStatement23.bindNull(i14);
                                                                        nativeByteBuffer = null;
                                                                    }
                                                                    int i42 = tLRPC$Message2.stickerVerified;
                                                                    int i43 = i15 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i15, i42 == 0 ? 1 : i42 == 2 ? 2 : 0);
                                                                    int i44 = i43 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i43, tLRPC$Message2.mentioned ? 1 : 0);
                                                                    int i45 = i44 + 1;
                                                                    sQLitePreparedStatement23.bindInteger(i44, tLRPC$Message2.forwards);
                                                                    if (tLRPC$Message2.replies != null) {
                                                                        nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message2.replies.getObjectSize());
                                                                        tLRPC$Message2.replies.serializeToStream(nativeByteBuffer2);
                                                                        i16 = i45 + 1;
                                                                        sQLitePreparedStatement23.bindByteBuffer(i45, nativeByteBuffer2);
                                                                    } else {
                                                                        i16 = i45 + 1;
                                                                        sQLitePreparedStatement23.bindNull(i45);
                                                                        nativeByteBuffer2 = null;
                                                                    }
                                                                    TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message2.reply_to;
                                                                    if (tLRPC$MessageReplyHeader != null) {
                                                                        i17 = i16 + 1;
                                                                        arrayList7 = arrayList6;
                                                                        int i46 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                        if (i46 == 0) {
                                                                            i46 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                        }
                                                                        sQLitePreparedStatement23.bindInteger(i16, i46);
                                                                    } else {
                                                                        arrayList7 = arrayList6;
                                                                        i17 = i16 + 1;
                                                                        sQLitePreparedStatement23.bindInteger(i16, 0);
                                                                    }
                                                                    int i47 = i17;
                                                                    int i48 = i47 + 1;
                                                                    sQLitePreparedStatement23.bindLong(i47, MessageObject.getChannelId(tLRPC$Message2));
                                                                    NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message2);
                                                                    if (writeLocalParams == null) {
                                                                        i18 = i48 + 1;
                                                                        sQLitePreparedStatement23.bindNull(i48);
                                                                    } else {
                                                                        i18 = i48 + 1;
                                                                        sQLitePreparedStatement23.bindByteBuffer(i48, writeLocalParams);
                                                                    }
                                                                    if (!z6) {
                                                                        if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                            sQLitePreparedStatement23.bindLong(i18, tLRPC$Message2.grouped_id);
                                                                            i18++;
                                                                        } else {
                                                                            int i49 = i18 + 1;
                                                                            sQLitePreparedStatement23.bindNull(i18);
                                                                            i18 = i49;
                                                                        }
                                                                    }
                                                                    TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message2.reply_to;
                                                                    if (tLRPC$MessageReplyHeader2 != null) {
                                                                        sQLitePreparedStatement23.bindInteger(i18, tLRPC$MessageReplyHeader2.story_id);
                                                                    } else {
                                                                        sQLitePreparedStatement23.bindInteger(i18, 0);
                                                                    }
                                                                    sQLitePreparedStatement23.step();
                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                    if (i9 == 0 && sQLitePreparedStatement20 != null) {
                                                                        try {
                                                                            try {
                                                                                bindMessageTags(sQLitePreparedStatement20, tLRPC$Message2);
                                                                            } catch (Exception e11) {
                                                                                e = e11;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLiteCursor6 = null;
                                                                                exc = e;
                                                                                sQLiteCursor2 = sQLiteCursor6;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                    sQLiteDatabase2.commitTransaction();
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                    sQLitePreparedStatement.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                    sQLitePreparedStatement8.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                    sQLitePreparedStatement7.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                    sQLitePreparedStatement10.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                    sQLitePreparedStatement6.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                    sQLitePreparedStatement4.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                    sQLitePreparedStatement5.dispose();
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                    sQLitePreparedStatement9.dispose();
                                                                                }
                                                                                if (sQLiteCursor2 != null) {
                                                                                    sQLiteCursor2.dispose();
                                                                                    return;
                                                                                }
                                                                                return;
                                                                            }
                                                                        } catch (Throwable th13) {
                                                                            th = th13;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement;
                                                                            sQLiteCursor5 = null;
                                                                            sQLitePreparedStatement3 = null;
                                                                            th = th;
                                                                            sQLiteCursor = sQLiteCursor5;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    }
                                                                    if (nativeByteBuffer2 != null) {
                                                                        nativeByteBuffer2.reuse();
                                                                    }
                                                                    if (writeLocalParams != null) {
                                                                        writeLocalParams.reuse();
                                                                    }
                                                                    if (nativeByteBuffer != null) {
                                                                        nativeByteBuffer.reuse();
                                                                    }
                                                                    i9++;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                    i33 = i12;
                                                                    arrayList3 = arrayList7;
                                                                    i10 = 2;
                                                                    j5 = j;
                                                                } catch (Exception e12) {
                                                                    e = e12;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                                } catch (Throwable th14) {
                                                                    th = th14;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                    sQLiteCursor5 = null;
                                                                    sQLitePreparedStatement3 = null;
                                                                    th = th;
                                                                    sQLiteCursor = sQLiteCursor5;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            }
                                                            int i50 = i33;
                                                            ArrayList arrayList17 = arrayList3;
                                                            sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                            if (j2 == 0) {
                                                                i8 = i2;
                                                                arrayList5 = arrayList17;
                                                                if (i8 != -2) {
                                                                    j7 = j;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                    long topicId = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                                    if (j2 == 0) {
                                                                        if (i8 == -2 && topicId != 0) {
                                                                        }
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                                        nativeByteBuffer5.reuse();
                                                                        if (tLRPC$Message2.ttl_period != 0) {
                                                                            try {
                                                                                try {
                                                                                    if (tLRPC$Message2.id > 0) {
                                                                                        SQLitePreparedStatement executeFast7 = sQLitePreparedStatement5 == null ? this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)") : sQLitePreparedStatement5;
                                                                                        try {
                                                                                            executeFast7.requery();
                                                                                            executeFast7.bindInteger(1, tLRPC$Message2.id);
                                                                                            executeFast7.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                            executeFast7.bindInteger(3, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                            executeFast7.bindInteger(4, 0);
                                                                                            executeFast7.step();
                                                                                            sQLitePreparedStatement5 = executeFast7;
                                                                                            min = Math.min(i6, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                            tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                                i11 = min;
                                                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                    SQLitePreparedStatement executeFast8 = sQLitePreparedStatement4 == null ? this.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)") : sQLitePreparedStatement4;
                                                                                                    try {
                                                                                                        executeFast8.requery();
                                                                                                        executeFast8.bindLong(1, tLRPC$Message2.media.webpage.id);
                                                                                                        executeFast8.bindInteger(2, tLRPC$Message2.id);
                                                                                                        executeFast8.bindLong(3, tLRPC$Message2.dialog_id);
                                                                                                        executeFast8.step();
                                                                                                        sQLitePreparedStatement4 = executeFast8;
                                                                                                    } catch (Exception e13) {
                                                                                                        e = e13;
                                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement4 = executeFast8;
                                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLiteCursor6 = null;
                                                                                                        exc = e;
                                                                                                        sQLiteCursor2 = sQLiteCursor6;
                                                                                                        checkSQLException(exc);
                                                                                                        sQLiteDatabase2 = this.database;
                                                                                                        if (sQLiteDatabase2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor2 != null) {
                                                                                                        }
                                                                                                    } catch (Throwable th15) {
                                                                                                        th = th15;
                                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement4 = executeFast8;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                                        sQLiteCursor5 = null;
                                                                                                        sQLitePreparedStatement3 = null;
                                                                                                        th = th;
                                                                                                        sQLiteCursor = sQLiteCursor5;
                                                                                                        sQLiteDatabase = this.database;
                                                                                                        if (sQLiteDatabase != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                }
                                                                                            } else {
                                                                                                SQLitePreparedStatement executeFast9 = sQLitePreparedStatement6 == null ? this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)") : sQLitePreparedStatement6;
                                                                                                try {
                                                                                                    executeFast9.requery();
                                                                                                    executeFast9.bindInteger(1, tLRPC$Message2.id);
                                                                                                    i11 = min;
                                                                                                    executeFast9.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                                    executeFast9.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message2.media).poll.id);
                                                                                                    executeFast9.step();
                                                                                                    sQLitePreparedStatement6 = executeFast9;
                                                                                                } catch (Exception e14) {
                                                                                                    e = e14;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement6 = executeFast9;
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLiteCursor6 = null;
                                                                                                    exc = e;
                                                                                                    sQLiteCursor2 = sQLiteCursor6;
                                                                                                    checkSQLException(exc);
                                                                                                    sQLiteDatabase2 = this.database;
                                                                                                    if (sQLiteDatabase2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor2 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th16) {
                                                                                                    th = th16;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement6 = executeFast9;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                                    sQLiteCursor5 = null;
                                                                                                    sQLitePreparedStatement3 = null;
                                                                                                    th = th;
                                                                                                    sQLiteCursor = sQLiteCursor5;
                                                                                                    sQLiteDatabase = this.database;
                                                                                                    if (sQLiteDatabase != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                            if (i8 == 0 || !isValidKeyboardToSave(tLRPC$Message2)) {
                                                                                                hashMap2 = hashMap;
                                                                                            } else {
                                                                                                TopicKey of = TopicKey.of(j7, MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(j7)));
                                                                                                if (hashMap == null) {
                                                                                                    hashMap2 = hashMap;
                                                                                                    tLRPC$Message6 = null;
                                                                                                } else {
                                                                                                    hashMap2 = hashMap;
                                                                                                    tLRPC$Message6 = (TLRPC$Message) hashMap2.get(of);
                                                                                                }
                                                                                                if (tLRPC$Message6 == null || tLRPC$Message6.id < tLRPC$Message2.id) {
                                                                                                    if (hashMap2 == null) {
                                                                                                        hashMap2 = new HashMap();
                                                                                                    }
                                                                                                    hashMap2.put(of, tLRPC$Message2);
                                                                                                }
                                                                                            }
                                                                                            i34 = i11;
                                                                                            hashMap = hashMap2;
                                                                                            i33 = i50;
                                                                                            executeFast = sQLitePreparedStatement20;
                                                                                            i32 = i4 + 1;
                                                                                            sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                                                            j11 = j7;
                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                                                            l = l2;
                                                                                            arrayList11 = arrayList4;
                                                                                            size3 = i5;
                                                                                            executeFast4 = sQLitePreparedStatement7;
                                                                                            hashMap3 = hashMap;
                                                                                            j4 = j6;
                                                                                            i22 = i8;
                                                                                            arrayList13 = arrayList5;
                                                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                        } catch (Exception e15) {
                                                                                            e = e15;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement5 = executeFast7;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLiteCursor6 = null;
                                                                                            exc = e;
                                                                                            sQLiteCursor2 = sQLiteCursor6;
                                                                                            checkSQLException(exc);
                                                                                            sQLiteDatabase2 = this.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor2 != null) {
                                                                                            }
                                                                                        } catch (Throwable th17) {
                                                                                            th = th17;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                            sQLitePreparedStatement5 = executeFast7;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                            sQLiteCursor5 = null;
                                                                                            sQLitePreparedStatement3 = null;
                                                                                            th = th;
                                                                                            sQLiteCursor = sQLiteCursor5;
                                                                                            sQLiteDatabase = this.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                } catch (Exception e16) {
                                                                                    e = e16;
                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                                                    sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLiteCursor6 = null;
                                                                                    exc = e;
                                                                                    sQLiteCursor2 = sQLiteCursor6;
                                                                                    checkSQLException(exc);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor2 != null) {
                                                                                    }
                                                                                }
                                                                            } catch (Throwable th18) {
                                                                                th = th18;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                                                sQLiteCursor5 = null;
                                                                                sQLitePreparedStatement3 = null;
                                                                                th = th;
                                                                                sQLiteCursor = sQLiteCursor5;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        min = i6;
                                                                        tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                        }
                                                                        if (i8 == 0) {
                                                                        }
                                                                        hashMap2 = hashMap;
                                                                        i34 = i11;
                                                                        hashMap = hashMap2;
                                                                        i33 = i50;
                                                                        executeFast = sQLitePreparedStatement20;
                                                                        i32 = i4 + 1;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                                        j11 = j7;
                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                                        l = l2;
                                                                        arrayList11 = arrayList4;
                                                                        size3 = i5;
                                                                        executeFast4 = sQLitePreparedStatement7;
                                                                        hashMap3 = hashMap;
                                                                        j4 = j6;
                                                                        i22 = i8;
                                                                        arrayList13 = arrayList5;
                                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                    }
                                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                        sQLitePreparedStatement15.requery();
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                                        sQLitePreparedStatement22.bindInteger(1, tLRPC$Message2.id);
                                                                        sQLitePreparedStatement22.bindLong(2, j7);
                                                                        if (j2 != 0) {
                                                                            topicId = j2;
                                                                        }
                                                                        sQLitePreparedStatement22.bindLong(3, topicId);
                                                                        sQLitePreparedStatement22.bindInteger(4, tLRPC$Message2.date);
                                                                        sQLitePreparedStatement22.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message2));
                                                                        sQLitePreparedStatement22.bindByteBuffer(6, nativeByteBuffer5);
                                                                        sQLitePreparedStatement22.step();
                                                                        nativeByteBuffer5.reuse();
                                                                        if (tLRPC$Message2.ttl_period != 0) {
                                                                        }
                                                                        min = i6;
                                                                        tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                        }
                                                                        if (i8 == 0) {
                                                                        }
                                                                        hashMap2 = hashMap;
                                                                        i34 = i11;
                                                                        hashMap = hashMap2;
                                                                        i33 = i50;
                                                                        executeFast = sQLitePreparedStatement20;
                                                                        i32 = i4 + 1;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                                        j11 = j7;
                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                                        l = l2;
                                                                        arrayList11 = arrayList4;
                                                                        size3 = i5;
                                                                        executeFast4 = sQLitePreparedStatement7;
                                                                        hashMap3 = hashMap;
                                                                        j4 = j6;
                                                                        i22 = i8;
                                                                        arrayList13 = arrayList5;
                                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                    }
                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                                    nativeByteBuffer5.reuse();
                                                                    if (tLRPC$Message2.ttl_period != 0) {
                                                                    }
                                                                    min = i6;
                                                                    tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                    }
                                                                    if (i8 == 0) {
                                                                    }
                                                                    hashMap2 = hashMap;
                                                                    i34 = i11;
                                                                    hashMap = hashMap2;
                                                                    i33 = i50;
                                                                    executeFast = sQLitePreparedStatement20;
                                                                    i32 = i4 + 1;
                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                                    j11 = j7;
                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                                    l = l2;
                                                                    arrayList11 = arrayList4;
                                                                    size3 = i5;
                                                                    executeFast4 = sQLitePreparedStatement7;
                                                                    hashMap3 = hashMap;
                                                                    j4 = j6;
                                                                    i22 = i8;
                                                                    arrayList13 = arrayList5;
                                                                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                }
                                                            } else {
                                                                i8 = i2;
                                                                arrayList5 = arrayList17;
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                j7 = j;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                if ((tLRPC$Message2 instanceof TLRPC$TL_messageService) && (tLRPC$Message2.action instanceof TLRPC$TL_messageActionHistoryClear)) {
                                                                    try {
                                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(tLRPC$Message2.id), Long.valueOf(j))).stepThis().dispose();
                                                                        this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j7).stepThis().dispose();
                                                                    } catch (Exception e17) {
                                                                        checkSQLException(e17);
                                                                    }
                                                                }
                                                            } else {
                                                                sQLitePreparedStatement24.requery();
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                                sQLitePreparedStatement2.bindInteger(1, tLRPC$Message2.id);
                                                                j7 = j;
                                                                sQLitePreparedStatement2.bindLong(2, j7);
                                                                sQLitePreparedStatement2.bindInteger(3, tLRPC$Message2.date);
                                                                sQLitePreparedStatement2.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message2));
                                                                sQLitePreparedStatement2.bindByteBuffer(5, nativeByteBuffer5);
                                                                sQLitePreparedStatement2.step();
                                                            }
                                                            long topicId2 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                            if (j2 == 0) {
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                            }
                                                            sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                            nativeByteBuffer5.reuse();
                                                            if (tLRPC$Message2.ttl_period != 0) {
                                                            }
                                                            min = i6;
                                                            tLRPC$MessageMedia = tLRPC$Message2.media;
                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                            }
                                                            if (i8 == 0) {
                                                            }
                                                            hashMap2 = hashMap;
                                                            i34 = i11;
                                                            hashMap = hashMap2;
                                                            i33 = i50;
                                                            executeFast = sQLitePreparedStatement20;
                                                            i32 = i4 + 1;
                                                            sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                            j11 = j7;
                                                            sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                            l = l2;
                                                            arrayList11 = arrayList4;
                                                            size3 = i5;
                                                            executeFast4 = sQLitePreparedStatement7;
                                                            hashMap3 = hashMap;
                                                            j4 = j6;
                                                            i22 = i8;
                                                            arrayList13 = arrayList5;
                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                        } else {
                                                            i4 = i32;
                                                            sQLitePreparedStatement21 = executeFast;
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                        }
                                                        long topicId22 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                        if (j2 == 0) {
                                                        }
                                                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                        }
                                                        sQLitePreparedStatement22 = sQLitePreparedStatement15;
                                                        nativeByteBuffer5.reuse();
                                                        if (tLRPC$Message2.ttl_period != 0) {
                                                        }
                                                        min = i6;
                                                        tLRPC$MessageMedia = tLRPC$Message2.media;
                                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                        }
                                                        if (i8 == 0) {
                                                        }
                                                        hashMap2 = hashMap;
                                                        i34 = i11;
                                                        hashMap = hashMap2;
                                                        i33 = i50;
                                                        executeFast = sQLitePreparedStatement20;
                                                        i32 = i4 + 1;
                                                        sQLitePreparedStatement24 = sQLitePreparedStatement2;
                                                        j11 = j7;
                                                        sQLitePreparedStatement15 = sQLitePreparedStatement22;
                                                        l = l2;
                                                        arrayList11 = arrayList4;
                                                        size3 = i5;
                                                        executeFast4 = sQLitePreparedStatement7;
                                                        hashMap3 = hashMap;
                                                        j4 = j6;
                                                        i22 = i8;
                                                        arrayList13 = arrayList5;
                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                    } catch (Exception e18) {
                                                        e = e18;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement = sQLitePreparedStatement;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLiteCursor6 = null;
                                                        exc = e;
                                                        sQLiteCursor2 = sQLiteCursor6;
                                                        checkSQLException(exc);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLiteCursor2 != null) {
                                                        }
                                                    }
                                                    fixUnsupportedMedia(tLRPC$Message2);
                                                    MessageObject.normalizeFlags(tLRPC$Message2);
                                                    NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                    tLRPC$Message2.serializeToStream(nativeByteBuffer52);
                                                    i9 = 0;
                                                    i10 = 2;
                                                    while (i9 < i10) {
                                                    }
                                                    int i502 = i33;
                                                    ArrayList arrayList172 = arrayList3;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                    if (j2 == 0) {
                                                    }
                                                } catch (Exception e19) {
                                                    e = e19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                } catch (Throwable th19) {
                                                    th = th19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                }
                                                Integer valueOf = Integer.valueOf(tLRPC$Message.id);
                                                if ((tLRPC$Message.flags & 131072) != 0) {
                                                    arrayList2 = arrayList11;
                                                    l = Long.valueOf(tLRPC$Message.grouped_id);
                                                } else {
                                                    arrayList2 = arrayList11;
                                                    l = null;
                                                }
                                                num = valueOf;
                                                Long l22 = l;
                                                if (j14 == 0) {
                                                }
                                                if (i22 != -2) {
                                                }
                                                if (i4 != 0) {
                                                }
                                            } catch (Exception e20) {
                                                e = e20;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement24;
                                                exc = e;
                                                sQLitePreparedStatement7 = executeFast4;
                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                sQLitePreparedStatement9 = null;
                                                sQLiteCursor2 = null;
                                                checkSQLException(exc);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLiteCursor2 != null) {
                                                }
                                            } catch (Throwable th20) {
                                                th = th20;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                                th = th;
                                                sQLitePreparedStatement7 = executeFast4;
                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                                sQLiteCursor9 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLiteCursor = sQLiteCursor9;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        ArrayList arrayList18 = arrayList13;
                                        SQLitePreparedStatement sQLitePreparedStatement25 = executeFast;
                                        final ArrayList arrayList19 = arrayList11;
                                        long j17 = j11;
                                        sQLitePreparedStatement7 = executeFast4;
                                        int i51 = i34;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                        HashMap hashMap4 = hashMap3;
                                        int i52 = i33;
                                        try {
                                            sQLitePreparedStatement7.dispose();
                                            try {
                                                sQLitePreparedStatement.dispose();
                                                if (sQLitePreparedStatement25 != null) {
                                                    try {
                                                        sQLitePreparedStatement25.dispose();
                                                        sQLitePreparedStatement16 = null;
                                                    } catch (Exception e21) {
                                                        e = e21;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                                        sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLiteCursor6 = null;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement7 = null;
                                                        exc = e;
                                                        sQLiteCursor2 = sQLiteCursor6;
                                                        checkSQLException(exc);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLiteCursor2 != null) {
                                                        }
                                                    } catch (Throwable th21) {
                                                        th = th21;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                                        sQLiteCursor5 = null;
                                                        sQLitePreparedStatement = null;
                                                        sQLitePreparedStatement3 = null;
                                                        sQLitePreparedStatement7 = null;
                                                        th = th;
                                                        sQLiteCursor = sQLiteCursor5;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } else {
                                                    sQLitePreparedStatement16 = sQLitePreparedStatement25;
                                                }
                                                try {
                                                    sQLitePreparedStatement2.dispose();
                                                    if (sQLitePreparedStatement4 != null) {
                                                        try {
                                                            sQLitePreparedStatement4.dispose();
                                                            sQLitePreparedStatement4 = null;
                                                        } catch (Exception e22) {
                                                            exc = e22;
                                                            sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                            sQLitePreparedStatement9 = null;
                                                            sQLiteCursor2 = null;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement10 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            checkSQLException(exc);
                                                            sQLiteDatabase2 = this.database;
                                                            if (sQLiteDatabase2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                        } catch (Throwable th22) {
                                                            th = th22;
                                                            sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                            sQLitePreparedStatement2 = null;
                                                            sQLiteCursor = null;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement3 = null;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLiteDatabase = this.database;
                                                            if (sQLiteDatabase != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                        sQLitePreparedStatement5.dispose();
                                                        getMessagesController().didAddedNewTask(i51, 0L, null);
                                                        sQLitePreparedStatement5 = null;
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                        sQLitePreparedStatement6.dispose();
                                                        sQLitePreparedStatement6 = null;
                                                    }
                                                    if (hashMap4 != null) {
                                                        for (TopicKey topicKey : hashMap4.keySet()) {
                                                            getMediaDataController().putBotKeyboard(topicKey, (TLRPC$Message) hashMap4.get(topicKey));
                                                        }
                                                    }
                                                    try {
                                                        deleteFromDownloadQueue(arrayList12, false);
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda157
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$putMessages$216(arrayList19);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList10, 0);
                                                        putUsersInternal(tLRPC$messages_Messages.users);
                                                        putChatsInternal(tLRPC$messages_Messages.chats);
                                                        if (i52 != Integer.MAX_VALUE) {
                                                            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i52), Long.valueOf(j))).stepThis().dispose();
                                                            LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                                                            longSparseIntArray.put(j17, i52);
                                                            sQLitePreparedStatement = null;
                                                            try {
                                                                getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                                                            } catch (Exception e23) {
                                                                e = e23;
                                                                exc = e;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement;
                                                                SQLitePreparedStatement sQLitePreparedStatement26 = sQLitePreparedStatement9;
                                                                sQLitePreparedStatement10 = sQLitePreparedStatement26;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement10;
                                                                sQLiteCursor2 = sQLitePreparedStatement26;
                                                                checkSQLException(exc);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLiteCursor2 != null) {
                                                                }
                                                            } catch (Throwable th23) {
                                                                th = th23;
                                                                th = th;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                sQLitePreparedStatement17 = sQLitePreparedStatement2;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement17;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                                sQLiteCursor = sQLitePreparedStatement17;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } else {
                                                            sQLitePreparedStatement = null;
                                                        }
                                                        if (num != null) {
                                                            SQLiteDatabase sQLiteDatabase9 = this.database;
                                                            Locale locale3 = Locale.US;
                                                            Object[] objArr3 = new Object[3];
                                                            objArr3[0] = l == null ? "NULL" : l + "";
                                                            objArr3[1] = Long.valueOf(j);
                                                            objArr3[2] = num;
                                                            sQLiteDatabase9.executeFast(String.format(locale3, "UPDATE dialogs SET last_mid_group = %s WHERE did = %d AND last_mid <= %d", objArr3)).stepThis().dispose();
                                                            z2 = true;
                                                        } else {
                                                            z2 = false;
                                                        }
                                                        this.database.commitTransaction();
                                                        if (!z) {
                                                            if (z2) {
                                                            }
                                                            arrayList = arrayList15;
                                                            if (arrayList != null) {
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda162
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesStorage.this.lambda$putMessages$217(arrayList);
                                                                    }
                                                                });
                                                            }
                                                            onReactionsUpdate(arrayList18);
                                                            sQLitePreparedStatement18 = sQLitePreparedStatement16;
                                                            sQLitePreparedStatement19 = sQLitePreparedStatement6;
                                                            sQLiteDatabase3 = this.database;
                                                            if (sQLiteDatabase3 != null) {
                                                                sQLiteDatabase3.commitTransaction();
                                                            }
                                                            if (sQLitePreparedStatement18 != null) {
                                                                sQLitePreparedStatement18.dispose();
                                                            }
                                                            if (sQLitePreparedStatement19 != null) {
                                                                sQLitePreparedStatement19.dispose();
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                                sQLitePreparedStatement4.dispose();
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                                sQLitePreparedStatement5.dispose();
                                                                return;
                                                            }
                                                            return;
                                                        }
                                                        updateDialogsWithDeletedMessages(j, j14, new ArrayList(), null, false);
                                                        arrayList = arrayList15;
                                                        if (arrayList != null) {
                                                        }
                                                        onReactionsUpdate(arrayList18);
                                                        sQLitePreparedStatement18 = sQLitePreparedStatement16;
                                                        sQLitePreparedStatement19 = sQLitePreparedStatement6;
                                                        sQLiteDatabase3 = this.database;
                                                        if (sQLiteDatabase3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement18 != null) {
                                                        }
                                                        if (sQLitePreparedStatement19 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                    } catch (Exception e24) {
                                                        e = e24;
                                                        sQLitePreparedStatement = null;
                                                    } catch (Throwable th24) {
                                                        th = th24;
                                                        sQLitePreparedStatement = null;
                                                    }
                                                } catch (Exception e25) {
                                                    sQLitePreparedStatement = null;
                                                    exc = e25;
                                                    sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLiteCursor2 = null;
                                                    sQLitePreparedStatement7 = null;
                                                } catch (Throwable th25) {
                                                    sQLitePreparedStatement = null;
                                                    th = th25;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement16;
                                                    sQLitePreparedStatement17 = null;
                                                }
                                            } catch (Exception e26) {
                                                e = e26;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                                sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement9 = null;
                                                sQLiteCursor6 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                exc = e;
                                                sQLiteCursor2 = sQLiteCursor6;
                                                checkSQLException(exc);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLiteCursor2 != null) {
                                                }
                                            } catch (Throwable th26) {
                                                th = th26;
                                                sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                                sQLiteCursor5 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement = sQLitePreparedStatement;
                                                th = th;
                                                sQLiteCursor = sQLiteCursor5;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e27) {
                                            e = e27;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                            sQLitePreparedStatement10 = sQLitePreparedStatement2;
                                            sQLitePreparedStatement9 = null;
                                            sQLiteCursor6 = null;
                                        } catch (Throwable th27) {
                                            th = th27;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement25;
                                            sQLiteCursor5 = null;
                                            sQLitePreparedStatement3 = null;
                                        }
                                    } catch (Exception e28) {
                                        e = e28;
                                        sQLitePreparedStatement14 = sQLitePreparedStatement24;
                                        sQLitePreparedStatement12 = sQLitePreparedStatement;
                                        sQLitePreparedStatement7 = executeFast4;
                                        exc = e;
                                        sQLitePreparedStatement10 = sQLitePreparedStatement14;
                                        sQLitePreparedStatement9 = null;
                                        sQLiteCursor8 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                        sQLitePreparedStatement8 = sQLitePreparedStatement6;
                                        sQLitePreparedStatement = sQLitePreparedStatement12;
                                        sQLiteCursor2 = sQLiteCursor8;
                                        checkSQLException(exc);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                    } catch (Throwable th28) {
                                        th = th28;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement24;
                                        sQLitePreparedStatement11 = sQLitePreparedStatement;
                                        sQLitePreparedStatement7 = executeFast4;
                                        th = th;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement13;
                                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement4;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement5;
                                        sQLitePreparedStatement8 = sQLitePreparedStatement6;
                                        sQLiteCursor7 = sQLitePreparedStatement13;
                                        sQLitePreparedStatement = sQLitePreparedStatement11;
                                        sQLiteCursor = sQLiteCursor7;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e29) {
                                    e = e29;
                                    sQLitePreparedStatement14 = executeFast5;
                                } catch (Throwable th29) {
                                    th = th29;
                                    sQLitePreparedStatement2 = executeFast5;
                                }
                            } catch (Exception e30) {
                                sQLitePreparedStatement12 = sQLitePreparedStatement;
                                sQLitePreparedStatement7 = executeFast4;
                                exc = e30;
                                sQLitePreparedStatement9 = null;
                                sQLiteCursor8 = null;
                                sQLitePreparedStatement10 = null;
                                sQLitePreparedStatement4 = null;
                            } catch (Throwable th30) {
                                sQLitePreparedStatement11 = sQLitePreparedStatement;
                                sQLitePreparedStatement7 = executeFast4;
                                th = th30;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement13 = null;
                            }
                        } catch (Exception e31) {
                            sQLitePreparedStatement12 = sQLitePreparedStatement;
                            exc = e31;
                            sQLitePreparedStatement9 = null;
                            sQLiteCursor8 = null;
                            sQLitePreparedStatement10 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement8 = null;
                        } catch (Throwable th31) {
                            sQLitePreparedStatement11 = sQLitePreparedStatement;
                            th = th31;
                            sQLitePreparedStatement2 = null;
                            sQLiteCursor7 = null;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement4 = null;
                            sQLitePreparedStatement5 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement7 = null;
                            sQLitePreparedStatement8 = null;
                        }
                    }
                    sQLitePreparedStatement18 = null;
                    sQLitePreparedStatement19 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLiteDatabase3 = this.database;
                    if (sQLiteDatabase3 != null) {
                    }
                    if (sQLitePreparedStatement18 != null) {
                    }
                    if (sQLitePreparedStatement19 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                } catch (Exception e32) {
                    e = e32;
                    sQLitePreparedStatement7 = r1;
                    sQLitePreparedStatement9 = null;
                    sQLiteCursor6 = null;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement10 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement8 = null;
                } catch (Throwable th32) {
                    th = th32;
                    sQLitePreparedStatement7 = r1;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor5 = null;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement8 = null;
                }
            } catch (Exception e33) {
                exc = e33;
                sQLitePreparedStatement9 = null;
                sQLiteCursor4 = null;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement10 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement6 = null;
                sQLitePreparedStatement7 = null;
            } catch (Throwable th33) {
                th = th33;
                sQLitePreparedStatement2 = null;
                sQLiteCursor3 = null;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement3 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement6 = null;
                sQLitePreparedStatement7 = null;
            }
        } catch (Exception e34) {
            sQLitePreparedStatement = null;
            exc = e34;
            sQLitePreparedStatement9 = null;
            sQLiteCursor2 = null;
            sQLitePreparedStatement10 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement8 = null;
        } catch (Throwable th34) {
            sQLitePreparedStatement = null;
            th = th34;
            sQLitePreparedStatement2 = null;
            sQLiteCursor = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement8 = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$216(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$217(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public static void addUsersAndChatsFromMessage(TLRPC$Message tLRPC$Message, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Long> arrayList3) {
        String str;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$Peer tLRPC$Peer;
        TLRPC$Peer tLRPC$Peer2;
        TLRPC$WebPage tLRPC$WebPage;
        TLRPC$Peer tLRPC$Peer3;
        TL_stories$StoryFwdHeader tL_stories$StoryFwdHeader;
        TL_stories$StoryItem tL_stories$StoryItem;
        TLRPC$Peer tLRPC$Peer4;
        long fromChatId = MessageObject.getFromChatId(tLRPC$Message);
        if (DialogObject.isUserDialog(fromChatId)) {
            if (!arrayList.contains(Long.valueOf(fromChatId))) {
                arrayList.add(Long.valueOf(fromChatId));
            }
        } else if (DialogObject.isChatDialog(fromChatId)) {
            long j = -fromChatId;
            if (!arrayList2.contains(Long.valueOf(j))) {
                arrayList2.add(Long.valueOf(j));
            }
        }
        long j2 = tLRPC$Message.via_bot_id;
        if (j2 != 0 && !arrayList.contains(Long.valueOf(j2))) {
            arrayList.add(Long.valueOf(tLRPC$Message.via_bot_id));
        }
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction != null) {
            long j3 = tLRPC$MessageAction.user_id;
            if (j3 != 0 && !arrayList.contains(Long.valueOf(j3))) {
                arrayList.add(Long.valueOf(tLRPC$Message.action.user_id));
            }
            long j4 = tLRPC$Message.action.channel_id;
            if (j4 != 0 && !arrayList2.contains(Long.valueOf(j4))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.channel_id));
            }
            long j5 = tLRPC$Message.action.chat_id;
            if (j5 != 0 && !arrayList2.contains(Long.valueOf(j5))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.chat_id));
            }
            TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGiftCode) {
                addLoadPeerInfo(((TLRPC$TL_messageActionGiftCode) tLRPC$MessageAction2).boost_peer, arrayList, arrayList2);
            }
            TLRPC$MessageAction tLRPC$MessageAction3 = tLRPC$Message.action;
            if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGeoProximityReached) {
                TLRPC$TL_messageActionGeoProximityReached tLRPC$TL_messageActionGeoProximityReached = (TLRPC$TL_messageActionGeoProximityReached) tLRPC$MessageAction3;
                addLoadPeerInfo(tLRPC$TL_messageActionGeoProximityReached.from_id, arrayList, arrayList2);
                addLoadPeerInfo(tLRPC$TL_messageActionGeoProximityReached.to_id, arrayList, arrayList2);
            }
            if (!tLRPC$Message.action.users.isEmpty()) {
                for (int i = 0; i < tLRPC$Message.action.users.size(); i++) {
                    Long l = tLRPC$Message.action.users.get(i);
                    if (!arrayList.contains(l)) {
                        arrayList.add(l);
                    }
                }
            }
        }
        if (!tLRPC$Message.entities.isEmpty()) {
            for (int i2 = 0; i2 < tLRPC$Message.entities.size(); i2++) {
                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i2);
                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id));
                } else if (tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id));
                } else if (arrayList3 != null && (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji)) {
                    arrayList3.add(Long.valueOf(((TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity).document_id));
                }
            }
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia != null) {
            long j6 = tLRPC$MessageMedia.user_id;
            if (j6 != 0 && !arrayList.contains(Long.valueOf(j6))) {
                arrayList.add(Long.valueOf(tLRPC$Message.media.user_id));
            }
            TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
            if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGiveaway) {
                Iterator<Long> it = ((TLRPC$TL_messageMediaGiveaway) tLRPC$MessageMedia2).channels.iterator();
                while (it.hasNext()) {
                    Long next = it.next();
                    if (!arrayList2.contains(next)) {
                        arrayList2.add(next);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message.media;
            if (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaGiveawayResults) {
                Iterator<Long> it2 = ((TLRPC$TL_messageMediaGiveawayResults) tLRPC$MessageMedia3).winners.iterator();
                while (it2.hasNext()) {
                    Long next2 = it2.next();
                    if (!arrayList.contains(next2)) {
                        arrayList.add(next2);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia4 = tLRPC$Message.media;
            if (tLRPC$MessageMedia4 instanceof TLRPC$TL_messageMediaPoll) {
                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia4;
                if (!tLRPC$TL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    for (int i3 = 0; i3 < tLRPC$TL_messageMediaPoll.results.recent_voters.size(); i3++) {
                        addLoadPeerInfo(tLRPC$TL_messageMediaPoll.results.recent_voters.get(i3), arrayList, arrayList2);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia5 = tLRPC$Message.media;
            if ((tLRPC$MessageMedia5 instanceof TLRPC$TL_messageMediaStory) && (tL_stories$StoryItem = tLRPC$MessageMedia5.storyItem) != null) {
                TL_stories$StoryFwdHeader tL_stories$StoryFwdHeader2 = tL_stories$StoryItem.fwd_from;
                if (tL_stories$StoryFwdHeader2 != null) {
                    addLoadPeerInfo(tL_stories$StoryFwdHeader2.from, arrayList, arrayList2);
                }
                TL_stories$StoryItem tL_stories$StoryItem2 = tLRPC$Message.media.storyItem;
                if (tL_stories$StoryItem2 != null && tL_stories$StoryItem2.media_areas != null) {
                    for (int i4 = 0; i4 < tLRPC$Message.media.storyItem.media_areas.size(); i4++) {
                        if (tLRPC$Message.media.storyItem.media_areas.get(i4) instanceof TL_stories$TL_mediaAreaChannelPost) {
                            long j7 = ((TL_stories$TL_mediaAreaChannelPost) tLRPC$Message.media.storyItem.media_areas.get(i4)).channel_id;
                            if (!arrayList2.contains(Long.valueOf(j7))) {
                                arrayList2.add(Long.valueOf(j7));
                            }
                        }
                    }
                }
                TL_stories$StoryItem tL_stories$StoryItem3 = tLRPC$Message.media.storyItem;
                if (tL_stories$StoryItem3 != null && (tLRPC$Peer4 = tL_stories$StoryItem3.from_id) != null) {
                    addLoadPeerInfo(tLRPC$Peer4, arrayList, arrayList2);
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia6 = tLRPC$Message.media;
            if ((tLRPC$MessageMedia6 instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$WebPage = tLRPC$MessageMedia6.webpage) != null && tLRPC$WebPage.attributes != null) {
                for (int i5 = 0; i5 < tLRPC$Message.media.webpage.attributes.size(); i5++) {
                    if (tLRPC$Message.media.webpage.attributes.get(i5) instanceof TLRPC$TL_webPageAttributeStory) {
                        TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$Message.media.webpage.attributes.get(i5);
                        TL_stories$StoryItem tL_stories$StoryItem4 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem4 != null && (tL_stories$StoryFwdHeader = tL_stories$StoryItem4.fwd_from) != null) {
                            addLoadPeerInfo(tL_stories$StoryFwdHeader.from, arrayList, arrayList2);
                        }
                        TL_stories$StoryItem tL_stories$StoryItem5 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem5 != null && tL_stories$StoryItem5.media_areas != null) {
                            for (int i6 = 0; i6 < tLRPC$TL_webPageAttributeStory.storyItem.media_areas.size(); i6++) {
                                if (tLRPC$TL_webPageAttributeStory.storyItem.media_areas.get(i6) instanceof TL_stories$TL_mediaAreaChannelPost) {
                                    long j8 = ((TL_stories$TL_mediaAreaChannelPost) tLRPC$TL_webPageAttributeStory.storyItem.media_areas.get(i6)).channel_id;
                                    if (!arrayList2.contains(Long.valueOf(j8))) {
                                        arrayList2.add(Long.valueOf(j8));
                                    }
                                }
                            }
                        }
                        TL_stories$StoryItem tL_stories$StoryItem6 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem6 != null && (tLRPC$Peer3 = tL_stories$StoryItem6.from_id) != null) {
                            addLoadPeerInfo(tLRPC$Peer3, arrayList, arrayList2);
                        }
                    }
                }
            }
            TLRPC$Peer tLRPC$Peer5 = tLRPC$Message.media.peer;
            if (tLRPC$Peer5 != null) {
                addLoadPeerInfo(tLRPC$Peer5, arrayList, arrayList2);
            }
        }
        TLRPC$MessageReplies tLRPC$MessageReplies = tLRPC$Message.replies;
        if (tLRPC$MessageReplies != null) {
            int size = tLRPC$MessageReplies.recent_repliers.size();
            for (int i7 = 0; i7 < size; i7++) {
                addLoadPeerInfo(tLRPC$Message.replies.recent_repliers.get(i7), arrayList, arrayList2);
            }
        }
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
        if (tLRPC$MessageReplyHeader != null && (tLRPC$Peer2 = tLRPC$MessageReplyHeader.reply_to_peer_id) != null) {
            addLoadPeerInfo(tLRPC$Peer2, arrayList, arrayList2);
        }
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = tLRPC$Message.fwd_from;
        if (tLRPC$MessageFwdHeader2 != null) {
            addLoadPeerInfo(tLRPC$MessageFwdHeader2.from_id, arrayList, arrayList2);
            addLoadPeerInfo(tLRPC$Message.fwd_from.saved_from_peer, arrayList, arrayList2);
        }
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
        if (tLRPC$MessageReplyHeader2 != null && (tLRPC$MessageFwdHeader = tLRPC$MessageReplyHeader2.reply_from) != null && (tLRPC$Peer = tLRPC$MessageFwdHeader.from_id) != null) {
            addLoadPeerInfo(tLRPC$Peer, arrayList, arrayList2);
        }
        HashMap<String, String> hashMap = tLRPC$Message.params;
        if (hashMap == null || (str = hashMap.get("fwd_peer")) == null) {
            return;
        }
        long longValue = Utilities.parseLong(str).longValue();
        if (longValue < 0) {
            long j9 = -longValue;
            if (arrayList2.contains(Long.valueOf(j9))) {
                return;
            }
            arrayList2.add(Long.valueOf(j9));
        }
    }

    public static void addLoadPeerInfo(TLRPC$Peer tLRPC$Peer, ArrayList<Long> arrayList, ArrayList<Long> arrayList2) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
            if (arrayList.contains(Long.valueOf(tLRPC$Peer.user_id))) {
                return;
            }
            arrayList.add(Long.valueOf(tLRPC$Peer.user_id));
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            if (arrayList2.contains(Long.valueOf(tLRPC$Peer.channel_id))) {
                return;
            }
            arrayList2.add(Long.valueOf(tLRPC$Peer.channel_id));
        } else if (!(tLRPC$Peer instanceof TLRPC$TL_peerChat) || arrayList2.contains(Long.valueOf(tLRPC$Peer.chat_id))) {
        } else {
            arrayList2.add(Long.valueOf(tLRPC$Peer.chat_id));
        }
    }

    public void getDialogs(final int i, final int i2, final int i3, boolean z) {
        LongSparseArray<LongSparseArray<TLRPC$DraftMessage>> drafts;
        int size;
        long[] jArr = null;
        if (z && (size = (drafts = getMediaDataController().getDrafts()).size()) > 0) {
            jArr = new long[size];
            for (int i4 = 0; i4 < size; i4++) {
                if (drafts.valueAt(i4).get(0L) != null) {
                    jArr[i4] = drafts.keyAt(i4);
                }
            }
        }
        final long[] jArr2 = jArr;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogs$220(i, i2, i3, jArr2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(22:1|(3:2|3|4)|(7:(10:5|6|7|(13:9|10|(1:12)(1:315)|13|14|15|(29:19|(4:21|(2:23|(1:25)(1:26))|27|(4:173|174|175|94)(2:29|(1:31)))(2:176|177)|32|(2:34|(1:36)(23:171|38|(1:40)(1:170)|41|(1:43)(1:169)|44|(1:46)(1:168)|47|(2:49|(1:51))|52|(1:54)|55|(1:57)|58|(9:60|(8:62|(1:64)|65|66|67|(10:71|(3:154|155|(1:157))|73|74|(3:139|140|(9:142|143|144|145|(1:147)|77|78|(3:80|81|82)|135))|76|77|78|(0)|135)|162|135)(1:166)|84|(3:106|107|(1:109))|86|(3:88|(1:90)|91)(2:95|(3:97|(1:99)|100)(2:101|(2:103|(1:105))))|92|93|94)(1:167)|83|84|(0)|86|(0)(0)|92|93|94))(1:172)|37|38|(0)(0)|41|(0)(0)|44|(0)(0)|47|(0)|52|(0)|55|(0)|58|(0)(0)|83|84|(0)|86|(0)(0)|92|93|94|16|17)|178|179|180|181|(9:183|(6:186|187|188|(2:190|191)(1:193)|192|184)|199|200|(6:204|(2:205|(3:207|(2:209|(2:211|212)(1:279))(2:281|282)|280)(2:283|284))|(2:218|(12:220|221|222|223|(1:225)|226|227|228|(2:232|(7:238|(2:242|(7:244|245|246|247|(1:249)|250|251))|267|247|(0)|250|251))|268|250|251)(2:277|278))(2:214|215)|216|201|202)|285|286|287|288)(2:295|296)|289)(1:321)|113|114|115|(1:120)|117|118)|(5:347|(4:350|(4:353|(2:357|358)|359|351)|362|348)|363|364|(9:366|367|368|369|370|371|(1:373)|117|118))|370|371|(0)|117|118)|322|323|324|325|(7:395|396|(4:399|(4:404|(2:406|(1:408))(2:414|(1:416))|409|(2:411|412)(1:413))(2:401|402)|403|397)|417|418|(5:420|(3:424|421|422)|425|426|427)(1:435)|428)(1:327)|328|329|330|(6:332|333|334|335|336|337)(1:390)|338|339|(1:341)|342|(1:344)|345|378|368|369|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(28:1|(3:2|3|4)|(10:5|6|7|(13:9|10|(1:12)(1:315)|13|14|15|(29:19|(4:21|(2:23|(1:25)(1:26))|27|(4:173|174|175|94)(2:29|(1:31)))(2:176|177)|32|(2:34|(1:36)(23:171|38|(1:40)(1:170)|41|(1:43)(1:169)|44|(1:46)(1:168)|47|(2:49|(1:51))|52|(1:54)|55|(1:57)|58|(9:60|(8:62|(1:64)|65|66|67|(10:71|(3:154|155|(1:157))|73|74|(3:139|140|(9:142|143|144|145|(1:147)|77|78|(3:80|81|82)|135))|76|77|78|(0)|135)|162|135)(1:166)|84|(3:106|107|(1:109))|86|(3:88|(1:90)|91)(2:95|(3:97|(1:99)|100)(2:101|(2:103|(1:105))))|92|93|94)(1:167)|83|84|(0)|86|(0)(0)|92|93|94))(1:172)|37|38|(0)(0)|41|(0)(0)|44|(0)(0)|47|(0)|52|(0)|55|(0)|58|(0)(0)|83|84|(0)|86|(0)(0)|92|93|94|16|17)|178|179|180|181|(9:183|(6:186|187|188|(2:190|191)(1:193)|192|184)|199|200|(6:204|(2:205|(3:207|(2:209|(2:211|212)(1:279))(2:281|282)|280)(2:283|284))|(2:218|(12:220|221|222|223|(1:225)|226|227|228|(2:232|(7:238|(2:242|(7:244|245|246|247|(1:249)|250|251))|267|247|(0)|250|251))|268|250|251)(2:277|278))(2:214|215)|216|201|202)|285|286|287|288)(2:295|296)|289)(1:321)|113|114|115|(1:120)|117|118)|322|323|324|325|(7:395|396|(4:399|(4:404|(2:406|(1:408))(2:414|(1:416))|409|(2:411|412)(1:413))(2:401|402)|403|397)|417|418|(5:420|(3:424|421|422)|425|426|427)(1:435)|428)(1:327)|328|329|330|(6:332|333|334|335|336|337)(1:390)|338|339|(1:341)|342|(1:344)|345|(5:347|(4:350|(4:353|(2:357|358)|359|351)|362|348)|363|364|(9:366|367|368|369|370|371|(1:373)|117|118))|378|368|369|370|371|(0)|117|118|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(7:(10:5|6|7|(13:9|10|(1:12)(1:315)|13|14|15|(29:19|(4:21|(2:23|(1:25)(1:26))|27|(4:173|174|175|94)(2:29|(1:31)))(2:176|177)|32|(2:34|(1:36)(23:171|38|(1:40)(1:170)|41|(1:43)(1:169)|44|(1:46)(1:168)|47|(2:49|(1:51))|52|(1:54)|55|(1:57)|58|(9:60|(8:62|(1:64)|65|66|67|(10:71|(3:154|155|(1:157))|73|74|(3:139|140|(9:142|143|144|145|(1:147)|77|78|(3:80|81|82)|135))|76|77|78|(0)|135)|162|135)(1:166)|84|(3:106|107|(1:109))|86|(3:88|(1:90)|91)(2:95|(3:97|(1:99)|100)(2:101|(2:103|(1:105))))|92|93|94)(1:167)|83|84|(0)|86|(0)(0)|92|93|94))(1:172)|37|38|(0)(0)|41|(0)(0)|44|(0)(0)|47|(0)|52|(0)|55|(0)|58|(0)(0)|83|84|(0)|86|(0)(0)|92|93|94|16|17)|178|179|180|181|(9:183|(6:186|187|188|(2:190|191)(1:193)|192|184)|199|200|(6:204|(2:205|(3:207|(2:209|(2:211|212)(1:279))(2:281|282)|280)(2:283|284))|(2:218|(12:220|221|222|223|(1:225)|226|227|228|(2:232|(7:238|(2:242|(7:244|245|246|247|(1:249)|250|251))|267|247|(0)|250|251))|268|250|251)(2:277|278))(2:214|215)|216|201|202)|285|286|287|288)(2:295|296)|289)(1:321)|113|114|115|(1:120)|117|118)|(5:347|(4:350|(4:353|(2:357|358)|359|351)|362|348)|363|364|(9:366|367|368|369|370|371|(1:373)|117|118))|370|371|(0)|117|118) */
    /* JADX WARN: Code restructure failed: missing block: B:345:0x06dd, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:347:0x06df, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:348:0x06e0, code lost:
        r3 = r13;
        r5 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:349:0x06e3, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:351:0x06e7, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:355:0x06ee, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:357:0x06f1, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:0x06f2, code lost:
        r3 = r13;
        r5 = r15;
        r4 = r22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:365:0x0701, code lost:
        r1 = r0;
        r2 = r18;
     */
    /* JADX WARN: Code restructure failed: missing block: B:377:0x0748, code lost:
        r9.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:78:0x0240, code lost:
        if ((r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore) == false) goto L162;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0299  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x02ce  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x02ef A[Catch: all -> 0x0522, Exception -> 0x0528, TryCatch #44 {Exception -> 0x0528, all -> 0x0522, blocks: (B:118:0x02da, B:120:0x02e0, B:122:0x02e6, B:123:0x02e9, B:125:0x02ef, B:127:0x02ff, B:129:0x0309, B:131:0x0311, B:133:0x031b, B:134:0x0322, B:135:0x032c, B:137:0x0334, B:139:0x033f, B:114:0x02ba, B:115:0x02be, B:141:0x035a), top: B:412:0x02e0 }] */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0309 A[Catch: all -> 0x0522, Exception -> 0x0528, TryCatch #44 {Exception -> 0x0528, all -> 0x0522, blocks: (B:118:0x02da, B:120:0x02e0, B:122:0x02e6, B:123:0x02e9, B:125:0x02ef, B:127:0x02ff, B:129:0x0309, B:131:0x0311, B:133:0x031b, B:134:0x0322, B:135:0x032c, B:137:0x0334, B:139:0x033f, B:114:0x02ba, B:115:0x02be, B:141:0x035a), top: B:412:0x02e0 }] */
    /* JADX WARN: Removed duplicated region for block: B:202:0x04a6 A[Catch: Exception -> 0x04aa, all -> 0x04b9, TRY_LEAVE, TryCatch #5 {Exception -> 0x04aa, blocks: (B:198:0x049d, B:200:0x04a2, B:202:0x04a6), top: B:387:0x049d }] */
    /* JADX WARN: Removed duplicated region for block: B:377:0x0748  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x02e0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0159  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x016e  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:468:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:469:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0177  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0192 A[Catch: all -> 0x052e, Exception -> 0x0535, TryCatch #7 {Exception -> 0x0535, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:24:0x00f1, B:28:0x00fb, B:30:0x010a, B:32:0x012b, B:38:0x013b, B:42:0x015a, B:46:0x0171, B:50:0x017a, B:52:0x0192, B:54:0x019a, B:55:0x019f, B:57:0x01b9, B:58:0x01c9, B:60:0x01d8, B:61:0x01df, B:63:0x01e6, B:65:0x01f1, B:67:0x0215, B:68:0x0217, B:29:0x0105), top: B:389:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:57:0x01b9 A[Catch: all -> 0x052e, Exception -> 0x0535, TryCatch #7 {Exception -> 0x0535, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:24:0x00f1, B:28:0x00fb, B:30:0x010a, B:32:0x012b, B:38:0x013b, B:42:0x015a, B:46:0x0171, B:50:0x017a, B:52:0x0192, B:54:0x019a, B:55:0x019f, B:57:0x01b9, B:58:0x01c9, B:60:0x01d8, B:61:0x01df, B:63:0x01e6, B:65:0x01f1, B:67:0x0215, B:68:0x0217, B:29:0x0105), top: B:389:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x01d8 A[Catch: all -> 0x052e, Exception -> 0x0535, TryCatch #7 {Exception -> 0x0535, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:24:0x00f1, B:28:0x00fb, B:30:0x010a, B:32:0x012b, B:38:0x013b, B:42:0x015a, B:46:0x0171, B:50:0x017a, B:52:0x0192, B:54:0x019a, B:55:0x019f, B:57:0x01b9, B:58:0x01c9, B:60:0x01d8, B:61:0x01df, B:63:0x01e6, B:65:0x01f1, B:67:0x0215, B:68:0x0217, B:29:0x0105), top: B:389:0x00af }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01e6 A[Catch: all -> 0x052e, Exception -> 0x0535, TryCatch #7 {Exception -> 0x0535, blocks: (B:14:0x00af, B:16:0x00b5, B:18:0x00c2, B:20:0x00cf, B:22:0x00d5, B:23:0x00e4, B:24:0x00f1, B:28:0x00fb, B:30:0x010a, B:32:0x012b, B:38:0x013b, B:42:0x015a, B:46:0x0171, B:50:0x017a, B:52:0x0192, B:54:0x019a, B:55:0x019f, B:57:0x01b9, B:58:0x01c9, B:60:0x01d8, B:61:0x01df, B:63:0x01e6, B:65:0x01f1, B:67:0x0215, B:68:0x0217, B:29:0x0105), top: B:389:0x00af }] */
    /* JADX WARN: Type inference failed for: r7v31, types: [org.telegram.tgnet.TLRPC$TL_dialog] */
    /* JADX WARN: Type inference failed for: r7v32, types: [java.lang.Object, org.telegram.tgnet.TLRPC$Dialog] */
    /* JADX WARN: Type inference failed for: r7v36, types: [org.telegram.tgnet.TLRPC$TL_dialogFolder] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogs$220(int i, int i2, int i3, long[] jArr) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        MessagesStorage messagesStorage;
        ArrayList<TLRPC$EncryptedChat> arrayList;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        ArrayList<Long> arrayList2;
        HashSet hashSet;
        ArrayList<Long> arrayList3;
        ArrayList arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray;
        LongSparseArray<ArrayList<Integer>> longSparseArray2;
        ArrayList arrayList7;
        int i4;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$EncryptedChat> arrayList8;
        final MessagesStorage messagesStorage2;
        HashSet hashSet2;
        final LongSparseArray longSparseArray3;
        ArrayList<TLRPC$UserFull> arrayList9;
        int i5;
        int i6;
        MessagesStorage messagesStorage3;
        ArrayList arrayList10;
        ArrayList arrayList11;
        ArrayList arrayList12;
        HashSet hashSet3;
        MessagesStorage messagesStorage4;
        ArrayList arrayList13;
        ArrayList arrayList14;
        TLRPC$Dialog tLRPC$Dialog;
        HashSet hashSet4;
        NativeByteBuffer byteBufferValue;
        ?? tLRPC$TL_dialog;
        ArrayList arrayList15;
        int i7;
        int i8;
        long longValue;
        long longValue2;
        NativeByteBuffer byteBufferValue2;
        int i9;
        ArrayList<Long> arrayList16;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray4;
        LongSparseArray<ArrayList<Integer>> longSparseArray5;
        ArrayList arrayList17;
        ArrayList arrayList18;
        HashSet hashSet5;
        Exception exc2;
        MessagesStorage messagesStorage5 = this;
        long[] jArr2 = jArr;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        ArrayList<TLRPC$EncryptedChat> arrayList19 = new ArrayList<>();
        try {
            arrayList2 = new ArrayList<>();
            hashSet = new HashSet();
            arrayList2.add(Long.valueOf(getUserConfig().getClientUserId()));
            arrayList3 = new ArrayList<>();
            arrayList4 = new ArrayList();
            arrayList5 = new ArrayList();
            arrayList6 = new ArrayList();
            longSparseArray = new LongSparseArray<>();
            longSparseArray2 = new LongSparseArray<>();
            arrayList7 = new ArrayList(2);
            arrayList7.add(Integer.valueOf(i));
            i4 = 0;
            sQLiteCursor3 = null;
        } catch (Exception e) {
            messagesStorage = messagesStorage5;
            arrayList = arrayList19;
            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
            exc = e;
            sQLiteCursor2 = null;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
        }
        try {
            while (true) {
                try {
                    arrayList8 = arrayList19;
                    if (i4 >= arrayList7.size()) {
                        break;
                    }
                    try {
                        int intValue = ((Integer) arrayList7.get(i4)).intValue();
                        if (i4 == 0) {
                            i5 = i2;
                            i6 = i3;
                        } else {
                            i5 = 0;
                            i6 = 100;
                        }
                        ArrayList arrayList20 = new ArrayList();
                        HashSet hashSet6 = hashSet;
                        ArrayList arrayList21 = arrayList4;
                        try {
                            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray6 = longSparseArray;
                            LongSparseArray<ArrayList<Integer>> longSparseArray7 = longSparseArray2;
                            SQLiteCursor queryFinalized = messagesStorage5.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d", Integer.valueOf(intValue), Integer.valueOf(i5), Integer.valueOf(i6)), new Object[0]);
                            while (queryFinalized.next()) {
                                try {
                                    try {
                                        ArrayList<Long> arrayList22 = arrayList3;
                                        long longValue3 = queryFinalized.longValue(0);
                                        if (DialogObject.isFolderDialogId(longValue3)) {
                                            tLRPC$TL_dialog = new TLRPC$TL_dialogFolder();
                                            if (!queryFinalized.isNull(18)) {
                                                NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(18);
                                                if (byteBufferValue3 != null) {
                                                    tLRPC$TL_dialog.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                    byteBufferValue3.reuse();
                                                } else {
                                                    TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                                    tLRPC$TL_dialog.folder = tLRPC$TL_folder;
                                                    tLRPC$TL_folder.id = DialogObject.getFolderId(longValue3);
                                                }
                                            }
                                            TLRPC$TL_folder tLRPC$TL_folder2 = tLRPC$TL_dialog.folder;
                                            if (tLRPC$TL_folder2 == null) {
                                                arrayList3 = arrayList22;
                                            } else if (i4 == 0) {
                                                arrayList7.add(Integer.valueOf(tLRPC$TL_folder2.id));
                                            }
                                        } else {
                                            tLRPC$TL_dialog = new TLRPC$TL_dialog();
                                        }
                                        tLRPC$TL_dialog.id = longValue3;
                                        tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                                        tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                                        tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                                        int intValue2 = queryFinalized.intValue(10);
                                        tLRPC$TL_dialog.pts = intValue2;
                                        if (intValue2 != 0) {
                                            arrayList15 = arrayList7;
                                            i7 = i4;
                                            if (!DialogObject.isUserDialog(tLRPC$TL_dialog.id)) {
                                                i8 = 1;
                                                tLRPC$TL_dialog.flags = i8;
                                                tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
                                                tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
                                                int intValue3 = queryFinalized.intValue(14);
                                                tLRPC$TL_dialog.pinnedNum = intValue3;
                                                tLRPC$TL_dialog.pinned = intValue3 == 0;
                                                tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
                                                int intValue4 = queryFinalized.intValue(16);
                                                tLRPC$TL_dialog.unread_mark = (intValue4 & 1) == 0;
                                                tLRPC$TL_dialog.view_forum_as_messages = (intValue4 & 64) == 0;
                                                longValue = queryFinalized.longValue(8);
                                                ArrayList arrayList23 = arrayList15;
                                                TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                                                tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings;
                                                if ((((int) longValue) & 1) != 0) {
                                                    int i10 = (int) (longValue >> 32);
                                                    tLRPC$TL_peerNotifySettings.mute_until = i10;
                                                    if (i10 == 0) {
                                                        tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                    }
                                                }
                                                tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
                                                tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(19);
                                                longValue2 = queryFinalized.longValue(20);
                                                if (longValue2 != 0) {
                                                    arrayList20.add(new Pair(Long.valueOf(longValue3), Long.valueOf(longValue2)));
                                                }
                                                tLRPC$TL_dialog.ttl_period = queryFinalized.intValue(21);
                                                tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                                                if (jArr2 != null) {
                                                    arrayList5.add(Long.valueOf(longValue3));
                                                }
                                                byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                                if (byteBufferValue2 == null) {
                                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                    if (TLdeserialize != null) {
                                                        int i11 = i7;
                                                        TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                                                        TLdeserialize.id = queryFinalized.intValue(6);
                                                        int intValue5 = queryFinalized.intValue(9);
                                                        if (intValue5 != 0) {
                                                            tLRPC$TL_dialog.last_message_date = intValue5;
                                                        }
                                                        TLdeserialize.send_state = queryFinalized.intValue(7);
                                                        TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                                        tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize);
                                                        arrayList16 = arrayList22;
                                                        addUsersAndChatsFromMessage(TLdeserialize, arrayList2, arrayList16, arrayList6);
                                                        try {
                                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                                            if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                                                if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                                                    try {
                                                                        if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent)) {
                                                                        }
                                                                    } catch (Exception e2) {
                                                                        exc2 = e2;
                                                                        i9 = i11;
                                                                        arrayList17 = arrayList20;
                                                                        longSparseArray4 = longSparseArray6;
                                                                        longSparseArray5 = longSparseArray7;
                                                                        messagesStorage3 = this;
                                                                        messagesStorage3.checkSQLException(exc2);
                                                                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                        }
                                                                        if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                        }
                                                                        longSparseArray6 = longSparseArray4;
                                                                        arrayList21 = arrayList18;
                                                                        arrayList3 = arrayList16;
                                                                        longSparseArray7 = longSparseArray5;
                                                                        hashSet6 = hashSet5;
                                                                        arrayList20 = arrayList17;
                                                                        arrayList7 = arrayList23;
                                                                        i4 = i9;
                                                                        jArr2 = jArr;
                                                                    }
                                                                }
                                                                try {
                                                                    if (!queryFinalized.isNull(13)) {
                                                                        try {
                                                                            NativeByteBuffer byteBufferValue4 = queryFinalized.byteBufferValue(13);
                                                                            if (byteBufferValue4 != null) {
                                                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                                                i9 = i11;
                                                                                arrayList17 = arrayList20;
                                                                                try {
                                                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                                                    byteBufferValue4.reuse();
                                                                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                                                    if (tLRPC$Message != null) {
                                                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList2, arrayList16, arrayList6);
                                                                                    }
                                                                                    if (TLdeserialize.replyMessage == null) {
                                                                                        longSparseArray4 = longSparseArray6;
                                                                                        longSparseArray5 = longSparseArray7;
                                                                                        try {
                                                                                            addReplyMessages(TLdeserialize, longSparseArray4, longSparseArray5);
                                                                                        } catch (Exception e3) {
                                                                                            e = e3;
                                                                                            messagesStorage3 = this;
                                                                                            exc2 = e;
                                                                                            messagesStorage3.checkSQLException(exc2);
                                                                                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                                            }
                                                                                            if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                                            }
                                                                                            longSparseArray6 = longSparseArray4;
                                                                                            arrayList21 = arrayList18;
                                                                                            arrayList3 = arrayList16;
                                                                                            longSparseArray7 = longSparseArray5;
                                                                                            hashSet6 = hashSet5;
                                                                                            arrayList20 = arrayList17;
                                                                                            arrayList7 = arrayList23;
                                                                                            i4 = i9;
                                                                                            jArr2 = jArr;
                                                                                        }
                                                                                    }
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                } catch (Exception e4) {
                                                                                    e = e4;
                                                                                    messagesStorage3 = this;
                                                                                    exc2 = e;
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                    messagesStorage3.checkSQLException(exc2);
                                                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                                    }
                                                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                                    }
                                                                                    longSparseArray6 = longSparseArray4;
                                                                                    arrayList21 = arrayList18;
                                                                                    arrayList3 = arrayList16;
                                                                                    longSparseArray7 = longSparseArray5;
                                                                                    hashSet6 = hashSet5;
                                                                                    arrayList20 = arrayList17;
                                                                                    arrayList7 = arrayList23;
                                                                                    i4 = i9;
                                                                                    jArr2 = jArr;
                                                                                }
                                                                            }
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            i9 = i11;
                                                                            arrayList17 = arrayList20;
                                                                        }
                                                                    }
                                                                    if (TLdeserialize.replyMessage == null) {
                                                                    }
                                                                    longSparseArray4 = longSparseArray6;
                                                                    longSparseArray5 = longSparseArray7;
                                                                } catch (Exception e6) {
                                                                    e = e6;
                                                                    longSparseArray4 = longSparseArray6;
                                                                    longSparseArray5 = longSparseArray7;
                                                                    messagesStorage3 = this;
                                                                    exc2 = e;
                                                                    messagesStorage3.checkSQLException(exc2);
                                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                                    }
                                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                                    }
                                                                    longSparseArray6 = longSparseArray4;
                                                                    arrayList21 = arrayList18;
                                                                    arrayList3 = arrayList16;
                                                                    longSparseArray7 = longSparseArray5;
                                                                    hashSet6 = hashSet5;
                                                                    arrayList20 = arrayList17;
                                                                    arrayList7 = arrayList23;
                                                                    i4 = i9;
                                                                    jArr2 = jArr;
                                                                }
                                                                i9 = i11;
                                                                arrayList17 = arrayList20;
                                                            }
                                                            i9 = i11;
                                                            arrayList17 = arrayList20;
                                                            longSparseArray4 = longSparseArray6;
                                                            longSparseArray5 = longSparseArray7;
                                                        } catch (Exception e7) {
                                                            e = e7;
                                                            i9 = i11;
                                                            arrayList17 = arrayList20;
                                                        }
                                                    } else {
                                                        i9 = i7;
                                                        arrayList16 = arrayList22;
                                                        longSparseArray4 = longSparseArray6;
                                                        longSparseArray5 = longSparseArray7;
                                                        arrayList17 = arrayList20;
                                                        messagesStorage3 = this;
                                                        byteBufferValue2.reuse();
                                                    }
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                        try {
                                                            if (tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                                                tLRPC$TL_dialog.read_inbox_max_id = 0;
                                                            }
                                                        } catch (Exception e8) {
                                                            exc = e8;
                                                            sQLiteCursor2 = queryFinalized;
                                                            messagesStorage = messagesStorage3;
                                                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                            arrayList = arrayList8;
                                                            tLRPC$TL_messages_dialogs.dialogs.clear();
                                                            tLRPC$TL_messages_dialogs.users.clear();
                                                            tLRPC$TL_messages_dialogs.chats.clear();
                                                            arrayList.clear();
                                                            messagesStorage.checkSQLException(exc);
                                                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                            if (sQLiteCursor2 == null) {
                                                            }
                                                            sQLiteCursor2.dispose();
                                                            return;
                                                        } catch (Throwable th3) {
                                                            th = th3;
                                                            sQLiteCursor = queryFinalized;
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                    if (DialogObject.isEncryptedDialog(longValue3)) {
                                                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue3);
                                                        arrayList18 = arrayList21;
                                                        if (!arrayList18.contains(Integer.valueOf(encryptedChatId))) {
                                                            arrayList18.add(Integer.valueOf(encryptedChatId));
                                                        }
                                                        hashSet5 = hashSet6;
                                                    } else {
                                                        arrayList18 = arrayList21;
                                                        if (DialogObject.isUserDialog(longValue3)) {
                                                            if (!arrayList2.contains(Long.valueOf(longValue3))) {
                                                                arrayList2.add(Long.valueOf(longValue3));
                                                            }
                                                            hashSet5 = hashSet6;
                                                            hashSet5.add(Long.valueOf(longValue3));
                                                        } else {
                                                            hashSet5 = hashSet6;
                                                            if (DialogObject.isChatDialog(longValue3)) {
                                                                long j = -longValue3;
                                                                if (!arrayList16.contains(Long.valueOf(j))) {
                                                                    arrayList16.add(Long.valueOf(j));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    longSparseArray6 = longSparseArray4;
                                                    arrayList21 = arrayList18;
                                                    arrayList3 = arrayList16;
                                                    longSparseArray7 = longSparseArray5;
                                                    hashSet6 = hashSet5;
                                                    arrayList20 = arrayList17;
                                                    arrayList7 = arrayList23;
                                                    i4 = i9;
                                                    jArr2 = jArr;
                                                } else {
                                                    i9 = i7;
                                                    arrayList16 = arrayList22;
                                                    longSparseArray4 = longSparseArray6;
                                                    longSparseArray5 = longSparseArray7;
                                                    arrayList17 = arrayList20;
                                                }
                                                messagesStorage3 = this;
                                                if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                }
                                                if (DialogObject.isEncryptedDialog(longValue3)) {
                                                }
                                                longSparseArray6 = longSparseArray4;
                                                arrayList21 = arrayList18;
                                                arrayList3 = arrayList16;
                                                longSparseArray7 = longSparseArray5;
                                                hashSet6 = hashSet5;
                                                arrayList20 = arrayList17;
                                                arrayList7 = arrayList23;
                                                i4 = i9;
                                                jArr2 = jArr;
                                            }
                                        } else {
                                            arrayList15 = arrayList7;
                                            i7 = i4;
                                        }
                                        i8 = 0;
                                        tLRPC$TL_dialog.flags = i8;
                                        tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
                                        tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
                                        int intValue32 = queryFinalized.intValue(14);
                                        tLRPC$TL_dialog.pinnedNum = intValue32;
                                        tLRPC$TL_dialog.pinned = intValue32 == 0;
                                        tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
                                        int intValue42 = queryFinalized.intValue(16);
                                        tLRPC$TL_dialog.unread_mark = (intValue42 & 1) == 0;
                                        tLRPC$TL_dialog.view_forum_as_messages = (intValue42 & 64) == 0;
                                        longValue = queryFinalized.longValue(8);
                                        ArrayList arrayList232 = arrayList15;
                                        TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                                        tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings2;
                                        if ((((int) longValue) & 1) != 0) {
                                        }
                                        tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
                                        tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(19);
                                        longValue2 = queryFinalized.longValue(20);
                                        if (longValue2 != 0) {
                                        }
                                        tLRPC$TL_dialog.ttl_period = queryFinalized.intValue(21);
                                        tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                                        if (jArr2 != null) {
                                        }
                                        byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                        if (byteBufferValue2 == null) {
                                        }
                                        messagesStorage3 = this;
                                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                                        }
                                        if (DialogObject.isEncryptedDialog(longValue3)) {
                                        }
                                        longSparseArray6 = longSparseArray4;
                                        arrayList21 = arrayList18;
                                        arrayList3 = arrayList16;
                                        longSparseArray7 = longSparseArray5;
                                        hashSet6 = hashSet5;
                                        arrayList20 = arrayList17;
                                        arrayList7 = arrayList232;
                                        i4 = i9;
                                        jArr2 = jArr;
                                    } catch (Exception e9) {
                                        exc = e9;
                                        sQLiteCursor2 = queryFinalized;
                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                        arrayList = arrayList8;
                                        messagesStorage = this;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    sQLiteCursor = queryFinalized;
                                }
                            }
                            ArrayList arrayList24 = arrayList7;
                            int i12 = i4;
                            ArrayList<Long> arrayList25 = arrayList3;
                            ArrayList arrayList26 = arrayList20;
                            HashSet hashSet7 = hashSet6;
                            ArrayList arrayList27 = arrayList21;
                            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray8 = longSparseArray6;
                            LongSparseArray<ArrayList<Integer>> longSparseArray9 = longSparseArray7;
                            messagesStorage3 = this;
                            queryFinalized.dispose();
                            try {
                                if (arrayList26.isEmpty()) {
                                    arrayList10 = arrayList6;
                                    arrayList11 = arrayList5;
                                    arrayList12 = arrayList27;
                                    hashSet3 = hashSet7;
                                    messagesStorage4 = messagesStorage3;
                                    sQLiteCursor3 = null;
                                } else {
                                    StringBuilder sb = new StringBuilder();
                                    int i13 = 0;
                                    while (i13 < arrayList26.size()) {
                                        ArrayList arrayList28 = arrayList26;
                                        try {
                                            Pair pair = (Pair) arrayList28.get(i13);
                                            sb.append("uid = ");
                                            sb.append(pair.first);
                                            sb.append(" AND group_id = ");
                                            sb.append(pair.second);
                                            i13++;
                                            if (i13 < arrayList28.size()) {
                                                sb.append(" OR ");
                                            }
                                            arrayList26 = arrayList28;
                                        } catch (Exception e10) {
                                            exc = e10;
                                            messagesStorage = messagesStorage3;
                                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                            arrayList = arrayList8;
                                            sQLiteCursor2 = null;
                                        } catch (Throwable th5) {
                                            th = th5;
                                            sQLiteCursor = null;
                                            if (sQLiteCursor != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    arrayList10 = arrayList6;
                                    int i14 = 0;
                                    SQLiteCursor queryFinalized2 = messagesStorage3.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata, group_id FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                                    while (queryFinalized2.next()) {
                                        try {
                                            long longValue4 = queryFinalized2.longValue(i14);
                                            NativeByteBuffer byteBufferValue5 = queryFinalized2.byteBufferValue(1);
                                            int i15 = 0;
                                            while (true) {
                                                if (i15 >= tLRPC$TL_messages_dialogs2.dialogs.size()) {
                                                    arrayList13 = arrayList5;
                                                    arrayList14 = arrayList27;
                                                    tLRPC$Dialog = null;
                                                    break;
                                                }
                                                tLRPC$Dialog = tLRPC$TL_messages_dialogs2.dialogs.get(i15);
                                                if (tLRPC$Dialog != null) {
                                                    arrayList13 = arrayList5;
                                                    arrayList14 = arrayList27;
                                                    if (tLRPC$Dialog.id == longValue4) {
                                                        break;
                                                    }
                                                } else {
                                                    arrayList13 = arrayList5;
                                                    arrayList14 = arrayList27;
                                                }
                                                i15++;
                                                arrayList5 = arrayList13;
                                                arrayList27 = arrayList14;
                                            }
                                            if (tLRPC$Dialog == null || byteBufferValue5 == null) {
                                                hashSet4 = hashSet7;
                                                messagesStorage2 = messagesStorage3;
                                            } else {
                                                TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                if (TLdeserialize3 != null) {
                                                    hashSet4 = hashSet7;
                                                    try {
                                                        try {
                                                            TLdeserialize3.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                                                            byteBufferValue5.reuse();
                                                            MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized2.intValue(2));
                                                            TLdeserialize3.id = queryFinalized2.intValue(3);
                                                            int intValue6 = queryFinalized2.intValue(5);
                                                            if (intValue6 != 0) {
                                                                tLRPC$Dialog.last_message_date = intValue6;
                                                            }
                                                            TLdeserialize3.send_state = queryFinalized2.intValue(4);
                                                            TLdeserialize3.dialog_id = longValue4;
                                                            tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize3);
                                                            addUsersAndChatsFromMessage(TLdeserialize3, arrayList2, arrayList25, null);
                                                            try {
                                                                TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = TLdeserialize3.reply_to;
                                                                if (tLRPC$MessageReplyHeader2 != null && tLRPC$MessageReplyHeader2.reply_to_msg_id != 0) {
                                                                    TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                                    if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                                        if (!queryFinalized2.isNull(7) && (byteBufferValue = queryFinalized2.byteBufferValue(7)) != null) {
                                                                            TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                                            TLdeserialize3.replyMessage = TLdeserialize4;
                                                                            TLdeserialize4.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                                            byteBufferValue.reuse();
                                                                            TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                                            if (tLRPC$Message2 != null) {
                                                                                try {
                                                                                    addUsersAndChatsFromMessage(tLRPC$Message2, arrayList2, arrayList25, null);
                                                                                    if (TLdeserialize3.replyMessage == null) {
                                                                                        addReplyMessages(TLdeserialize3, longSparseArray8, longSparseArray9);
                                                                                    }
                                                                                    messagesStorage2 = this;
                                                                                } catch (Exception e11) {
                                                                                    e = e11;
                                                                                    messagesStorage2 = this;
                                                                                    try {
                                                                                        messagesStorage2.checkSQLException(e);
                                                                                        messagesStorage3 = messagesStorage2;
                                                                                        arrayList5 = arrayList13;
                                                                                        i14 = 0;
                                                                                        hashSet7 = hashSet4;
                                                                                        arrayList27 = arrayList14;
                                                                                    } catch (Exception e12) {
                                                                                        e = e12;
                                                                                        sQLiteCursor2 = queryFinalized2;
                                                                                        messagesStorage = messagesStorage2;
                                                                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                                                        arrayList = arrayList8;
                                                                                        exc = e;
                                                                                        tLRPC$TL_messages_dialogs.dialogs.clear();
                                                                                        tLRPC$TL_messages_dialogs.users.clear();
                                                                                        tLRPC$TL_messages_dialogs.chats.clear();
                                                                                        arrayList.clear();
                                                                                        messagesStorage.checkSQLException(exc);
                                                                                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                                                        if (sQLiteCursor2 == null) {
                                                                                        }
                                                                                        sQLiteCursor2.dispose();
                                                                                        return;
                                                                                    } catch (Throwable th6) {
                                                                                        th = th6;
                                                                                        sQLiteCursor = queryFinalized2;
                                                                                        th = th;
                                                                                        if (sQLiteCursor != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if (TLdeserialize3.replyMessage == null) {
                                                                        }
                                                                        messagesStorage2 = this;
                                                                    }
                                                                }
                                                                messagesStorage2 = this;
                                                            } catch (Exception e13) {
                                                                e = e13;
                                                            }
                                                        } catch (Throwable th7) {
                                                            th = th7;
                                                            sQLiteCursor = queryFinalized2;
                                                        }
                                                    } catch (Exception e14) {
                                                        e = e14;
                                                        messagesStorage = this;
                                                        sQLiteCursor2 = queryFinalized2;
                                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                        arrayList = arrayList8;
                                                        exc = e;
                                                        tLRPC$TL_messages_dialogs.dialogs.clear();
                                                        tLRPC$TL_messages_dialogs.users.clear();
                                                        tLRPC$TL_messages_dialogs.chats.clear();
                                                        arrayList.clear();
                                                        messagesStorage.checkSQLException(exc);
                                                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                        if (sQLiteCursor2 == null) {
                                                        }
                                                        sQLiteCursor2.dispose();
                                                        return;
                                                    }
                                                } else {
                                                    hashSet4 = hashSet7;
                                                    messagesStorage2 = messagesStorage3;
                                                    byteBufferValue5.reuse();
                                                }
                                            }
                                            messagesStorage3 = messagesStorage2;
                                            arrayList5 = arrayList13;
                                            i14 = 0;
                                            hashSet7 = hashSet4;
                                            arrayList27 = arrayList14;
                                        } catch (Exception e15) {
                                            e = e15;
                                            sQLiteCursor2 = queryFinalized2;
                                            messagesStorage = messagesStorage3;
                                        } catch (Throwable th8) {
                                            th = th8;
                                            sQLiteCursor = queryFinalized2;
                                        }
                                    }
                                    arrayList11 = arrayList5;
                                    arrayList12 = arrayList27;
                                    hashSet3 = hashSet7;
                                    messagesStorage4 = messagesStorage3;
                                    queryFinalized2.dispose();
                                    sQLiteCursor3 = queryFinalized2;
                                }
                                i4 = i12 + 1;
                                longSparseArray = longSparseArray8;
                                hashSet = hashSet3;
                                arrayList3 = arrayList25;
                                longSparseArray2 = longSparseArray9;
                                messagesStorage5 = messagesStorage4;
                                arrayList19 = arrayList8;
                                arrayList6 = arrayList10;
                                arrayList5 = arrayList11;
                                arrayList4 = arrayList12;
                                arrayList7 = arrayList24;
                                jArr2 = jArr;
                            } catch (Exception e16) {
                                exc = e16;
                                sQLiteCursor2 = null;
                                messagesStorage = messagesStorage3;
                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                arrayList = arrayList8;
                                tLRPC$TL_messages_dialogs.dialogs.clear();
                                tLRPC$TL_messages_dialogs.users.clear();
                                tLRPC$TL_messages_dialogs.chats.clear();
                                arrayList.clear();
                                messagesStorage.checkSQLException(exc);
                                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                if (sQLiteCursor2 == null) {
                                }
                                sQLiteCursor2.dispose();
                                return;
                            } catch (Throwable th9) {
                                th = th9;
                                sQLiteCursor = null;
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e17) {
                            messagesStorage = this;
                            exc = e17;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            sQLiteCursor2 = sQLiteCursor3;
                            arrayList = arrayList8;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor2 == null) {
                            }
                            sQLiteCursor2.dispose();
                            return;
                        } catch (Throwable th10) {
                            th = th10;
                            th = th;
                            sQLiteCursor = sQLiteCursor3;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e18) {
                        exc = e18;
                        messagesStorage = messagesStorage5;
                    } catch (Throwable th11) {
                        th = th11;
                        sQLiteCursor = sQLiteCursor3;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    arrayList = arrayList8;
                } catch (Exception e19) {
                    e = e19;
                    messagesStorage = messagesStorage5;
                    arrayList = arrayList19;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                } catch (Throwable th12) {
                    th = th12;
                }
                tLRPC$TL_messages_dialogs.dialogs.clear();
                tLRPC$TL_messages_dialogs.users.clear();
                tLRPC$TL_messages_dialogs.chats.clear();
                arrayList.clear();
                messagesStorage.checkSQLException(exc);
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                if (sQLiteCursor2 == null) {
                    return;
                }
                sQLiteCursor2.dispose();
                return;
            }
            if (!hashSet2.isEmpty()) {
                HashSet<Long> hashSet8 = new HashSet<>();
                Iterator it = hashSet2.iterator();
                while (it.hasNext()) {
                    Long l = (Long) it.next();
                    for (int i16 = 0; i16 < tLRPC$TL_messages_dialogs2.users.size(); i16++) {
                        if (tLRPC$TL_messages_dialogs2.users.get(i16).id == l.longValue() && tLRPC$TL_messages_dialogs2.users.get(i16).premium) {
                            hashSet8.add(l);
                        }
                    }
                }
                if (!hashSet8.isEmpty()) {
                    arrayList9 = messagesStorage2.loadUserInfos(hashSet8);
                    messagesStorage = this;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList, arrayList9, i, i2, i3, 1, false, false, true);
                    if (sQLiteCursor2 == null) {
                        return;
                    }
                    sQLiteCursor2.dispose();
                    return;
                }
            }
            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList, arrayList9, i, i2, i3, 1, false, false, true);
            if (sQLiteCursor2 == null) {
            }
            sQLiteCursor2.dispose();
            return;
        } catch (Throwable th13) {
            Throwable th14 = th13;
            th = th14;
            sQLiteCursor = sQLiteCursor2;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
        ArrayList arrayList29 = arrayList5;
        ArrayList<Long> arrayList30 = arrayList3;
        ArrayList arrayList31 = arrayList4;
        messagesStorage2 = messagesStorage5;
        hashSet2 = hashSet;
        loadReplyMessages(longSparseArray, longSparseArray2, arrayList2, arrayList30, 0);
        if (jArr != null) {
            try {
                ArrayList arrayList32 = new ArrayList();
                for (int i17 = 0; i17 < jArr.length; i17++) {
                    long j2 = jArr[i17];
                    if (!DialogObject.isEncryptedDialog(j2)) {
                        if (j2 > 0) {
                            if (!arrayList2.contains(Long.valueOf(j2))) {
                                arrayList2.add(Long.valueOf(j2));
                            }
                        } else {
                            long j3 = -j2;
                            if (!arrayList30.contains(Long.valueOf(j3))) {
                                arrayList30.add(Long.valueOf(j3));
                            }
                        }
                        if (!arrayList29.contains(Long.valueOf(jArr[i17]))) {
                            arrayList32.add(Long.valueOf(jArr[i17]));
                        }
                    }
                }
                if (arrayList32.isEmpty()) {
                    longSparseArray3 = null;
                } else {
                    longSparseArray3 = new LongSparseArray(arrayList32.size());
                    SQLiteCursor queryFinalized3 = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN(%s)", TextUtils.join(",", arrayList32)), new Object[0]);
                    while (queryFinalized3.next()) {
                        try {
                            longSparseArray3.put(queryFinalized3.longValue(0), Integer.valueOf(queryFinalized3.intValue(1)));
                        } catch (Exception e20) {
                            exc = e20;
                            sQLiteCursor2 = queryFinalized3;
                            messagesStorage = messagesStorage2;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            arrayList = arrayList8;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor2 == null) {
                            }
                            sQLiteCursor2.dispose();
                            return;
                        } catch (Throwable th15) {
                            th = th15;
                            sQLiteCursor = queryFinalized3;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    queryFinalized3.dispose();
                    sQLiteCursor3 = null;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda143
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDialogs$219(longSparseArray3);
                    }
                });
            } catch (Exception e21) {
                exc = e21;
                messagesStorage = messagesStorage2;
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                sQLiteCursor2 = sQLiteCursor3;
                arrayList = arrayList8;
                tLRPC$TL_messages_dialogs.dialogs.clear();
                tLRPC$TL_messages_dialogs.users.clear();
                tLRPC$TL_messages_dialogs.chats.clear();
                arrayList.clear();
                messagesStorage.checkSQLException(exc);
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                if (sQLiteCursor2 == null) {
                }
                sQLiteCursor2.dispose();
                return;
            } catch (Throwable th16) {
                th = th16;
                sQLiteCursor = sQLiteCursor3;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        sQLiteCursor2 = sQLiteCursor3;
        if (arrayList31.isEmpty()) {
            arrayList = arrayList8;
        } else {
            try {
                try {
                    arrayList = arrayList8;
                    try {
                        messagesStorage2.getEncryptedChatsInternal(TextUtils.join(",", arrayList31), arrayList, arrayList2);
                    } catch (Exception e22) {
                        exc = e22;
                        messagesStorage = messagesStorage2;
                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    }
                } catch (Throwable th17) {
                    th = th17;
                    sQLiteCursor = sQLiteCursor2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e23) {
                exc = e23;
                messagesStorage = messagesStorage2;
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                arrayList = arrayList8;
                tLRPC$TL_messages_dialogs.dialogs.clear();
                tLRPC$TL_messages_dialogs.users.clear();
                tLRPC$TL_messages_dialogs.chats.clear();
                arrayList.clear();
                messagesStorage.checkSQLException(exc);
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                if (sQLiteCursor2 == null) {
                }
                sQLiteCursor2.dispose();
                return;
            }
        }
        if (!arrayList30.isEmpty()) {
            messagesStorage2.getChatsInternal(TextUtils.join(",", arrayList30), tLRPC$TL_messages_dialogs2.chats);
        }
        if (!arrayList2.isEmpty()) {
            messagesStorage2.getUsersInternal(arrayList2, tLRPC$TL_messages_dialogs2.users);
        }
        arrayList9 = null;
        messagesStorage = this;
        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogs$219(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i, long j2) throws Exception {
        int i2;
        int i3;
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        if (j2 != 0) {
            sQLitePreparedStatement.bindLong(2, j2);
            i2 = 3;
        } else {
            i2 = 2;
        }
        int i4 = i2 + 1;
        sQLitePreparedStatement.bindInteger(i2, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(i4, i);
        sQLitePreparedStatement.step();
        for (int i5 = 0; i5 < 8; i5++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            if (j2 != 0) {
                sQLitePreparedStatement2.bindLong(2, j2);
                i3 = 3;
            } else {
                i3 = 2;
            }
            int i6 = i3 + 1;
            sQLitePreparedStatement2.bindInteger(i3, i5);
            int i7 = i6 + 1;
            sQLitePreparedStatement2.bindInteger(i6, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(i7, i);
            sQLitePreparedStatement2.step();
        }
    }

    public void updateDialogData(final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogData$221(tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0079  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogData$221(TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data FROM dialogs WHERE did = " + tLRPC$Dialog.id, new Object[0]);
            try {
                if (!queryFinalized.next()) {
                    queryFinalized.dispose();
                    return;
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET data = ? WHERE did = ?");
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Dialog.getObjectSize());
                    tLRPC$Dialog.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindLong(2, tLRPC$Dialog.id);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                    queryFinalized.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = null;
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:35:0x00f1, code lost:
        if (r8 != false) goto L348;
     */
    /* JADX WARN: Code restructure failed: missing block: B:36:0x00f3, code lost:
        r29 = r5;
        r11 = r6;
        r7 = r16;
        r27 = r17;
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x0183, code lost:
        if (r8 < 0) goto L348;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:382:0x0718  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x071d  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x0722  */
    /* JADX WARN: Removed duplicated region for block: B:388:0x0727  */
    /* JADX WARN: Removed duplicated region for block: B:390:0x072c  */
    /* JADX WARN: Removed duplicated region for block: B:392:0x0731  */
    /* JADX WARN: Removed duplicated region for block: B:394:0x0736  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x073b  */
    /* JADX WARN: Removed duplicated region for block: B:398:0x0740  */
    /* JADX WARN: Removed duplicated region for block: B:400:0x0745  */
    /* JADX WARN: Removed duplicated region for block: B:408:0x0754  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x0759  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x075e  */
    /* JADX WARN: Removed duplicated region for block: B:414:0x0763  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0768  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x076d  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x0772  */
    /* JADX WARN: Removed duplicated region for block: B:422:0x0777  */
    /* JADX WARN: Removed duplicated region for block: B:424:0x077c  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x0781  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x0786  */
    /* JADX WARN: Removed duplicated region for block: B:511:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void putDialogsInternal(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        Throwable th3;
        Throwable e;
        SQLitePreparedStatement executeFast;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLiteCursor queryFinalized;
        boolean next;
        int i3;
        SQLitePreparedStatement sQLitePreparedStatement12;
        boolean z;
        int i4;
        int i5;
        NativeByteBuffer nativeByteBuffer;
        SQLitePreparedStatement sQLitePreparedStatement13;
        long j;
        int i6;
        TLRPC$Dialog tLRPC$Dialog;
        SQLitePreparedStatement sQLitePreparedStatement14;
        int i7;
        int i8;
        int i9;
        NativeByteBuffer nativeByteBuffer2;
        int i10;
        int i11 = i;
        try {
            this.database.beginTransaction();
            LongSparseArray longSparseArray = new LongSparseArray(tLRPC$messages_Dialogs.messages.size());
            for (int i12 = 0; i12 < tLRPC$messages_Dialogs.messages.size(); i12++) {
                try {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Dialogs.messages.get(i12);
                    long dialogId = MessageObject.getDialogId(tLRPC$Message);
                    if (!longSparseArray.containsKey(dialogId) || (longSparseArray.get(dialogId) != null && ((TLRPC$Message) longSparseArray.get(dialogId)).date < tLRPC$Message.date)) {
                        longSparseArray.put(dialogId, tLRPC$Message);
                    }
                } catch (Exception e2) {
                    th2 = e2;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement8 = null;
                    try {
                        checkSQLException(th2);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (sQLitePreparedStatement7 != null) {
                            sQLitePreparedStatement7.dispose();
                        }
                        if (sQLitePreparedStatement4 != null) {
                            sQLitePreparedStatement4.dispose();
                        }
                        if (sQLitePreparedStatement8 != null) {
                            sQLitePreparedStatement8.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement5 != null) {
                            sQLitePreparedStatement5.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLiteCursor = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement8 = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            if (tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                sQLiteCursor = null;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = null;
            } else {
                sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, NULL, ?, ?)");
                try {
                    executeFast = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                } catch (Exception e3) {
                    sQLiteCursor = null;
                    th2 = e3;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = sQLitePreparedStatement7;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    checkSQLException(th2);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th6) {
                    sQLiteCursor = null;
                    th = th6;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement6 = sQLitePreparedStatement7;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
                try {
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                    try {
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                        try {
                            sQLitePreparedStatement6 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                            try {
                                sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                i2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                int i13 = 0;
                                while (true) {
                                    try {
                                        sQLitePreparedStatement7 = executeFast;
                                        sQLitePreparedStatement10 = executeFast2;
                                        if (i13 >= tLRPC$messages_Dialogs.dialogs.size()) {
                                            break;
                                        }
                                        try {
                                            TLRPC$Dialog tLRPC$Dialog2 = tLRPC$messages_Dialogs.dialogs.get(i13);
                                            DialogObject.initDialog(tLRPC$Dialog2);
                                            LongSparseArray longSparseArray2 = longSparseArray;
                                            this.unknownDialogsIds.remove(tLRPC$Dialog2.id);
                                            if (i11 == 1) {
                                                try {
                                                    queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                } catch (Exception e4) {
                                                    th2 = e4;
                                                    sQLitePreparedStatement8 = executeFast3;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    sQLiteCursor = null;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement == null) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                    sQLitePreparedStatement8 = executeFast3;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    sQLiteCursor = null;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                                try {
                                                    next = queryFinalized.next();
                                                    queryFinalized.dispose();
                                                } catch (Exception e5) {
                                                    th2 = e5;
                                                    sQLitePreparedStatement8 = executeFast3;
                                                    sQLiteCursor = queryFinalized;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement == null) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Throwable th8) {
                                                    th = th8;
                                                    sQLitePreparedStatement8 = executeFast3;
                                                    sQLiteCursor = queryFinalized;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                if (i11 == 2) {
                                                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                    if (queryFinalized2.next()) {
                                                        if (tLRPC$Dialog2.pinned) {
                                                            tLRPC$Dialog2.pinnedNum = queryFinalized2.intValue(0);
                                                        }
                                                        next = true;
                                                    } else {
                                                        next = false;
                                                    }
                                                    queryFinalized2.dispose();
                                                } else {
                                                    if (i11 == 3) {
                                                        SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                        int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                        queryFinalized3.dispose();
                                                    }
                                                    next = false;
                                                }
                                                TLRPC$Message tLRPC$Message2 = (TLRPC$Message) longSparseArray2.get(tLRPC$Dialog2.id);
                                                longSparseArray2 = longSparseArray2;
                                                if (tLRPC$Message2 != null) {
                                                    try {
                                                        int max = Math.max(tLRPC$Message2.date, 0);
                                                        if (isValidKeyboardToSave(tLRPC$Message2)) {
                                                            z = next;
                                                            try {
                                                                long j2 = tLRPC$Dialog2.id;
                                                                i3 = i13;
                                                                sQLitePreparedStatement12 = executeFast3;
                                                                try {
                                                                    getMediaDataController().putBotKeyboard(TopicKey.of(j2, MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(j2))), tLRPC$Message2);
                                                                } catch (Exception e6) {
                                                                    e = e6;
                                                                    th2 = e;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                    sQLiteCursor = null;
                                                                    checkSQLException(th2);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement == null) {
                                                                    }
                                                                    sQLitePreparedStatement.dispose();
                                                                } catch (Throwable th9) {
                                                                    th = th9;
                                                                    th = th;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                    sQLiteCursor = null;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLiteCursor != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e7) {
                                                                e = e7;
                                                                sQLitePreparedStatement12 = executeFast3;
                                                            } catch (Throwable th10) {
                                                                th = th10;
                                                                sQLitePreparedStatement12 = executeFast3;
                                                            }
                                                        } else {
                                                            i3 = i13;
                                                            sQLitePreparedStatement12 = executeFast3;
                                                            z = next;
                                                        }
                                                        try {
                                                            fixUnsupportedMedia(tLRPC$Message2);
                                                            MessageObject.normalizeFlags(tLRPC$Message2);
                                                            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                            tLRPC$Message2.serializeToStream(nativeByteBuffer3);
                                                            sQLitePreparedStatement3.requery();
                                                            sQLitePreparedStatement3.bindInteger(1, tLRPC$Message2.id);
                                                            sQLitePreparedStatement3.bindLong(2, tLRPC$Dialog2.id);
                                                            sQLitePreparedStatement3.bindInteger(3, MessageObject.getUnreadFlags(tLRPC$Message2));
                                                            sQLitePreparedStatement3.bindInteger(4, tLRPC$Message2.send_state);
                                                            sQLitePreparedStatement3.bindInteger(5, tLRPC$Message2.date);
                                                            sQLitePreparedStatement3.bindByteBuffer(6, nativeByteBuffer3);
                                                            sQLitePreparedStatement3.bindInteger(7, (MessageObject.isOut(tLRPC$Message2) || tLRPC$Message2.from_scheduled) ? 1 : 0);
                                                            sQLitePreparedStatement3.bindInteger(8, 0);
                                                            if ((tLRPC$Message2.flags & 1024) != 0) {
                                                                i5 = tLRPC$Message2.views;
                                                                i4 = 9;
                                                            } else {
                                                                i4 = 9;
                                                                i5 = 0;
                                                            }
                                                            sQLitePreparedStatement3.bindInteger(i4, i5);
                                                            int i14 = tLRPC$Message2.stickerVerified;
                                                            sQLitePreparedStatement3.bindInteger(10, i14 == 0 ? 1 : i14 == 2 ? 2 : 0);
                                                            sQLitePreparedStatement3.bindInteger(11, tLRPC$Message2.mentioned ? 1 : 0);
                                                            sQLitePreparedStatement3.bindInteger(12, tLRPC$Message2.forwards);
                                                            if (tLRPC$Message2.replies != null) {
                                                                nativeByteBuffer = new NativeByteBuffer(tLRPC$Message2.replies.getObjectSize());
                                                                tLRPC$Message2.replies.serializeToStream(nativeByteBuffer);
                                                                sQLitePreparedStatement3.bindByteBuffer(13, nativeByteBuffer);
                                                            } else {
                                                                sQLitePreparedStatement3.bindNull(13);
                                                                nativeByteBuffer = null;
                                                            }
                                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message2.reply_to;
                                                            if (tLRPC$MessageReplyHeader != null) {
                                                                int i15 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                if (i15 == 0) {
                                                                    i15 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                }
                                                                sQLitePreparedStatement3.bindInteger(14, i15);
                                                            } else {
                                                                sQLitePreparedStatement3.bindInteger(14, 0);
                                                            }
                                                            sQLitePreparedStatement3.bindLong(15, MessageObject.getChannelId(tLRPC$Message2));
                                                            if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                sQLitePreparedStatement3.bindLong(16, tLRPC$Message2.grouped_id);
                                                            } else {
                                                                sQLitePreparedStatement3.bindNull(16);
                                                            }
                                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message2.reply_to;
                                                            if (tLRPC$MessageReplyHeader2 != null) {
                                                                sQLitePreparedStatement3.bindInteger(17, tLRPC$MessageReplyHeader2.story_id);
                                                            } else {
                                                                sQLitePreparedStatement3.bindInteger(17, 0);
                                                            }
                                                            sQLitePreparedStatement3.step();
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                try {
                                                                    sQLitePreparedStatement10.requery();
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement10;
                                                                    try {
                                                                        sQLitePreparedStatement13.bindInteger(1, tLRPC$Message2.id);
                                                                        sQLitePreparedStatement13.bindLong(2, tLRPC$Dialog2.id);
                                                                        sQLitePreparedStatement13.bindInteger(3, tLRPC$Message2.date);
                                                                        sQLitePreparedStatement13.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message2));
                                                                        sQLitePreparedStatement13.bindByteBuffer(5, nativeByteBuffer3);
                                                                        sQLitePreparedStatement13.step();
                                                                    } catch (Exception e8) {
                                                                        e = e8;
                                                                        th2 = e;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                        sQLiteCursor = null;
                                                                        checkSQLException(th2);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement == null) {
                                                                        }
                                                                        sQLitePreparedStatement.dispose();
                                                                    } catch (Throwable th11) {
                                                                        th = th11;
                                                                        th = th;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                        sQLiteCursor = null;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement3 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e9) {
                                                                    e = e9;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement10;
                                                                } catch (Throwable th12) {
                                                                    th = th12;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement10;
                                                                }
                                                            } else {
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement10;
                                                            }
                                                            if (nativeByteBuffer != null) {
                                                                nativeByteBuffer.reuse();
                                                            }
                                                            try {
                                                                nativeByteBuffer3.reuse();
                                                                if (tLRPC$Message2.ttl_period != 0 && tLRPC$Message2.id > 0) {
                                                                    if (sQLitePreparedStatement == null) {
                                                                        sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                                                                    }
                                                                    sQLitePreparedStatement.requery();
                                                                    sQLitePreparedStatement.bindInteger(1, tLRPC$Message2.id);
                                                                    sQLitePreparedStatement.bindLong(2, tLRPC$Message2.dialog_id);
                                                                    sQLitePreparedStatement.bindInteger(3, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                    sQLitePreparedStatement.bindInteger(4, 0);
                                                                    sQLitePreparedStatement.step();
                                                                    i2 = Math.min(i2, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                }
                                                                int i16 = i2;
                                                                SQLitePreparedStatement sQLitePreparedStatement15 = sQLitePreparedStatement;
                                                                try {
                                                                    if (tLRPC$Message2.media instanceof TLRPC$TL_messageMediaPoll) {
                                                                        if (sQLitePreparedStatement2 == null) {
                                                                            try {
                                                                                sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                            } catch (Exception e10) {
                                                                                th2 = e10;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement15;
                                                                                sQLiteCursor = null;
                                                                                checkSQLException(th2);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement == null) {
                                                                                }
                                                                                sQLitePreparedStatement.dispose();
                                                                            } catch (Throwable th13) {
                                                                                th = th13;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement15;
                                                                                sQLiteCursor = null;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLiteCursor != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        sQLitePreparedStatement2.requery();
                                                                        sQLitePreparedStatement2.bindInteger(1, tLRPC$Message2.id);
                                                                        sQLitePreparedStatement2.bindLong(2, tLRPC$Message2.dialog_id);
                                                                        sQLitePreparedStatement2.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message2.media).poll.id);
                                                                        sQLitePreparedStatement2.step();
                                                                    }
                                                                    SQLitePreparedStatement sQLitePreparedStatement16 = sQLitePreparedStatement2;
                                                                    if (z) {
                                                                        try {
                                                                            j = tLRPC$Dialog2.id;
                                                                            i6 = tLRPC$Message2.id;
                                                                            tLRPC$Dialog = tLRPC$Dialog2;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                            i7 = 6;
                                                                            i8 = 1;
                                                                        } catch (Exception e11) {
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                            th2 = e11;
                                                                        } catch (Throwable th14) {
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                            th = th14;
                                                                        }
                                                                        try {
                                                                            closeHolesInTable("messages_holes", j, i6, i6, 0L);
                                                                            long j3 = tLRPC$Dialog.id;
                                                                            int i17 = tLRPC$Message2.id;
                                                                            closeHolesInMedia(j3, i17, i17, -1, 0L);
                                                                        } catch (Exception e12) {
                                                                            th2 = e12;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement16;
                                                                            sQLiteCursor = null;
                                                                            checkSQLException(th2);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement == null) {
                                                                            }
                                                                            sQLitePreparedStatement.dispose();
                                                                        } catch (Throwable th15) {
                                                                            th = th15;
                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement14;
                                                                            sQLitePreparedStatement = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement16;
                                                                            sQLiteCursor = null;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        tLRPC$Dialog = tLRPC$Dialog2;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                        i7 = 6;
                                                                        i8 = 1;
                                                                        createFirstHoles(tLRPC$Dialog.id, sQLitePreparedStatement6, sQLitePreparedStatement5, tLRPC$Message2.id, 0L);
                                                                    }
                                                                    i9 = max;
                                                                    i2 = i16;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement15;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement16;
                                                                } catch (Exception e13) {
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                    th2 = e13;
                                                                } catch (Throwable th16) {
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                    th = th16;
                                                                }
                                                            } catch (Exception e14) {
                                                                e = e14;
                                                                sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                th2 = e;
                                                                sQLiteCursor = null;
                                                                checkSQLException(th2);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement == null) {
                                                                }
                                                                sQLitePreparedStatement.dispose();
                                                            } catch (Throwable th17) {
                                                                th = th17;
                                                                sQLitePreparedStatement4 = sQLitePreparedStatement13;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement12;
                                                                th = th;
                                                                sQLiteCursor = null;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } catch (Exception e15) {
                                                            e = e15;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                        } catch (Throwable th18) {
                                                            th = th18;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                        }
                                                    } catch (Exception e16) {
                                                        e = e16;
                                                        sQLitePreparedStatement8 = executeFast3;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    } catch (Throwable th19) {
                                                        th = th19;
                                                        sQLitePreparedStatement8 = executeFast3;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    }
                                                } else {
                                                    tLRPC$Dialog = tLRPC$Dialog2;
                                                    i3 = i13;
                                                    sQLitePreparedStatement8 = executeFast3;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                                    i7 = 6;
                                                    i8 = 1;
                                                    i9 = 0;
                                                }
                                                try {
                                                    sQLitePreparedStatement14.requery();
                                                    executeFast = sQLitePreparedStatement14;
                                                    try {
                                                        executeFast.bindLong(i8, tLRPC$Dialog.id);
                                                        executeFast.bindInteger(2, i9);
                                                        executeFast.bindInteger(3, tLRPC$Dialog.unread_count);
                                                        executeFast.bindInteger(4, tLRPC$Dialog.top_message);
                                                        executeFast.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                                                        executeFast.bindInteger(i7, tLRPC$Dialog.read_outbox_max_id);
                                                        executeFast.bindLong(7, 0L);
                                                        executeFast.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                                                        executeFast.bindInteger(9, tLRPC$Dialog.pts);
                                                        executeFast.bindInteger(10, 0);
                                                        executeFast.bindInteger(11, tLRPC$Dialog.pinnedNum);
                                                        boolean z2 = tLRPC$Dialog.unread_mark;
                                                        int i18 = z2;
                                                        if (tLRPC$Dialog.view_forum_as_messages) {
                                                            i18 = (z2 ? 1 : 0) | 64;
                                                        }
                                                        executeFast.bindInteger(12, i18);
                                                        executeFast.bindInteger(13, tLRPC$Dialog.folder_id);
                                                        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                                                            try {
                                                                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                                                                nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_dialogFolder.folder.getObjectSize());
                                                                tLRPC$TL_dialogFolder.folder.serializeToStream(nativeByteBuffer2);
                                                                executeFast.bindByteBuffer(14, nativeByteBuffer2);
                                                            } catch (Exception e17) {
                                                                e = e17;
                                                                th2 = e;
                                                                sQLitePreparedStatement7 = executeFast;
                                                                sQLiteCursor = null;
                                                                checkSQLException(th2);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement == null) {
                                                                }
                                                                sQLitePreparedStatement.dispose();
                                                            } catch (Throwable th20) {
                                                                th = th20;
                                                                th = th;
                                                                sQLitePreparedStatement7 = executeFast;
                                                                sQLiteCursor = null;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } else {
                                                            executeFast.bindNull(14);
                                                            nativeByteBuffer2 = null;
                                                        }
                                                        executeFast.bindInteger(15, tLRPC$Dialog.unread_reactions_count);
                                                        if (tLRPC$Message2 != null && (tLRPC$Message2.flags & 131072) != 0) {
                                                            executeFast.bindLong(16, tLRPC$Message2.grouped_id);
                                                        } else {
                                                            executeFast.bindNull(16);
                                                        }
                                                        executeFast.bindInteger(17, tLRPC$Dialog.ttl_period);
                                                        executeFast.step();
                                                        if (nativeByteBuffer2 != null) {
                                                            nativeByteBuffer2.reuse();
                                                        }
                                                        if (tLRPC$Dialog.notify_settings != null) {
                                                            sQLitePreparedStatement8.requery();
                                                            sQLitePreparedStatement11 = sQLitePreparedStatement8;
                                                            try {
                                                                sQLitePreparedStatement11.bindLong(i8, tLRPC$Dialog.id);
                                                                if (tLRPC$Dialog.notify_settings.mute_until != 0) {
                                                                    i10 = 2;
                                                                } else {
                                                                    i10 = 2;
                                                                    i8 = 0;
                                                                }
                                                                sQLitePreparedStatement11.bindInteger(i10, i8);
                                                                sQLitePreparedStatement11.step();
                                                            } catch (Exception e18) {
                                                                th2 = e18;
                                                                sQLitePreparedStatement7 = executeFast;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement11;
                                                                sQLiteCursor = null;
                                                                checkSQLException(th2);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement == null) {
                                                                }
                                                                sQLitePreparedStatement.dispose();
                                                            } catch (Throwable th21) {
                                                                th = th21;
                                                                sQLitePreparedStatement7 = executeFast;
                                                                sQLitePreparedStatement8 = sQLitePreparedStatement11;
                                                                sQLiteCursor = null;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                if (sQLitePreparedStatement4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement8 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } else {
                                                            sQLitePreparedStatement11 = sQLitePreparedStatement8;
                                                        }
                                                    } catch (Exception e19) {
                                                        e = e19;
                                                        th2 = e;
                                                        sQLitePreparedStatement7 = executeFast;
                                                        sQLiteCursor = null;
                                                        checkSQLException(th2);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement == null) {
                                                        }
                                                        sQLitePreparedStatement.dispose();
                                                    } catch (Throwable th22) {
                                                        th = th22;
                                                        th = th;
                                                        sQLitePreparedStatement7 = executeFast;
                                                        sQLiteCursor = null;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e20) {
                                                    e = e20;
                                                    executeFast = sQLitePreparedStatement14;
                                                } catch (Throwable th23) {
                                                    th = th23;
                                                    executeFast = sQLitePreparedStatement14;
                                                }
                                            }
                                            i13 = i3 + 1;
                                            executeFast3 = sQLitePreparedStatement11;
                                            longSparseArray = longSparseArray2;
                                            executeFast2 = sQLitePreparedStatement4;
                                            i11 = i;
                                        } catch (Exception e21) {
                                            sQLitePreparedStatement11 = executeFast3;
                                            sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                            th2 = e21;
                                        } catch (Throwable th24) {
                                            sQLitePreparedStatement11 = executeFast3;
                                            sQLitePreparedStatement4 = sQLitePreparedStatement10;
                                            th = th24;
                                        }
                                    } catch (Exception e22) {
                                        e = e22;
                                        sQLitePreparedStatement9 = executeFast3;
                                        sQLitePreparedStatement4 = executeFast2;
                                    } catch (Throwable th25) {
                                        th = th25;
                                        sQLitePreparedStatement9 = executeFast3;
                                        sQLitePreparedStatement4 = executeFast2;
                                    }
                                }
                                sQLitePreparedStatement9 = executeFast3;
                                executeFast = sQLitePreparedStatement7;
                                sQLitePreparedStatement4 = sQLitePreparedStatement10;
                            } catch (Exception e23) {
                                sQLitePreparedStatement4 = executeFast2;
                                sQLiteCursor = null;
                                th2 = e23;
                                sQLitePreparedStatement7 = executeFast;
                                sQLitePreparedStatement8 = executeFast3;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement5 = null;
                            } catch (Throwable th26) {
                                sQLitePreparedStatement4 = executeFast2;
                                sQLiteCursor = null;
                                th = th26;
                                sQLitePreparedStatement7 = executeFast;
                                sQLitePreparedStatement8 = executeFast3;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement5 = null;
                            }
                        } catch (Exception e24) {
                            sQLitePreparedStatement4 = executeFast2;
                            sQLiteCursor = null;
                            th2 = e24;
                            sQLitePreparedStatement7 = executeFast;
                            sQLitePreparedStatement8 = executeFast3;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement5 = null;
                        } catch (Throwable th27) {
                            sQLitePreparedStatement4 = executeFast2;
                            sQLiteCursor = null;
                            th = th27;
                            sQLitePreparedStatement7 = executeFast;
                            sQLitePreparedStatement8 = executeFast3;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement6 = null;
                            sQLitePreparedStatement5 = null;
                        }
                    } catch (Exception e25) {
                        sQLitePreparedStatement4 = executeFast2;
                        sQLiteCursor = null;
                        th2 = e25;
                        sQLitePreparedStatement7 = executeFast;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement5 = null;
                        sQLitePreparedStatement8 = null;
                    } catch (Throwable th28) {
                        sQLitePreparedStatement4 = executeFast2;
                        sQLiteCursor = null;
                        th = th28;
                        sQLitePreparedStatement7 = executeFast;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement5 = null;
                        sQLitePreparedStatement8 = null;
                    }
                    try {
                        sQLitePreparedStatement3.dispose();
                        try {
                            executeFast.dispose();
                            try {
                                sQLitePreparedStatement4.dispose();
                                try {
                                    sQLitePreparedStatement9.dispose();
                                    try {
                                        sQLitePreparedStatement6.dispose();
                                        try {
                                            sQLitePreparedStatement5.dispose();
                                            if (sQLitePreparedStatement != null) {
                                                try {
                                                    sQLitePreparedStatement.dispose();
                                                    sQLiteCursor = null;
                                                    sQLiteCursor = null;
                                                    sQLiteCursor = null;
                                                    try {
                                                        getMessagesController().didAddedNewTask(i2, 0L, null);
                                                    } catch (Exception e26) {
                                                        e = e26;
                                                        th2 = e;
                                                        sQLitePreparedStatement3 = sQLiteCursor;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                        checkSQLException(th2);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                            sQLiteDatabase2.commitTransaction();
                                                        }
                                                        if (sQLiteCursor != null) {
                                                            sQLiteCursor.dispose();
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                            sQLitePreparedStatement3.dispose();
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                            sQLitePreparedStatement7.dispose();
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                            sQLitePreparedStatement4.dispose();
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                            sQLitePreparedStatement8.dispose();
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                            sQLitePreparedStatement6.dispose();
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                            sQLitePreparedStatement6.dispose();
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                            sQLitePreparedStatement5.dispose();
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                            sQLitePreparedStatement2.dispose();
                                                        }
                                                        if (sQLitePreparedStatement == null) {
                                                            return;
                                                        }
                                                        sQLitePreparedStatement.dispose();
                                                    } catch (Throwable th29) {
                                                        th3 = th29;
                                                        th = th3;
                                                        sQLitePreparedStatement3 = sQLiteCursor;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e27) {
                                                    e = e27;
                                                    sQLiteCursor = null;
                                                    th2 = e;
                                                    sQLitePreparedStatement3 = sQLiteCursor;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement == null) {
                                                    }
                                                    sQLitePreparedStatement.dispose();
                                                } catch (Throwable th30) {
                                                    th3 = th30;
                                                    sQLiteCursor = null;
                                                    th = th3;
                                                    sQLitePreparedStatement3 = sQLiteCursor;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement3;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement7;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLiteCursor = null;
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                                sQLitePreparedStatement2.dispose();
                                            }
                                        } catch (Exception e28) {
                                            sQLiteCursor = null;
                                            th2 = e28;
                                            sQLitePreparedStatement3 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                            checkSQLException(th2);
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement == null) {
                                            }
                                            sQLitePreparedStatement.dispose();
                                        } catch (Throwable th31) {
                                            sQLiteCursor = null;
                                            th = th31;
                                            sQLitePreparedStatement3 = null;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement8 = sQLitePreparedStatement4;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e29) {
                                        sQLiteCursor = null;
                                        th2 = e29;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement4 = null;
                                    } catch (Throwable th32) {
                                        sQLiteCursor = null;
                                        th = th32;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement4 = null;
                                    }
                                } catch (Exception e30) {
                                    sQLiteCursor = null;
                                    th2 = e30;
                                    sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement4 = null;
                                    checkSQLException(th2);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement == null) {
                                    }
                                    sQLitePreparedStatement.dispose();
                                } catch (Throwable th33) {
                                    sQLiteCursor = null;
                                    th = th33;
                                    sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement4 = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e31) {
                                sQLiteCursor = null;
                                th2 = e31;
                                sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                sQLitePreparedStatement3 = null;
                                sQLitePreparedStatement7 = null;
                            } catch (Throwable th34) {
                                sQLiteCursor = null;
                                th = th34;
                                sQLitePreparedStatement8 = sQLitePreparedStatement9;
                                sQLitePreparedStatement3 = null;
                                sQLitePreparedStatement7 = null;
                            }
                        } catch (Exception e32) {
                            sQLiteCursor = null;
                            th2 = e32;
                            sQLitePreparedStatement7 = executeFast;
                            sQLitePreparedStatement8 = sQLitePreparedStatement9;
                            sQLitePreparedStatement3 = null;
                        } catch (Throwable th35) {
                            sQLiteCursor = null;
                            th = th35;
                            sQLitePreparedStatement7 = executeFast;
                            sQLitePreparedStatement8 = sQLitePreparedStatement9;
                            sQLitePreparedStatement3 = null;
                        }
                    } catch (Exception e33) {
                        e = e33;
                        sQLiteCursor = null;
                        th2 = e;
                        sQLitePreparedStatement7 = executeFast;
                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                        checkSQLException(th2);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement == null) {
                        }
                        sQLitePreparedStatement.dispose();
                    } catch (Throwable th36) {
                        th = th36;
                        sQLiteCursor = null;
                        th = th;
                        sQLitePreparedStatement7 = executeFast;
                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } catch (Exception e34) {
                    sQLiteCursor = null;
                    th2 = e34;
                    sQLitePreparedStatement7 = executeFast;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    checkSQLException(th2);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th37) {
                    sQLiteCursor = null;
                    th = th37;
                    sQLitePreparedStatement7 = executeFast;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement5 = sQLitePreparedStatement6;
                    sQLitePreparedStatement4 = sQLitePreparedStatement5;
                    sQLitePreparedStatement8 = sQLitePreparedStatement4;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement7 != null) {
                    }
                    if (sQLitePreparedStatement4 != null) {
                    }
                    if (sQLitePreparedStatement8 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            putUsersInternal(tLRPC$messages_Dialogs.users);
            putChatsInternal(tLRPC$messages_Dialogs.chats);
            this.database.commitTransaction();
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement2.dispose();
            }
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e35) {
            sQLiteCursor = null;
            th2 = e35;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        } catch (Throwable th38) {
            sQLiteCursor = null;
            th = th38;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
        }
        sQLitePreparedStatement.dispose();
    }

    public void getDialogFolderId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogFolderId$223(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogFolderId$223(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (this.unknownDialogsIds.get(j) == null) {
                    sQLiteCursor = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                    r2 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : -1;
                    sQLiteCursor.dispose();
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(r2);
                    }
                });
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void setDialogsFolderId(final ArrayList<TLRPC$TL_folderPeer> arrayList, final ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, final long j, final int i) {
        if (arrayList == null && arrayList2 == null && j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda183
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsFolderId$224(arrayList, arrayList2, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsFolderId$224(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        SQLitePreparedStatement executeFast;
        boolean z;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (arrayList != null) {
                int size = arrayList.size();
                z = false;
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$TL_folderPeer tLRPC$TL_folderPeer = (TLRPC$TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_folderPeer.folder_id);
                    if (tLRPC$TL_folderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                z = false;
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = (TLRPC$TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_inputFolderPeer.folder_id);
                    if (tLRPC$TL_inputFolderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                boolean z2 = i == 1;
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
                z = z2;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            if (!z) {
                lambda$checkIfFolderEmpty$226(1);
            }
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal */
    public void lambda$checkIfFolderEmpty$226(final int i) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                boolean z = true;
                sQLiteCursor = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
                while (sQLiteCursor.next()) {
                    long longValue = sQLiteCursor.longValue(0);
                    if (!DialogObject.isUserDialog(longValue) && !DialogObject.isEncryptedDialog(longValue)) {
                        TLRPC$Chat chat = getChat(-longValue);
                        if (ChatObject.isNotInChat(chat) || chat.migrated_to != null) {
                        }
                    }
                    z = false;
                }
                sQLiteCursor.dispose();
                if (z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$checkIfFolderEmptyInternal$225(i);
                        }
                    });
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteDatabase.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$225(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    public void checkIfFolderEmpty(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkIfFolderEmpty$226(i);
            }
        });
    }

    public void unpinAllDialogsExceptNew(final ArrayList<Long> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda173
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$unpinAllDialogsExceptNew$227(arrayList, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00a7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$227(ArrayList arrayList, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            ArrayList arrayList2 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (queryFinalized.intValue(1) == i && !DialogObject.isEncryptedDialog(longValue) && !DialogObject.isFolderDialogId(longValue)) {
                        arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList2.isEmpty()) {
                return;
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
            for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                try {
                    try {
                        long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindInteger(1, 0);
                        sQLitePreparedStatement.bindLong(2, longValue2);
                        sQLitePreparedStatement.step();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    public void setDialogUnread(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogUnread$228(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0043 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0046 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0064 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #2 {Exception -> 0x003d, blocks: (B:9:0x0027, B:27:0x0043, B:29:0x0048, B:28:0x0046, B:19:0x0037, B:32:0x0064, B:33:0x0067), top: B:42:0x0002, outer: #4 }] */
    /* JADX WARN: Type inference failed for: r0v0, types: [org.telegram.SQLite.SQLitePreparedStatement, org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r0v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogUnread$228(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLitePreparedStatement sQLitePreparedStatement = 0;
        try {
            try {
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                        try {
                            i = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                            sQLiteCursor.dispose();
                        } catch (Exception e) {
                            e = e;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            i = 0;
                            if (!z) {
                            }
                            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                            executeFast.bindInteger(1, r8);
                            executeFast.bindLong(2, j);
                            executeFast.step();
                            executeFast.dispose();
                            resetAllUnreadCounters(false);
                            sQLitePreparedStatement = executeFast;
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (0 != 0) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    if (0 != 0) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th2;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                if (0 != 0) {
                }
                throw th;
            }
            int i2 = !z ? i | 1 : i & (-2);
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            executeFast2.bindInteger(1, i2);
            executeFast2.bindLong(2, j);
            executeFast2.step();
            executeFast2.dispose();
            resetAllUnreadCounters(false);
            sQLitePreparedStatement = executeFast2;
        } catch (Exception e3) {
            checkSQLException(e3);
            if (0 == 0) {
                return;
            }
        }
        sQLitePreparedStatement.dispose();
    }

    public void setDialogViewThreadAsMessages(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda133
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogViewThreadAsMessages$229(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:15:0x0030, code lost:
        if (r2 == null) goto L11;
     */
    /* JADX WARN: Removed duplicated region for block: B:27:0x005b A[Catch: all -> 0x0036, Exception -> 0x0038, TryCatch #2 {Exception -> 0x0038, blocks: (B:16:0x0032, B:22:0x003c, B:24:0x0041, B:23:0x003f, B:27:0x005b, B:28:0x005e), top: B:37:0x0002, outer: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogViewThreadAsMessages$229(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        int i = 0;
        try {
            try {
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                        try {
                            if (sQLiteCursor.next()) {
                                i = sQLiteCursor.intValue(0);
                            }
                        } catch (Exception e) {
                            e = e;
                            checkSQLException(e);
                        }
                    } catch (Throwable th) {
                        if (0 != 0) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
            sQLiteCursor.dispose();
            int i2 = z ? i | 64 : i & (-65);
            sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            sQLitePreparedStatement.bindInteger(1, i2);
            sQLitePreparedStatement.bindLong(2, j);
            sQLitePreparedStatement.step();
            sQLitePreparedStatement.dispose();
        } catch (Exception e3) {
            checkSQLException(e3);
            if (0 == 0) {
                return;
            }
        }
        sQLitePreparedStatement.dispose();
    }

    public void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (z) {
                if ((dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                    dialogFilter.pendingUnreadCount = -1;
                }
            } else {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetAllUnreadCounters$230();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAllUnreadCounters$230() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void setDialogPinned(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogPinned$231(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogPinned$231(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void setDialogsPinned(final ArrayList<Long> arrayList, final ArrayList<Integer> arrayList2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsPinned$232(arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsPinned$232(ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, ((Integer) arrayList2.get(i)).intValue());
                    sQLitePreparedStatement.bindLong(2, ((Long) arrayList.get(i)).longValue());
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void putDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i) {
        if (tLRPC$messages_Dialogs.dialogs.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda221
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putDialogs$233(tLRPC$messages_Dialogs, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogs$233(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        putDialogsInternal(tLRPC$messages_Dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda122
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogMaxMessageId$235(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r1 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogMaxMessageId$235(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT MAX(mid) FROM messages_v2 WHERE uid = " + j, new Object[0]);
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getDialogMaxMessageId$234(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getDialogMaxMessageId$234(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    public int getDialogReadMax(final boolean z, final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda230
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogReadMax$236(z, j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x006c, code lost:
        if (r1 == null) goto L9;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogReadMax$236(boolean z, long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT outbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                    }
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT last_mid, inbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        int intValue = sQLiteCursor.intValue(0);
                        int intValue2 = sQLiteCursor.intValue(1);
                        if (intValue2 > intValue) {
                            numArr[0] = 0;
                        } else {
                            numArr[0] = Integer.valueOf(intValue2);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public int getChannelPtsSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda139
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChannelPtsSync$237(j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0033, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelPtsSync$237(long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT pts FROM dialogs WHERE did = " + (-j), new Object[0]);
                if (sQLiteCursor.next()) {
                    numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            try {
                countDownLatch.countDown();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public TLRPC$User getUserSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$User[] tLRPC$UserArr = new TLRPC$User[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUserSync$238(tLRPC$UserArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$UserArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUserSync$238(TLRPC$User[] tLRPC$UserArr, long j, CountDownLatch countDownLatch) {
        tLRPC$UserArr[0] = getUser(j);
        countDownLatch.countDown();
    }

    public TLRPC$Chat getChatSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$Chat[] tLRPC$ChatArr = new TLRPC$Chat[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda233
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChatSync$239(tLRPC$ChatArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$ChatArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatSync$239(TLRPC$Chat[] tLRPC$ChatArr, long j, CountDownLatch countDownLatch) {
        tLRPC$ChatArr[0] = getChat(j);
        countDownLatch.countDown();
    }

    public TLRPC$User getUser(long j) {
        try {
            ArrayList<TLRPC$User> arrayList = new ArrayList<>();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            arrayList2.add(Long.valueOf(j));
            getUsersInternal(arrayList2, arrayList);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    public ArrayList<TLRPC$User> getUsers(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(arrayList, arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public ArrayList<TLRPC$Chat> getChats(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$Chat> arrayList2 = new ArrayList<>();
        try {
            getChatsInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public TLRPC$Chat getChat(long j) {
        try {
            ArrayList<TLRPC$Chat> arrayList = new ArrayList<>();
            getChatsInternal("" + j, arrayList);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    public TLRPC$EncryptedChat getEncryptedChat(long j) {
        try {
            ArrayList<TLRPC$EncryptedChat> arrayList = new ArrayList<>();
            getEncryptedChatsInternal("" + j, arrayList, null);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:149:0x02d8, code lost:
        r6 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r9.get(r14.id);
        r7 = r14.status;
        r26 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:150:0x02e4, code lost:
        if (r7 == null) goto L158;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x02e6, code lost:
        r7.expires = r1.intValue(1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x02ee, code lost:
        if (r10 != 1) goto L164;
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x02f0, code lost:
        r6.name = org.telegram.messenger.AndroidUtilities.generateSearchName(r14.first_name, r14.last_name, r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x02fb, code lost:
        r6.name = org.telegram.messenger.AndroidUtilities.generateSearchName("@" + org.telegram.messenger.UserObject.getPublicUsername(r14), null, "@" + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:156:0x0324, code lost:
        r6.object = r14;
        r8 = r8 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:183:0x03e5, code lost:
        if (r3.contains(" " + r7) != false) goto L205;
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x0173, code lost:
        if (r11.startsWith(r6) == false) goto L405;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0051, code lost:
        if (r15.length() == 0) goto L9;
     */
    /* JADX WARN: Removed duplicated region for block: B:103:0x01cf A[Catch: all -> 0x019e, Exception -> 0x01a3, TryCatch #7 {Exception -> 0x01a3, all -> 0x019e, blocks: (B:88:0x0182, B:96:0x01ae, B:101:0x01be, B:103:0x01cf, B:105:0x01e0), top: B:377:0x0182 }] */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01e0 A[Catch: all -> 0x019e, Exception -> 0x01a3, TRY_LEAVE, TryCatch #7 {Exception -> 0x01a3, all -> 0x019e, blocks: (B:88:0x0182, B:96:0x01ae, B:101:0x01be, B:103:0x01cf, B:105:0x01e0), top: B:377:0x0182 }] */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0208 A[Catch: all -> 0x00aa, Exception -> 0x00b0, TRY_ENTER, TRY_LEAVE, TryCatch #11 {Exception -> 0x00b0, all -> 0x00aa, blocks: (B:28:0x0090, B:80:0x016f, B:110:0x0208, B:167:0x0372, B:221:0x0476, B:280:0x066e, B:282:0x0678, B:284:0x067c, B:290:0x0692), top: B:369:0x0090 }] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02ab A[Catch: all -> 0x07d6, Exception -> 0x07dc, TryCatch #9 {Exception -> 0x07dc, all -> 0x07d6, blocks: (B:36:0x00ca, B:38:0x00d0, B:41:0x00ee, B:44:0x00f9, B:46:0x00ff, B:60:0x0117, B:62:0x0121, B:66:0x012d, B:68:0x0138, B:72:0x0145, B:74:0x0153, B:76:0x0160, B:112:0x0228, B:114:0x022e, B:117:0x0242, B:119:0x0249, B:123:0x025a, B:125:0x0264, B:128:0x027d, B:130:0x0283, B:134:0x029b, B:141:0x02ab, B:143:0x02b6, B:146:0x02c9, B:159:0x0334, B:149:0x02d8, B:151:0x02e6, B:154:0x02f0, B:156:0x0324, B:155:0x02fb, B:162:0x0356, B:168:0x038e, B:170:0x0394, B:175:0x03ad, B:177:0x03b5, B:180:0x03cc, B:182:0x03d2, B:203:0x0427, B:184:0x03e7, B:186:0x03ee, B:189:0x03ff, B:196:0x0417, B:201:0x0421, B:205:0x042f, B:207:0x0433, B:209:0x0439, B:211:0x043f, B:214:0x0460, B:222:0x0494, B:224:0x049a, B:227:0x04ae, B:229:0x04b7, B:233:0x04c3, B:235:0x04cb, B:238:0x04e2, B:240:0x04e8, B:244:0x0500, B:249:0x050b, B:251:0x0512, B:253:0x0521, B:255:0x0527, B:259:0x0539, B:261:0x05c8, B:262:0x05ca, B:264:0x05d6, B:267:0x05e0, B:269:0x0632, B:268:0x0609, B:270:0x063c, B:273:0x0658, B:301:0x06cf, B:303:0x06d5, B:306:0x06e1, B:309:0x06f5, B:311:0x06fe, B:315:0x070b, B:317:0x0713, B:320:0x072a, B:322:0x0730, B:326:0x0748, B:332:0x0756, B:334:0x075f, B:336:0x076e, B:339:0x0778, B:341:0x07af, B:340:0x0785, B:342:0x07b4, B:346:0x07d0), top: B:373:0x00ca }] */
    /* JADX WARN: Removed duplicated region for block: B:158:0x032c  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0362  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x0372 A[Catch: all -> 0x00aa, Exception -> 0x00b0, TRY_ENTER, TRY_LEAVE, TryCatch #11 {Exception -> 0x00b0, all -> 0x00aa, blocks: (B:28:0x0090, B:80:0x016f, B:110:0x0208, B:167:0x0372, B:221:0x0476, B:280:0x066e, B:282:0x0678, B:284:0x067c, B:290:0x0692), top: B:369:0x0090 }] */
    /* JADX WARN: Removed duplicated region for block: B:216:0x0468  */
    /* JADX WARN: Removed duplicated region for block: B:219:0x0472  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x063c A[Catch: all -> 0x07d6, Exception -> 0x07dc, LOOP:6: B:232:0x04c1->B:270:0x063c, LOOP_END, TryCatch #9 {Exception -> 0x07dc, all -> 0x07d6, blocks: (B:36:0x00ca, B:38:0x00d0, B:41:0x00ee, B:44:0x00f9, B:46:0x00ff, B:60:0x0117, B:62:0x0121, B:66:0x012d, B:68:0x0138, B:72:0x0145, B:74:0x0153, B:76:0x0160, B:112:0x0228, B:114:0x022e, B:117:0x0242, B:119:0x0249, B:123:0x025a, B:125:0x0264, B:128:0x027d, B:130:0x0283, B:134:0x029b, B:141:0x02ab, B:143:0x02b6, B:146:0x02c9, B:159:0x0334, B:149:0x02d8, B:151:0x02e6, B:154:0x02f0, B:156:0x0324, B:155:0x02fb, B:162:0x0356, B:168:0x038e, B:170:0x0394, B:175:0x03ad, B:177:0x03b5, B:180:0x03cc, B:182:0x03d2, B:203:0x0427, B:184:0x03e7, B:186:0x03ee, B:189:0x03ff, B:196:0x0417, B:201:0x0421, B:205:0x042f, B:207:0x0433, B:209:0x0439, B:211:0x043f, B:214:0x0460, B:222:0x0494, B:224:0x049a, B:227:0x04ae, B:229:0x04b7, B:233:0x04c3, B:235:0x04cb, B:238:0x04e2, B:240:0x04e8, B:244:0x0500, B:249:0x050b, B:251:0x0512, B:253:0x0521, B:255:0x0527, B:259:0x0539, B:261:0x05c8, B:262:0x05ca, B:264:0x05d6, B:267:0x05e0, B:269:0x0632, B:268:0x0609, B:270:0x063c, B:273:0x0658, B:301:0x06cf, B:303:0x06d5, B:306:0x06e1, B:309:0x06f5, B:311:0x06fe, B:315:0x070b, B:317:0x0713, B:320:0x072a, B:322:0x0730, B:326:0x0748, B:332:0x0756, B:334:0x075f, B:336:0x076e, B:339:0x0778, B:341:0x07af, B:340:0x0785, B:342:0x07b4, B:346:0x07d0), top: B:373:0x00ca }] */
    /* JADX WARN: Removed duplicated region for block: B:279:0x066c  */
    /* JADX WARN: Removed duplicated region for block: B:290:0x0692 A[Catch: all -> 0x00aa, Exception -> 0x00b0, TRY_ENTER, TRY_LEAVE, TryCatch #11 {Exception -> 0x00b0, all -> 0x00aa, blocks: (B:28:0x0090, B:80:0x016f, B:110:0x0208, B:167:0x0372, B:221:0x0476, B:280:0x066e, B:282:0x0678, B:284:0x067c, B:290:0x0692), top: B:369:0x0090 }] */
    /* JADX WARN: Removed duplicated region for block: B:294:0x06b8  */
    /* JADX WARN: Removed duplicated region for block: B:303:0x06d5 A[Catch: all -> 0x07d6, Exception -> 0x07dc, TryCatch #9 {Exception -> 0x07dc, all -> 0x07d6, blocks: (B:36:0x00ca, B:38:0x00d0, B:41:0x00ee, B:44:0x00f9, B:46:0x00ff, B:60:0x0117, B:62:0x0121, B:66:0x012d, B:68:0x0138, B:72:0x0145, B:74:0x0153, B:76:0x0160, B:112:0x0228, B:114:0x022e, B:117:0x0242, B:119:0x0249, B:123:0x025a, B:125:0x0264, B:128:0x027d, B:130:0x0283, B:134:0x029b, B:141:0x02ab, B:143:0x02b6, B:146:0x02c9, B:159:0x0334, B:149:0x02d8, B:151:0x02e6, B:154:0x02f0, B:156:0x0324, B:155:0x02fb, B:162:0x0356, B:168:0x038e, B:170:0x0394, B:175:0x03ad, B:177:0x03b5, B:180:0x03cc, B:182:0x03d2, B:203:0x0427, B:184:0x03e7, B:186:0x03ee, B:189:0x03ff, B:196:0x0417, B:201:0x0421, B:205:0x042f, B:207:0x0433, B:209:0x0439, B:211:0x043f, B:214:0x0460, B:222:0x0494, B:224:0x049a, B:227:0x04ae, B:229:0x04b7, B:233:0x04c3, B:235:0x04cb, B:238:0x04e2, B:240:0x04e8, B:244:0x0500, B:249:0x050b, B:251:0x0512, B:253:0x0521, B:255:0x0527, B:259:0x0539, B:261:0x05c8, B:262:0x05ca, B:264:0x05d6, B:267:0x05e0, B:269:0x0632, B:268:0x0609, B:270:0x063c, B:273:0x0658, B:301:0x06cf, B:303:0x06d5, B:306:0x06e1, B:309:0x06f5, B:311:0x06fe, B:315:0x070b, B:317:0x0713, B:320:0x072a, B:322:0x0730, B:326:0x0748, B:332:0x0756, B:334:0x075f, B:336:0x076e, B:339:0x0778, B:341:0x07af, B:340:0x0785, B:342:0x07b4, B:346:0x07d0), top: B:373:0x00ca }] */
    /* JADX WARN: Removed duplicated region for block: B:342:0x07b4 A[Catch: all -> 0x07d6, Exception -> 0x07dc, LOOP:10: B:314:0x0709->B:342:0x07b4, LOOP_END, TryCatch #9 {Exception -> 0x07dc, all -> 0x07d6, blocks: (B:36:0x00ca, B:38:0x00d0, B:41:0x00ee, B:44:0x00f9, B:46:0x00ff, B:60:0x0117, B:62:0x0121, B:66:0x012d, B:68:0x0138, B:72:0x0145, B:74:0x0153, B:76:0x0160, B:112:0x0228, B:114:0x022e, B:117:0x0242, B:119:0x0249, B:123:0x025a, B:125:0x0264, B:128:0x027d, B:130:0x0283, B:134:0x029b, B:141:0x02ab, B:143:0x02b6, B:146:0x02c9, B:159:0x0334, B:149:0x02d8, B:151:0x02e6, B:154:0x02f0, B:156:0x0324, B:155:0x02fb, B:162:0x0356, B:168:0x038e, B:170:0x0394, B:175:0x03ad, B:177:0x03b5, B:180:0x03cc, B:182:0x03d2, B:203:0x0427, B:184:0x03e7, B:186:0x03ee, B:189:0x03ff, B:196:0x0417, B:201:0x0421, B:205:0x042f, B:207:0x0433, B:209:0x0439, B:211:0x043f, B:214:0x0460, B:222:0x0494, B:224:0x049a, B:227:0x04ae, B:229:0x04b7, B:233:0x04c3, B:235:0x04cb, B:238:0x04e2, B:240:0x04e8, B:244:0x0500, B:249:0x050b, B:251:0x0512, B:253:0x0521, B:255:0x0527, B:259:0x0539, B:261:0x05c8, B:262:0x05ca, B:264:0x05d6, B:267:0x05e0, B:269:0x0632, B:268:0x0609, B:270:0x063c, B:273:0x0658, B:301:0x06cf, B:303:0x06d5, B:306:0x06e1, B:309:0x06f5, B:311:0x06fe, B:315:0x070b, B:317:0x0713, B:320:0x072a, B:322:0x0730, B:326:0x0748, B:332:0x0756, B:334:0x075f, B:336:0x076e, B:339:0x0778, B:341:0x07af, B:340:0x0785, B:342:0x07b4, B:346:0x07d0), top: B:373:0x00ca }] */
    /* JADX WARN: Removed duplicated region for block: B:358:0x07f4  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x07fc  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x050b A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0756 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:435:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void localSearch(int i, String str, ArrayList<Object> arrayList, ArrayList<CharSequence> arrayList2, ArrayList<TLRPC$User> arrayList3, ArrayList<Long> arrayList4, int i2) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        String str2;
        String str3;
        String str4;
        SQLiteCursor queryFinalized;
        String str5;
        MessagesStorage messagesStorage;
        int i3;
        ArrayList arrayList5;
        LongSparseArray longSparseArray;
        String str6;
        int i4;
        int i5;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        ArrayList arrayList6;
        int i6;
        int i7;
        SQLiteCursor queryFinalized2;
        LongSparseArray longSparseArray4;
        char c;
        Object obj;
        LongSparseArray longSparseArray5;
        int i8;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        TLRPC$User tLRPC$User;
        LongSparseArray longSparseArray6;
        String str7;
        String str8;
        ArrayList arrayList7;
        LongSparseArray longSparseArray7;
        int i9;
        char c2;
        String str9;
        String str10;
        LongSparseArray longSparseArray8;
        String str11;
        TLRPC$User user;
        MessagesStorage messagesStorage2 = this;
        long clientUserId = UserConfig.getInstance(messagesStorage2.currentAccount).getClientUserId();
        try {
            String lowerCase = str.trim().toLowerCase();
            if (TextUtils.isEmpty(lowerCase)) {
                return;
            }
            String lowerCase2 = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
            String str12 = "saved messages";
            String lowerCase3 = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
            String translitString = LocaleController.getInstance().getTranslitString(lowerCase);
            if (!lowerCase.equals(translitString)) {
                try {
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = null;
                    try {
                        messagesStorage2.checkSQLException(exc);
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th3) {
                        th2 = th3;
                        th = th2;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            translitString = null;
            int i10 = 1 + (translitString != null ? 1 : 0);
            String[] strArr = new String[i10];
            strArr[0] = lowerCase;
            if (translitString != null) {
                strArr[1] = translitString;
            }
            ArrayList arrayList8 = new ArrayList();
            ArrayList arrayList9 = new ArrayList();
            String[] strArr2 = strArr;
            ArrayList arrayList10 = new ArrayList();
            int i11 = i10;
            LongSparseArray longSparseArray9 = new LongSparseArray();
            if (i2 >= 0) {
                str2 = "RepliesTitle";
                try {
                    str4 = "replies";
                    str3 = lowerCase3;
                    queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs WHERE folder_id = ? ORDER BY date DESC LIMIT 600", Integer.valueOf(i2));
                } catch (Exception e2) {
                    sQLiteCursor = null;
                    messagesStorage2 = this;
                    exc = e2;
                    messagesStorage2.checkSQLException(exc);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th5) {
                    th2 = th5;
                    sQLiteCursor = null;
                    th = th2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } else {
                str2 = "RepliesTitle";
                str3 = lowerCase3;
                str4 = "replies";
                queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600", new Object[0]);
            }
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult = new DialogsSearchAdapter.DialogSearchResult();
                    String str13 = lowerCase;
                    String str14 = str12;
                    dialogSearchResult.date = queryFinalized.intValue(1);
                    longSparseArray9.put(longValue, dialogSearchResult);
                    if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(longValue)))) {
                        if (DialogObject.isEncryptedDialog(longValue)) {
                            if (i == 0 || i == 3) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList10.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList10.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                        } else if (DialogObject.isUserDialog(longValue)) {
                            if ((i != 4 || longValue != clientUserId) && i != 6 && i != 5 && i != 2 && !arrayList8.contains(Long.valueOf(longValue))) {
                                arrayList8.add(Long.valueOf(longValue));
                            }
                        } else if (i != 4) {
                            long j = -longValue;
                            if (!arrayList9.contains(Long.valueOf(j))) {
                                arrayList9.add(Long.valueOf(j));
                            }
                        }
                    }
                    str12 = str14;
                    lowerCase = str13;
                } catch (Exception e3) {
                    exc = e3;
                    sQLiteCursor = queryFinalized;
                    messagesStorage2 = this;
                    messagesStorage2.checkSQLException(exc);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            String str15 = lowerCase;
            String str16 = str12;
            queryFinalized.dispose();
            if (i != 4) {
                str5 = str15;
            } else {
                str5 = str15;
            }
            try {
                if (!str16.startsWith(str5)) {
                    messagesStorage = this;
                    i3 = 0;
                    if ((i != 4 && str3.startsWith(str5)) || str4.startsWith(str5)) {
                        user = getMessagesController().getUser(708513L);
                        if (user == null) {
                            user = getMessagesController().getUser(Long.valueOf((long) UserObject.REPLY_BOT));
                        }
                        if (user != null) {
                            DialogsSearchAdapter.DialogSearchResult dialogSearchResult2 = new DialogsSearchAdapter.DialogSearchResult();
                            dialogSearchResult2.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            dialogSearchResult2.name = LocaleController.getString(str2, R.string.RepliesTitle);
                            dialogSearchResult2.object = user;
                            longSparseArray9.put(user.id, dialogSearchResult2);
                            i3++;
                        }
                    }
                    String str17 = ";;;";
                    if (arrayList8.isEmpty()) {
                        arrayList5 = arrayList10;
                        longSparseArray = longSparseArray9;
                        str6 = ";;;";
                        i4 = i11;
                    } else {
                        int i12 = i3;
                        SQLiteCursor queryFinalized3 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList8)), new Object[0]);
                        i3 = i12;
                        while (queryFinalized3.next()) {
                            String stringValue = queryFinalized3.stringValue(2);
                            String translitString2 = LocaleController.getInstance().getTranslitString(stringValue);
                            if (stringValue.equals(translitString2)) {
                                translitString2 = null;
                            }
                            int lastIndexOf = stringValue.lastIndexOf(str17);
                            String substring = lastIndexOf != -1 ? stringValue.substring(lastIndexOf + 3) : null;
                            String str18 = str17;
                            int i13 = i11;
                            int i14 = 0;
                            char c3 = 0;
                            while (true) {
                                if (i14 >= i13) {
                                    arrayList7 = arrayList10;
                                    longSparseArray7 = longSparseArray9;
                                    i9 = i13;
                                    break;
                                }
                                arrayList7 = arrayList10;
                                String str19 = strArr2[i14];
                                if (stringValue.startsWith(str19)) {
                                    i9 = i13;
                                } else {
                                    i9 = i13;
                                    if (!stringValue.contains(" " + str19)) {
                                        if (translitString2 != null) {
                                            if (!translitString2.startsWith(str19)) {
                                                if (translitString2.contains(" " + str19)) {
                                                }
                                            }
                                        }
                                        c2 = (substring == null || !substring.startsWith(str19)) ? c3 : (char) 2;
                                        if (c2 == 0) {
                                            str9 = translitString2;
                                            str10 = stringValue;
                                            NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(0);
                                            if (byteBufferValue == null) {
                                                longSparseArray7 = longSparseArray9;
                                                break;
                                            }
                                            str11 = substring;
                                            TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                            byteBufferValue.reuse();
                                            if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(TLdeserialize.id)))) {
                                                break;
                                            }
                                            longSparseArray8 = longSparseArray9;
                                        } else {
                                            str9 = translitString2;
                                            str10 = stringValue;
                                            longSparseArray8 = longSparseArray9;
                                            str11 = substring;
                                        }
                                        i14++;
                                        translitString2 = str9;
                                        stringValue = str10;
                                        arrayList10 = arrayList7;
                                        substring = str11;
                                        longSparseArray9 = longSparseArray8;
                                        c3 = c2;
                                        i13 = i9;
                                    }
                                }
                                c2 = 1;
                                if (c2 == 0) {
                                }
                                i14++;
                                translitString2 = str9;
                                stringValue = str10;
                                arrayList10 = arrayList7;
                                substring = str11;
                                longSparseArray9 = longSparseArray8;
                                c3 = c2;
                                i13 = i9;
                            }
                            str17 = str18;
                            arrayList10 = arrayList7;
                            i11 = i9;
                            longSparseArray9 = longSparseArray7;
                        }
                        arrayList5 = arrayList10;
                        longSparseArray = longSparseArray9;
                        str6 = str17;
                        i4 = i11;
                        queryFinalized3.dispose();
                    }
                    if (arrayList9.isEmpty()) {
                        i5 = i4;
                        longSparseArray2 = longSparseArray;
                    } else {
                        SQLiteCursor queryFinalized4 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", arrayList9)), new Object[0]);
                        while (queryFinalized4.next()) {
                            String stringValue2 = queryFinalized4.stringValue(1);
                            String translitString3 = LocaleController.getInstance().getTranslitString(stringValue2);
                            if (stringValue2.equals(translitString3)) {
                                translitString3 = null;
                            }
                            int i15 = i4;
                            int i16 = 0;
                            while (i16 < i15) {
                                String str20 = strArr2[i16];
                                if (!stringValue2.startsWith(str20)) {
                                    if (!stringValue2.contains(" " + str20)) {
                                        if (translitString3 != null) {
                                            if (!translitString3.startsWith(str20)) {
                                            }
                                        }
                                        str7 = translitString3;
                                        str8 = stringValue2;
                                        i16++;
                                        stringValue2 = str8;
                                        translitString3 = str7;
                                    }
                                }
                                NativeByteBuffer byteBufferValue2 = queryFinalized4.byteBufferValue(0);
                                if (byteBufferValue2 == null) {
                                    break;
                                }
                                TLRPC$Chat TLdeserialize2 = TLRPC$Chat.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                byteBufferValue2.reuse();
                                if (i == 15) {
                                    if (arrayList4 != null) {
                                        str7 = translitString3;
                                        str8 = stringValue2;
                                        if (!arrayList4.contains(Long.valueOf(-TLdeserialize2.id))) {
                                            i16++;
                                            stringValue2 = str8;
                                            translitString3 = str7;
                                        }
                                    }
                                    str7 = translitString3;
                                    str8 = stringValue2;
                                    i16++;
                                    stringValue2 = str8;
                                    translitString3 = str7;
                                } else {
                                    str7 = translitString3;
                                    str8 = stringValue2;
                                }
                                if ((i != 6 || !ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)) && (i != 5 || ChatObject.isChannelAndNotMegaGroup(TLdeserialize2))) {
                                    if (TLdeserialize2 != null && !TLdeserialize2.deactivated && (!ChatObject.isChannel(TLdeserialize2) || !ChatObject.isNotInChat(TLdeserialize2))) {
                                        longSparseArray6 = longSparseArray;
                                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult3 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray6.get(-TLdeserialize2.id);
                                        dialogSearchResult3.name = AndroidUtilities.generateSearchName(TLdeserialize2.title, null, str20);
                                        dialogSearchResult3.object = TLdeserialize2;
                                        i3++;
                                        longSparseArray = longSparseArray6;
                                        i4 = i15;
                                    }
                                }
                                i16++;
                                stringValue2 = str8;
                                translitString3 = str7;
                            }
                            longSparseArray6 = longSparseArray;
                            longSparseArray = longSparseArray6;
                            i4 = i15;
                        }
                        i5 = i4;
                        longSparseArray2 = longSparseArray;
                        queryFinalized4.dispose();
                    }
                    if (!arrayList5.isEmpty() || i == 15) {
                        longSparseArray3 = longSparseArray2;
                    } else {
                        SQLiteCursor queryFinalized5 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash, q.in_seq_no, q.admin_id, q.mtproto_seq FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", arrayList5)), new Object[0]);
                        while (queryFinalized5.next()) {
                            String stringValue3 = queryFinalized5.stringValue(1);
                            String translitString4 = LocaleController.getInstance().getTranslitString(stringValue3);
                            if (stringValue3.equals(translitString4)) {
                                translitString4 = null;
                            }
                            String str21 = str6;
                            int lastIndexOf2 = stringValue3.lastIndexOf(str21);
                            String substring2 = lastIndexOf2 != -1 ? stringValue3.substring(lastIndexOf2 + 2) : null;
                            char c4 = 0;
                            int i17 = 0;
                            while (true) {
                                if (i17 >= i5) {
                                    break;
                                }
                                String str22 = strArr2[i17];
                                if (!stringValue3.startsWith(str22)) {
                                    if (!stringValue3.contains(" " + str22)) {
                                        if (translitString4 != null) {
                                            if (!translitString4.startsWith(str22)) {
                                                if (translitString4.contains(" " + str22)) {
                                                }
                                            }
                                        }
                                        if (substring2 != null && substring2.startsWith(str22)) {
                                            c4 = 2;
                                        }
                                        if (c4 == 0) {
                                            NativeByteBuffer byteBufferValue3 = queryFinalized5.byteBufferValue(0);
                                            if (byteBufferValue3 != null) {
                                                tLRPC$EncryptedChat = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                byteBufferValue3.reuse();
                                                i8 = 6;
                                            } else {
                                                i8 = 6;
                                                tLRPC$EncryptedChat = null;
                                            }
                                            NativeByteBuffer byteBufferValue4 = queryFinalized5.byteBufferValue(i8);
                                            if (byteBufferValue4 != null) {
                                                tLRPC$User = TLRPC$User.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                byteBufferValue4.reuse();
                                            } else {
                                                tLRPC$User = null;
                                            }
                                            if (tLRPC$EncryptedChat != null && tLRPC$User != null) {
                                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult4 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.get(DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id));
                                                str6 = str21;
                                                longSparseArray5 = longSparseArray2;
                                                tLRPC$EncryptedChat.user_id = queryFinalized5.longValue(2);
                                                tLRPC$EncryptedChat.a_or_b = queryFinalized5.byteArrayValue(3);
                                                tLRPC$EncryptedChat.auth_key = queryFinalized5.byteArrayValue(4);
                                                tLRPC$EncryptedChat.ttl = queryFinalized5.intValue(5);
                                                tLRPC$EncryptedChat.layer = queryFinalized5.intValue(8);
                                                tLRPC$EncryptedChat.seq_in = queryFinalized5.intValue(9);
                                                tLRPC$EncryptedChat.seq_out = queryFinalized5.intValue(10);
                                                int intValue = queryFinalized5.intValue(11);
                                                tLRPC$EncryptedChat.key_use_count_in = (short) (intValue >> 16);
                                                tLRPC$EncryptedChat.key_use_count_out = (short) intValue;
                                                tLRPC$EncryptedChat.exchange_id = queryFinalized5.longValue(12);
                                                tLRPC$EncryptedChat.key_create_date = queryFinalized5.intValue(13);
                                                tLRPC$EncryptedChat.future_key_fingerprint = queryFinalized5.longValue(14);
                                                tLRPC$EncryptedChat.future_auth_key = queryFinalized5.byteArrayValue(15);
                                                tLRPC$EncryptedChat.key_hash = queryFinalized5.byteArrayValue(16);
                                                tLRPC$EncryptedChat.in_seq_no = queryFinalized5.intValue(17);
                                                long longValue2 = queryFinalized5.longValue(18);
                                                if (longValue2 != 0) {
                                                    tLRPC$EncryptedChat.admin_id = longValue2;
                                                }
                                                tLRPC$EncryptedChat.mtproto_seq = queryFinalized5.intValue(19);
                                                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                                                if (tLRPC$UserStatus != null) {
                                                    tLRPC$UserStatus.expires = queryFinalized5.intValue(7);
                                                }
                                                if (c4 == 1) {
                                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(ContactsController.formatName(tLRPC$User.first_name, tLRPC$User.last_name));
                                                    dialogSearchResult4.name = spannableStringBuilder;
                                                    spannableStringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_chats_secretName)), 0, dialogSearchResult4.name.length(), 33);
                                                } else {
                                                    dialogSearchResult4.name = AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(tLRPC$User), null, "@" + str22);
                                                }
                                                dialogSearchResult4.object = tLRPC$EncryptedChat;
                                                arrayList3.add(tLRPC$User);
                                                i3++;
                                            }
                                        } else {
                                            i17++;
                                            str21 = str21;
                                        }
                                    }
                                }
                                c4 = 1;
                                if (c4 == 0) {
                                }
                            }
                            str6 = str21;
                            longSparseArray5 = longSparseArray2;
                            longSparseArray2 = longSparseArray5;
                        }
                        longSparseArray3 = longSparseArray2;
                        queryFinalized5.dispose();
                    }
                    arrayList6 = new ArrayList(i3);
                    i6 = 0;
                    while (i6 < longSparseArray3.size()) {
                        LongSparseArray longSparseArray10 = longSparseArray3;
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult5 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray10.valueAt(i6);
                        if (dialogSearchResult5.object != null && dialogSearchResult5.name != null) {
                            arrayList6.add(dialogSearchResult5);
                        }
                        i6++;
                        longSparseArray3 = longSparseArray10;
                    }
                    LongSparseArray longSparseArray11 = longSparseArray3;
                    Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda242
                        @Override // java.util.Comparator
                        public final int compare(Object obj2, Object obj3) {
                            int lambda$localSearch$240;
                            lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj2, (DialogsSearchAdapter.DialogSearchResult) obj3);
                            return lambda$localSearch$240;
                        }
                    });
                    i7 = 0;
                    while (i7 < arrayList6.size()) {
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult6 = (DialogsSearchAdapter.DialogSearchResult) arrayList6.get(i7);
                        arrayList.add(dialogSearchResult6.object);
                        String[] strArr3 = strArr2;
                        arrayList2.add(dialogSearchResult6.name);
                        i7++;
                        strArr2 = strArr3;
                    }
                    String[] strArr4 = strArr2;
                    if (i != 2 && i != 15 && i != 6 && i != 5) {
                        queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                        while (queryFinalized2.next()) {
                            if (longSparseArray11.indexOfKey(queryFinalized2.longValue(3)) < 0) {
                                String stringValue4 = queryFinalized2.stringValue(2);
                                String translitString5 = LocaleController.getInstance().getTranslitString(stringValue4);
                                if (stringValue4.equals(translitString5)) {
                                    translitString5 = null;
                                }
                                String str23 = str6;
                                int lastIndexOf3 = stringValue4.lastIndexOf(str23);
                                String substring3 = lastIndexOf3 != -1 ? stringValue4.substring(lastIndexOf3 + 3) : null;
                                int i18 = 0;
                                char c5 = 0;
                                while (true) {
                                    if (i18 >= i5) {
                                        longSparseArray4 = longSparseArray11;
                                        break;
                                    }
                                    String str24 = strArr4[i18];
                                    if (!stringValue4.startsWith(str24)) {
                                        if (!stringValue4.contains(" " + str24)) {
                                            if (translitString5 != null) {
                                                if (!translitString5.startsWith(str24)) {
                                                    if (translitString5.contains(" " + str24)) {
                                                    }
                                                }
                                            }
                                            c = (substring3 == null || !substring3.startsWith(str24)) ? c5 : (char) 2;
                                            if (c == 0) {
                                                longSparseArray4 = longSparseArray11;
                                                NativeByteBuffer byteBufferValue5 = queryFinalized2.byteBufferValue(0);
                                                if (byteBufferValue5 != null) {
                                                    TLRPC$User TLdeserialize3 = TLRPC$User.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                    byteBufferValue5.reuse();
                                                    TLRPC$UserStatus tLRPC$UserStatus2 = TLdeserialize3.status;
                                                    if (tLRPC$UserStatus2 != null) {
                                                        tLRPC$UserStatus2.expires = queryFinalized2.intValue(1);
                                                    }
                                                    if (c == 1) {
                                                        arrayList2.add(AndroidUtilities.generateSearchName(TLdeserialize3.first_name, TLdeserialize3.last_name, str24));
                                                        obj = null;
                                                    } else {
                                                        obj = null;
                                                        arrayList2.add(AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(TLdeserialize3), null, "@" + str24));
                                                    }
                                                    arrayList.add(TLdeserialize3);
                                                }
                                            } else {
                                                i18++;
                                                c5 = c;
                                                longSparseArray11 = longSparseArray11;
                                            }
                                        }
                                    }
                                    c = 1;
                                    if (c == 0) {
                                    }
                                }
                                str6 = str23;
                                longSparseArray11 = longSparseArray4;
                            }
                        }
                        queryFinalized2.dispose();
                    }
                    return;
                }
                TLRPC$User currentUser = UserConfig.getInstance(messagesStorage.currentAccount).getCurrentUser();
                DialogsSearchAdapter.DialogSearchResult dialogSearchResult7 = new DialogsSearchAdapter.DialogSearchResult();
                dialogSearchResult7.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                dialogSearchResult7.name = lowerCase2;
                dialogSearchResult7.object = currentUser;
                longSparseArray9.put(currentUser.id, dialogSearchResult7);
                i3 = 1;
                if (i != 4) {
                    user = getMessagesController().getUser(708513L);
                    if (user == null) {
                    }
                    if (user != null) {
                    }
                    String str172 = ";;;";
                    if (arrayList8.isEmpty()) {
                    }
                    if (arrayList9.isEmpty()) {
                    }
                    if (arrayList5.isEmpty()) {
                    }
                    longSparseArray3 = longSparseArray2;
                    arrayList6 = new ArrayList(i3);
                    i6 = 0;
                    while (i6 < longSparseArray3.size()) {
                    }
                    LongSparseArray longSparseArray112 = longSparseArray3;
                    Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda242
                        @Override // java.util.Comparator
                        public final int compare(Object obj2, Object obj3) {
                            int lambda$localSearch$240;
                            lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj2, (DialogsSearchAdapter.DialogSearchResult) obj3);
                            return lambda$localSearch$240;
                        }
                    });
                    i7 = 0;
                    while (i7 < arrayList6.size()) {
                    }
                    String[] strArr42 = strArr2;
                    if (i != 2) {
                        queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                        while (queryFinalized2.next()) {
                        }
                        queryFinalized2.dispose();
                    }
                    return;
                }
                user = getMessagesController().getUser(708513L);
                if (user == null) {
                }
                if (user != null) {
                }
                String str1722 = ";;;";
                if (arrayList8.isEmpty()) {
                }
                if (arrayList9.isEmpty()) {
                }
                if (arrayList5.isEmpty()) {
                }
                longSparseArray3 = longSparseArray2;
                arrayList6 = new ArrayList(i3);
                i6 = 0;
                while (i6 < longSparseArray3.size()) {
                }
                LongSparseArray longSparseArray1122 = longSparseArray3;
                Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda242
                    @Override // java.util.Comparator
                    public final int compare(Object obj2, Object obj3) {
                        int lambda$localSearch$240;
                        lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj2, (DialogsSearchAdapter.DialogSearchResult) obj3);
                        return lambda$localSearch$240;
                    }
                });
                i7 = 0;
                while (i7 < arrayList6.size()) {
                }
                String[] strArr422 = strArr2;
                if (i != 2) {
                }
                return;
            } catch (Exception e4) {
                exc = e4;
                messagesStorage2 = messagesStorage;
                sQLiteCursor = null;
                messagesStorage2.checkSQLException(exc);
                if (sQLiteCursor == null) {
                }
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
            messagesStorage = this;
        } catch (Exception e5) {
            messagesStorage2 = this;
            exc = e5;
            sQLiteCursor = null;
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$localSearch$240(DialogsSearchAdapter.DialogSearchResult dialogSearchResult, DialogsSearchAdapter.DialogSearchResult dialogSearchResult2) {
        int i = dialogSearchResult.date;
        int i2 = dialogSearchResult2.date;
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x004e, code lost:
        if (0 == 0) goto L11;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Integer> getCachedMessagesInRange(long j, int i, int i2) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND date >= %d AND date <= %d", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                while (sQLiteCursor.next()) {
                    try {
                        arrayList.add(Integer.valueOf(sQLiteCursor.intValue(0)));
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
            sQLiteCursor.dispose();
            return arrayList;
        } catch (Throwable th) {
            if (0 != 0) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void updateUnreadReactionsCount(long j, long j2, int i) {
        updateUnreadReactionsCount(j, j2, i, false);
    }

    public void updateUnreadReactionsCount(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda136
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUnreadReactionsCount$241(j2, z, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:26:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:60:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUnreadReactionsCount$241(long j, boolean z, long j2, int i) {
        int intValue;
        SQLiteException e;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (j != 0) {
            try {
                if (z) {
                    try {
                        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
                        intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                        queryFinalized.dispose();
                    } catch (SQLiteException e2) {
                        e = e2;
                        e.printStackTrace();
                        if (sQLitePreparedStatement == null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    }
                } else {
                    intValue = 0;
                }
                executeFast = this.database.executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
            } catch (Throwable th) {
                th = th;
            }
            try {
                executeFast.bindInteger(1, Math.max(intValue + i, 0));
                executeFast.bindLong(2, j2);
                executeFast.bindLong(3, j);
                executeFast.step();
                executeFast.dispose();
                if (i == 0) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? ");
                    sQLitePreparedStatement.bindLong(1, j2);
                    sQLitePreparedStatement.bindLong(2, j);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (SQLiteException e3) {
                e = e3;
                sQLitePreparedStatement = executeFast;
                e.printStackTrace();
                if (sQLitePreparedStatement == null) {
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = executeFast;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        } else {
            try {
                try {
                    executeFast2 = this.database.executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
                } catch (SQLiteException e4) {
                    e = e4;
                }
            } catch (Throwable th3) {
                th = th3;
            }
            try {
                executeFast2.bindInteger(1, Math.max(i, 0));
                executeFast2.bindLong(2, j2);
                executeFast2.step();
                executeFast2.dispose();
                if (i == 0) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?");
                    sQLitePreparedStatement.bindLong(1, j2);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (SQLiteException e5) {
                sQLitePreparedStatement = executeFast2;
                e = e5;
                e.printStackTrace();
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            } catch (Throwable th4) {
                sQLitePreparedStatement = executeFast2;
                th = th4;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        }
    }

    public void markMessageReactionsAsRead(final long j, final long j2, final int i, boolean z) {
        if (z) {
            getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda101
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessageReactionsAsRead$242(j, j2, i);
                }
            });
        } else {
            lambda$markMessageReactionsAsRead$242(j, j2, i);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:101:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x018b  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0192  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0197  */
    /* renamed from: markMessageReactionsAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessageReactionsAsRead$242(long j, long j2, int i) {
        SQLiteCursor queryFinalized;
        TLRPC$Message tLRPC$Message;
        SQLitePreparedStatement executeFast;
        NativeByteBuffer byteBufferValue;
        MessagesStorage messagesStorage = this;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        int i2 = 0;
        while (i2 < 2) {
            boolean z = i2 == 1;
            if (!z || j2 != 0) {
                if (!z) {
                    try {
                        sQLitePreparedStatement2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions SET state = 0 WHERE message_id = ? AND dialog_id = ?");
                        sQLitePreparedStatement2.bindInteger(1, i);
                        sQLitePreparedStatement2.bindLong(2, j);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                    } catch (SQLiteException e) {
                        e = e;
                        SQLitePreparedStatement sQLitePreparedStatement3 = sQLitePreparedStatement2;
                        queryFinalized = null;
                        sQLitePreparedStatement = sQLitePreparedStatement3;
                        try {
                            messagesStorage.checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (queryFinalized != null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (queryFinalized != null) {
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        SQLitePreparedStatement sQLitePreparedStatement4 = sQLitePreparedStatement2;
                        queryFinalized = null;
                        sQLitePreparedStatement = sQLitePreparedStatement4;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (queryFinalized != null) {
                        }
                        throw th;
                    }
                    try {
                        queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                    } catch (SQLiteException e2) {
                        e = e2;
                        queryFinalized = null;
                        messagesStorage.checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (queryFinalized != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        queryFinalized = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (queryFinalized != null) {
                        }
                        throw th;
                    }
                } else {
                    SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE message_id = ? AND dialog_id = ? AND topic_id = ? ");
                    executeFast2.bindInteger(1, i);
                    executeFast2.bindLong(2, j);
                    executeFast2.bindLong(3, j2);
                    executeFast2.step();
                    executeFast2.dispose();
                    queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                }
                try {
                    if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                        tLRPC$Message = null;
                    } else {
                        tLRPC$Message = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        tLRPC$Message.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
                        if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.recent_reactions != null) {
                            for (int i3 = 0; i3 < tLRPC$Message.reactions.recent_reactions.size(); i3++) {
                                tLRPC$Message.reactions.recent_reactions.get(i3).unread = false;
                            }
                        }
                    }
                    queryFinalized.dispose();
                    if (tLRPC$Message != null) {
                        if (!z) {
                            try {
                                executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_v2 SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)));
                            } catch (SQLiteException e3) {
                                e = e3;
                                messagesStorage = this;
                                queryFinalized = null;
                                messagesStorage.checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (queryFinalized != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                queryFinalized = null;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (queryFinalized != null) {
                                }
                                throw th;
                            }
                        } else {
                            executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_topics SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)));
                        }
                        sQLitePreparedStatement2 = executeFast;
                        try {
                            try {
                                MessageObject.normalizeFlags(tLRPC$Message);
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                tLRPC$Message.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement2.bindByteBuffer(1, nativeByteBuffer);
                                sQLitePreparedStatement2.step();
                                sQLitePreparedStatement2.dispose();
                                nativeByteBuffer.reuse();
                            } catch (Throwable th5) {
                                th = th5;
                                SQLitePreparedStatement sQLitePreparedStatement42 = sQLitePreparedStatement2;
                                queryFinalized = null;
                                sQLitePreparedStatement = sQLitePreparedStatement42;
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (queryFinalized != null) {
                                    queryFinalized.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e4) {
                            try {
                                FileLog.e(e4);
                            } catch (SQLiteException e5) {
                                e = e5;
                                messagesStorage = this;
                                SQLitePreparedStatement sQLitePreparedStatement32 = sQLitePreparedStatement2;
                                queryFinalized = null;
                                sQLitePreparedStatement = sQLitePreparedStatement32;
                                messagesStorage.checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (queryFinalized != null) {
                                    queryFinalized.dispose();
                                    return;
                                }
                                return;
                            }
                        }
                    } else {
                        sQLitePreparedStatement2 = null;
                    }
                } catch (SQLiteException e6) {
                    e = e6;
                    messagesStorage = this;
                    messagesStorage.checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized != null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized != null) {
                    }
                    throw th;
                }
            }
            i2++;
            messagesStorage = this;
        }
        if (sQLitePreparedStatement2 != null) {
            sQLitePreparedStatement2.dispose();
        }
    }

    public void updateDialogUnreadReactions(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda228
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogUnreadReactions$243(z, j, i, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00ce  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00d3  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00da  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:73:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogUnreadReactions$243(boolean z, long j, int i, long j2) {
        SQLiteCursor queryFinalized;
        int max;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        if (z) {
            try {
                queryFinalized = this.database.queryFinalized("SELECT unread_reactions FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    try {
                        max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0)) : 0;
                        queryFinalized.dispose();
                    } catch (SQLiteException e) {
                        e = e;
                        e.printStackTrace();
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (queryFinalized != null) {
                            queryFinalized.dispose();
                            return;
                        }
                        return;
                    }
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (queryFinalized != null) {
                        queryFinalized.dispose();
                    }
                    throw th;
                }
            } catch (SQLiteException e2) {
                e = e2;
                queryFinalized = null;
            } catch (Throwable th2) {
                th = th2;
                queryFinalized = null;
                if (sQLitePreparedStatement != null) {
                }
                if (queryFinalized != null) {
                }
                throw th;
            }
        } else {
            max = 0;
        }
        int i2 = max + i;
        SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
        try {
            executeFast.bindInteger(1, i2);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
            if (j2 == 0) {
                return;
            }
            if (z) {
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2)), new Object[0]);
                try {
                    r1 = queryFinalized2.next() ? Math.max(0, queryFinalized2.intValue(0)) : 0;
                    queryFinalized2.dispose();
                } catch (SQLiteException e3) {
                    e = e3;
                    queryFinalized = queryFinalized2;
                    e = e;
                    e.printStackTrace();
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized != null) {
                    }
                } catch (Throwable th3) {
                    th = th3;
                    queryFinalized = queryFinalized2;
                    th = th;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized != null) {
                    }
                    throw th;
                }
            }
            int i3 = r1 + i;
            SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
            try {
                executeFast2.bindInteger(1, i3);
                executeFast2.bindLong(2, j);
                executeFast2.bindLong(3, j2);
                executeFast2.step();
                executeFast2.dispose();
            } catch (SQLiteException e4) {
                e = e4;
                queryFinalized = null;
                sQLitePreparedStatement = executeFast2;
                e = e;
                e.printStackTrace();
                if (sQLitePreparedStatement != null) {
                }
                if (queryFinalized != null) {
                }
            } catch (Throwable th4) {
                th = th4;
                queryFinalized = null;
                sQLitePreparedStatement = executeFast2;
                th = th;
                if (sQLitePreparedStatement != null) {
                }
                if (queryFinalized != null) {
                }
                throw th;
            }
        } catch (SQLiteException e5) {
            e = e5;
            queryFinalized = null;
            sQLitePreparedStatement = executeFast;
        } catch (Throwable th5) {
            th = th5;
            queryFinalized = null;
            sQLitePreparedStatement = executeFast;
        }
    }

    private boolean isForum(long j) {
        int i = this.dialogIsForum.get(j, -1);
        if (i == -1) {
            TLRPC$Chat chat = getChat(-j);
            i = (chat == null || !chat.forum) ? 0 : 1;
            this.dialogIsForum.put(j, i);
        }
        return i == 1;
    }

    /* loaded from: classes3.dex */
    public static class TopicKey {
        public long dialogId;
        public long topicId;

        public static TopicKey of(long j, long j2) {
            TopicKey topicKey = new TopicKey();
            topicKey.dialogId = j;
            topicKey.topicId = j2;
            return topicKey;
        }

        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            TopicKey topicKey = (TopicKey) obj;
            return this.dialogId == topicKey.dialogId && this.topicId == topicKey.topicId;
        }

        public int hashCode() {
            return Objects.hash(Long.valueOf(this.dialogId), Long.valueOf(this.topicId));
        }

        public String toString() {
            return "TopicKey{dialogId=" + this.dialogId + ", topicId=" + this.topicId + '}';
        }
    }
}

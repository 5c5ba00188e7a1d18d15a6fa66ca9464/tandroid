package org.telegram.messenger;

import android.appwidget.AppWidgetManager;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.Timer;
import org.telegram.messenger.TopicsController;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.tgnet.AbstractSerializedData;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogFilter;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReactor;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionCount;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatParticipant;
import org.telegram.tgnet.TLRPC$TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_chatParticipants;
import org.telegram.tgnet.TLRPC$TL_contact;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterChatlist;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_inputQuickReplyShortcut;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionGiftCode;
import org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionTopicEdit;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveaway;
import org.telegram.tgnet.TLRPC$TL_messageMediaGiveawayResults;
import org.telegram.tgnet.TLRPC$TL_messageMediaPaidMedia;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaStory;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_botResults;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_reactionCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_username;
import org.telegram.tgnet.TLRPC$TL_webPageAttributeStory;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_BotResults;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.tl.TL_stories$StoryFwdHeader;
import org.telegram.tgnet.tl.TL_stories$StoryItem;
import org.telegram.tgnet.tl.TL_stories$TL_mediaAreaChannelPost;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Adapters.DialogsSearchAdapter;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
/* loaded from: classes3.dex */
public class MessagesStorage extends BaseController {
    public static final String[] DATABASE_TABLES;
    public static final int LAST_DB_VERSION = 155;
    private int archiveUnreadCount;
    private int[][] bots;
    private File cacheFile;
    private int[][] channels;
    private int[][] contacts;
    private SQLiteDatabase database;
    private boolean databaseCreated;
    private boolean databaseMigrationInProgress;
    private ArrayList<MessagesController.DialogFilter> dialogFilters;
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap;
    private LongSparseIntArray dialogIsForum;
    private LongSparseArray<Integer> dialogsWithMentions;
    private LongSparseArray<Integer> dialogsWithUnread;
    private int[][] groups;
    private int lastDateValue;
    private int lastPtsValue;
    private int lastQtsValue;
    private int lastSavedDate;
    private int lastSavedPts;
    private int lastSavedQts;
    private int lastSavedSeq;
    private int lastSecretVersion;
    private int lastSeqValue;
    private AtomicLong lastTaskId;
    private int mainUnreadCount;
    private int[] mentionChannels;
    private int[] mentionGroups;
    private int[][] nonContacts;
    private CountDownLatch openSync;
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    private int secretG;
    private byte[] secretPBytes;
    private File shmCacheFile;
    public boolean showClearDatabaseAlert;
    private DispatchQueue storageQueue;
    private SparseArray<ArrayList<Runnable>> tasks;
    boolean tryRecover;
    private LongSparseArray<Boolean> unknownDialogsIds;
    private File walCacheFile;
    private static volatile MessagesStorage[] Instance = new MessagesStorage[4];
    private static final Object[] lockObjects = new Object[4];

    /* loaded from: classes3.dex */
    public interface BooleanCallback {
        void run(boolean z);
    }

    /* loaded from: classes3.dex */
    public interface IntCallback {
        void run(int i);
    }

    /* loaded from: classes3.dex */
    public interface LongCallback {
        void run(long j);
    }

    /* loaded from: classes3.dex */
    public interface StringCallback {
        void run(String str);
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
        DATABASE_TABLES = new String[]{"messages_holes", "media_holes_v2", "scheduled_messages_v2", "quick_replies", "messages_v2", "download_queue", "user_contacts_v7", "user_phones_v7", "dialogs", "dialog_filter", "dialog_filter_ep", "dialog_filter_pin_v2", "randoms_v2", "enc_tasks_v4", "messages_seq", "params", "media_v4", "bot_keyboard", "bot_keyboard_topics", "chat_settings_v2", "user_settings", "chat_pinned_v2", "chat_pinned_count", "chat_hints", "botcache", "users_data", "users", "chats", "enc_chats", "channel_users_v2", "channel_admins_v3", "contacts", "dialog_photos", "dialog_settings", "web_recent_v3", "stickers_v2", "stickers_featured", "stickers_dice", "stickersets", "hashtag_recent_v2", "webpage_pending_v2", "sent_files_v2", "search_recent", "media_counts_v2", "keyvalue", "bot_info_v2", "pending_tasks", "requested_holes", "sharing_locations", "shortcut_widget", "emoji_keywords_v2", "emoji_keywords_info_v2", "wallpapers2", "unread_push_messages", "polls_v2", "reactions", "reaction_mentions", "downloading_documents", "animated_emoji", "attach_menu_bots", "premium_promo", "emoji_statuses", "messages_holes_topics", "messages_topics", "saved_dialogs", "media_topics", "media_holes_topics", "topics", "media_counts_topics", "reaction_mentions_topics", "emoji_groups"};
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (lockObjects[i]) {
                try {
                    messagesStorage = Instance[i];
                    if (messagesStorage == null) {
                        MessagesStorage[] messagesStorageArr = Instance;
                        MessagesStorage messagesStorage2 = new MessagesStorage(i);
                        messagesStorageArr[i] = messagesStorage2;
                        messagesStorage = messagesStorage2;
                    }
                } finally {
                }
            }
        }
        return messagesStorage;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public MessagesStorage(int i) {
        super(i);
        this.lastTaskId = new AtomicLong(System.currentTimeMillis());
        this.tasks = new SparseArray<>();
        this.lastDateValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSeqValue = 0;
        this.lastSecretVersion = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersMap = new SparseArray<>();
        this.unknownDialogsIds = new LongSparseArray<>();
        this.openSync = new CountDownLatch(1);
        this.dialogIsForum = new LongSparseIntArray();
        this.contacts = new int[][]{new int[2], new int[2]};
        this.nonContacts = new int[][]{new int[2], new int[2]};
        this.bots = new int[][]{new int[2], new int[2]};
        this.channels = new int[][]{new int[2], new int[2]};
        this.groups = new int[][]{new int[2], new int[2]};
        this.mentionChannels = new int[2];
        this.mentionGroups = new int[2];
        this.dialogsWithMentions = new LongSparseArray<>();
        this.dialogsWithUnread = new LongSparseArray<>();
        DispatchQueue dispatchQueue = new DispatchQueue("storageQueue_" + i);
        this.storageQueue = dispatchQueue;
        dispatchQueue.setPriority(8);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda216
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$new$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        openDatabase(1);
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            this.storageQueue.cancelRunnable(arrayList.get(i2));
        }
        this.tasks.remove(i);
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList<Runnable> arrayList = this.tasks.get(i);
        if (arrayList == null) {
            return;
        }
        arrayList.remove(runnable);
        if (arrayList.isEmpty()) {
            this.tasks.remove(i);
        }
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long length = file != null ? file.length() : 0L;
        File file2 = this.shmCacheFile;
        return file2 != null ? length + file2.length() : length;
    }

    public void openDatabase(int i) {
        if (!NativeLoader.loaded()) {
            int i2 = 0;
            while (!NativeLoader.loaded()) {
                try {
                    Thread.sleep(1000L);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                i2++;
                if (i2 > 5) {
                    break;
                }
            }
        }
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        this.databaseCreated = false;
        boolean z = !this.cacheFile.exists();
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                createTables(this.database);
            } else {
                int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("current db version = " + intValue);
                }
                if (intValue == 0) {
                    throw new Exception("malformed");
                }
                try {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                    if (queryFinalized.next()) {
                        this.lastSeqValue = queryFinalized.intValue(0);
                        this.lastPtsValue = queryFinalized.intValue(1);
                        this.lastDateValue = queryFinalized.intValue(2);
                        this.lastQtsValue = queryFinalized.intValue(3);
                        this.lastSecretVersion = queryFinalized.intValue(4);
                        this.secretG = queryFinalized.intValue(5);
                        if (queryFinalized.isNull(6)) {
                            this.secretPBytes = null;
                        } else {
                            byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                            this.secretPBytes = byteArrayValue;
                            if (byteArrayValue != null && byteArrayValue.length == 1) {
                                this.secretPBytes = null;
                            }
                        }
                    }
                    queryFinalized.dispose();
                } catch (Exception e2) {
                    FileLog.e(e2);
                    if (e2.getMessage() != null && e2.getMessage().contains("malformed")) {
                        throw new RuntimeException("malformed");
                    }
                    try {
                        this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                        this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                }
                if (intValue < 155) {
                    try {
                        updateDbToLastVersion(intValue);
                    } catch (Exception e4) {
                        if (BuildVars.DEBUG_PRIVATE_VERSION) {
                            throw e4;
                        }
                        FileLog.e(e4);
                        throw new RuntimeException("malformed");
                    }
                }
            }
            this.databaseCreated = true;
        } catch (Exception e5) {
            FileLog.e(e5);
            if (i < 3 && e5.getMessage() != null && e5.getMessage().contains("malformed")) {
                if (i == 2) {
                    cleanupInternal(true);
                    clearLoadingDialogsOffsets();
                } else {
                    cleanupInternal(false);
                }
                openDatabase(i == 1 ? 2 : 3);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda172
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$1();
            }
        });
        loadDialogFilters();
        loadUnreadMessages();
        loadPendingTasks();
        try {
            this.openSync.countDown();
        } catch (Throwable unused) {
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda173
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$openDatabase$2();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$1() {
        if (this.databaseMigrationInProgress) {
            this.databaseMigrationInProgress = false;
            NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$2() {
        this.showClearDatabaseAlert = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseOpened, new Object[0]);
    }

    private void clearLoadingDialogsOffsets() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().saveConfig(false);
    }

    private boolean recoverDatabase() {
        this.database.close();
        boolean recoverDatabase = DatabaseMigrationHelper.recoverDatabase(this.cacheFile, this.walCacheFile, this.shmCacheFile, this.currentAccount);
        FileLog.e("Database restored = " + recoverDatabase);
        if (recoverDatabase) {
            try {
                SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
                this.database = sQLiteDatabase;
                sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
                this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
                this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            } catch (SQLiteException e) {
                FileLog.e(new Exception(e));
                recoverDatabase = false;
            }
        }
        if (!recoverDatabase) {
            cleanupInternal(true);
            openDatabase(1);
            recoverDatabase = this.databaseCreated;
            FileLog.e("Try create new database = " + recoverDatabase);
        }
        if (recoverDatabase) {
            reset();
        }
        return recoverDatabase;
    }

    public static void createTables(SQLiteDatabase sQLiteDatabase) throws SQLiteException {
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_scheduled_messages_v2 ON scheduled_messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, group_id INTEGER, reply_to_story_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_v2 ON messages_v2(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_groupid_messages_v2 ON messages_v2(uid, mid, group_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_dialogs(did INTEGER PRIMARY KEY, date INTEGER, last_mid INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, last_mid_group INTEGER, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON saved_dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON saved_dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON saved_dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON saved_dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB, unread_reactions INTEGER, last_mid_group INTEGER, ttl_period INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT, color INTEGER DEFAULT -1)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_keyboard_topics(uid INTEGER, tid INTEGER, mid INTEGER, info BLOB, PRIMARY KEY(uid, tid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_topics_idx_mid_v2 ON bot_keyboard_topics(mid, uid, tid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER, inviter INTEGER, links INTEGER, participants_count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos(uid INTEGER, id INTEGER, num INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_photos_count(uid INTEGER PRIMARY KEY, count INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER, premium INTEGER, emoji INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB, proximity INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stickersets2(id INTEGER PRIMATE KEY, data BLOB, hash INTEGER, date INTEGER, short_name TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_index ON stickersets2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickersets2_id_short_name ON stickersets2(id, short_name);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS stickers_featured_emoji_index ON stickers_featured(emoji);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, topicId INTEGER, is_reaction INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(message_id, dialog_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE animated_emoji(document_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE attach_menu_bots(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE premium_promo(data BLOB, date INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_statuses(data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_holes_topics(uid INTEGER, topic_id INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes_topics(uid, topic_id, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE messages_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, custom_params BLOB, reply_to_story_id INTEGER, PRIMARY KEY(mid, topic_id, uid))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_topics ON messages_topics(uid, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_topics ON messages_topics(mid, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_topics ON messages_topics(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_topics ON messages_topics(mid, send_state, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_topics ON messages_topics(mid, is_channel);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_topics ON messages_topics(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_messages_topics ON messages_topics(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS mid_uid_messages_topics ON messages_topics(mid, uid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_topics ON messages_topics(uid, topic_id, mid, read_state, out);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_topics ON messages_topics(uid, topic_id, mention, read_state);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_messages_topics ON messages_topics(uid, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_date_mid_messages_topics ON messages_topics(uid, topic_id, date, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_topic_id_mid_messages_topics ON messages_topics(uid, topic_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_topics(mid INTEGER, uid INTEGER, topic_id INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_topics ON media_topics(uid, topic_id, mid, type, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_holes_topics(uid INTEGER, topic_id INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, topic_id, type, start));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_topics ON media_holes_topics(uid, topic_id, type, end);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE topics(did INTEGER, topic_id INTEGER, data BLOB, top_message INTEGER, topic_message BLOB, unread_count INTEGER, max_read_id INTEGER, unread_mentions INTEGER, unread_reactions INTEGER, read_outbox INTEGER, pinned INTEGER, total_messages_count INTEGER, hidden INTEGER, edit_date INTEGER, PRIMARY KEY(did, topic_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_top_message_topics ON topics(did, top_message);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS did_topics ON topics(did);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE media_counts_topics(uid INTEGER, topic_id INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, topic_id, type))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE reaction_mentions_topics(message_id INTEGER, state INTEGER, dialog_id INTEGER, topic_id INTEGER, PRIMARY KEY(message_id, dialog_id, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_topics_did ON reaction_mentions_topics(dialog_id, topic_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE emoji_groups(type INTEGER PRIMARY KEY, data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE app_config(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE effects(data BLOB)").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories (dialog_id INTEGER, story_id INTEGER, data BLOB, custom_params BLOB, PRIMARY KEY (dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE stories_counter (dialog_id INTEGER PRIMARY KEY, count INTEGER, max_read INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE profile_stories (dialog_id INTEGER, story_id INTEGER, data BLOB, type INTEGER, seen INTEGER, pin INTEGER, PRIMARY KEY(dialog_id, story_id));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_drafts (id INTEGER PRIMARY KEY, date INTEGER, data BLOB, type INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE story_pushes (uid INTEGER, sid INTEGER, date INTEGER, localName TEXT, flags INTEGER, expire_date INTEGER, PRIMARY KEY(uid, sid));").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE unconfirmed_auth (data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE saved_reaction_tags (topic_id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE tag_message_id(mid INTEGER, topic_id INTEGER, tag INTEGER, text TEXT);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_idx_tag_message_id ON tag_message_id(tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_text_idx_tag_message_id ON tag_message_id(tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_idx_tag_message_id ON tag_message_id(topic_id, tag);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS tag_topic_text_idx_tag_message_id ON tag_message_id(topic_id, tag, text COLLATE NOCASE);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_replies(topic_id INTEGER PRIMARY KEY, name TEXT, order_value INTEGER, count INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE quick_replies_messages(mid INTEGER, topic_id INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, topic_id))").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS topic_date_idx_quick_replies_messages ON quick_replies_messages(topic_id, date);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_quick_replies_messages ON quick_replies_messages(mid, reply_to_message_id);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE INDEX IF NOT EXISTS idx_to_reply_quick_replies_messages ON quick_replies_messages(reply_to_message_id, mid);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE business_links(data BLOB, order_value INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("CREATE TABLE fact_checks(hash INTEGER PRIMARY KEY, data BLOB, expires INTEGER);").stepThis().dispose();
        sQLiteDatabase.executeFast("PRAGMA user_version = 155").stepThis().dispose();
    }

    public boolean isDatabaseMigrationInProgress() {
        return this.databaseMigrationInProgress;
    }

    private void updateDbToLastVersion(int i) throws Exception {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$3();
            }
        });
        FileLog.d("MessagesStorage start db migration from " + i + " to 155");
        int migrate = DatabaseMigrationHelper.migrate(this, i);
        StringBuilder sb = new StringBuilder();
        sb.append("MessagesStorage db migration finished to varsion ");
        sb.append(migrate);
        FileLog.d(sb.toString());
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$4();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$3() {
        this.databaseMigrationInProgress = true;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.TRUE);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$4() {
        this.databaseMigrationInProgress = false;
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void executeNoException(String str) {
        try {
            this.database.executeFast(str).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void cleanupInternal(boolean z) {
        if (z) {
            reset();
        } else {
            clearDatabaseValues();
        }
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    public void clearDatabaseValues() {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
    }

    public void cleanup(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda67
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$cleanup$6(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$6(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda75
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$cleanup$5();
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$5() {
        getMessagesController().getDifference();
    }

    public void saveSecretParams(final int i, final int i2, final byte[] bArr) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveSecretParams$7(i, i2, bArr);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSecretParams$7(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(bArr != null ? bArr.length : 1);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void checkSQLException(Throwable th) {
        checkSQLException(th, true);
    }

    private void checkSQLException(Throwable th, boolean z) {
        if ((th instanceof SQLiteException) && th.getMessage() != null && th.getMessage().contains("is malformed") && !this.tryRecover) {
            this.tryRecover = true;
            FileLog.e("disk image malformed detected, try recover");
            if (recoverDatabase()) {
                this.tryRecover = false;
                clearLoadingDialogsOffsets();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda194
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$checkSQLException$8();
                    }
                });
                FileLog.e(new Exception("database restored!!"));
                return;
            }
            FileLog.e(new Exception(th), z);
            return;
        }
        FileLog.e(th, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSQLException$8() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
    }

    public void fixNotificationSettings() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda130
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fixNotificationSettings$9();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fixNotificationSettings$9() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry<String, ?> entry : all.entrySet()) {
                String key = entry.getKey();
                if (key.startsWith(NotificationsSettingsFacade.PROPERTY_NOTIFY)) {
                    Integer num = (Integer) entry.getValue();
                    if (num.intValue() != 2 && num.intValue() != 3) {
                    }
                    String replace = key.replace(NotificationsSettingsFacade.PROPERTY_NOTIFY, "");
                    long j = 1;
                    if (num.intValue() != 2) {
                        Integer num2 = (Integer) all.get(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + replace);
                        if (num2 != null) {
                            j = 1 | (num2.intValue() << 32);
                        }
                    }
                    try {
                        longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public long createPendingTask(final NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0L;
        }
        final long andAdd = this.lastTaskId.getAndAdd(1L);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda58
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createPendingTask$10(andAdd, nativeByteBuffer);
            }
        });
        return andAdd;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createPendingTask$10(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            nativeByteBuffer.reuse();
        }
    }

    public void removePendingTask(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda225
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removePendingTask$11(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removePendingTask$11(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadPendingTasks$33();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Removed duplicated region for block: B:31:0x00d2 A[Catch: Exception -> 0x0043, TryCatch #0 {Exception -> 0x0043, blocks: (B:3:0x0002, B:4:0x000d, B:6:0x0013, B:8:0x001e, B:9:0x0023, B:10:0x0026, B:88:0x0396, B:12:0x002b, B:14:0x003d, B:19:0x0049, B:20:0x004e, B:21:0x005c, B:22:0x0072, B:23:0x0088, B:24:0x00a8, B:26:0x00b6, B:29:0x00bf, B:30:0x00c4, B:31:0x00d2, B:33:0x00e4, B:35:0x00ea, B:37:0x00f0, B:38:0x00f8, B:39:0x0109, B:40:0x011b, B:41:0x0166, B:43:0x0177, B:44:0x017c, B:45:0x018a, B:47:0x019a, B:48:0x01a8, B:49:0x01b6, B:51:0x01c6, B:52:0x01d4, B:53:0x01e2, B:54:0x01f6, B:55:0x021f, B:56:0x0224, B:58:0x0237, B:59:0x023f, B:60:0x024e, B:61:0x0268, B:63:0x0277, B:66:0x0280, B:67:0x0285, B:68:0x0293, B:69:0x02b4, B:70:0x02d2, B:71:0x02f3, B:73:0x032b, B:76:0x033b, B:79:0x0345, B:82:0x034f, B:83:0x0355, B:84:0x036a, B:85:0x0382, B:87:0x038c, B:89:0x039b), top: B:93:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPendingTasks$33() {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                final long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    final int readInt32 = byteBufferValue.readInt32(false);
                    switch (readInt32) {
                        case 0:
                            final TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize != null) {
                                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda25
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$12(TLdeserialize, longValue);
                                    }
                                });
                                break;
                            }
                            break;
                        case 1:
                            final long readInt322 = byteBufferValue.readInt32(false);
                            final int readInt323 = byteBufferValue.readInt32(false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda23
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$13(readInt322, readInt323, longValue);
                                }
                            });
                            break;
                        case 2:
                        case 5:
                        case 8:
                        case 10:
                        case 14:
                            final TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.id = byteBufferValue.readInt64(false);
                            tLRPC$TL_dialog.top_message = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.unread_count = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.last_message_date = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.pts = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.flags = byteBufferValue.readInt32(false);
                            if (readInt32 >= 5) {
                                tLRPC$TL_dialog.pinned = byteBufferValue.readBool(false);
                                tLRPC$TL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 8) {
                                tLRPC$TL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 10) {
                                tLRPC$TL_dialog.unread_mark = byteBufferValue.readBool(false);
                            }
                            if (readInt32 >= 14) {
                                tLRPC$TL_dialog.folder_id = byteBufferValue.readInt32(false);
                            }
                            final TLRPC$InputPeer TLdeserialize2 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda22
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$14(tLRPC$TL_dialog, TLdeserialize2, longValue);
                                }
                            });
                            break;
                        case 3:
                            getSendMessagesHelper().sendGame(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC$TL_inputMediaGame) TLRPC$InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                            break;
                        case 4:
                            final long readInt64 = byteBufferValue.readInt64(false);
                            final boolean readBool = byteBufferValue.readBool(false);
                            final TLRPC$InputPeer TLdeserialize3 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda21
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$15(readInt64, readBool, TLdeserialize3, longValue);
                                }
                            });
                            break;
                        case 6:
                            final long readInt324 = byteBufferValue.readInt32(false);
                            final int readInt325 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize4 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$16(readInt324, readInt325, longValue, TLdeserialize4);
                                }
                            });
                            break;
                        case 7:
                            final long readInt326 = byteBufferValue.readInt32(false);
                            int readInt327 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize5 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false);
                            final TLObject TLdeserialize6 = TLdeserialize5 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt327, false) : TLdeserialize5;
                            if (TLdeserialize6 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda19
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$18(readInt326, longValue, TLdeserialize6);
                                    }
                                });
                                break;
                            }
                        case 9:
                            final long readInt642 = byteBufferValue.readInt64(false);
                            final TLRPC$InputPeer TLdeserialize7 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda18
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$21(readInt642, TLdeserialize7, longValue);
                                }
                            });
                            break;
                        case 11:
                            final int readInt328 = byteBufferValue.readInt32(false);
                            final long readInt329 = byteBufferValue.readInt32(false);
                            final int readInt3210 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize8 = readInt329 != 0 ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda17
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$22(readInt329, readInt328, TLdeserialize8, readInt3210, longValue);
                                }
                            });
                            break;
                        case 12:
                        case 19:
                        case 20:
                            removePendingTask(longValue);
                            break;
                        case 13:
                            final long readInt643 = byteBufferValue.readInt64(false);
                            final boolean readBool2 = byteBufferValue.readBool(false);
                            final int readInt3211 = byteBufferValue.readInt32(false);
                            final int readInt3212 = byteBufferValue.readInt32(false);
                            final boolean readBool3 = byteBufferValue.readBool(false);
                            final TLRPC$InputPeer TLdeserialize9 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda16
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$25(readInt643, readBool2, readInt3211, readInt3212, readBool3, TLdeserialize9, longValue);
                                }
                            });
                            break;
                        case 15:
                            final TLRPC$InputPeer TLdeserialize10 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda15
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$26(TLdeserialize10, longValue);
                                }
                            });
                            break;
                        case 16:
                            final int readInt3213 = byteBufferValue.readInt32(false);
                            int readInt3214 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList = new ArrayList();
                            for (int i = 0; i < readInt3214; i++) {
                                arrayList.add(TLRPC$InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda14
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$27(readInt3213, arrayList, longValue);
                                }
                            });
                            break;
                        case 17:
                            final int readInt3215 = byteBufferValue.readInt32(false);
                            int readInt3216 = byteBufferValue.readInt32(false);
                            final ArrayList arrayList2 = new ArrayList();
                            for (int i2 = 0; i2 < readInt3216; i2++) {
                                arrayList2.add(TLRPC$TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda33
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$28(readInt3215, arrayList2, longValue);
                                }
                            });
                            break;
                        case 18:
                            final long readInt644 = byteBufferValue.readInt64(false);
                            byteBufferValue.readInt32(false);
                            final TLRPC$TL_messages_deleteScheduledMessages TLdeserialize11 = TLRPC$TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize11 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$29(readInt644, longValue, TLdeserialize11);
                                    }
                                });
                                break;
                            }
                        case 21:
                            final Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                            byteBufferValue.readInt64(false);
                            overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.gradientColor1 = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                            final boolean readBool4 = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                            overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda31
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$24(overrideWallpaperInfo, readBool4, longValue);
                                }
                            });
                            break;
                        case 22:
                            final TLRPC$InputPeer TLdeserialize12 = TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda30
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$30(TLdeserialize12, longValue);
                                }
                            });
                            break;
                        case 23:
                            final long readInt645 = byteBufferValue.readInt64(false);
                            final int readInt3217 = byteBufferValue.readInt32(false);
                            final int readInt3218 = byteBufferValue.readInt32(false);
                            if (!DialogObject.isEncryptedDialog(readInt645) && DialogObject.isChatDialog(readInt645) && byteBufferValue.hasRemaining()) {
                                r1 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            }
                            final TLRPC$InputChannel tLRPC$InputChannel = r1;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda29
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$23(readInt645, readInt3217, tLRPC$InputChannel, readInt3218, longValue, readInt32);
                                }
                            });
                            break;
                        case 24:
                            final long readInt646 = byteBufferValue.readInt64(false);
                            int readInt3219 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize13 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false);
                            final TLObject TLdeserialize14 = TLdeserialize13 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3219, false) : TLdeserialize13;
                            if (TLdeserialize14 == null) {
                                removePendingTask(longValue);
                                break;
                            } else {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda28
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$loadPendingTasks$19(readInt646, longValue, TLdeserialize14);
                                    }
                                });
                                break;
                            }
                        case 25:
                            final long readInt647 = byteBufferValue.readInt64(false);
                            final int readInt3220 = byteBufferValue.readInt32(false);
                            final TLRPC$InputChannel TLdeserialize15 = TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$loadPendingTasks$17(readInt647, readInt3220, longValue, TLdeserialize15);
                                }
                            });
                            break;
                        default:
                            switch (readInt32) {
                                case 100:
                                    final int readInt3221 = byteBufferValue.readInt32(false);
                                    final boolean readBool5 = byteBufferValue.readBool(false);
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda26
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$31(readInt3221, readBool5, longValue);
                                        }
                                    });
                                    break;
                                case 102:
                                    final long readInt648 = byteBufferValue.readInt64(false);
                                    final int readInt3222 = byteBufferValue.readInt32(false);
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda24
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$loadPendingTasks$32(longValue, readInt648, readInt3222);
                                        }
                                    });
                                    break;
                                case 103:
                                    final long readInt649 = byteBufferValue.readInt64(false);
                                    final int readInt3223 = byteBufferValue.readInt32(false);
                                    int readInt3224 = byteBufferValue.readInt32(false);
                                    TLObject TLdeserialize16 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false);
                                    final TLObject TLdeserialize17 = TLdeserialize16 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3224, false) : TLdeserialize16;
                                    if (TLdeserialize17 == null) {
                                        removePendingTask(longValue);
                                        break;
                                    } else {
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda13
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$loadPendingTasks$20(readInt649, longValue, TLdeserialize17, readInt3223);
                                            }
                                        });
                                        break;
                                    }
                            }
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$12(TLRPC$Chat tLRPC$Chat, long j) {
        getMessagesController().loadUnknownChannel(tLRPC$Chat, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$13(long j, int i, long j2) {
        getMessagesController().getChannelDifference(j, i, j2, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$14(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().checkLastDialogMessage(tLRPC$Dialog, tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$15(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().pinDialog(j, z, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$16(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$17(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$18(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, -j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$19(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$20(long j, long j2, TLObject tLObject, int i) {
        getMessagesController().deleteMessages(null, null, null, j, true, 0, false, j2, tLObject, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$21(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$22(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(-j, i, tLRPC$InputChannel, i2, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$23(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2, int i3) {
        getMessagesController().markMessageAsRead2(j, i, tLRPC$InputChannel, i2, j2, i3 == 23);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$24(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer(null, overrideWallpaperInfo, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$25(long j, boolean z, int i, int i2, boolean z2, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().deleteDialog(j, z ? 1 : 0, i, i2, z2, tLRPC$InputPeer, j2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$26(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().loadUnknownDialog(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$27(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$28(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder(null, i, -1, arrayList, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$29(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages(null, null, null, j, true, 1, false, j2, tLObject, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$30(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(tLRPC$InputPeer, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$31(int i, boolean z, long j) {
        getSecretChatHelper().declineSecretChat(i, z, j);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$32(long j, long j2, int i) {
        getMessagesController().lambda$checkDeletingTask$78(j, j2, i);
    }

    public void saveChannelPts(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda127
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChannelPts$34(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChannelPts$34(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, -j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal */
    public void lambda$saveDiffParams$35(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq == i && this.lastSavedPts == i2 && this.lastSavedDate == i3 && this.lastQtsValue == i4) {
                return;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.bindInteger(4, i4);
            executeFast.step();
            executeFast.dispose();
            this.lastSavedSeq = i;
            this.lastSavedPts = i2;
            this.lastSavedDate = i3;
            this.lastSavedQts = i4;
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void saveDiffParams(final int i, final int i2, final int i3, final int i4) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDiffParams$35(i, i2, i3, i4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$36() {
        resetAllUnreadCounters(true);
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMutedDialogsFiltersCounters$36();
            }
        });
    }

    public void setDialogFlags(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda154
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogFlags$37(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogFlags$37(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 == intValue) {
                return;
            }
            this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            resetAllUnreadCounters(true);
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putStoryPushMessage(final NotificationsController.StoryNotification storyNotification) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda226
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putStoryPushMessage$38(storyNotification);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putStoryPushMessage$38(NotificationsController.StoryNotification storyNotification) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM story_pushes WHERE uid = " + storyNotification.dialogId).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO story_pushes VALUES(?, ?, ?, ?, ?, ?)");
            for (Map.Entry<Integer, Pair<Long, Long>> entry : storyNotification.dateByIds.entrySet()) {
                int intValue = entry.getKey().intValue();
                long longValue = ((Long) entry.getValue().first).longValue();
                long longValue2 = ((Long) entry.getValue().second).longValue();
                executeFast.requery();
                executeFast.bindLong(1, storyNotification.dialogId);
                executeFast.bindInteger(2, intValue);
                executeFast.bindLong(3, longValue);
                if (storyNotification.localName == null) {
                    storyNotification.localName = "";
                }
                executeFast.bindString(4, storyNotification.localName);
                executeFast.bindInteger(5, storyNotification.hidden ? 1 : 0);
                executeFast.bindLong(6, longValue2);
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteStoryPushMessage(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteStoryPushMessage$39(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteStoryPushMessage$39(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM story_pushes WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteAllStoryPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda60
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryPushMessages$40();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryPushMessages$40() {
        try {
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteAllStoryReactionPushMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteAllStoryReactionPushMessages$41();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteAllStoryReactionPushMessages$41() {
        try {
            this.database.executeFast("DELETE FROM unread_push_messages WHERE is_reaction = 2").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putPushMessage(final MessageObject messageObject) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda118
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putPushMessage$42(messageObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putPushMessage$42(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            int i = messageObject.localType == 2 ? 1 : 0;
            if (messageObject.localChannel) {
                i |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindInteger(2, messageObject.getId());
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            CharSequence charSequence = messageObject.messageText;
            if (charSequence == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, charSequence.toString());
            }
            String str = messageObject.localName;
            if (str == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, str);
            }
            String str2 = messageObject.localUserName;
            if (str2 == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, str2);
            }
            executeFast.bindInteger(9, i);
            executeFast.bindLong(10, MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, false));
            executeFast.bindInteger(11, (messageObject.isReactionPush ? 1 : 0) + (messageObject.isStoryReactionPush ? 1 : 0));
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearLocalDatabase() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda183
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearLocalDatabase$44();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:103:0x044f, code lost:
        if (r8 != null) goto L91;
     */
    /* JADX WARN: Code restructure failed: missing block: B:131:0x0490, code lost:
        if (r8 == null) goto L92;
     */
    /* JADX WARN: Code restructure failed: missing block: B:132:0x0492, code lost:
        r8.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x0495, code lost:
        reset();
     */
    /* JADX WARN: Code restructure failed: missing block: B:134:0x0498, code lost:
        return;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:126:0x0483  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0488  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x048d  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x049f  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x04a4  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x04a9  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x04ae  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x03c4 A[Catch: all -> 0x03dc, Exception -> 0x03e0, TRY_LEAVE, TryCatch #22 {Exception -> 0x03e0, all -> 0x03dc, blocks: (B:75:0x02cf, B:76:0x02d3, B:78:0x03c4), top: B:167:0x02cf }] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x03e4  */
    /* JADX WARN: Type inference failed for: r7v13 */
    /* JADX WARN: Type inference failed for: r7v14 */
    /* JADX WARN: Type inference failed for: r7v18 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$clearLocalDatabase$44() {
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor2;
        ArrayList arrayList;
        int i;
        SQLiteCursor sQLiteCursor3;
        int i2;
        Exception exc2;
        try {
            ArrayList arrayList2 = new ArrayList();
            this.database.executeFast("DELETE FROM reaction_mentions").stepThis().dispose();
            this.database.executeFast("DELETE FROM reaction_mentions_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM downloading_documents").stepThis().dispose();
            this.database.executeFast("DELETE FROM attach_menu_bots").stepThis().dispose();
            this.database.executeFast("DELETE FROM animated_emoji").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickers_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM stickersets2").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_dialogs").stepThis().dispose();
            this.database.executeFast("DELETE FROM topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM media_counts_topics").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2").stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM profile_stories").stepThis().dispose();
            this.database.executeFast("DELETE FROM story_pushes").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos").stepThis().dispose();
            this.database.executeFast("DELETE FROM dialog_photos_count").stepThis().dispose();
            this.database.executeFast("DELETE FROM saved_reaction_tags").stepThis().dispose();
            this.database.executeFast("DELETE FROM business_replies").stepThis().dispose();
            this.database.executeFast("DELETE FROM quick_replies_messages").stepThis().dispose();
            this.database.executeFast("DELETE FROM effects").stepThis().dispose();
            this.database.executeFast("DELETE FROM app_config").stepThis().dispose();
            int i3 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList2.add(Long.valueOf(longValue));
                    }
                } catch (Exception e) {
                    exc = e;
                    sQLiteCursor = queryFinalized;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                }
            }
            queryFinalized.dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
            try {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                try {
                    this.database.beginTransaction();
                    sQLiteCursor = null;
                    int i4 = 0;
                    while (i4 < arrayList2.size()) {
                        try {
                            Long l = (Long) arrayList2.get(i4);
                            SQLiteDatabase sQLiteDatabase3 = this.database;
                            sQLiteCursor = sQLiteDatabase3.queryFinalized("SELECT COUNT(mid) FROM messages_v2 WHERE uid = " + l, new Object[i3]);
                            int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(i3) : 0;
                            sQLiteCursor.dispose();
                            if (intValue <= 2) {
                                arrayList = arrayList2;
                                i = i4;
                            } else {
                                SQLiteDatabase sQLiteDatabase4 = this.database;
                                SQLiteCursor queryFinalized2 = sQLiteDatabase4.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + l, new Object[i3]);
                                try {
                                    if (queryFinalized2.next()) {
                                        long longValue2 = queryFinalized2.longValue(i3);
                                        arrayList = arrayList2;
                                        long longValue3 = queryFinalized2.longValue(1);
                                        SQLiteDatabase sQLiteDatabase5 = this.database;
                                        SQLiteCursor queryFinalized3 = sQLiteDatabase5.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + l + " AND mid IN (" + longValue2 + "," + longValue3 + ")", new Object[i3]);
                                        int i5 = -1;
                                        while (queryFinalized3.next()) {
                                            try {
                                                NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(i3 ? 1 : 0);
                                                if (byteBufferValue != null) {
                                                    sQLiteCursor3 = queryFinalized2;
                                                    try {
                                                        try {
                                                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i3), i3);
                                                            if (TLdeserialize != null) {
                                                                i5 = TLdeserialize.id;
                                                                try {
                                                                    i = i4;
                                                                } catch (Exception e2) {
                                                                    e = e2;
                                                                    i = i4;
                                                                    exc2 = e;
                                                                    try {
                                                                        checkSQLException(exc2);
                                                                        i2 = i5;
                                                                        queryFinalized3.dispose();
                                                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                        sQLiteDatabase6.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                        StringBuilder sb = new StringBuilder();
                                                                        sb.append("DELETE FROM messages_holes WHERE uid = ");
                                                                        sb.append(l);
                                                                        sQLiteDatabase7.executeFast(sb.toString()).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase8 = this.database;
                                                                        sQLiteDatabase8.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase9 = this.database;
                                                                        sQLiteDatabase9.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase10 = this.database;
                                                                        sQLiteDatabase10.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase11 = this.database;
                                                                        sQLiteDatabase11.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                        SQLiteDatabase sQLiteDatabase12 = this.database;
                                                                        sQLiteDatabase12.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                        MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                        if (i2 == -1) {
                                                                        }
                                                                        sQLiteCursor2.dispose();
                                                                        sQLiteCursor = null;
                                                                        i4 = i + 1;
                                                                        arrayList2 = arrayList;
                                                                        i3 = 0;
                                                                    } catch (Exception e3) {
                                                                        e = e3;
                                                                        sQLiteCursor2 = sQLiteCursor3;
                                                                        exc = e;
                                                                        sQLiteCursor = sQLiteCursor2;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = executeFast2;
                                                                        try {
                                                                            checkSQLException(exc);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                        } catch (Throwable th3) {
                                                                            th = th3;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                                sQLiteDatabase.commitTransaction();
                                                                            }
                                                                            if (sQLitePreparedStatement != null) {
                                                                                sQLitePreparedStatement.dispose();
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                                sQLitePreparedStatement2.dispose();
                                                                            }
                                                                            if (sQLiteCursor != null) {
                                                                                sQLiteCursor.dispose();
                                                                            }
                                                                            reset();
                                                                            throw th;
                                                                        }
                                                                    } catch (Throwable th4) {
                                                                        th = th4;
                                                                        sQLiteCursor2 = sQLiteCursor3;
                                                                        th = th;
                                                                        sQLiteCursor = sQLiteCursor2;
                                                                        sQLitePreparedStatement = executeFast;
                                                                        sQLitePreparedStatement2 = executeFast2;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLiteCursor != null) {
                                                                        }
                                                                        reset();
                                                                        throw th;
                                                                    }
                                                                }
                                                                try {
                                                                    TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                                                                    i5 = i5;
                                                                } catch (Exception e4) {
                                                                    exc2 = e4;
                                                                    i5 = i5;
                                                                    checkSQLException(exc2);
                                                                    i2 = i5;
                                                                    queryFinalized3.dispose();
                                                                    SQLiteDatabase sQLiteDatabase62 = this.database;
                                                                    sQLiteDatabase62.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase72 = this.database;
                                                                    StringBuilder sb2 = new StringBuilder();
                                                                    sb2.append("DELETE FROM messages_holes WHERE uid = ");
                                                                    sb2.append(l);
                                                                    sQLiteDatabase72.executeFast(sb2.toString()).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase82 = this.database;
                                                                    sQLiteDatabase82.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase92 = this.database;
                                                                    sQLiteDatabase92.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase102 = this.database;
                                                                    sQLiteDatabase102.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase112 = this.database;
                                                                    sQLiteDatabase112.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                                    SQLiteDatabase sQLiteDatabase122 = this.database;
                                                                    sQLiteDatabase122.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                                    MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                                    if (i2 == -1) {
                                                                    }
                                                                    sQLiteCursor2.dispose();
                                                                    sQLiteCursor = null;
                                                                    i4 = i + 1;
                                                                    arrayList2 = arrayList;
                                                                    i3 = 0;
                                                                }
                                                            } else {
                                                                i = i4;
                                                            }
                                                        } catch (Exception e5) {
                                                            e = e5;
                                                        }
                                                        try {
                                                            byteBufferValue.reuse();
                                                            queryFinalized2 = sQLiteCursor3;
                                                            i4 = i;
                                                            i3 = 0;
                                                        } catch (Exception e6) {
                                                            e = e6;
                                                            exc2 = e;
                                                            checkSQLException(exc2);
                                                            i2 = i5;
                                                            queryFinalized3.dispose();
                                                            SQLiteDatabase sQLiteDatabase622 = this.database;
                                                            sQLiteDatabase622.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase722 = this.database;
                                                            StringBuilder sb22 = new StringBuilder();
                                                            sb22.append("DELETE FROM messages_holes WHERE uid = ");
                                                            sb22.append(l);
                                                            sQLiteDatabase722.executeFast(sb22.toString()).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase822 = this.database;
                                                            sQLiteDatabase822.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase922 = this.database;
                                                            sQLiteDatabase922.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1022 = this.database;
                                                            sQLiteDatabase1022.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1122 = this.database;
                                                            sQLiteDatabase1122.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                                            SQLiteDatabase sQLiteDatabase1222 = this.database;
                                                            sQLiteDatabase1222.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                                            MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                                            if (i2 == -1) {
                                                            }
                                                            sQLiteCursor2.dispose();
                                                            sQLiteCursor = null;
                                                            i4 = i + 1;
                                                            arrayList2 = arrayList;
                                                            i3 = 0;
                                                        }
                                                    } catch (Throwable th5) {
                                                        th = th5;
                                                        th = th;
                                                        sQLitePreparedStatement = executeFast;
                                                        sQLitePreparedStatement2 = executeFast2;
                                                        sQLiteCursor = sQLiteCursor3;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLiteCursor != null) {
                                                        }
                                                        reset();
                                                        throw th;
                                                    }
                                                }
                                            } catch (Exception e7) {
                                                e = e7;
                                                sQLiteCursor3 = queryFinalized2;
                                            } catch (Throwable th6) {
                                                th = th6;
                                                sQLiteCursor3 = queryFinalized2;
                                            }
                                        }
                                        sQLiteCursor3 = queryFinalized2;
                                        i = i4;
                                        i2 = i5;
                                        queryFinalized3.dispose();
                                        SQLiteDatabase sQLiteDatabase6222 = this.database;
                                        sQLiteDatabase6222.executeFast("DELETE FROM messages_v2 WHERE uid = " + l + " AND mid != " + longValue2 + " AND mid != " + longValue3).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase7222 = this.database;
                                        StringBuilder sb222 = new StringBuilder();
                                        sb222.append("DELETE FROM messages_holes WHERE uid = ");
                                        sb222.append(l);
                                        sQLiteDatabase7222.executeFast(sb222.toString()).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase8222 = this.database;
                                        sQLiteDatabase8222.executeFast("DELETE FROM bot_keyboard WHERE uid = " + l).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase9222 = this.database;
                                        sQLiteDatabase9222.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + l).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase10222 = this.database;
                                        sQLiteDatabase10222.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + l).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase11222 = this.database;
                                        sQLiteDatabase11222.executeFast("DELETE FROM media_v4 WHERE uid = " + l).stepThis().dispose();
                                        SQLiteDatabase sQLiteDatabase12222 = this.database;
                                        sQLiteDatabase12222.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + l).stepThis().dispose();
                                        MediaDataController.getInstance(this.currentAccount).clearBotKeyboard(l.longValue());
                                        if (i2 == -1) {
                                            sQLiteCursor2 = sQLiteCursor3;
                                            try {
                                                createFirstHoles(l.longValue(), executeFast, executeFast2, i2, 0L);
                                            } catch (Exception e8) {
                                                e = e8;
                                                exc = e;
                                                sQLiteCursor = sQLiteCursor2;
                                                sQLitePreparedStatement = executeFast;
                                                sQLitePreparedStatement2 = executeFast2;
                                                checkSQLException(exc);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                            } catch (Throwable th7) {
                                                th = th7;
                                                th = th;
                                                sQLiteCursor = sQLiteCursor2;
                                                sQLitePreparedStatement = executeFast;
                                                sQLitePreparedStatement2 = executeFast2;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                reset();
                                                throw th;
                                            }
                                        } else {
                                            sQLiteCursor2 = sQLiteCursor3;
                                        }
                                    } else {
                                        arrayList = arrayList2;
                                        sQLiteCursor2 = queryFinalized2;
                                        i = i4;
                                    }
                                    sQLiteCursor2.dispose();
                                    sQLiteCursor = null;
                                } catch (Exception e9) {
                                    e = e9;
                                    sQLiteCursor2 = queryFinalized2;
                                } catch (Throwable th8) {
                                    th = th8;
                                    sQLiteCursor2 = queryFinalized2;
                                }
                            }
                            i4 = i + 1;
                            arrayList2 = arrayList;
                            i3 = 0;
                        } catch (Exception e10) {
                            exc = e10;
                        } catch (Throwable th9) {
                            th = th9;
                        }
                    }
                    executeFast.dispose();
                    executeFast2.dispose();
                } catch (Exception e11) {
                    exc = e11;
                    sQLitePreparedStatement = executeFast;
                    sQLitePreparedStatement2 = executeFast2;
                    sQLiteCursor = null;
                } catch (Throwable th10) {
                    th = th10;
                    sQLitePreparedStatement = executeFast;
                    sQLitePreparedStatement2 = executeFast2;
                    sQLiteCursor = null;
                }
            } catch (Exception e12) {
                exc = e12;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                checkSQLException(exc);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                    sQLiteDatabase2.commitTransaction();
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                if (sQLitePreparedStatement2 != null) {
                    sQLitePreparedStatement2.dispose();
                }
            } catch (Throwable th11) {
                th = th11;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLiteCursor != null) {
                }
                reset();
                throw th;
            }
        } catch (Exception e13) {
            exc = e13;
            sQLitePreparedStatement = null;
        } catch (Throwable th12) {
            th = th12;
            sQLitePreparedStatement = null;
        }
        try {
            this.database.commitTransaction();
            this.database.executeFast("PRAGMA journal_size_limit = 0").stepThis().dispose();
            this.database.executeFast("VACUUM").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = -1").stepThis().dispose();
            getMessagesController().getTopicsController().databaseCleared();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda116
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$clearLocalDatabase$43();
                }
            });
            SQLiteDatabase sQLiteDatabase13 = this.database;
            if (sQLiteDatabase13 != null) {
                sQLiteDatabase13.commitTransaction();
            }
        } catch (Exception e14) {
            exc = e14;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            checkSQLException(exc);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
        } catch (Throwable th13) {
            th = th13;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            reset();
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearLocalDatabase$43() {
        getMessagesController().getSavedMessagesController().cleanup();
    }

    public void saveTopics(final long j, final List<TLRPC$TL_forumTopic> list, final boolean z, boolean z2, final int i) {
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda207
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$saveTopics$45(j, list, z, i);
                }
            });
        } else {
            saveTopicsInternal(j, list, z, false, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveTopics$45(long j, List list, boolean z, int i) {
        saveTopicsInternal(j, list, z, true, i);
    }

    /* JADX WARN: Removed duplicated region for block: B:45:0x0160 A[Catch: all -> 0x0199, Exception -> 0x019d, TRY_LEAVE, TryCatch #8 {Exception -> 0x019d, all -> 0x0199, blocks: (B:28:0x00a7, B:30:0x00ad, B:43:0x0140, B:45:0x0160, B:37:0x0134, B:42:0x013d), top: B:75:0x00a7 }] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01a1 A[Catch: all -> 0x018f, Exception -> 0x0194, TryCatch #7 {Exception -> 0x0194, all -> 0x018f, blocks: (B:47:0x017b, B:57:0x0266, B:56:0x01a1, B:58:0x0273), top: B:77:0x017b }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0283  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x028f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void saveTopicsInternal(long j, List<TLRPC$TL_forumTopic> list, boolean z, boolean z2, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        int i2;
        HashMap hashMap;
        HashSet hashSet;
        int i3 = 2;
        int i4 = 1;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            try {
                HashSet hashSet2 = new HashSet();
                HashMap hashMap2 = new HashMap();
                for (int i5 = 0; i5 < list.size(); i5++) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT did, pinned FROM topics WHERE did = " + j + " AND topic_id = " + list.get(i5).id, new Object[0]);
                    boolean next = queryFinalized.next();
                    if (next) {
                        hashMap2.put(Integer.valueOf(i5), Integer.valueOf(queryFinalized.intValue(2)));
                    }
                    queryFinalized.dispose();
                    if (next) {
                        hashSet2.add(Integer.valueOf(i5));
                    }
                }
                if (z) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteDatabase2.executeFast("DELETE FROM topics WHERE did = " + j).stepThis().dispose();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                if (z2) {
                    try {
                        this.database.beginTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement3 = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement3 != null) {
                        }
                        this.database.commitTransaction();
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement3 = executeFast;
                        if (sQLitePreparedStatement3 != null) {
                        }
                        this.database.commitTransaction();
                        throw th;
                    }
                }
                int i6 = 0;
                while (i6 < list.size()) {
                    try {
                        TLRPC$TL_forumTopic tLRPC$TL_forumTopic = list.get(i6);
                        boolean contains = hashSet2.contains(Integer.valueOf(i6));
                        executeFast.requery();
                        executeFast.bindLong(i4, j);
                        executeFast.bindInteger(i3, tLRPC$TL_forumTopic.id);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic.getObjectSize());
                        tLRPC$TL_forumTopic.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.bindInteger(4, tLRPC$TL_forumTopic.top_message);
                        NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_forumTopic.topicStartMessage.getObjectSize());
                        tLRPC$TL_forumTopic.topicStartMessage.serializeToStream(nativeByteBuffer2);
                        executeFast.bindByteBuffer(5, nativeByteBuffer2);
                        executeFast.bindInteger(6, tLRPC$TL_forumTopic.unread_count);
                        executeFast.bindInteger(7, tLRPC$TL_forumTopic.read_inbox_max_id);
                        executeFast.bindInteger(8, tLRPC$TL_forumTopic.unread_mentions_count);
                        executeFast.bindInteger(9, tLRPC$TL_forumTopic.unread_reactions_count);
                        executeFast.bindInteger(10, tLRPC$TL_forumTopic.read_outbox_max_id);
                        if (tLRPC$TL_forumTopic.isShort) {
                            if (hashMap2.containsKey(Integer.valueOf(i6))) {
                                executeFast.bindInteger(11, ((Integer) hashMap2.get(Integer.valueOf(i6))).intValue());
                                executeFast.bindInteger(12, tLRPC$TL_forumTopic.totalMessagesCount);
                                executeFast.bindInteger(13, tLRPC$TL_forumTopic.hidden ? 1 : 0);
                                executeFast.bindInteger(14, i);
                                executeFast.step();
                                nativeByteBuffer2.reuse();
                                nativeByteBuffer.reuse();
                                if (!contains) {
                                    int i7 = tLRPC$TL_forumTopic.top_message;
                                    hashSet = hashSet2;
                                    i2 = i6;
                                    hashMap = hashMap2;
                                    sQLitePreparedStatement2 = executeFast;
                                    try {
                                        closeHolesInTable("messages_holes_topics", j, i7, i7, tLRPC$TL_forumTopic.id);
                                        int i8 = tLRPC$TL_forumTopic.top_message;
                                        closeHolesInMedia(j, i8, i8, -1, 0L);
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement3 != null) {
                                            sQLitePreparedStatement = sQLitePreparedStatement3;
                                            sQLitePreparedStatement.dispose();
                                        }
                                        this.database.commitTransaction();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                        if (sQLitePreparedStatement3 != null) {
                                            sQLitePreparedStatement3.dispose();
                                        }
                                        this.database.commitTransaction();
                                        throw th;
                                    }
                                } else {
                                    i2 = i6;
                                    hashMap = hashMap2;
                                    sQLitePreparedStatement2 = executeFast;
                                    hashSet = hashSet2;
                                    SQLiteDatabase sQLiteDatabase3 = this.database;
                                    Locale locale = Locale.ENGLISH;
                                    sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM messages_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    this.database.executeFast(String.format(locale, "DELETE FROM media_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id))).stepThis().dispose();
                                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO messages_holes_topics VALUES(?, ?, ?, ?)");
                                    createFirstHoles(j, executeFast2, this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)"), tLRPC$TL_forumTopic.top_message, tLRPC$TL_forumTopic.id);
                                    executeFast2.dispose();
                                    executeFast2.dispose();
                                }
                                i6 = i2 + 1;
                                hashSet2 = hashSet;
                                executeFast = sQLitePreparedStatement2;
                                hashMap2 = hashMap;
                                i3 = 2;
                                i4 = 1;
                            }
                        }
                        executeFast.bindInteger(11, tLRPC$TL_forumTopic.pinned ? tLRPC$TL_forumTopic.pinnedOrder + i4 : 0);
                        executeFast.bindInteger(12, tLRPC$TL_forumTopic.totalMessagesCount);
                        executeFast.bindInteger(13, tLRPC$TL_forumTopic.hidden ? 1 : 0);
                        executeFast.bindInteger(14, i);
                        executeFast.step();
                        nativeByteBuffer2.reuse();
                        nativeByteBuffer.reuse();
                        if (!contains) {
                        }
                        i6 = i2 + 1;
                        hashSet2 = hashSet;
                        executeFast = sQLitePreparedStatement2;
                        hashMap2 = hashMap;
                        i3 = 2;
                        i4 = 1;
                    } catch (Exception e3) {
                        e = e3;
                        sQLitePreparedStatement2 = executeFast;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement2 = executeFast;
                    }
                }
                sQLitePreparedStatement2 = executeFast;
                resetAllUnreadCounters(false);
            } catch (Exception e4) {
                e = e4;
            }
            if (sQLitePreparedStatement2 != null) {
                sQLitePreparedStatement = sQLitePreparedStatement2;
                sQLitePreparedStatement.dispose();
            }
            this.database.commitTransaction();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void updateTopicData(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, int i) {
        updateTopicData(j, tLRPC$TL_forumTopic, i, getConnectionsManager().getCurrentTime());
    }

    public void updateTopicData(final long j, final TLRPC$TL_forumTopic tLRPC$TL_forumTopic, final int i, final int i2) {
        if (tLRPC$TL_forumTopic == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicData$47(i, tLRPC$TL_forumTopic, j, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00a8 A[Catch: all -> 0x003e, Exception -> 0x0044, TRY_ENTER, TRY_LEAVE, TryCatch #8 {Exception -> 0x0044, all -> 0x003e, blocks: (B:5:0x001d, B:20:0x0051, B:40:0x00a8, B:62:0x00ed), top: B:93:0x001d }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00ca A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_LEAVE, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:43:0x00b0, B:48:0x00c6, B:50:0x00ca, B:53:0x00d6, B:55:0x00db, B:57:0x00df, B:58:0x00e3, B:60:0x00e7), top: B:87:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00d6 A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_ENTER, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:43:0x00b0, B:48:0x00c6, B:50:0x00ca, B:53:0x00d6, B:55:0x00db, B:57:0x00df, B:58:0x00e3, B:60:0x00e7), top: B:87:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00da  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00df A[Catch: all -> 0x00ba, Exception -> 0x00c0, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:43:0x00b0, B:48:0x00c6, B:50:0x00ca, B:53:0x00d6, B:55:0x00db, B:57:0x00df, B:58:0x00e3, B:60:0x00e7), top: B:87:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x00e7 A[Catch: all -> 0x00ba, Exception -> 0x00c0, TRY_LEAVE, TryCatch #11 {Exception -> 0x00c0, all -> 0x00ba, blocks: (B:43:0x00b0, B:48:0x00c6, B:50:0x00ca, B:53:0x00d6, B:55:0x00db, B:57:0x00df, B:58:0x00e3, B:60:0x00e7), top: B:87:0x00b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0143  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x014c  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x015d  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x0162  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x00b0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTopicData$47(final int i, final TLRPC$TL_forumTopic tLRPC$TL_forumTopic, final long j, int i2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor;
        int i3;
        TLRPC$TL_forumTopic tLRPC$TL_forumTopic2;
        MessagesStorage messagesStorage = this;
        if ((i & 16) != 0) {
            try {
                executeFast = messagesStorage.database.executeFast("UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?");
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                try {
                    messagesStorage.checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    messagesStorage.database.commitTransaction();
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    messagesStorage.database.commitTransaction();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
                throw th;
            }
            try {
                executeFast.requery();
                executeFast.bindInteger(1, tLRPC$TL_forumTopic.totalMessagesCount);
                executeFast.bindLong(2, j);
                executeFast.bindInteger(3, tLRPC$TL_forumTopic.id);
                executeFast.step();
                executeFast.dispose();
                if (i == 16) {
                    executeFast.dispose();
                    messagesStorage.database.commitTransaction();
                    return;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                messagesStorage.checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                messagesStorage.database.commitTransaction();
                throw th;
            }
        } else {
            executeFast = null;
        }
        SQLiteCursor queryFinalized = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT data, edit_date FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(tLRPC$TL_forumTopic.id)), new Object[0]);
        try {
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = queryFinalized;
        }
        if (queryFinalized.next()) {
            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
            i3 = queryFinalized.intValue(1);
            if (byteBufferValue != null) {
                tLRPC$TL_forumTopic2 = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue, byteBufferValue.readInt32(true), true);
                byteBufferValue.reuse();
                queryFinalized.dispose();
                if (tLRPC$TL_forumTopic2 != null && (i3 == 0 || i3 <= i2)) {
                    if ((i & 1) != 0) {
                        tLRPC$TL_forumTopic2.title = tLRPC$TL_forumTopic.title;
                    }
                    if ((i & 2) != 0) {
                        try {
                            tLRPC$TL_forumTopic2.icon_emoji_id = tLRPC$TL_forumTopic.icon_emoji_id;
                            tLRPC$TL_forumTopic2.flags |= 1;
                        } catch (Exception e4) {
                            e = e4;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            sQLitePreparedStatement = executeFast;
                            messagesStorage.checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            messagesStorage.database.commitTransaction();
                        } catch (Throwable th5) {
                            th = th5;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            sQLitePreparedStatement = executeFast;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            messagesStorage.database.commitTransaction();
                            throw th;
                        }
                    }
                    if ((i & 4) != 0) {
                        tLRPC$TL_forumTopic2.pinned = tLRPC$TL_forumTopic.pinned;
                        tLRPC$TL_forumTopic2.pinnedOrder = tLRPC$TL_forumTopic.pinnedOrder;
                    }
                    try {
                        int i4 = !tLRPC$TL_forumTopic2.pinned ? tLRPC$TL_forumTopic2.pinnedOrder + 1 : 0;
                        if ((i & 8) != 0) {
                            tLRPC$TL_forumTopic2.closed = tLRPC$TL_forumTopic.closed;
                        }
                        if ((i & 32) != 0) {
                            tLRPC$TL_forumTopic2.hidden = tLRPC$TL_forumTopic.hidden;
                        }
                        messagesStorage = this;
                        executeFast = messagesStorage.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
                        messagesStorage.database.beginTransaction();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_forumTopic2.getObjectSize());
                        tLRPC$TL_forumTopic2.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i4);
                        executeFast.bindInteger(3, tLRPC$TL_forumTopic2.hidden ? 1 : 0);
                        executeFast.bindInteger(4, i2);
                        executeFast.bindLong(5, j);
                        executeFast.bindInteger(6, tLRPC$TL_forumTopic2.id);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda232
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateTopicData$46(j, tLRPC$TL_forumTopic, i);
                            }
                        });
                    } catch (Exception e5) {
                        e = e5;
                        messagesStorage = this;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        messagesStorage.checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        messagesStorage.database.commitTransaction();
                    } catch (Throwable th6) {
                        th = th6;
                        messagesStorage = this;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        messagesStorage.database.commitTransaction();
                        throw th;
                    }
                }
                if (executeFast != null) {
                    executeFast.dispose();
                }
                messagesStorage.database.commitTransaction();
            }
        } else {
            i3 = 0;
        }
        tLRPC$TL_forumTopic2 = null;
        queryFinalized.dispose();
        if (tLRPC$TL_forumTopic2 != null) {
            if ((i & 1) != 0) {
            }
            if ((i & 2) != 0) {
            }
            if ((i & 4) != 0) {
            }
            if (!tLRPC$TL_forumTopic2.pinned) {
            }
            if ((i & 8) != 0) {
            }
            if ((i & 32) != 0) {
            }
            messagesStorage = this;
            executeFast = messagesStorage.database.executeFast("UPDATE topics SET data = ?, pinned = ?, hidden = ?, edit_date = ? WHERE did = ? AND topic_id = ?");
            messagesStorage.database.beginTransaction();
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_forumTopic2.getObjectSize());
            tLRPC$TL_forumTopic2.serializeToStream(nativeByteBuffer2);
            executeFast.bindByteBuffer(1, nativeByteBuffer2);
            executeFast.bindInteger(2, i4);
            executeFast.bindInteger(3, tLRPC$TL_forumTopic2.hidden ? 1 : 0);
            executeFast.bindInteger(4, i2);
            executeFast.bindLong(5, j);
            executeFast.bindInteger(6, tLRPC$TL_forumTopic2.id);
            executeFast.step();
            nativeByteBuffer2.reuse();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda232
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateTopicData$46(j, tLRPC$TL_forumTopic, i);
                }
            });
        }
        if (executeFast != null) {
        }
        messagesStorage.database.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicData$46(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic, int i) {
        getMessagesController().getTopicsController().updateTopicInUi(j, tLRPC$TL_forumTopic, i);
    }

    public void loadTopics(final long j, final Consumer<ArrayList<TLRPC$TL_forumTopic>> consumer) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadTopics$49(j, consumer);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:141:0x02c2  */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02cf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadTopics$49(long j, Consumer consumer) {
        SQLiteCursor sQLiteCursor;
        ArrayList<TLRPC$TL_forumTopic> arrayList;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC$TL_forumTopic> arrayList2;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$TL_forumTopic> arrayList3;
        int i;
        long j2;
        NativeByteBuffer byteBufferValue;
        ArrayList arrayList4;
        int i2 = 1;
        String str = ")";
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT top_message, data, topic_message, unread_count, max_read_id, unread_mentions, unread_reactions, read_outbox, pinned, total_messages_count FROM topics WHERE did = %d ORDER BY pinned ASC", Long.valueOf(j)), new Object[0]);
            SparseArray sparseArray = null;
            arrayList2 = null;
            HashSet hashSet = null;
            while (queryFinalized.next()) {
                try {
                    try {
                        if (arrayList2 == null) {
                            try {
                                ArrayList<TLRPC$TL_forumTopic> arrayList5 = new ArrayList<>();
                                try {
                                    SparseArray sparseArray2 = new SparseArray();
                                    hashSet = new HashSet();
                                    arrayList2 = arrayList5;
                                    sparseArray = sparseArray2;
                                } catch (Exception e) {
                                    e = e;
                                    arrayList2 = arrayList5;
                                    sQLiteCursor = queryFinalized;
                                    try {
                                        checkSQLException(e);
                                        if (sQLiteCursor != null) {
                                        }
                                        consumer.accept(arrayList2);
                                    } catch (Throwable th) {
                                        th = th;
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLiteCursor = queryFinalized;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        }
                        int intValue = queryFinalized.intValue(0);
                        NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(i2);
                        if (byteBufferValue2 != null) {
                            TLRPC$TL_forumTopic TLdeserialize = TLRPC$TL_forumTopic.TLdeserialize((AbstractSerializedData) byteBufferValue2, byteBufferValue2.readInt32(false), false);
                            if (TLdeserialize != null) {
                                TLdeserialize.top_message = intValue;
                                ArrayList arrayList6 = (ArrayList) sparseArray.get(intValue);
                                if (arrayList6 == null) {
                                    arrayList4 = new ArrayList();
                                    sparseArray.put(intValue, arrayList4);
                                } else {
                                    arrayList4 = arrayList6;
                                }
                                arrayList4.add(TLdeserialize);
                                hashSet.add(Integer.valueOf(intValue));
                                arrayList2.add(TLdeserialize);
                                NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(2);
                                TLdeserialize.topicStartMessage = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                byteBufferValue3.reuse();
                                TLdeserialize.unread_count = queryFinalized.intValue(3);
                                TLdeserialize.read_inbox_max_id = queryFinalized.intValue(4);
                                TLdeserialize.unread_mentions_count = queryFinalized.intValue(5);
                                TLdeserialize.unread_reactions_count = queryFinalized.intValue(6);
                                TLdeserialize.read_outbox_max_id = queryFinalized.intValue(7);
                                int intValue2 = queryFinalized.intValue(8) - 1;
                                TLdeserialize.pinnedOrder = intValue2;
                                TLdeserialize.pinned = intValue2 >= 0;
                                TLdeserialize.totalMessagesCount = queryFinalized.intValue(9);
                            }
                            byteBufferValue2.reuse();
                        }
                        i2 = 1;
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor2 = queryFinalized;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor2 = queryFinalized;
                }
            }
            ArrayList<Long> arrayList7 = new ArrayList<>();
            ArrayList<Long> arrayList8 = new ArrayList<>();
            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray = new LongSparseArray<>();
            LongSparseArray<ArrayList<Integer>> longSparseArray2 = new LongSparseArray<>();
            if (arrayList2 == null || arrayList2.isEmpty()) {
                sQLiteCursor2 = queryFinalized;
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb = new StringBuilder();
                sQLiteCursor2 = queryFinalized;
                try {
                    try {
                        sb.append("SELECT mid, data, replydata FROM messages_v2 WHERE uid = ");
                        sb.append(j);
                        sb.append(" AND mid IN (");
                        sb.append(TextUtils.join(",", hashSet));
                        sb.append(")");
                        arrayList3 = arrayList2;
                        i = 0;
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                } catch (Exception e3) {
                    e = e3;
                }
                try {
                    SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                    while (queryFinalized2.next()) {
                        try {
                            int intValue3 = queryFinalized2.intValue(i);
                            NativeByteBuffer byteBufferValue4 = queryFinalized2.byteBufferValue(1);
                            if (byteBufferValue4 != null) {
                                String str2 = str;
                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                if (TLdeserialize2 != null) {
                                    TLdeserialize2.readAttachPath(byteBufferValue4, UserConfig.getInstance(this.currentAccount).clientUserId);
                                }
                                byteBufferValue4.reuse();
                                hashSet.remove(Integer.valueOf(intValue3));
                                ArrayList arrayList9 = (ArrayList) sparseArray.get(intValue3);
                                if (arrayList9 != null) {
                                    for (int i3 = 0; i3 < arrayList9.size(); i3++) {
                                        ((TLRPC$TL_forumTopic) arrayList9.get(i3)).topMessage = TLdeserialize2;
                                    }
                                }
                                addUsersAndChatsFromMessage(TLdeserialize2, arrayList7, arrayList8, null);
                                if (TLdeserialize2 != null) {
                                    try {
                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize2.reply_to;
                                        if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                            TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize2.action;
                                            if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                if (!queryFinalized2.isNull(2) && (byteBufferValue = queryFinalized2.byteBufferValue(2)) != null) {
                                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                    TLdeserialize2.replyMessage = TLdeserialize3;
                                                    TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                    byteBufferValue.reuse();
                                                    TLRPC$Message tLRPC$Message = TLdeserialize2.replyMessage;
                                                    if (tLRPC$Message != null) {
                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList7, arrayList8, null);
                                                    }
                                                }
                                                if (TLdeserialize2.replyMessage == null) {
                                                    addReplyMessages(TLdeserialize2, longSparseArray, longSparseArray2);
                                                }
                                            }
                                        }
                                    } catch (Exception e4) {
                                        checkSQLException(e4);
                                    }
                                }
                                str = str2;
                            }
                            i = 0;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList3;
                            arrayList2 = arrayList;
                            sQLiteCursor = sQLiteCursor2;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor3 = sQLiteCursor;
                                sQLiteCursor3.dispose();
                            }
                            consumer.accept(arrayList2);
                        }
                    }
                    String str3 = str;
                    queryFinalized2.dispose();
                    if (hashSet.isEmpty()) {
                        j2 = j;
                    } else {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("SELECT mid, data FROM messages_topics WHERE uid = ");
                        j2 = j;
                        sb2.append(j2);
                        sb2.append(" AND mid IN (");
                        sb2.append(TextUtils.join(",", hashSet));
                        sb2.append(str3);
                        boolean z = false;
                        SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(sb2.toString(), new Object[0]);
                        while (queryFinalized3.next()) {
                            try {
                                int intValue4 = queryFinalized3.intValue(z ? 1 : 0);
                                NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(1);
                                if (byteBufferValue5 != null) {
                                    TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(z), z);
                                    if (TLdeserialize4 != null) {
                                        TLdeserialize4.readAttachPath(byteBufferValue5, UserConfig.getInstance(this.currentAccount).clientUserId);
                                    }
                                    byteBufferValue5.reuse();
                                    hashSet.remove(Integer.valueOf(intValue4));
                                    addUsersAndChatsFromMessage(TLdeserialize4, arrayList7, arrayList8, null);
                                    ArrayList arrayList10 = (ArrayList) sparseArray.get(intValue4);
                                    if (arrayList10 != null) {
                                        for (int i4 = 0; i4 < arrayList10.size(); i4++) {
                                            ((TLRPC$TL_forumTopic) arrayList10.get(i4)).topMessage = TLdeserialize4;
                                        }
                                    }
                                    z = false;
                                }
                            } catch (Exception e6) {
                                checkSQLException(e6);
                            }
                        }
                    }
                    loadReplyMessages(longSparseArray, longSparseArray2, arrayList7, arrayList8, 0);
                    final ArrayList<TLRPC$Chat> arrayList11 = new ArrayList<>();
                    final ArrayList<TLRPC$User> arrayList12 = new ArrayList<>();
                    if (!arrayList8.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList8), arrayList11);
                    }
                    if (!arrayList7.isEmpty()) {
                        getUsersInternal(arrayList7, arrayList12);
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda152
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$loadTopics$48(arrayList12, arrayList11);
                        }
                    });
                    arrayList2 = arrayList3;
                    loadGroupedMessagesForTopics(j2, arrayList2);
                } catch (Exception e7) {
                    e = e7;
                    arrayList2 = arrayList3;
                    arrayList = arrayList2;
                    arrayList2 = arrayList;
                    sQLiteCursor = sQLiteCursor2;
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    consumer.accept(arrayList2);
                }
            }
            sQLiteCursor3 = sQLiteCursor2;
        } catch (Exception e8) {
            e = e8;
            arrayList = null;
            sQLiteCursor2 = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
        sQLiteCursor3.dispose();
        consumer.accept(arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadTopics$48(ArrayList arrayList, ArrayList arrayList2) {
        if (!arrayList.isEmpty()) {
            getMessagesController().putUsers(arrayList, true);
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        getMessagesController().putChats(arrayList2, true);
    }

    public void loadGroupedMessagesForTopicUpdates(ArrayList<TopicsController.TopicUpdate> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (!arrayList.get(i).reloadTopic && !arrayList.get(i).onlyCounters && arrayList.get(i).topMessage != null) {
                    long j = arrayList.get(i).topMessage.grouped_id;
                    if (j != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(((TopicsController.TopicUpdate) arrayList3.get(0)).dialogId), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TopicsController.TopicUpdate) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void loadGroupedMessagesForTopics(long j, ArrayList<TLRPC$TL_forumTopic> arrayList) {
        if (arrayList == null) {
            return;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i).topMessage != null) {
                    long j2 = arrayList.get(i).topMessage.grouped_id;
                    if (j2 != 0) {
                        ArrayList arrayList2 = (ArrayList) longSparseArray.get(j2);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray.put(j2, arrayList2);
                        }
                        arrayList2.add(arrayList.get(i));
                    }
                }
            }
            for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
                long keyAt = longSparseArray.keyAt(i2);
                ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %s AND group_id = %s ORDER BY date DESC", Long.valueOf(j), Long.valueOf(keyAt)), new Object[0]);
                ArrayList<MessageObject> arrayList4 = null;
                while (queryFinalized.next()) {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                    }
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList<>();
                    }
                    arrayList4.add(new MessageObject(this.currentAccount, TLdeserialize, false, false));
                }
                queryFinalized.dispose();
                for (int i3 = 0; i3 < arrayList3.size(); i3++) {
                    ((TLRPC$TL_forumTopic) arrayList3.get(i3)).groupedMessages = arrayList4;
                }
            }
        } catch (Throwable th) {
            checkSQLException(th);
        }
    }

    public void getSavedDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda196
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSavedDialogMaxMessageId$51(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0037, code lost:
        if (r3 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getSavedDialogMaxMessageId$51(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT MAX(mid) FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(getUserConfig().getClientUserId()), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda227
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getSavedDialogMaxMessageId$50(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getSavedDialogMaxMessageId$50(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    public void deleteSavedDialog(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteSavedDialog$53(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$53(long j) {
        final long clientUserId;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                clientUserId = getUserConfig().getClientUserId();
                queryFinalized = this.database.queryFinalized("SELECT mid FROM messages_topics WHERE uid = ? AND topic_id = ?", Long.valueOf(clientUserId), Long.valueOf(j));
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            final ArrayList<Integer> arrayList = new ArrayList<>();
            while (queryFinalized.next()) {
                arrayList.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT mid, data FROM messages_v2 WHERE uid = ?", Long.valueOf(clientUserId));
            while (queryFinalized2.next()) {
                int intValue = queryFinalized2.intValue(0);
                if (!arrayList.contains(Integer.valueOf(intValue))) {
                    NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                    if (MessageObject.getSavedDialogId(clientUserId, TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)) == j) {
                        arrayList.add(Integer.valueOf(intValue));
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized2.dispose();
            if (arrayList.isEmpty()) {
                return;
            }
            lambda$markMessagesAsDeleted$209(clientUserId, arrayList, true, 0, 0);
            updateDialogsWithDeletedMessages(clientUserId, -clientUserId, arrayList, null, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda209
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteSavedDialog$52(clientUserId, arrayList);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor3 = sQLiteCursor2;
            checkSQLException(e);
            if (sQLiteCursor3 != null) {
                sQLiteCursor3.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor3 = sQLiteCursor;
            if (sQLiteCursor3 != null) {
                sQLiteCursor3.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteSavedDialog$52(long j, ArrayList arrayList) {
        getMessagesController().markDialogMessageAsDeleted(j, arrayList);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    public void removeTopic(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopic$54(j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopic$54(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void removeTopics(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeTopics$55(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeTopics$55(ArrayList arrayList, long j) {
        try {
            String join = TextUtils.join(", ", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM topics WHERE did = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
            this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND topic_id IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void updateTopicsWithReadMessages(final HashMap<TopicKey, Integer> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda89
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateTopicsWithReadMessages$56(hashMap);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTopicsWithReadMessages$56(HashMap hashMap) {
        for (TopicKey topicKey : hashMap.keySet()) {
            Integer num = (Integer) hashMap.get(topicKey);
            num.intValue();
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET read_outbox = max((SELECT read_outbox FROM topics WHERE did = %d AND topic_id = %d), %d) WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId), num, Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId))).stepThis().dispose();
            } catch (SQLiteException e) {
                checkSQLException(e);
            }
        }
    }

    public void setDialogTtl(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda228
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogTtl$57(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogTtl$57(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET ttl_period = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (SQLiteException e) {
            checkSQLException(e);
        }
    }

    public ArrayList<File> getDatabaseFiles() {
        ArrayList<File> arrayList = new ArrayList<>();
        arrayList.add(this.cacheFile);
        arrayList.add(this.walCacheFile);
        arrayList.add(this.shmCacheFile);
        return arrayList;
    }

    public void reset() {
        clearDatabaseValues();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda237
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$reset$58();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reset$58() {
        for (int i = 0; i < 2; i++) {
            getUserConfig().setDialogsLoadOffset(i, 0, 0, 0L, 0L, 0L, 0L);
            getUserConfig().setTotalDialogsCount(i, 0);
        }
        getUserConfig().clearFilters();
        getUserConfig().clearPinnedDialogsLoaded();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMediaDataController().loadAttachMenuBots(false, true);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getMessagesController().getStoriesController().cleanup();
    }

    public void fullReset() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$60();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$60() {
        cleanupInternal(true);
        clearLoadingDialogsOffsets();
        openDatabase(1);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda95
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$fullReset$59();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$fullReset$59() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onDatabaseReset, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didClearDatabase, new Object[0]);
        getMessagesController().getSavedMessagesController().cleanup();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    public void readAllDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$readAllDialogs$62(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$62(int i) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList = new ArrayList<>();
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                final LongSparseArray longSparseArray = new LongSparseArray();
                if (i >= 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", Integer.valueOf(i)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
                }
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (!DialogObject.isFolderDialogId(longValue)) {
                            ReadDialog readDialog = new ReadDialog();
                            readDialog.lastMid = queryFinalized.intValue(1);
                            readDialog.unreadCount = queryFinalized.intValue(2);
                            readDialog.date = queryFinalized.intValue(3);
                            longSparseArray.put(longValue, readDialog);
                            if (!DialogObject.isEncryptedDialog(longValue)) {
                                if (DialogObject.isChatDialog(longValue)) {
                                    long j = -longValue;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        arrayList2.add(Long.valueOf(j));
                                    }
                                } else if (!arrayList.contains(Long.valueOf(longValue))) {
                                    arrayList.add(Long.valueOf(longValue));
                                }
                            } else {
                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList3.add(Integer.valueOf(encryptedChatId));
                                }
                            }
                        }
                    } catch (Exception e) {
                        sQLiteCursor = queryFinalized;
                        e = e;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        sQLiteCursor = queryFinalized;
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                final ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                final ArrayList<TLRPC$Chat> arrayList5 = new ArrayList<>();
                final ArrayList<TLRPC$EncryptedChat> arrayList6 = new ArrayList<>();
                if (!arrayList3.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList6, arrayList);
                }
                if (!arrayList.isEmpty()) {
                    getUsersInternal(arrayList, arrayList4);
                }
                if (!arrayList2.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList2), arrayList5);
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda147
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$readAllDialogs$61(arrayList4, arrayList5, arrayList6, longSparseArray);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$61(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            if (getMessagesController().isForum(keyAt)) {
                getMessagesController().markAllTopicsAsRead(keyAt);
            }
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, 0L, readDialog.unreadCount, true, 0);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:189:0x03ea  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x008c  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x008e  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x00a3  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x00ac  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x00c2 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00eb A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0106 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x01b5  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01bd A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x01cc A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x01e9 A[Catch: all -> 0x0067, Exception -> 0x006b, TryCatch #4 {Exception -> 0x006b, blocks: (B:4:0x002e, B:6:0x0035, B:8:0x005c, B:17:0x0070, B:21:0x008f, B:25:0x00a6, B:29:0x00af, B:31:0x00c2, B:33:0x00ca, B:34:0x00cf, B:36:0x00eb, B:37:0x00f2, B:39:0x0106, B:41:0x0111, B:43:0x0136, B:44:0x0138, B:78:0x01b7, B:80:0x01bd, B:82:0x01c3, B:83:0x01c6, B:85:0x01cc, B:87:0x01da, B:89:0x01e9, B:91:0x01ef, B:93:0x01f9, B:94:0x0201, B:96:0x020c, B:75:0x01aa, B:76:0x01ae, B:97:0x0214), top: B:199:0x002e }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$messages_Dialogs loadDialogsByIds(String str, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Integer> arrayList3) throws Exception {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        NativeByteBuffer byteBufferValue2;
        int i;
        long longValue;
        long longValue2;
        NativeByteBuffer byteBufferValue3;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        LongSparseArray longSparseArray;
        NativeByteBuffer byteBufferValue4;
        int i2 = 2;
        int i3 = 0;
        int i4 = 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray();
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", str), new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    try {
                        long longValue3 = queryFinalized2.longValue(i3);
                        TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog.id = longValue3;
                        tLRPC$TL_dialog.top_message = queryFinalized2.intValue(i4);
                        tLRPC$TL_dialog.unread_count = queryFinalized2.intValue(i2);
                        tLRPC$TL_dialog.last_message_date = queryFinalized2.intValue(3);
                        int intValue = queryFinalized2.intValue(10);
                        tLRPC$TL_dialog.pts = intValue;
                        if (intValue != 0 && !DialogObject.isUserDialog(tLRPC$TL_dialog.id)) {
                            i = 1;
                            tLRPC$TL_dialog.flags = i;
                            tLRPC$TL_dialog.read_inbox_max_id = queryFinalized2.intValue(11);
                            tLRPC$TL_dialog.read_outbox_max_id = queryFinalized2.intValue(12);
                            int intValue2 = queryFinalized2.intValue(14);
                            tLRPC$TL_dialog.pinnedNum = intValue2;
                            tLRPC$TL_dialog.pinned = intValue2 == 0;
                            tLRPC$TL_dialog.unread_mentions_count = queryFinalized2.intValue(15);
                            int intValue3 = queryFinalized2.intValue(16);
                            tLRPC$TL_dialog.unread_mark = (intValue3 & 1) == 0;
                            tLRPC$TL_dialog.view_forum_as_messages = (intValue3 & 64) == 0;
                            longValue = queryFinalized2.longValue(8);
                            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                            tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings;
                            if ((((int) longValue) & i4) != 0) {
                                int i5 = (int) (longValue >> 32);
                                tLRPC$TL_peerNotifySettings.mute_until = i5;
                                if (i5 == 0) {
                                    tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                }
                            }
                            tLRPC$TL_dialog.folder_id = queryFinalized2.intValue(17);
                            tLRPC$TL_dialog.unread_reactions_count = queryFinalized2.intValue(19);
                            longValue2 = queryFinalized2.longValue(20);
                            if (longValue2 != 0) {
                                longSparseArray3.append(longValue3, Long.valueOf(longValue2));
                            }
                            tLRPC$TL_dialog.ttl_period = queryFinalized2.intValue(21);
                            tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                            byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                            if (byteBufferValue3 == null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                if (TLdeserialize != null) {
                                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                                    TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                    byteBufferValue3.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(5));
                                    TLdeserialize.id = queryFinalized2.intValue(6);
                                    int intValue4 = queryFinalized2.intValue(9);
                                    if (intValue4 != 0) {
                                        tLRPC$TL_dialog.last_message_date = intValue4;
                                    }
                                    TLdeserialize.send_state = queryFinalized2.intValue(7);
                                    TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs3;
                                    tLRPC$TL_messages_dialogs.messages.add(TLdeserialize);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                    try {
                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                        if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                            TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                            if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                                if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent)) {
                                                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore) {
                                                    }
                                                }
                                            }
                                            if (queryFinalized2.isNull(13) || (byteBufferValue4 = queryFinalized2.byteBufferValue(13)) == null) {
                                                longSparseArray = longSparseArray3;
                                            } else {
                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                longSparseArray = longSparseArray3;
                                                try {
                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                    byteBufferValue4.reuse();
                                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                    if (tLRPC$Message != null) {
                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList, arrayList2, null);
                                                    }
                                                } catch (Exception e) {
                                                    e = e;
                                                    checkSQLException(e);
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                    }
                                                    if (!DialogObject.isEncryptedDialog(longValue3)) {
                                                    }
                                                    tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs;
                                                    longSparseArray3 = longSparseArray;
                                                    i2 = 2;
                                                    i3 = 0;
                                                    i4 = 1;
                                                }
                                            }
                                            if (TLdeserialize.replyMessage == null) {
                                                longSparseArray2.put(tLRPC$TL_dialog.id, TLdeserialize);
                                            }
                                        }
                                    } catch (Exception e2) {
                                        e = e2;
                                        longSparseArray = longSparseArray3;
                                    }
                                } else {
                                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                    longSparseArray = longSparseArray3;
                                    byteBufferValue3.reuse();
                                }
                                if (!DialogObject.isEncryptedDialog(longValue3) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                    tLRPC$TL_dialog.read_inbox_max_id = 0;
                                }
                                if (!DialogObject.isEncryptedDialog(longValue3)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue3);
                                    if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList3.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (DialogObject.isUserDialog(longValue3)) {
                                    if (!arrayList.contains(Long.valueOf(longValue3))) {
                                        arrayList.add(Long.valueOf(longValue3));
                                    }
                                } else {
                                    long j = -longValue3;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        arrayList2.add(Long.valueOf(j));
                                    }
                                }
                                tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs;
                                longSparseArray3 = longSparseArray;
                                i2 = 2;
                                i3 = 0;
                                i4 = 1;
                            } else {
                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            }
                            longSparseArray = longSparseArray3;
                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                                tLRPC$TL_dialog.read_inbox_max_id = 0;
                            }
                            if (!DialogObject.isEncryptedDialog(longValue3)) {
                            }
                            tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs;
                            longSparseArray3 = longSparseArray;
                            i2 = 2;
                            i3 = 0;
                            i4 = 1;
                        }
                        i = 0;
                        tLRPC$TL_dialog.flags = i;
                        tLRPC$TL_dialog.read_inbox_max_id = queryFinalized2.intValue(11);
                        tLRPC$TL_dialog.read_outbox_max_id = queryFinalized2.intValue(12);
                        int intValue22 = queryFinalized2.intValue(14);
                        tLRPC$TL_dialog.pinnedNum = intValue22;
                        tLRPC$TL_dialog.pinned = intValue22 == 0;
                        tLRPC$TL_dialog.unread_mentions_count = queryFinalized2.intValue(15);
                        int intValue32 = queryFinalized2.intValue(16);
                        tLRPC$TL_dialog.unread_mark = (intValue32 & 1) == 0;
                        tLRPC$TL_dialog.view_forum_as_messages = (intValue32 & 64) == 0;
                        longValue = queryFinalized2.longValue(8);
                        TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                        tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings2;
                        if ((((int) longValue) & i4) != 0) {
                        }
                        tLRPC$TL_dialog.folder_id = queryFinalized2.intValue(17);
                        tLRPC$TL_dialog.unread_reactions_count = queryFinalized2.intValue(19);
                        longValue2 = queryFinalized2.longValue(20);
                        if (longValue2 != 0) {
                        }
                        tLRPC$TL_dialog.ttl_period = queryFinalized2.intValue(21);
                        tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$TL_dialog);
                        byteBufferValue3 = queryFinalized2.byteBufferValue(4);
                        if (byteBufferValue3 == null) {
                        }
                        longSparseArray = longSparseArray3;
                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                        }
                        if (!DialogObject.isEncryptedDialog(longValue3)) {
                        }
                        tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs;
                        longSparseArray3 = longSparseArray;
                        i2 = 2;
                        i3 = 0;
                        i4 = 1;
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = queryFinalized2;
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized2;
                }
            }
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs2;
            LongSparseArray longSparseArray4 = longSparseArray3;
            queryFinalized2.dispose();
            if (longSparseArray4.isEmpty()) {
                queryFinalized = null;
            } else {
                try {
                    StringBuilder sb = new StringBuilder();
                    int i6 = 0;
                    while (i6 < longSparseArray4.size()) {
                        sb.append("uid = ");
                        LongSparseArray longSparseArray5 = longSparseArray4;
                        sb.append(longSparseArray5.keyAt(i6));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray5.valueAt(i6));
                        i6++;
                        if (i6 < longSparseArray5.size()) {
                            sb.append(" OR ");
                        }
                        longSparseArray4 = longSparseArray5;
                    }
                    int i7 = 0;
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            try {
                                long longValue4 = queryFinalized.longValue(i7);
                                int i8 = 0;
                                while (true) {
                                    if (i8 >= tLRPC$TL_messages_dialogs4.dialogs.size()) {
                                        tLRPC$Dialog = null;
                                        break;
                                    }
                                    tLRPC$Dialog = tLRPC$TL_messages_dialogs4.dialogs.get(i8);
                                    if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                        break;
                                    }
                                    i8++;
                                }
                                if (tLRPC$Dialog != null && (byteBufferValue = queryFinalized.byteBufferValue(1)) != null) {
                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    if (TLdeserialize3 != null) {
                                        TLdeserialize3.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                        TLdeserialize3.id = queryFinalized.intValue(3);
                                        int intValue5 = queryFinalized.intValue(5);
                                        if (intValue5 != 0) {
                                            tLRPC$Dialog.last_message_date = intValue5;
                                        }
                                        TLdeserialize3.send_state = queryFinalized.intValue(4);
                                        TLdeserialize3.dialog_id = tLRPC$Dialog.id;
                                        tLRPC$TL_messages_dialogs4.messages.add(TLdeserialize3);
                                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList, arrayList2, null);
                                        try {
                                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = TLdeserialize3.reply_to;
                                            if (tLRPC$MessageReplyHeader2 != null && tLRPC$MessageReplyHeader2.reply_to_msg_id != 0) {
                                                TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                    if (!queryFinalized.isNull(6) && (byteBufferValue2 = queryFinalized.byteBufferValue(6)) != null) {
                                                        TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                        TLdeserialize3.replyMessage = TLdeserialize4;
                                                        TLdeserialize4.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                        if (tLRPC$Message2 != null) {
                                                            addUsersAndChatsFromMessage(tLRPC$Message2, arrayList, arrayList2, null);
                                                        }
                                                    }
                                                    if (TLdeserialize3.replyMessage == null) {
                                                        longSparseArray2.put(tLRPC$Dialog.id, TLdeserialize3);
                                                    }
                                                }
                                            }
                                        } catch (Exception e4) {
                                            checkSQLException(e4);
                                        }
                                    } else {
                                        byteBufferValue.reuse();
                                    }
                                }
                                i7 = 0;
                            } catch (Exception e5) {
                                e = e5;
                                sQLiteCursor = queryFinalized;
                                try {
                                    throw e;
                                } catch (Throwable th2) {
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    queryFinalized.dispose();
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor = null;
                    throw e;
                } catch (Throwable th4) {
                    th = th4;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            if (!longSparseArray2.isEmpty()) {
                int size = longSparseArray2.size();
                for (int i9 = 0; i9 < size; i9++) {
                    long keyAt = longSparseArray2.keyAt(i9);
                    TLRPC$Message tLRPC$Message3 = (TLRPC$Message) longSparseArray2.valueAt(i9);
                    boolean z = false;
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid = %d and uid = %d", Integer.valueOf(tLRPC$Message3.id), Long.valueOf(keyAt)), new Object[0]);
                    while (queryFinalized3.next()) {
                        NativeByteBuffer byteBufferValue5 = queryFinalized3.byteBufferValue(z ? 1 : 0);
                        if (byteBufferValue5 != null) {
                            TLRPC$Message TLdeserialize5 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(z), z);
                            TLdeserialize5.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                            byteBufferValue5.reuse();
                            TLdeserialize5.id = queryFinalized3.intValue(1);
                            TLdeserialize5.date = queryFinalized3.intValue(2);
                            TLdeserialize5.dialog_id = queryFinalized3.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize5, arrayList, arrayList2, null);
                            tLRPC$Message3.replyMessage = TLdeserialize5;
                            TLdeserialize5.dialog_id = tLRPC$Message3.dialog_id;
                            z = false;
                        }
                    }
                    queryFinalized3.dispose();
                }
            }
            if (queryFinalized != null) {
                queryFinalized.dispose();
            }
            return tLRPC$TL_messages_dialogs4;
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
        }
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadDialogFilters$64();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0270  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x0277  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:134:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x026b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadDialogFilters$64() {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        ArrayList<Long> arrayList;
        ArrayList<Long> arrayList2;
        ArrayList<Integer> arrayList3;
        ArrayList arrayList4;
        boolean z;
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        SQLiteCursor queryFinalized;
        try {
            try {
                arrayList = new ArrayList<>();
                arrayList2 = new ArrayList<>();
                arrayList3 = new ArrayList<>();
                arrayList4 = new ArrayList();
                SparseArray sparseArray = new SparseArray();
                arrayList.add(Long.valueOf(getUserConfig().getClientUserId()));
                int i = 0;
                SQLiteCursor sQLiteCursor2 = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title, color FROM dialog_filter WHERE 1", new Object[0]);
                boolean z2 = false;
                z = false;
                while (sQLiteCursor2.next()) {
                    try {
                        MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                        dialogFilter.id = sQLiteCursor2.intValue(i);
                        dialogFilter.order = sQLiteCursor2.intValue(1);
                        dialogFilter.unreadCount = -1;
                        dialogFilter.pendingUnreadCount = -1;
                        dialogFilter.flags = sQLiteCursor2.intValue(3);
                        dialogFilter.name = sQLiteCursor2.stringValue(4);
                        dialogFilter.color = sQLiteCursor2.intValue(5);
                        this.dialogFilters.add(dialogFilter);
                        this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                        sparseArray.put(dialogFilter.id, dialogFilter);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            z = true;
                        }
                        int i2 = 2;
                        int i3 = 0;
                        while (i3 < i2) {
                            if (i3 == 0) {
                                queryFinalized = this.database.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]);
                            } else {
                                queryFinalized = this.database.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                            }
                            while (queryFinalized.next()) {
                                long longValue = queryFinalized.longValue(i);
                                if (i3 == 0) {
                                    if (!DialogObject.isEncryptedDialog(longValue)) {
                                        dialogFilter.alwaysShow.add(Long.valueOf(longValue));
                                    }
                                    int intValue = queryFinalized.intValue(1);
                                    if (intValue != Integer.MIN_VALUE) {
                                        dialogFilter.pinnedDialogs.put(longValue, intValue);
                                        if (!arrayList4.contains(Long.valueOf(longValue))) {
                                            arrayList4.add(Long.valueOf(longValue));
                                        }
                                    }
                                } else if (!DialogObject.isEncryptedDialog(longValue)) {
                                    dialogFilter.neverShow.add(Long.valueOf(longValue));
                                }
                                if (DialogObject.isChatDialog(longValue)) {
                                    long j = -longValue;
                                    if (!arrayList2.contains(Long.valueOf(j))) {
                                        arrayList2.add(Long.valueOf(j));
                                    }
                                } else if (DialogObject.isUserDialog(longValue)) {
                                    if (!arrayList.contains(Long.valueOf(longValue))) {
                                        arrayList.add(Long.valueOf(longValue));
                                    }
                                } else {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                    if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList3.add(Integer.valueOf(encryptedChatId));
                                    }
                                }
                                i = 0;
                            }
                            queryFinalized.dispose();
                            i3++;
                            i2 = 2;
                            i = 0;
                        }
                        if (dialogFilter.id == 0) {
                            z2 = true;
                        }
                        i = 0;
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = sQLiteCursor2;
                        sQLitePreparedStatement2 = null;
                        try {
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement2 == null) {
                                sQLitePreparedStatement2.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
                sQLiteCursor2.dispose();
                if (!z2) {
                    MessagesController.DialogFilter dialogFilter2 = new MessagesController.DialogFilter();
                    dialogFilter2.id = 0;
                    dialogFilter2.order = 0;
                    dialogFilter2.color = -1;
                    dialogFilter2.name = "ALL_CHATS";
                    for (int i4 = 0; i4 < this.dialogFilters.size(); i4++) {
                        this.dialogFilters.get(i4).order++;
                    }
                    this.dialogFilters.add(dialogFilter2);
                    this.dialogFiltersMap.put(dialogFilter2.id, dialogFilter2);
                    sparseArray.put(dialogFilter2.id, dialogFilter2);
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
                    try {
                        sQLitePreparedStatement.bindInteger(1, dialogFilter2.id);
                        sQLitePreparedStatement.bindInteger(2, dialogFilter2.order);
                        sQLitePreparedStatement.bindInteger(3, dialogFilter2.unreadCount);
                        sQLitePreparedStatement.bindInteger(4, dialogFilter2.flags);
                        sQLitePreparedStatement.bindString(5, dialogFilter2.name);
                        sQLitePreparedStatement.bindInteger(6, dialogFilter2.color);
                        sQLitePreparedStatement.stepThis().dispose();
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor2 = null;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLiteCursor = sQLiteCursor2;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = null;
            }
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
        try {
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda42
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$loadDialogFilters$63;
                    lambda$loadDialogFilters$63 = MessagesStorage.lambda$loadDialogFilters$63((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$loadDialogFilters$63;
                }
            });
            if (z) {
                calcUnreadCounters(true);
            }
            if (!arrayList4.isEmpty()) {
                tLRPC$TL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3);
            } else {
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = tLRPC$TL_messages_dialogs;
            ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList7 = new ArrayList<>();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList7, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(arrayList, arrayList5);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList6);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, null, arrayList5, arrayList6, arrayList7, 0, null);
        } catch (Throwable th5) {
            th = th5;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            if (sQLiteCursor != null) {
            }
            if (sQLitePreparedStatement2 != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$loadDialogFilters$63(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:233:0x04ca, code lost:
        if (r22 == 0) goto L277;
     */
    /* JADX WARN: Code restructure failed: missing block: B:301:0x05b1, code lost:
        if (r19 == 0) goto L331;
     */
    /* JADX WARN: Removed duplicated region for block: B:111:0x02b8 A[Catch: all -> 0x002b, Exception -> 0x0030, TryCatch #6 {Exception -> 0x0030, all -> 0x002b, blocks: (B:7:0x000a, B:12:0x0035, B:13:0x0038, B:57:0x013a, B:59:0x0161, B:61:0x016c, B:63:0x0190, B:66:0x019a, B:67:0x01a1, B:69:0x01a5, B:77:0x01ce, B:70:0x01b0, B:72:0x01b4, B:75:0x01b9, B:76:0x01c4, B:78:0x01de, B:81:0x01ea, B:83:0x0201, B:85:0x020e, B:86:0x0220, B:88:0x0228, B:105:0x029c, B:91:0x0240, B:93:0x025d, B:96:0x0267, B:97:0x026e, B:99:0x0272, B:102:0x0277, B:104:0x028d, B:103:0x0283, B:109:0x02b2, B:111:0x02b8, B:113:0x02c9, B:115:0x02d5, B:118:0x02de, B:120:0x02f8, B:125:0x0308, B:128:0x0313, B:129:0x031b, B:131:0x0321, B:133:0x0325, B:135:0x033a, B:137:0x0352, B:134:0x0330, B:136:0x0342, B:138:0x0358, B:139:0x0361, B:142:0x0367, B:145:0x0375, B:154:0x038e, B:156:0x0393, B:158:0x0398, B:160:0x03a4, B:163:0x03ac, B:165:0x03b1, B:167:0x03bf, B:169:0x03c4, B:171:0x03c9, B:173:0x03ce, B:175:0x03db, B:176:0x03df, B:178:0x03e4, B:180:0x03f2, B:181:0x03f5, B:183:0x03fa, B:185:0x03ff, B:187:0x040c, B:188:0x0410, B:190:0x0415, B:192:0x0423, B:193:0x0426, B:195:0x042b, B:197:0x0430, B:199:0x043d, B:200:0x0441, B:202:0x0446, B:204:0x0454, B:205:0x0457, B:207:0x045c, B:209:0x0461, B:211:0x046e, B:212:0x0472, B:214:0x0477, B:216:0x0485, B:219:0x048c, B:221:0x0495, B:228:0x04b4, B:235:0x04cf, B:237:0x04d3, B:245:0x04e4, B:258:0x0509, B:260:0x050f, B:248:0x04ea, B:250:0x04ef, B:254:0x04fc, B:256:0x0501, B:238:0x04d6, B:240:0x04da, B:243:0x04df, B:244:0x04e2, B:232:0x04c3, B:285:0x0568, B:262:0x051c, B:264:0x052b, B:266:0x0531, B:268:0x0535, B:270:0x053a, B:284:0x0566, B:273:0x053e, B:275:0x0543, B:277:0x054c, B:280:0x0558, B:282:0x055d, B:269:0x0538, B:286:0x0573, B:288:0x057e, B:296:0x059b, B:303:0x05b6, B:305:0x05ba, B:313:0x05cb, B:327:0x05f3, B:315:0x05ce, B:317:0x05d3, B:321:0x05e0, B:323:0x05e5, B:325:0x05ed, B:306:0x05bd, B:308:0x05c1, B:311:0x05c6, B:312:0x05c9, B:300:0x05aa, B:350:0x0647, B:329:0x05ff, B:331:0x060c, B:333:0x0612, B:335:0x0616, B:337:0x061b, B:339:0x061e, B:341:0x0623, B:343:0x062c, B:345:0x0631, B:347:0x063a, B:349:0x0645, B:336:0x0619, B:351:0x064f, B:353:0x0653, B:356:0x065a, B:358:0x065e, B:359:0x0661, B:361:0x0665, B:363:0x0669, B:146:0x0378, B:148:0x037c, B:150:0x0384, B:151:0x0387, B:153:0x038c, B:152:0x038a), top: B:377:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x0365  */
    /* JADX WARN: Removed duplicated region for block: B:219:0x048c A[Catch: all -> 0x002b, Exception -> 0x0030, TryCatch #6 {Exception -> 0x0030, all -> 0x002b, blocks: (B:7:0x000a, B:12:0x0035, B:13:0x0038, B:57:0x013a, B:59:0x0161, B:61:0x016c, B:63:0x0190, B:66:0x019a, B:67:0x01a1, B:69:0x01a5, B:77:0x01ce, B:70:0x01b0, B:72:0x01b4, B:75:0x01b9, B:76:0x01c4, B:78:0x01de, B:81:0x01ea, B:83:0x0201, B:85:0x020e, B:86:0x0220, B:88:0x0228, B:105:0x029c, B:91:0x0240, B:93:0x025d, B:96:0x0267, B:97:0x026e, B:99:0x0272, B:102:0x0277, B:104:0x028d, B:103:0x0283, B:109:0x02b2, B:111:0x02b8, B:113:0x02c9, B:115:0x02d5, B:118:0x02de, B:120:0x02f8, B:125:0x0308, B:128:0x0313, B:129:0x031b, B:131:0x0321, B:133:0x0325, B:135:0x033a, B:137:0x0352, B:134:0x0330, B:136:0x0342, B:138:0x0358, B:139:0x0361, B:142:0x0367, B:145:0x0375, B:154:0x038e, B:156:0x0393, B:158:0x0398, B:160:0x03a4, B:163:0x03ac, B:165:0x03b1, B:167:0x03bf, B:169:0x03c4, B:171:0x03c9, B:173:0x03ce, B:175:0x03db, B:176:0x03df, B:178:0x03e4, B:180:0x03f2, B:181:0x03f5, B:183:0x03fa, B:185:0x03ff, B:187:0x040c, B:188:0x0410, B:190:0x0415, B:192:0x0423, B:193:0x0426, B:195:0x042b, B:197:0x0430, B:199:0x043d, B:200:0x0441, B:202:0x0446, B:204:0x0454, B:205:0x0457, B:207:0x045c, B:209:0x0461, B:211:0x046e, B:212:0x0472, B:214:0x0477, B:216:0x0485, B:219:0x048c, B:221:0x0495, B:228:0x04b4, B:235:0x04cf, B:237:0x04d3, B:245:0x04e4, B:258:0x0509, B:260:0x050f, B:248:0x04ea, B:250:0x04ef, B:254:0x04fc, B:256:0x0501, B:238:0x04d6, B:240:0x04da, B:243:0x04df, B:244:0x04e2, B:232:0x04c3, B:285:0x0568, B:262:0x051c, B:264:0x052b, B:266:0x0531, B:268:0x0535, B:270:0x053a, B:284:0x0566, B:273:0x053e, B:275:0x0543, B:277:0x054c, B:280:0x0558, B:282:0x055d, B:269:0x0538, B:286:0x0573, B:288:0x057e, B:296:0x059b, B:303:0x05b6, B:305:0x05ba, B:313:0x05cb, B:327:0x05f3, B:315:0x05ce, B:317:0x05d3, B:321:0x05e0, B:323:0x05e5, B:325:0x05ed, B:306:0x05bd, B:308:0x05c1, B:311:0x05c6, B:312:0x05c9, B:300:0x05aa, B:350:0x0647, B:329:0x05ff, B:331:0x060c, B:333:0x0612, B:335:0x0616, B:337:0x061b, B:339:0x061e, B:341:0x0623, B:343:0x062c, B:345:0x0631, B:347:0x063a, B:349:0x0645, B:336:0x0619, B:351:0x064f, B:353:0x0653, B:356:0x065a, B:358:0x065e, B:359:0x0661, B:361:0x0665, B:363:0x0669, B:146:0x0378, B:148:0x037c, B:150:0x0384, B:151:0x0387, B:153:0x038c, B:152:0x038a), top: B:377:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:355:0x0658  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x0674  */
    /* JADX WARN: Removed duplicated region for block: B:370:0x067a  */
    /* JADX WARN: Removed duplicated region for block: B:435:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcUnreadCounters(boolean z) {
        int i;
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        int i2;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int size;
        int i3;
        int i4;
        int i5;
        MessagesController.DialogFilter dialogFilter;
        int i6;
        int i7;
        MessagesController.DialogFilter dialogFilter2;
        int i8;
        int i9;
        MessagesController.DialogFilter dialogFilter3;
        int i10;
        int i11;
        int i12;
        MessagesController.DialogFilter dialogFilter4;
        int i13;
        int i14;
        int i15;
        MessagesController.DialogFilter dialogFilter5;
        int i16;
        int i17;
        LongSparseArray longSparseArray3;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        ArrayList<TLRPC$EncryptedChat> arrayList;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        int i18;
        LongSparseIntArray longSparseIntArray;
        int intValue;
        int intValue2;
        int i19 = 0;
        int i20 = 0;
        while (true) {
            i = 2;
            try {
                if (i20 >= 2) {
                    break;
                }
                for (int i21 = 0; i21 < 2; i21++) {
                    try {
                        int[] iArr = this.contacts[i20];
                        int[] iArr2 = this.nonContacts[i20];
                        int[] iArr3 = this.bots[i20];
                        int[] iArr4 = this.channels[i20];
                        this.groups[i20][i21] = 0;
                        iArr4[i21] = 0;
                        iArr3[i21] = 0;
                        iArr2[i21] = 0;
                        iArr[i21] = 0;
                    } catch (Exception e) {
                        exc = e;
                        sQLiteCursor2 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor2 == null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                i20++;
            } catch (Throwable th3) {
                th = th3;
            }
        }
        this.dialogsWithMentions.clear();
        this.dialogsWithUnread.clear();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList4 = new ArrayList<>();
        ArrayList<Long> arrayList5 = new ArrayList<>();
        ArrayList arrayList6 = new ArrayList();
        ArrayList arrayList7 = new ArrayList();
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        LongSparseIntArray longSparseIntArray3 = new LongSparseIntArray();
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT DISTINCT did FROM topics WHERE unread_count > 0 OR unread_mentions > 0", new Object[0]);
        while (true) {
            try {
                i2 = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                ArrayList<TLRPC$User> arrayList8 = arrayList3;
                long longValue = queryFinalized.longValue(0);
                if (isForum(longValue)) {
                    longSparseIntArray3.put(longValue, 1);
                }
                arrayList3 = arrayList8;
            } catch (Exception e2) {
                exc = e2;
                sQLiteCursor2 = queryFinalized;
            } catch (Throwable th4) {
                th = th4;
                sQLiteCursor = queryFinalized;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        }
        ArrayList<TLRPC$User> arrayList9 = arrayList3;
        queryFinalized.dispose();
        sQLiteCursor2 = this.database.queryFinalized("SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0", new Object[0]);
        while (sQLiteCursor2.next()) {
            try {
                int intValue3 = sQLiteCursor2.intValue(i2);
                long longValue2 = sQLiteCursor2.longValue(i19);
                if (isForum(longValue2)) {
                    intValue = longSparseIntArray3.get(longValue2, i19);
                    if (intValue != 0) {
                        intValue2 = 0;
                    }
                } else {
                    intValue = sQLiteCursor2.intValue(i);
                    intValue2 = sQLiteCursor2.intValue(3);
                }
                if (intValue > 0) {
                    this.dialogsWithUnread.put(longValue2, Integer.valueOf(intValue));
                }
                if (intValue2 > 0) {
                    this.dialogsWithMentions.put(longValue2, Integer.valueOf(intValue2));
                }
                longSparseIntArray2.put(longValue2, intValue3);
                if (DialogObject.isEncryptedDialog(longValue2)) {
                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                    if (!arrayList7.contains(Integer.valueOf(encryptedChatId))) {
                        arrayList7.add(Integer.valueOf(encryptedChatId));
                    }
                } else if (DialogObject.isUserDialog(longValue2)) {
                    if (!arrayList5.contains(Long.valueOf(longValue2))) {
                        arrayList5.add(Long.valueOf(longValue2));
                    }
                } else {
                    long j = -longValue2;
                    if (!arrayList6.contains(Long.valueOf(j))) {
                        arrayList6.add(Long.valueOf(j));
                    }
                }
                i19 = 0;
                i = 2;
                i2 = 1;
            } catch (Exception e3) {
                exc = e3;
                checkSQLException(exc);
                if (sQLiteCursor2 == null) {
                    sQLiteCursor2.dispose();
                    return;
                }
                return;
            }
        }
        sQLiteCursor2.dispose();
        LongSparseArray longSparseArray6 = new LongSparseArray();
        LongSparseArray longSparseArray7 = new LongSparseArray();
        LongSparseArray longSparseArray8 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray4 = new LongSparseIntArray();
        LongSparseArray longSparseArray9 = new LongSparseArray();
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray4;
        if (!arrayList5.isEmpty()) {
            getUsersInternal(arrayList5, arrayList2, true);
            int size2 = arrayList2.size();
            int i22 = 0;
            while (i22 < size2) {
                TLRPC$User tLRPC$User = arrayList2.get(i22);
                ArrayList<TLRPC$User> arrayList10 = arrayList2;
                LongSparseArray longSparseArray11 = longSparseArray7;
                int i23 = size2;
                ArrayList arrayList11 = arrayList6;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0L);
                int i24 = longSparseIntArray2.get(tLRPC$User.id);
                if (isDialogMuted) {
                    longSparseArray9.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (i24 == 1) {
                    longSparseArray10.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr5 = this.bots[i24];
                    iArr5[isDialogMuted ? 1 : 0] = iArr5[isDialogMuted ? 1 : 0] + 1;
                } else {
                    if (!tLRPC$User.self && !tLRPC$User.contact) {
                        int[] iArr6 = this.nonContacts[i24];
                        iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                    }
                    int[] iArr7 = this.contacts[i24];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray6.put(tLRPC$User.id, tLRPC$User);
                i22++;
                arrayList2 = arrayList10;
                longSparseArray7 = longSparseArray11;
                arrayList6 = arrayList11;
                size2 = i23;
            }
        }
        LongSparseArray longSparseArray12 = longSparseArray7;
        ArrayList arrayList12 = arrayList6;
        if (!arrayList7.isEmpty()) {
            ArrayList<Long> arrayList13 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList14 = new ArrayList<>();
            getEncryptedChatsInternal(TextUtils.join(",", arrayList7), arrayList14, arrayList13);
            if (!arrayList13.isEmpty()) {
                getUsersInternal(arrayList13, arrayList9, true);
                int i25 = 0;
                for (int size3 = arrayList9.size(); i25 < size3; size3 = size3) {
                    TLRPC$User tLRPC$User2 = arrayList9.get(i25);
                    longSparseArray8.put(tLRPC$User2.id, tLRPC$User2);
                    i25++;
                    longSparseArray6 = longSparseArray6;
                }
                LongSparseArray longSparseArray13 = longSparseArray6;
                int size4 = arrayList14.size();
                int i26 = 0;
                while (i26 < size4) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray8.get(arrayList14.get(i26).user_id);
                    if (tLRPC$User3 == null) {
                        longSparseArray4 = longSparseArray8;
                        arrayList = arrayList14;
                        longSparseArray5 = longSparseArray13;
                        longSparseIntArray = longSparseIntArray5;
                    } else {
                        LongSparseArray longSparseArray14 = longSparseArray8;
                        arrayList = arrayList14;
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        longSparseArray4 = longSparseArray14;
                        longSparseArray5 = longSparseArray13;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        int i27 = longSparseIntArray2.get(makeEncryptedDialogId);
                        if (isDialogMuted2) {
                            longSparseArray9.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (i27 == 1) {
                            longSparseArray10.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (!tLRPC$User3.self && !tLRPC$User3.contact) {
                            int[] iArr8 = this.nonContacts[i27];
                            iArr8[isDialogMuted2 ? 1 : 0] = iArr8[isDialogMuted2 ? 1 : 0] + 1;
                            i18 = 1;
                            longSparseIntArray = longSparseIntArray5;
                            longSparseIntArray.put(tLRPC$User3.id, longSparseIntArray.get(tLRPC$User3.id, 0) + i18);
                        }
                        int[] iArr9 = this.contacts[i27];
                        i18 = 1;
                        iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        longSparseIntArray = longSparseIntArray5;
                        longSparseIntArray.put(tLRPC$User3.id, longSparseIntArray.get(tLRPC$User3.id, 0) + i18);
                    }
                    i26++;
                    longSparseIntArray5 = longSparseIntArray;
                    arrayList14 = arrayList;
                    longSparseArray13 = longSparseArray5;
                    longSparseArray8 = longSparseArray4;
                }
                longSparseArray2 = longSparseArray8;
                longSparseArray = longSparseArray13;
                LongSparseIntArray longSparseIntArray6 = longSparseIntArray5;
                if (!arrayList12.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList12), arrayList4);
                    int size5 = arrayList4.size();
                    int i28 = 0;
                    while (i28 < size5) {
                        TLRPC$Chat tLRPC$Chat = arrayList4.get(i28);
                        if ((tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) || ChatObject.isNotInChat(tLRPC$Chat)) {
                            longSparseArray3 = longSparseArray12;
                            this.dialogsWithUnread.remove(-tLRPC$Chat.id);
                            this.dialogsWithMentions.remove(-tLRPC$Chat.id);
                        } else {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0L, tLRPC$Chat);
                            int i29 = longSparseIntArray2.get(-tLRPC$Chat.id);
                            char c = (!isDialogMuted3 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0) ? (char) 0 : (char) 1;
                            if (isDialogMuted3) {
                                longSparseArray9.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (i29 == 1) {
                                longSparseArray10.put(-tLRPC$Chat.id, Boolean.TRUE);
                            }
                            if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                int[] iArr10 = this.channels[i29];
                                iArr10[c] = iArr10[c] + 1;
                            } else {
                                int[] iArr11 = this.groups[i29];
                                iArr11[c] = iArr11[c] + 1;
                            }
                            longSparseArray3 = longSparseArray12;
                            longSparseArray3.put(tLRPC$Chat.id, tLRPC$Chat);
                        }
                        i28++;
                        longSparseArray12 = longSparseArray3;
                    }
                }
                LongSparseArray longSparseArray15 = longSparseArray12;
                size = this.dialogFilters.size();
                for (i3 = 0; i3 < size + 2; i3++) {
                    if (i3 < size) {
                        dialogFilter = this.dialogFilters.get(i3);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            i5 = dialogFilter.flags;
                        }
                    } else {
                        int i30 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i3 == size) {
                            if (!getNotificationsController().showBadgeMuted) {
                                i30 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            i4 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                        } else {
                            i4 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i5 = i4 | i30;
                        dialogFilter = null;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr12 = this.contacts[0];
                            int i31 = iArr12[0];
                            i6 = (MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 ? iArr12[1] + i31 : i31;
                        } else {
                            i6 = 0;
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr13 = this.contacts[1];
                            i6 += iArr13[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr13[1];
                            }
                        }
                    } else {
                        i6 = 0;
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr14 = this.nonContacts[0];
                            i6 += iArr14[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr14[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr15 = this.nonContacts[1];
                            i6 += iArr15[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr15[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr16 = this.groups[0];
                            i6 += iArr16[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr16[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr17 = this.groups[1];
                            i6 += iArr17[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr17[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr18 = this.channels[0];
                            i6 += iArr18[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr18[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr19 = this.channels[1];
                            i6 += iArr19[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr19[1];
                            }
                        }
                    }
                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                            int[] iArr20 = this.bots[0];
                            i6 += iArr20[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr20[1];
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            int[] iArr21 = this.bots[1];
                            i6 += iArr21[0];
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                i6 += iArr21[1];
                            }
                            if (dialogFilter == null) {
                                int size6 = dialogFilter.alwaysShow.size();
                                int i32 = 0;
                                while (i32 < size6) {
                                    long longValue3 = dialogFilter.alwaysShow.get(i32).longValue();
                                    if (DialogObject.isUserDialog(longValue3)) {
                                        i13 = size6;
                                        int i33 = 0;
                                        for (int i34 = 2; i33 < i34; i34 = 2) {
                                            TLRPC$User tLRPC$User4 = (TLRPC$User) (i33 == 0 ? longSparseArray : longSparseArray2).get(longValue3);
                                            if (tLRPC$User4 != null) {
                                                if (i33 == 0) {
                                                    i15 = size;
                                                    i16 = 1;
                                                } else {
                                                    i15 = size;
                                                    i16 = longSparseIntArray6.get(longValue3, 0);
                                                }
                                                if (tLRPC$User4.bot) {
                                                    i17 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User4.self && !tLRPC$User4.contact) {
                                                        i17 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i17 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i17 & i5) == 0) {
                                                    dialogFilter5 = dialogFilter;
                                                } else {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0) {
                                                        dialogFilter5 = dialogFilter;
                                                        if (longSparseArray9.indexOfKey(tLRPC$User4.id) >= 0) {
                                                        }
                                                    } else {
                                                        dialogFilter5 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        if (longSparseArray10.indexOfKey(tLRPC$User4.id) < 0) {
                                                        }
                                                    }
                                                    i33++;
                                                    size = i15;
                                                    dialogFilter = dialogFilter5;
                                                }
                                                i6 += i16;
                                                i33++;
                                                size = i15;
                                                dialogFilter = dialogFilter5;
                                            } else {
                                                i15 = size;
                                            }
                                            dialogFilter5 = dialogFilter;
                                            i33++;
                                            size = i15;
                                            dialogFilter = dialogFilter5;
                                        }
                                        i12 = size;
                                        dialogFilter4 = dialogFilter;
                                    } else {
                                        i12 = size;
                                        dialogFilter4 = dialogFilter;
                                        i13 = size6;
                                        TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray15.get(-longValue3);
                                        if (tLRPC$Chat2 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                                i14 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i14 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i14 & i5) != 0) {
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0) {
                                                    if (longSparseArray9.indexOfKey(-tLRPC$Chat2.id) >= 0 && this.dialogsWithMentions.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                    }
                                                }
                                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                    if (longSparseArray10.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                    }
                                                }
                                            }
                                            i6++;
                                        }
                                    }
                                    i32++;
                                    size6 = i13;
                                    size = i12;
                                    dialogFilter = dialogFilter4;
                                }
                                int i35 = size;
                                int size7 = dialogFilter.neverShow.size();
                                int i36 = 0;
                                while (i36 < size7) {
                                    long longValue4 = dialogFilter.neverShow.get(i36).longValue();
                                    if (DialogObject.isUserDialog(longValue4)) {
                                        int i37 = 0;
                                        while (i37 < 2) {
                                            TLRPC$User tLRPC$User5 = (TLRPC$User) (i37 == 0 ? longSparseArray : longSparseArray2).get(longValue4);
                                            if (tLRPC$User5 != null) {
                                                if (i37 == 0) {
                                                    i9 = size7;
                                                    i10 = 1;
                                                } else {
                                                    i9 = size7;
                                                    i10 = longSparseIntArray6.get(longValue4, 0);
                                                }
                                                if (tLRPC$User5.bot) {
                                                    i11 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else {
                                                    if (!tLRPC$User5.self && !tLRPC$User5.contact) {
                                                        i11 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                    }
                                                    i11 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                }
                                                if ((i11 & i5) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        dialogFilter3 = dialogFilter;
                                                        if (longSparseArray10.indexOfKey(tLRPC$User5.id) >= 0) {
                                                            i37++;
                                                            size7 = i9;
                                                            dialogFilter = dialogFilter3;
                                                        }
                                                    } else {
                                                        dialogFilter3 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray9.indexOfKey(tLRPC$User5.id) < 0) {
                                                        i6 -= i10;
                                                    }
                                                    i37++;
                                                    size7 = i9;
                                                    dialogFilter = dialogFilter3;
                                                }
                                            } else {
                                                i9 = size7;
                                            }
                                            dialogFilter3 = dialogFilter;
                                            i37++;
                                            size7 = i9;
                                            dialogFilter = dialogFilter3;
                                        }
                                        i7 = size7;
                                        dialogFilter2 = dialogFilter;
                                    } else {
                                        i7 = size7;
                                        dialogFilter2 = dialogFilter;
                                        TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray15.get(-longValue4);
                                        if (tLRPC$Chat3 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                                i8 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i8 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i8 & i5) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray10.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray9.indexOfKey(-tLRPC$Chat3.id) < 0 || this.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                                i6--;
                                            }
                                        }
                                    }
                                    i36++;
                                    size7 = i7;
                                    dialogFilter = dialogFilter2;
                                }
                                dialogFilter.pendingUnreadCount = i6;
                                if (z) {
                                    dialogFilter.unreadCount = i6;
                                }
                                size = i35;
                            } else if (i3 == size) {
                                this.pendingMainUnreadCount = i6;
                                if (z) {
                                    this.mainUnreadCount = i6;
                                }
                            } else if (i3 == size + 1) {
                                this.pendingArchiveUnreadCount = i6;
                                if (z) {
                                    this.archiveUnreadCount = i6;
                                }
                            }
                        }
                    }
                    if (dialogFilter == null) {
                    }
                }
            }
        }
        longSparseArray = longSparseArray6;
        longSparseArray2 = longSparseArray8;
        LongSparseIntArray longSparseIntArray62 = longSparseIntArray5;
        if (!arrayList12.isEmpty()) {
        }
        LongSparseArray longSparseArray152 = longSparseArray12;
        size = this.dialogFilters.size();
        while (i3 < size + 2) {
        }
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        try {
            try {
                if (!this.dialogFilters.contains(dialogFilter)) {
                    if (z) {
                        if (this.dialogFilters.get(0).isDefault()) {
                            this.dialogFilters.add(1, dialogFilter);
                        } else {
                            this.dialogFilters.add(0, dialogFilter);
                        }
                    } else {
                        this.dialogFilters.add(dialogFilter);
                    }
                    this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                }
                executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.id == 0 ? "ALL_CHATS" : dialogFilter.name);
            executeFast.bindInteger(6, dialogFilter.color);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long longValue = dialogFilter.alwaysShow.get(i2).longValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, longValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(longValue, Integer.MIN_VALUE));
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i3);
                    if (DialogObject.isEncryptedDialog(keyAt)) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i3));
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (i = 0; i < size3; i++) {
                    executeFast3.requery();
                    executeFast3.bindInteger(1, dialogFilter.id);
                    executeFast3.bindLong(2, dialogFilter.neverShow.get(i).longValue());
                    executeFast3.step();
                }
                executeFast3.dispose();
                this.database.commitTransaction();
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement3 = sQLitePreparedStatement2;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase4 = this.database;
            if (sQLiteDatabase4 != null) {
                sQLiteDatabase4.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement3 = sQLitePreparedStatement;
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
            if (sQLitePreparedStatement3 != null) {
                sQLitePreparedStatement3.dispose();
            }
            throw th;
        }
    }

    private ArrayList<Long> toPeerIds(ArrayList<TLRPC$InputPeer> arrayList) {
        ArrayList<Long> arrayList2 = new ArrayList<>();
        if (arrayList == null) {
            return arrayList2;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$InputPeer tLRPC$InputPeer = arrayList.get(i);
            if (tLRPC$InputPeer != null) {
                long j = tLRPC$InputPeer.user_id;
                if (j == 0) {
                    long j2 = tLRPC$InputPeer.chat_id;
                    if (j2 == 0) {
                        j2 = tLRPC$InputPeer.channel_id;
                    }
                    j = -j2;
                }
                arrayList2.add(Long.valueOf(j));
            }
        }
        return arrayList2;
    }

    public void checkLoadedRemoteFilters(final ArrayList<TLRPC$DialogFilter> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda65
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkLoadedRemoteFilters$66(arrayList, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0271 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:117:0x02a1  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0314 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:151:0x0320  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x0326 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:155:0x032b A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:156:0x033b  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01a7 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x01d3 A[Catch: Exception -> 0x0020, TryCatch #0 {Exception -> 0x0020, blocks: (B:3:0x0002, B:5:0x0010, B:8:0x0023, B:10:0x005c, B:12:0x0075, B:14:0x0079, B:16:0x007d, B:17:0x0080, B:19:0x0084, B:20:0x0087, B:22:0x008b, B:23:0x008e, B:25:0x0092, B:26:0x0095, B:28:0x0099, B:29:0x009c, B:31:0x00a0, B:32:0x00a3, B:34:0x00a7, B:35:0x00aa, B:37:0x00ae, B:39:0x00b5, B:40:0x00b8, B:42:0x00cc, B:44:0x00dd, B:46:0x00e4, B:48:0x00ea, B:50:0x00f2, B:52:0x00f6, B:54:0x00fc, B:56:0x0100, B:58:0x0106, B:60:0x0123, B:62:0x0137, B:65:0x0147, B:67:0x0155, B:69:0x016d, B:73:0x018d, B:72:0x0184, B:77:0x019e, B:79:0x01a7, B:83:0x01c2, B:82:0x01b4, B:84:0x01c5, B:86:0x01d3, B:88:0x01e5, B:94:0x01f8, B:97:0x0202, B:99:0x020e, B:102:0x0235, B:104:0x0247, B:106:0x024d, B:108:0x0255, B:89:0x01ea, B:93:0x01f3, B:92:0x01f1, B:111:0x0271, B:112:0x0279, B:114:0x027f, B:118:0x02a3, B:120:0x02ac, B:122:0x02b2, B:125:0x02b9, B:126:0x02c0, B:128:0x02c6, B:129:0x02d0, B:131:0x02d6, B:138:0x02ec, B:141:0x02f8, B:144:0x0300, B:145:0x0303, B:147:0x0308, B:123:0x02b5, B:119:0x02a8, B:148:0x030e, B:150:0x0314, B:153:0x0326, B:155:0x032b, B:215:0x0481, B:158:0x0345, B:160:0x0365, B:162:0x0369, B:165:0x0374, B:167:0x037d, B:169:0x038c, B:175:0x039f, B:177:0x03a7, B:178:0x03ac, B:180:0x03c7, B:181:0x03cd, B:170:0x0391, B:174:0x039a, B:173:0x0398, B:184:0x03dd, B:187:0x03e4, B:189:0x03e9, B:191:0x03f0, B:193:0x03fc, B:195:0x0406, B:196:0x0409, B:198:0x040f, B:212:0x0455, B:201:0x0422, B:205:0x0430, B:207:0x043f, B:208:0x0442, B:210:0x044a, B:204:0x042e, B:213:0x0461, B:188:0x03e7, B:185:0x03e0, B:214:0x0474, B:216:0x0492, B:219:0x04a5, B:221:0x04bb, B:223:0x04d4, B:225:0x04df, B:227:0x04e9, B:228:0x04fb, B:230:0x0506, B:232:0x0514, B:233:0x0526, B:235:0x052c, B:237:0x0532, B:239:0x0538, B:240:0x054a, B:222:0x04cf), top: B:244:0x0002 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$66(ArrayList arrayList, Runnable runnable) {
        TLRPC$messages_Dialogs tLRPC$TL_messages_dialogs;
        SparseArray<MessagesController.DialogFilter> sparseArray;
        int i;
        HashMap<Integer, HashSet<Long>> hashMap;
        HashSet<Integer> hashSet;
        ArrayList<Long> arrayList2;
        HashMap<Long, TLRPC$InputPeer> hashMap2;
        ArrayList<Long> arrayList3;
        TLRPC$DialogFilter tLRPC$DialogFilter;
        ArrayList<TLRPC$InputPeer> arrayList4;
        ArrayList<Long> arrayList5;
        HashMap<Long, TLRPC$InputPeer> hashMap3;
        ArrayList<Long> arrayList6;
        Long valueOf;
        boolean z;
        boolean z2;
        int i2;
        boolean z3;
        boolean z4;
        ArrayList<Long> arrayList7;
        HashMap<Long, TLRPC$InputPeer> hashMap4;
        LinkedHashMap linkedHashMap;
        int size;
        int i3;
        int size2;
        int i4;
        LinkedHashMap linkedHashMap2;
        boolean z5;
        int i5;
        int i6;
        HashMap<Integer, HashSet<Long>> hashMap5;
        TLRPC$DialogFilter tLRPC$DialogFilter2;
        ArrayList<TLRPC$InputPeer> arrayList8;
        Long valueOf2;
        ArrayList<Long> arrayList9;
        TLRPC$DialogFilter tLRPC$DialogFilter3;
        LinkedHashMap linkedHashMap3;
        int i7;
        ArrayList arrayList10;
        try {
            SparseArray<MessagesController.DialogFilter> sparseArray2 = new SparseArray<>();
            int size3 = this.dialogFilters.size();
            for (int i8 = 0; i8 < size3; i8++) {
                MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i8);
                sparseArray2.put(dialogFilter.id, dialogFilter);
            }
            ArrayList<Integer> arrayList11 = new ArrayList<>();
            ArrayList<Long> arrayList12 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap6 = new HashMap<>();
            ArrayList<Long> arrayList13 = new ArrayList<>();
            HashMap<Long, TLRPC$InputPeer> hashMap7 = new HashMap<>();
            ArrayList arrayList14 = new ArrayList();
            HashMap<Long, TLRPC$InputPeer> hashMap8 = new HashMap<>();
            ArrayList<MessagesController.DialogFilter> arrayList15 = new ArrayList<>();
            HashMap<Integer, HashSet<Long>> hashMap9 = new HashMap<>();
            HashSet<Integer> hashSet2 = new HashSet<>();
            int size4 = arrayList.size();
            int i9 = 0;
            while (i9 < size4) {
                TLRPC$DialogFilter tLRPC$DialogFilter4 = (TLRPC$DialogFilter) arrayList.get(i9);
                int i10 = size4;
                arrayList11.add(Integer.valueOf(tLRPC$DialogFilter4.id));
                int i11 = tLRPC$DialogFilter4.contacts ? MessagesController.DIALOG_FILTER_FLAG_CONTACTS : 0;
                if (tLRPC$DialogFilter4.non_contacts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                }
                if (tLRPC$DialogFilter4.groups) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                }
                if (tLRPC$DialogFilter4.broadcasts) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                }
                if (tLRPC$DialogFilter4.bots) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_BOTS;
                }
                if (tLRPC$DialogFilter4.exclude_muted) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                }
                if (tLRPC$DialogFilter4.exclude_read) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
                }
                if (tLRPC$DialogFilter4.exclude_archived) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                }
                if (tLRPC$DialogFilter4 instanceof TLRPC$TL_dialogFilterChatlist) {
                    i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST;
                    if (tLRPC$DialogFilter4.has_my_invites) {
                        i11 |= MessagesController.DIALOG_FILTER_FLAG_CHATLIST_ADMIN;
                    }
                }
                ArrayList<Integer> arrayList16 = arrayList11;
                MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(tLRPC$DialogFilter4.id);
                boolean z6 = true;
                if (dialogFilter2 != null) {
                    sparseArray2.remove(tLRPC$DialogFilter4.id);
                    sparseArray = sparseArray2;
                    if (TextUtils.equals(dialogFilter2.name, tLRPC$DialogFilter4.title)) {
                        z = false;
                    } else {
                        dialogFilter2.name = tLRPC$DialogFilter4.title;
                        z = true;
                    }
                    if ((tLRPC$DialogFilter4.flags & 134217728) != 0) {
                        i2 = tLRPC$DialogFilter4.color;
                        z2 = z;
                    } else {
                        z2 = z;
                        i2 = -1;
                    }
                    if (dialogFilter2.color != i2) {
                        dialogFilter2.color = i2;
                        z3 = true;
                    } else {
                        z3 = z2;
                    }
                    if (dialogFilter2.flags != i11) {
                        dialogFilter2.flags = i11;
                        z3 = true;
                        z4 = true;
                    } else {
                        z4 = false;
                    }
                    boolean z7 = z3;
                    HashSet hashSet3 = new HashSet(dialogFilter2.alwaysShow);
                    hashSet3.addAll(dialogFilter2.neverShow);
                    HashSet<Long> hashSet4 = new HashSet<>();
                    boolean z8 = z4;
                    if (dialogFilter2.pinnedDialogs.size() != 0) {
                        ArrayList arrayList17 = new ArrayList();
                        i = i9;
                        int size5 = dialogFilter2.pinnedDialogs.size();
                        arrayList7 = arrayList13;
                        int i12 = 0;
                        boolean z9 = false;
                        while (i12 < size5) {
                            int i13 = size5;
                            long keyAt = dialogFilter2.pinnedDialogs.keyAt(i12);
                            if (DialogObject.isEncryptedDialog(keyAt)) {
                                z9 = true;
                            }
                            arrayList17.add(Long.valueOf(keyAt));
                            i12++;
                            size5 = i13;
                        }
                        if (z9) {
                            linkedHashMap = new LinkedHashMap();
                            final LongSparseIntArray longSparseIntArray = dialogFilter2.pinnedDialogs;
                            hashMap4 = hashMap7;
                            Collections.sort(arrayList17, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda112
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$checkLoadedRemoteFilters$65;
                                    lambda$checkLoadedRemoteFilters$65 = MessagesStorage.lambda$checkLoadedRemoteFilters$65(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                                    return lambda$checkLoadedRemoteFilters$65;
                                }
                            });
                            int size6 = arrayList17.size();
                            int i14 = 0;
                            while (i14 < size6) {
                                int i15 = size6;
                                Long l = (Long) arrayList17.get(i14);
                                if (DialogObject.isEncryptedDialog(l.longValue())) {
                                    arrayList10 = arrayList17;
                                    linkedHashMap.put(Integer.valueOf(i14), l);
                                } else {
                                    arrayList10 = arrayList17;
                                }
                                i14++;
                                arrayList17 = arrayList10;
                                size6 = i15;
                            }
                            size = dialogFilter2.pinnedDialogs.size();
                            for (i3 = 0; i3 < size; i3++) {
                                long keyAt2 = dialogFilter2.pinnedDialogs.keyAt(i3);
                                if (!DialogObject.isEncryptedDialog(keyAt2)) {
                                    hashSet4.add(Long.valueOf(keyAt2));
                                    hashSet3.remove(Long.valueOf(keyAt2));
                                }
                            }
                            dialogFilter2.pinnedDialogs.clear();
                            size2 = tLRPC$DialogFilter4.pinned_peers.size();
                            i4 = 0;
                            while (i4 < size2) {
                                TLRPC$InputPeer tLRPC$InputPeer = tLRPC$DialogFilter4.pinned_peers.get(i4);
                                HashMap<Integer, HashSet<Long>> hashMap10 = hashMap9;
                                HashSet<Integer> hashSet5 = hashSet2;
                                long j = tLRPC$InputPeer.user_id;
                                if (j != 0) {
                                    valueOf2 = Long.valueOf(j);
                                } else {
                                    long j2 = tLRPC$InputPeer.chat_id;
                                    if (j2 == 0) {
                                        j2 = tLRPC$InputPeer.channel_id;
                                    }
                                    valueOf2 = Long.valueOf(-j2);
                                }
                                int size7 = dialogFilter2.pinnedDialogs.size();
                                if (linkedHashMap != null) {
                                    i7 = size2;
                                    while (true) {
                                        Long l2 = (Long) linkedHashMap.remove(Integer.valueOf(size7));
                                        if (l2 == null) {
                                            break;
                                        }
                                        dialogFilter2.pinnedDialogs.put(l2.longValue(), size7);
                                        size7++;
                                        arrayList12 = arrayList12;
                                        tLRPC$DialogFilter4 = tLRPC$DialogFilter4;
                                        linkedHashMap = linkedHashMap;
                                    }
                                    arrayList9 = arrayList12;
                                    tLRPC$DialogFilter3 = tLRPC$DialogFilter4;
                                    linkedHashMap3 = linkedHashMap;
                                } else {
                                    arrayList9 = arrayList12;
                                    tLRPC$DialogFilter3 = tLRPC$DialogFilter4;
                                    linkedHashMap3 = linkedHashMap;
                                    i7 = size2;
                                }
                                dialogFilter2.pinnedDialogs.put(valueOf2.longValue(), size7);
                                hashSet3.remove(valueOf2);
                                if (!hashSet4.remove(valueOf2)) {
                                    if (!hashMap8.containsKey(valueOf2)) {
                                        arrayList14.add(valueOf2);
                                        hashMap8.put(valueOf2, tLRPC$InputPeer);
                                    }
                                    z7 = true;
                                }
                                i4++;
                                hashMap9 = hashMap10;
                                hashSet2 = hashSet5;
                                size2 = i7;
                                arrayList12 = arrayList9;
                                tLRPC$DialogFilter4 = tLRPC$DialogFilter3;
                                linkedHashMap = linkedHashMap3;
                            }
                            ArrayList<Long> arrayList18 = arrayList12;
                            TLRPC$DialogFilter tLRPC$DialogFilter5 = tLRPC$DialogFilter4;
                            linkedHashMap2 = linkedHashMap;
                            HashMap<Integer, HashSet<Long>> hashMap11 = hashMap9;
                            hashSet = hashSet2;
                            if (linkedHashMap2 != null) {
                                for (Map.Entry entry : linkedHashMap2.entrySet()) {
                                    dialogFilter2.pinnedDialogs.put(((Long) entry.getValue()).longValue(), dialogFilter2.pinnedDialogs.size());
                                }
                            }
                            z5 = z8;
                            i6 = 0;
                            for (i5 = 2; i6 < i5; i5 = 2) {
                                if (i6 == 0) {
                                    tLRPC$DialogFilter2 = tLRPC$DialogFilter5;
                                    arrayList8 = tLRPC$DialogFilter2.include_peers;
                                } else {
                                    tLRPC$DialogFilter2 = tLRPC$DialogFilter5;
                                    arrayList8 = tLRPC$DialogFilter2.exclude_peers;
                                }
                                ArrayList<Long> peerIds = toPeerIds(arrayList8);
                                ArrayList<Long> arrayList19 = i6 == 0 ? dialogFilter2.alwaysShow : dialogFilter2.neverShow;
                                if (i6 == 0) {
                                    ArrayList<Long> peerIds2 = toPeerIds(tLRPC$DialogFilter2.pinned_peers);
                                    for (int i16 = 0; i16 < peerIds2.size(); i16++) {
                                        peerIds.remove(peerIds2.get(i16));
                                    }
                                    peerIds.addAll(0, peerIds2);
                                }
                                int size8 = peerIds.size();
                                boolean z10 = peerIds.size() != arrayList19.size();
                                if (!z10) {
                                    int i17 = 0;
                                    while (true) {
                                        if (i17 >= size8) {
                                            break;
                                        } else if (!arrayList19.contains(peerIds.get(i17))) {
                                            z10 = true;
                                            break;
                                        } else {
                                            i17++;
                                        }
                                    }
                                }
                                if (z10) {
                                    if (i6 == 0) {
                                        dialogFilter2.alwaysShow = peerIds;
                                    } else {
                                        dialogFilter2.neverShow = peerIds;
                                    }
                                    z5 = true;
                                    z7 = true;
                                }
                                i6++;
                                tLRPC$DialogFilter5 = tLRPC$DialogFilter2;
                            }
                            if (hashSet4.isEmpty()) {
                                hashMap5 = hashMap11;
                                hashMap5.put(Integer.valueOf(dialogFilter2.id), hashSet4);
                            } else {
                                hashMap5 = hashMap11;
                                z6 = z7;
                            }
                            if (z6) {
                                arrayList15.add(dialogFilter2);
                            }
                            if (z5) {
                                hashMap = hashMap5;
                            } else {
                                hashSet.add(Integer.valueOf(dialogFilter2.id));
                                hashMap = hashMap5;
                                hashSet = hashSet;
                            }
                            arrayList2 = arrayList7;
                            hashMap2 = hashMap4;
                            arrayList3 = arrayList18;
                        } else {
                            hashMap4 = hashMap7;
                        }
                    } else {
                        arrayList7 = arrayList13;
                        hashMap4 = hashMap7;
                        i = i9;
                    }
                    linkedHashMap = null;
                    size = dialogFilter2.pinnedDialogs.size();
                    while (i3 < size) {
                    }
                    dialogFilter2.pinnedDialogs.clear();
                    size2 = tLRPC$DialogFilter4.pinned_peers.size();
                    i4 = 0;
                    while (i4 < size2) {
                    }
                    ArrayList<Long> arrayList182 = arrayList12;
                    TLRPC$DialogFilter tLRPC$DialogFilter52 = tLRPC$DialogFilter4;
                    linkedHashMap2 = linkedHashMap;
                    HashMap<Integer, HashSet<Long>> hashMap112 = hashMap9;
                    hashSet = hashSet2;
                    if (linkedHashMap2 != null) {
                    }
                    z5 = z8;
                    i6 = 0;
                    while (i6 < i5) {
                    }
                    if (hashSet4.isEmpty()) {
                    }
                    if (z6) {
                    }
                    if (z5) {
                    }
                    arrayList2 = arrayList7;
                    hashMap2 = hashMap4;
                    arrayList3 = arrayList182;
                } else {
                    sparseArray = sparseArray2;
                    ArrayList<Long> arrayList20 = arrayList12;
                    TLRPC$DialogFilter tLRPC$DialogFilter6 = tLRPC$DialogFilter4;
                    ArrayList<Long> arrayList21 = arrayList13;
                    HashMap<Long, TLRPC$InputPeer> hashMap12 = hashMap7;
                    i = i9;
                    MessagesController.DialogFilter dialogFilter3 = new MessagesController.DialogFilter();
                    dialogFilter3.id = tLRPC$DialogFilter6.id;
                    dialogFilter3.flags = i11;
                    dialogFilter3.name = tLRPC$DialogFilter6.title;
                    dialogFilter3.color = (tLRPC$DialogFilter6.flags & 134217728) != 0 ? tLRPC$DialogFilter6.color : -1;
                    dialogFilter3.pendingUnreadCount = -1;
                    int i18 = 0;
                    for (int i19 = 2; i18 < i19; i19 = 2) {
                        if (i18 == 0) {
                            int size9 = tLRPC$DialogFilter6.pinned_peers.size();
                            int i20 = 0;
                            while (i20 < size9) {
                                TLRPC$InputPeer tLRPC$InputPeer2 = tLRPC$DialogFilter6.pinned_peers.get(i20);
                                int i21 = i18;
                                long j3 = tLRPC$InputPeer2.user_id;
                                if (j3 != 0) {
                                    valueOf = Long.valueOf(j3);
                                } else {
                                    long j4 = tLRPC$InputPeer2.chat_id;
                                    if (j4 == 0) {
                                        j4 = tLRPC$InputPeer2.channel_id;
                                    }
                                    valueOf = Long.valueOf(-j4);
                                }
                                if (!dialogFilter3.alwaysShow.contains(valueOf)) {
                                    dialogFilter3.alwaysShow.add(valueOf);
                                }
                                HashMap<Integer, HashSet<Long>> hashMap13 = hashMap9;
                                HashSet<Integer> hashSet6 = hashSet2;
                                dialogFilter3.pinnedDialogs.put(valueOf.longValue(), dialogFilter3.pinnedDialogs.size() + 1);
                                if (!hashMap8.containsKey(valueOf)) {
                                    arrayList14.add(valueOf);
                                    hashMap8.put(valueOf, tLRPC$InputPeer2);
                                }
                                i20++;
                                i18 = i21;
                                hashMap9 = hashMap13;
                                hashSet2 = hashSet6;
                            }
                        }
                        int i22 = i18;
                        HashMap<Integer, HashSet<Long>> hashMap14 = hashMap9;
                        HashSet<Integer> hashSet7 = hashSet2;
                        ArrayList<TLRPC$InputPeer> arrayList22 = i22 == 0 ? tLRPC$DialogFilter6.include_peers : tLRPC$DialogFilter6.exclude_peers;
                        ArrayList<Long> arrayList23 = i22 == 0 ? dialogFilter3.alwaysShow : dialogFilter3.neverShow;
                        int size10 = arrayList22.size();
                        int i23 = 0;
                        while (i23 < size10) {
                            TLRPC$InputPeer tLRPC$InputPeer3 = arrayList22.get(i23);
                            long j5 = tLRPC$InputPeer3.user_id;
                            if (j5 != 0) {
                                Long valueOf3 = Long.valueOf(j5);
                                if (!arrayList23.contains(valueOf3)) {
                                    arrayList23.add(valueOf3);
                                }
                                if (hashMap6.containsKey(valueOf3)) {
                                    arrayList5 = arrayList20;
                                } else {
                                    arrayList5 = arrayList20;
                                    arrayList5.add(valueOf3);
                                    hashMap6.put(valueOf3, tLRPC$InputPeer3);
                                }
                                tLRPC$DialogFilter = tLRPC$DialogFilter6;
                                arrayList4 = arrayList22;
                                arrayList6 = arrayList21;
                                hashMap3 = hashMap12;
                            } else {
                                tLRPC$DialogFilter = tLRPC$DialogFilter6;
                                arrayList4 = arrayList22;
                                arrayList5 = arrayList20;
                                long j6 = tLRPC$InputPeer3.chat_id;
                                if (j6 == 0) {
                                    j6 = tLRPC$InputPeer3.channel_id;
                                }
                                Long valueOf4 = Long.valueOf(j6);
                                Long valueOf5 = Long.valueOf(-j6);
                                if (!arrayList23.contains(valueOf5)) {
                                    arrayList23.add(valueOf5);
                                }
                                hashMap3 = hashMap12;
                                if (hashMap3.containsKey(valueOf4)) {
                                    arrayList6 = arrayList21;
                                } else {
                                    arrayList6 = arrayList21;
                                    arrayList6.add(valueOf4);
                                    hashMap3.put(valueOf4, tLRPC$InputPeer3);
                                }
                            }
                            i23++;
                            hashMap12 = hashMap3;
                            arrayList21 = arrayList6;
                            arrayList22 = arrayList4;
                            arrayList20 = arrayList5;
                            tLRPC$DialogFilter6 = tLRPC$DialogFilter;
                        }
                        i18 = i22 + 1;
                        hashMap9 = hashMap14;
                        hashSet2 = hashSet7;
                        tLRPC$DialogFilter6 = tLRPC$DialogFilter6;
                    }
                    hashMap = hashMap9;
                    hashSet = hashSet2;
                    arrayList2 = arrayList21;
                    hashMap2 = hashMap12;
                    arrayList3 = arrayList20;
                    arrayList15.add(dialogFilter3);
                }
                i9 = i + 1;
                hashMap7 = hashMap2;
                arrayList13 = arrayList2;
                arrayList12 = arrayList3;
                size4 = i10;
                arrayList11 = arrayList16;
                sparseArray2 = sparseArray;
                hashMap9 = hashMap;
                hashSet2 = hashSet;
            }
            SparseArray<MessagesController.DialogFilter> sparseArray3 = sparseArray2;
            ArrayList<Long> arrayList24 = arrayList13;
            ArrayList<Integer> arrayList25 = arrayList11;
            HashMap<Integer, HashSet<Long>> hashMap15 = hashMap9;
            HashSet<Integer> hashSet8 = hashSet2;
            ArrayList<Long> arrayList26 = arrayList12;
            HashMap<Long, TLRPC$InputPeer> hashMap16 = hashMap7;
            if (!arrayList14.isEmpty()) {
                tLRPC$TL_messages_dialogs = loadDialogsByIds(TextUtils.join(",", arrayList14), arrayList26, arrayList24, new ArrayList<>());
                int size11 = tLRPC$TL_messages_dialogs.dialogs.size();
                for (int i24 = 0; i24 < size11; i24++) {
                    hashMap8.remove(Long.valueOf(tLRPC$TL_messages_dialogs.dialogs.get(i24).id));
                }
            } else {
                tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            }
            ArrayList<TLRPC$User> arrayList27 = new ArrayList<>();
            if (!arrayList26.isEmpty()) {
                getUsersInternal(arrayList26, arrayList27);
                int size12 = arrayList27.size();
                for (int i25 = 0; i25 < size12; i25++) {
                    hashMap6.remove(Long.valueOf(arrayList27.get(i25).id));
                }
            }
            ArrayList<TLRPC$Chat> arrayList28 = new ArrayList<>();
            if (!arrayList24.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList24), arrayList28);
                int size13 = arrayList28.size();
                for (int i26 = 0; i26 < size13; i26++) {
                    hashMap16.remove(Long.valueOf(arrayList28.get(i26).id));
                }
            }
            if (hashMap6.isEmpty() && hashMap16.isEmpty() && hashMap8.isEmpty()) {
                lambda$processLoadedFilterPeers$68(tLRPC$TL_messages_dialogs, null, arrayList27, arrayList28, arrayList15, sparseArray3, arrayList25, hashMap15, hashSet8, runnable);
            } else {
                getMessagesController().loadFilterPeers(hashMap8, hashMap6, hashMap16, tLRPC$TL_messages_dialogs, new TLRPC$TL_messages_dialogs(), arrayList27, arrayList28, arrayList15, sparseArray3, arrayList25, hashMap15, hashSet8, runnable);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkLoadedRemoteFilters$65(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal */
    public void lambda$processLoadedFilterPeers$68(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashSet<Integer> hashSet, Runnable runnable) {
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$69(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry<Integer, HashSet<Long>> entry : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(entry.getKey().intValue());
            if (dialogFilter2 != null) {
                Iterator<Long> it2 = entry.getValue().iterator();
                while (it2.hasNext()) {
                    dialogFilter2.pinnedDialogs.delete(it2.next().longValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter3.id));
            if (dialogFilter3.order != indexOf) {
                dialogFilter3.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda101
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processLoadedFilterPeersInternal$67;
                    lambda$processLoadedFilterPeersInternal$67 = MessagesStorage.lambda$processLoadedFilterPeersInternal$67((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$processLoadedFilterPeersInternal$67;
                }
            });
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList<>(this.dialogFilters), tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, null, i4, runnable);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedFilterPeersInternal$67(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void processLoadedFilterPeers(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final ArrayList<MessagesController.DialogFilter> arrayList3, final SparseArray<MessagesController.DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap, final HashSet<Integer> hashSet, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda51
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processLoadedFilterPeers$68(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashSet, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal */
    public void lambda$deleteDialogFilter$69(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            sQLiteDatabase3.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void deleteDialogFilter(final MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda187
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialogFilter$69(dialogFilter);
            }
        });
    }

    public void saveDialogFilter(final MessagesController.DialogFilter dialogFilter, final boolean z, final boolean z2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda159
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$71(dialogFilter, z, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$71(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda184
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$70();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$70() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void saveDialogFiltersOrderInternal() {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
                int size = this.dialogFilters.size();
                for (int i = 0; i < size; i++) {
                    MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, dialogFilter.order);
                    sQLitePreparedStatement.bindInteger(2, dialogFilter.flags);
                    sQLitePreparedStatement.bindInteger(3, dialogFilter.id);
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveDialogFiltersOrder() {
        final ArrayList arrayList = new ArrayList(getMessagesController().dialogFilters);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda43
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveDialogFiltersOrder$72(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFiltersOrder$72(ArrayList arrayList) {
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.dialogFilters.addAll(arrayList);
        for (int i = 0; i < arrayList.size(); i++) {
            ((MessagesController.DialogFilter) arrayList.get(i)).order = i;
            this.dialogFiltersMap.put(((MessagesController.DialogFilter) arrayList.get(i)).id, (MessagesController.DialogFilter) arrayList.get(i));
        }
        saveDialogFiltersOrderInternal();
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static void addReplyMessages(TLRPC$Message tLRPC$Message, LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        int i = tLRPC$Message.reply_to.reply_to_msg_id;
        long replyToDialogId = (tLRPC$Message.flags & 1073741824) != 0 ? tLRPC$Message.quick_reply_shortcut_id : MessageObject.getReplyToDialogId(tLRPC$Message);
        SparseArray<ArrayList<TLRPC$Message>> sparseArray = longSparseArray.get(replyToDialogId);
        ArrayList<Integer> arrayList = longSparseArray2.get(replyToDialogId);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            longSparseArray.put(replyToDialogId, sparseArray);
        }
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            longSparseArray2.put(replyToDialogId, arrayList);
        }
        ArrayList<TLRPC$Message> arrayList2 = sparseArray.get(tLRPC$Message.reply_to.reply_to_msg_id);
        if (arrayList2 == null) {
            arrayList2 = new ArrayList<>();
            sparseArray.put(tLRPC$Message.reply_to.reply_to_msg_id, arrayList2);
            if (!arrayList.contains(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id));
            }
        }
        arrayList2.add(tLRPC$Message);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00f4 A[Catch: all -> 0x0136, Exception -> 0x013a, TryCatch #4 {Exception -> 0x013a, all -> 0x0136, blocks: (B:37:0x00ee, B:39:0x00f4, B:41:0x00fa, B:43:0x0121, B:50:0x0145, B:52:0x0152, B:54:0x0159, B:49:0x013e, B:58:0x0173), top: B:74:0x00ee }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0173 A[Catch: all -> 0x0136, Exception -> 0x013a, TRY_LEAVE, TryCatch #4 {Exception -> 0x013a, all -> 0x0136, blocks: (B:37:0x00ee, B:39:0x00f4, B:41:0x00fa, B:43:0x0121, B:50:0x0145, B:52:0x0152, B:54:0x0159, B:49:0x013e, B:58:0x0173), top: B:74:0x00ee }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0194  */
    /* JADX WARN: Type inference failed for: r10v10 */
    /* JADX WARN: Type inference failed for: r10v3, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r10v8 */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:55:0x016a -> B:56:0x016c). Please submit an issue!!! */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:57:0x016e -> B:56:0x016c). Please submit an issue!!! */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void loadReplyMessages(LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, int i) throws SQLiteException {
        boolean z;
        int i2;
        int i3;
        boolean z2;
        int i4;
        SQLiteCursor queryFinalized;
        int i5;
        Throwable th;
        ?? r10;
        long j;
        int i6;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray3 = longSparseArray;
        int i7 = 2;
        int i8 = 1;
        if (longSparseArray.isEmpty()) {
            return;
        }
        boolean z3 = i == 1;
        boolean z4 = i == 5;
        long clientUserId = getUserConfig().getClientUserId();
        int size = longSparseArray.size();
        int i9 = 0;
        while (i9 < size) {
            long keyAt = longSparseArray3.keyAt(i9);
            SparseArray<ArrayList<TLRPC$Message>> valueAt = longSparseArray3.valueAt(i9);
            ArrayList<Integer> arrayList3 = longSparseArray2.get(keyAt);
            if (arrayList3 == null) {
                z = z3;
                i2 = size;
                i3 = i9;
            } else {
                int i10 = 0;
                SQLiteCursor sQLiteCursor = null;
                while (i10 < i7) {
                    if (i10 != i8 || z3) {
                        boolean z5 = i10 == i8;
                        try {
                            if (z4) {
                                try {
                                    try {
                                        z2 = z3;
                                        i4 = size;
                                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, topic_id FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                        i5 = i9;
                                    } catch (Exception e) {
                                        e = e;
                                        throw e;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            } else {
                                z2 = z3;
                                i4 = size;
                                if (z5) {
                                    i5 = i9;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                } else {
                                    i5 = i9;
                                    r10 = 0;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", TextUtils.join(",", arrayList3), Long.valueOf(keyAt)), new Object[0]);
                                    if (queryFinalized.next()) {
                                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r10);
                                        if (byteBufferValue != null) {
                                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r10), r10);
                                            long j2 = keyAt;
                                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLdeserialize.id = queryFinalized.intValue(1);
                                            TLdeserialize.date = queryFinalized.intValue(2);
                                            if (z4) {
                                                TLdeserialize.dialog_id = clientUserId;
                                                TLdeserialize.flags |= 1073741824;
                                                TLdeserialize.quick_reply_shortcut_id = queryFinalized.intValue(3);
                                            } else {
                                                TLdeserialize.dialog_id = queryFinalized.longValue(3);
                                            }
                                            addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                            ArrayList<TLRPC$Message> arrayList4 = valueAt.get(TLdeserialize.id);
                                            if (arrayList4 != null) {
                                                int size2 = arrayList4.size();
                                                for (int i11 = 0; i11 < size2; i11++) {
                                                    arrayList4.get(i11).replyMessage = TLdeserialize;
                                                    MessageObject.getDialogId(TLdeserialize);
                                                }
                                            }
                                            keyAt = j2;
                                        }
                                    } else {
                                        j = keyAt;
                                        queryFinalized.dispose();
                                        sQLiteCursor = queryFinalized;
                                        i6 = 1;
                                    }
                                }
                            }
                            if (queryFinalized.next()) {
                            }
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = queryFinalized;
                            throw e;
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                        r10 = 0;
                    } else {
                        z2 = z3;
                        i4 = size;
                        i5 = i9;
                        j = keyAt;
                        i6 = 1;
                    }
                    i10 += i6;
                    i9 = i5;
                    z3 = z2;
                    size = i4;
                    keyAt = j;
                    i7 = 2;
                    i8 = 1;
                }
                z = z3;
                i2 = size;
                i3 = i9;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            i9 = i3 + 1;
            longSparseArray3 = longSparseArray;
            z3 = z;
            size = i2;
            i7 = 2;
            i8 = 1;
        }
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda166
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUnreadMessages$74();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(13:60|61|(2:63|(12:65|(1:67)|68|69|70|(1:74)|75|76|(2:80|(7:86|87|(1:108)(5:91|92|93|94|(1:96))|97|(1:99)|100|101))|109|100|101))|113|(3:115|68|69)|70|(2:72|74)|75|76|(11:78|80|(1:82)|86|87|(1:89)|108|97|(0)|100|101)|109|100|101) */
    /* JADX WARN: Code restructure failed: missing block: B:79:0x01cc, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:80:0x01cd, code lost:
        r24 = r6;
        r15 = r7;
     */
    /* JADX WARN: Removed duplicated region for block: B:257:0x059a  */
    /* JADX WARN: Removed duplicated region for block: B:262:0x05a3  */
    /* JADX WARN: Removed duplicated region for block: B:310:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x020a A[Catch: all -> 0x018a, Exception -> 0x0201, TRY_LEAVE, TryCatch #5 {all -> 0x018a, blocks: (B:42:0x011b, B:44:0x0121, B:46:0x0128, B:48:0x0179, B:50:0x017f, B:61:0x0199, B:62:0x019b, B:64:0x01a3, B:66:0x01aa, B:67:0x01b0, B:69:0x01b4, B:71:0x01b8, B:73:0x01be, B:75:0x01c2, B:82:0x01d2, B:84:0x01d8, B:86:0x01de, B:88:0x01f0, B:90:0x01fc, B:94:0x0206, B:96:0x020a, B:98:0x020e, B:58:0x0194, B:100:0x021b, B:102:0x024c, B:104:0x0252, B:106:0x0258, B:110:0x0292, B:114:0x02a1, B:118:0x02b1, B:144:0x0336, B:148:0x0343, B:152:0x034b, B:156:0x0357, B:160:0x036e, B:164:0x0376, B:117:0x02ab, B:113:0x029b, B:109:0x028b, B:166:0x0384), top: B:266:0x011b }] */
    /* JADX WARN: Type inference failed for: r7v11 */
    /* JADX WARN: Type inference failed for: r7v8 */
    /* JADX WARN: Type inference failed for: r7v9, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUnreadMessages$74() {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        ArrayList<Long> arrayList;
        ArrayList<Long> arrayList2;
        ArrayList arrayList3;
        LongSparseArray longSparseArray;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        ArrayList<TLRPC$User> arrayList4;
        ArrayList arrayList5;
        ArrayList arrayList6;
        LongSparseArray longSparseArray2;
        CharSequence charSequence;
        ArrayList<TLRPC$Chat> arrayList7;
        LongSparseArray longSparseArray3;
        ArrayList arrayList8;
        ArrayList arrayList9;
        ArrayList<TLRPC$EncryptedChat> arrayList10;
        ArrayList arrayList11;
        LongSparseArray longSparseArray4;
        long j;
        String stringValue;
        int i;
        ArrayList arrayList12;
        int i2;
        ArrayList arrayList13;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        TLRPC$MessageAction tLRPC$MessageAction;
        NativeByteBuffer byteBufferValue;
        MessagesStorage messagesStorage = this;
        int i3 = 2;
        boolean z = false;
        try {
            arrayList = new ArrayList<>();
            arrayList2 = new ArrayList<>();
            arrayList3 = new ArrayList();
            longSparseArray = new LongSparseArray();
            queryFinalized = messagesStorage.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
        } catch (Exception e) {
            e = e;
        } catch (Throwable th3) {
            th = th3;
        }
        try {
            StringBuilder sb = new StringBuilder();
            int currentTime = getConnectionsManager().getCurrentTime();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(i3);
                boolean z2 = (longValue & 1) != 0;
                int i4 = (int) (longValue >> 32);
                if (queryFinalized.isNull(i3) || !z2 || (i4 != 0 && i4 < currentTime)) {
                    long longValue2 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue2)) {
                        longSparseArray.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(longValue2);
                        if (DialogObject.isEncryptedDialog(longValue2)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                            if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList3.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(longValue2)) {
                            if (!arrayList.contains(Long.valueOf(longValue2))) {
                                arrayList.add(Long.valueOf(longValue2));
                            }
                        } else {
                            long j2 = -longValue2;
                            if (!arrayList2.contains(Long.valueOf(j2))) {
                                arrayList2.add(Long.valueOf(j2));
                            }
                        }
                        i3 = 2;
                    }
                }
            }
            queryFinalized.dispose();
            LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray5 = new LongSparseArray<>();
            LongSparseArray<ArrayList<Integer>> longSparseArray6 = new LongSparseArray<>();
            ArrayList arrayList14 = new ArrayList();
            ArrayList arrayList15 = new ArrayList();
            ArrayList<TLRPC$User> arrayList16 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList17 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList18 = new ArrayList<>();
            if (sb.length() > 0) {
                SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages_v2 WHERE uid IN (" + sb.toString() + ") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50", new Object[0]);
                int i5 = 0;
                while (queryFinalized2.next()) {
                    try {
                        try {
                            NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                            if (byteBufferValue2 != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z), z);
                                ArrayList arrayList19 = arrayList3;
                                LongSparseArray longSparseArray7 = longSparseArray;
                                TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                byteBufferValue2.reuse();
                                MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(0));
                                TLdeserialize.id = queryFinalized2.intValue(3);
                                TLdeserialize.date = queryFinalized2.intValue(4);
                                TLdeserialize.dialog_id = queryFinalized2.longValue(5);
                                arrayList14.add(TLdeserialize);
                                int max = Math.max(i5, TLdeserialize.date);
                                addUsersAndChatsFromMessage(TLdeserialize, arrayList, arrayList2, null);
                                TLdeserialize.send_state = queryFinalized2.intValue(2);
                                if (TLdeserialize.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                        }
                                        TLdeserialize.send_state = 0;
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id) && !queryFinalized2.isNull(5)) {
                                            TLdeserialize.random_id = queryFinalized2.longValue(5);
                                        }
                                        tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                        if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                            tLRPC$MessageAction = TLdeserialize.action;
                                            if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                                if (!queryFinalized2.isNull(6) || (byteBufferValue = queryFinalized2.byteBufferValue(6)) == null) {
                                                    i2 = max;
                                                    arrayList13 = arrayList14;
                                                } else {
                                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                    TLdeserialize.replyMessage = TLdeserialize2;
                                                    i2 = max;
                                                    arrayList13 = arrayList14;
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                        byteBufferValue.reuse();
                                                        TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                        if (tLRPC$Message != null) {
                                                            addUsersAndChatsFromMessage(tLRPC$Message, arrayList, arrayList2, null);
                                                        }
                                                    } catch (Exception e2) {
                                                        e = e2;
                                                        messagesStorage.checkSQLException(e);
                                                        arrayList14 = arrayList13;
                                                        i5 = i2;
                                                        arrayList3 = arrayList19;
                                                        longSparseArray = longSparseArray7;
                                                        z = false;
                                                    }
                                                }
                                                if (TLdeserialize.replyMessage == null) {
                                                    addReplyMessages(TLdeserialize, longSparseArray5, longSparseArray6);
                                                }
                                                arrayList14 = arrayList13;
                                                i5 = i2;
                                                arrayList3 = arrayList19;
                                                longSparseArray = longSparseArray7;
                                                z = false;
                                            }
                                        }
                                        i2 = max;
                                        arrayList13 = arrayList14;
                                        arrayList14 = arrayList13;
                                        i5 = i2;
                                        arrayList3 = arrayList19;
                                        longSparseArray = longSparseArray7;
                                        z = false;
                                    }
                                }
                                if (TLdeserialize.id > 0) {
                                    TLdeserialize.send_state = 0;
                                }
                                if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                    TLdeserialize.random_id = queryFinalized2.longValue(5);
                                }
                                tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                if (tLRPC$MessageReplyHeader != null) {
                                    tLRPC$MessageAction = TLdeserialize.action;
                                    if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                    }
                                    if (queryFinalized2.isNull(6)) {
                                    }
                                    i2 = max;
                                    arrayList13 = arrayList14;
                                    if (TLdeserialize.replyMessage == null) {
                                    }
                                    arrayList14 = arrayList13;
                                    i5 = i2;
                                    arrayList3 = arrayList19;
                                    longSparseArray = longSparseArray7;
                                    z = false;
                                }
                                i2 = max;
                                arrayList13 = arrayList14;
                                arrayList14 = arrayList13;
                                i5 = i2;
                                arrayList3 = arrayList19;
                                longSparseArray = longSparseArray7;
                                z = false;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                    }
                }
                ArrayList arrayList20 = arrayList3;
                LongSparseArray longSparseArray8 = longSparseArray;
                ArrayList arrayList21 = arrayList14;
                queryFinalized2.dispose();
                messagesStorage.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i5).stepThis().dispose();
                ?? r7 = 0;
                SQLiteCursor queryFinalized3 = messagesStorage.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags, topicId, is_reaction FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                while (queryFinalized3.next()) {
                    NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(r7);
                    if (byteBufferValue3 != null) {
                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r7), r7);
                        byteBufferValue3.reuse();
                        TLdeserialize3.id = queryFinalized3.intValue(1);
                        TLdeserialize3.date = queryFinalized3.intValue(2);
                        ArrayList arrayList22 = arrayList21;
                        TLdeserialize3.dialog_id = queryFinalized3.longValue(3);
                        TLdeserialize3.random_id = queryFinalized3.longValue(4);
                        if (queryFinalized3.isNull(5)) {
                            i = 6;
                            stringValue = null;
                        } else {
                            stringValue = queryFinalized3.stringValue(5);
                            i = 6;
                        }
                        String stringValue2 = queryFinalized3.isNull(i) ? null : queryFinalized3.stringValue(i);
                        String stringValue3 = queryFinalized3.isNull(7) ? null : queryFinalized3.stringValue(7);
                        int intValue = queryFinalized3.intValue(8);
                        int intValue2 = queryFinalized3.intValue(9);
                        if (MessageObject.getFromChatId(TLdeserialize3) == 0) {
                            arrayList12 = arrayList22;
                            try {
                                if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                    TLdeserialize3.from_id = tLRPC$TL_peerUser;
                                    tLRPC$TL_peerUser.user_id = TLdeserialize3.dialog_id;
                                }
                            } catch (Exception e4) {
                                e = e4;
                                messagesStorage = this;
                                exc = e;
                                sQLiteCursor = queryFinalized3;
                                try {
                                    messagesStorage.checkSQLException(exc);
                                    if (sQLiteCursor == null) {
                                        sQLiteCursor.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th5) {
                                    th2 = th5;
                                    th = th2;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th6) {
                                th = th6;
                                th = th;
                                sQLiteCursor = queryFinalized3;
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } else {
                            arrayList12 = arrayList22;
                        }
                        if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                            if (!arrayList.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                arrayList.add(Long.valueOf(TLdeserialize3.dialog_id));
                            }
                        } else if (DialogObject.isChatDialog(TLdeserialize3.dialog_id) && !arrayList2.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                            arrayList2.add(Long.valueOf(-TLdeserialize3.dialog_id));
                        }
                        if (intValue2 != 0) {
                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = new TLRPC$TL_messageReplyHeader();
                            TLdeserialize3.reply_to = tLRPC$TL_messageReplyHeader;
                            tLRPC$TL_messageReplyHeader.forum_topic = true;
                            tLRPC$TL_messageReplyHeader.reply_to_top_id = intValue2;
                        }
                        messagesStorage = this;
                        MessageObject messageObject = new MessageObject(messagesStorage.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) != 0, (intValue & 2) != 0, (TLdeserialize3.flags & Integer.MIN_VALUE) != 0, false);
                        int intValue3 = queryFinalized3.intValue(10);
                        messageObject.isReactionPush = intValue3 == 1;
                        messageObject.isStoryReactionPush = intValue3 == 2;
                        arrayList15.add(messageObject);
                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList, arrayList2, null);
                        arrayList21 = arrayList12;
                    }
                    r7 = 0;
                }
                ArrayList arrayList23 = arrayList21;
                queryFinalized3.dispose();
                arrayList4 = arrayList16;
                arrayList5 = arrayList15;
                charSequence = ",";
                arrayList7 = arrayList17;
                ArrayList<TLRPC$EncryptedChat> arrayList24 = arrayList18;
                loadReplyMessages(longSparseArray5, longSparseArray6, arrayList, arrayList2, 0);
                if (!arrayList20.isEmpty()) {
                    messagesStorage.getEncryptedChatsInternal(TextUtils.join(charSequence, arrayList20), arrayList24, arrayList);
                }
                if (!arrayList.isEmpty()) {
                    messagesStorage.getUsersInternal(arrayList, arrayList4);
                }
                if (!arrayList2.isEmpty()) {
                    messagesStorage.getChatsInternal(TextUtils.join(charSequence, arrayList2), arrayList7);
                    int i6 = 0;
                    while (i6 < arrayList7.size()) {
                        TLRPC$Chat tLRPC$Chat = arrayList7.get(i6);
                        try {
                            if (tLRPC$Chat == null || (!ChatObject.isNotInChat(tLRPC$Chat) && !tLRPC$Chat.min && tLRPC$Chat.migrated_to == null)) {
                                arrayList10 = arrayList24;
                                arrayList11 = arrayList23;
                                longSparseArray4 = longSparseArray8;
                                i6++;
                                longSparseArray8 = longSparseArray4;
                                arrayList23 = arrayList11;
                                arrayList24 = arrayList10;
                            }
                            messagesStorage.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", Long.valueOf(j))).stepThis().dispose();
                            arrayList7.remove(i6);
                            i6--;
                            longSparseArray4 = longSparseArray8;
                            longSparseArray4.remove(j);
                            int i7 = 0;
                            while (i7 < arrayList23.size()) {
                                ArrayList arrayList25 = arrayList23;
                                if (((TLRPC$Message) arrayList25.get(i7)).dialog_id == j) {
                                    arrayList25.remove(i7);
                                    i7--;
                                }
                                i7++;
                                arrayList23 = arrayList25;
                            }
                            arrayList11 = arrayList23;
                            i6++;
                            longSparseArray8 = longSparseArray4;
                            arrayList23 = arrayList11;
                            arrayList24 = arrayList10;
                        } catch (Exception e5) {
                            e = e5;
                            exc = e;
                            sQLiteCursor = null;
                            messagesStorage.checkSQLException(exc);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th7) {
                            th = th7;
                            th = th;
                            sQLiteCursor = null;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                        j = -tLRPC$Chat.id;
                        messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j).stepThis().dispose();
                        arrayList10 = arrayList24;
                    }
                }
                arrayList18 = arrayList24;
                arrayList6 = arrayList23;
                longSparseArray2 = longSparseArray8;
            } else {
                arrayList4 = arrayList16;
                arrayList5 = arrayList15;
                arrayList6 = arrayList14;
                longSparseArray2 = longSparseArray;
                charSequence = ",";
                arrayList7 = arrayList17;
            }
            Collections.reverse(arrayList6);
            arrayList.clear();
            arrayList2.clear();
            SQLiteCursor queryFinalized4 = messagesStorage.database.queryFinalized("SELECT uid, sid, date, expire_date, localName, flags FROM story_pushes", new Object[0]);
            final HashMap hashMap = new HashMap();
            while (queryFinalized4.next()) {
                long longValue3 = queryFinalized4.longValue(0);
                if (longValue3 >= 0) {
                    if (!arrayList.contains(Long.valueOf(longValue3))) {
                        arrayList.add(Long.valueOf(longValue3));
                    }
                } else if (!arrayList2.contains(Long.valueOf(longValue3))) {
                    arrayList2.add(Long.valueOf(longValue3));
                }
                int intValue4 = queryFinalized4.intValue(1);
                long longValue4 = queryFinalized4.longValue(2);
                long longValue5 = queryFinalized4.longValue(3);
                String stringValue4 = queryFinalized4.stringValue(4);
                int intValue5 = queryFinalized4.intValue(5);
                NotificationsController.StoryNotification storyNotification = (NotificationsController.StoryNotification) hashMap.get(Long.valueOf(longValue3));
                if (storyNotification != null) {
                    arrayList9 = arrayList5;
                    arrayList8 = arrayList6;
                    longSparseArray3 = longSparseArray2;
                    storyNotification.dateByIds.put(Integer.valueOf(intValue4), new Pair<>(Long.valueOf(longValue4), Long.valueOf(longValue5)));
                    storyNotification.date = storyNotification.getLeastDate();
                    storyNotification.hidden |= (intValue5 & 1) != 0;
                    if (!TextUtils.isEmpty(stringValue4)) {
                        storyNotification.localName = stringValue4;
                    }
                } else {
                    longSparseArray3 = longSparseArray2;
                    arrayList8 = arrayList6;
                    arrayList9 = arrayList5;
                    NotificationsController.StoryNotification storyNotification2 = new NotificationsController.StoryNotification(longValue3, stringValue4, intValue4, longValue4, longValue5);
                    storyNotification2.hidden = (intValue5 & 1) != 0;
                    hashMap.put(Long.valueOf(longValue3), storyNotification2);
                }
                arrayList5 = arrayList9;
                arrayList6 = arrayList8;
                longSparseArray2 = longSparseArray3;
            }
            final LongSparseArray longSparseArray9 = longSparseArray2;
            final ArrayList arrayList26 = arrayList6;
            final ArrayList arrayList27 = arrayList5;
            queryFinalized4.dispose();
            if (!arrayList.isEmpty()) {
                messagesStorage.getUsersInternal(arrayList, arrayList4);
            }
            if (!arrayList2.isEmpty()) {
                messagesStorage.getChatsInternal(TextUtils.join(charSequence, arrayList2), arrayList7);
            }
            final ArrayList<TLRPC$User> arrayList28 = arrayList4;
            final ArrayList<TLRPC$Chat> arrayList29 = arrayList7;
            final ArrayList<TLRPC$EncryptedChat> arrayList30 = arrayList18;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda223
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$loadUnreadMessages$73(longSparseArray9, arrayList26, arrayList27, arrayList28, arrayList29, arrayList30, hashMap);
                }
            });
        } catch (Exception e6) {
            sQLiteCursor = sQLiteCursor3;
            exc = e6;
        } catch (Throwable th8) {
            th2 = th8;
            sQLiteCursor = sQLiteCursor2;
            th = th2;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$73(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5, HashMap hashMap) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5, hashMap.values());
    }

    public void putWallpapers(final ArrayList<TLRPC$WallPaper> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda153
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWallpapers$75(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x009c  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWallpapers$75(int i, ArrayList arrayList) {
        Exception e;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (i == 1) {
                try {
                    this.database.executeFast("DELETE FROM wallpapers2 WHERE num >= -1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                }
            }
            this.database.beginTransaction();
            if (i != 0) {
                executeFast = this.database.executeFast("REPLACE INTO wallpapers2 VALUES(?, ?, ?)");
            } else {
                executeFast = this.database.executeFast("UPDATE wallpapers2 SET data = ? WHERE uid = ?");
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) arrayList.get(i2);
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$WallPaper.getObjectSize());
                tLRPC$WallPaper.serializeToStream(nativeByteBuffer);
                if (i != 0) {
                    executeFast.bindLong(1, tLRPC$WallPaper.id);
                    executeFast.bindByteBuffer(2, nativeByteBuffer);
                    if (i < 0) {
                        executeFast.bindInteger(3, i);
                    } else {
                        executeFast.bindInteger(3, i == 2 ? -1 : i2);
                    }
                } else {
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, tLRPC$WallPaper.id);
                }
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement == null) {
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void deleteWallpaper(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda206
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteWallpaper$76(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteWallpaper$76(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM wallpapers2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda146
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWallpapers$78();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWallpapers$78() {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
                final ArrayList arrayList = new ArrayList();
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$WallPaper TLdeserialize = TLRPC$WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda141
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.lambda$getWallpapers$77(arrayList);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getWallpapers$77(ArrayList arrayList) {
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.wallpapersDidLoad, arrayList);
    }

    public void addRecentLocalFile(final String str, final String str2, final TLRPC$Document tLRPC$Document) {
        if (str == null || str.length() == 0) {
            return;
        }
        if ((str2 == null || str2.length() == 0) && tLRPC$Document == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$addRecentLocalFile$79(tLRPC$Document, str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$addRecentLocalFile$79(TLRPC$Document tLRPC$Document, String str, String str2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (tLRPC$Document != null) {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Document.getObjectSize());
                    tLRPC$Document.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                } else {
                    sQLitePreparedStatement = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindString(1, str2);
                    sQLitePreparedStatement.bindString(2, str);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void deleteUserChatHistory(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda219
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteUserChatHistory$82(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:24:0x0077, code lost:
        if (r2.id != 1) goto L19;
     */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00c7  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00e4 A[Catch: all -> 0x00ed, Exception -> 0x00f0, TRY_LEAVE, TryCatch #7 {Exception -> 0x00f0, all -> 0x00ed, blocks: (B:3:0x0004, B:37:0x00a4, B:42:0x00cd, B:44:0x00e4), top: B:70:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0101  */
    /* JADX WARN: Removed duplicated region for block: B:75:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v0 */
    /* JADX WARN: Type inference failed for: r13v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r13v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteUserChatHistory$82(final long j, long j2) {
        SQLiteCursor sQLiteCursor;
        ArrayList<Pair<Long, Integer>> arrayList;
        boolean z;
        try {
            final ArrayList<Integer> arrayList2 = new ArrayList<>();
            SQLiteDatabase sQLiteDatabase = this.database;
            ?? r13 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    final ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r13);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r13), r13);
                                if (TLdeserialize != null) {
                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    if (UserObject.isReplyUser(j)) {
                                        if (MessageObject.getPeerId(TLdeserialize.fwd_from.from_id) != j2) {
                                        }
                                        arrayList2.add(Integer.valueOf(TLdeserialize.id));
                                        z = true;
                                        arrayList = arrayList5;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList3, arrayList5, arrayList4, false);
                                            byteBufferValue.reuse();
                                            arrayList5 = arrayList;
                                        } catch (Exception e) {
                                            e = e;
                                            checkSQLException(e);
                                            queryFinalized.dispose();
                                            deleteFromDownloadQueue(arrayList, z);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                                                }
                                            });
                                            lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                                            lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                                            getFileLoader().deleteFiles(arrayList3, 0);
                                            if (arrayList2.isEmpty()) {
                                            }
                                        }
                                    }
                                    if (MessageObject.getFromChatId(TLdeserialize) == j2) {
                                    }
                                }
                                arrayList = arrayList5;
                                z = true;
                                byteBufferValue.reuse();
                                arrayList5 = arrayList;
                            }
                            r13 = 0;
                        } catch (Exception e2) {
                            e = e2;
                            arrayList = arrayList5;
                            z = true;
                        }
                    }
                    arrayList = arrayList5;
                    z = true;
                    queryFinalized.dispose();
                    deleteFromDownloadQueue(arrayList, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda137
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteUserChatHistory$80(arrayList4, j, arrayList2);
                        }
                    });
                    lambda$markMessagesAsDeleted$209(j, arrayList2, false, 0, 0);
                    lambda$updateDialogsWithDeletedMessages$208(j, !DialogObject.isChatDialog(j) ? -j : 0L, arrayList2, null);
                    getFileLoader().deleteFiles(arrayList3, 0);
                    if (arrayList2.isEmpty()) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$deleteUserChatHistory$81(arrayList2, j);
                            }
                        });
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th2) {
                    th = th2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$80(ArrayList arrayList, long j, ArrayList arrayList2) {
        getFileLoader().cancelLoadFiles(arrayList);
        getMessagesController().markDialogMessageAsDeleted(j, arrayList2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$81(ArrayList arrayList, long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(DialogObject.isChatDialog(j) ? -j : 0L), Boolean.FALSE);
    }

    private boolean addFilesToDelete(TLRPC$Message tLRPC$Message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, ArrayList<String> arrayList3, boolean z) {
        long j;
        int i;
        int i2 = 0;
        if (tLRPC$Message == null) {
            return false;
        }
        TLRPC$Document document = MessageObject.getDocument(tLRPC$Message);
        TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message);
        if (MessageObject.isVoiceMessage(tLRPC$Message)) {
            if (document == null || getMediaDataController().ringtoneDataStore.contains(document.id)) {
                return false;
            }
            j = document.id;
            i = 2;
        } else {
            if (MessageObject.isStickerMessage(tLRPC$Message) || MessageObject.isAnimatedStickerMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
            } else if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isGifMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
                i = 4;
            } else if (document != null) {
                if (getMediaDataController().ringtoneDataStore.contains(document.id)) {
                    return false;
                }
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        }
        if (j != 0) {
            arrayList2.add(new Pair<>(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                TLRPC$PhotoSize tLRPC$PhotoSize = photo.sizes.get(i2);
                String attachFileName = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                if (!TextUtils.isEmpty(attachFileName)) {
                    arrayList3.add(attachFileName);
                }
                File pathToAttach = getFileLoader().getPathToAttach(tLRPC$PhotoSize, z);
                if (pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        } else if (document != null) {
            String attachFileName2 = FileLoader.getAttachFileName(document);
            if (!TextUtils.isEmpty(attachFileName2)) {
                arrayList3.add(attachFileName2);
            }
            File pathToAttach2 = getFileLoader().getPathToAttach(document, z);
            if (pathToAttach2.toString().length() > 0) {
                arrayList.add(pathToAttach2);
            }
            int size2 = document.thumbs.size();
            while (i2 < size2) {
                File pathToAttach3 = getFileLoader().getPathToAttach(document.thumbs.get(i2));
                if (pathToAttach3.toString().length() > 0) {
                    arrayList.add(pathToAttach3);
                }
                i2++;
            }
            return true;
        } else {
            return false;
        }
    }

    public void deleteDialog(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$85(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:111:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x0345  */
    /* JADX WARN: Removed duplicated region for block: B:164:0x0482 A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:61:0x0130, B:168:0x04ca, B:170:0x0510, B:171:0x052c, B:162:0x03e6, B:164:0x0482, B:166:0x0488, B:167:0x04a8), top: B:241:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:167:0x04a8 A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:61:0x0130, B:168:0x04ca, B:170:0x0510, B:171:0x052c, B:162:0x03e6, B:164:0x0482, B:166:0x0488, B:167:0x04a8), top: B:241:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:170:0x0510 A[Catch: all -> 0x03cd, Exception -> 0x03d2, TryCatch #25 {Exception -> 0x03d2, all -> 0x03cd, blocks: (B:61:0x0130, B:168:0x04ca, B:170:0x0510, B:171:0x052c, B:162:0x03e6, B:164:0x0482, B:166:0x0488, B:167:0x04a8), top: B:241:0x0119 }] */
    /* JADX WARN: Removed duplicated region for block: B:181:0x0602  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x0607  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x060c  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0611  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0623  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0628  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x062d  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x0632  */
    /* JADX WARN: Removed duplicated region for block: B:227:0x0229 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:248:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r11v0 */
    /* JADX WARN: Type inference failed for: r11v1, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r11v6 */
    /* JADX WARN: Type inference failed for: r12v41 */
    /* JADX WARN: Type inference failed for: r12v42, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r12v44 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$deleteDialog$85(int i, long j) {
        SQLiteCursor queryFinalized;
        Throwable th;
        Throwable th2;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        final ArrayList<String> arrayList;
        ArrayList<File> arrayList2;
        String str;
        String str2;
        boolean z;
        SQLiteCursor sQLiteCursor5;
        String str3;
        String str4;
        long j2;
        String str5;
        String str6;
        String str7;
        String str8;
        SQLiteCursor sQLiteCursor6;
        SQLiteCursor sQLiteCursor7;
        SQLiteCursor sQLiteCursor8;
        int i2;
        String str9;
        String str10;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement executeFast2;
        int i3;
        long j3;
        String str11 = " AND mid != ";
        ?? r11 = 0;
        if (i == 3) {
            try {
                queryFinalized = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                    queryFinalized.dispose();
                    if (intValue != 0) {
                        return;
                    }
                } catch (Exception e) {
                    th2 = e;
                    sQLitePreparedStatement3 = null;
                    sQLiteCursor2 = null;
                    sQLitePreparedStatement2 = null;
                    try {
                        checkSQLException(th2);
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement3 == null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        SQLiteCursor sQLiteCursor9 = sQLiteCursor2;
                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                        sQLiteCursor3 = sQLiteCursor9;
                        SQLitePreparedStatement sQLitePreparedStatement5 = sQLitePreparedStatement4;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement = sQLitePreparedStatement5;
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLitePreparedStatement = null;
                    sQLiteCursor = null;
                    sQLitePreparedStatement2 = null;
                    if (queryFinalized != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                th2 = e2;
                queryFinalized = null;
            } catch (Throwable th5) {
                th = th5;
                queryFinalized = null;
            }
        }
        String str12 = "SELECT data FROM messages_v2 WHERE uid = ";
        if (DialogObject.isEncryptedDialog(j) || i == 2) {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j, new Object[0]);
            try {
                try {
                    ArrayList<File> arrayList3 = new ArrayList<>();
                    ArrayList<String> arrayList4 = new ArrayList<>();
                    ArrayList<Pair<Long, Integer>> arrayList5 = new ArrayList<>();
                    while (queryFinalized2.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(r11);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r11), r11);
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                arrayList = arrayList4;
                                arrayList2 = arrayList3;
                                sQLiteCursor4 = queryFinalized2;
                                str2 = str11;
                                str = str12;
                                z = true;
                                try {
                                    try {
                                        addFilesToDelete(TLdeserialize, arrayList2, arrayList5, arrayList, false);
                                        arrayList4 = arrayList;
                                        arrayList3 = arrayList2;
                                        str11 = str2;
                                        queryFinalized2 = sQLiteCursor4;
                                        str12 = str;
                                    } catch (Throwable th6) {
                                        th = th6;
                                        th = th;
                                        queryFinalized = sQLiteCursor4;
                                        sQLitePreparedStatement = null;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement2 = null;
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e3) {
                                    e = e3;
                                    try {
                                        checkSQLException(e);
                                        sQLiteCursor4.dispose();
                                        deleteFromDownloadQueue(arrayList5, z);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                                            }
                                        });
                                        getFileLoader().deleteFiles(arrayList2, i);
                                        String str13 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        String str14 = "DELETE FROM messages_holes WHERE uid = ";
                                        if (i != 0) {
                                        }
                                        str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                                        str4 = "DELETE FROM media_v4 WHERE uid = ";
                                        j2 = j;
                                        str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                                        str6 = "DELETE FROM messages_holes WHERE uid = ";
                                        str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                                        str8 = "DELETE FROM bot_keyboard WHERE uid = ";
                                        this.database.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
                                        if (DialogObject.isEncryptedDialog(j)) {
                                        }
                                        this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
                                        this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                                        if (j2 == getUserConfig().getClientUserId()) {
                                        }
                                        this.database.executeFast(str8 + j2).stepThis().dispose();
                                        this.database.executeFast(str7 + j2).stepThis().dispose();
                                        this.database.executeFast(str5 + j2).stepThis().dispose();
                                        this.database.executeFast(str4 + j2).stepThis().dispose();
                                        this.database.executeFast(str6 + j2).stepThis().dispose();
                                        this.database.executeFast(str3 + j2).stepThis().dispose();
                                        getMediaDataController().clearBotKeyboard(j2);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$deleteDialog$84();
                                            }
                                        });
                                        resetAllUnreadCounters(false);
                                        updateWidgets(j2);
                                    } catch (Exception e4) {
                                        e = e4;
                                        th2 = e;
                                        queryFinalized = sQLiteCursor4;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor2 = null;
                                        sQLitePreparedStatement2 = null;
                                        checkSQLException(th2);
                                        if (queryFinalized != null) {
                                            queryFinalized.dispose();
                                        }
                                        if (sQLiteCursor2 != null) {
                                            sQLiteCursor2.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                            sQLitePreparedStatement3.dispose();
                                            return;
                                        }
                                        return;
                                    }
                                }
                            }
                            r11 = 0;
                        } catch (Exception e5) {
                            e = e5;
                            arrayList = arrayList4;
                            arrayList2 = arrayList3;
                            sQLiteCursor4 = queryFinalized2;
                            str = str12;
                            str2 = str11;
                            z = true;
                        }
                    }
                    arrayList = arrayList4;
                    arrayList2 = arrayList3;
                    sQLiteCursor4 = queryFinalized2;
                    str = str12;
                    str2 = str11;
                    z = true;
                    sQLiteCursor4.dispose();
                    deleteFromDownloadQueue(arrayList5, z);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda211
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$deleteDialog$83(arrayList);
                        }
                    });
                    getFileLoader().deleteFiles(arrayList2, i);
                } catch (Throwable th7) {
                    th = th7;
                    sQLiteCursor4 = queryFinalized2;
                }
            } catch (Exception e6) {
                e = e6;
                sQLiteCursor4 = queryFinalized2;
            }
        } else {
            str = "SELECT data FROM messages_v2 WHERE uid = ";
            str2 = " AND mid != ";
        }
        String str132 = "DELETE FROM bot_keyboard WHERE uid = ";
        String str142 = "DELETE FROM messages_holes WHERE uid = ";
        try {
            if (i != 0 || i == 3) {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                j2 = j;
                str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                str6 = "DELETE FROM messages_holes WHERE uid = ";
                str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                str8 = "DELETE FROM bot_keyboard WHERE uid = ";
                this.database.executeFast("DELETE FROM dialogs WHERE did = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.executeFast("DELETE FROM search_recent WHERE did = " + j2).stepThis().dispose();
                if (DialogObject.isEncryptedDialog(j)) {
                    if (DialogObject.isChatDialog(j)) {
                        this.database.executeFast("DELETE FROM chat_settings_v2 WHERE uid = " + (-j2)).stepThis().dispose();
                    }
                } else {
                    this.database.executeFast("DELETE FROM enc_chats WHERE uid = " + DialogObject.getEncryptedChatId(j)).stepThis().dispose();
                }
            } else if (i == 2) {
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid_i, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    if (queryFinalized3.next()) {
                        long longValue = queryFinalized3.longValue(0);
                        long longValue2 = queryFinalized3.longValue(1);
                        try {
                            ?? r12 = 0;
                            sQLiteCursor5 = this.database.queryFinalized(str + j + " AND mid IN (" + longValue + "," + longValue2 + ")", new Object[0]);
                            int i4 = -1;
                            while (sQLiteCursor5.next()) {
                                try {
                                    try {
                                        NativeByteBuffer byteBufferValue2 = sQLiteCursor5.byteBufferValue(r12);
                                        if (byteBufferValue2 != null) {
                                            i2 = i4;
                                            try {
                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r12), r12);
                                                if (TLdeserialize2 != null) {
                                                    str9 = str132;
                                                    str10 = str142;
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                    } catch (Exception e7) {
                                                        e = e7;
                                                        try {
                                                            checkSQLException(e);
                                                            sQLiteCursor5.dispose();
                                                            SQLiteDatabase sQLiteDatabase = this.database;
                                                            StringBuilder sb = new StringBuilder();
                                                            sb.append("DELETE FROM messages_v2 WHERE uid = ");
                                                            sb.append(j);
                                                            String str15 = str2;
                                                            sb.append(str15);
                                                            sb.append(longValue);
                                                            sb.append(str15);
                                                            sb.append(longValue2);
                                                            sQLiteDatabase.executeFast(sb.toString()).stepThis().dispose();
                                                            if (j == getUserConfig().getClientUserId()) {
                                                            }
                                                            this.database.executeFast(str10 + j).stepThis().dispose();
                                                            this.database.executeFast(str9 + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                            getMediaDataController().clearBotKeyboard(j);
                                                            executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                            executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                            i3 = i2;
                                                            if (i3 != -1) {
                                                            }
                                                            executeFast.dispose();
                                                        } catch (Exception e8) {
                                                            th2 = e8;
                                                            queryFinalized = queryFinalized3;
                                                            sQLiteCursor2 = sQLiteCursor5;
                                                            sQLitePreparedStatement3 = null;
                                                            sQLitePreparedStatement2 = null;
                                                            checkSQLException(th2);
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                            }
                                                        } catch (Throwable th8) {
                                                            th = th8;
                                                            queryFinalized = queryFinalized3;
                                                            sQLiteCursor = sQLiteCursor5;
                                                            sQLitePreparedStatement = null;
                                                            sQLitePreparedStatement2 = null;
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            throw th;
                                                        }
                                                        try {
                                                            executeFast2.dispose();
                                                            try {
                                                                try {
                                                                    updateWidgets(j3);
                                                                    sQLiteCursor8.dispose();
                                                                    return;
                                                                } catch (Exception e9) {
                                                                    th2 = e9;
                                                                    queryFinalized = sQLiteCursor8;
                                                                    sQLitePreparedStatement3 = null;
                                                                    sQLiteCursor2 = null;
                                                                    sQLitePreparedStatement2 = null;
                                                                    checkSQLException(th2);
                                                                    if (queryFinalized != null) {
                                                                    }
                                                                    if (sQLiteCursor2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 == null) {
                                                                    }
                                                                }
                                                            } catch (Throwable th9) {
                                                                th = th9;
                                                                queryFinalized = sQLiteCursor8;
                                                                sQLitePreparedStatement = null;
                                                                sQLiteCursor = null;
                                                                sQLitePreparedStatement2 = null;
                                                                if (queryFinalized != null) {
                                                                }
                                                                if (sQLiteCursor != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } catch (Exception e10) {
                                                            sQLitePreparedStatement3 = executeFast2;
                                                            queryFinalized = sQLiteCursor8;
                                                            sQLiteCursor2 = null;
                                                            sQLitePreparedStatement2 = null;
                                                            th2 = e10;
                                                            checkSQLException(th2);
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 == null) {
                                                            }
                                                        } catch (Throwable th10) {
                                                            sQLitePreparedStatement = executeFast2;
                                                            queryFinalized = sQLiteCursor8;
                                                            sQLiteCursor = null;
                                                            sQLitePreparedStatement2 = null;
                                                            th = th10;
                                                            if (queryFinalized != null) {
                                                            }
                                                            if (sQLiteCursor != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                } else {
                                                    str9 = str132;
                                                    str10 = str142;
                                                }
                                                byteBufferValue2.reuse();
                                                if (TLdeserialize2 != null) {
                                                    i4 = TLdeserialize2.id;
                                                    str132 = str9;
                                                    str142 = str10;
                                                    r12 = 0;
                                                }
                                            } catch (Exception e11) {
                                                e = e11;
                                                str9 = str132;
                                                str10 = str142;
                                                checkSQLException(e);
                                                sQLiteCursor5.dispose();
                                                SQLiteDatabase sQLiteDatabase2 = this.database;
                                                StringBuilder sb2 = new StringBuilder();
                                                sb2.append("DELETE FROM messages_v2 WHERE uid = ");
                                                sb2.append(j);
                                                String str152 = str2;
                                                sb2.append(str152);
                                                sb2.append(longValue);
                                                sb2.append(str152);
                                                sb2.append(longValue2);
                                                sQLiteDatabase2.executeFast(sb2.toString()).stepThis().dispose();
                                                if (j == getUserConfig().getClientUserId()) {
                                                }
                                                this.database.executeFast(str10 + j).stepThis().dispose();
                                                this.database.executeFast(str9 + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                                                this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                                                getMediaDataController().clearBotKeyboard(j);
                                                executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                                i3 = i2;
                                                if (i3 != -1) {
                                                }
                                                executeFast.dispose();
                                                executeFast2.dispose();
                                                updateWidgets(j3);
                                                sQLiteCursor8.dispose();
                                                return;
                                            }
                                        } else {
                                            i2 = i4;
                                            str9 = str132;
                                            str10 = str142;
                                        }
                                        i4 = i2;
                                        str132 = str9;
                                        str142 = str10;
                                        r12 = 0;
                                    } catch (Throwable th11) {
                                        queryFinalized = queryFinalized3;
                                        th = th11;
                                        sQLiteCursor = sQLiteCursor5;
                                        sQLitePreparedStatement = null;
                                        sQLitePreparedStatement2 = null;
                                        if (queryFinalized != null) {
                                            queryFinalized.dispose();
                                        }
                                        if (sQLiteCursor != null) {
                                            sQLiteCursor.dispose();
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                        }
                                        throw th;
                                    }
                                } catch (Exception e12) {
                                    e = e12;
                                    i2 = i4;
                                }
                            }
                            i2 = i4;
                            str9 = str132;
                            str10 = str142;
                            sQLiteCursor5.dispose();
                            SQLiteDatabase sQLiteDatabase22 = this.database;
                            StringBuilder sb22 = new StringBuilder();
                            sb22.append("DELETE FROM messages_v2 WHERE uid = ");
                            sb22.append(j);
                            String str1522 = str2;
                            sb22.append(str1522);
                            sb22.append(longValue);
                            sb22.append(str1522);
                            sb22.append(longValue2);
                            sQLiteDatabase22.executeFast(sb22.toString()).stepThis().dispose();
                            if (j == getUserConfig().getClientUserId()) {
                                try {
                                    this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j + str1522 + longValue + str1522 + longValue2).stepThis().dispose();
                                } catch (Exception e13) {
                                    queryFinalized = queryFinalized3;
                                    th2 = e13;
                                    sQLiteCursor5 = null;
                                    sQLiteCursor2 = sQLiteCursor5;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement2 = null;
                                    checkSQLException(th2);
                                    if (queryFinalized != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement3 == null) {
                                    }
                                } catch (Throwable th12) {
                                    queryFinalized = queryFinalized3;
                                    th = th12;
                                    sQLiteCursor5 = null;
                                    sQLiteCursor = sQLiteCursor5;
                                    sQLitePreparedStatement = null;
                                    sQLitePreparedStatement2 = null;
                                    if (queryFinalized != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            }
                            this.database.executeFast(str10 + j).stepThis().dispose();
                            this.database.executeFast(str9 + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_v4 WHERE uid = " + j).stepThis().dispose();
                            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j).stepThis().dispose();
                            getMediaDataController().clearBotKeyboard(j);
                            executeFast = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                            try {
                                executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                i3 = i2;
                                if (i3 != -1) {
                                    sQLiteCursor8 = queryFinalized3;
                                    j3 = j;
                                    try {
                                        createFirstHoles(j, executeFast, executeFast2, i3, 0L);
                                    } catch (Exception e14) {
                                        sQLitePreparedStatement2 = executeFast;
                                        queryFinalized = sQLiteCursor8;
                                        sQLiteCursor2 = null;
                                        sQLitePreparedStatement3 = executeFast2;
                                        th2 = e14;
                                        checkSQLException(th2);
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement3 == null) {
                                        }
                                    } catch (Throwable th13) {
                                        sQLitePreparedStatement2 = executeFast;
                                        queryFinalized = sQLiteCursor8;
                                        sQLiteCursor = null;
                                        sQLitePreparedStatement = executeFast2;
                                        th = th13;
                                        if (queryFinalized != null) {
                                        }
                                        if (sQLiteCursor != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    sQLiteCursor8 = queryFinalized3;
                                    j3 = j;
                                }
                                executeFast.dispose();
                                executeFast2.dispose();
                                updateWidgets(j3);
                            } catch (Exception e15) {
                                th2 = e15;
                                sQLitePreparedStatement2 = executeFast;
                                queryFinalized = queryFinalized3;
                                sQLitePreparedStatement3 = null;
                                sQLiteCursor2 = null;
                            } catch (Throwable th14) {
                                th = th14;
                                sQLitePreparedStatement2 = executeFast;
                                queryFinalized = queryFinalized3;
                                sQLitePreparedStatement = null;
                                sQLiteCursor = null;
                            }
                        } catch (Exception e16) {
                            e = e16;
                            sQLiteCursor7 = queryFinalized3;
                            th2 = e;
                            queryFinalized = sQLiteCursor7;
                            sQLiteCursor5 = null;
                            sQLiteCursor2 = sQLiteCursor5;
                            sQLitePreparedStatement3 = null;
                            sQLitePreparedStatement2 = null;
                            checkSQLException(th2);
                            if (queryFinalized != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement3 == null) {
                            }
                        } catch (Throwable th15) {
                            th = th15;
                            sQLiteCursor6 = queryFinalized3;
                            th = th;
                            queryFinalized = sQLiteCursor6;
                            sQLiteCursor5 = null;
                            sQLiteCursor = sQLiteCursor5;
                            sQLitePreparedStatement = null;
                            sQLitePreparedStatement2 = null;
                            if (queryFinalized != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } else {
                        sQLiteCursor8 = queryFinalized3;
                    }
                    try {
                        sQLiteCursor8.dispose();
                        return;
                    } catch (Throwable th16) {
                        th = th16;
                        queryFinalized = sQLiteCursor8;
                        sQLiteCursor3 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement2 = null;
                        SQLitePreparedStatement sQLitePreparedStatement52 = sQLitePreparedStatement4;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement = sQLitePreparedStatement52;
                        if (queryFinalized != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } catch (Exception e17) {
                    e = e17;
                    sQLiteCursor7 = queryFinalized3;
                } catch (Throwable th17) {
                    th = th17;
                    sQLiteCursor6 = queryFinalized3;
                }
            } else {
                str3 = "DELETE FROM media_holes_v2 WHERE uid = ";
                str4 = "DELETE FROM media_v4 WHERE uid = ";
                j2 = j;
                str5 = "DELETE FROM media_counts_v2 WHERE uid = ";
                str6 = "DELETE FROM messages_holes WHERE uid = ";
                str7 = "DELETE FROM bot_keyboard_topics WHERE uid = ";
                str8 = "DELETE FROM bot_keyboard WHERE uid = ";
            }
            this.database.executeFast("UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = " + j2).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
            if (j2 == getUserConfig().getClientUserId()) {
                this.database.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
            }
            this.database.executeFast(str8 + j2).stepThis().dispose();
            this.database.executeFast(str7 + j2).stepThis().dispose();
            this.database.executeFast(str5 + j2).stepThis().dispose();
            this.database.executeFast(str4 + j2).stepThis().dispose();
            this.database.executeFast(str6 + j2).stepThis().dispose();
            this.database.executeFast(str3 + j2).stepThis().dispose();
            getMediaDataController().clearBotKeyboard(j2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda212
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteDialog$84();
                }
            });
            resetAllUnreadCounters(false);
            updateWidgets(j2);
        } catch (Exception e18) {
            th2 = e18;
            queryFinalized = null;
        } catch (Throwable th18) {
            th = th18;
            queryFinalized = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$83(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$84() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    public void onDeleteQueryComplete(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda224
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onDeleteQueryComplete$86(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onDeleteQueryComplete$86(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearUserPhotos(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhotos$87(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhotos$87(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_photos WHERE uid = " + j).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_photos_count WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearUserPhoto(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda88
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearUserPhoto$88(j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhoto$88(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_photos WHERE uid = " + j + " AND id = " + j2).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("UPDATE dialog_photos_count SET count = count - 1 WHERE uid = " + j + " AND count > 0").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i, final int i2, final int i3, final int i4, final int i5, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<ArrayList<MessageObject>> longSparseArray2, final TLRPC$Message tLRPC$Message, final int i6) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetDialogs$90(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, tLRPC$Message, i, longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0360  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0365  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetDialogs$90(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, TLRPC$Message tLRPC$Message, int i6, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j;
        long j2;
        long j3;
        long j4;
        long j5;
        try {
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$messages_Dialogs.dialogs.size() - i;
            final LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i7 = i; i7 < tLRPC$messages_Dialogs.dialogs.size(); i7++) {
                arrayList3.add(Long.valueOf(tLRPC$messages_Dialogs.dialogs.get(i7).id));
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
            int i8 = 0;
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    int intValue = queryFinalized.intValue(1);
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        arrayList.add(Long.valueOf(longValue));
                        if (intValue > 0) {
                            i8 = Math.max(intValue, i8);
                            longSparseIntArray.put(longValue, intValue);
                            arrayList2.add(Long.valueOf(longValue));
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            Collections.sort(arrayList2, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda82
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$resetDialogs$89;
                    lambda$resetDialogs$89 = MessagesStorage.lambda$resetDialogs$89(LongSparseIntArray.this, (Long) obj, (Long) obj2);
                    return lambda$resetDialogs$89;
                }
            });
            while (arrayList2.size() < size) {
                arrayList2.add(0, 0L);
            }
            queryFinalized.dispose();
            String str = "(" + TextUtils.join(",", arrayList) + ")";
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM chat_pinned_count WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM chat_pinned_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM dialogs WHERE did IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM polls_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard_topics WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_v4 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.commitTransaction();
            for (int i9 = 0; i9 < size; i9++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i + i9);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialog) || tLRPC$Dialog.pinned) {
                    int indexOf = arrayList2.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    int indexOf2 = arrayList3.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    if (indexOf != -1 && indexOf2 != -1) {
                        if (indexOf == indexOf2) {
                            int i10 = longSparseIntArray.get(tLRPC$Dialog.id, -1);
                            if (i10 != -1) {
                                tLRPC$Dialog.pinnedNum = i10;
                            }
                        } else {
                            int i11 = longSparseIntArray.get(((Long) arrayList2.get(indexOf2)).longValue(), -1);
                            if (i11 != -1) {
                                tLRPC$Dialog.pinnedNum = i11;
                            }
                        }
                    }
                    if (tLRPC$Dialog.pinnedNum == 0) {
                        tLRPC$Dialog.pinnedNum = (size - i9) + i8;
                    }
                }
            }
            putDialogsInternal(tLRPC$messages_Dialogs, 0);
            lambda$saveDiffParams$35(i2, i3, i4, i5);
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(0) + tLRPC$messages_Dialogs.dialogs.size();
            int i12 = tLRPC$Message.id;
            int i13 = tLRPC$Message.date;
            TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
            long j6 = tLRPC$Peer.channel_id;
            if (j6 != 0) {
                int i14 = 0;
                while (true) {
                    if (i14 >= tLRPC$messages_Dialogs.chats.size()) {
                        j2 = 0;
                        break;
                    }
                    TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs.chats.get(i14);
                    if (tLRPC$Chat.id == j6) {
                        j2 = tLRPC$Chat.access_hash;
                        break;
                    }
                    i14++;
                }
                j = j6;
                j3 = 0;
                j4 = 0;
            } else {
                long j7 = tLRPC$Peer.chat_id;
                if (j7 != 0) {
                    int i15 = 0;
                    while (true) {
                        if (i15 >= tLRPC$messages_Dialogs.chats.size()) {
                            j2 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i15);
                        if (tLRPC$Chat2.id == j7) {
                            j2 = tLRPC$Chat2.access_hash;
                            break;
                        }
                        i15++;
                    }
                    j4 = j7;
                    j3 = 0;
                    j = 0;
                } else {
                    long j8 = tLRPC$Peer.user_id;
                    j = 0;
                    if (j8 != 0) {
                        int i16 = 0;
                        while (true) {
                            if (i16 >= tLRPC$messages_Dialogs.users.size()) {
                                j5 = 0;
                                break;
                            }
                            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i16);
                            if (tLRPC$User.id == j8) {
                                j5 = tLRPC$User.access_hash;
                                break;
                            }
                            i16++;
                        }
                        j4 = 0;
                        j2 = j5;
                        j3 = j8;
                    } else {
                        j2 = 0;
                        j3 = 0;
                        j4 = 0;
                    }
                }
            }
            for (int i17 = 0; i17 < 2; i17++) {
                getUserConfig().setDialogsLoadOffset(i17, i12, i13, j3, j4, j, j2);
                getUserConfig().setTotalDialogsCount(i17, totalDialogsCount);
            }
            getUserConfig().draftsLoaded = false;
            getUserConfig().saveConfig(false);
            getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$resetDialogs$89(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    public void emptyMessagesMedia(final long j, final ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda90
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$emptyMessagesMedia$94(arrayList, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:131:0x026e  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x027a  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x027f  */
    /* JADX WARN: Removed duplicated region for block: B:168:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$emptyMessagesMedia$94(ArrayList arrayList, long j) {
        SQLitePreparedStatement sQLitePreparedStatement;
        final MessagesStorage messagesStorage;
        SQLiteCursor sQLiteCursor;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        NativeByteBuffer nativeByteBuffer3;
        MessagesStorage messagesStorage2 = this;
        boolean z = false;
        int i = 2;
        int i2 = 1;
        try {
            ArrayList<File> arrayList2 = new ArrayList<>();
            final ArrayList arrayList3 = new ArrayList();
            ArrayList<Pair<Long, Integer>> arrayList4 = new ArrayList<>();
            final ArrayList arrayList5 = new ArrayList();
            SQLiteCursor queryFinalized = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid, custom_params FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", arrayList), Long.valueOf(j)), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(z ? 1 : 0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (TLdeserialize.media != null) {
                            if (addFilesToDelete(TLdeserialize, arrayList2, arrayList4, arrayList3, true)) {
                                TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                if (tLRPC$MessageMedia.document != null) {
                                    tLRPC$MessageMedia.document = new TLRPC$TL_documentEmpty();
                                } else if (tLRPC$MessageMedia.photo != null) {
                                    tLRPC$MessageMedia.photo = new TLRPC$TL_photoEmpty();
                                }
                                TLdeserialize.media.flags &= -2;
                                TLdeserialize.id = queryFinalized.intValue(1);
                                TLdeserialize.date = queryFinalized.intValue(2);
                                TLdeserialize.dialog_id = queryFinalized.longValue(3);
                                NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                if (byteBufferValue2 != null) {
                                    MessageCustomParamsHelper.readLocalParams(TLdeserialize, byteBufferValue2);
                                    byteBufferValue2.reuse();
                                }
                                arrayList5.add(TLdeserialize);
                            }
                            z = false;
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    messagesStorage = messagesStorage2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                }
            }
            int i3 = 3;
            queryFinalized.dispose();
            messagesStorage2.deleteFromDownloadQueue(arrayList4, true);
            if (arrayList5.isEmpty()) {
                messagesStorage = messagesStorage2;
                sQLitePreparedStatement = null;
            } else {
                sQLitePreparedStatement = messagesStorage2.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                int i4 = 0;
                while (i4 < arrayList5.size()) {
                    try {
                        try {
                            TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList5.get(i4);
                            MessageObject.normalizeFlags(tLRPC$Message);
                            NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                            tLRPC$Message.serializeToStream(nativeByteBuffer4);
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(i2, tLRPC$Message.id);
                            sQLitePreparedStatement.bindLong(i, tLRPC$Message.dialog_id);
                            sQLitePreparedStatement.bindInteger(i3, MessageObject.getUnreadFlags(tLRPC$Message));
                            sQLitePreparedStatement.bindInteger(4, tLRPC$Message.send_state);
                            sQLitePreparedStatement.bindInteger(5, tLRPC$Message.date);
                            sQLitePreparedStatement.bindByteBuffer(6, nativeByteBuffer4);
                            sQLitePreparedStatement.bindInteger(7, (MessageObject.isOut(tLRPC$Message) || tLRPC$Message.from_scheduled) ? 1 : 0);
                            sQLitePreparedStatement.bindInteger(8, tLRPC$Message.ttl);
                            if ((tLRPC$Message.flags & 1024) != 0) {
                                sQLitePreparedStatement.bindInteger(9, tLRPC$Message.views);
                            } else {
                                sQLitePreparedStatement.bindInteger(9, messagesStorage2.getMessageMediaType(tLRPC$Message));
                            }
                            if (tLRPC$Message.replyStory != null) {
                                nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.replyStory.getObjectSize());
                                tLRPC$Message.replyStory.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement.bindByteBuffer(10, nativeByteBuffer);
                            } else {
                                sQLitePreparedStatement.bindNull(10);
                                nativeByteBuffer = null;
                            }
                            int i5 = tLRPC$Message.stickerVerified;
                            sQLitePreparedStatement.bindInteger(11, i5 == 0 ? 1 : i5 == i ? 2 : 0);
                            sQLitePreparedStatement.bindInteger(12, tLRPC$Message.mentioned ? 1 : 0);
                            sQLitePreparedStatement.bindInteger(13, tLRPC$Message.forwards);
                            if (tLRPC$Message.replies != null) {
                                nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer2);
                                sQLitePreparedStatement.bindByteBuffer(14, nativeByteBuffer2);
                            } else {
                                sQLitePreparedStatement.bindNull(14);
                                nativeByteBuffer2 = null;
                            }
                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader != null) {
                                int i6 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                if (i6 == 0) {
                                    i6 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                }
                                sQLitePreparedStatement.bindInteger(15, i6);
                            } else {
                                sQLitePreparedStatement.bindInteger(15, 0);
                            }
                            sQLitePreparedStatement.bindLong(16, MessageObject.getChannelId(tLRPC$Message));
                            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message);
                            if (writeLocalParams != null) {
                                sQLitePreparedStatement.bindByteBuffer(16, writeLocalParams);
                            } else {
                                sQLitePreparedStatement.bindNull(17);
                            }
                            if ((tLRPC$Message.flags & 131072) != 0) {
                                nativeByteBuffer3 = nativeByteBuffer;
                                sQLitePreparedStatement.bindLong(18, tLRPC$Message.grouped_id);
                            } else {
                                nativeByteBuffer3 = nativeByteBuffer;
                                sQLitePreparedStatement.bindNull(18);
                            }
                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader2 != null) {
                                sQLitePreparedStatement.bindInteger(19, tLRPC$MessageReplyHeader2.story_id);
                            } else {
                                sQLitePreparedStatement.bindInteger(19, 0);
                            }
                            sQLitePreparedStatement.step();
                            nativeByteBuffer4.reuse();
                            if (nativeByteBuffer2 != null) {
                                nativeByteBuffer2.reuse();
                            }
                            if (writeLocalParams != null) {
                                writeLocalParams.reuse();
                            }
                            if (nativeByteBuffer3 != null) {
                                nativeByteBuffer3.reuse();
                            }
                            i4++;
                            i3 = 3;
                            i = 2;
                            i2 = 1;
                            messagesStorage2 = this;
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = null;
                            messagesStorage = this;
                            try {
                                messagesStorage.checkSQLException(e);
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement == null) {
                                }
                                sQLitePreparedStatement.dispose();
                            } catch (Throwable th2) {
                                th = th2;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLiteCursor = null;
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e3) {
                        e = e3;
                        messagesStorage = messagesStorage2;
                    } catch (Throwable th4) {
                        th = th4;
                    }
                }
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                    sQLitePreparedStatement = null;
                }
                try {
                    messagesStorage = this;
                } catch (Exception e4) {
                    e = e4;
                    messagesStorage = this;
                    sQLiteCursor = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLitePreparedStatement == null) {
                        return;
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th5) {
                    th = th5;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
                try {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$emptyMessagesMedia$91(arrayList5);
                        }
                    });
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor = null;
                    messagesStorage.checkSQLException(e);
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement == null) {
                    }
                    sQLitePreparedStatement.dispose();
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = null;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda143
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$emptyMessagesMedia$92(arrayList3);
                }
            });
            getFileLoader().deleteFiles(arrayList2, 0);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e6) {
            e = e6;
            messagesStorage = messagesStorage2;
            sQLitePreparedStatement = null;
        } catch (Throwable th7) {
            th = th7;
            sQLitePreparedStatement = null;
        }
        sQLitePreparedStatement.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$91(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$92(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    private /* synthetic */ void lambda$emptyMessagesMedia$93(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public void updateMessagePollResults(final long j, final TLRPC$Poll tLRPC$Poll, final TLRPC$PollResults tLRPC$PollResults) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessagePollResults$95(j, tLRPC$Poll, tLRPC$PollResults);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01d6  */
    /* JADX WARN: Removed duplicated region for block: B:93:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r14v16 */
    /* JADX WARN: Type inference failed for: r14v7 */
    /* JADX WARN: Type inference failed for: r14v8, types: [int, boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateMessagePollResults$95(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        LongSparseArray longSparseArray;
        int i;
        ArrayList arrayList;
        SQLiteCursor queryFinalized;
        SQLitePreparedStatement sQLitePreparedStatement;
        int i2;
        ?? r14;
        int i3 = 2;
        int i4 = 0;
        int i5 = 1;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM polls_v2 WHERE id = %d", Long.valueOf(j)), new Object[0]);
                LongSparseArray longSparseArray2 = null;
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray();
                        }
                        ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                        if (arrayList2 == null) {
                            arrayList2 = new ArrayList();
                            longSparseArray2.put(longValue, arrayList2);
                        }
                        arrayList2.add(Integer.valueOf(queryFinalized2.intValue(1)));
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized2;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized2;
                    }
                }
                queryFinalized2.dispose();
                if (longSparseArray2 != null) {
                    this.database.beginTransaction();
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                    int size = longSparseArray2.size();
                    int i6 = 0;
                    while (i6 < size) {
                        long keyAt = longSparseArray2.keyAt(i6);
                        ArrayList arrayList3 = (ArrayList) longSparseArray2.valueAt(i6);
                        int size2 = arrayList3.size();
                        while (i4 < size2) {
                            Integer num = (Integer) arrayList3.get(i4);
                            SQLiteCursor sQLiteCursor2 = sQLiteCursor;
                            int i7 = 0;
                            boolean z = false;
                            while (i7 < i3) {
                                if (i7 == i5) {
                                    try {
                                        longSparseArray = longSparseArray2;
                                        i = size;
                                        arrayList = arrayList3;
                                        queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                        sQLitePreparedStatement = executeFast2;
                                        i2 = size2;
                                        r14 = 0;
                                    } catch (Exception e2) {
                                        e = e2;
                                        sQLiteCursor = sQLiteCursor2;
                                        checkSQLException(e);
                                        if (sQLiteCursor == null) {
                                        }
                                        sQLiteCursor.dispose();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        sQLiteCursor = sQLiteCursor2;
                                        if (sQLiteCursor != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    longSparseArray = longSparseArray2;
                                    i = size;
                                    arrayList = arrayList3;
                                    i2 = size2;
                                    r14 = 0;
                                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt)), new Object[0]);
                                    sQLitePreparedStatement = executeFast;
                                }
                                try {
                                    if (queryFinalized.next()) {
                                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(r14);
                                        if (byteBufferValue != null) {
                                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(r14), r14);
                                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia;
                                                if (tLRPC$Poll != null) {
                                                    tLRPC$TL_messageMediaPoll.poll = tLRPC$Poll;
                                                }
                                                if (tLRPC$PollResults != null) {
                                                    MessageObject.updatePollResults(tLRPC$TL_messageMediaPoll, tLRPC$PollResults);
                                                }
                                                MessageObject.normalizeFlags(TLdeserialize);
                                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                                TLdeserialize.serializeToStream(nativeByteBuffer);
                                                sQLitePreparedStatement.requery();
                                                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                                                sQLitePreparedStatement.bindInteger(2, num.intValue());
                                                sQLitePreparedStatement.bindLong(3, keyAt);
                                                sQLitePreparedStatement.step();
                                                nativeByteBuffer.reuse();
                                            }
                                        }
                                        z = true;
                                    }
                                    queryFinalized.dispose();
                                    i5 = 1;
                                    i7++;
                                    longSparseArray2 = longSparseArray;
                                    sQLiteCursor2 = queryFinalized;
                                    size2 = i2;
                                    size = i;
                                    arrayList3 = arrayList;
                                    i3 = 2;
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLiteCursor = queryFinalized;
                                    checkSQLException(e);
                                    if (sQLiteCursor == null) {
                                        return;
                                    }
                                    sQLiteCursor.dispose();
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor = queryFinalized;
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    throw th;
                                }
                            }
                            LongSparseArray longSparseArray3 = longSparseArray2;
                            int i8 = size;
                            ArrayList arrayList4 = arrayList3;
                            int i9 = size2;
                            if (!z) {
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM polls_v2 WHERE mid = %d AND uid = %d", num, Long.valueOf(keyAt))).stepThis().dispose();
                            }
                            i4++;
                            sQLiteCursor = sQLiteCursor2;
                            longSparseArray2 = longSparseArray3;
                            size2 = i9;
                            size = i8;
                            arrayList3 = arrayList4;
                            i3 = 2;
                            i5 = 1;
                        }
                        i6++;
                        size = size;
                        i3 = 2;
                        i4 = 0;
                        i5 = 1;
                    }
                    executeFast.dispose();
                    executeFast2.dispose();
                    this.database.commitTransaction();
                }
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e4) {
                e = e4;
            }
            sQLiteCursor.dispose();
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void searchSavedByTag(final TLRPC$Reaction tLRPC$Reaction, final long j, final String str, final int i, final int i2, final Utilities.Callback4<ArrayList<MessageObject>, ArrayList<TLRPC$User>, ArrayList<TLRPC$Chat>, ArrayList<TLRPC$Document>> callback4, final boolean z) {
        if (callback4 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda93
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$searchSavedByTag$97(str, j, tLRPC$Reaction, i, i2, z, callback4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(33:1|2|3|4|(1:6)(1:155)|7|(1:9)(1:154)|10|11|12|(1:14)(2:145|(1:147)(21:148|16|(3:18|(1:20)(1:22)|21)|23|(1:25)(1:144)|26|28|29|30|(7:34|(3:89|90|(5:95|(1:113)(5:97|(3:99|(1:101)|111)(1:112)|102|(2:106|(1:108))|111)|109|110|56))(10:37|38|39|40|41|42|(4:45|(2:47|48)(1:50)|49|43)|51|52|53)|54|55|56|31|32)|114|115|(1:117)|118|119|(1:121)|122|(1:124)(1:131)|125|126|(3:128|69|70)(1:129)))|15|16|(0)|23|(0)(0)|26|28|29|30|(2:31|32)|114|115|(0)|118|119|(0)|122|(0)(0)|125|126|(0)(0)|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:119:0x025e, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:121:0x0261, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x002f, code lost:
        r7 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0028, code lost:
        r7 = null;
     */
    /* JADX WARN: Removed duplicated region for block: B:106:0x021e A[Catch: all -> 0x0175, Exception -> 0x0179, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:54:0x00fe, B:80:0x018b, B:83:0x0192, B:85:0x019c, B:87:0x01a9, B:89:0x01ad, B:94:0x01bc, B:96:0x01c2, B:98:0x01c8, B:100:0x01dd, B:102:0x01e5, B:104:0x0211, B:106:0x021e, B:107:0x0221, B:110:0x0229, B:111:0x0230, B:113:0x0236, B:115:0x0242), top: B:150:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:110:0x0229 A[Catch: all -> 0x0175, Exception -> 0x0179, TRY_ENTER, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:54:0x00fe, B:80:0x018b, B:83:0x0192, B:85:0x019c, B:87:0x01a9, B:89:0x01ad, B:94:0x01bc, B:96:0x01c2, B:98:0x01c8, B:100:0x01dd, B:102:0x01e5, B:104:0x0211, B:106:0x021e, B:107:0x0221, B:110:0x0229, B:111:0x0230, B:113:0x0236, B:115:0x0242), top: B:150:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0236 A[Catch: all -> 0x0175, Exception -> 0x0179, TryCatch #10 {Exception -> 0x0179, all -> 0x0175, blocks: (B:54:0x00fe, B:80:0x018b, B:83:0x0192, B:85:0x019c, B:87:0x01a9, B:89:0x01ad, B:94:0x01bc, B:96:0x01c2, B:98:0x01c8, B:100:0x01dd, B:102:0x01e5, B:104:0x0211, B:106:0x021e, B:107:0x0221, B:110:0x0229, B:111:0x0230, B:113:0x0236, B:115:0x0242), top: B:150:0x00fe }] */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0240  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x025b  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x026e  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0273  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x027c  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0281  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0286  */
    /* JADX WARN: Removed duplicated region for block: B:162:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:163:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00a0 A[Catch: all -> 0x0082, Exception -> 0x0086, TryCatch #13 {Exception -> 0x0086, all -> 0x0082, blocks: (B:21:0x0052, B:23:0x0077, B:33:0x0096, B:35:0x00a0, B:39:0x00ae, B:42:0x00b8, B:44:0x00c1, B:29:0x008a, B:31:0x008e), top: B:144:0x0052 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00b8 A[Catch: all -> 0x0082, Exception -> 0x0086, TryCatch #13 {Exception -> 0x0086, all -> 0x0082, blocks: (B:21:0x0052, B:23:0x0077, B:33:0x0096, B:35:0x00a0, B:39:0x00ae, B:42:0x00b8, B:44:0x00c1, B:29:0x008a, B:31:0x008e), top: B:144:0x0052 }] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00c0  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00e0 A[Catch: all -> 0x017d, Exception -> 0x0181, TryCatch #9 {Exception -> 0x0181, all -> 0x017d, blocks: (B:47:0x00da, B:49:0x00e0, B:52:0x00ed), top: B:152:0x00da }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$searchSavedByTag$97(String str, long j, TLRPC$Reaction tLRPC$Reaction, int i, int i2, boolean z, final Utilities.Callback4 callback4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        long clientUserId;
        String str2;
        SQLitePreparedStatement executeFast;
        final ArrayList<TLRPC$User> arrayList;
        final ArrayList<TLRPC$Chat> arrayList2;
        ArrayList arrayList3;
        ArrayList<Long> arrayList4;
        ArrayList arrayList5;
        ArrayList<TLRPC$Document> arrayList6;
        int i3;
        long j2;
        SQLiteCursor sQLiteCursor4;
        ArrayList<TLRPC$Document> arrayList7;
        SQLiteCursor sQLiteCursor5;
        ArrayList<TLRPC$Document> arrayList8;
        TLRPC$Message TLdeserialize;
        int i4;
        NativeByteBuffer byteBufferValue;
        try {
            clientUserId = getUserConfig().getClientUserId();
            SQLiteDatabase sQLiteDatabase = this.database;
            StringBuilder sb = new StringBuilder();
            sb.append("SELECT m.data, m.replydata, m.group_id FROM messages_v2 m INNER JOIN tag_message_id t ON m.mid = t.mid WHERE m.uid = ? AND t.tag = ?");
            str2 = "";
            sb.append(!TextUtils.isEmpty(str) ? " AND t.text LIKE '%' || ? || '%'" : "");
            sb.append(j != 0 ? " AND topic_id = ? " : "");
            sb.append(" ORDER BY m.mid DESC LIMIT ? OFFSET ?");
            executeFast = sQLiteDatabase.executeFast(sb.toString());
            try {
                arrayList = new ArrayList<>();
                arrayList2 = new ArrayList<>();
                arrayList3 = new ArrayList();
                arrayList4 = new ArrayList<>();
                arrayList5 = new ArrayList();
                arrayList6 = new ArrayList<>();
                executeFast.bindLong(1, clientUserId);
            } catch (Exception e) {
                e = e;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                try {
                    FileLog.e(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLiteCursor2 == null) {
                        sQLiteCursor3 = sQLiteCursor2;
                        sQLiteCursor3.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th) {
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement = executeFast;
                sQLiteCursor = null;
                sQLiteCursor2 = null;
                if (sQLitePreparedStatement != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
        if (tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) {
            j2 = ((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon.hashCode();
        } else if (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji) {
            j2 = ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction).document_id;
        } else {
            i3 = 2;
            j2 = 0;
            executeFast.bindLong(i3, j2);
            int i5 = 3;
            if (!TextUtils.isEmpty(str)) {
                String translitString = LocaleController.getInstance().getTranslitString(str);
                if (translitString != null) {
                    str2 = translitString;
                }
                executeFast.bindString(3, str2);
                i5 = 4;
            }
            if (j == 0) {
                executeFast.bindLong(i5, j);
                i5++;
            }
            executeFast.bindInteger(i5, i);
            executeFast.bindInteger(i5 + 1, i2);
            sQLiteCursor = executeFast.query(new Object[0]);
            final ArrayList arrayList9 = new ArrayList();
            SQLiteCursor sQLiteCursor6 = null;
            while (sQLiteCursor.next()) {
                try {
                    long longValue = sQLiteCursor.longValue(2);
                    if (longValue != 0 && z) {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Long valueOf = Long.valueOf(clientUserId);
                        Long valueOf2 = Long.valueOf(longValue);
                        sQLiteCursor4 = sQLiteCursor6;
                        arrayList8 = arrayList6;
                        try {
                            SQLiteCursor queryFinalized = sQLiteDatabase2.queryFinalized("SELECT data, replydata, group_id FROM messages_v2 WHERE uid = ? AND group_id = ? ORDER BY mid DESC", valueOf, valueOf2);
                            try {
                                ArrayList arrayList10 = new ArrayList();
                                while (queryFinalized.next()) {
                                    NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(0);
                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                    TLdeserialize2.readAttachPath(byteBufferValue2, clientUserId);
                                    byteBufferValue2.reuse();
                                    addUsersAndChatsFromMessage(TLdeserialize2, arrayList4, arrayList5, arrayList3);
                                    MessageObject messageObject = new MessageObject(this.currentAccount, TLdeserialize2, null, null, null, null, null, true, true, 0L, false, false, true);
                                    if (TLdeserialize2.reactions != null) {
                                        messageObject.isPrimaryGroupMessage = true;
                                    }
                                    arrayList10.add(messageObject);
                                }
                                queryFinalized.dispose();
                                arrayList9.addAll(arrayList10);
                                sQLiteCursor5 = queryFinalized;
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = null;
                                FileLog.e(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 == null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = null;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            sQLiteCursor2 = sQLiteCursor4;
                            sQLitePreparedStatement = null;
                            FileLog.e(e);
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLiteCursor2 == null) {
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            sQLiteCursor2 = sQLiteCursor4;
                            sQLitePreparedStatement = null;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            throw th;
                        }
                    } else {
                        sQLiteCursor5 = sQLiteCursor6;
                        arrayList8 = arrayList6;
                        NativeByteBuffer byteBufferValue3 = sQLiteCursor.byteBufferValue(0);
                        if (byteBufferValue3 != null && (TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false)) != null) {
                            TLdeserialize.readAttachPath(byteBufferValue3, clientUserId);
                            byteBufferValue3.reuse();
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, arrayList3);
                            TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                            if (tLRPC$MessageReplyHeader != null) {
                                if (tLRPC$MessageReplyHeader.reply_to_msg_id == 0) {
                                    int i6 = (tLRPC$MessageReplyHeader.reply_to_random_id > 0L ? 1 : (tLRPC$MessageReplyHeader.reply_to_random_id == 0L ? 0 : -1));
                                    i4 = 1;
                                    if (i6 != 0) {
                                    }
                                } else {
                                    i4 = 1;
                                }
                                if (!sQLiteCursor.isNull(i4) && (byteBufferValue = sQLiteCursor.byteBufferValue(i4)) != null) {
                                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    TLdeserialize.replyMessage = TLdeserialize3;
                                    TLdeserialize3.readAttachPath(byteBufferValue, clientUserId);
                                    byteBufferValue.reuse();
                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                    if (tLRPC$Message != null) {
                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList4, arrayList5, arrayList3);
                                    }
                                }
                            }
                            arrayList9.add(new MessageObject(this.currentAccount, TLdeserialize, null, null, null, null, null, true, true, 0L, false, false, true));
                            arrayList6 = arrayList8;
                            sQLiteCursor6 = sQLiteCursor5;
                        }
                    }
                    arrayList6 = arrayList8;
                    sQLiteCursor6 = sQLiteCursor5;
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor4 = sQLiteCursor6;
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor4 = sQLiteCursor6;
                }
            }
            sQLiteCursor4 = sQLiteCursor6;
            ArrayList<TLRPC$Document> arrayList11 = arrayList6;
            sQLiteCursor.dispose();
            if (!arrayList4.isEmpty()) {
                getUsersInternal(arrayList4, arrayList);
            }
            if (!arrayList5.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList5), arrayList2);
            }
            if (arrayList3.isEmpty()) {
                arrayList7 = arrayList11;
                getAnimatedEmoji(TextUtils.join(",", arrayList3), arrayList7);
            } else {
                arrayList7 = arrayList11;
            }
            final ArrayList<TLRPC$Document> arrayList12 = arrayList7;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
                @Override // java.lang.Runnable
                public final void run() {
                    Utilities.Callback4.this.run(arrayList9, arrayList, arrayList2, arrayList12);
                }
            });
            sQLiteCursor.dispose();
            if (sQLiteCursor4 == null) {
                sQLiteCursor3 = sQLiteCursor4;
                sQLiteCursor3.dispose();
                return;
            }
            return;
        }
        i3 = 2;
        executeFast.bindLong(i3, j2);
        int i52 = 3;
        if (!TextUtils.isEmpty(str)) {
        }
        if (j == 0) {
        }
        executeFast.bindInteger(i52, i);
        executeFast.bindInteger(i52 + 1, i2);
        sQLiteCursor = executeFast.query(new Object[0]);
        final ArrayList arrayList92 = new ArrayList();
        SQLiteCursor sQLiteCursor62 = null;
        while (sQLiteCursor.next()) {
        }
        sQLiteCursor4 = sQLiteCursor62;
        ArrayList<TLRPC$Document> arrayList112 = arrayList6;
        sQLiteCursor.dispose();
        if (!arrayList4.isEmpty()) {
        }
        if (!arrayList5.isEmpty()) {
        }
        if (arrayList3.isEmpty()) {
        }
        final ArrayList arrayList122 = arrayList7;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda203
            @Override // java.lang.Runnable
            public final void run() {
                Utilities.Callback4.this.run(arrayList92, arrayList, arrayList2, arrayList122);
            }
        });
        sQLiteCursor.dispose();
        if (sQLiteCursor4 == null) {
        }
    }

    public void updateMessageReactions(final long j, final int i, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda128
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageReactions$98(i, j, tLRPC$TL_messageReactions);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:60:0x015e  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0163  */
    /* JADX WARN: Type inference failed for: r5v0 */
    /* JADX WARN: Type inference failed for: r5v2 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateMessageReactions$98(int i, long j, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        long j2;
        SQLiteCursor queryFinalized;
        NativeByteBuffer byteBufferValue;
        long j3;
        SQLitePreparedStatement executeFast;
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions2;
        long j4;
        int i2 = 2;
        int i3 = 0;
        try {
            long clientUserId = getUserConfig().getClientUserId();
            this.database.beginTransaction();
            long j5 = 0;
            int i4 = 0;
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions3 = null;
            while (i4 < i2) {
                if (i4 == 0) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    Locale locale = Locale.US;
                    Integer valueOf = Integer.valueOf(i);
                    Long valueOf2 = Long.valueOf(j);
                    Object[] objArr = new Object[i2];
                    objArr[i3] = valueOf;
                    objArr[1] = valueOf2;
                    queryFinalized = sQLiteDatabase2.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[i3]);
                    j2 = j5;
                } else {
                    SQLiteDatabase sQLiteDatabase3 = this.database;
                    Locale locale2 = Locale.US;
                    Integer valueOf3 = Integer.valueOf(i);
                    Long valueOf4 = Long.valueOf(j);
                    j2 = j5;
                    Object[] objArr2 = new Object[i2];
                    objArr2[i3] = valueOf3;
                    objArr2[1] = valueOf4;
                    queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale2, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", objArr2), new Object[i3]);
                }
                try {
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(i3)) != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(i3), i3);
                        if (TLdeserialize != null) {
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            if (tLRPC$TL_messageReactions3 == null) {
                                tLRPC$TL_messageReactions3 = TLdeserialize.reactions;
                                j3 = MessageObject.getSavedDialogId(clientUserId, TLdeserialize);
                            } else {
                                j3 = j2;
                            }
                            MessageObject.updateReactions(TLdeserialize, tLRPC$TL_messageReactions);
                            if (i4 == 0) {
                                executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                            } else {
                                executeFast = this.database.executeFast("UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?");
                            }
                            MessageObject.normalizeFlags(TLdeserialize);
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                            TLdeserialize.serializeToStream(nativeByteBuffer);
                            executeFast.requery();
                            executeFast.bindByteBuffer(1, nativeByteBuffer);
                            executeFast.bindInteger(i2, i);
                            executeFast.bindLong(3, j);
                            executeFast.step();
                            nativeByteBuffer.reuse();
                            executeFast.dispose();
                            if (clientUserId == j) {
                                tLRPC$TL_messageReactions2 = tLRPC$TL_messageReactions3;
                                j4 = j3;
                                this.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid = %d", Integer.valueOf(TLdeserialize.id))).stepThis().dispose();
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                bindMessageTags(executeFast2, TLdeserialize);
                                executeFast2.dispose();
                            } else {
                                tLRPC$TL_messageReactions2 = tLRPC$TL_messageReactions3;
                                j4 = j3;
                            }
                            tLRPC$TL_messageReactions3 = tLRPC$TL_messageReactions2;
                            j5 = j4;
                            queryFinalized.dispose();
                            i4++;
                            i2 = 2;
                            i3 = 0;
                        } else {
                            byteBufferValue.reuse();
                        }
                    }
                    j5 = j2;
                    queryFinalized.dispose();
                    i4++;
                    i2 = 2;
                    i3 = 0;
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                            sQLiteDatabase4.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            long j6 = j5;
            this.database.commitTransaction();
            if (j == clientUserId && tLRPC$TL_messageReactions3 != null) {
                onReactionsUpdate(j6, tLRPC$TL_messageReactions3, tLRPC$TL_messageReactions);
            }
            SQLiteDatabase sQLiteDatabase5 = this.database;
            if (sQLiteDatabase5 != null) {
                sQLiteDatabase5.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public class SavedReactionsUpdate {
        TLRPC$TL_messageReactions last;
        TLRPC$TL_messageReactions old;
        long topic_id;

        public SavedReactionsUpdate(long j, TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
            this.topic_id = MessageObject.getSavedDialogId(j, tLRPC$Message2);
            this.old = tLRPC$Message.reactions;
            this.last = tLRPC$Message2.reactions;
        }
    }

    private void onReactionsUpdate(final ArrayList<SavedReactionsUpdate> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda2
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onReactionsUpdate$99(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$99(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            SavedReactionsUpdate savedReactionsUpdate = (SavedReactionsUpdate) arrayList.get(i);
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions = savedReactionsUpdate.old;
            TLRPC$TL_messageReactions tLRPC$TL_messageReactions2 = savedReactionsUpdate.last;
            longSparseArray.clear();
            longSparseArray2.clear();
            if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.results != null && tLRPC$TL_messageReactions.reactions_as_tags) {
                for (int i2 = 0; i2 < tLRPC$TL_messageReactions.results.size(); i2++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions.results.get(i2).reaction);
                    if (fromTL != null) {
                        longSparseArray.put(fromTL.hash, fromTL);
                    }
                }
            }
            if (tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.results != null && tLRPC$TL_messageReactions2.reactions_as_tags) {
                for (int i3 = 0; i3 < tLRPC$TL_messageReactions2.results.size(); i3++) {
                    ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions2.results.get(i3).reaction);
                    if (fromTL2 != null) {
                        longSparseArray2.put(fromTL2.hash, fromTL2);
                    }
                }
            }
            for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                long keyAt = longSparseArray.keyAt(i4);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i4);
                if (!longSparseArray2.containsKey(keyAt) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction, false, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                long keyAt2 = longSparseArray2.keyAt(i5);
                ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i5);
                if (!longSparseArray.containsKey(keyAt2) && getMessagesController().updateSavedReactionTags(savedReactionsUpdate.topic_id, visibleReaction2, true, false)) {
                    hashSet.add(Long.valueOf(savedReactionsUpdate.topic_id));
                    z = true;
                }
            }
        }
        if (!z || hashSet.isEmpty()) {
            return;
        }
        getMessagesController().updateSavedReactionTags(hashSet);
    }

    private void onReactionsUpdate(final long j, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions, final TLRPC$TL_messageReactions tLRPC$TL_messageReactions2) {
        ArrayList<TLRPC$ReactionCount> arrayList;
        if (tLRPC$TL_messageReactions == null || (arrayList = tLRPC$TL_messageReactions.results) == null) {
            return;
        }
        if (arrayList.isEmpty() && tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.results.isEmpty()) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda109
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$onReactionsUpdate$100(tLRPC$TL_messageReactions, tLRPC$TL_messageReactions2, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onReactionsUpdate$100(TLRPC$TL_messageReactions tLRPC$TL_messageReactions, TLRPC$TL_messageReactions tLRPC$TL_messageReactions2, long j) {
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.results != null && tLRPC$TL_messageReactions.reactions_as_tags) {
            for (int i = 0; i < tLRPC$TL_messageReactions.results.size(); i++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions.results.get(i).reaction);
                longSparseArray.put(fromTL.hash, fromTL);
            }
        }
        if (tLRPC$TL_messageReactions2 != null && tLRPC$TL_messageReactions2.results != null && tLRPC$TL_messageReactions2.reactions_as_tags) {
            for (int i2 = 0; i2 < tLRPC$TL_messageReactions2.results.size(); i2++) {
                ReactionsLayoutInBubble.VisibleReaction fromTL2 = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_messageReactions2.results.get(i2).reaction);
                longSparseArray2.put(fromTL2.hash, fromTL2);
            }
        }
        boolean z = false;
        for (int i3 = 0; i3 < longSparseArray.size(); i3++) {
            long keyAt = longSparseArray.keyAt(i3);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray.valueAt(i3);
            if (!longSparseArray2.containsKey(keyAt)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction, false, false) || z;
            }
        }
        for (int i4 = 0; i4 < longSparseArray2.size(); i4++) {
            long keyAt2 = longSparseArray2.keyAt(i4);
            ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = (ReactionsLayoutInBubble.VisibleReaction) longSparseArray2.valueAt(i4);
            if (!longSparseArray.containsKey(keyAt2)) {
                z = getMessagesController().updateSavedReactionTags(j, visibleReaction2, true, false) || z;
            }
        }
        if (z) {
            if (j != 0) {
                getMessagesController().updateSavedReactionTags(0L);
            }
            getMessagesController().updateSavedReactionTags(j);
        }
    }

    private void bindMessageTags(SQLitePreparedStatement sQLitePreparedStatement, TLRPC$Message tLRPC$Message) throws SQLiteException {
        ArrayList<TLRPC$ReactionCount> arrayList;
        long j;
        long clientUserId = getUserConfig().getClientUserId();
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
        if (tLRPC$TL_messageReactions == null || !tLRPC$TL_messageReactions.reactions_as_tags || (arrayList = tLRPC$TL_messageReactions.results) == null || arrayList.isEmpty()) {
            return;
        }
        LocaleController localeController = LocaleController.getInstance();
        String str = tLRPC$Message.message;
        if (str == null) {
            str = "";
        }
        String translitString = localeController.getTranslitString(str);
        Iterator<TLRPC$ReactionCount> it = tLRPC$Message.reactions.results.iterator();
        while (it.hasNext()) {
            TLRPC$ReactionCount next = it.next();
            TLRPC$Reaction tLRPC$Reaction = next.reaction;
            if ((tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) || (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji)) {
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, tLRPC$Message.id);
                sQLitePreparedStatement.bindLong(2, MessageObject.getSavedDialogId(clientUserId, tLRPC$Message));
                TLRPC$Reaction tLRPC$Reaction2 = next.reaction;
                if (tLRPC$Reaction2 instanceof TLRPC$TL_reactionEmoji) {
                    j = ((TLRPC$TL_reactionEmoji) tLRPC$Reaction2).emoticon.hashCode();
                } else {
                    j = tLRPC$Reaction2 instanceof TLRPC$TL_reactionCustomEmoji ? ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction2).document_id : 0L;
                }
                sQLitePreparedStatement.bindLong(3, j);
                sQLitePreparedStatement.bindString(4, translitString == null ? "" : translitString);
                sQLitePreparedStatement.step();
            }
        }
    }

    public void updateMessageVoiceTranscriptionOpen(final long j, final int i, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda122
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscriptionOpen$101(i, j, tLRPC$Message);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscriptionOpen$101(int i, long j, TLRPC$Message tLRPC$Message) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final long j2, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$102(i, j, z, j2, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$102(int i, long j, boolean z, long j2, String str) {
        TLRPC$Message messageWithCustomParamsOnlyInternal;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = z;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = j2;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            executeFast.requery();
            NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
            if (writeLocalParams != null) {
                executeFast.bindByteBuffer(1, writeLocalParams);
            } else {
                executeFast.bindNull(1);
            }
            executeFast.bindInteger(2, i);
            executeFast.bindLong(3, j);
            executeFast.step();
            executeFast.dispose();
            this.database.commitTransaction();
            if (writeLocalParams != null) {
                writeLocalParams.reuse();
            }
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateMessageVoiceTranscription(final long j, final int i, final String str, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda218
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVoiceTranscription$103(i, j, tLRPC$Message, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVoiceTranscription$103(int i, long j, TLRPC$Message tLRPC$Message, String str) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(i, j);
                messageWithCustomParamsOnlyInternal.voiceTranscriptionOpen = tLRPC$Message.voiceTranscriptionOpen;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionRated = tLRPC$Message.voiceTranscriptionRated;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionFinal = tLRPC$Message.voiceTranscriptionFinal;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionForce = tLRPC$Message.voiceTranscriptionForce;
                messageWithCustomParamsOnlyInternal.voiceTranscriptionId = tLRPC$Message.voiceTranscriptionId;
                messageWithCustomParamsOnlyInternal.voiceTranscription = str;
                for (int i2 = 0; i2 < 2; i2++) {
                    if (i2 == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        this.database.commitTransaction();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public void updateMessageCustomParams(final long j, final TLRPC$Message tLRPC$Message) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda87
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageCustomParams$104(tLRPC$Message, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageCustomParams$104(TLRPC$Message tLRPC$Message, long j) {
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                TLRPC$Message messageWithCustomParamsOnlyInternal = getMessageWithCustomParamsOnlyInternal(tLRPC$Message.id, j);
                MessageCustomParamsHelper.copyParams(tLRPC$Message, messageWithCustomParamsOnlyInternal);
                for (int i = 0; i < 2; i++) {
                    if (i == 0) {
                        executeFast = this.database.executeFast("UPDATE messages_v2 SET custom_params = ? WHERE mid = ? AND uid = ?");
                    } else {
                        executeFast = this.database.executeFast("UPDATE messages_topics SET custom_params = ? WHERE mid = ? AND uid = ?");
                    }
                    try {
                        executeFast.requery();
                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(messageWithCustomParamsOnlyInternal);
                        if (writeLocalParams != null) {
                            executeFast.bindByteBuffer(1, writeLocalParams);
                        } else {
                            executeFast.bindNull(1);
                        }
                        executeFast.bindInteger(2, tLRPC$Message.id);
                        executeFast.bindLong(3, j);
                        executeFast.step();
                        executeFast.dispose();
                        if (writeLocalParams != null) {
                            writeLocalParams.reuse();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    public TLRPC$Message getMessageWithCustomParamsOnlyInternal(int i, long j) {
        SQLiteCursor queryFinalized;
        boolean z;
        TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT custom_params FROM messages_v2 WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
            } catch (SQLiteException e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            if (queryFinalized.next()) {
                MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, queryFinalized.byteBufferValue(0));
                z = true;
            } else {
                z = false;
            }
            queryFinalized.dispose();
            if (!z) {
                sQLiteCursor = this.database.queryFinalized("SELECT custom_params FROM messages_topics WHERE mid = ? AND uid = ?", Integer.valueOf(i), Long.valueOf(j));
                if (sQLiteCursor.next()) {
                    MessageCustomParamsHelper.readLocalParams(tLRPC$TL_message, sQLiteCursor.byteBufferValue(0));
                }
                sQLiteCursor.dispose();
            }
        } catch (SQLiteException e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            return tLRPC$TL_message;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        return tLRPC$TL_message;
    }

    public void getNewTask(final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda79
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getNewTask$105(longSparseArray, longSparseArray2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:23:0x00a6, code lost:
        if (r7 != 0) goto L18;
     */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:60:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNewTask$105(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        Exception e;
        LongSparseArray<ArrayList<Integer>> longSparseArray3;
        SQLiteCursor sQLiteCursor = null;
        try {
            if (longSparseArray != null) {
                try {
                    int size = longSparseArray.size();
                    for (int i = 0; i < size; i++) {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 0", TextUtils.join(",", (Iterable) longSparseArray.valueAt(i)), Long.valueOf(longSparseArray.keyAt(i)))).stepThis().dispose();
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
            if (longSparseArray2 != null) {
                int size2 = longSparseArray2.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 1", TextUtils.join(",", (Iterable) longSparseArray2.valueAt(i2)), Long.valueOf(longSparseArray2.keyAt(i2)))).stepThis().dispose();
                }
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, date, media, uid FROM enc_tasks_v4 WHERE date = (SELECT min(date) FROM enc_tasks_v4)", new Object[0]);
            LongSparseArray<ArrayList<Integer>> longSparseArray4 = null;
            LongSparseArray<ArrayList<Integer>> longSparseArray5 = null;
            int i3 = 0;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(0);
                    int intValue2 = queryFinalized.intValue(1);
                    int intValue3 = queryFinalized.intValue(2);
                    long longValue = queryFinalized.longValue(3);
                    if (intValue3 == -1) {
                        if (intValue > 0) {
                            if (longSparseArray5 == null) {
                                longSparseArray5 = new LongSparseArray<>();
                            }
                            longSparseArray3 = longSparseArray5;
                        }
                        if (longSparseArray4 == null) {
                            longSparseArray4 = new LongSparseArray<>();
                        }
                        longSparseArray3 = longSparseArray5;
                        longSparseArray5 = longSparseArray4;
                    }
                    ArrayList<Integer> arrayList = longSparseArray5.get(longValue);
                    if (arrayList == null) {
                        arrayList = new ArrayList<>();
                        longSparseArray5.put(longValue, arrayList);
                    }
                    arrayList.add(Integer.valueOf(intValue));
                    i3 = intValue2;
                    longSparseArray5 = longSparseArray3;
                } catch (Exception e3) {
                    sQLiteCursor = queryFinalized;
                    e = e3;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th) {
                    sQLiteCursor = queryFinalized;
                    th = th;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedDeleteTask(i3, longSparseArray4, longSparseArray5);
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void markMentionMessageAsRead(final long j, final int i, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda66
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMentionMessageAsRead$106(i, j, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$106(int i, long j, long j2) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                try {
                    int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
                    queryFinalized.dispose();
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(max), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, max);
                    if (max == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                    }
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(locale, "SELECT data FROM messages_topics WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j)), new Object[0]);
                    long j3 = 0;
                    while (queryFinalized2.next()) {
                        NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            j3 = MessageObject.getTopicId(this.currentAccount, TLdeserialize, isForum(j));
                        }
                    }
                    queryFinalized2.dispose();
                    if (j3 != 0) {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale2 = Locale.US;
                        SQLiteCursor queryFinalized3 = sQLiteDatabase2.queryFinalized(String.format(locale2, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j3)), new Object[0]);
                        try {
                            int max2 = queryFinalized3.next() ? Math.max(0, queryFinalized3.intValue(0) - 1) : 0;
                            queryFinalized3.dispose();
                            this.database.executeFast(String.format(locale2, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(max2), Long.valueOf(j), Long.valueOf(j3))).stepThis().dispose();
                            getMessagesController().getTopicsController().updateMentionsUnread(j, j3, max2);
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor3 = queryFinalized3;
                            checkSQLException(e);
                            if (sQLiteCursor3 != null) {
                                sQLiteCursor3.dispose();
                            }
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor3 = queryFinalized3;
                            if (sQLiteCursor3 != null) {
                                sQLiteCursor3.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor3 = sQLiteCursor2;
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor3 = sQLiteCursor;
                }
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public void markMessageAsMention(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda144
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsMention$107(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsMention$107(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET mention = 1, read_state = read_state & ~2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void resetMentionsCount(final long j, final long j2, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda77
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetMentionsCount$108(j2, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00f8  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00fe  */
    /* JADX WARN: Removed duplicated region for block: B:48:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$resetMentionsCount$108(long j, long j2, int i) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            if (j == 0) {
                try {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                    queryFinalized.dispose();
                    if (intValue == 0 && i == 0) {
                        return;
                    }
                    if (i == 0) {
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2))).stepThis().dispose();
                    }
                    this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i), Long.valueOf(j2))).stepThis().dispose();
                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                    longSparseIntArray.put(j2, i);
                    getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                    if (i == 0) {
                        updateFiltersReadCounter(null, longSparseIntArray, true);
                        return;
                    }
                    return;
                } catch (Exception e2) {
                    e = e2;
                    sQLiteCursor = queryFinalized;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
            try {
                this.database.executeFast(String.format(Locale.US, "UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i), Long.valueOf(j2), Long.valueOf(j))).stepThis().dispose();
                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                topicUpdate.dialogId = j2;
                topicUpdate.topicId = j;
                topicUpdate.onlyCounters = true;
                topicUpdate.unreadMentions = i;
                topicUpdate.unreadCount = -1;
                getMessagesController().getTopicsController().processUpdate(Collections.singletonList(topicUpdate));
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor == null) {
                }
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = null;
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public void createTaskForMid(final long j, final int i, final int i2, final int i3, final int i4, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda235
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForMid$110(i2, i3, i4, i, z, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$110(int i, int i2, int i3, int i4, final boolean z, final long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                int max = Math.max(i, i2) + i3;
                SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
                final ArrayList<Integer> arrayList = new ArrayList<>();
                arrayList.add(Integer.valueOf(i4));
                sparseArray.put(max, arrayList);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda234
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForMid$109(z, j, arrayList);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i5 = 0; i5 < sparseArray.size(); i5++) {
                    try {
                        int keyAt = sparseArray.keyAt(i5);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                            executeFast.requery();
                            executeFast.bindInteger(1, arrayList2.get(i6).intValue());
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            executeFast.step();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid = %d AND uid = %d", Integer.valueOf(i4), Long.valueOf(j))).stepThis().dispose();
                getMessagesController().didAddedNewTask(max, j, sparseArray);
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$109(boolean z, long j, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(j, arrayList, 0, 0);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Removed duplicated region for block: B:38:0x00c9  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createTaskForSecretMedia(long j, SparseArray<ArrayList<Integer>> sparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        try {
            ArrayList arrayList = new ArrayList();
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                int i = ConnectionsManager.DEFAULT_DATACENTER_ID;
                for (int i2 = 0; i2 < sparseArray.size(); i2++) {
                    try {
                        int keyAt = sparseArray.keyAt(i2);
                        ArrayList<Integer> arrayList2 = sparseArray.get(keyAt);
                        for (int i3 = 0; i3 < arrayList2.size(); i3++) {
                            int intValue = arrayList2.get(i3).intValue();
                            executeFast.requery();
                            executeFast.bindInteger(1, intValue);
                            executeFast.bindLong(2, j);
                            executeFast.bindInteger(3, keyAt);
                            executeFast.bindInteger(4, 1);
                            i = Math.min(i, intValue);
                            executeFast.step();
                            arrayList.add(arrayList2.get(i3));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                                sQLiteDatabase.commitTransaction();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(", ", arrayList))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i, j, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = null;
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = null;
        }
    }

    public void createTaskForSecretChat(final int i, final int i2, final int i3, final int i4, final ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$createTaskForSecretChat$112(i, arrayList, i4, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:59:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0179  */
    /* JADX WARN: Removed duplicated region for block: B:94:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$createTaskForSecretChat$112(int i, ArrayList arrayList, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor queryFinalized;
        try {
            final long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(i);
            SparseArray<ArrayList<Integer>> sparseArray = new SparseArray<>();
            final ArrayList arrayList2 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            if (arrayList == null) {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", Long.valueOf(makeEncryptedDialogId), Integer.valueOf(i2), Integer.valueOf(i3)), new Object[0]);
            } else {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
            }
            int i5 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            while (queryFinalized.next()) {
                try {
                    int intValue = queryFinalized.intValue(1);
                    int intValue2 = queryFinalized.intValue(0);
                    if (arrayList != null) {
                        arrayList2.add(Integer.valueOf(intValue2));
                    }
                    if (intValue > 0) {
                        int max = Math.max(i3, i4) + intValue;
                        i5 = Math.min(i5, max);
                        ArrayList<Integer> arrayList3 = sparseArray.get(max);
                        if (arrayList3 == null) {
                            arrayList3 = new ArrayList<>();
                            sparseArray.put(max, arrayList3);
                        }
                        if (sb.length() != 0) {
                            sb.append(",");
                        }
                        sb.append(intValue2);
                        arrayList3.add(Integer.valueOf(intValue2));
                    }
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    sQLitePreparedStatement = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda160
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$createTaskForSecretChat$111(makeEncryptedDialogId, arrayList2);
                    }
                });
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    try {
                        int keyAt = sparseArray.keyAt(i6);
                        ArrayList<Integer> arrayList4 = sparseArray.get(keyAt);
                        for (int i7 = 0; i7 < arrayList4.size(); i7++) {
                            sQLitePreparedStatement.requery();
                            sQLitePreparedStatement.bindInteger(1, arrayList4.get(i7).intValue());
                            sQLitePreparedStatement.bindLong(2, makeEncryptedDialogId);
                            sQLitePreparedStatement.bindInteger(3, keyAt);
                            sQLitePreparedStatement.bindInteger(4, 0);
                            sQLitePreparedStatement.step();
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor == null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th3) {
                        th = th3;
                        sQLiteCursor = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d", sb.toString(), Long.valueOf(makeEncryptedDialogId))).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, makeEncryptedDialogId, sparseArray);
            }
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$111(long j, ArrayList arrayList) {
        markMessagesContentAsRead(j, arrayList, 0, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Code restructure failed: missing block: B:187:0x0402, code lost:
        if (r3.indexOfKey(-r4.id) >= 0) goto L185;
     */
    /* JADX WARN: Code restructure failed: missing block: B:348:0x0682, code lost:
        if (r1.dialogsWithMentions.indexOfKey(-r0.id) < 0) goto L349;
     */
    /* JADX WARN: Removed duplicated region for block: B:139:0x032c  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x03ac  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x03b8  */
    /* JADX WARN: Removed duplicated region for block: B:169:0x03bd  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x03f9  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x0424  */
    /* JADX WARN: Removed duplicated region for block: B:200:0x0448  */
    /* JADX WARN: Removed duplicated region for block: B:224:0x04ab  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x04df  */
    /* JADX WARN: Removed duplicated region for block: B:284:0x0591  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x07ec  */
    /* JADX WARN: Removed duplicated region for block: B:460:0x081e  */
    /* JADX WARN: Removed duplicated region for block: B:507:0x08ca  */
    /* JADX WARN: Removed duplicated region for block: B:626:0x0a7e  */
    /* JADX WARN: Removed duplicated region for block: B:627:0x0a85  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateFiltersReadCounter(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, boolean z) throws Exception {
        int i;
        LongSparseArray longSparseArray;
        int size;
        int i2;
        int i3;
        int i4;
        int i5;
        MessagesController.DialogFilter dialogFilter;
        int i6;
        MessagesStorage messagesStorage;
        LongSparseArray longSparseArray2;
        int i7;
        int i8;
        MessagesController.DialogFilter dialogFilter2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        LongSparseArray longSparseArray5;
        int i9;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        int i10;
        char c;
        char c2;
        int i11;
        int i12;
        char c3;
        int i13;
        int i14;
        char c4;
        char c5;
        int i15;
        int i16;
        int i17;
        MessagesController.DialogFilter dialogFilter3;
        int i18;
        int i19;
        MessagesController.DialogFilter dialogFilter4;
        int intValue;
        int i20;
        LongSparseArray longSparseArray8;
        int i21;
        int i22;
        LongSparseArray longSparseArray9;
        int i23;
        MessagesStorage messagesStorage2;
        LongSparseArray longSparseArray10;
        LongSparseArray longSparseArray11;
        int intValue2;
        int i24;
        char c6;
        char c7;
        int i25;
        int i26;
        char c8;
        int i27;
        int i28;
        char c9;
        char c10;
        int i29;
        ArrayList<TLRPC$Chat> arrayList;
        LongSparseArray longSparseArray12;
        LongSparseArray longSparseArray13;
        int i30;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        LongSparseArray longSparseArray14;
        int i31;
        int i32;
        ArrayList<TLRPC$EncryptedChat> arrayList2;
        ArrayList<TLRPC$User> arrayList3;
        LongSparseArray longSparseArray15;
        LongSparseIntArray longSparseIntArray3;
        MessagesStorage messagesStorage3 = this;
        if ((longSparseIntArray == null || longSparseIntArray.size() == 0) && (longSparseIntArray2 == null || longSparseIntArray2.size() == 0)) {
            return;
        }
        int i33 = 0;
        while (true) {
            if (i33 >= 2) {
                break;
            }
            for (int i34 = 0; i34 < 2; i34++) {
                int[] iArr = messagesStorage3.contacts[i33];
                int[] iArr2 = messagesStorage3.nonContacts[i33];
                int[] iArr3 = messagesStorage3.bots[i33];
                int[] iArr4 = messagesStorage3.channels[i33];
                messagesStorage3.groups[i33][i34] = 0;
                iArr4[i34] = 0;
                iArr3[i34] = 0;
                iArr2[i34] = 0;
                iArr[i34] = 0;
            }
            int[] iArr5 = messagesStorage3.mentionChannels;
            messagesStorage3.mentionGroups[i33] = 0;
            iArr5[i33] = 0;
            i33++;
        }
        ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
        ArrayList<TLRPC$Chat> arrayList6 = new ArrayList<>();
        ArrayList<Long> arrayList7 = new ArrayList<>();
        ArrayList arrayList8 = new ArrayList();
        ArrayList arrayList9 = new ArrayList();
        LongSparseArray longSparseArray16 = new LongSparseArray();
        LongSparseArray longSparseArray17 = new LongSparseArray();
        int i35 = 0;
        for (i = 2; i35 < i; i = 2) {
            LongSparseIntArray longSparseIntArray4 = i35 == 0 ? longSparseIntArray : longSparseIntArray2;
            if (longSparseIntArray4 != null) {
                int i36 = 0;
                while (i36 < longSparseIntArray4.size()) {
                    int valueAt = longSparseIntArray4.valueAt(i36);
                    Integer valueOf = Integer.valueOf(valueAt);
                    if ((!z || valueAt == 0) && (z || valueAt != 0)) {
                        arrayList3 = arrayList4;
                        long keyAt = longSparseIntArray4.keyAt(i36);
                        if (!z) {
                            if (messagesStorage3.dialogsWithMentions.indexOfKey(keyAt) < 0 && messagesStorage3.dialogsWithUnread.indexOfKey(keyAt) < 0) {
                                longSparseArray17.put(keyAt, valueOf);
                            }
                            if (i35 == 0) {
                                messagesStorage3.dialogsWithUnread.put(keyAt, valueOf);
                            } else {
                                messagesStorage3.dialogsWithMentions.put(keyAt, valueOf);
                            }
                        } else if (i35 == 0) {
                            messagesStorage3.dialogsWithUnread.remove(keyAt);
                        } else {
                            messagesStorage3.dialogsWithMentions.remove(keyAt);
                        }
                        if (longSparseArray16.indexOfKey(keyAt) < 0) {
                            SQLiteDatabase sQLiteDatabase = messagesStorage3.database;
                            StringBuilder sb = new StringBuilder();
                            longSparseIntArray3 = longSparseIntArray4;
                            sb.append("SELECT folder_id FROM dialogs WHERE did = ");
                            sb.append(keyAt);
                            longSparseArray15 = longSparseArray17;
                            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                            int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                            longSparseArray16.put(keyAt, Integer.valueOf(intValue3));
                        } else {
                            longSparseArray15 = longSparseArray17;
                            longSparseIntArray3 = longSparseIntArray4;
                        }
                        if (DialogObject.isEncryptedDialog(keyAt)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(keyAt);
                            if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList9.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(keyAt)) {
                            if (!arrayList7.contains(Long.valueOf(keyAt))) {
                                arrayList7.add(Long.valueOf(keyAt));
                            }
                        } else {
                            long j = -keyAt;
                            if (!arrayList8.contains(Long.valueOf(j))) {
                                arrayList8.add(Long.valueOf(j));
                            }
                        }
                    } else {
                        arrayList3 = arrayList4;
                        longSparseArray15 = longSparseArray17;
                        longSparseIntArray3 = longSparseIntArray4;
                    }
                    i36++;
                    arrayList4 = arrayList3;
                    longSparseArray17 = longSparseArray15;
                    longSparseIntArray4 = longSparseIntArray3;
                }
            }
            i35++;
            arrayList4 = arrayList4;
            longSparseArray17 = longSparseArray17;
        }
        ArrayList<TLRPC$User> arrayList10 = arrayList4;
        LongSparseArray longSparseArray18 = longSparseArray17;
        LongSparseArray longSparseArray19 = new LongSparseArray();
        LongSparseArray longSparseArray20 = new LongSparseArray();
        LongSparseArray longSparseArray21 = new LongSparseArray();
        LongSparseArray longSparseArray22 = new LongSparseArray();
        LongSparseArray longSparseArray23 = new LongSparseArray();
        LongSparseArray longSparseArray24 = new LongSparseArray();
        LongSparseArray longSparseArray25 = longSparseArray20;
        if (!arrayList7.isEmpty()) {
            messagesStorage3.getUsersInternal(arrayList7, arrayList10);
            int size2 = arrayList10.size();
            int i37 = 0;
            while (i37 < size2) {
                TLRPC$User tLRPC$User = arrayList10.get(i37);
                ArrayList<TLRPC$Chat> arrayList11 = arrayList6;
                int i38 = size2;
                ArrayList arrayList12 = arrayList8;
                ArrayList arrayList13 = arrayList9;
                boolean isDialogMuted = getMessagesController().isDialogMuted(tLRPC$User.id, 0L);
                Integer num = (Integer) longSparseArray16.get(tLRPC$User.id);
                int intValue4 = (num == null || num.intValue() < 0 || num.intValue() > 1) ? 0 : num.intValue();
                if (isDialogMuted) {
                    longSparseArray23.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (intValue4 == 1) {
                    longSparseArray24.put(tLRPC$User.id, Boolean.TRUE);
                }
                if (tLRPC$User.bot) {
                    int[] iArr6 = messagesStorage3.bots[intValue4];
                    iArr6[isDialogMuted ? 1 : 0] = iArr6[isDialogMuted ? 1 : 0] + 1;
                } else if (tLRPC$User.self || tLRPC$User.contact) {
                    int[] iArr7 = messagesStorage3.contacts[intValue4];
                    iArr7[isDialogMuted ? 1 : 0] = iArr7[isDialogMuted ? 1 : 0] + 1;
                } else {
                    int[] iArr8 = messagesStorage3.nonContacts[intValue4];
                    iArr8[isDialogMuted ? 1 : 0] = iArr8[isDialogMuted ? 1 : 0] + 1;
                }
                longSparseArray19.put(tLRPC$User.id, tLRPC$User);
                i37++;
                arrayList6 = arrayList11;
                size2 = i38;
                arrayList8 = arrayList12;
                arrayList9 = arrayList13;
            }
        }
        ArrayList<TLRPC$Chat> arrayList14 = arrayList6;
        ArrayList arrayList15 = arrayList8;
        ArrayList arrayList16 = arrayList9;
        if (!arrayList16.isEmpty()) {
            ArrayList<Long> arrayList17 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList18 = new ArrayList<>();
            messagesStorage3.getEncryptedChatsInternal(TextUtils.join(",", arrayList16), arrayList18, arrayList17);
            if (!arrayList17.isEmpty()) {
                messagesStorage3.getUsersInternal(arrayList17, arrayList5);
                int size3 = arrayList5.size();
                for (int i39 = 0; i39 < size3; i39++) {
                    TLRPC$User tLRPC$User2 = arrayList5.get(i39);
                    longSparseArray21.put(tLRPC$User2.id, tLRPC$User2);
                }
                longSparseArray = longSparseArray21;
                int size4 = arrayList18.size();
                int i40 = 0;
                while (i40 < size4) {
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray.get(arrayList18.get(i40).user_id);
                    if (tLRPC$User3 == null) {
                        longSparseArray14 = longSparseArray19;
                        i31 = size4;
                        arrayList2 = arrayList18;
                    } else {
                        long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id);
                        longSparseArray14 = longSparseArray19;
                        i31 = size4;
                        boolean isDialogMuted2 = getMessagesController().isDialogMuted(makeEncryptedDialogId, 0L);
                        Integer num2 = (Integer) longSparseArray16.get(makeEncryptedDialogId);
                        int intValue5 = (num2 == null || num2.intValue() < 0 || num2.intValue() > 1) ? 0 : num2.intValue();
                        if (isDialogMuted2) {
                            longSparseArray23.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (intValue5 == 1) {
                            longSparseArray24.put(tLRPC$User3.id, Boolean.TRUE);
                        }
                        if (tLRPC$User3.self || tLRPC$User3.contact) {
                            i32 = 1;
                            int[] iArr9 = messagesStorage3.contacts[intValue5];
                            iArr9[isDialogMuted2 ? 1 : 0] = iArr9[isDialogMuted2 ? 1 : 0] + 1;
                        } else {
                            int[] iArr10 = messagesStorage3.nonContacts[intValue5];
                            i32 = 1;
                            iArr10[isDialogMuted2 ? 1 : 0] = iArr10[isDialogMuted2 ? 1 : 0] + 1;
                        }
                        arrayList2 = arrayList18;
                        longSparseArray22.put(tLRPC$User3.id, Integer.valueOf(((Integer) longSparseArray22.get(tLRPC$User3.id, 0)).intValue() + i32));
                    }
                    i40++;
                    arrayList18 = arrayList2;
                    longSparseArray19 = longSparseArray14;
                    size4 = i31;
                }
                LongSparseArray longSparseArray26 = longSparseArray19;
                if (!arrayList15.isEmpty()) {
                    ArrayList<TLRPC$Chat> arrayList19 = arrayList14;
                    messagesStorage3.getChatsInternal(TextUtils.join(",", arrayList15), arrayList19);
                    int size5 = arrayList19.size();
                    int i41 = 0;
                    while (i41 < size5) {
                        TLRPC$Chat tLRPC$Chat = arrayList19.get(i41);
                        if ((tLRPC$Chat.migrated_to instanceof TLRPC$TL_inputChannel) || ChatObject.isNotInChat(tLRPC$Chat)) {
                            i29 = size5;
                            arrayList = arrayList19;
                            longSparseArray12 = longSparseArray18;
                            longSparseArray13 = longSparseArray25;
                        } else {
                            boolean isDialogMuted3 = getMessagesController().isDialogMuted(-tLRPC$Chat.id, 0L, tLRPC$Chat);
                            boolean z2 = messagesStorage3.dialogsWithUnread.indexOfKey(-tLRPC$Chat.id) >= 0;
                            boolean z3 = messagesStorage3.dialogsWithMentions.indexOfKey(-tLRPC$Chat.id) >= 0;
                            Integer num3 = (Integer) longSparseArray16.get(-tLRPC$Chat.id);
                            if (num3 == null || num3.intValue() < 0) {
                                i29 = size5;
                            } else {
                                i29 = size5;
                                if (num3.intValue() <= 1) {
                                    i30 = num3.intValue();
                                    if (isDialogMuted3) {
                                        arrayList = arrayList19;
                                    } else {
                                        arrayList = arrayList19;
                                        longSparseArray23.put(-tLRPC$Chat.id, Boolean.TRUE);
                                    }
                                    if (i30 == 1) {
                                        longSparseArray24.put(-tLRPC$Chat.id, Boolean.TRUE);
                                    }
                                    if (isDialogMuted3 && longSparseIntArray2 != null && longSparseIntArray2.indexOfKey(-tLRPC$Chat.id) >= 0) {
                                        if (!ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                            int[] iArr11 = messagesStorage3.mentionChannels;
                                            iArr11[i30] = iArr11[i30] + 1;
                                        } else {
                                            int[] iArr12 = messagesStorage3.mentionGroups;
                                            iArr12[i30] = iArr12[i30] + 1;
                                        }
                                    }
                                    if (z || z2 || z3) {
                                        if (z) {
                                            longSparseArray12 = longSparseArray18;
                                        } else {
                                            longSparseArray12 = longSparseArray18;
                                        }
                                        longSparseArray13 = longSparseArray25;
                                        longSparseArray13.put(tLRPC$Chat.id, tLRPC$Chat);
                                    } else {
                                        longSparseArray12 = longSparseArray18;
                                    }
                                    if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                                        int[] iArr13 = messagesStorage3.channels[i30];
                                        iArr13[isDialogMuted3 ? 1 : 0] = iArr13[isDialogMuted3 ? 1 : 0] + 1;
                                    } else {
                                        int[] iArr14 = messagesStorage3.groups[i30];
                                        iArr14[isDialogMuted3 ? 1 : 0] = iArr14[isDialogMuted3 ? 1 : 0] + 1;
                                    }
                                    longSparseArray13 = longSparseArray25;
                                    longSparseArray13.put(tLRPC$Chat.id, tLRPC$Chat);
                                }
                            }
                            i30 = 0;
                            if (isDialogMuted3) {
                            }
                            if (i30 == 1) {
                            }
                            if (isDialogMuted3) {
                                if (!ChatObject.isChannel(tLRPC$Chat)) {
                                }
                                int[] iArr122 = messagesStorage3.mentionGroups;
                                iArr122[i30] = iArr122[i30] + 1;
                            }
                            if (z) {
                            }
                            if (z) {
                            }
                            longSparseArray13 = longSparseArray25;
                            longSparseArray13.put(tLRPC$Chat.id, tLRPC$Chat);
                        }
                        i41++;
                        longSparseArray25 = longSparseArray13;
                        longSparseArray18 = longSparseArray12;
                        size5 = i29;
                        arrayList19 = arrayList;
                    }
                }
                LongSparseArray longSparseArray27 = longSparseArray25;
                LongSparseArray longSparseArray28 = longSparseArray18;
                size = messagesStorage3.dialogFilters.size();
                i2 = 0;
                while (i2 < size + 2) {
                    if (i2 < size) {
                        dialogFilter = messagesStorage3.dialogFilters.get(i2);
                        if (dialogFilter.pendingUnreadCount < 0) {
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i15 = size;
                            i16 = i2;
                            longSparseArray5 = longSparseArray;
                            longSparseArray4 = longSparseArray26;
                            i2 = i16 + 1;
                            size = i15;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        } else {
                            i6 = dialogFilter.pendingUnreadCount;
                            i5 = dialogFilter.flags;
                        }
                    } else {
                        int i42 = MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
                        if (i2 == size) {
                            i3 = messagesStorage3.pendingMainUnreadCount;
                            i42 |= MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
                            if (!getNotificationsController().showBadgeMuted) {
                                i4 = MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                            }
                            int i43 = i3;
                            i5 = i42;
                            dialogFilter = null;
                            i6 = i43;
                        } else {
                            i3 = messagesStorage3.pendingArchiveUnreadCount;
                            i4 = MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED;
                        }
                        i42 |= i4;
                        int i432 = i3;
                        i5 = i42;
                        dialogFilter = null;
                        i6 = i432;
                    }
                    if (z) {
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr15 = messagesStorage3.contacts[0];
                                i6 -= iArr15[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c10 = 1;
                                    i6 -= iArr15[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr16 = messagesStorage3.contacts[c10];
                                        i6 -= iArr16[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr16[c10];
                                        }
                                    }
                                }
                            }
                            c10 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr17 = messagesStorage3.nonContacts[0];
                                i6 -= iArr17[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c9 = 1;
                                    i6 -= iArr17[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr18 = messagesStorage3.nonContacts[c9];
                                        i6 -= iArr18[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr18[c9];
                                        }
                                    }
                                }
                            }
                            c9 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c8 = 0;
                                int[] iArr19 = messagesStorage3.groups[0];
                                int i44 = i6 - iArr19[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i28 = iArr19[1];
                                } else {
                                    i28 = messagesStorage3.mentionGroups[0];
                                }
                                i6 = i44 - i28;
                            } else {
                                c8 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr20 = messagesStorage3.groups[1];
                                int i45 = i6 - iArr20[c8];
                                if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                    i27 = iArr20[1];
                                } else {
                                    i27 = messagesStorage3.mentionGroups[1];
                                }
                                i6 = i45 - i27;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c7 = 0;
                                int[] iArr21 = messagesStorage3.channels[0];
                                int i46 = i6 - iArr21[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i26 = iArr21[1];
                                } else {
                                    i26 = messagesStorage3.mentionChannels[0];
                                }
                                i6 = i46 - i26;
                            } else {
                                c7 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr22 = messagesStorage3.channels[1];
                                int i47 = i6 - iArr22[c7];
                                if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                    i25 = iArr22[1];
                                } else {
                                    i25 = messagesStorage3.mentionChannels[1];
                                }
                                i6 = i47 - i25;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr23 = messagesStorage3.bots[0];
                                i6 -= iArr23[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c6 = 1;
                                    i6 -= iArr23[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr24 = messagesStorage3.bots[c6];
                                        i6 -= iArr24[0];
                                        if ((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0) {
                                            i6 -= iArr24[c6];
                                        }
                                    }
                                }
                            }
                            c6 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if (dialogFilter != null) {
                            int size6 = dialogFilter.alwaysShow.size();
                            int i48 = 0;
                            while (i48 < size6) {
                                int i49 = size6;
                                long longValue = dialogFilter.alwaysShow.get(i48).longValue();
                                if (DialogObject.isUserDialog(longValue)) {
                                    i21 = size;
                                    i22 = i2;
                                    int i50 = 0;
                                    while (i50 < 2) {
                                        TLRPC$User tLRPC$User4 = (TLRPC$User) (i50 == 0 ? longSparseArray26 : longSparseArray).get(longValue);
                                        if (tLRPC$User4 != null) {
                                            if (i50 == 0) {
                                                longSparseArray10 = longSparseArray28;
                                                longSparseArray11 = longSparseArray;
                                                intValue2 = 1;
                                            } else {
                                                longSparseArray11 = longSparseArray;
                                                intValue2 = ((Integer) longSparseArray22.get(longValue, 0)).intValue();
                                                longSparseArray10 = longSparseArray28;
                                                if (intValue2 == 0) {
                                                }
                                            }
                                            if (tLRPC$User4.bot) {
                                                i24 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                            } else if (tLRPC$User4.self || tLRPC$User4.contact) {
                                                i24 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                            } else {
                                                i24 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                            }
                                            if ((i24 & i5) == 0 || (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseArray23.indexOfKey(tLRPC$User4.id) >= 0) || ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0 && longSparseArray24.indexOfKey(tLRPC$User4.id) >= 0))) {
                                                i6 -= intValue2;
                                            }
                                        } else {
                                            longSparseArray10 = longSparseArray28;
                                            longSparseArray11 = longSparseArray;
                                        }
                                        i50++;
                                        longSparseArray = longSparseArray11;
                                        longSparseArray28 = longSparseArray10;
                                    }
                                    longSparseArray8 = longSparseArray28;
                                    longSparseArray9 = longSparseArray;
                                } else {
                                    longSparseArray8 = longSparseArray28;
                                    i21 = size;
                                    i22 = i2;
                                    longSparseArray9 = longSparseArray;
                                    TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray27.get(-longValue);
                                    if (tLRPC$Chat2 != null) {
                                        if (ChatObject.isChannel(tLRPC$Chat2) && !tLRPC$Chat2.megagroup) {
                                            i23 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                        } else {
                                            i23 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                        }
                                        if ((i23 & i5) == 0) {
                                            messagesStorage2 = this;
                                        } else {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                messagesStorage2 = this;
                                            } else {
                                                messagesStorage2 = this;
                                            }
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                if (longSparseArray24.indexOfKey(-tLRPC$Chat2.id) < 0) {
                                                }
                                            }
                                            i48++;
                                            size6 = i49;
                                            messagesStorage3 = messagesStorage2;
                                            size = i21;
                                            i2 = i22;
                                            longSparseArray = longSparseArray9;
                                            longSparseArray28 = longSparseArray8;
                                        }
                                        i6--;
                                        i48++;
                                        size6 = i49;
                                        messagesStorage3 = messagesStorage2;
                                        size = i21;
                                        i2 = i22;
                                        longSparseArray = longSparseArray9;
                                        longSparseArray28 = longSparseArray8;
                                    }
                                }
                                messagesStorage2 = this;
                                i48++;
                                size6 = i49;
                                messagesStorage3 = messagesStorage2;
                                size = i21;
                                i2 = i22;
                                longSparseArray = longSparseArray9;
                                longSparseArray28 = longSparseArray8;
                            }
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i7 = size;
                            i8 = i2;
                            longSparseArray3 = longSparseArray;
                            int size7 = dialogFilter.neverShow.size();
                            int i51 = 0;
                            while (i51 < size7) {
                                long longValue2 = dialogFilter.neverShow.get(i51).longValue();
                                if (longSparseIntArray2 == null || longSparseIntArray2.indexOfKey(longValue2) < 0 || longSparseArray23.indexOfKey(longValue2) >= 0) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        int i52 = 0;
                                        int i53 = 2;
                                        while (i52 < i53) {
                                            TLRPC$User tLRPC$User5 = (TLRPC$User) (i52 == 0 ? longSparseArray26 : longSparseArray3).get(longValue2);
                                            if (tLRPC$User5 != null) {
                                                if (i52 == 0) {
                                                    i19 = size7;
                                                    intValue = 1;
                                                } else {
                                                    intValue = ((Integer) longSparseArray22.get(longValue2, 0)).intValue();
                                                    if (intValue != 0) {
                                                        i19 = size7;
                                                    }
                                                }
                                                if (tLRPC$User5.bot) {
                                                    i20 = MessagesController.DIALOG_FILTER_FLAG_BOTS;
                                                } else if (tLRPC$User5.self || tLRPC$User5.contact) {
                                                    i20 = MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
                                                } else {
                                                    i20 = MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
                                                }
                                                if ((i20 & i5) != 0) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) != 0) {
                                                        dialogFilter4 = dialogFilter;
                                                        if (longSparseArray24.indexOfKey(tLRPC$User5.id) >= 0) {
                                                            i52++;
                                                            dialogFilter = dialogFilter4;
                                                            i53 = 2;
                                                            size7 = i19;
                                                        }
                                                    } else {
                                                        dialogFilter4 = dialogFilter;
                                                    }
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(tLRPC$User5.id) < 0) {
                                                        i6 += intValue;
                                                    }
                                                    i52++;
                                                    dialogFilter = dialogFilter4;
                                                    i53 = 2;
                                                    size7 = i19;
                                                }
                                                dialogFilter4 = dialogFilter;
                                                i52++;
                                                dialogFilter = dialogFilter4;
                                                i53 = 2;
                                                size7 = i19;
                                            }
                                            i19 = size7;
                                            dialogFilter4 = dialogFilter;
                                            i52++;
                                            dialogFilter = dialogFilter4;
                                            i53 = 2;
                                            size7 = i19;
                                        }
                                    } else {
                                        i17 = size7;
                                        dialogFilter3 = dialogFilter;
                                        TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray27.get(-longValue2);
                                        if (tLRPC$Chat3 != null) {
                                            if (ChatObject.isChannel(tLRPC$Chat3) && !tLRPC$Chat3.megagroup) {
                                                i18 = MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
                                            } else {
                                                i18 = MessagesController.DIALOG_FILTER_FLAG_GROUPS;
                                            }
                                            if ((i18 & i5) != 0 && (((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0 || longSparseArray24.indexOfKey(-tLRPC$Chat3.id) < 0) && ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-tLRPC$Chat3.id) < 0 || messagesStorage.dialogsWithMentions.indexOfKey(-tLRPC$Chat3.id) >= 0))) {
                                                i6++;
                                            }
                                        }
                                        i51++;
                                        dialogFilter = dialogFilter3;
                                        size7 = i17;
                                    }
                                }
                                i17 = size7;
                                dialogFilter3 = dialogFilter;
                                i51++;
                                dialogFilter = dialogFilter3;
                                size7 = i17;
                            }
                            dialogFilter2 = dialogFilter;
                        } else {
                            messagesStorage = messagesStorage3;
                            longSparseArray2 = longSparseArray28;
                            i7 = size;
                            i8 = i2;
                            dialogFilter2 = dialogFilter;
                            longSparseArray3 = longSparseArray;
                        }
                        int i54 = i6;
                        if (i54 < 0) {
                            longSparseArray4 = longSparseArray26;
                            longSparseArray5 = longSparseArray3;
                            i6 = 0;
                            if (dialogFilter2 != null) {
                                dialogFilter2.pendingUnreadCount = i6;
                                i15 = i7;
                                i16 = i8;
                            } else {
                                i15 = i7;
                                i16 = i8;
                                if (i16 == i15) {
                                    messagesStorage.pendingMainUnreadCount = i6;
                                } else if (i16 == i15 + 1) {
                                    messagesStorage.pendingArchiveUnreadCount = i6;
                                }
                            }
                            i2 = i16 + 1;
                            size = i15;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        } else {
                            i6 = i54;
                        }
                    } else {
                        messagesStorage = messagesStorage3;
                        longSparseArray2 = longSparseArray28;
                        i7 = size;
                        i8 = i2;
                        dialogFilter2 = dialogFilter;
                        longSparseArray3 = longSparseArray;
                        if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr25 = messagesStorage.contacts[0];
                                i6 += iArr25[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c5 = 1;
                                    i6 += iArr25[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr26 = messagesStorage.contacts[c5];
                                        i6 += iArr26[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr26[c5];
                                        }
                                    }
                                }
                            }
                            c5 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr27 = messagesStorage.nonContacts[0];
                                i6 += iArr27[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c4 = 1;
                                    i6 += iArr27[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr28 = messagesStorage.nonContacts[c4];
                                        i6 += iArr28[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr28[c4];
                                        }
                                    }
                                }
                            }
                            c4 = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c3 = 0;
                                int[] iArr29 = messagesStorage.groups[0];
                                int i55 = i6 + iArr29[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i14 = iArr29[1];
                                } else {
                                    i14 = messagesStorage.mentionGroups[0];
                                }
                                i6 = i55 + i14;
                            } else {
                                c3 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr30 = messagesStorage.groups[1];
                                int i56 = i6 + iArr30[c3];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i13 = iArr30[1];
                                } else {
                                    i13 = messagesStorage.mentionGroups[1];
                                }
                                i6 = i56 + i13;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                c2 = 0;
                                int[] iArr31 = messagesStorage.channels[0];
                                int i57 = i6 + iArr31[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i12 = iArr31[1];
                                } else {
                                    i12 = messagesStorage.mentionChannels[0];
                                }
                                i6 = i57 + i12;
                            } else {
                                c2 = 0;
                            }
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                int[] iArr32 = messagesStorage.channels[1];
                                int i58 = i6 + iArr32[c2];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    i11 = iArr32[1];
                                } else {
                                    i11 = messagesStorage.mentionChannels[1];
                                }
                                i6 = i58 + i11;
                            }
                        }
                        if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                            if ((MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED & i5) == 0) {
                                int[] iArr33 = messagesStorage.bots[0];
                                i6 += iArr33[0];
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                    c = 1;
                                    i6 += iArr33[1];
                                    if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                                        int[] iArr34 = messagesStorage.bots[c];
                                        i6 += iArr34[0];
                                        if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0) {
                                            i6 += iArr34[c];
                                        }
                                    }
                                }
                            }
                            c = 1;
                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED & i5) == 0) {
                            }
                        }
                        if (dialogFilter2 != null) {
                            if (!dialogFilter2.alwaysShow.isEmpty()) {
                                if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) != 0 && longSparseIntArray2 != null) {
                                    int size8 = longSparseIntArray2.size();
                                    while (i10 < size8) {
                                        long keyAt2 = longSparseIntArray2.keyAt(i10);
                                        TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray27.get(-keyAt2);
                                        if (ChatObject.isChannel(tLRPC$Chat4) && !tLRPC$Chat4.megagroup) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) == 0) {
                                            }
                                            if (longSparseArray23.indexOfKey(keyAt2) >= 0) {
                                                i6--;
                                            }
                                        } else {
                                            i10 = (MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) == 0 ? i10 + 1 : 0;
                                            if (longSparseArray23.indexOfKey(keyAt2) >= 0 && dialogFilter2.alwaysShow.contains(Long.valueOf(keyAt2))) {
                                                i6--;
                                            }
                                        }
                                    }
                                }
                                int size9 = dialogFilter2.alwaysShow.size();
                                int i59 = 0;
                                while (i59 < size9) {
                                    long longValue3 = dialogFilter2.alwaysShow.get(i59).longValue();
                                    LongSparseArray longSparseArray29 = longSparseArray2;
                                    if (longSparseArray29.indexOfKey(longValue3) < 0) {
                                        i9 = size9;
                                        longSparseArray2 = longSparseArray29;
                                        longSparseArray6 = longSparseArray26;
                                        longSparseArray7 = longSparseArray3;
                                    } else if (DialogObject.isUserDialog(longValue3)) {
                                        longSparseArray6 = longSparseArray26;
                                        TLRPC$User tLRPC$User6 = (TLRPC$User) longSparseArray6.get(longValue3);
                                        if (tLRPC$User6 != null) {
                                            i9 = size9;
                                            if (((i5 & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && longSparseArray23.indexOfKey(tLRPC$User6.id) >= 0) || (!tLRPC$User6.bot ? !(tLRPC$User6.self || tLRPC$User6.contact ? (MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0 : (MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) : (MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) == 0)) {
                                                i6++;
                                            }
                                        } else {
                                            i9 = size9;
                                        }
                                        longSparseArray7 = longSparseArray3;
                                        TLRPC$User tLRPC$User7 = (TLRPC$User) longSparseArray7.get(longValue3);
                                        longSparseArray2 = longSparseArray29;
                                        if (tLRPC$User7 != null) {
                                            int intValue6 = ((Integer) longSparseArray22.get(longValue3, 0)).intValue();
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(tLRPC$User7.id) < 0) {
                                                if (tLRPC$User7.bot) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_BOTS & i5) != 0) {
                                                    }
                                                } else if (tLRPC$User7.self || tLRPC$User7.contact) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_CONTACTS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS & i5) != 0) {
                                                }
                                            }
                                            i6 += intValue6;
                                        }
                                    } else {
                                        i9 = size9;
                                        longSparseArray2 = longSparseArray29;
                                        longSparseArray6 = longSparseArray26;
                                        longSparseArray7 = longSparseArray3;
                                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray27.get(-longValue3);
                                        if (tLRPC$Chat5 != null) {
                                            if ((MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i5) == 0 || longSparseArray23.indexOfKey(-tLRPC$Chat5.id) < 0) {
                                                if (ChatObject.isChannel(tLRPC$Chat5) && !tLRPC$Chat5.megagroup) {
                                                    if ((MessagesController.DIALOG_FILTER_FLAG_CHANNELS & i5) != 0) {
                                                    }
                                                } else if ((MessagesController.DIALOG_FILTER_FLAG_GROUPS & i5) != 0) {
                                                }
                                            }
                                            i6++;
                                        }
                                    }
                                    i59++;
                                    size9 = i9;
                                    longSparseArray3 = longSparseArray7;
                                    longSparseArray26 = longSparseArray6;
                                }
                            }
                            longSparseArray4 = longSparseArray26;
                            longSparseArray5 = longSparseArray3;
                            int size10 = dialogFilter2.neverShow.size();
                            for (int i60 = 0; i60 < size10; i60++) {
                                long longValue4 = dialogFilter2.neverShow.get(i60).longValue();
                                if (DialogObject.isUserDialog(longValue4)) {
                                    if (((TLRPC$User) longSparseArray4.get(longValue4)) != null) {
                                        i6--;
                                    }
                                    if (((TLRPC$User) longSparseArray5.get(longValue4)) != null) {
                                        i6 -= ((Integer) longSparseArray22.get(longValue4, 0)).intValue();
                                    }
                                } else if (((TLRPC$Chat) longSparseArray27.get(-longValue4)) != null) {
                                    i6--;
                                }
                            }
                            if (dialogFilter2 != null) {
                            }
                            i2 = i16 + 1;
                            size = i15;
                            messagesStorage3 = messagesStorage;
                            longSparseArray26 = longSparseArray4;
                            longSparseArray = longSparseArray5;
                            longSparseArray28 = longSparseArray2;
                        }
                    }
                    longSparseArray4 = longSparseArray26;
                    longSparseArray5 = longSparseArray3;
                    if (dialogFilter2 != null) {
                    }
                    i2 = i16 + 1;
                    size = i15;
                    messagesStorage3 = messagesStorage;
                    longSparseArray26 = longSparseArray4;
                    longSparseArray = longSparseArray5;
                    longSparseArray28 = longSparseArray2;
                }
                final MessagesStorage messagesStorage4 = messagesStorage3;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateFiltersReadCounter$113();
                    }
                });
            }
        }
        longSparseArray = longSparseArray21;
        LongSparseArray longSparseArray262 = longSparseArray19;
        if (!arrayList15.isEmpty()) {
        }
        LongSparseArray longSparseArray272 = longSparseArray25;
        LongSparseArray longSparseArray282 = longSparseArray18;
        size = messagesStorage3.dialogFilters.size();
        i2 = 0;
        while (i2 < size + 2) {
        }
        final MessagesStorage messagesStorage42 = messagesStorage3;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateFiltersReadCounter$113();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateFiltersReadCounter$113() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX WARN: Removed duplicated region for block: B:134:0x0393 A[Catch: Exception -> 0x005e, TRY_LEAVE, TryCatch #0 {Exception -> 0x005e, blocks: (B:3:0x000b, B:7:0x0024, B:8:0x003c, B:10:0x0042, B:13:0x0049, B:16:0x0050, B:18:0x005a, B:21:0x0061, B:22:0x0066, B:94:0x02a8, B:96:0x02ae, B:132:0x0383, B:134:0x0393, B:100:0x02b8, B:102:0x02c3, B:103:0x02d1, B:105:0x02d7, B:107:0x02e1, B:115:0x031a, B:117:0x0332, B:108:0x02e7, B:110:0x030b, B:112:0x0311, B:114:0x0316, B:116:0x031d, B:118:0x0334, B:120:0x033d, B:122:0x0343, B:123:0x034c, B:125:0x0352, B:127:0x035c, B:129:0x0377, B:128:0x0364, B:130:0x0379, B:131:0x037c, B:23:0x006b, B:26:0x0072, B:28:0x0078, B:33:0x008d, B:35:0x0094, B:57:0x0160, B:38:0x00b1, B:39:0x00d3, B:42:0x00db, B:45:0x00e2, B:47:0x0109, B:49:0x0114, B:53:0x0144, B:50:0x012c, B:52:0x0130, B:54:0x0148, B:56:0x014c, B:31:0x0085, B:58:0x01a0, B:60:0x01a6, B:62:0x01ad, B:63:0x01d6, B:65:0x01dc, B:67:0x01f4, B:69:0x01fa, B:71:0x0201, B:73:0x0208, B:75:0x0228, B:77:0x022f, B:78:0x023d, B:79:0x0247, B:80:0x024e, B:84:0x025d, B:86:0x0267, B:87:0x026e, B:88:0x0272, B:91:0x0279, B:93:0x027f), top: B:138:0x000b }] */
    /* JADX WARN: Removed duplicated region for block: B:177:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateDialogsWithReadMessagesInternal(ArrayList<Integer> arrayList, LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseIntArray longSparseIntArray3) {
        boolean z;
        int i;
        int i2;
        int i3;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray;
        LongSparseIntArray longSparseIntArray5 = longSparseIntArray3;
        int i4 = 2;
        try {
            LongSparseIntArray longSparseIntArray6 = new LongSparseIntArray();
            LongSparseIntArray longSparseIntArray7 = new LongSparseIntArray();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            if (!isEmpty(arrayList)) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized.next()) {
                    if (queryFinalized.intValue(2) == 0 && queryFinalized.intValue(1) == 0) {
                        long longValue = queryFinalized.longValue(0);
                        int i5 = longSparseIntArray6.get(longValue);
                        if (i5 == 0) {
                            longSparseIntArray6.put(longValue, 1);
                        } else {
                            longSparseIntArray6.put(longValue, i5 + 1);
                        }
                    }
                }
                queryFinalized.dispose();
            } else {
                if (!isEmpty(longSparseIntArray)) {
                    int i6 = 0;
                    while (i6 < longSparseIntArray.size()) {
                        long keyAt = longSparseIntArray4.keyAt(i6);
                        int i7 = longSparseIntArray4.get(keyAt);
                        int i8 = longSparseIntArray5 == null ? -2 : longSparseIntArray5.get(keyAt, -2);
                        if (i8 >= 0) {
                            longSparseIntArray6.put(keyAt, i8);
                            if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " update unread messages count by still unread " + i8);
                            }
                        } else {
                            if (longSparseIntArray5 == null || i8 == -2) {
                                z = true;
                            } else {
                                SQLiteDatabase sQLiteDatabase = this.database;
                                Locale locale = Locale.US;
                                Long valueOf = Long.valueOf(keyAt);
                                Integer valueOf2 = Integer.valueOf(i7);
                                Object[] objArr = new Object[i4];
                                objArr[0] = valueOf;
                                objArr[1] = valueOf2;
                                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM messages_holes WHERE uid = %d AND end > %d", objArr), new Object[0]);
                                z = true;
                                while (queryFinalized2.next()) {
                                    z = false;
                                }
                                queryFinalized2.dispose();
                            }
                            if (z) {
                                SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i7)), new Object[0]);
                                if (queryFinalized3.next()) {
                                    int intValue = queryFinalized3.intValue(0);
                                    longSparseIntArray6.put(keyAt, intValue);
                                    if (BuildVars.DEBUG_VERSION) {
                                        FileLog.d(keyAt + " update unread messages count " + intValue);
                                    }
                                } else if (BuildVars.DEBUG_VERSION) {
                                    FileLog.d(keyAt + " can't update unread messages count cursor trouble");
                                }
                                queryFinalized3.dispose();
                            } else if (BuildVars.DEBUG_VERSION) {
                                FileLog.d(keyAt + " can't update unread messages count");
                            }
                        }
                        FileLog.d(keyAt + " set inbox max " + i7);
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i7);
                        executeFast.bindLong(3, keyAt);
                        executeFast.step();
                        executeFast.dispose();
                        i6++;
                        longSparseIntArray4 = longSparseIntArray;
                        longSparseIntArray5 = longSparseIntArray3;
                        i4 = 2;
                    }
                }
                if (!isEmpty(longSparseArray)) {
                    int size = longSparseArray.size();
                    for (int i9 = 0; i9 < size; i9++) {
                        ArrayList<Integer> valueAt = longSparseArray.valueAt(i9);
                        ArrayList arrayList3 = new ArrayList(valueAt);
                        int i10 = 0;
                        SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out, mention, mid, is_channel FROM messages_v2 WHERE mid IN(%s)", TextUtils.join(",", valueAt)), new Object[0]);
                        long j = 0;
                        while (queryFinalized4.next()) {
                            long longValue2 = queryFinalized4.longValue(i10);
                            arrayList3.remove(Integer.valueOf(queryFinalized4.intValue(4)));
                            if (queryFinalized4.intValue(1) < 2 && queryFinalized4.intValue(2) == 0 && queryFinalized4.intValue(3) == 1) {
                                int i11 = longSparseIntArray7.get(longValue2, -1);
                                if (i11 < 0) {
                                    SQLiteCursor queryFinalized5 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + longValue2, new Object[0]);
                                    int intValue2 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                    queryFinalized5.dispose();
                                    longSparseIntArray7.put(longValue2, Math.max(0, intValue2 - 1));
                                } else {
                                    longSparseIntArray7.put(longValue2, Math.max(0, i11 - 1));
                                }
                            }
                            j = queryFinalized4.longValue(5);
                            i10 = 0;
                        }
                        queryFinalized4.dispose();
                        if (!arrayList3.isEmpty() && j != 0 && !arrayList2.contains(Long.valueOf(j))) {
                            arrayList2.add(Long.valueOf(j));
                        }
                    }
                }
                if (!isEmpty(longSparseIntArray2)) {
                    for (int i12 = 0; i12 < longSparseIntArray2.size(); i12++) {
                        long keyAt2 = longSparseIntArray2.keyAt(i12);
                        int i13 = longSparseIntArray2.get(keyAt2);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        executeFast2.requery();
                        executeFast2.bindLong(1, keyAt2);
                        executeFast2.bindInteger(2, i13);
                        executeFast2.bindLong(3, keyAt2);
                        executeFast2.step();
                        executeFast2.dispose();
                    }
                }
            }
            if (longSparseIntArray6.size() <= 0) {
                if (longSparseIntArray7.size() > 0) {
                }
                updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
                if (arrayList2.isEmpty()) {
                    getMessagesController().reloadMentionsCountForChannels(arrayList2);
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            if (longSparseIntArray6.size() > 0) {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
                int i14 = 0;
                while (i14 < longSparseIntArray6.size()) {
                    long keyAt3 = longSparseIntArray6.keyAt(i14);
                    if (isForum(keyAt3)) {
                        longSparseIntArray6.removeAt(i14);
                        i3 = -1;
                    } else {
                        int valueAt2 = longSparseIntArray6.valueAt(i14);
                        SQLiteCursor queryFinalized6 = this.database.queryFinalized("SELECT unread_count FROM dialogs WHERE did = " + keyAt3, new Object[0]);
                        int intValue3 = queryFinalized6.next() ? queryFinalized6.intValue(0) : 0;
                        queryFinalized6.dispose();
                        if (intValue3 == valueAt2) {
                            longSparseIntArray6.removeAt(i14);
                            i3 = -1;
                        } else {
                            executeFast3.requery();
                            i2 = 1;
                            executeFast3.bindInteger(1, valueAt2);
                            executeFast3.bindLong(2, keyAt3);
                            executeFast3.step();
                            arrayList4.add(Long.valueOf(keyAt3));
                            i14 += i2;
                        }
                    }
                    i14 += i3;
                    i2 = 1;
                    i14 += i2;
                }
                executeFast3.dispose();
                updateWidgets(arrayList4);
            }
            if (longSparseIntArray7.size() > 0) {
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count_i = ? WHERE did = ?");
                int i15 = 0;
                while (i15 < longSparseIntArray7.size()) {
                    long keyAt4 = longSparseIntArray7.keyAt(i15);
                    if (isForum(keyAt4)) {
                        longSparseIntArray7.removeAt(i15);
                        i15--;
                        i = 1;
                    } else {
                        executeFast4.requery();
                        i = 1;
                        executeFast4.bindInteger(1, longSparseIntArray7.valueAt(i15));
                        executeFast4.bindLong(2, keyAt4);
                        executeFast4.step();
                    }
                    i15 += i;
                }
                executeFast4.dispose();
            }
            this.database.commitTransaction();
            updateFiltersReadCounter(longSparseIntArray6, longSparseIntArray7, true);
            getMessagesController().processDialogsUpdateRead(longSparseIntArray6, longSparseIntArray7);
            if (arrayList2.isEmpty()) {
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseIntArray longSparseIntArray) {
        return longSparseIntArray == null || longSparseIntArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray<?> longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    public void updateDialogsWithReadMessages(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseIntArray longSparseIntArray3, boolean z) {
        if (isEmpty(longSparseIntArray) && isEmpty(longSparseIntArray2) && isEmpty(longSparseArray) && isEmpty(longSparseIntArray3)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda167
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithReadMessages$114(longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
                }
            });
        } else {
            updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogsWithReadMessages$114(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray, LongSparseIntArray longSparseIntArray3) {
        updateDialogsWithReadMessagesInternal(null, longSparseIntArray, longSparseIntArray2, longSparseArray, longSparseIntArray3);
    }

    public void updateChatParticipants(final TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        if (tLRPC$ChatParticipants == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda186
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatParticipants$116(tLRPC$ChatParticipants);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$116(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatParticipants.chat_id, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                tLRPC$ChatFull.participants = tLRPC$ChatParticipants;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda176
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatParticipants$115(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.bindInteger(7, tLRPC$ChatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$115(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void loadChannelAdmins(final long j) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda5
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChannelAdmins$117(j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$117(long j) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid, data FROM channel_admins_v3 WHERE did = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = new LongSparseArray<>();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$ChannelParticipant TLdeserialize = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        longSparseArray.put(queryFinalized.longValue(0), TLdeserialize);
                    }
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(longSparseArray, j, true);
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void putChannelAdmins(final long j, final LongSparseArray<TLRPC$ChannelParticipant> longSparseArray) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda61
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelAdmins$118(j, longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelAdmins$118(long j, LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM channel_admins_v3 WHERE did = " + j).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v3 VALUES(?, ?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    try {
                        executeFast.requery();
                        executeFast.bindLong(1, j);
                        executeFast.bindLong(2, longSparseArray.keyAt(i));
                        TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) longSparseArray.valueAt(i);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                        tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        if (sQLiteDatabase3 != null) {
                            sQLiteDatabase3.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateChannelUsers(final long j, final ArrayList<TLRPC$ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChannelUsers$119(j, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUsers$119(long j, ArrayList arrayList) {
        SQLitePreparedStatement executeFast;
        long j2 = -j;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
                this.database.beginTransaction();
                executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindLong(2, MessageObject.getPeerId(tLRPC$ChannelParticipant.peer));
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(j, true, null, false, true);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveBotCache(final String str, final TLObject tLObject) {
        if (tLObject == null || TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda84
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveBotCache$120(tLObject, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveBotCache$120(TLObject tLObject, String str) {
        int currentTime;
        int i;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                currentTime = getConnectionsManager().getCurrentTime();
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            if (tLObject instanceof TLRPC$TL_messages_botCallbackAnswer) {
                i = ((TLRPC$TL_messages_botCallbackAnswer) tLObject).cache_time;
            } else {
                if (tLObject instanceof TLRPC$TL_messages_botResults) {
                    i = ((TLRPC$TL_messages_botResults) tLObject).cache_time;
                }
                executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                return;
            }
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast.bindString(1, str);
            executeFast.bindInteger(2, currentTime);
            executeFast.bindByteBuffer(3, nativeByteBuffer2);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer2.reuse();
            return;
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
                return;
            }
            return;
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        currentTime += i;
        executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
    }

    public void getBotCache(final String str, final RequestDelegate requestDelegate) {
        if (str == null || requestDelegate == null) {
            return;
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda231
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getBotCache$121(currentTime, str, requestDelegate);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0081  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x008a  */
    /* JADX WARN: Removed duplicated region for block: B:66:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r6v13 */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v5, types: [org.telegram.SQLite.SQLiteCursor] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getBotCache$121(int i, String str, RequestDelegate requestDelegate) {
        NativeByteBuffer byteBufferValue;
        TLObject tLObject = null;
        try {
            try {
                this.database.executeFast("DELETE FROM botcache WHERE date < " + i).stepThis().dispose();
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            i = this.database.queryFinalized("SELECT data FROM botcache WHERE id = ?", str);
            try {
                try {
                    if (i.next()) {
                        try {
                            byteBufferValue = i.byteBufferValue(0);
                        } catch (Exception e2) {
                            e = e2;
                            tLObject = null;
                        }
                        if (byteBufferValue != null) {
                            int readInt32 = byteBufferValue.readInt32(false);
                            if (readInt32 == 911761060) {
                                tLObject = TLRPC$TL_messages_botCallbackAnswer.TLdeserialize(byteBufferValue, readInt32, false);
                            } else {
                                tLObject = TLRPC$messages_BotResults.TLdeserialize(byteBufferValue, readInt32, false);
                            }
                            try {
                                byteBufferValue.reuse();
                            } catch (Exception e3) {
                                e = e3;
                                try {
                                    checkSQLException(e);
                                    i.dispose();
                                    requestDelegate.run(tLObject, null);
                                } catch (Exception e4) {
                                    e = e4;
                                    i = i;
                                    checkSQLException(e);
                                    requestDelegate.run(tLObject, null);
                                    if (i == 0) {
                                        i.dispose();
                                        return;
                                    }
                                    return;
                                }
                            }
                            i.dispose();
                            requestDelegate.run(tLObject, null);
                        }
                    }
                    tLObject = null;
                    i.dispose();
                    requestDelegate.run(tLObject, null);
                } catch (Throwable th3) {
                    th = th3;
                    tLObject = null;
                    requestDelegate.run(tLObject, null);
                    if (i != 0) {
                        i.dispose();
                    }
                    throw th;
                }
            } catch (Exception e5) {
                e = e5;
                tLObject = null;
                i = i;
            }
        } catch (Exception e6) {
            e = e6;
            i = 0;
            tLObject = null;
            checkSQLException(e);
            requestDelegate.run(tLObject, null);
            if (i == 0) {
            }
        } catch (Throwable th4) {
            th = th4;
            i = 0;
            tLObject = null;
            requestDelegate.run(tLObject, null);
            if (i != 0) {
            }
            throw th;
        }
    }

    public ArrayList<TLRPC$UserFull> loadUserInfos(HashSet<Long> hashSet) {
        ArrayList<TLRPC$UserFull> arrayList = new ArrayList<>();
        try {
            String join = TextUtils.join(",", hashSet);
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid IN(" + join + ")", new Object[0]);
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$UserFull TLdeserialize = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    TLdeserialize.pinned_msg_id = queryFinalized.intValue(1);
                    arrayList.add(TLdeserialize);
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return arrayList;
    }

    public void loadUserInfo(final TLRPC$User tLRPC$User, final boolean z, final int i, int i2) {
        if (tLRPC$User == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda195
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadUserInfo$123(tLRPC$User, z, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:117:0x00e5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:122:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0142 A[Catch: all -> 0x00fe, Exception -> 0x0107, LOOP:1: B:66:0x0140->B:67:0x0142, LOOP_END, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:47:0x00e5, B:49:0x00e9, B:51:0x00ef, B:60:0x0110, B:61:0x0125, B:63:0x012b, B:65:0x013c, B:67:0x0142, B:68:0x0155, B:70:0x015c, B:72:0x0162, B:74:0x016a, B:75:0x0171, B:77:0x0177), top: B:117:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x016a A[Catch: all -> 0x00fe, Exception -> 0x0107, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:47:0x00e5, B:49:0x00e9, B:51:0x00ef, B:60:0x0110, B:61:0x0125, B:63:0x012b, B:65:0x013c, B:67:0x0142, B:68:0x0155, B:70:0x015c, B:72:0x0162, B:74:0x016a, B:75:0x0171, B:77:0x0177), top: B:117:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0177 A[Catch: all -> 0x00fe, Exception -> 0x0107, TRY_LEAVE, TryCatch #9 {Exception -> 0x0107, all -> 0x00fe, blocks: (B:47:0x00e5, B:49:0x00e9, B:51:0x00ef, B:60:0x0110, B:61:0x0125, B:63:0x012b, B:65:0x013c, B:67:0x0142, B:68:0x0155, B:70:0x015c, B:72:0x0162, B:74:0x016a, B:75:0x0171, B:77:0x0177), top: B:117:0x00e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01e1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadUserInfo$123(TLRPC$User tLRPC$User, boolean z, int i) {
        SQLiteCursor sQLiteCursor;
        int i2;
        boolean z2;
        TLRPC$UserFull tLRPC$UserFull;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        int i3;
        boolean z3;
        ArrayList arrayList;
        long j;
        ArrayList<MessageObject> loadPinnedMessages;
        int size;
        NativeByteBuffer byteBufferValue;
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList2 = new ArrayList<>();
        TLRPC$UserFull tLRPC$UserFull2 = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + tLRPC$User.id, new Object[0]);
            try {
                if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                    tLRPC$UserFull = null;
                } else {
                    tLRPC$UserFull = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    try {
                        tLRPC$UserFull.pinned_msg_id = queryFinalized.intValue(1);
                        byteBufferValue.reuse();
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = sQLiteCursor3;
                        tLRPC$UserFull2 = tLRPC$UserFull;
                        i2 = 0;
                        z2 = false;
                        try {
                            checkSQLException(e);
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = sQLiteCursor2;
                        tLRPC$UserFull2 = tLRPC$UserFull;
                        i2 = 0;
                        z2 = false;
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                try {
                    SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(tLRPC$User.id)), new Object[0]);
                    while (queryFinalized2.next()) {
                        int intValue = queryFinalized2.intValue(0);
                        arrayList2.add(Integer.valueOf(intValue));
                        hashMap.put(Integer.valueOf(intValue), null);
                    }
                    queryFinalized2.dispose();
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + tLRPC$User.id, new Object[0]);
                    try {
                        if (queryFinalized3.next()) {
                            int intValue2 = queryFinalized3.intValue(0);
                            try {
                                i3 = intValue2;
                                if (queryFinalized3.intValue(1) != 0) {
                                    z3 = true;
                                    queryFinalized3.dispose();
                                    if (tLRPC$UserFull != null) {
                                        try {
                                            if (tLRPC$UserFull.pinned_msg_id != 0) {
                                                if (!arrayList2.isEmpty()) {
                                                    if (tLRPC$UserFull.pinned_msg_id > arrayList2.get(0).intValue()) {
                                                    }
                                                }
                                                arrayList2.clear();
                                                arrayList2.add(Integer.valueOf(tLRPC$UserFull.pinned_msg_id));
                                                hashMap.put(Integer.valueOf(tLRPC$UserFull.pinned_msg_id), null);
                                            }
                                        } catch (Exception e2) {
                                            e = e2;
                                            sQLiteCursor = null;
                                            tLRPC$UserFull2 = tLRPC$UserFull;
                                            i2 = i3;
                                            z2 = z3;
                                            checkSQLException(e);
                                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                            if (sQLiteCursor == null) {
                                            }
                                        } catch (Throwable th3) {
                                            th = th3;
                                            sQLiteCursor = null;
                                            tLRPC$UserFull2 = tLRPC$UserFull;
                                            i2 = i3;
                                            z2 = z3;
                                            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                            if (sQLiteCursor != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    if (!arrayList2.isEmpty() && (loadPinnedMessages = getMediaDataController().loadPinnedMessages(tLRPC$User.id, 0L, arrayList2, false)) != null) {
                                        size = loadPinnedMessages.size();
                                        for (int i4 = 0; i4 < size; i4++) {
                                            MessageObject messageObject = loadPinnedMessages.get(i4);
                                            hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                        }
                                    }
                                    arrayList = new ArrayList();
                                    if (tLRPC$UserFull != null && (tLRPC$UserFull.flags2 & 64) != 0) {
                                        j = tLRPC$UserFull.personal_channel_id;
                                        if (j != 0) {
                                            arrayList.add(Long.valueOf(j));
                                        }
                                    }
                                    if (!arrayList.isEmpty()) {
                                        final ArrayList<TLRPC$Chat> arrayList3 = new ArrayList<>();
                                        getChatsInternal(TextUtils.join(",", arrayList), arrayList3);
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda54
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                MessagesStorage.this.lambda$loadUserInfo$122(arrayList3);
                                            }
                                        });
                                    }
                                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList2, hashMap, i3, z3);
                                    return;
                                }
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor = queryFinalized3;
                                i2 = intValue2;
                                tLRPC$UserFull2 = tLRPC$UserFull;
                                z2 = false;
                                checkSQLException(e);
                                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor = queryFinalized3;
                                i2 = intValue2;
                                tLRPC$UserFull2 = tLRPC$UserFull;
                                z2 = false;
                                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } else {
                            i3 = 0;
                        }
                        queryFinalized3.dispose();
                        if (tLRPC$UserFull != null) {
                        }
                        if (!arrayList2.isEmpty()) {
                            size = loadPinnedMessages.size();
                            while (i4 < size) {
                            }
                        }
                        arrayList = new ArrayList();
                        if (tLRPC$UserFull != null) {
                            j = tLRPC$UserFull.personal_channel_id;
                            if (j != 0) {
                            }
                        }
                        if (!arrayList.isEmpty()) {
                        }
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList2, hashMap, i3, z3);
                        return;
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor = queryFinalized3;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor = queryFinalized3;
                    }
                    z3 = false;
                } catch (Exception e5) {
                    e = e5;
                    sQLiteCursor = null;
                    tLRPC$UserFull2 = tLRPC$UserFull;
                    i2 = 0;
                    z2 = false;
                    checkSQLException(e);
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                    }
                } catch (Throwable th6) {
                    th = th6;
                    sQLiteCursor = null;
                    tLRPC$UserFull2 = tLRPC$UserFull;
                    i2 = 0;
                    z2 = false;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull2, true, z, i, arrayList2, hashMap, i2, z2);
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e6) {
                e = e6;
                sQLiteCursor = queryFinalized;
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = queryFinalized;
            }
        } catch (Exception e7) {
            e = e7;
            sQLiteCursor = null;
        } catch (Throwable th8) {
            th = th8;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUserInfo$122(ArrayList arrayList) {
        getMessagesController().putChats(arrayList, true);
    }

    public void updateUserInfo(final TLRPC$UserFull tLRPC$UserFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda0
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfo$124(tLRPC$UserFull, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:67:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r11v12 */
    /* JADX WARN: Type inference failed for: r11v4 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUserInfo$124(TLRPC$UserFull tLRPC$UserFull, boolean z) {
        SQLiteCursor queryFinalized;
        TLRPC$User tLRPC$User = tLRPC$UserFull.user;
        long j = tLRPC$User != null ? tLRPC$User.id : tLRPC$UserFull.id;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z != 0) {
                try {
                    try {
                        queryFinalized = this.database.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + j, new Object[0]);
                    } catch (Throwable th) {
                        th = th;
                        z = 0;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (z != 0) {
                            z.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e) {
                    e = e;
                    queryFinalized = null;
                }
                try {
                    boolean next = queryFinalized.next();
                    queryFinalized.dispose();
                    if (!next) {
                        return;
                    }
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    if (queryFinalized == null) {
                    }
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
                tLRPC$UserFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
                executeFast.step();
                executeFast.dispose();
                try {
                    try {
                        nativeByteBuffer.reuse();
                        if ((tLRPC$UserFull.flags & 2048) != 0) {
                            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                            executeFast2.bindInteger(1, tLRPC$UserFull.folder_id);
                            executeFast2.bindLong(2, j);
                            executeFast2.step();
                            executeFast2.dispose();
                            this.unknownDialogsIds.remove(j);
                        }
                        if ((tLRPC$UserFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM) != 0) {
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                            executeFast3.bindInteger(1, tLRPC$UserFull.ttl_period);
                            executeFast3.bindLong(2, j);
                            executeFast3.step();
                            executeFast3.dispose();
                        }
                    } catch (Exception e3) {
                        e = e3;
                        sQLitePreparedStatement = null;
                        queryFinalized = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (queryFinalized == null) {
                            queryFinalized.dispose();
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = null;
                    z = 0;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (z != 0) {
                    }
                    throw th;
                }
            } catch (Exception e4) {
                e = e4;
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void updateUserInfoPremiumBlocked(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda238
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUserInfoPremiumBlocked$125(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateUserInfoPremiumBlocked$125(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        TLRPC$UserFull tLRPC$UserFull;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT uid, info, pinned FROM user_settings WHERE uid = " + j, new Object[0]);
            try {
                try {
                    boolean next = sQLiteCursor.next();
                    if (next) {
                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                        tLRPC$UserFull = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (tLRPC$UserFull != null) {
                            tLRPC$UserFull.pinned_msg_id = sQLiteCursor.intValue(2);
                        }
                        byteBufferValue.reuse();
                    } else {
                        tLRPC$UserFull = null;
                    }
                    sQLiteCursor.dispose();
                    if (next && tLRPC$UserFull != null && tLRPC$UserFull.contact_require_premium != z) {
                        tLRPC$UserFull.contact_require_premium = z;
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
                        try {
                            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
                            tLRPC$UserFull.serializeToStream(nativeByteBuffer);
                            executeFast.bindLong(1, j);
                            executeFast.bindByteBuffer(2, nativeByteBuffer);
                            executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
                            executeFast.step();
                            executeFast.dispose();
                            nativeByteBuffer.reuse();
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = executeFast;
                            checkSQLException(e);
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = null;
                            sQLitePreparedStatement = executeFast;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = null;
        }
    }

    public void saveChatInviter(final long j, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda105
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatInviter$126(j2, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatInviter$126(long j, long j2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET inviter = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindLong(2, j2);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void saveChatLinksCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$saveChatLinksCount$127(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatLinksCount$127(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET links = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateChatInfo(final TLRPC$ChatFull tLRPC$ChatFull, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda215
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$128(tLRPC$ChatFull, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:107:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x0176  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x017b  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0184  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0189  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatInfo$128(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        int i;
        int i2;
        SQLiteCursor sQLiteCursor2 = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT online, inviter, links FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatFull.id, new Object[0]);
        } catch (Exception e) {
            e = e;
            sQLiteCursor = null;
        } catch (Throwable th) {
            th = th;
            sQLiteCursor = null;
        }
        try {
            if (sQLiteCursor.next()) {
                i = sQLiteCursor.intValue(0);
                tLRPC$ChatFull.inviterId = sQLiteCursor.longValue(1);
                i2 = sQLiteCursor.intValue(2);
            } else {
                i = -1;
                i2 = 0;
            }
            sQLiteCursor.dispose();
            if (z && i == -1) {
                return;
            }
            if (i >= 0) {
                try {
                    if ((tLRPC$ChatFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM) == 0) {
                        tLRPC$ChatFull.online_count = i;
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = null;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor2 != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
            if (i2 >= 0) {
                tLRPC$ChatFull.invitesCount = i2;
            }
            sQLitePreparedStatement = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
            try {
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindLong(1, tLRPC$ChatFull.id);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                sQLitePreparedStatement.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                sQLitePreparedStatement.bindInteger(4, tLRPC$ChatFull.online_count);
                sQLitePreparedStatement.bindLong(5, tLRPC$ChatFull.inviterId);
                sQLitePreparedStatement.bindInteger(6, tLRPC$ChatFull.invitesCount);
                sQLitePreparedStatement.bindInteger(7, tLRPC$ChatFull.participants_count);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
                nativeByteBuffer.reuse();
                if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-tLRPC$ChatFull.id), new Object[0]);
                    try {
                        if (!queryFinalized.next() || queryFinalized.intValue(0) >= tLRPC$ChatFull.read_inbox_max_id) {
                            sQLitePreparedStatement2 = null;
                        } else {
                            int intValue = queryFinalized.intValue(1);
                            sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                            try {
                                sQLitePreparedStatement2.bindInteger(1, tLRPC$ChatFull.unread_count);
                                sQLitePreparedStatement2.bindInteger(2, tLRPC$ChatFull.read_inbox_max_id);
                                sQLitePreparedStatement2.bindInteger(3, Math.max(intValue, tLRPC$ChatFull.read_outbox_max_id));
                                sQLitePreparedStatement2.bindLong(4, -tLRPC$ChatFull.id);
                                sQLitePreparedStatement2.step();
                                sQLitePreparedStatement2.dispose();
                            } catch (Exception e3) {
                                e = e3;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                checkSQLException(e);
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement = sQLitePreparedStatement2;
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        queryFinalized.dispose();
                    } catch (Exception e4) {
                        e = e4;
                        sQLiteCursor2 = queryFinalized;
                        sQLitePreparedStatement = null;
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                            sQLiteCursor2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLiteCursor2 = queryFinalized;
                        sQLitePreparedStatement = null;
                        if (sQLiteCursor2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLitePreparedStatement2 = null;
                }
                try {
                    if ((tLRPC$ChatFull.flags & 2048) != 0) {
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                        executeFast.bindInteger(1, tLRPC$ChatFull.folder_id);
                        executeFast.bindLong(2, -tLRPC$ChatFull.id);
                        executeFast.step();
                        executeFast.dispose();
                        try {
                            this.unknownDialogsIds.remove(-tLRPC$ChatFull.id);
                        } catch (Exception e5) {
                            e = e5;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                        } catch (Throwable th6) {
                            th = th6;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET ttl_period = ? WHERE did = ?");
                    sQLitePreparedStatement2.bindInteger(1, tLRPC$ChatFull.ttl_period);
                    sQLitePreparedStatement2.bindLong(2, -tLRPC$ChatFull.id);
                    sQLitePreparedStatement2.step();
                    sQLitePreparedStatement2.dispose();
                } catch (Exception e6) {
                    e = e6;
                } catch (Throwable th7) {
                    th = th7;
                }
            } catch (Exception e7) {
                e = e7;
            } catch (Throwable th8) {
                th = th8;
            }
        } catch (Exception e8) {
            e = e8;
            sQLitePreparedStatement = null;
            sQLiteCursor2 = sQLiteCursor;
            checkSQLException(e);
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
        } catch (Throwable th9) {
            th = th9;
            sQLitePreparedStatement = null;
            sQLiteCursor2 = sQLiteCursor;
            if (sQLiteCursor2 != null) {
            }
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
    }

    public void updateChatOnlineCount(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda44
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatOnlineCount$129(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatOnlineCount$129(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updatePinnedMessages(final long j, final ArrayList<Integer> arrayList, final boolean z, final int i, final int i2, final boolean z2, final HashMap<Integer, MessageObject> hashMap) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda104
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updatePinnedMessages$132(z, hashMap, i2, j, arrayList, i, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:127:0x032d  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0332  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x0337  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0340  */
    /* JADX WARN: Removed duplicated region for block: B:138:0x0345  */
    /* JADX WARN: Removed duplicated region for block: B:140:0x034a  */
    /* JADX WARN: Removed duplicated region for block: B:159:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r14v2 */
    /* JADX WARN: Type inference failed for: r16v2 */
    /* JADX WARN: Type inference failed for: r16v3 */
    /* JADX WARN: Type inference failed for: r16v4 */
    /* JADX WARN: Type inference failed for: r16v5, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r16v6, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r16v7 */
    /* JADX WARN: Type inference failed for: r1v5, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda230] */
    /* JADX WARN: Type inference failed for: r1v8, types: [org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda229] */
    /* JADX WARN: Type inference failed for: r20v0, types: [java.util.HashMap] */
    /* JADX WARN: Type inference failed for: r9v14 */
    /* JADX WARN: Type inference failed for: r9v16, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r9v17 */
    /* JADX WARN: Type inference failed for: r9v4 */
    /* JADX WARN: Type inference failed for: r9v7, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r9v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updatePinnedMessages$132(boolean z, final HashMap hashMap, final int i, final long j, final ArrayList arrayList, int i2, boolean z2) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        boolean z3;
        final ?? r9;
        final int max;
        int intValue;
        int i3;
        boolean z4;
        final int max2;
        final ?? r92;
        NativeByteBuffer nativeByteBuffer;
        String str = "REPLACE INTO chat_pinned_count VALUES(?, ?, ?)";
        String str2 = ",";
        int i4 = 2;
        try {
            try {
                try {
                    if (z) {
                        this.database.beginTransaction();
                        if (hashMap != 0) {
                            if (i == 0) {
                                SQLiteDatabase sQLiteDatabase3 = this.database;
                                sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                            }
                            intValue = 0;
                        } else {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d AND mid IN (%s)", Long.valueOf(j), TextUtils.join(",", arrayList)), new Object[0]);
                            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                        }
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_pinned_v2 VALUES(?, ?, ?)");
                        try {
                            int size = arrayList.size();
                            int i5 = 0;
                            while (i5 < size) {
                                Integer num = (Integer) arrayList.get(i5);
                                executeFast.requery();
                                executeFast.bindLong(1, j);
                                executeFast.bindInteger(i4, num.intValue());
                                MessageObject messageObject = hashMap != 0 ? (MessageObject) hashMap.get(num) : null;
                                if (messageObject != null) {
                                    nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
                                    messageObject.messageOwner.serializeToStream(nativeByteBuffer);
                                    executeFast.bindByteBuffer(3, nativeByteBuffer);
                                } else {
                                    executeFast.bindNull(3);
                                    nativeByteBuffer = null;
                                }
                                executeFast.step();
                                if (nativeByteBuffer != null) {
                                    nativeByteBuffer.reuse();
                                }
                                i5++;
                                i4 = 2;
                            }
                            executeFast.dispose();
                            this.database.commitTransaction();
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            Locale locale = Locale.US;
                            SQLiteCursor queryFinalized2 = sQLiteDatabase4.queryFinalized(String.format(locale, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                            try {
                                int intValue2 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                queryFinalized2.dispose();
                                if (hashMap != 0) {
                                    r92 = z2;
                                    max2 = Math.max(i2, intValue2);
                                } else {
                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                    if (queryFinalized3.next()) {
                                        i3 = queryFinalized3.intValue(0);
                                        if (queryFinalized3.intValue(1) != 0) {
                                            z4 = true;
                                            queryFinalized3.dispose();
                                            max2 = Math.max(i3 + (arrayList.size() - intValue), intValue2);
                                            r92 = z4;
                                        }
                                    } else {
                                        i3 = 0;
                                    }
                                    z4 = false;
                                    queryFinalized3.dispose();
                                    max2 = Math.max(i3 + (arrayList.size() - intValue), intValue2);
                                    r92 = z4;
                                }
                                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                                executeFast2.requery();
                                executeFast2.bindLong(1, j);
                                executeFast2.bindInteger(2, max2);
                                executeFast2.bindInteger(3, r92);
                                executeFast2.step();
                                executeFast2.dispose();
                                ?? r1 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda229
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$updatePinnedMessages$130(j, arrayList, hashMap, i, max2, r92);
                                    }
                                };
                                AndroidUtilities.runOnUIThread(r1);
                                str = r1;
                            } catch (Exception e) {
                                e = e;
                                sQLiteCursor2 = queryFinalized2;
                                sQLitePreparedStatement = null;
                                sQLiteCursor = sQLiteCursor2;
                                try {
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                        sQLiteDatabase2.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                        return;
                                    }
                                    return;
                                } catch (Throwable th) {
                                    th = th;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (sQLiteCursor != null) {
                                        sQLiteCursor.dispose();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLiteCursor = queryFinalized2;
                                sQLitePreparedStatement = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e2) {
                            e = e2;
                            sQLitePreparedStatement = executeFast;
                            sQLiteCursor = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLitePreparedStatement = executeFast;
                            sQLiteCursor = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    } else {
                        if (arrayList == null) {
                            SQLiteDatabase sQLiteDatabase5 = this.database;
                            sQLiteDatabase5.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j).stepThis().dispose();
                            if (DialogObject.isChatDialog(j)) {
                                this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d", Long.valueOf(-j))).stepThis().dispose();
                            } else {
                                this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
                            }
                            max = 0;
                            r9 = 1;
                        } else {
                            String join = TextUtils.join(",", arrayList);
                            if (DialogObject.isChatDialog(j)) {
                                this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-j), join)).stepThis().dispose();
                            } else {
                                this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(j), join)).stepThis().dispose();
                            }
                            SQLiteDatabase sQLiteDatabase6 = this.database;
                            Locale locale2 = Locale.US;
                            sQLiteDatabase6.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), join)).stepThis().dispose();
                            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            int intValue3 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                            queryFinalized4.dispose();
                            try {
                                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale2, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                int intValue4 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                                queryFinalized5.dispose();
                                int i6 = 0;
                                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(locale2, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                                if (queryFinalized6.next()) {
                                    i6 = Math.max(0, queryFinalized6.intValue(0) - intValue3);
                                    if (queryFinalized6.intValue(1) != 0) {
                                        z3 = true;
                                        queryFinalized6.dispose();
                                        r9 = z3;
                                        max = Math.max(intValue4, i6);
                                    }
                                }
                                z3 = false;
                                queryFinalized6.dispose();
                                r9 = z3;
                                max = Math.max(intValue4, i6);
                            } catch (Exception e3) {
                                e = e3;
                                str2 = null;
                                sQLiteCursor2 = str2;
                                sQLitePreparedStatement = null;
                                sQLiteCursor = sQLiteCursor2;
                                checkSQLException(e);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                str2 = null;
                                sQLiteCursor = str2;
                                sQLitePreparedStatement = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                        executeFast3.requery();
                        executeFast3.bindLong(1, j);
                        executeFast3.bindInteger(2, max);
                        executeFast3.bindInteger(3, r9);
                        executeFast3.step();
                        executeFast3.dispose();
                        ?? r12 = new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda230
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updatePinnedMessages$131(j, arrayList, hashMap, i, max, r9);
                            }
                        };
                        AndroidUtilities.runOnUIThread(r12);
                        str = r12;
                    }
                    SQLiteDatabase sQLiteDatabase7 = this.database;
                    if (sQLiteDatabase7 != null) {
                        sQLiteDatabase7.commitTransaction();
                    }
                } catch (Exception e4) {
                    e = e4;
                    sQLitePreparedStatement = str;
                } catch (Throwable th5) {
                    th = th5;
                    sQLitePreparedStatement = str;
                }
            } catch (Exception e5) {
                e = e5;
            } catch (Throwable th6) {
                th = th6;
            }
        } catch (Exception e6) {
            e = e6;
            sQLiteCursor2 = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$130(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.TRUE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$131(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.FALSE, 0, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    public void updateChatInfo(final long j, final long j2, final int i, final long j3, final int i2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda240
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$134(j, i, j2, j3, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$134(long j, int i, long j2, long j3, int i2) {
        int i3;
        SQLiteCursor queryFinalized;
        final TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatParticipant tLRPC$TL_chatParticipant;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                i3 = 0;
                queryFinalized = this.database.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                if (i == 1) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        } else if (tLRPC$ChatFull.participants.participants.get(i3).user_id == j2) {
                            tLRPC$ChatFull.participants.participants.remove(i3);
                            break;
                        } else {
                            i3++;
                        }
                    }
                } else if (i == 0) {
                    Iterator<TLRPC$ChatParticipant> it = tLRPC$ChatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == j2) {
                            return;
                        }
                    }
                    TLRPC$TL_chatParticipant tLRPC$TL_chatParticipant2 = new TLRPC$TL_chatParticipant();
                    tLRPC$TL_chatParticipant2.user_id = j2;
                    tLRPC$TL_chatParticipant2.inviter_id = j3;
                    tLRPC$TL_chatParticipant2.date = getConnectionsManager().getCurrentTime();
                    tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatParticipant2);
                } else if (i == 2) {
                    while (true) {
                        if (i3 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatFull.participants.participants.get(i3);
                        if (tLRPC$ChatParticipant.user_id == j2) {
                            if (j3 == 1) {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipantAdmin();
                            } else {
                                tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipant();
                            }
                            tLRPC$TL_chatParticipant.user_id = tLRPC$ChatParticipant.user_id;
                            tLRPC$TL_chatParticipant.date = tLRPC$ChatParticipant.date;
                            tLRPC$TL_chatParticipant.inviter_id = tLRPC$ChatParticipant.inviter_id;
                            tLRPC$ChatFull.participants.participants.set(i3, tLRPC$TL_chatParticipant);
                        } else {
                            i3++;
                        }
                    }
                }
                tLRPC$ChatFull.participants.version = i2;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda139
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$updateChatInfo$133(tLRPC$ChatFull);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.bindInteger(7, tLRPC$ChatFull.participants_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$133(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public boolean isMigratedChat(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isMigratedChat$135(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$isMigratedChat$135(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        TLRPC$ChatFull tLRPC$ChatFull;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            new ArrayList();
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull = null;
            } else {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) && tLRPC$ChatFull.migrated_from_chat_id != 0;
            countDownLatch.countDown();
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public TLRPC$Message getMessage(final long j, final long j2) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final AtomicReference atomicReference = new AtomicReference();
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda161
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessage$136(j, j2, atomicReference, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return (TLRPC$Message) atomicReference.get();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessage$136(long j, long j2, AtomicReference atomicReference, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + j + " AND mid = " + j2 + " LIMIT 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        atomicReference.set(TLdeserialize);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public boolean hasInviteMeMessage(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda76
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasInviteMeMessage$137(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$hasInviteMeMessage$137(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                long clientUserId = getUserConfig().getClientUserId();
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + (-j) + " AND out = 0 ORDER BY mid DESC LIMIT 100", new Object[0]);
                while (true) {
                    if (!sQLiteCursor.next()) {
                        break;
                    }
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction.users.contains(Long.valueOf(clientUserId))) {
                            zArr[0] = true;
                            break;
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public HashMap<Long, Integer> getSmallGroupsParticipantsCount() {
        HashMap<Long, Integer> hashMap = new HashMap<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT uid, info, participants_count FROM chat_settings_v2 WHERE participants_count > 1", new Object[0]);
                while (sQLiteCursor.next()) {
                    long longValue = sQLiteCursor.longValue(0);
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                    int intValue = sQLiteCursor.intValue(2);
                    if (byteBufferValue != null) {
                        TLRPC$ChatFull TLdeserialize = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC$TL_channelFull) {
                            hashMap.put(Long.valueOf(longValue), Integer.valueOf(intValue));
                        }
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            }
            return hashMap;
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45) */
    /* JADX WARN: Can't wrap try/catch for region: R(41:1|(3:2|3|(3:5|6|7))|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(43:1|2|3|(3:5|6|7)|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(45:1|2|3|5|6|7|(3:308|309|(40:311|312|313|314|10|11|12|13|(3:15|(4:19|20|16|17)|21)(2:221|(41:223|224|225|226|(9:229|230|(2:264|265)(1:232)|233|(1:235)(1:263)|(4:237|238|239|(1:241))(1:262)|(4:244|(1:246)|247|248)|249|227)|272|273|274|(4:278|279|275|276)|280|281|23|(3:206|207|(1:209))|(2:30|(3:33|34|31))|58|59|60|61|62|63|64|65|(8:69|70|71|72|73|74|66|67)|86|87|88|89|90|91|92|(5:94|95|96|97|(10:99|100|101|(3:129|130|(11:132|(3:145|146|(6:148|104|(6:106|(1:108)(1:126)|109|110|111|(3:113|(2:115|116)|118))(1:128)|119|44|45))(1:134)|135|136|137|138|104|(0)(0)|119|44|45))|103|104|(0)(0)|119|44|45))(1:169)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|22|23|(0)|(4:26|28|30|(1:31))|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45))|9|10|11|12|13|(0)(0)|22|23|(0)|(0)|58|59|60|61|62|63|64|65|(2:66|67)|86|87|88|89|90|91|92|(0)(0)|162|100|101|(0)|103|104|(0)(0)|119|44|45|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:173:0x0304, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:174:0x0305, code lost:
        r14 = r7;
        r4 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:176:0x030b, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:177:0x030c, code lost:
        r4 = r8;
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:201:0x0360, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x0364, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x0365, code lost:
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:207:0x0370, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x0373, code lost:
        r4 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:211:0x0377, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:212:0x0378, code lost:
        r19 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x037a, code lost:
        r4 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x037e, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:216:0x037f, code lost:
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x0383, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x0384, code lost:
        r19 = r15;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x0396, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:226:0x0397, code lost:
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x039b, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x039c, code lost:
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x03a0, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:230:0x03a1, code lost:
        r2 = null;
        r4 = false;
        r14 = r19;
        r15 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:231:0x03ac, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x03ad, code lost:
        r7 = r19;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:233:0x03b1, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:235:0x03b5, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x03bd, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x03be, code lost:
        r7 = r10;
        r8 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x03c6, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x03c7, code lost:
        r7 = r10;
        r4 = false;
        r8 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x03cf, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x03d0, code lost:
        r7 = r10;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x03d5, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x03d6, code lost:
        r7 = r10;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:108:0x01f2 A[Catch: all -> 0x01da, Exception -> 0x01e4, TryCatch #42 {Exception -> 0x01e4, all -> 0x01da, blocks: (B:99:0x01cc, B:101:0x01d2, B:108:0x01f2, B:110:0x01f6, B:113:0x01fd, B:115:0x0209), top: B:310:0x01cc }] */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0209 A[Catch: all -> 0x01da, Exception -> 0x01e4, TRY_LEAVE, TryCatch #42 {Exception -> 0x01e4, all -> 0x01da, blocks: (B:99:0x01cc, B:101:0x01d2, B:108:0x01f2, B:110:0x01f6, B:113:0x01fd, B:115:0x0209), top: B:310:0x01cc }] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x029c A[Catch: all -> 0x0260, Exception -> 0x0267, TRY_ENTER, TRY_LEAVE, TryCatch #45 {Exception -> 0x0267, all -> 0x0260, blocks: (B:126:0x0251, B:143:0x029c), top: B:304:0x0251 }] */
    /* JADX WARN: Removed duplicated region for block: B:153:0x02bb  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0324 A[Catch: all -> 0x0360, Exception -> 0x0364, TRY_LEAVE, TryCatch #43 {Exception -> 0x0364, all -> 0x0360, blocks: (B:154:0x02bd, B:184:0x031e, B:186:0x0324), top: B:308:0x02bd }] */
    /* JADX WARN: Removed duplicated region for block: B:205:0x0368  */
    /* JADX WARN: Removed duplicated region for block: B:258:0x0405  */
    /* JADX WARN: Removed duplicated region for block: B:266:0x0426  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0085  */
    /* JADX WARN: Removed duplicated region for block: B:296:0x0247 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:310:0x01cc A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:328:0x02c2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00b2 A[Catch: all -> 0x03bd, Exception -> 0x03c6, TRY_ENTER, TRY_LEAVE, TryCatch #41 {Exception -> 0x03c6, all -> 0x03bd, blocks: (B:26:0x007c, B:38:0x00b2), top: B:312:0x007c }] */
    /* JADX WARN: Type inference failed for: r2v0 */
    /* JADX WARN: Type inference failed for: r2v12, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r2v20 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private TLRPC$ChatFull loadChatInfoInternal(long j, boolean z, boolean z2, boolean z3, int i) {
        ArrayList<Integer> arrayList;
        SQLiteCursor sQLiteCursor;
        TLRPC$ChatFull tLRPC$ChatFull;
        ArrayList<Integer> arrayList2;
        boolean z4;
        ArrayList<Integer> arrayList3;
        TLRPC$ChatFull tLRPC$ChatFull2;
        int i2;
        boolean z5;
        SQLiteCursor sQLiteCursor2;
        int i3;
        SQLiteCursor sQLiteCursor3;
        boolean z6;
        int i4;
        int i5;
        NativeByteBuffer byteBufferValue;
        ArrayList<Long> arrayList4;
        ArrayList<Integer> arrayList5;
        ArrayList<Long> arrayList6;
        TLRPC$User TLdeserialize;
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        TLRPC$ChatFull tLRPC$ChatFull3;
        SQLiteCursor sQLiteCursor4;
        long j2;
        SQLiteCursor queryFinalized;
        int i6;
        boolean z7;
        SQLiteCursor sQLiteCursor5;
        int i7;
        int intValue;
        ArrayList<Long> arrayList7;
        int i8;
        long j3 = j;
        ?? r2 = 0;
        ArrayList<TLRPC$User> arrayList8 = new ArrayList<>();
        HashMap<Integer, MessageObject> hashMap = new HashMap<>();
        ArrayList<Integer> arrayList9 = new ArrayList<>();
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT info, pinned, online, inviter, links FROM chat_settings_v2 WHERE uid = " + j3, new Object[0]);
            try {
                i5 = 2;
            } catch (Exception e) {
                e = e;
                arrayList2 = arrayList9;
                z4 = false;
                tLRPC$ChatFull = null;
            } catch (Throwable th) {
                th = th;
                arrayList = arrayList9;
                tLRPC$ChatFull = null;
            }
        } catch (Exception e2) {
            e = e2;
            arrayList2 = arrayList9;
            z4 = false;
            sQLiteCursor = null;
            tLRPC$ChatFull = null;
        } catch (Throwable th2) {
            th = th2;
            arrayList = arrayList9;
            sQLiteCursor = null;
            tLRPC$ChatFull = null;
        }
        if (sQLiteCursor.next()) {
            try {
                byteBufferValue = sQLiteCursor.byteBufferValue(0);
            } catch (Exception e3) {
                e = e3;
                arrayList2 = arrayList9;
                tLRPC$ChatFull = null;
            } catch (Throwable th3) {
                th = th3;
                arrayList = arrayList9;
                tLRPC$ChatFull = null;
            }
            if (byteBufferValue != null) {
                TLRPC$ChatFull TLdeserialize2 = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                try {
                    byteBufferValue.reuse();
                    TLdeserialize2.pinned_msg_id = sQLiteCursor.intValue(1);
                    TLdeserialize2.online_count = sQLiteCursor.intValue(2);
                    TLdeserialize2.inviterId = sQLiteCursor.longValue(3);
                    TLdeserialize2.invitesCount = sQLiteCursor.intValue(4);
                    tLRPC$ChatFull = TLdeserialize2;
                    sQLiteCursor.dispose();
                    arrayList4 = new ArrayList<>();
                } catch (Exception e4) {
                    e = e4;
                    arrayList2 = arrayList9;
                    tLRPC$ChatFull = TLdeserialize2;
                    z4 = false;
                    sQLiteCursor2 = sQLiteCursor;
                    i3 = 0;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor2 != null) {
                        }
                        i4 = i3;
                        z6 = z4;
                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                        return tLRPC$ChatFull;
                    } catch (Throwable th4) {
                        th = th4;
                        arrayList3 = arrayList2;
                        sQLiteCursor3 = sQLiteCursor2;
                        i2 = i3;
                        z5 = z4;
                        sQLiteCursor = sQLiteCursor3;
                        tLRPC$ChatFull2 = tLRPC$ChatFull;
                        if (sQLiteCursor != null) {
                        }
                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    arrayList = arrayList9;
                    tLRPC$ChatFull = TLdeserialize2;
                    arrayList3 = arrayList;
                    tLRPC$ChatFull2 = tLRPC$ChatFull;
                    i2 = 0;
                    z5 = false;
                    if (sQLiteCursor != null) {
                    }
                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                    throw th;
                }
                if (!(tLRPC$ChatFull instanceof TLRPC$TL_chatFull)) {
                    for (int i9 = 0; i9 < tLRPC$ChatFull.participants.participants.size(); i9++) {
                        try {
                            arrayList4.add(Long.valueOf(tLRPC$ChatFull.participants.participants.get(i9).user_id));
                        } catch (Exception e5) {
                            e = e5;
                            arrayList2 = arrayList9;
                            sQLiteCursor = null;
                            z4 = false;
                            sQLiteCursor2 = sQLiteCursor;
                            i3 = 0;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            i4 = i3;
                            z6 = z4;
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return tLRPC$ChatFull;
                        } catch (Throwable th6) {
                            th = th6;
                            arrayList = arrayList9;
                            sQLiteCursor = null;
                            arrayList3 = arrayList;
                            tLRPC$ChatFull2 = tLRPC$ChatFull;
                            i2 = 0;
                            z5 = false;
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                            throw th;
                        }
                    }
                } else if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                    try {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        StringBuilder sb = new StringBuilder();
                        sb.append("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = ");
                        ArrayList<Long> arrayList10 = arrayList4;
                        sb.append(-j3);
                        sb.append(" ORDER BY cu.date DESC");
                        SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb.toString(), new Object[0]);
                        try {
                            try {
                                tLRPC$ChatFull.participants = new TLRPC$TL_chatParticipants();
                                while (queryFinalized2.next()) {
                                    try {
                                        NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(r2);
                                        if (byteBufferValue2 != null) {
                                            try {
                                                TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r2), r2);
                                                byteBufferValue2.reuse();
                                            } catch (Throwable th7) {
                                                th = th7;
                                                sQLiteCursor = queryFinalized2;
                                                arrayList = arrayList9;
                                                arrayList3 = arrayList;
                                                tLRPC$ChatFull2 = tLRPC$ChatFull;
                                                i2 = 0;
                                                z5 = false;
                                                if (sQLiteCursor != null) {
                                                }
                                                getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                throw th;
                                            }
                                        } else {
                                            TLdeserialize = null;
                                        }
                                        NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(i5);
                                        if (byteBufferValue3 != 0) {
                                            tLRPC$ChannelParticipant = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(r2), r2);
                                            byteBufferValue3.reuse();
                                        } else {
                                            tLRPC$ChannelParticipant = null;
                                        }
                                        if (tLRPC$ChannelParticipant != null) {
                                            arrayList5 = arrayList9;
                                            try {
                                                try {
                                                    if (tLRPC$ChannelParticipant.user_id == getUserConfig().clientUserId) {
                                                        TLdeserialize = getUserConfig().getCurrentUser();
                                                    }
                                                } catch (Throwable th8) {
                                                    th = th8;
                                                    sQLiteCursor = queryFinalized2;
                                                    arrayList = arrayList5;
                                                    arrayList3 = arrayList;
                                                    tLRPC$ChatFull2 = tLRPC$ChatFull;
                                                    i2 = 0;
                                                    z5 = false;
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                    throw th;
                                                }
                                            } catch (Exception e6) {
                                                e = e6;
                                                try {
                                                    checkSQLException(e);
                                                    j3 = j;
                                                    arrayList9 = arrayList5;
                                                    r2 = 0;
                                                    i5 = 2;
                                                } catch (Exception e7) {
                                                    e = e7;
                                                    sQLiteCursor = queryFinalized2;
                                                    arrayList2 = arrayList5;
                                                    z4 = false;
                                                    sQLiteCursor2 = sQLiteCursor;
                                                    i3 = 0;
                                                    checkSQLException(e);
                                                    if (sQLiteCursor2 != null) {
                                                        sQLiteCursor2.dispose();
                                                    }
                                                    i4 = i3;
                                                    z6 = z4;
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                                    return tLRPC$ChatFull;
                                                }
                                            }
                                        } else {
                                            arrayList5 = arrayList9;
                                        }
                                        if (TLdeserialize != null && tLRPC$ChannelParticipant != null) {
                                            TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                                            if (tLRPC$UserStatus != null) {
                                                tLRPC$UserStatus.expires = queryFinalized2.intValue(1);
                                            }
                                            arrayList8.add(TLdeserialize);
                                            tLRPC$ChannelParticipant.date = queryFinalized2.intValue(3);
                                            TLRPC$TL_chatChannelParticipant tLRPC$TL_chatChannelParticipant = new TLRPC$TL_chatChannelParticipant();
                                            tLRPC$TL_chatChannelParticipant.user_id = MessageObject.getPeerId(tLRPC$ChannelParticipant.peer);
                                            tLRPC$TL_chatChannelParticipant.date = tLRPC$ChannelParticipant.date;
                                            tLRPC$TL_chatChannelParticipant.inviter_id = tLRPC$ChannelParticipant.inviter_id;
                                            tLRPC$TL_chatChannelParticipant.channelParticipant = tLRPC$ChannelParticipant;
                                            tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatChannelParticipant);
                                        }
                                    } catch (Exception e8) {
                                        e = e8;
                                        arrayList5 = arrayList9;
                                    }
                                    j3 = j;
                                    arrayList9 = arrayList5;
                                    r2 = 0;
                                    i5 = 2;
                                }
                                arrayList5 = arrayList9;
                                queryFinalized2.dispose();
                                int i10 = 0;
                                while (i10 < tLRPC$ChatFull.bot_info.size()) {
                                    try {
                                        ArrayList<Long> arrayList11 = arrayList10;
                                        arrayList11.add(Long.valueOf(tLRPC$ChatFull.bot_info.get(i10).user_id));
                                        i10++;
                                        arrayList10 = arrayList11;
                                    } catch (Exception e9) {
                                        e = e9;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        sQLiteCursor = null;
                                        sQLiteCursor2 = sQLiteCursor;
                                        i3 = 0;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return tLRPC$ChatFull;
                                    } catch (Throwable th9) {
                                        th = th9;
                                        arrayList = arrayList5;
                                        sQLiteCursor = null;
                                        arrayList3 = arrayList;
                                        tLRPC$ChatFull2 = tLRPC$ChatFull;
                                        i2 = 0;
                                        z5 = false;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                arrayList6 = arrayList10;
                                if (tLRPC$ChatFull != null) {
                                    try {
                                        long j4 = tLRPC$ChatFull.inviterId;
                                        if (j4 != 0) {
                                            arrayList6.add(Long.valueOf(j4));
                                        }
                                    } catch (Exception e10) {
                                        e = e10;
                                        arrayList2 = arrayList5;
                                        i3 = 0;
                                        sQLiteCursor2 = null;
                                        z4 = false;
                                        tLRPC$ChatFull3 = tLRPC$ChatFull;
                                        tLRPC$ChatFull = tLRPC$ChatFull3;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return tLRPC$ChatFull;
                                    } catch (Throwable th10) {
                                        th = th10;
                                        arrayList3 = arrayList5;
                                        i3 = 0;
                                        z4 = false;
                                        sQLiteCursor3 = null;
                                        i2 = i3;
                                        z5 = z4;
                                        sQLiteCursor = sQLiteCursor3;
                                        tLRPC$ChatFull2 = tLRPC$ChatFull;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                if (tLRPC$ChatFull != null && (arrayList7 = tLRPC$ChatFull.recent_requesters) != null && !arrayList7.isEmpty()) {
                                    for (i8 = 0; i8 < Math.min(3, tLRPC$ChatFull.recent_requesters.size()); i8++) {
                                        ArrayList<Long> arrayList12 = tLRPC$ChatFull.recent_requesters;
                                        arrayList6.add(arrayList12.get((arrayList12.size() - 1) - i8));
                                    }
                                }
                                getUsersInternal(arrayList6, arrayList8);
                                j2 = -j;
                                int i11 = 0;
                                sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
                                while (sQLiteCursor4.next()) {
                                    try {
                                        try {
                                            intValue = sQLiteCursor4.intValue(i11);
                                            arrayList2 = arrayList5;
                                        } catch (Exception e11) {
                                            e = e11;
                                            arrayList2 = arrayList5;
                                            sQLiteCursor2 = sQLiteCursor4;
                                            tLRPC$ChatFull3 = tLRPC$ChatFull;
                                            i3 = 0;
                                            z4 = false;
                                            tLRPC$ChatFull = tLRPC$ChatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return tLRPC$ChatFull;
                                        } catch (Throwable th11) {
                                            th = th11;
                                            arrayList2 = arrayList5;
                                            arrayList3 = arrayList2;
                                            z4 = false;
                                            sQLiteCursor3 = sQLiteCursor4;
                                            i3 = 0;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            tLRPC$ChatFull2 = tLRPC$ChatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                        try {
                                            arrayList2.add(Integer.valueOf(intValue));
                                            hashMap.put(Integer.valueOf(intValue), null);
                                            arrayList5 = arrayList2;
                                            i11 = 0;
                                        } catch (Exception e12) {
                                            e = e12;
                                            sQLiteCursor2 = sQLiteCursor4;
                                            tLRPC$ChatFull3 = tLRPC$ChatFull;
                                            i3 = 0;
                                            z4 = false;
                                            tLRPC$ChatFull = tLRPC$ChatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return tLRPC$ChatFull;
                                        } catch (Throwable th12) {
                                            th = th12;
                                            arrayList3 = arrayList2;
                                            z4 = false;
                                            sQLiteCursor3 = sQLiteCursor4;
                                            i3 = 0;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            tLRPC$ChatFull2 = tLRPC$ChatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                    } catch (Exception e13) {
                                        e = e13;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        tLRPC$ChatFull3 = tLRPC$ChatFull;
                                        sQLiteCursor2 = sQLiteCursor4;
                                        i3 = 0;
                                        tLRPC$ChatFull = tLRPC$ChatFull3;
                                        checkSQLException(e);
                                        if (sQLiteCursor2 != null) {
                                        }
                                        i4 = i3;
                                        z6 = z4;
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                        return tLRPC$ChatFull;
                                    } catch (Throwable th13) {
                                        th = th13;
                                        arrayList2 = arrayList5;
                                        z4 = false;
                                        arrayList3 = arrayList2;
                                        sQLiteCursor3 = sQLiteCursor4;
                                        i3 = 0;
                                        i2 = i3;
                                        z5 = z4;
                                        sQLiteCursor = sQLiteCursor3;
                                        tLRPC$ChatFull2 = tLRPC$ChatFull;
                                        if (sQLiteCursor != null) {
                                        }
                                        getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                        throw th;
                                    }
                                }
                                arrayList2 = arrayList5;
                                sQLiteCursor4.dispose();
                                queryFinalized = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
                            } catch (Throwable th14) {
                                th = th14;
                                arrayList5 = arrayList9;
                            }
                        } catch (Exception e14) {
                            e = e14;
                            arrayList5 = arrayList9;
                        }
                    } catch (Exception e15) {
                        e = e15;
                        arrayList5 = arrayList9;
                    } catch (Throwable th15) {
                        th = th15;
                        arrayList5 = arrayList9;
                    }
                    if (queryFinalized.next()) {
                        int intValue2 = queryFinalized.intValue(0);
                        try {
                            i6 = intValue2;
                        } catch (Exception e16) {
                            e = e16;
                            sQLiteCursor2 = queryFinalized;
                            tLRPC$ChatFull3 = tLRPC$ChatFull;
                            i3 = intValue2;
                            z4 = false;
                            tLRPC$ChatFull = tLRPC$ChatFull3;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                            }
                            i4 = i3;
                            z6 = z4;
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return tLRPC$ChatFull;
                        } catch (Throwable th16) {
                            th = th16;
                            arrayList3 = arrayList2;
                            z4 = false;
                            sQLiteCursor3 = queryFinalized;
                            i3 = intValue2;
                            i2 = i3;
                            z5 = z4;
                            sQLiteCursor = sQLiteCursor3;
                            tLRPC$ChatFull2 = tLRPC$ChatFull;
                            if (sQLiteCursor != null) {
                            }
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                            throw th;
                        }
                        if (queryFinalized.intValue(1) != 0) {
                            z7 = true;
                            queryFinalized.dispose();
                            if (tLRPC$ChatFull != null) {
                                try {
                                } catch (Exception e17) {
                                    e = e17;
                                    sQLiteCursor5 = null;
                                } catch (Throwable th17) {
                                    th = th17;
                                    sQLiteCursor5 = null;
                                }
                                if (tLRPC$ChatFull.pinned_msg_id != 0) {
                                    if (arrayList2.isEmpty()) {
                                        i7 = 0;
                                    } else {
                                        try {
                                            i7 = 0;
                                        } catch (Exception e18) {
                                            e = e18;
                                            i3 = i6;
                                            z4 = z7;
                                            tLRPC$ChatFull3 = tLRPC$ChatFull;
                                            sQLiteCursor2 = null;
                                            tLRPC$ChatFull = tLRPC$ChatFull3;
                                            checkSQLException(e);
                                            if (sQLiteCursor2 != null) {
                                            }
                                            i4 = i3;
                                            z6 = z4;
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return tLRPC$ChatFull;
                                        } catch (Throwable th18) {
                                            th = th18;
                                            i3 = i6;
                                            arrayList3 = arrayList2;
                                            z4 = z7;
                                            sQLiteCursor3 = null;
                                            i2 = i3;
                                            z5 = z4;
                                            sQLiteCursor = sQLiteCursor3;
                                            tLRPC$ChatFull2 = tLRPC$ChatFull;
                                            if (sQLiteCursor != null) {
                                            }
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                            throw th;
                                        }
                                        if (tLRPC$ChatFull.pinned_msg_id <= arrayList2.get(0).intValue()) {
                                            sQLiteCursor5 = null;
                                            if (arrayList2.isEmpty()) {
                                                tLRPC$ChatFull3 = tLRPC$ChatFull;
                                                try {
                                                    ArrayList<MessageObject> loadPinnedMessages = getMediaDataController().loadPinnedMessages(j2, z ? j : 0L, arrayList2, false);
                                                    if (loadPinnedMessages != null) {
                                                        int size = loadPinnedMessages.size();
                                                        while (i7 < size) {
                                                            MessageObject messageObject = loadPinnedMessages.get(i7);
                                                            hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                                                            i7++;
                                                        }
                                                    }
                                                } catch (Exception e19) {
                                                    e = e19;
                                                    z4 = z7;
                                                    int i12 = i6;
                                                    sQLiteCursor2 = sQLiteCursor5;
                                                    i3 = i12;
                                                    tLRPC$ChatFull = tLRPC$ChatFull3;
                                                    checkSQLException(e);
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    i4 = i3;
                                                    z6 = z4;
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                                    return tLRPC$ChatFull;
                                                } catch (Throwable th19) {
                                                    th = th19;
                                                    arrayList3 = arrayList2;
                                                    z4 = z7;
                                                    tLRPC$ChatFull = tLRPC$ChatFull3;
                                                    sQLiteCursor3 = sQLiteCursor5;
                                                    i3 = i6;
                                                    i2 = i3;
                                                    z5 = z4;
                                                    sQLiteCursor = sQLiteCursor3;
                                                    tLRPC$ChatFull2 = tLRPC$ChatFull;
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull2, arrayList8, true, z2, z3, arrayList3, hashMap, i2, z5);
                                                    throw th;
                                                }
                                            } else {
                                                tLRPC$ChatFull3 = tLRPC$ChatFull;
                                            }
                                            i4 = i6;
                                            z6 = z7;
                                            tLRPC$ChatFull = tLRPC$ChatFull3;
                                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                            return tLRPC$ChatFull;
                                        }
                                    }
                                    arrayList2.clear();
                                    arrayList2.add(Integer.valueOf(tLRPC$ChatFull.pinned_msg_id));
                                    sQLiteCursor5 = null;
                                    hashMap.put(Integer.valueOf(tLRPC$ChatFull.pinned_msg_id), null);
                                    if (arrayList2.isEmpty()) {
                                    }
                                    i4 = i6;
                                    z6 = z7;
                                    tLRPC$ChatFull = tLRPC$ChatFull3;
                                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                                    return tLRPC$ChatFull;
                                }
                            }
                            sQLiteCursor5 = null;
                            i7 = 0;
                            if (arrayList2.isEmpty()) {
                            }
                            i4 = i6;
                            z6 = z7;
                            tLRPC$ChatFull = tLRPC$ChatFull3;
                            getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                            return tLRPC$ChatFull;
                        }
                    } else {
                        i6 = 0;
                    }
                    z7 = false;
                    queryFinalized.dispose();
                    if (tLRPC$ChatFull != null) {
                    }
                    sQLiteCursor5 = null;
                    i7 = 0;
                    if (arrayList2.isEmpty()) {
                    }
                    i4 = i6;
                    z6 = z7;
                    tLRPC$ChatFull = tLRPC$ChatFull3;
                    getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                    return tLRPC$ChatFull;
                }
                arrayList6 = arrayList4;
                arrayList5 = arrayList9;
                if (tLRPC$ChatFull != null) {
                }
                if (tLRPC$ChatFull != null) {
                    while (i8 < Math.min(3, tLRPC$ChatFull.recent_requesters.size())) {
                    }
                }
                getUsersInternal(arrayList6, arrayList8);
                j2 = -j;
                int i112 = 0;
                sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
                while (sQLiteCursor4.next()) {
                }
                arrayList2 = arrayList5;
                sQLiteCursor4.dispose();
                queryFinalized = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
                if (queryFinalized.next()) {
                }
                z7 = false;
                queryFinalized.dispose();
                if (tLRPC$ChatFull != null) {
                }
                sQLiteCursor5 = null;
                i7 = 0;
                if (arrayList2.isEmpty()) {
                }
                i4 = i6;
                z6 = z7;
                tLRPC$ChatFull = tLRPC$ChatFull3;
                getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
                return tLRPC$ChatFull;
            }
        }
        tLRPC$ChatFull = null;
        sQLiteCursor.dispose();
        arrayList4 = new ArrayList<>();
        if (!(tLRPC$ChatFull instanceof TLRPC$TL_chatFull)) {
        }
        arrayList6 = arrayList4;
        arrayList5 = arrayList9;
        if (tLRPC$ChatFull != null) {
        }
        if (tLRPC$ChatFull != null) {
        }
        getUsersInternal(arrayList6, arrayList8);
        j2 = -j;
        int i1122 = 0;
        sQLiteCursor4 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", Long.valueOf(j2)), new Object[0]);
        while (sQLiteCursor4.next()) {
        }
        arrayList2 = arrayList5;
        sQLiteCursor4.dispose();
        queryFinalized = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + j2, new Object[0]);
        if (queryFinalized.next()) {
        }
        z7 = false;
        queryFinalized.dispose();
        if (tLRPC$ChatFull != null) {
        }
        sQLiteCursor5 = null;
        i7 = 0;
        if (arrayList2.isEmpty()) {
        }
        i4 = i6;
        z6 = z7;
        tLRPC$ChatFull = tLRPC$ChatFull3;
        getMessagesController().processChatInfo(j, tLRPC$ChatFull, arrayList8, true, z2, z3, arrayList2, hashMap, i4, z6);
        return tLRPC$ChatFull;
    }

    public TLRPC$ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3) {
        return loadChatInfo(j, z, countDownLatch, z2, z3, 0);
    }

    public TLRPC$ChatFull loadChatInfo(final long j, final boolean z, final CountDownLatch countDownLatch, final boolean z2, final boolean z3, final int i) {
        final TLRPC$ChatFull[] tLRPC$ChatFullArr = new TLRPC$ChatFull[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda158
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadChatInfo$138(tLRPC$ChatFullArr, j, z, z2, z3, i, countDownLatch);
            }
        });
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return tLRPC$ChatFullArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChatInfo$138(TLRPC$ChatFull[] tLRPC$ChatFullArr, long j, boolean z, boolean z2, boolean z3, int i, CountDownLatch countDownLatch) {
        tLRPC$ChatFullArr[0] = loadChatInfoInternal(j, z, z2, z3, i);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    public TLRPC$ChatFull loadChatInfoInQueue(long j, boolean z, boolean z2, boolean z3, int i) {
        return loadChatInfoInternal(j, z, z2, z3, i);
    }

    public void processPendingRead(final long j, final int i, final int i2, final int i3) {
        final int i4 = this.lastSavedDate;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda198
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$processPendingRead$139(j, i, i3, i4, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:114:0x01bd  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x01c2  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x01d0  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x01d5  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x01dc  */
    /* JADX WARN: Removed duplicated region for block: B:161:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processPendingRead$139(long j, int i, int i2, int i3, int i4) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        long j2;
        int i5;
        int i6;
        int i7;
        SQLiteCursor queryFinalized;
        int intValue;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement executeFast;
        int i8 = i4;
        try {
            int i9 = 0;
            sQLiteCursor = this.database.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j, new Object[0]);
            try {
                if (sQLiteCursor.next()) {
                    i5 = sQLiteCursor.intValue(0);
                    int intValue2 = sQLiteCursor.intValue(1);
                    j2 = sQLiteCursor.longValue(2);
                    i7 = intValue2;
                    i6 = i5;
                } else {
                    j2 = 0;
                    i5 = 0;
                    i6 = 0;
                    i7 = 0;
                }
                sQLiteCursor.dispose();
                this.database.beginTransaction();
                if (!DialogObject.isEncryptedDialog(j)) {
                    try {
                        i8 = Math.max(i7, i);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                        try {
                            executeFast2.requery();
                            executeFast2.bindLong(1, j);
                            executeFast2.bindInteger(2, i8);
                            executeFast2.step();
                            executeFast2.dispose();
                            sQLitePreparedStatement4 = executeFast2;
                            if (i8 >= j2) {
                                queryFinalized = null;
                            } else {
                                try {
                                    queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                } catch (Exception e) {
                                    e = e;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    sQLiteCursor2 = null;
                                    try {
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th) {
                                        th = th;
                                        if (sQLitePreparedStatement2 != null) {
                                            sQLitePreparedStatement2.dispose();
                                        }
                                        if (sQLiteCursor2 != null) {
                                            sQLiteCursor2.dispose();
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    sQLiteCursor2 = null;
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                                try {
                                    int intValue3 = queryFinalized.next() ? queryFinalized.intValue(0) + i2 : 0;
                                    queryFinalized.dispose();
                                    i9 = Math.max(0, i5 - intValue3);
                                } catch (Exception e2) {
                                    e = e2;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLiteCursor2 != null) {
                                    }
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    throw th;
                                }
                            }
                            SQLitePreparedStatement executeFast3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                            try {
                                try {
                                    executeFast3.requery();
                                    executeFast3.bindLong(1, j);
                                    executeFast3.bindInteger(2, i8);
                                    executeFast3.step();
                                    executeFast3.dispose();
                                    executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                                    executeFast.requery();
                                    executeFast.bindLong(1, j);
                                    executeFast.bindInteger(2, i3);
                                    executeFast.step();
                                    executeFast.dispose();
                                } catch (Exception e3) {
                                    e = e3;
                                    sQLiteCursor2 = queryFinalized;
                                    sQLitePreparedStatement2 = executeFast;
                                    checkSQLException(e);
                                    if (sQLitePreparedStatement2 != null) {
                                        sQLitePreparedStatement2.dispose();
                                    }
                                    if (sQLiteCursor2 != null) {
                                        sQLiteCursor2.dispose();
                                    }
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 == null) {
                                        return;
                                    }
                                    sQLiteDatabase2.commitTransaction();
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement3;
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            sQLitePreparedStatement4 = executeFast2;
                        } catch (Throwable th5) {
                            th = th5;
                            sQLitePreparedStatement4 = executeFast2;
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor2 = sQLiteCursor;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        checkSQLException(e);
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                        }
                        sQLiteDatabase2.commitTransaction();
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor2 = sQLiteCursor;
                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                } else {
                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                    try {
                        sQLitePreparedStatement2.requery();
                        sQLitePreparedStatement2.bindLong(1, j);
                        sQLitePreparedStatement2.bindInteger(2, i8);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                        if (i8 <= j2) {
                            queryFinalized = null;
                        } else {
                            try {
                                queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                            } catch (Exception e6) {
                                e = e6;
                                sQLitePreparedStatement2 = null;
                                sQLiteCursor2 = null;
                            } catch (Throwable th7) {
                                th = th7;
                                sQLitePreparedStatement2 = null;
                                sQLiteCursor2 = null;
                            }
                            try {
                                if (queryFinalized.next()) {
                                    try {
                                        intValue = queryFinalized.intValue(0) + i2;
                                    } catch (Exception e7) {
                                        e = e7;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement2 = null;
                                        checkSQLException(e);
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 == null) {
                                        }
                                        sQLiteDatabase2.commitTransaction();
                                    } catch (Throwable th8) {
                                        th = th8;
                                        sQLiteCursor2 = queryFinalized;
                                        sQLitePreparedStatement2 = null;
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLiteCursor2 != null) {
                                        }
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        throw th;
                                    }
                                } else {
                                    intValue = 0;
                                }
                                queryFinalized.dispose();
                                i9 = Math.max(0, i5 - intValue);
                            } catch (Exception e8) {
                                e = e8;
                                sQLitePreparedStatement = null;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                checkSQLException(e);
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th9) {
                                th = th9;
                                sQLitePreparedStatement = null;
                                sQLiteCursor2 = queryFinalized;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLiteCursor2 != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        }
                    } catch (Exception e9) {
                        e = e9;
                        sQLiteCursor2 = null;
                    } catch (Throwable th10) {
                        th = th10;
                        sQLiteCursor2 = null;
                    }
                }
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
                try {
                    executeFast4.requery();
                    executeFast4.bindInteger(1, i9);
                    executeFast4.bindInteger(2, i8);
                    executeFast4.bindLong(3, j);
                    executeFast4.step();
                    executeFast4.dispose();
                    this.database.commitTransaction();
                    if (i6 == 0 || i9 != 0 || isForum(j)) {
                        sQLitePreparedStatement = null;
                    } else {
                        LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
                        longSparseIntArray.put(j, i9);
                        sQLitePreparedStatement = null;
                        try {
                            updateFiltersReadCounter(longSparseIntArray, null, true);
                        } catch (Exception e10) {
                            e = e10;
                            sQLiteCursor2 = queryFinalized;
                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                            checkSQLException(e);
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 == null) {
                            }
                            sQLiteDatabase2.commitTransaction();
                        } catch (Throwable th11) {
                            th = th11;
                            sQLiteCursor2 = queryFinalized;
                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor2 != null) {
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            throw th;
                        }
                    }
                    updateWidgets(j);
                    if (queryFinalized != null) {
                        queryFinalized.dispose();
                    }
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 == null) {
                        return;
                    }
                } catch (Exception e11) {
                    e = e11;
                    sQLitePreparedStatement = executeFast4;
                }
            } catch (Exception e12) {
                e = e12;
            } catch (Throwable th12) {
                th = th12;
            }
        } catch (Exception e13) {
            e = e13;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        } catch (Throwable th13) {
            th = th13;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        }
        sQLiteDatabase2.commitTransaction();
    }

    public void putContacts(ArrayList<TLRPC$TL_contact> arrayList, final boolean z) {
        if (!arrayList.isEmpty() || z) {
            final ArrayList arrayList2 = new ArrayList(arrayList);
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda53
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putContacts$140(z, arrayList2);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0060  */
    /* JADX WARN: Removed duplicated region for block: B:45:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putContacts$140(boolean z, ArrayList arrayList) {
        Exception e;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z) {
                try {
                    this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                    sQLiteDatabase.commitTransaction();
                }
            }
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                try {
                    TLRPC$TL_contact tLRPC$TL_contact = (TLRPC$TL_contact) arrayList.get(i);
                    executeFast.requery();
                    executeFast.bindLong(1, tLRPC$TL_contact.user_id);
                    executeFast.bindInteger(2, tLRPC$TL_contact.mutual ? 1 : 0);
                    executeFast.step();
                } catch (Exception e3) {
                    sQLitePreparedStatement = executeFast;
                    e = e3;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                    }
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                    }
                    sQLiteDatabase.commitTransaction();
                } catch (Throwable th) {
                    sQLitePreparedStatement = executeFast;
                    th = th;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                        sQLiteDatabase2.commitTransaction();
                    }
                    throw th;
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
            sQLiteDatabase = this.database;
            if (sQLiteDatabase == null) {
                return;
            }
            sQLiteDatabase.commitTransaction();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void deleteContacts(final ArrayList<Long> arrayList) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$deleteContacts$141(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteContacts$141(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void applyPhoneBookUpdates(final String str, final String str2) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda99
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$applyPhoneBookUpdates$142(str, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$applyPhoneBookUpdates$142(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", str)).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", str2)).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putCachedPhoneBook(final HashMap<String, ContactsController.Contact> hashMap, final boolean z, boolean z2) {
        if (hashMap != null) {
            if (!hashMap.isEmpty() || z || z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda115
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putCachedPhoneBook$143(hashMap, z);
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0136  */
    /* JADX WARN: Removed duplicated region for block: B:81:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putCachedPhoneBook$143(HashMap hashMap, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        try {
            try {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
                }
                this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
                this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
                try {
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
                    try {
                        Iterator it = hashMap.entrySet().iterator();
                        while (true) {
                            if (!it.hasNext()) {
                                break;
                            }
                            ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                            if (!contact.phones.isEmpty() && !contact.shortPhones.isEmpty()) {
                                executeFast.requery();
                                executeFast.bindString(1, contact.key);
                                executeFast.bindInteger(2, contact.contact_id);
                                executeFast.bindString(3, contact.first_name);
                                executeFast.bindString(4, contact.last_name);
                                executeFast.bindInteger(5, contact.imported);
                                executeFast.step();
                                for (int i = 0; i < contact.phones.size(); i++) {
                                    sQLitePreparedStatement.requery();
                                    sQLitePreparedStatement.bindString(1, contact.key);
                                    sQLitePreparedStatement.bindString(2, contact.phones.get(i));
                                    sQLitePreparedStatement.bindString(3, contact.shortPhones.get(i));
                                    sQLitePreparedStatement.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                                    sQLitePreparedStatement.step();
                                }
                            }
                        }
                        executeFast.dispose();
                        try {
                            sQLitePreparedStatement.dispose();
                            this.database.commitTransaction();
                            if (z) {
                                this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                                this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                                getCachedPhoneBook(false);
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase == null) {
                                return;
                            }
                        } catch (Exception e) {
                            e = e;
                            checkSQLException(e);
                            if (sQLitePreparedStatement2 != null) {
                                sQLitePreparedStatement2.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase == null) {
                                return;
                            }
                            sQLiteDatabase.commitTransaction();
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement2 = executeFast;
                        checkSQLException(e);
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase == null) {
                        }
                        sQLiteDatabase.commitTransaction();
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement2 = executeFast;
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        throw th;
                    }
                } catch (Exception e3) {
                    e = e3;
                    sQLitePreparedStatement = null;
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = null;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
        sQLiteDatabase.commitTransaction();
    }

    public void getCachedPhoneBook(final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda120
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getCachedPhoneBook$144(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:70:0x013c, code lost:
        if (r13 != null) goto L75;
     */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00fd A[Catch: all -> 0x0131, TRY_LEAVE, TryCatch #1 {all -> 0x0131, blocks: (B:51:0x00ed, B:53:0x00fd), top: B:129:0x00ed }] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0134  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0148 A[Catch: all -> 0x0163, Exception -> 0x0166, TRY_ENTER, TryCatch #5 {Exception -> 0x0166, blocks: (B:74:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:105:0x01f4, B:80:0x0169), top: B:131:0x0146, outer: #2 }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0169 A[Catch: all -> 0x0163, Exception -> 0x0166, TryCatch #5 {Exception -> 0x0166, blocks: (B:74:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:105:0x01f4, B:80:0x0169), top: B:131:0x0146, outer: #2 }] */
    /* JADX WARN: Removed duplicated region for block: B:83:0x017a A[Catch: all -> 0x0163, Exception -> 0x0166, TryCatch #5 {Exception -> 0x0166, blocks: (B:74:0x0148, B:81:0x0174, B:83:0x017a, B:85:0x0186, B:87:0x01a8, B:88:0x01aa, B:90:0x01ae, B:91:0x01b0, B:92:0x01b3, B:95:0x01ba, B:98:0x01c6, B:100:0x01cc, B:102:0x01d2, B:103:0x01d6, B:105:0x01f4, B:80:0x0169), top: B:131:0x0146, outer: #2 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getCachedPhoneBook$144(boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        int i2;
        int i3;
        HashMap<String, ContactsController.Contact> hashMap;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor2;
        boolean next;
        int i4 = 6;
        try {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'", new Object[0]);
            try {
                next = queryFinalized2.next();
                queryFinalized2.dispose();
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = sQLiteCursor2;
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
        }
        if (next) {
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1", new Object[0]);
            int min = queryFinalized3.next() ? Math.min(5000, queryFinalized3.intValue(0)) : 16;
            queryFinalized3.dispose();
            SparseArray<ContactsController.Contact> sparseArray = new SparseArray<>(min);
            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1", new Object[0]);
            while (queryFinalized4.next()) {
                try {
                    int intValue = queryFinalized4.intValue(0);
                    ContactsController.Contact contact = sparseArray.get(intValue);
                    if (contact == null) {
                        contact = new ContactsController.Contact();
                        contact.first_name = queryFinalized4.stringValue(1);
                        contact.last_name = queryFinalized4.stringValue(2);
                        contact.imported = queryFinalized4.intValue(i4);
                        if (contact.first_name == null) {
                            contact.first_name = "";
                        }
                        if (contact.last_name == null) {
                            contact.last_name = "";
                        }
                        contact.contact_id = intValue;
                        sparseArray.put(intValue, contact);
                    }
                    String stringValue = queryFinalized4.stringValue(3);
                    if (stringValue != null) {
                        contact.phones.add(stringValue);
                        String stringValue2 = queryFinalized4.stringValue(4);
                        if (stringValue2 != null) {
                            if (stringValue2.length() == 8 && stringValue.length() != 8) {
                                stringValue2 = PhoneFormat.stripExceptNumbers(stringValue);
                            }
                            contact.shortPhones.add(stringValue2);
                            contact.phoneDeleted.add(Integer.valueOf(queryFinalized4.intValue(5)));
                            contact.phoneTypes.add("");
                            if (sparseArray.size() == 5000) {
                                break;
                            }
                            i4 = 6;
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteCursor = queryFinalized4;
                    try {
                        checkSQLException(th);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        try {
                            sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
                            if (sQLiteCursor.next()) {
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            i = 0;
                        }
                        sQLiteCursor.dispose();
                        hashMap = new HashMap<>(i2);
                        try {
                            try {
                                if (i3 == 0) {
                                }
                                sQLiteCursor = queryFinalized;
                                while (sQLiteCursor.next()) {
                                }
                                sQLiteCursor.dispose();
                            } catch (Throwable th5) {
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th5;
                            }
                        } catch (Exception e) {
                            hashMap.clear();
                            checkSQLException(e);
                        }
                        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            }
            queryFinalized4.dispose();
            getContactsController().migratePhoneBookToV7(sparseArray);
            return;
        }
        sQLiteCursor = null;
        sQLiteCursor = this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
        if (sQLiteCursor.next()) {
            i = 0;
            i2 = 16;
            i3 = 0;
        } else {
            i = sQLiteCursor.intValue(0);
            try {
                i2 = Math.min(5000, i);
                i3 = i > 5000 ? i - 5000 : 0;
                try {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(this.currentAccount + " current cached contacts count = " + i);
                    }
                } catch (Throwable th6) {
                    th = th6;
                    try {
                        checkSQLException(th);
                    } finally {
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                i2 = 16;
                i3 = 0;
                checkSQLException(th);
            }
        }
        sQLiteCursor.dispose();
        hashMap = new HashMap<>(i2);
        if (i3 == 0) {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0," + i, new Object[0]);
        } else {
            queryFinalized = this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new Object[0]);
        }
        sQLiteCursor = queryFinalized;
        while (sQLiteCursor.next()) {
            String stringValue3 = sQLiteCursor.stringValue(0);
            ContactsController.Contact contact2 = hashMap.get(stringValue3);
            if (contact2 == null) {
                contact2 = new ContactsController.Contact();
                contact2.contact_id = sQLiteCursor.intValue(1);
                contact2.first_name = sQLiteCursor.stringValue(2);
                contact2.last_name = sQLiteCursor.stringValue(3);
                contact2.imported = sQLiteCursor.intValue(7);
                if (contact2.first_name == null) {
                    contact2.first_name = "";
                }
                if (contact2.last_name == null) {
                    contact2.last_name = "";
                }
                hashMap.put(stringValue3, contact2);
            }
            String stringValue4 = sQLiteCursor.stringValue(4);
            if (stringValue4 != null) {
                contact2.phones.add(stringValue4);
                String stringValue5 = sQLiteCursor.stringValue(5);
                if (stringValue5 != null) {
                    if (stringValue5.length() == 8 && stringValue4.length() != 8) {
                        stringValue5 = PhoneFormat.stripExceptNumbers(stringValue4);
                    }
                    contact2.shortPhones.add(stringValue5);
                    contact2.phoneDeleted.add(Integer.valueOf(sQLiteCursor.intValue(6)));
                    contact2.phoneTypes.add("");
                    if (hashMap.size() == 5000) {
                        break;
                    }
                }
            }
        }
        sQLiteCursor.dispose();
        getContactsController().performSyncPhoneBook(hashMap, true, true, false, false, !z, false);
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getContacts$145();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Not initialized variable reg: 4, insn: 0x0047: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]), block:B:13:0x0047 */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0076  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getContacts$145() {
        SQLiteCursor sQLiteCursor;
        Exception e;
        SQLiteCursor sQLiteCursor2;
        ArrayList<TLRPC$TL_contact> arrayList = new ArrayList<>();
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        SQLiteCursor sQLiteCursor3 = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
                try {
                    ArrayList<Long> arrayList3 = new ArrayList<>();
                    while (sQLiteCursor.next()) {
                        TLRPC$TL_contact tLRPC$TL_contact = new TLRPC$TL_contact();
                        tLRPC$TL_contact.user_id = sQLiteCursor.intValue(0);
                        tLRPC$TL_contact.mutual = sQLiteCursor.intValue(1) == 1;
                        arrayList.add(tLRPC$TL_contact);
                        arrayList3.add(Long.valueOf(tLRPC$TL_contact.user_id));
                    }
                    sQLiteCursor.dispose();
                    if (!arrayList3.isEmpty()) {
                        getUsersInternal(arrayList3, arrayList2);
                    }
                } catch (Exception e2) {
                    e = e2;
                    arrayList.clear();
                    arrayList2.clear();
                    checkSQLException(e);
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor3 = sQLiteCursor2;
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th;
            }
        } catch (Exception e3) {
            sQLiteCursor = null;
            e = e3;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor3 != null) {
            }
            throw th;
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    public void getUnsentMessages(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda185
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnsentMessages$146(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:190:0x046f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getUnsentMessages$146(int i) {
        Throwable th;
        SQLiteCursor sQLiteCursor;
        Exception exc;
        Throwable th2;
        ArrayList<TLRPC$User> arrayList;
        ArrayList<TLRPC$Chat> arrayList2;
        boolean z = false;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList<TLRPC$Message> arrayList3 = new ArrayList<>();
            ArrayList arrayList4 = new ArrayList();
            ArrayList<TLRPC$User> arrayList5 = new ArrayList<>();
            ArrayList<TLRPC$Chat> arrayList6 = new ArrayList<>();
            ArrayList<TLRPC$EncryptedChat> arrayList7 = new ArrayList<>();
            ArrayList<Long> arrayList8 = new ArrayList<>();
            ArrayList arrayList9 = new ArrayList();
            ArrayList arrayList10 = new ArrayList();
            ArrayList arrayList11 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                        TLdeserialize.send_state = queryFinalized.intValue(2);
                        ArrayList<TLRPC$User> arrayList12 = arrayList5;
                        ArrayList<TLRPC$Chat> arrayList13 = arrayList6;
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                            TLdeserialize.id = queryFinalized.intValue(3);
                            TLdeserialize.date = queryFinalized.intValue(4);
                            if (!queryFinalized.isNull(5)) {
                                TLdeserialize.random_id = queryFinalized.longValue(5);
                            }
                            TLdeserialize.dialog_id = queryFinalized.longValue(6);
                            TLdeserialize.seq_in = queryFinalized.intValue(7);
                            TLdeserialize.seq_out = queryFinalized.intValue(8);
                            TLdeserialize.ttl = queryFinalized.intValue(9);
                            if (TLdeserialize.media instanceof TLRPC$TL_messageMediaPaidMedia) {
                                arrayList11.add(TLdeserialize);
                            } else {
                                arrayList3.add(TLdeserialize);
                            }
                            sparseArray.put(TLdeserialize.id, TLdeserialize);
                            if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                int encryptedChatId = DialogObject.getEncryptedChatId(TLdeserialize.dialog_id);
                                if (!arrayList10.contains(Integer.valueOf(encryptedChatId))) {
                                    arrayList10.add(Integer.valueOf(encryptedChatId));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize.dialog_id)) {
                                if (!arrayList8.contains(Long.valueOf(TLdeserialize.dialog_id))) {
                                    arrayList8.add(Long.valueOf(TLdeserialize.dialog_id));
                                }
                            } else if (!arrayList9.contains(Long.valueOf(-TLdeserialize.dialog_id))) {
                                arrayList9.add(Long.valueOf(-TLdeserialize.dialog_id));
                            }
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList8, arrayList9, null);
                            if (TLdeserialize.send_state != 3) {
                                if (TLdeserialize.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                                        }
                                        TLdeserialize.send_state = 0;
                                    }
                                }
                                if (TLdeserialize.id > 0) {
                                    TLdeserialize.send_state = 0;
                                }
                            }
                        }
                        arrayList5 = arrayList12;
                        arrayList6 = arrayList13;
                        z = false;
                    }
                } catch (Exception e) {
                    sQLiteCursor = queryFinalized;
                    exc = e;
                } catch (Throwable th3) {
                    th2 = th3;
                    sQLiteCursor = queryFinalized;
                    th = th2;
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            }
            ArrayList<TLRPC$User> arrayList14 = arrayList5;
            ArrayList<TLRPC$Chat> arrayList15 = arrayList6;
            queryFinalized.dispose();
            if (!arrayList11.isEmpty()) {
                Iterator it = arrayList11.iterator();
                while (it.hasNext()) {
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) it.next();
                    this.database.executeFast("DELETE FROM messages_v2 WHERE uid = " + tLRPC$Message.dialog_id + " AND mid = " + tLRPC$Message.id).stepThis().dispose();
                }
            }
            boolean z2 = false;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
            while (queryFinalized2.next()) {
                try {
                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(z2 ? 1 : 0);
                    if (byteBufferValue2 != null) {
                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z2), z2);
                        TLdeserialize2.send_state = queryFinalized2.intValue(1);
                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                        byteBufferValue2.reuse();
                        if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                            TLdeserialize2.id = queryFinalized2.intValue(2);
                            TLdeserialize2.date = queryFinalized2.intValue(3);
                            if (!queryFinalized2.isNull(4)) {
                                TLdeserialize2.random_id = queryFinalized2.longValue(4);
                            }
                            TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                            TLdeserialize2.ttl = queryFinalized2.intValue(6);
                            arrayList4.add(TLdeserialize2);
                            sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                            if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                                int encryptedChatId2 = DialogObject.getEncryptedChatId(TLdeserialize2.dialog_id);
                                if (!arrayList10.contains(Integer.valueOf(encryptedChatId2))) {
                                    arrayList10.add(Integer.valueOf(encryptedChatId2));
                                }
                            } else if (DialogObject.isUserDialog(TLdeserialize2.dialog_id)) {
                                if (!arrayList8.contains(Long.valueOf(TLdeserialize2.dialog_id))) {
                                    arrayList8.add(Long.valueOf(TLdeserialize2.dialog_id));
                                }
                            } else if (!arrayList9.contains(Long.valueOf(-TLdeserialize2.dialog_id))) {
                                arrayList9.add(Long.valueOf(-TLdeserialize2.dialog_id));
                            }
                            addUsersAndChatsFromMessage(TLdeserialize2, arrayList8, arrayList9, null);
                            if (TLdeserialize2.send_state != 3) {
                                if (TLdeserialize2.peer_id.channel_id == 0) {
                                    if (!MessageObject.isUnread(TLdeserialize2)) {
                                        if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                                        }
                                        TLdeserialize2.send_state = 0;
                                    }
                                }
                                if (TLdeserialize2.id > 0) {
                                    TLdeserialize2.send_state = 0;
                                }
                            }
                        }
                        z2 = false;
                    }
                } catch (Exception e2) {
                    e = e2;
                } catch (Throwable th4) {
                    th = th4;
                }
            }
            queryFinalized2.dispose();
            getUserConfig().getClientUserId();
            boolean z3 = false;
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, m.topic_id, m.ttl FROM quick_replies_messages as m WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY mid DESC", new Object[0]);
            while (queryFinalized3.next()) {
                NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(z3 ? 1 : 0);
                if (byteBufferValue3 != null) {
                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(z3), z3);
                    TLdeserialize3.send_state = queryFinalized3.intValue(1);
                    TLdeserialize3.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                    byteBufferValue3.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize3.id) < 0) {
                        TLdeserialize3.id = queryFinalized3.intValue(2);
                        int intValue = queryFinalized3.intValue(4);
                        try {
                            SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT name FROM business_replies WHERE topic_id = ?", Integer.valueOf(intValue));
                            String stringValue = queryFinalized4.next() ? queryFinalized4.stringValue(1) : null;
                            queryFinalized4.dispose();
                            if (stringValue == null) {
                                this.database.executeFast("DELETE FROM quick_replies_messages WHERE mid = " + TLdeserialize3.id + " AND topic_id = " + intValue).stepThis().dispose();
                            } else {
                                TLRPC$TL_inputQuickReplyShortcut tLRPC$TL_inputQuickReplyShortcut = new TLRPC$TL_inputQuickReplyShortcut();
                                tLRPC$TL_inputQuickReplyShortcut.shortcut = stringValue;
                                TLdeserialize3.quick_reply_shortcut = tLRPC$TL_inputQuickReplyShortcut;
                                TLdeserialize3.quick_reply_shortcut_id = intValue;
                                if (intValue != 0) {
                                    TLdeserialize3.flags |= 1073741824;
                                }
                                TLdeserialize3.date = queryFinalized3.intValue(3);
                                TLdeserialize3.ttl = queryFinalized3.intValue(5);
                                arrayList4.add(TLdeserialize3);
                                sparseArray.put(TLdeserialize3.id, TLdeserialize3);
                                if (DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) {
                                    int encryptedChatId3 = DialogObject.getEncryptedChatId(TLdeserialize3.dialog_id);
                                    if (!arrayList10.contains(Integer.valueOf(encryptedChatId3))) {
                                        arrayList10.add(Integer.valueOf(encryptedChatId3));
                                    }
                                } else if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                                    if (!arrayList8.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                        arrayList8.add(Long.valueOf(TLdeserialize3.dialog_id));
                                    }
                                } else if (!arrayList9.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                                    arrayList9.add(Long.valueOf(-TLdeserialize3.dialog_id));
                                }
                                addUsersAndChatsFromMessage(TLdeserialize3, arrayList8, arrayList9, null);
                                if (TLdeserialize3.send_state != 3) {
                                    if (TLdeserialize3.peer_id.channel_id == 0) {
                                        if (!MessageObject.isUnread(TLdeserialize3)) {
                                            if (DialogObject.isEncryptedDialog(TLdeserialize3.dialog_id)) {
                                            }
                                            TLdeserialize3.send_state = 0;
                                        }
                                    }
                                    if (TLdeserialize3.id > 0) {
                                        TLdeserialize3.send_state = 0;
                                    }
                                }
                            }
                        } catch (Exception e3) {
                            e = e3;
                            exc = e;
                            sQLiteCursor = queryFinalized3;
                            try {
                                checkSQLException(exc);
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th5) {
                                th2 = th5;
                                th = th2;
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th6) {
                            th = th6;
                            th = th;
                            sQLiteCursor = queryFinalized3;
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    }
                    z3 = false;
                }
            }
            queryFinalized3.dispose();
            if (!arrayList10.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList10), arrayList7, arrayList8);
            }
            if (arrayList8.isEmpty()) {
                arrayList = arrayList14;
            } else {
                arrayList = arrayList14;
                getUsersInternal(arrayList8, arrayList);
            }
            if (arrayList9.isEmpty()) {
                arrayList2 = arrayList15;
            } else {
                StringBuilder sb = new StringBuilder();
                for (int i2 = 0; i2 < arrayList9.size(); i2++) {
                    Long l = (Long) arrayList9.get(i2);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(l);
                }
                arrayList2 = arrayList15;
                getChatsInternal(sb.toString(), arrayList2);
            }
            getSendMessagesHelper().processUnsentMessages(arrayList3, arrayList4, arrayList, arrayList2, arrayList7);
        } catch (Exception e4) {
            exc = e4;
            sQLiteCursor = null;
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
        }
    }

    public boolean checkMessageByRandomId(final long j) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda151
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageByRandomId$147(j, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x002a, code lost:
        if (r2 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageByRandomId$147(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT random_id FROM randoms_v2 WHERE random_id = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean checkMessageId(final long j, final int i) {
        final boolean[] zArr = new boolean[1];
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda168
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkMessageId$148(j, i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r2 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkMessageId$148(long j, int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                if (sQLiteCursor.next()) {
                    zArr[0] = true;
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getUnreadMention(final long j, final long j2, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUnreadMention$150(j2, j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnreadMention$150(long j, long j2, final IntCallback intCallback) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (j != 0) {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", Long.valueOf(j2)), new Object[0]);
                }
                sQLiteCursor = queryFinalized;
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda210
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getMessagesCount(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda145
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessagesCount$152(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesCount$152(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d", Long.valueOf(j)), new Object[0]);
                final int intValue = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : 0;
                sQLiteCursor.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda10
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(intValue);
                    }
                });
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:20:0x008c
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:81)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:47)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    public java.lang.Runnable getMessagesInternal(long r66, long r68, int r70, int r71, int r72, int r73, int r74, int r75, int r76, long r77, int r79, boolean r80, boolean r81, org.telegram.messenger.Timer r82) {
        /*
            Method dump skipped, instructions count: 9622
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, int, long, int, boolean, boolean, org.telegram.messenger.Timer):java.lang.Runnable");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$getMessagesInternal$153(TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
        int i;
        int i2;
        int i3 = tLRPC$Message.id;
        if (i3 > 0 && (i2 = tLRPC$Message2.id) > 0) {
            if (i3 > i2) {
                return -1;
            }
            return i3 < i2 ? 1 : 0;
        } else if (i3 < 0 && (i = tLRPC$Message2.id) < 0) {
            if (i3 < i) {
                return -1;
            }
            return i3 > i ? 1 : 0;
        } else {
            int i4 = tLRPC$Message.date;
            int i5 = tLRPC$Message2.date;
            if (i4 > i5) {
                return -1;
            }
            return i4 < i5 ? 1 : 0;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesInternal$154(TLRPC$TL_messages_messages tLRPC$TL_messages_messages, int i, long j, long j2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z, int i11, long j3, int i12, boolean z2, int i13, boolean z3, boolean z4, Timer timer) {
        getMessagesController().processLoadedMessages(tLRPC$TL_messages_messages, i, j, j2, i2, i3, i4, true, i5, i6, i7, i8, i9, i10, z, i11, j3, i12, z2, i13, z3, z4, timer);
    }

    public void getAnimatedEmoji(String str, ArrayList<TLRPC$Document> arrayList) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM animated_emoji WHERE document_id IN (%s)", str), new Object[0]);
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                    try {
                        TLRPC$Document TLdeserialize = TLRPC$Document.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                        if (TLdeserialize != null && TLdeserialize.id != 0) {
                            arrayList.add(TLdeserialize);
                        }
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                    if (byteBufferValue != null) {
                        byteBufferValue.reuse();
                    }
                }
            } catch (SQLiteException e2) {
                e2.printStackTrace();
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void getMessages(final long j, final long j2, boolean z, final int i, final int i2, final int i3, final int i4, final int i5, final int i6, final int i7, final long j3, final int i8, final boolean z2, final boolean z3, final Timer timer) {
        final Timer.Task start = Timer.start(timer, "MessagesStorage.getMessages: storageQueue.postRunnable");
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda155
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getMessages$156(start, timer, j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z2, z3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessages$156(Timer.Task task, Timer timer, long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, long j3, int i8, boolean z, boolean z2) {
        Timer.done(task);
        Timer.Task start = Timer.start(timer, "MessagesStorage.getMessages");
        final Runnable messagesInternal = getMessagesInternal(j, j2, i, i2, i3, i4, i5, i6, i7, j3, i8, z, z2, timer);
        Timer.done(start);
        final Timer.Task start2 = Timer.start(timer, "MessagesStorage.getMessages: stageQueue.postRunnable");
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda171
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.lambda$getMessages$155(Timer.Task.this, messagesInternal);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getMessages$155(Timer.Task task, Runnable runnable) {
        Timer.done(task);
        runnable.run();
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearSentMedia$157();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearSentMedia$157() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public Object[] getSentFile(final String str, final int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda119
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getSentFile$158(str, i, objArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getSentFile$158(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", MD5, Integer.valueOf(i)), new Object[0]);
                    if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                        TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize instanceof TLRPC$TL_messageMediaDocument) {
                            objArr[0] = ((TLRPC$TL_messageMediaDocument) TLdeserialize).document;
                        } else if (TLdeserialize instanceof TLRPC$TL_messageMediaPhoto) {
                            objArr[0] = ((TLRPC$TL_messageMediaPhoto) TLdeserialize).photo;
                        }
                        if (objArr[0] != null) {
                            objArr[1] = queryFinalized.stringValue(1);
                        }
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            countDownLatch.countDown();
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
    }

    private void updateWidgets(long j) {
        ArrayList<Long> arrayList = new ArrayList<>();
        arrayList.add(Long.valueOf(j));
        updateWidgets(arrayList);
    }

    private void updateWidgets(ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        try {
            TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT DISTINCT id FROM shortcut_widget WHERE did IN(%s,-1)", TextUtils.join(",", arrayList)), new Object[0]);
            AppWidgetManager appWidgetManager = null;
            while (queryFinalized.next()) {
                if (appWidgetManager == null) {
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                appWidgetManager.notifyAppWidgetViewDataChanged(queryFinalized.intValue(0), R.id.list_view);
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void putWidgetDialogs(final int i, final ArrayList<TopicKey> arrayList) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda208
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWidgetDialogs$159(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWidgetDialogs$159(int i, ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO shortcut_widget VALUES(?, ?, ?)");
            if (arrayList.isEmpty()) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, -1L);
                executeFast.bindInteger(3, 0);
                executeFast.step();
            } else {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long j = ((TopicKey) arrayList.get(i2)).dialogId;
                    executeFast.requery();
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, j);
                    executeFast.bindInteger(3, i2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void clearWidgetDialogs(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda236
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearWidgetDialogs$160(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearWidgetDialogs$160(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getWidgetDialogIds(final int i, final int i2, final ArrayList<Long> arrayList, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final boolean z) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda165
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogIds$161(i, arrayList, arrayList2, arrayList3, z, i2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogIds$161(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, boolean z, int i2, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue)) {
                                    arrayList4.add(Long.valueOf(longValue));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue));
                                }
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.isEmpty()) {
                    if (i2 == 0) {
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = 0 ORDER BY pinned DESC, date DESC LIMIT 0,10", new Object[0]);
                        while (queryFinalized2.next()) {
                            long longValue2 = queryFinalized2.longValue(0);
                            if (!DialogObject.isFolderDialogId(longValue2)) {
                                arrayList.add(Long.valueOf(longValue2));
                                if (arrayList2 != null && arrayList3 != null) {
                                    if (DialogObject.isUserDialog(longValue2)) {
                                        arrayList4.add(Long.valueOf(longValue2));
                                    } else {
                                        arrayList5.add(Long.valueOf(-longValue2));
                                    }
                                }
                            }
                        }
                        queryFinalized2.dispose();
                    } else {
                        SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                        while (queryFinalized3.next()) {
                            long longValue3 = queryFinalized3.longValue(0);
                            arrayList.add(Long.valueOf(longValue3));
                            if (arrayList2 != null && arrayList3 != null) {
                                if (DialogObject.isUserDialog(longValue3)) {
                                    arrayList4.add(Long.valueOf(longValue3));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue3));
                                }
                            }
                        }
                        queryFinalized3.dispose();
                    }
                }
                if (arrayList2 != null && arrayList3 != null) {
                    if (!arrayList5.isEmpty()) {
                        getChatsInternal(TextUtils.join(",", arrayList5), arrayList3);
                    }
                    if (!arrayList4.isEmpty()) {
                        getUsersInternal(arrayList4, arrayList2);
                    }
                }
            } catch (Exception e2) {
                e = e2;
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void getWidgetDialogs(final int i, final int i2, final ArrayList<Long> arrayList, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<TLRPC$Message> longSparseArray2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda129
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getWidgetDialogs$162(i, arrayList, i2, longSparseArray, longSparseArray2, arrayList3, arrayList2, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogs$162(int i, ArrayList arrayList, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList arrayList2, ArrayList arrayList3, CountDownLatch countDownLatch) {
        SQLiteCursor queryFinalized;
        boolean z;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                ArrayList<Long> arrayList4 = new ArrayList<>();
                ArrayList arrayList5 = new ArrayList();
                SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized2.next()) {
                    try {
                        long longValue = queryFinalized2.longValue(0);
                        if (longValue != -1) {
                            arrayList.add(Long.valueOf(longValue));
                            if (DialogObject.isUserDialog(longValue)) {
                                arrayList4.add(Long.valueOf(longValue));
                            } else {
                                arrayList5.add(Long.valueOf(-longValue));
                            }
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        countDownLatch.countDown();
                        throw th;
                    }
                }
                queryFinalized2.dispose();
                if (arrayList.isEmpty() && i2 == 1) {
                    SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                    while (queryFinalized3.next()) {
                        long longValue2 = queryFinalized3.longValue(0);
                        arrayList.add(Long.valueOf(longValue2));
                        if (DialogObject.isUserDialog(longValue2)) {
                            arrayList4.add(Long.valueOf(longValue2));
                        } else {
                            arrayList5.add(Long.valueOf(-longValue2));
                        }
                    }
                    queryFinalized3.dispose();
                }
                if (arrayList.isEmpty()) {
                    queryFinalized = this.database.queryFinalized("SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.folder_id = 0 ORDER BY d.pinned DESC, d.date DESC LIMIT 0,10", new Object[0]);
                    z = true;
                } else {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                    z = false;
                }
                while (queryFinalized.next()) {
                    long longValue3 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue3)) {
                        if (z) {
                            arrayList.add(Long.valueOf(longValue3));
                        }
                        TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog.id = longValue3;
                        tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                        tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                        tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                        longSparseArray.put(tLRPC$TL_dialog.id, tLRPC$TL_dialog);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(4);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                            TLdeserialize.id = queryFinalized.intValue(6);
                            TLdeserialize.send_state = queryFinalized.intValue(7);
                            int intValue = queryFinalized.intValue(8);
                            if (intValue != 0) {
                                tLRPC$TL_dialog.last_message_date = intValue;
                            }
                            long j = tLRPC$TL_dialog.id;
                            TLdeserialize.dialog_id = j;
                            longSparseArray2.put(j, TLdeserialize);
                            addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5, null);
                        }
                    }
                }
                queryFinalized.dispose();
                if (!z && arrayList.size() > longSparseArray.size()) {
                    int size = arrayList.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        Long l = (Long) arrayList.get(i3);
                        long longValue4 = l.longValue();
                        if (longSparseArray.get(((Long) arrayList.get(i3)).longValue()) == null) {
                            TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog2.id = longValue4;
                            longSparseArray.put(longValue4, tLRPC$TL_dialog2);
                            if (DialogObject.isChatDialog(longValue4)) {
                                long j2 = -longValue4;
                                if (arrayList5.contains(Long.valueOf(j2))) {
                                    arrayList5.add(Long.valueOf(j2));
                                }
                            } else if (arrayList4.contains(l)) {
                                arrayList4.add(l);
                            }
                        }
                    }
                }
                if (!arrayList5.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList5), arrayList2);
                }
                if (!arrayList4.isEmpty()) {
                    getUsersInternal(arrayList4, arrayList3);
                }
            } catch (Exception e2) {
                e = e2;
            }
            countDownLatch.countDown();
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void putSentFile(final String str, final TLObject tLObject, final int i, final String str2) {
        if (str == null || tLObject == null || str2 == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putSentFile$163(str, tLObject, i, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putSentFile$163(String str, TLObject tLObject, int i, String str2) {
        TLRPC$MessageMedia tLRPC$MessageMedia;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                String MD5 = Utilities.MD5(str);
                if (MD5 != null) {
                    if (tLObject instanceof TLRPC$Photo) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaPhoto();
                        tLRPC$MessageMedia.photo = (TLRPC$Photo) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else if (tLObject instanceof TLRPC$Document) {
                        tLRPC$MessageMedia = new TLRPC$TL_messageMediaDocument();
                        tLRPC$MessageMedia.document = (TLRPC$Document) tLObject;
                        tLRPC$MessageMedia.flags |= 1;
                    } else {
                        tLRPC$MessageMedia = null;
                    }
                    if (tLRPC$MessageMedia == null) {
                        return;
                    }
                    sQLitePreparedStatement = this.database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)");
                    sQLitePreparedStatement.requery();
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageMedia.getObjectSize());
                    tLRPC$MessageMedia.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindString(1, MD5);
                    sQLitePreparedStatement.bindInteger(2, i);
                    sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer);
                    sQLitePreparedStatement.bindString(4, str2);
                    sQLitePreparedStatement.step();
                    nativeByteBuffer.reuse();
                }
                if (sQLitePreparedStatement == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatSeq(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final boolean z) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda125
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatSeq$164(tLRPC$EncryptedChat, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatSeq$164(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(3, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                if (z && tLRPC$EncryptedChat.in_seq_no != 0) {
                    long encryptedChatId = DialogObject.getEncryptedChatId(tLRPC$EncryptedChat.id);
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM messages_v2 WHERE mid IN (SELECT m.mid FROM messages_v2 as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d) AND uid = %d", Long.valueOf(encryptedChatId), Integer.valueOf(tLRPC$EncryptedChat.in_seq_no), Long.valueOf(encryptedChatId))).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatTTL(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatTTL$165(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatTTL$165(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChatLayer(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda175
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChatLayer$166(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatLayer$166(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
                sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void updateEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda148
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateEncryptedChat$167(tLRPC$EncryptedChat);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0033 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0035  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x003f A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x004b A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:26:0x004d  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0057 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0059  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0067 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x006e A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0075 A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x007c A[Catch: all -> 0x000b, Exception -> 0x000e, TryCatch #0 {Exception -> 0x000e, blocks: (B:3:0x0001, B:5:0x0007, B:15:0x001b, B:17:0x0033, B:19:0x0036, B:21:0x003f, B:23:0x0042, B:25:0x004b, B:27:0x004e, B:29:0x0057, B:31:0x005a, B:33:0x0067, B:34:0x006a, B:36:0x006e, B:37:0x0071, B:39:0x0075, B:40:0x0078, B:42:0x007c, B:43:0x007f, B:12:0x0011, B:14:0x0015), top: B:52:0x0001, outer: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateEncryptedChat$167(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        byte[] bArr;
        byte[] bArr2;
        byte[] bArr3;
        byte[] bArr4;
        byte[] bArr5;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                bArr = tLRPC$EncryptedChat.key_hash;
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            if (bArr != null) {
                if (bArr.length < 16) {
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr6 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr6 == null ? bArr6.length : 1);
                byte[] bArr7 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr7 == null ? bArr7.length : 1);
                byte[] bArr8 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr8 == null ? bArr8.length : 1);
                byte[] bArr9 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr9 == null ? bArr9.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                bArr2 = tLRPC$EncryptedChat.a_or_b;
                if (bArr2 != null) {
                    nativeByteBuffer2.writeBytes(bArr2);
                }
                bArr3 = tLRPC$EncryptedChat.auth_key;
                if (bArr3 != null) {
                    nativeByteBuffer3.writeBytes(bArr3);
                }
                bArr4 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr4 != null) {
                    nativeByteBuffer4.writeBytes(bArr4);
                }
                bArr5 = tLRPC$EncryptedChat.key_hash;
                if (bArr5 != null) {
                    nativeByteBuffer5.writeBytes(bArr5);
                }
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
                sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
                sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
                sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
                sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
                sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
                sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
                sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
                sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
                sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
                sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
                sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
                sQLitePreparedStatement.bindLong(15, tLRPC$EncryptedChat.admin_id);
                sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
                sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
                sQLitePreparedStatement.step();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                sQLitePreparedStatement.dispose();
            }
            byte[] bArr10 = tLRPC$EncryptedChat.auth_key;
            if (bArr10 != null) {
                tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr10);
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
            NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            byte[] bArr62 = tLRPC$EncryptedChat.a_or_b;
            NativeByteBuffer nativeByteBuffer22 = new NativeByteBuffer(bArr62 == null ? bArr62.length : 1);
            byte[] bArr72 = tLRPC$EncryptedChat.auth_key;
            NativeByteBuffer nativeByteBuffer32 = new NativeByteBuffer(bArr72 == null ? bArr72.length : 1);
            byte[] bArr82 = tLRPC$EncryptedChat.future_auth_key;
            NativeByteBuffer nativeByteBuffer42 = new NativeByteBuffer(bArr82 == null ? bArr82.length : 1);
            byte[] bArr92 = tLRPC$EncryptedChat.key_hash;
            NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(bArr92 == null ? bArr92.length : 1);
            tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer6);
            sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer6);
            bArr2 = tLRPC$EncryptedChat.a_or_b;
            if (bArr2 != null) {
            }
            bArr3 = tLRPC$EncryptedChat.auth_key;
            if (bArr3 != null) {
            }
            bArr4 = tLRPC$EncryptedChat.future_auth_key;
            if (bArr4 != null) {
            }
            bArr5 = tLRPC$EncryptedChat.key_hash;
            if (bArr5 != null) {
            }
            sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer22);
            sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer32);
            sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
            sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
            sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
            sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
            sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer42);
            sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer52);
            sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
            sQLitePreparedStatement.bindLong(15, tLRPC$EncryptedChat.admin_id);
            sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            nativeByteBuffer6.reuse();
            nativeByteBuffer22.reuse();
            nativeByteBuffer32.reuse();
            nativeByteBuffer42.reuse();
            nativeByteBuffer52.reuse();
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void isDialogHasTopMessage(final long j, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$isDialogHasTopMessage$168(j, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:13:0x0030, code lost:
        if (r2 == null) goto L8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:6:0x0025, code lost:
        if (r2.intValue(0) != 0) goto L7;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$isDialogHasTopMessage$168(long j, Runnable runnable) {
        boolean z = true;
        boolean z2 = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", Long.valueOf(j)), new Object[0]);
                if (sQLiteCursor.next()) {
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            z = false;
            sQLiteCursor.dispose();
            z2 = z;
            if (z2) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public boolean hasAuthMessage(final int i) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda174
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$hasAuthMessage$169(i, zArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return zArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:10:0x002e, code lost:
        if (r1 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$hasAuthMessage$169(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", Integer.valueOf(i)), new Object[0]);
                zArr[0] = sQLiteCursor.next();
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            countDownLatch.countDown();
            throw th;
        }
    }

    public void getEncryptedChat(final long j, final CountDownLatch countDownLatch, final ArrayList<TLObject> arrayList) {
        if (countDownLatch == null || arrayList == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getEncryptedChat$170(j, arrayList, countDownLatch);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getEncryptedChat$170(long j, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            try {
                ArrayList<Long> arrayList2 = new ArrayList<>();
                ArrayList<TLRPC$EncryptedChat> arrayList3 = new ArrayList<>();
                getEncryptedChatsInternal("" + j, arrayList3, arrayList2);
                if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                    ArrayList<TLRPC$User> arrayList4 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList4);
                    if (!arrayList4.isEmpty()) {
                        arrayList.add(arrayList3.get(0));
                        arrayList.add(arrayList4.get(0));
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        } finally {
            countDownLatch.countDown();
        }
    }

    public void putEncryptedChat(final TLRPC$EncryptedChat tLRPC$EncryptedChat, final TLRPC$User tLRPC$User, final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda177
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putEncryptedChat$171(tLRPC$EncryptedChat, tLRPC$User, tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:18:0x003c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:23:0x0046  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0050 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0052  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x005c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0068 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:35:0x006a  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x008c A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0093 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x009a A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00a1 A[Catch: all -> 0x003e, Exception -> 0x0042, TryCatch #4 {Exception -> 0x0042, all -> 0x003e, blocks: (B:16:0x002c, B:18:0x003c, B:24:0x0047, B:26:0x0050, B:28:0x0053, B:30:0x005c, B:32:0x005f, B:34:0x0068, B:36:0x006b, B:38:0x008c, B:39:0x008f, B:41:0x0093, B:42:0x0096, B:44:0x009a, B:45:0x009d, B:47:0x00a1, B:48:0x00a4, B:52:0x0123), top: B:66:0x002c }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x011b A[Catch: all -> 0x0012, Exception -> 0x0016, TRY_LEAVE, TryCatch #5 {Exception -> 0x0016, all -> 0x0012, blocks: (B:3:0x0008, B:5:0x000e, B:15:0x0024, B:49:0x010a, B:51:0x011b, B:12:0x001a, B:14:0x001e), top: B:64:0x0008 }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0199  */
    /* JADX WARN: Removed duplicated region for block: B:68:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putEncryptedChat$171(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        byte[] bArr2;
        byte[] bArr3;
        byte[] bArr4;
        byte[] bArr5;
        try {
            bArr = tLRPC$EncryptedChat.key_hash;
        } catch (Exception e) {
            e = e;
            sQLitePreparedStatement = null;
        } catch (Throwable th) {
            th = th;
            sQLitePreparedStatement = null;
        }
        try {
            if (bArr != null) {
                if (bArr.length < 16) {
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
                byte[] bArr6 = tLRPC$EncryptedChat.a_or_b;
                NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr6 == null ? bArr6.length : 1);
                byte[] bArr7 = tLRPC$EncryptedChat.auth_key;
                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr7 == null ? bArr7.length : 1);
                byte[] bArr8 = tLRPC$EncryptedChat.future_auth_key;
                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr8 == null ? bArr8.length : 1);
                byte[] bArr9 = tLRPC$EncryptedChat.key_hash;
                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr9 == null ? bArr9.length : 1);
                tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$EncryptedChat.id);
                executeFast.bindLong(2, tLRPC$User.id);
                executeFast.bindString(3, formatUserSearchName(tLRPC$User));
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                bArr2 = tLRPC$EncryptedChat.a_or_b;
                if (bArr2 != null) {
                    nativeByteBuffer2.writeBytes(bArr2);
                }
                bArr3 = tLRPC$EncryptedChat.auth_key;
                if (bArr3 != null) {
                    nativeByteBuffer3.writeBytes(bArr3);
                }
                bArr4 = tLRPC$EncryptedChat.future_auth_key;
                if (bArr4 != null) {
                    nativeByteBuffer4.writeBytes(bArr4);
                }
                bArr5 = tLRPC$EncryptedChat.key_hash;
                if (bArr5 != null) {
                    nativeByteBuffer5.writeBytes(bArr5);
                }
                executeFast.bindByteBuffer(5, nativeByteBuffer2);
                executeFast.bindByteBuffer(6, nativeByteBuffer3);
                executeFast.bindInteger(7, tLRPC$EncryptedChat.ttl);
                executeFast.bindInteger(8, tLRPC$EncryptedChat.layer);
                executeFast.bindInteger(9, tLRPC$EncryptedChat.seq_in);
                executeFast.bindInteger(10, tLRPC$EncryptedChat.seq_out);
                executeFast.bindInteger(11, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
                executeFast.bindLong(12, tLRPC$EncryptedChat.exchange_id);
                executeFast.bindInteger(13, tLRPC$EncryptedChat.key_create_date);
                executeFast.bindLong(14, tLRPC$EncryptedChat.future_key_fingerprint);
                executeFast.bindByteBuffer(15, nativeByteBuffer4);
                executeFast.bindByteBuffer(16, nativeByteBuffer5);
                executeFast.bindInteger(17, tLRPC$EncryptedChat.in_seq_no);
                executeFast.bindLong(18, tLRPC$EncryptedChat.admin_id);
                executeFast.bindInteger(19, tLRPC$EncryptedChat.mtproto_seq);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                nativeByteBuffer2.reuse();
                nativeByteBuffer3.reuse();
                nativeByteBuffer4.reuse();
                nativeByteBuffer5.reuse();
                if (tLRPC$Dialog == null) {
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    executeFast2.bindLong(1, tLRPC$Dialog.id);
                    executeFast2.bindInteger(2, tLRPC$Dialog.last_message_date);
                    executeFast2.bindInteger(3, tLRPC$Dialog.unread_count);
                    executeFast2.bindInteger(4, tLRPC$Dialog.top_message);
                    executeFast2.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                    executeFast2.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                    executeFast2.bindInteger(7, 0);
                    executeFast2.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                    executeFast2.bindInteger(9, tLRPC$Dialog.pts);
                    executeFast2.bindInteger(10, 0);
                    executeFast2.bindInteger(11, tLRPC$Dialog.pinnedNum);
                    executeFast2.bindInteger(12, tLRPC$Dialog.flags);
                    executeFast2.bindInteger(13, tLRPC$Dialog.folder_id);
                    executeFast2.bindNull(14);
                    executeFast2.bindInteger(15, tLRPC$Dialog.unread_reactions_count);
                    executeFast2.bindInteger(16, 0);
                    executeFast2.bindInteger(17, tLRPC$Dialog.ttl_period);
                    executeFast2.step();
                    executeFast2.dispose();
                    return;
                }
                return;
            }
            NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            byte[] bArr62 = tLRPC$EncryptedChat.a_or_b;
            NativeByteBuffer nativeByteBuffer22 = new NativeByteBuffer(bArr62 == null ? bArr62.length : 1);
            byte[] bArr72 = tLRPC$EncryptedChat.auth_key;
            NativeByteBuffer nativeByteBuffer32 = new NativeByteBuffer(bArr72 == null ? bArr72.length : 1);
            byte[] bArr82 = tLRPC$EncryptedChat.future_auth_key;
            NativeByteBuffer nativeByteBuffer42 = new NativeByteBuffer(bArr82 == null ? bArr82.length : 1);
            byte[] bArr92 = tLRPC$EncryptedChat.key_hash;
            NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(bArr92 == null ? bArr92.length : 1);
            tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer6);
            executeFast.bindInteger(1, tLRPC$EncryptedChat.id);
            executeFast.bindLong(2, tLRPC$User.id);
            executeFast.bindString(3, formatUserSearchName(tLRPC$User));
            executeFast.bindByteBuffer(4, nativeByteBuffer6);
            bArr2 = tLRPC$EncryptedChat.a_or_b;
            if (bArr2 != null) {
            }
            bArr3 = tLRPC$EncryptedChat.auth_key;
            if (bArr3 != null) {
            }
            bArr4 = tLRPC$EncryptedChat.future_auth_key;
            if (bArr4 != null) {
            }
            bArr5 = tLRPC$EncryptedChat.key_hash;
            if (bArr5 != null) {
            }
            executeFast.bindByteBuffer(5, nativeByteBuffer22);
            executeFast.bindByteBuffer(6, nativeByteBuffer32);
            executeFast.bindInteger(7, tLRPC$EncryptedChat.ttl);
            executeFast.bindInteger(8, tLRPC$EncryptedChat.layer);
            executeFast.bindInteger(9, tLRPC$EncryptedChat.seq_in);
            executeFast.bindInteger(10, tLRPC$EncryptedChat.seq_out);
            executeFast.bindInteger(11, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            executeFast.bindLong(12, tLRPC$EncryptedChat.exchange_id);
            executeFast.bindInteger(13, tLRPC$EncryptedChat.key_create_date);
            executeFast.bindLong(14, tLRPC$EncryptedChat.future_key_fingerprint);
            executeFast.bindByteBuffer(15, nativeByteBuffer42);
            executeFast.bindByteBuffer(16, nativeByteBuffer52);
            executeFast.bindInteger(17, tLRPC$EncryptedChat.in_seq_no);
            executeFast.bindLong(18, tLRPC$EncryptedChat.admin_id);
            executeFast.bindInteger(19, tLRPC$EncryptedChat.mtproto_seq);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer6.reuse();
            nativeByteBuffer22.reuse();
            nativeByteBuffer32.reuse();
            nativeByteBuffer42.reuse();
            nativeByteBuffer52.reuse();
            if (tLRPC$Dialog == null) {
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = sQLitePreparedStatement3;
            try {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                    return;
                }
                return;
            } catch (Throwable th2) {
                th = th2;
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            sQLitePreparedStatement = sQLitePreparedStatement2;
            if (sQLitePreparedStatement != null) {
            }
            throw th;
        }
        byte[] bArr10 = tLRPC$EncryptedChat.auth_key;
        if (bArr10 != null) {
            tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr10);
        }
        SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    }

    private String formatUserSearchName(TLRPC$User tLRPC$User) {
        StringBuilder sb = new StringBuilder();
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            sb.append(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(tLRPC$User.last_name);
        }
        sb.append(";;;");
        String str3 = tLRPC$User.username;
        if (str3 != null && str3.length() > 0) {
            sb.append(tLRPC$User.username);
        } else {
            ArrayList<TLRPC$TL_username> arrayList = tLRPC$User.usernames;
            if (arrayList != null && arrayList.size() > 0) {
                for (int i = 0; i < tLRPC$User.usernames.size(); i++) {
                    TLRPC$TL_username tLRPC$TL_username = tLRPC$User.usernames.get(i);
                    if (tLRPC$TL_username != null && tLRPC$TL_username.active) {
                        sb.append(tLRPC$TL_username.username);
                        sb.append(";;");
                    }
                }
            }
        }
        return sb.toString().toLowerCase();
    }

    public boolean containsLocalDialog(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Boolean[] boolArr = {Boolean.FALSE};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda164
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$containsLocalDialog$172(j, boolArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return boolArr[0].booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x002f, code lost:
        if (r0 == null) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$containsLocalDialog$172(long j, Boolean[] boolArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT date FROM dialogs WHERE did = " + j, new Object[0]);
                boolArr[0] = Boolean.valueOf(sQLiteCursor.next());
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    private void putUsersInternal(List<TLRPC$User> list) throws Exception {
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
        for (int i = 0; i < list.size(); i++) {
            TLRPC$User tLRPC$User = list.get(i);
            if (tLRPC$User != null) {
                if (tLRPC$User.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", Long.valueOf(tLRPC$User.id)), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    String str = tLRPC$User.username;
                                    if (str != null) {
                                        TLdeserialize.username = str;
                                        TLdeserialize.flags |= 8;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -9;
                                    }
                                    if (tLRPC$User.apply_min_photo) {
                                        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                                        if (tLRPC$UserProfilePhoto != null) {
                                            TLdeserialize.photo = tLRPC$UserProfilePhoto;
                                            TLdeserialize.flags |= 32;
                                        } else {
                                            TLdeserialize.photo = null;
                                            TLdeserialize.flags &= -33;
                                        }
                                    }
                                    tLRPC$User = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            checkSQLException(e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$User.getObjectSize());
                tLRPC$User.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$User.id);
                executeFast.bindString(2, formatUserSearchName(tLRPC$User));
                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                if (tLRPC$UserStatus != null) {
                    if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1000 : -100;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1001 : -101;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                        tLRPC$UserStatus.expires = tLRPC$UserStatus.by_me ? -1002 : -102;
                    }
                    executeFast.bindInteger(3, tLRPC$UserStatus.expires);
                } else {
                    executeFast.bindInteger(3, 0);
                }
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
        }
        executeFast.dispose();
    }

    public void updateChatDefaultBannedRights(final long j, final TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final int i) {
        if (tLRPC$TL_chatBannedRights == null || j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateChatDefaultBannedRights$173(j, i, tLRPC$TL_chatBannedRights);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0097  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x009c  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00a7  */
    /* JADX WARN: Removed duplicated region for block: B:64:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r8v12 */
    /* JADX WARN: Type inference failed for: r8v17, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r8v5, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateChatDefaultBannedRights$173(long j, int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights) {
        SQLiteCursor queryFinalized;
        TLRPC$Chat tLRPC$Chat;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
            } catch (Throwable th) {
                th = th;
            }
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(j)), new Object[0]);
            } catch (Exception e) {
                e = e;
                j = 0;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (j == 0) {
                }
            } catch (Throwable th2) {
                th = th2;
                j = 0;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                if (j != 0) {
                    j.dispose();
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
        } catch (Throwable th3) {
            th = th3;
        }
        try {
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$Chat = null;
            } else {
                tLRPC$Chat = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$Chat != null) {
                if (tLRPC$Chat.default_banned_rights == null || i >= tLRPC$Chat.version) {
                    tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights;
                    tLRPC$Chat.flags |= 262144;
                    tLRPC$Chat.version = i;
                    j = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                    try {
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                        tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        j.bindByteBuffer(1, nativeByteBuffer);
                        j.bindLong(2, tLRPC$Chat.id);
                        j.step();
                        nativeByteBuffer.reuse();
                        j.dispose();
                    } catch (Exception e3) {
                        e = e3;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (j == 0) {
                            j.dispose();
                        }
                    }
                }
            }
        } catch (Exception e4) {
            e = e4;
            sQLiteCursor = queryFinalized;
            j = 0;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = queryFinalized;
            j = 0;
            if (sQLiteCursor != null) {
            }
            if (j != 0) {
            }
            throw th;
        }
    }

    private void putChatsInternal(List<TLRPC$Chat> list) throws Exception {
        if (list == null || list.isEmpty()) {
            return;
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
        for (int i = 0; i < list.size(); i++) {
            TLRPC$Chat tLRPC$Chat = list.get(i);
            if (tLRPC$Chat.min) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", Long.valueOf(tLRPC$Chat.id)), new Object[0]);
                if (queryFinalized.next()) {
                    try {
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            if (TLdeserialize != null) {
                                TLdeserialize.title = tLRPC$Chat.title;
                                TLdeserialize.photo = tLRPC$Chat.photo;
                                TLdeserialize.broadcast = tLRPC$Chat.broadcast;
                                TLdeserialize.verified = tLRPC$Chat.verified;
                                TLdeserialize.megagroup = tLRPC$Chat.megagroup;
                                TLdeserialize.call_not_empty = tLRPC$Chat.call_not_empty;
                                TLdeserialize.call_active = tLRPC$Chat.call_active;
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat.default_banned_rights;
                                if (tLRPC$TL_chatBannedRights != null) {
                                    TLdeserialize.default_banned_rights = tLRPC$TL_chatBannedRights;
                                    TLdeserialize.flags |= 262144;
                                }
                                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                                if (tLRPC$TL_chatAdminRights != null) {
                                    TLdeserialize.admin_rights = tLRPC$TL_chatAdminRights;
                                    TLdeserialize.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                }
                                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                                if (tLRPC$TL_chatBannedRights2 != null) {
                                    TLdeserialize.banned_rights = tLRPC$TL_chatBannedRights2;
                                    TLdeserialize.flags |= LiteMode.FLAG_CHAT_SCALE;
                                }
                                String str = tLRPC$Chat.username;
                                if (str != null) {
                                    TLdeserialize.username = str;
                                    TLdeserialize.flags |= 64;
                                } else {
                                    TLdeserialize.username = null;
                                    TLdeserialize.flags &= -65;
                                }
                                int i2 = tLRPC$Chat.participants_count;
                                if (i2 > 0) {
                                    TLdeserialize.participants_count = i2;
                                }
                                tLRPC$Chat = TLdeserialize;
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
                queryFinalized.dispose();
            }
            executeFast.requery();
            tLRPC$Chat.flags |= 131072;
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
            tLRPC$Chat.serializeToStream(nativeByteBuffer);
            executeFast.bindLong(1, tLRPC$Chat.id);
            String str2 = tLRPC$Chat.title;
            if (str2 != null) {
                executeFast.bindString(2, str2.toLowerCase());
            } else {
                executeFast.bindString(2, "");
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            nativeByteBuffer.reuse();
            this.dialogIsForum.put(-tLRPC$Chat.id, tLRPC$Chat.forum ? 1 : 0);
        }
        executeFast.dispose();
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC$User> arrayList2) throws Exception {
        getUsersInternal(arrayList, arrayList2, false);
    }

    public void getUsersInternal(ArrayList<Long> arrayList, ArrayList<TLRPC$User> arrayList2, boolean z) throws Exception {
        if (arrayList == null || arrayList.isEmpty() || arrayList2 == null) {
            return;
        }
        if (arrayList.size() > 50) {
            int i = 0;
            while (i < arrayList.size()) {
                Long l = arrayList.get(i);
                l.longValue();
                TLRPC$User user = getMessagesController().getUser(l);
                if (user != null) {
                    arrayList2.add(user);
                    arrayList.remove(i);
                    i--;
                }
                i++;
            }
        }
        if (arrayList.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                        if (tLRPC$UserStatus != null) {
                            tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList2.add(TLdeserialize);
                        if (arrayList.size() > 50 && z) {
                            getMessagesController().putUser(TLdeserialize, true, false);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getUsersInternal(HashSet<Long> hashSet, ArrayList<TLRPC$User> arrayList) throws Exception {
        if (hashSet == null || hashSet.isEmpty() || arrayList == null) {
            return;
        }
        if (hashSet.size() > 50) {
            Iterator<Long> it = hashSet.iterator();
            while (it.hasNext()) {
                TLRPC$User user = getMessagesController().getUser(it.next());
                if (user != null) {
                    arrayList.add(user);
                    it.remove();
                }
            }
        }
        if (hashSet.isEmpty()) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", TextUtils.join(",", hashSet)), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                        if (tLRPC$UserStatus != null) {
                            tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                        }
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList) throws Exception {
        getChatsInternal(str, arrayList, true);
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList, boolean z) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false, z);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC$EncryptedChat> arrayList, ArrayList<Long> arrayList2) throws Exception {
        if (str == null || str.length() == 0 || arrayList == null) {
            return;
        }
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", str), new Object[0]);
        while (queryFinalized.next()) {
            try {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$EncryptedChat TLdeserialize = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        long longValue = queryFinalized.longValue(1);
                        TLdeserialize.user_id = longValue;
                        if (arrayList2 != null && !arrayList2.contains(Long.valueOf(longValue))) {
                            arrayList2.add(Long.valueOf(TLdeserialize.user_id));
                        }
                        TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                        TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                        TLdeserialize.ttl = queryFinalized.intValue(4);
                        TLdeserialize.layer = queryFinalized.intValue(5);
                        TLdeserialize.seq_in = queryFinalized.intValue(6);
                        TLdeserialize.seq_out = queryFinalized.intValue(7);
                        int intValue = queryFinalized.intValue(8);
                        TLdeserialize.key_use_count_in = (short) (intValue >> 16);
                        TLdeserialize.key_use_count_out = (short) intValue;
                        TLdeserialize.exchange_id = queryFinalized.longValue(9);
                        TLdeserialize.key_create_date = queryFinalized.intValue(10);
                        TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                        TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                        TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                        TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                        long longValue2 = queryFinalized.longValue(15);
                        if (longValue2 != 0) {
                            TLdeserialize.admin_id = longValue2;
                        }
                        TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                        arrayList.add(TLdeserialize);
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
        }
        queryFinalized.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal */
    public void lambda$putUsersAndChats$174(List<TLRPC$User> list, List<TLRPC$Chat> list2, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        if (z) {
            try {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    checkSQLException(e);
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase == null) {
                        return;
                    }
                }
            } catch (Throwable th) {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                    sQLiteDatabase2.commitTransaction();
                }
                throw th;
            }
        }
        putUsersInternal(list);
        putChatsInternal(list2);
        sQLiteDatabase = this.database;
        if (sQLiteDatabase == null) {
            return;
        }
        sQLiteDatabase.commitTransaction();
    }

    public void putUsersAndChats(final List<TLRPC$User> list, final List<TLRPC$Chat> list2, final boolean z, boolean z2) {
        if (list == null || !list.isEmpty() || list2 == null || !list2.isEmpty()) {
            if (z2) {
                this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putUsersAndChats$174(list, list2, z);
                    }
                });
            } else {
                lambda$putUsersAndChats$174(list, list2, z);
            }
        }
    }

    public void removeFromDownloadQueue(final long j, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda150
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$removeFromDownloadQueue$175(z, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFromDownloadQueue$175(boolean z, int i, long j) {
        Throwable th;
        Exception e;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                try {
                    if (z) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT min(date) FROM download_queue WHERE type = %d", Integer.valueOf(i)), new Object[0]);
                        try {
                            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                            queryFinalized.dispose();
                            if (intValue != -1) {
                                this.database.executeFast(String.format(locale, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                            }
                        } catch (Exception e2) {
                            e = e2;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    } else {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Exception e4) {
            e = e4;
        } catch (Throwable th4) {
            th = th4;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x0072  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void deleteFromDownloadQueue(final ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        SQLiteDatabase sQLiteDatabase;
        Exception e;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement executeFast;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (z || (sQLiteDatabase2 = this.database) == null) {
                        return;
                    }
                    sQLiteDatabase2.commitTransaction();
                }
            }
            executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
        } catch (Throwable th) {
            th = th;
        }
        try {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair<Long, Integer> pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(2, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda123
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$deleteFromDownloadQueue$176(arrayList);
                }
            });
            if (!z || (sQLiteDatabase2 = this.database) == null) {
                return;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (z) {
                return;
            }
            return;
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            if (z && (sQLiteDatabase = this.database) != null) {
                sQLiteDatabase.commitTransaction();
            }
            throw th;
        }
        sQLiteDatabase2.commitTransaction();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFromDownloadQueue$176(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    public void clearDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda149
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$clearDownloadQueue$177(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDownloadQueue$177(int i) {
        try {
            if (i == 0) {
                this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", Integer.valueOf(i))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDownloadQueue(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda180
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDownloadQueue$179(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$179(final int i) {
        boolean z;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                final ArrayList arrayList = new ArrayList();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", Integer.valueOf(i)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        DownloadObject downloadObject = new DownloadObject();
                        downloadObject.type = queryFinalized.intValue(1);
                        downloadObject.id = queryFinalized.longValue(0);
                        downloadObject.parent = queryFinalized.stringValue(3);
                        NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(2);
                        if (byteBufferValue != null) {
                            TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                            TLRPC$Document tLRPC$Document = TLdeserialize.document;
                            if (tLRPC$Document != null) {
                                downloadObject.object = tLRPC$Document;
                                if (!MessageObject.isVideoDocument(tLRPC$Document)) {
                                    if (!MessageObject.isVoiceDocument(TLdeserialize.document)) {
                                        if (MessageObject.isRoundVideoDocument(TLdeserialize.document)) {
                                        }
                                        z = false;
                                        downloadObject.secret = z;
                                    }
                                }
                                int i2 = TLdeserialize.ttl_seconds;
                                if ((i2 > 0 && i2 <= 60) || i2 == Integer.MAX_VALUE) {
                                    z = true;
                                    downloadObject.secret = z;
                                }
                                z = false;
                                downloadObject.secret = z;
                            } else {
                                TLRPC$Photo tLRPC$Photo = TLdeserialize.photo;
                                if (tLRPC$Photo != null) {
                                    downloadObject.object = tLRPC$Photo;
                                    int i3 = TLdeserialize.ttl_seconds;
                                    downloadObject.secret = (i3 > 0 && i3 <= 60) || i3 == Integer.MAX_VALUE;
                                }
                            }
                            downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) != 0;
                        }
                        arrayList.add(downloadObject);
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLiteCursor = queryFinalized;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda193
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$getDownloadQueue$178(i, arrayList);
                    }
                });
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$178(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    public int getMessageMediaType(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message instanceof TLRPC$TL_message_secret) {
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isGifMessage(tLRPC$Message) || MessageObject.isVoiceMessage(tLRPC$Message) || MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message)) {
                int i = tLRPC$Message.ttl;
                return (i <= 0 || i > 60) ? 0 : 1;
            }
            return -1;
        }
        if (tLRPC$Message instanceof TLRPC$TL_message) {
            TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
            if (((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) && tLRPC$MessageMedia.ttl_seconds != 0) {
                return 1;
            }
        }
        return ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) ? 0 : -1;
    }

    public void putWebPages(final LongSparseArray<TLRPC$WebPage> longSparseArray) {
        if (isEmpty(longSparseArray)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda239
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putWebPages$181(longSparseArray);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:101:0x01c5  */
    /* JADX WARN: Removed duplicated region for block: B:108:0x01d3  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01d8  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x01dd  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x01e4  */
    /* JADX WARN: Removed duplicated region for block: B:150:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:97:0x01bb  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01c0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putWebPages$181(LongSparseArray longSparseArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        final ArrayList arrayList;
        SQLitePreparedStatement executeFast;
        int i = 0;
        int i2 = 1;
        try {
            try {
                arrayList = new ArrayList();
                int size = longSparseArray.size();
                int i3 = 0;
                while (i3 < size) {
                    try {
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized("SELECT mid, uid FROM webpage_pending_v2 WHERE id = " + longSparseArray.keyAt(i3), new Object[i]);
                        try {
                            LongSparseArray longSparseArray2 = new LongSparseArray();
                            while (queryFinalized.next()) {
                                long longValue = queryFinalized.longValue(i2);
                                ArrayList arrayList2 = (ArrayList) longSparseArray2.get(longValue);
                                if (arrayList2 == null) {
                                    arrayList2 = new ArrayList();
                                    longSparseArray2.put(longValue, arrayList2);
                                }
                                arrayList2.add(Integer.valueOf(queryFinalized.intValue(i)));
                            }
                            queryFinalized.dispose();
                            try {
                                if (!longSparseArray2.isEmpty()) {
                                    int size2 = longSparseArray2.size();
                                    for (int i4 = 0; i4 < size2; i4++) {
                                        boolean z = false;
                                        SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, data FROM messages_v2 WHERE mid IN (%s) AND uid = %d", TextUtils.join(",", (ArrayList) longSparseArray2.valueAt(i4)), Long.valueOf(longSparseArray2.keyAt(i4))), new Object[0]);
                                        while (queryFinalized2.next()) {
                                            try {
                                                int intValue = queryFinalized2.intValue(z ? 1 : 0);
                                                NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                                                if (byteBufferValue != null) {
                                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                                                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                    byteBufferValue.reuse();
                                                    TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                        TLdeserialize.id = intValue;
                                                        tLRPC$MessageMedia.webpage = (TLRPC$WebPage) longSparseArray.valueAt(i3);
                                                        arrayList.add(TLdeserialize);
                                                    }
                                                    z = false;
                                                }
                                            } catch (Exception e) {
                                                e = e;
                                                sQLiteCursor = queryFinalized2;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                try {
                                                    checkSQLException(e);
                                                    if (sQLiteCursor != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 == null) {
                                                    }
                                                    sQLiteDatabase2.commitTransaction();
                                                } catch (Throwable th) {
                                                    th = th;
                                                    if (sQLiteCursor != null) {
                                                        sQLiteCursor.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                        sQLitePreparedStatement.dispose();
                                                    }
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                        sQLiteDatabase.commitTransaction();
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th2) {
                                                th = th2;
                                                sQLiteCursor = queryFinalized2;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        queryFinalized2.dispose();
                                    }
                                }
                                i3++;
                                i = 0;
                                i2 = 1;
                            } catch (Exception e2) {
                                e = e2;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                checkSQLException(e);
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 == null) {
                                }
                                sQLiteDatabase2.commitTransaction();
                            } catch (Throwable th3) {
                                th = th3;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                sQLitePreparedStatement2 = null;
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e3) {
                            e = e3;
                        } catch (Throwable th4) {
                            th = th4;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        executeFast = null;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = executeFast;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 == null) {
                            return;
                        }
                        sQLiteDatabase2.commitTransaction();
                    }
                }
            } catch (Exception e5) {
                e = e5;
                sQLitePreparedStatement = null;
                sQLiteCursor = null;
            }
            if (arrayList.isEmpty()) {
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                    return;
                }
                return;
            }
            this.database.beginTransaction();
            executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE media_v4 SET data = ? WHERE mid = ? AND uid = ?");
                for (int i5 = 0; i5 < arrayList.size(); i5++) {
                    try {
                        TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i5);
                        MessageObject.normalizeFlags(tLRPC$Message);
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                        tLRPC$Message.serializeToStream(nativeByteBuffer);
                        executeFast.requery();
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, tLRPC$Message.id);
                        executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                        executeFast.step();
                        sQLitePreparedStatement.requery();
                        sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                        sQLitePreparedStatement.bindInteger(2, tLRPC$Message.id);
                        sQLitePreparedStatement.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    } catch (Exception e6) {
                        e = e6;
                    } catch (Throwable th5) {
                        th = th5;
                        sQLitePreparedStatement2 = executeFast;
                        sQLiteCursor = null;
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            } catch (Exception e7) {
                e = e7;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement2 = executeFast;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th6) {
                th = th6;
                sQLitePreparedStatement2 = executeFast;
                sQLitePreparedStatement = null;
            }
            try {
                sQLitePreparedStatement.dispose();
                this.database.commitTransaction();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda69
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$putWebPages$180(arrayList);
                    }
                });
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                    return;
                }
            } catch (Exception e8) {
                e = e8;
                executeFast = null;
                sQLitePreparedStatement2 = executeFast;
                sQLiteCursor = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 == null) {
                }
                sQLiteDatabase2.commitTransaction();
            } catch (Throwable th7) {
                th = th7;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                throw th;
            }
            sQLiteDatabase2.commitTransaction();
        } catch (Throwable th8) {
            th = th8;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$180(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceivedWebpages, arrayList);
    }

    public void overwriteChannel(final long j, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, final int i, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$183(j, i, tLRPC$TL_updates_channelDifferenceTooLong, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:14:0x0229  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0258  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0272 A[Catch: all -> 0x0262, Exception -> 0x0265, TRY_LEAVE, TryCatch #5 {Exception -> 0x0265, all -> 0x0262, blocks: (B:3:0x000a, B:12:0x003c, B:16:0x022c, B:19:0x025a, B:24:0x0268, B:26:0x0272), top: B:46:0x000a }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x028d  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0294  */
    /* JADX WARN: Removed duplicated region for block: B:50:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$overwriteChannel$183(long j, int i, final TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, Runnable runnable) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor queryFinalized;
        int intValue;
        boolean z;
        final long j2 = -j;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            queryFinalized = sQLiteDatabase.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + j2, new Object[0]);
        } catch (Exception e) {
            e = e;
            sQLiteCursor = null;
        } catch (Throwable th) {
            th = th;
            sQLiteCursor = null;
        }
        try {
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            try {
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                if (runnable != null) {
                }
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                throw th;
            }
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
            }
            throw th;
        }
        if (queryFinalized.next()) {
            intValue = queryFinalized.intValue(0);
        } else {
            intValue = 0;
            if (i != 0) {
                z = true;
                queryFinalized.dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase3 = this.database;
                sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                sQLiteDatabase4.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase5 = this.database;
                sQLiteDatabase5.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase6 = this.database;
                sQLiteDatabase6.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase7 = this.database;
                sQLiteDatabase7.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase8 = this.database;
                sQLiteDatabase8.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase9 = this.database;
                sQLiteDatabase9.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase10 = this.database;
                sQLiteDatabase10.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase11 = this.database;
                sQLiteDatabase11.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase12 = this.database;
                sQLiteDatabase12.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase13 = this.database;
                sQLiteDatabase13.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase14 = this.database;
                sQLiteDatabase14.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase15 = this.database;
                sQLiteDatabase15.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase16 = this.database;
                sQLiteDatabase16.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
                getMediaDataController().clearBotKeyboard(j2);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
                tLRPC$Dialog.id = j2;
                tLRPC$Dialog.flags = 1;
                tLRPC$Dialog.notify_settings = null;
                tLRPC$Dialog.pinned = intValue == 0;
                tLRPC$Dialog.pinnedNum = intValue;
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$Dialog);
                putDialogsInternal(tLRPC$TL_messages_dialogs, 0);
                updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$overwriteChannel$182(j2, tLRPC$TL_updates_channelDifferenceTooLong);
                    }
                });
                if (z) {
                    if (i == 1) {
                        getMessagesController().checkChatInviter(j, true);
                    } else {
                        getMessagesController().generateJoinMessage(j, false);
                    }
                }
                if (i != 1) {
                    getMessagesController().getTopicsController().reloadTopics(j);
                }
                if (runnable != null) {
                    runnable.run();
                    return;
                }
                return;
            }
        }
        z = false;
        queryFinalized.dispose();
        SQLiteDatabase sQLiteDatabase22 = this.database;
        sQLiteDatabase22.executeFast("DELETE FROM chat_pinned_count WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase32 = this.database;
        sQLiteDatabase32.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase42 = this.database;
        sQLiteDatabase42.executeFast("DELETE FROM messages_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase52 = this.database;
        sQLiteDatabase52.executeFast("DELETE FROM bot_keyboard WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase62 = this.database;
        sQLiteDatabase62.executeFast("DELETE FROM bot_keyboard_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase72 = this.database;
        sQLiteDatabase72.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase82 = this.database;
        sQLiteDatabase82.executeFast("DELETE FROM media_v4 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase92 = this.database;
        sQLiteDatabase92.executeFast("DELETE FROM messages_holes WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase102 = this.database;
        sQLiteDatabase102.executeFast("DELETE FROM media_holes_v2 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase112 = this.database;
        sQLiteDatabase112.executeFast("DELETE FROM topics WHERE did = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase122 = this.database;
        sQLiteDatabase122.executeFast("DELETE FROM media_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase132 = this.database;
        sQLiteDatabase132.executeFast("DELETE FROM media_holes_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase142 = this.database;
        sQLiteDatabase142.executeFast("UPDATE media_counts_topics SET old = 1 WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase152 = this.database;
        sQLiteDatabase152.executeFast("DELETE FROM messages_topics WHERE uid = " + j2).stepThis().dispose();
        SQLiteDatabase sQLiteDatabase162 = this.database;
        sQLiteDatabase162.executeFast("DELETE FROM messages_holes_topics WHERE uid = " + j2).stepThis().dispose();
        getMediaDataController().clearBotKeyboard(j2);
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs2.chats.addAll(tLRPC$TL_updates_channelDifferenceTooLong.chats);
        tLRPC$TL_messages_dialogs2.users.addAll(tLRPC$TL_updates_channelDifferenceTooLong.users);
        tLRPC$TL_messages_dialogs2.messages.addAll(tLRPC$TL_updates_channelDifferenceTooLong.messages);
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_updates_channelDifferenceTooLong.dialog;
        tLRPC$Dialog2.id = j2;
        tLRPC$Dialog2.flags = 1;
        tLRPC$Dialog2.notify_settings = null;
        tLRPC$Dialog2.pinned = intValue == 0;
        tLRPC$Dialog2.pinnedNum = intValue;
        tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$Dialog2);
        putDialogsInternal(tLRPC$TL_messages_dialogs2, 0);
        updateDialogsWithDeletedMessages(j2, j, new ArrayList<>(), null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$182(j2, tLRPC$TL_updates_channelDifferenceTooLong);
            }
        });
        if (z) {
        }
        if (i != 1) {
        }
        if (runnable != null) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$overwriteChannel$182(long j, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE, tLRPC$TL_updates_channelDifferenceTooLong);
    }

    public void putChannelViews(final LongSparseArray<SparseIntArray> longSparseArray, final LongSparseArray<SparseIntArray> longSparseArray2, final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3, final boolean z) {
        if (isEmpty(longSparseArray) && isEmpty(longSparseArray2) && isEmpty(longSparseArray3)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putChannelViews$184(longSparseArray, longSparseArray2, longSparseArray3, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:146:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0262  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0272  */
    /* JADX WARN: Removed duplicated region for block: B:199:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putChannelViews$184(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, boolean z) {
        boolean z2;
        boolean z3;
        SQLitePreparedStatement sQLitePreparedStatement;
        boolean z4;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        int keyAt;
        SQLiteDatabase sQLiteDatabase3;
        Locale locale;
        Integer valueOf;
        Long valueOf2;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        int i;
        int i2;
        int i3;
        NativeByteBuffer byteBufferValue;
        LongSparseArray longSparseArray4 = longSparseArray3;
        int i4 = 2;
        char c = 1;
        try {
            this.database.beginTransaction();
            try {
                if (!isEmpty(longSparseArray)) {
                    try {
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET media = max((SELECT media FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                            try {
                                long keyAt2 = longSparseArray.keyAt(i5);
                                SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.valueAt(i5);
                                int size = sparseIntArray.size();
                                for (int i6 = 0; i6 < size; i6++) {
                                    int valueAt = sparseIntArray.valueAt(i6);
                                    int keyAt3 = sparseIntArray.keyAt(i6);
                                    executeFast.requery();
                                    executeFast.bindInteger(1, keyAt3);
                                    executeFast.bindLong(2, keyAt2);
                                    executeFast.bindInteger(3, valueAt);
                                    executeFast.bindInteger(4, keyAt3);
                                    executeFast.bindLong(5, keyAt2);
                                    executeFast.step();
                                }
                            } catch (Exception e) {
                                e = e;
                                sQLitePreparedStatement = executeFast;
                                z3 = true;
                                z4 = z3;
                                try {
                                    checkSQLException(e);
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    if (z4 && (sQLiteDatabase = this.database) != null) {
                                        sQLiteDatabase.commitTransaction();
                                    }
                                    if (sQLitePreparedStatement != null) {
                                        sQLitePreparedStatement.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                sQLitePreparedStatement = executeFast;
                                z2 = true;
                                z4 = z2;
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        executeFast.dispose();
                    } catch (Exception e2) {
                        e = e2;
                        z3 = true;
                        sQLitePreparedStatement = null;
                        z4 = z3;
                        checkSQLException(e);
                        if (z4) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        z2 = true;
                        sQLitePreparedStatement = null;
                        z4 = z2;
                        if (z4) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                try {
                    if (!isEmpty(longSparseArray2)) {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET forwards = max((SELECT forwards FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                        for (int i7 = 0; i7 < longSparseArray2.size(); i7++) {
                            try {
                                long keyAt4 = longSparseArray2.keyAt(i7);
                                SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.valueAt(i7);
                                int size2 = sparseIntArray2.size();
                                for (int i8 = 0; i8 < size2; i8++) {
                                    int valueAt2 = sparseIntArray2.valueAt(i8);
                                    int keyAt5 = sparseIntArray2.keyAt(i8);
                                    executeFast2.requery();
                                    executeFast2.bindInteger(1, keyAt5);
                                    executeFast2.bindLong(2, keyAt4);
                                    executeFast2.bindInteger(3, valueAt2);
                                    executeFast2.bindInteger(4, keyAt5);
                                    executeFast2.bindLong(5, keyAt4);
                                    executeFast2.step();
                                }
                            } catch (Exception e3) {
                                e = e3;
                                sQLitePreparedStatement = executeFast2;
                                z4 = true;
                                checkSQLException(e);
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                sQLitePreparedStatement = executeFast2;
                                z4 = true;
                                if (z4) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        }
                        executeFast2.dispose();
                    }
                    if (!isEmpty(longSparseArray3)) {
                        SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                        int i9 = 0;
                        while (i9 < longSparseArray3.size()) {
                            try {
                                long keyAt6 = longSparseArray4.keyAt(i9);
                                SparseArray sparseArray = (SparseArray) longSparseArray4.valueAt(i9);
                                int size3 = sparseArray.size();
                                int i10 = 0;
                                while (i10 < size3) {
                                    try {
                                        keyAt = sparseArray.keyAt(i10);
                                        sQLiteDatabase3 = this.database;
                                        locale = Locale.US;
                                        valueOf = Integer.valueOf(keyAt);
                                        valueOf2 = Long.valueOf(keyAt6);
                                    } catch (Exception e4) {
                                        e = e4;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        checkSQLException(e);
                                        if (z4 && (sQLiteDatabase2 = this.database) != null) {
                                            sQLiteDatabase2.commitTransaction();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                            sQLitePreparedStatement.dispose();
                                            return;
                                        }
                                        return;
                                    } catch (Throwable th5) {
                                        th = th5;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        if (z4) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                    try {
                                        Object[] objArr = new Object[i4];
                                        objArr[0] = valueOf;
                                        objArr[c] = valueOf2;
                                        SQLiteCursor queryFinalized = sQLiteDatabase3.queryFinalized(String.format(locale, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                        boolean next = queryFinalized.next();
                                        if (!next || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                                            tLRPC$MessageReplies = null;
                                        } else {
                                            tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                            byteBufferValue.reuse();
                                        }
                                        queryFinalized.dispose();
                                        if (next) {
                                            TLRPC$MessageReplies tLRPC$MessageReplies2 = (TLRPC$MessageReplies) sparseArray.get(sparseArray.keyAt(i10));
                                            if (z || tLRPC$MessageReplies == null || (i3 = tLRPC$MessageReplies.replies_pts) == 0 || tLRPC$MessageReplies2.replies_pts > i3 || tLRPC$MessageReplies2.read_max_id > tLRPC$MessageReplies.read_max_id || tLRPC$MessageReplies2.max_id > tLRPC$MessageReplies.max_id) {
                                                if (z) {
                                                    if (tLRPC$MessageReplies == null) {
                                                        tLRPC$MessageReplies = new TLRPC$TL_messageReplies();
                                                        tLRPC$MessageReplies.flags |= 2;
                                                    }
                                                    tLRPC$MessageReplies.replies += tLRPC$MessageReplies2.replies;
                                                    int size4 = tLRPC$MessageReplies2.recent_repliers.size();
                                                    for (int i11 = 0; i11 < size4; i11++) {
                                                        long peerId = MessageObject.getPeerId(tLRPC$MessageReplies2.recent_repliers.get(i11));
                                                        int size5 = tLRPC$MessageReplies.recent_repliers.size();
                                                        int i12 = 0;
                                                        while (i12 < size5) {
                                                            if (peerId == MessageObject.getPeerId(tLRPC$MessageReplies.recent_repliers.get(i12))) {
                                                                tLRPC$MessageReplies.recent_repliers.remove(i12);
                                                                i12--;
                                                                size5--;
                                                            }
                                                            i12++;
                                                        }
                                                    }
                                                    tLRPC$MessageReplies.recent_repliers.addAll(0, tLRPC$MessageReplies2.recent_repliers);
                                                    while (tLRPC$MessageReplies.recent_repliers.size() > 3) {
                                                        tLRPC$MessageReplies.recent_repliers.remove(0);
                                                    }
                                                    tLRPC$MessageReplies2 = tLRPC$MessageReplies;
                                                }
                                                if (tLRPC$MessageReplies != null && (i2 = tLRPC$MessageReplies.read_max_id) > tLRPC$MessageReplies2.read_max_id) {
                                                    tLRPC$MessageReplies2.read_max_id = i2;
                                                }
                                                executeFast3.requery();
                                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies2.getObjectSize());
                                                tLRPC$MessageReplies2.serializeToStream(nativeByteBuffer);
                                                i = 1;
                                                executeFast3.bindByteBuffer(1, nativeByteBuffer);
                                                executeFast3.bindInteger(2, keyAt);
                                                executeFast3.bindLong(3, keyAt6);
                                                executeFast3.step();
                                                nativeByteBuffer.reuse();
                                                i10 += i;
                                                i4 = 2;
                                                c = 1;
                                            }
                                        }
                                        i = 1;
                                        i10 += i;
                                        i4 = 2;
                                        c = 1;
                                    } catch (Exception e5) {
                                        e = e5;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        checkSQLException(e);
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                    } catch (Throwable th6) {
                                        th = th6;
                                        sQLitePreparedStatement = executeFast3;
                                        z4 = true;
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                }
                                i9++;
                                longSparseArray4 = longSparseArray3;
                                i4 = 2;
                                c = 1;
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th7) {
                                th = th7;
                            }
                        }
                        try {
                            executeFast3.dispose();
                        } catch (Exception e7) {
                            e = e7;
                            sQLitePreparedStatement = executeFast3;
                            z4 = true;
                            checkSQLException(e);
                            if (z4) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                        } catch (Throwable th8) {
                            th = th8;
                            sQLitePreparedStatement = executeFast3;
                            z4 = true;
                            if (z4) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                } catch (Exception e8) {
                    e = e8;
                } catch (Throwable th9) {
                    th = th9;
                }
                try {
                    this.database.commitTransaction();
                } catch (Exception e9) {
                    e = e9;
                    z4 = true;
                    sQLitePreparedStatement = null;
                    checkSQLException(e);
                    if (z4) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                } catch (Throwable th10) {
                    th = th10;
                    z4 = true;
                    sQLitePreparedStatement = null;
                    if (z4) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e10) {
                e = e10;
            } catch (Throwable th11) {
                th = th11;
            }
        } catch (Exception e11) {
            e = e11;
            z3 = false;
        } catch (Throwable th12) {
            th = th12;
            z2 = false;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:115:0x02ad  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x02b2  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x02c5  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x02ca  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x01df A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:143:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:144:? A[RETURN, SYNTHETIC] */
    /* renamed from: updateRepliesMaxReadIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateRepliesMaxReadId$186(final long j, final int i, final int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLiteCursor sQLiteCursor3;
        Locale locale;
        SQLiteCursor queryFinalized;
        int i4;
        int i5;
        int i6;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        long j2 = -j;
        try {
            try {
                if (!isForum(j2)) {
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                    try {
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                        try {
                            if (!queryFinalized2.next() || (byteBufferValue = queryFinalized2.byteBufferValue(0)) == null) {
                                tLRPC$MessageReplies = null;
                            } else {
                                tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                            }
                            queryFinalized2.dispose();
                            if (tLRPC$MessageReplies != null) {
                                tLRPC$MessageReplies.read_max_id = i2;
                                executeFast.requery();
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                                tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                                executeFast.bindByteBuffer(1, nativeByteBuffer);
                                executeFast.bindInteger(2, i);
                                executeFast.bindLong(3, j2);
                                executeFast.step();
                                nativeByteBuffer.reuse();
                            }
                            executeFast.dispose();
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor2 = queryFinalized2;
                            sQLitePreparedStatement = executeFast;
                            try {
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor2 != null) {
                                    sQLiteCursor2.dispose();
                                    return;
                                }
                                return;
                            } catch (Throwable th) {
                                th = th;
                                SQLiteCursor sQLiteCursor4 = sQLiteCursor2;
                                sQLitePreparedStatement3 = sQLitePreparedStatement;
                                sQLiteCursor3 = sQLiteCursor4;
                                SQLitePreparedStatement sQLitePreparedStatement4 = sQLitePreparedStatement3;
                                sQLiteCursor = sQLiteCursor3;
                                sQLitePreparedStatement2 = sQLitePreparedStatement4;
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized2;
                            sQLitePreparedStatement2 = executeFast;
                            if (sQLitePreparedStatement2 != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        sQLitePreparedStatement = executeFast;
                        sQLiteCursor2 = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor2 != null) {
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement2 = executeFast;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                try {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    locale = Locale.US;
                    queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT max_read_id FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                } catch (Exception e3) {
                    e = e3;
                } catch (Throwable th4) {
                    th = th4;
                }
            } catch (Throwable th5) {
                th = th5;
                sQLitePreparedStatement2 = null;
            }
        } catch (Exception e4) {
            e = e4;
            sQLitePreparedStatement = null;
        }
        try {
            boolean z = queryFinalized.next() && i2 >= queryFinalized.intValue(0);
            queryFinalized.dispose();
            this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 1 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
            this.database.executeFast(String.format(locale, "UPDATE messages_topics SET read_state = read_state | 2 WHERE uid = %d AND topic_id = %d AND mid <= %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2))).stepThis().dispose();
            if (i3 < 0) {
                SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 2) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                i6 = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                queryFinalized3.dispose();
                if (i6 != 0) {
                    int i7 = i6;
                    SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(locale, "SELECT count(mid) FROM messages_topics WHERE uid = %d AND topic_id = %d AND mid > %d AND read_state IN(0, 1) AND out = 0", Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    int intValue = queryFinalized4.next() ? queryFinalized4.intValue(0) : -1;
                    queryFinalized4.dispose();
                    SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale, "SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    int intValue2 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                    queryFinalized5.dispose();
                    i4 = i7;
                    i5 = intValue > intValue2 ? intValue2 : intValue;
                    if (z) {
                        return;
                    }
                    try {
                        if (i5 >= 0) {
                            if (BuildVars.DEBUG_PRIVATE_VERSION && i5 > 0) {
                                FileLog.d("(updateRepliesMaxReadIdInternal) new unread mentions " + i5 + " for dialog_id=" + j2 + " topic_id=" + i);
                            }
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d, unread_mentions = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Integer.valueOf(i5), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        } else {
                            this.database.executeFast(String.format(Locale.ENGLISH, "UPDATE topics SET max_read_id = %d, unread_count = %d WHERE did = %d AND topic_id = %d", Integer.valueOf(i2), Integer.valueOf(i4), Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                        }
                        final int i8 = i4;
                        final int i9 = i5;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda7
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$updateRepliesMaxReadIdInternal$185(j, i, i2, i8, i9);
                            }
                        });
                        resetForumBadgeIfNeed(j2);
                        return;
                    } catch (Throwable th6) {
                        th = th6;
                        sQLiteCursor3 = null;
                        sQLitePreparedStatement3 = null;
                        SQLitePreparedStatement sQLitePreparedStatement42 = sQLitePreparedStatement3;
                        sQLiteCursor = sQLiteCursor3;
                        sQLitePreparedStatement2 = sQLitePreparedStatement42;
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                }
                i4 = i6;
                i5 = 0;
                if (z) {
                }
            } else if (i3 == 0) {
                i6 = i3;
                i4 = i6;
                i5 = 0;
                if (z) {
                }
            } else {
                i4 = i3;
                i5 = -1;
                if (z) {
                }
            }
        } catch (Exception e5) {
            e = e5;
            sQLiteCursor2 = null;
            sQLitePreparedStatement = null;
            checkSQLException(e);
            if (sQLitePreparedStatement != null) {
            }
            if (sQLiteCursor2 != null) {
            }
        } catch (Throwable th7) {
            th = th7;
            sQLiteCursor = null;
            sQLitePreparedStatement2 = null;
            if (sQLitePreparedStatement2 != null) {
            }
            if (sQLiteCursor != null) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateRepliesMaxReadIdInternal$185(long j, int i, int i2, int i3, int i4) {
        getMessagesController().getTopicsController().updateMaxReadId(j, i, i2, i3, i4);
    }

    private void resetForumBadgeIfNeed(long j) {
        LongSparseIntArray longSparseIntArray;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.ENGLISH;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT topic_id FROM topics WHERE did = %d AND unread_count > 0", Long.valueOf(j)), new Object[0]);
            try {
                if (queryFinalized.next()) {
                    longSparseIntArray = null;
                } else {
                    longSparseIntArray = new LongSparseIntArray();
                    longSparseIntArray.put(j, 0);
                }
                queryFinalized.dispose();
                if (longSparseIntArray != null) {
                    this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = %d", Long.valueOf(j))).stepThis().dispose();
                }
                updateFiltersReadCounter(longSparseIntArray, null, true);
                getMessagesController().processDialogsUpdateRead(longSparseIntArray, null);
            } catch (Throwable th) {
                th = th;
                sQLiteCursor = queryFinalized;
                try {
                    checkSQLException(th);
                } finally {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateRepliesMaxReadId(final long j, final int i, final int i2, final int i3, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
                }
            });
        } else {
            lambda$updateRepliesMaxReadId$186(j, i, i2, i3);
        }
    }

    public void updateRepliesCount(final long j, final int i, final ArrayList<TLRPC$Peer> arrayList, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda242
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateRepliesCount$187(i, j, i3, arrayList, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:43:0x00b1  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00b6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateRepliesCount$187(int i, long j, int i2, ArrayList arrayList, int i3) {
        SQLiteCursor sQLiteCursor;
        TLRPC$MessageReplies tLRPC$MessageReplies;
        NativeByteBuffer byteBufferValue;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            try {
                long j2 = -j;
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", Integer.valueOf(i), Long.valueOf(j2)), new Object[0]);
                try {
                    if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                        tLRPC$MessageReplies = null;
                    } else {
                        tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                    }
                    sQLiteCursor.dispose();
                    if (tLRPC$MessageReplies != null) {
                        int i4 = tLRPC$MessageReplies.replies + i2;
                        tLRPC$MessageReplies.replies = i4;
                        if (i4 < 0) {
                            tLRPC$MessageReplies.replies = 0;
                        }
                        if (arrayList != null) {
                            tLRPC$MessageReplies.recent_repliers = arrayList;
                            tLRPC$MessageReplies.flags |= 2;
                        }
                        if (i3 != 0) {
                            tLRPC$MessageReplies.max_id = i3;
                        }
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                        tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.bindInteger(2, i);
                        executeFast.bindLong(3, j2);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                    }
                    executeFast.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLitePreparedStatement = executeFast;
                    try {
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = executeFast;
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th4) {
            th = th4;
            sQLiteCursor = null;
        }
    }

    private boolean isValidKeyboardToSave(TLRPC$Message tLRPC$Message) {
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
        return (tLRPC$ReplyMarkup == null || (tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) || (tLRPC$ReplyMarkup.selective && !tLRPC$Message.mentioned)) ? false : true;
    }

    public void updateMessageVerifyFlags(final ArrayList<TLRPC$Message> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda136
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateMessageVerifyFlags$188(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVerifyFlags$188(ArrayList arrayList) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        boolean z = false;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                try {
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET imp = ? WHERE mid = ? AND uid = ?");
                    try {
                        int size = arrayList.size();
                        for (int i = 0; i < size; i++) {
                            TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i);
                            executeFast.requery();
                            int i2 = tLRPC$Message.stickerVerified;
                            executeFast.bindInteger(1, i2 == 0 ? 1 : i2 == 2 ? 2 : 0);
                            executeFast.bindInteger(2, tLRPC$Message.id);
                            executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                            executeFast.step();
                        }
                        executeFast.dispose();
                        this.database.commitTransaction();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        z = true;
                        checkSQLException(e);
                        if (z && (sQLiteDatabase2 = this.database) != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        z = true;
                        if (z && (sQLiteDatabase = this.database) != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e2) {
                    e = e2;
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Exception e3) {
                e = e3;
            }
        } catch (Throwable th3) {
            th = th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(5:(7:(4:1250|(4:1252|(1:1254)|1255|(2:1260|1261)(1:1259))(1:1264)|1262|1263)|1273|1274|(1:1280)(1:1278)|1279|1262|1263)|1266|1267|(1:1271)|1272) */
    /* JADX WARN: Code restructure failed: missing block: B:1061:0x1661, code lost:
        if (r5 != 0) goto L1237;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1087:0x16ad, code lost:
        if (r10.id < r2) goto L1255;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1121:0x1730, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1122:0x1731, code lost:
        r2 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1123:0x1734, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1124:0x1735, code lost:
        r2 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:594:0x0d8f, code lost:
        if (r7.id <= r5) goto L714;
     */
    /* JADX WARN: Code restructure failed: missing block: B:613:0x0dcb, code lost:
        if (r7.id <= r9) goto L731;
     */
    /* JADX WARN: Code restructure failed: missing block: B:875:0x128e, code lost:
        if (r7.post != false) goto L971;
     */
    /* JADX WARN: Removed duplicated region for block: B:111:0x01ce  */
    /* JADX WARN: Removed duplicated region for block: B:1251:0x1a1e A[Catch: all -> 0x19d5, Exception -> 0x19da, TRY_LEAVE, TryCatch #175 {Exception -> 0x19da, all -> 0x19d5, blocks: (B:1236:0x19a0, B:1240:0x19ce, B:1247:0x19e3, B:1249:0x19ed, B:1251:0x1a1e), top: B:1615:0x19a0 }] */
    /* JADX WARN: Removed duplicated region for block: B:1360:0x1cfa  */
    /* JADX WARN: Removed duplicated region for block: B:1364:0x1d03  */
    /* JADX WARN: Removed duplicated region for block: B:1366:0x1d08  */
    /* JADX WARN: Removed duplicated region for block: B:1368:0x1d0d  */
    /* JADX WARN: Removed duplicated region for block: B:1370:0x1d12  */
    /* JADX WARN: Removed duplicated region for block: B:1372:0x1d17  */
    /* JADX WARN: Removed duplicated region for block: B:1374:0x1d1c  */
    /* JADX WARN: Removed duplicated region for block: B:1505:0x1f55  */
    /* JADX WARN: Removed duplicated region for block: B:1509:0x1f5e  */
    /* JADX WARN: Removed duplicated region for block: B:1511:0x1f63  */
    /* JADX WARN: Removed duplicated region for block: B:1513:0x1f68  */
    /* JADX WARN: Removed duplicated region for block: B:1515:0x1f6d  */
    /* JADX WARN: Removed duplicated region for block: B:1517:0x1f72  */
    /* JADX WARN: Removed duplicated region for block: B:1519:0x1f77  */
    /* JADX WARN: Removed duplicated region for block: B:1521:0x1f7c  */
    /* JADX WARN: Removed duplicated region for block: B:1523:0x1f81  */
    /* JADX WARN: Removed duplicated region for block: B:1525:0x1f86  */
    /* JADX WARN: Removed duplicated region for block: B:1527:0x1f8b  */
    /* JADX WARN: Removed duplicated region for block: B:1529:0x1f90  */
    /* JADX WARN: Removed duplicated region for block: B:1531:0x1f95  */
    /* JADX WARN: Removed duplicated region for block: B:1533:0x1f9a  */
    /* JADX WARN: Removed duplicated region for block: B:1535:0x1f9f  */
    /* JADX WARN: Removed duplicated region for block: B:1541:0x1fad  */
    /* JADX WARN: Removed duplicated region for block: B:1545:0x1fb6  */
    /* JADX WARN: Removed duplicated region for block: B:1547:0x1fbb  */
    /* JADX WARN: Removed duplicated region for block: B:1549:0x1fc0  */
    /* JADX WARN: Removed duplicated region for block: B:1551:0x1fc5  */
    /* JADX WARN: Removed duplicated region for block: B:1553:0x1fca  */
    /* JADX WARN: Removed duplicated region for block: B:1555:0x1fcf  */
    /* JADX WARN: Removed duplicated region for block: B:1557:0x1fd4  */
    /* JADX WARN: Removed duplicated region for block: B:1559:0x1fd9  */
    /* JADX WARN: Removed duplicated region for block: B:1561:0x1fde  */
    /* JADX WARN: Removed duplicated region for block: B:1563:0x1fe3  */
    /* JADX WARN: Removed duplicated region for block: B:1565:0x1fe8  */
    /* JADX WARN: Removed duplicated region for block: B:1567:0x1fed  */
    /* JADX WARN: Removed duplicated region for block: B:1569:0x1ff2  */
    /* JADX WARN: Removed duplicated region for block: B:1571:0x1ff7  */
    /* JADX WARN: Removed duplicated region for block: B:1670:0x10d0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1822:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1824:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:263:0x058f A[Catch: all -> 0x0441, Exception -> 0x044b, TryCatch #167 {Exception -> 0x044b, all -> 0x0441, blocks: (B:199:0x0402, B:201:0x0423, B:203:0x0427, B:205:0x0433, B:211:0x0458, B:213:0x0465, B:215:0x048f, B:216:0x0497, B:218:0x04a4, B:220:0x04aa, B:222:0x04b0, B:229:0x04cc, B:231:0x04d0, B:233:0x04d6, B:237:0x04e4, B:239:0x04ed, B:241:0x050f, B:243:0x0515, B:244:0x051d, B:263:0x058f, B:268:0x05ad, B:270:0x05dc, B:272:0x05e2, B:274:0x05f1, B:276:0x05f5, B:278:0x05f9, B:280:0x05fd, B:283:0x0609, B:285:0x061f, B:287:0x0623, B:290:0x062f, B:293:0x064b, B:296:0x0653, B:298:0x0677, B:300:0x0681, B:302:0x0692, B:304:0x0698, B:305:0x069b, B:307:0x06a8, B:309:0x06b7, B:311:0x06c8, B:312:0x06d2, B:314:0x06df, B:316:0x06ef, B:317:0x06f7, B:319:0x06fd, B:320:0x0700, B:322:0x070d, B:323:0x0715, B:327:0x0736, B:329:0x073c, B:331:0x074c, B:335:0x0755, B:266:0x05a4, B:250:0x0549, B:252:0x0553, B:253:0x055d, B:255:0x0563, B:257:0x056b, B:259:0x0579, B:260:0x0583, B:342:0x078a, B:343:0x0792, B:345:0x0798, B:347:0x07ae, B:349:0x07b8, B:353:0x0806, B:354:0x0811, B:356:0x0817, B:358:0x0826, B:362:0x0833, B:363:0x0838, B:365:0x0842, B:367:0x084d, B:368:0x0851, B:370:0x0856, B:371:0x085b, B:373:0x0862, B:375:0x087c, B:379:0x0897, B:381:0x089e, B:383:0x08a5, B:385:0x08ad, B:390:0x08c5, B:386:0x08b9, B:376:0x088a, B:404:0x0934, B:407:0x096e, B:408:0x0979, B:410:0x097f, B:412:0x0997, B:417:0x09a9, B:418:0x09ae, B:420:0x09b8, B:422:0x09c7, B:423:0x09cd, B:425:0x09e3, B:427:0x09fd, B:433:0x0a17, B:435:0x0a22, B:437:0x0a29, B:439:0x0a31, B:447:0x0a50, B:441:0x0a3d, B:444:0x0a48, B:428:0x0a06, B:432:0x0a12, B:459:0x0a7d, B:461:0x0a84, B:465:0x0a9b, B:468:0x0ace, B:469:0x0ad8, B:471:0x0ade, B:473:0x0ae8, B:475:0x0aed, B:477:0x0af2, B:480:0x0aff, B:482:0x0b09, B:485:0x0b13, B:496:0x0b3c, B:497:0x0b44, B:499:0x0b4a, B:502:0x0b82, B:503:0x0b8c, B:505:0x0b92, B:506:0x0ba3, B:514:0x0bfa, B:516:0x0c00, B:517:0x0c10, B:519:0x0c16, B:521:0x0c20, B:522:0x0c25, B:523:0x0c2b, B:526:0x0c44, B:529:0x0c68), top: B:1630:0x0402 }] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x005c  */
    /* JADX WARN: Removed duplicated region for block: B:292:0x0642  */
    /* JADX WARN: Removed duplicated region for block: B:295:0x0651  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x005f  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0063  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x0726  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x073c A[Catch: all -> 0x0441, Exception -> 0x044b, TryCatch #167 {Exception -> 0x044b, all -> 0x0441, blocks: (B:199:0x0402, B:201:0x0423, B:203:0x0427, B:205:0x0433, B:211:0x0458, B:213:0x0465, B:215:0x048f, B:216:0x0497, B:218:0x04a4, B:220:0x04aa, B:222:0x04b0, B:229:0x04cc, B:231:0x04d0, B:233:0x04d6, B:237:0x04e4, B:239:0x04ed, B:241:0x050f, B:243:0x0515, B:244:0x051d, B:263:0x058f, B:268:0x05ad, B:270:0x05dc, B:272:0x05e2, B:274:0x05f1, B:276:0x05f5, B:278:0x05f9, B:280:0x05fd, B:283:0x0609, B:285:0x061f, B:287:0x0623, B:290:0x062f, B:293:0x064b, B:296:0x0653, B:298:0x0677, B:300:0x0681, B:302:0x0692, B:304:0x0698, B:305:0x069b, B:307:0x06a8, B:309:0x06b7, B:311:0x06c8, B:312:0x06d2, B:314:0x06df, B:316:0x06ef, B:317:0x06f7, B:319:0x06fd, B:320:0x0700, B:322:0x070d, B:323:0x0715, B:327:0x0736, B:329:0x073c, B:331:0x074c, B:335:0x0755, B:266:0x05a4, B:250:0x0549, B:252:0x0553, B:253:0x055d, B:255:0x0563, B:257:0x056b, B:259:0x0579, B:260:0x0583, B:342:0x078a, B:343:0x0792, B:345:0x0798, B:347:0x07ae, B:349:0x07b8, B:353:0x0806, B:354:0x0811, B:356:0x0817, B:358:0x0826, B:362:0x0833, B:363:0x0838, B:365:0x0842, B:367:0x084d, B:368:0x0851, B:370:0x0856, B:371:0x085b, B:373:0x0862, B:375:0x087c, B:379:0x0897, B:381:0x089e, B:383:0x08a5, B:385:0x08ad, B:390:0x08c5, B:386:0x08b9, B:376:0x088a, B:404:0x0934, B:407:0x096e, B:408:0x0979, B:410:0x097f, B:412:0x0997, B:417:0x09a9, B:418:0x09ae, B:420:0x09b8, B:422:0x09c7, B:423:0x09cd, B:425:0x09e3, B:427:0x09fd, B:433:0x0a17, B:435:0x0a22, B:437:0x0a29, B:439:0x0a31, B:447:0x0a50, B:441:0x0a3d, B:444:0x0a48, B:428:0x0a06, B:432:0x0a12, B:459:0x0a7d, B:461:0x0a84, B:465:0x0a9b, B:468:0x0ace, B:469:0x0ad8, B:471:0x0ade, B:473:0x0ae8, B:475:0x0aed, B:477:0x0af2, B:480:0x0aff, B:482:0x0b09, B:485:0x0b13, B:496:0x0b3c, B:497:0x0b44, B:499:0x0b4a, B:502:0x0b82, B:503:0x0b8c, B:505:0x0b92, B:506:0x0ba3, B:514:0x0bfa, B:516:0x0c00, B:517:0x0c10, B:519:0x0c16, B:521:0x0c20, B:522:0x0c25, B:523:0x0c2b, B:526:0x0c44, B:529:0x0c68), top: B:1630:0x0402 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0065  */
    /* JADX WARN: Removed duplicated region for block: B:337:0x0759  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:579:0x0d5a A[Catch: all -> 0x0d2b, Exception -> 0x0d37, TryCatch #185 {Exception -> 0x0d37, all -> 0x0d2b, blocks: (B:557:0x0d21, B:559:0x0d25, B:576:0x0d52, B:579:0x0d5a, B:580:0x0d5f, B:584:0x0d6a, B:585:0x0d6f, B:587:0x0d74, B:589:0x0d81, B:591:0x0d89, B:593:0x0d8d, B:596:0x0d93, B:604:0x0da7, B:606:0x0dad, B:608:0x0dbb, B:610:0x0dc5, B:612:0x0dc9, B:615:0x0dcf, B:619:0x0dd8, B:601:0x0d9d), top: B:1595:0x0d21 }] */
    /* JADX WARN: Removed duplicated region for block: B:583:0x0d68  */
    /* JADX WARN: Removed duplicated region for block: B:587:0x0d74 A[Catch: all -> 0x0d2b, Exception -> 0x0d37, TryCatch #185 {Exception -> 0x0d37, all -> 0x0d2b, blocks: (B:557:0x0d21, B:559:0x0d25, B:576:0x0d52, B:579:0x0d5a, B:580:0x0d5f, B:584:0x0d6a, B:585:0x0d6f, B:587:0x0d74, B:589:0x0d81, B:591:0x0d89, B:593:0x0d8d, B:596:0x0d93, B:604:0x0da7, B:606:0x0dad, B:608:0x0dbb, B:610:0x0dc5, B:612:0x0dc9, B:615:0x0dcf, B:619:0x0dd8, B:601:0x0d9d), top: B:1595:0x0d21 }] */
    /* JADX WARN: Removed duplicated region for block: B:604:0x0da7 A[Catch: all -> 0x0d2b, Exception -> 0x0d37, TryCatch #185 {Exception -> 0x0d37, all -> 0x0d2b, blocks: (B:557:0x0d21, B:559:0x0d25, B:576:0x0d52, B:579:0x0d5a, B:580:0x0d5f, B:584:0x0d6a, B:585:0x0d6f, B:587:0x0d74, B:589:0x0d81, B:591:0x0d89, B:593:0x0d8d, B:596:0x0d93, B:604:0x0da7, B:606:0x0dad, B:608:0x0dbb, B:610:0x0dc5, B:612:0x0dc9, B:615:0x0dcf, B:619:0x0dd8, B:601:0x0d9d), top: B:1595:0x0d21 }] */
    /* JADX WARN: Removed duplicated region for block: B:622:0x0de3  */
    /* JADX WARN: Removed duplicated region for block: B:625:0x0df1  */
    /* JADX WARN: Removed duplicated region for block: B:694:0x0f0f A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:695:0x0f17 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:698:0x0f24 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:699:0x0f3c A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:702:0x0f47  */
    /* JADX WARN: Removed duplicated region for block: B:704:0x0f4b  */
    /* JADX WARN: Removed duplicated region for block: B:710:0x0f6d A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:711:0x0f84 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:714:0x0f8e A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:719:0x0fa0 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:722:0x0fba A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:723:0x0fc0 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:725:0x0fc7 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:729:0x0fe3  */
    /* JADX WARN: Removed duplicated region for block: B:732:0x0fe9 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:733:0x0fef A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:736:0x0ff8 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:738:0x0ffd A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:740:0x1002 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:743:0x1009 A[Catch: all -> 0x0ef7, Exception -> 0x0efa, TRY_LEAVE, TryCatch #142 {Exception -> 0x0efa, all -> 0x0ef7, blocks: (B:681:0x0ed2, B:683:0x0ef0, B:692:0x0efe, B:694:0x0f0f, B:696:0x0f20, B:698:0x0f24, B:700:0x0f43, B:708:0x0f52, B:710:0x0f6d, B:712:0x0f8a, B:714:0x0f8e, B:718:0x0f99, B:720:0x0fa9, B:722:0x0fba, B:725:0x0fc7, B:727:0x0fcd, B:730:0x0fe5, B:732:0x0fe9, B:734:0x0ff3, B:736:0x0ff8, B:738:0x0ffd, B:740:0x1002, B:743:0x1009, B:746:0x101b, B:748:0x102c, B:733:0x0fef, B:728:0x0fd9, B:723:0x0fc0, B:717:0x0f97, B:719:0x0fa0, B:711:0x0f84, B:699:0x0f3c, B:695:0x0f17), top: B:1680:0x0ed2 }] */
    /* JADX WARN: Removed duplicated region for block: B:770:0x1079  */
    /* JADX WARN: Removed duplicated region for block: B:796:0x1103  */
    /* JADX WARN: Removed duplicated region for block: B:799:0x110d A[Catch: all -> 0x10eb, Exception -> 0x10f3, TRY_ENTER, TRY_LEAVE, TryCatch #181 {Exception -> 0x10f3, all -> 0x10eb, blocks: (B:786:0x10d8, B:799:0x110d, B:828:0x11b5, B:831:0x11bb), top: B:1603:0x10d8 }] */
    /* JADX WARN: Removed duplicated region for block: B:825:0x11af  */
    /* JADX WARN: Removed duplicated region for block: B:845:0x120d  */
    /* JADX WARN: Removed duplicated region for block: B:854:0x1244 A[Catch: all -> 0x1450, Exception -> 0x1457, TRY_ENTER, TRY_LEAVE, TryCatch #148 {Exception -> 0x1457, all -> 0x1450, blocks: (B:843:0x1207, B:854:0x1244), top: B:1668:0x1207 }] */
    /* JADX WARN: Removed duplicated region for block: B:871:0x1282 A[Catch: all -> 0x1420, Exception -> 0x1424, TRY_LEAVE, TryCatch #192 {Exception -> 0x1424, all -> 0x1420, blocks: (B:869:0x127d, B:871:0x1282, B:879:0x129b, B:881:0x12a9, B:883:0x12b4, B:889:0x12c2, B:920:0x137f, B:923:0x138e, B:893:0x12e6, B:918:0x136a), top: B:1581:0x127d }] */
    /* JADX WARN: Type inference failed for: r13v10, types: [long] */
    /* renamed from: putMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$putMessages$192(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, int i, boolean z3, int i2, long j) {
        Integer num;
        long j2;
        int i3;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement;
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement2;
        boolean z4;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement17;
        SQLitePreparedStatement sQLitePreparedStatement18;
        SQLiteDatabase sQLiteDatabase2;
        boolean z5;
        ?? clientUserId;
        SQLitePreparedStatement sQLitePreparedStatement19;
        HashMap hashMap;
        HashMap hashMap2;
        String str;
        LongSparseArray longSparseArray;
        String str2;
        HashMap hashMap3;
        String str3;
        LongSparseArray longSparseArray2;
        String str4;
        String str5;
        LongSparseArray longSparseArray3;
        HashMap hashMap4;
        LongSparseArray longSparseArray4;
        SparseArray sparseArray;
        LongSparseArray longSparseArray5;
        SQLitePreparedStatement sQLitePreparedStatement20;
        SQLitePreparedStatement sQLitePreparedStatement21;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement sQLitePreparedStatement23;
        SQLitePreparedStatement sQLitePreparedStatement24;
        SQLitePreparedStatement sQLitePreparedStatement25;
        SQLitePreparedStatement sQLitePreparedStatement26;
        SQLitePreparedStatement sQLitePreparedStatement27;
        SQLitePreparedStatement sQLitePreparedStatement28;
        SQLitePreparedStatement sQLitePreparedStatement29;
        SQLitePreparedStatement sQLitePreparedStatement30;
        SQLitePreparedStatement sQLitePreparedStatement31;
        SQLitePreparedStatement sQLitePreparedStatement32;
        boolean z6;
        int i4;
        int i5;
        String str6;
        int i6;
        int i7;
        int i8;
        SQLitePreparedStatement sQLitePreparedStatement33;
        int intValue;
        int intValue2;
        int intValue3;
        int intValue4;
        boolean z7;
        HashMap hashMap5;
        int i9;
        HashMap hashMap6;
        String str7;
        LongSparseIntArray longSparseIntArray;
        SQLitePreparedStatement sQLitePreparedStatement34;
        long channelId;
        SQLiteDatabase sQLiteDatabase3;
        StringBuilder sb;
        LongSparseArray longSparseArray6;
        ArrayList arrayList2;
        int i10;
        int i11;
        int max;
        int i12;
        int i13;
        SQLitePreparedStatement sQLitePreparedStatement35;
        int i14;
        int i15;
        int i16;
        LongSparseIntArray longSparseIntArray2;
        ArrayList arrayList3;
        HashMap hashMap7;
        String str8;
        LongSparseIntArray longSparseIntArray3;
        LongSparseIntArray longSparseIntArray4;
        boolean z8;
        int i17;
        HashMap hashMap8;
        LongSparseArray longSparseArray7;
        ArrayList arrayList4;
        int i18;
        int i19;
        int i20;
        HashMap hashMap9;
        int i21;
        NativeByteBuffer nativeByteBuffer;
        int i22;
        SQLitePreparedStatement sQLitePreparedStatement36;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        long j3;
        String str9;
        long j4;
        TLRPC$MessageMedia tLRPC$MessageMedia2;
        long j5;
        int i23;
        int i24;
        long j6;
        SQLitePreparedStatement executeFast;
        long j7;
        int i25;
        int i26;
        long j8;
        SQLitePreparedStatement sQLitePreparedStatement37;
        HashMap hashMap10;
        SQLitePreparedStatement sQLitePreparedStatement38;
        long j9;
        int i27;
        int i28;
        int i29;
        long j10;
        int i30;
        int i31;
        int i32;
        NativeByteBuffer nativeByteBuffer2;
        NativeByteBuffer nativeByteBuffer3;
        int i33;
        NativeByteBuffer nativeByteBuffer4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        int i34;
        NativeByteBuffer nativeByteBuffer5;
        NativeByteBuffer writeLocalParams;
        int i35;
        int i36;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        int i37;
        LongSparseArray longSparseArray8;
        int i38;
        LongSparseIntArray longSparseIntArray5;
        LongSparseIntArray longSparseIntArray6;
        int intValue5;
        int i39;
        int intValue6;
        ArrayList arrayList5;
        SparseArray sparseArray2;
        int i40;
        SparseIntArray sparseIntArray;
        int i41;
        int i42;
        int i43;
        int i44;
        int i45;
        HashMap hashMap11;
        String str10;
        String str11;
        HashMap hashMap12;
        LongSparseArray longSparseArray9;
        HashMap hashMap13;
        HashMap hashMap14;
        String str12;
        LongSparseIntArray longSparseIntArray7;
        LongSparseIntArray longSparseIntArray8;
        HashMap hashMap15;
        LongSparseArray longSparseArray10;
        HashMap hashMap16;
        HashMap hashMap17;
        HashMap hashMap18;
        HashMap hashMap19;
        HashMap hashMap20;
        LongSparseArray longSparseArray11;
        LongSparseArray longSparseArray12;
        HashMap hashMap21;
        LongSparseArray longSparseArray13;
        LongSparseArray longSparseArray14;
        LongSparseArray longSparseArray15;
        String str13;
        int intValue7;
        int i46;
        boolean z9;
        boolean z10;
        boolean z11;
        SQLiteDatabase sQLiteDatabase4;
        SQLitePreparedStatement sQLitePreparedStatement39;
        Throwable th2;
        Exception e;
        final MessagesStorage messagesStorage = this;
        ArrayList<TLRPC$Message> arrayList6 = arrayList;
        int i47 = 2;
        int i48 = 1;
        try {
            try {
                if (arrayList6 != null) {
                    try {
                        if (!arrayList.isEmpty() && MessageObject.isQuickReply(arrayList6.get(0))) {
                            if (j == 0) {
                                num = 0;
                                j2 = MessageObject.getQuickReplyId(messagesStorage.currentAccount, arrayList6.get(0));
                            } else {
                                num = 0;
                                j2 = j;
                            }
                            i3 = 5;
                            z5 = i3 != 1;
                            boolean z12 = i3 != 5;
                            long j11 = j2;
                            clientUserId = getUserConfig().getClientUserId();
                            if (!z5) {
                                if (z) {
                                    messagesStorage.database.beginTransaction();
                                    z11 = true;
                                } else {
                                    z11 = false;
                                }
                                sQLitePreparedStatement = messagesStorage.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                                try {
                                    SQLitePreparedStatement executeFast2 = messagesStorage.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                                    try {
                                        ArrayList arrayList7 = new ArrayList();
                                        int i49 = 0;
                                        while (i49 < arrayList.size()) {
                                            TLRPC$Message tLRPC$Message = arrayList6.get(i49);
                                            if (tLRPC$Message instanceof TLRPC$TL_messageEmpty) {
                                                sQLitePreparedStatement39 = executeFast2;
                                            } else {
                                                messagesStorage.fixUnsupportedMedia(tLRPC$Message);
                                                sQLitePreparedStatement.requery();
                                                int i50 = tLRPC$Message.id;
                                                int i51 = tLRPC$Message.local_id;
                                                if (i51 != 0) {
                                                    i50 = i51;
                                                }
                                                MessageObject.normalizeFlags(tLRPC$Message);
                                                NativeByteBuffer nativeByteBuffer6 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                                tLRPC$Message.serializeToStream(nativeByteBuffer6);
                                                long dialogId = MessageObject.getDialogId(tLRPC$Message);
                                                sQLitePreparedStatement.bindInteger(i48, i50);
                                                sQLitePreparedStatement.bindLong(i47, dialogId);
                                                sQLitePreparedStatement.bindInteger(3, tLRPC$Message.send_state);
                                                sQLitePreparedStatement.bindInteger(4, tLRPC$Message.date);
                                                sQLitePreparedStatement.bindByteBuffer(5, nativeByteBuffer6);
                                                sQLitePreparedStatement.bindInteger(6, tLRPC$Message.ttl);
                                                sQLitePreparedStatement.step();
                                                SQLitePreparedStatement sQLitePreparedStatement40 = executeFast2;
                                                try {
                                                    if (tLRPC$Message.random_id != 0) {
                                                        sQLitePreparedStatement40.requery();
                                                        sQLitePreparedStatement39 = sQLitePreparedStatement40;
                                                        sQLitePreparedStatement39.bindLong(1, tLRPC$Message.random_id);
                                                        sQLitePreparedStatement39.bindInteger(2, i50);
                                                        sQLitePreparedStatement39.bindLong(3, tLRPC$Message.dialog_id);
                                                        sQLitePreparedStatement39.step();
                                                    } else {
                                                        sQLitePreparedStatement39 = sQLitePreparedStatement40;
                                                    }
                                                    nativeByteBuffer6.reuse();
                                                    if (!arrayList7.contains(Long.valueOf(dialogId))) {
                                                        arrayList7.add(Long.valueOf(dialogId));
                                                    }
                                                } catch (Exception e2) {
                                                    e = e2;
                                                    sQLitePreparedStatement39 = sQLitePreparedStatement40;
                                                    exc = e;
                                                    executeFast2 = sQLitePreparedStatement39;
                                                    z4 = z11;
                                                    sQLitePreparedStatement5 = executeFast2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement14 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    try {
                                                        messagesStorage.checkSQLException(exc);
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                    } catch (Throwable th3) {
                                                        th = th3;
                                                        sQLitePreparedStatement17 = sQLitePreparedStatement14;
                                                        sQLitePreparedStatement18 = sQLitePreparedStatement5;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement18;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                        if (z4) {
                                                            sQLiteDatabase.commitTransaction();
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Throwable th4) {
                                                    th2 = th4;
                                                    sQLitePreparedStatement39 = sQLitePreparedStatement40;
                                                    th = th2;
                                                    executeFast2 = sQLitePreparedStatement39;
                                                    z4 = z11;
                                                    sQLitePreparedStatement5 = executeFast2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            try {
                                                i49++;
                                                executeFast2 = sQLitePreparedStatement39;
                                                i47 = 2;
                                                i48 = 1;
                                            } catch (Exception e3) {
                                                e = e3;
                                                exc = e;
                                                executeFast2 = sQLitePreparedStatement39;
                                                z4 = z11;
                                                sQLitePreparedStatement5 = executeFast2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement14 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                            } catch (Throwable th5) {
                                                th2 = th5;
                                                th = th2;
                                                executeFast2 = sQLitePreparedStatement39;
                                                z4 = z11;
                                                sQLitePreparedStatement5 = executeFast2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement6 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        sQLitePreparedStatement39 = executeFast2;
                                        sQLitePreparedStatement.dispose();
                                        try {
                                            sQLitePreparedStatement39.dispose();
                                            if (z) {
                                                try {
                                                    messagesStorage.database.commitTransaction();
                                                    z11 = false;
                                                } catch (Exception e4) {
                                                    exc = e4;
                                                    z4 = z11;
                                                    sQLitePreparedStatement = null;
                                                    executeFast2 = null;
                                                    sQLitePreparedStatement5 = executeFast2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement14 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th6) {
                                                    th = th6;
                                                    z4 = z11;
                                                    sQLitePreparedStatement = null;
                                                    executeFast2 = null;
                                                    sQLitePreparedStatement5 = executeFast2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement6 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            int size = arrayList7.size();
                                            for (int i52 = 0; i52 < size; i52++) {
                                                messagesStorage.broadcastScheduledMessagesChange((Long) arrayList7.get(i52));
                                            }
                                        } catch (Exception e5) {
                                            exc = e5;
                                            executeFast2 = sQLitePreparedStatement39;
                                            z4 = z11;
                                            sQLitePreparedStatement = null;
                                        } catch (Throwable th7) {
                                            th = th7;
                                            executeFast2 = sQLitePreparedStatement39;
                                            z4 = z11;
                                            sQLitePreparedStatement = null;
                                        }
                                    } catch (Exception e6) {
                                        exc = e6;
                                    } catch (Throwable th8) {
                                        th = th8;
                                    }
                                } catch (Exception e7) {
                                    exc = e7;
                                    z4 = z11;
                                    sQLitePreparedStatement2 = null;
                                    sQLitePreparedStatement5 = null;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement15 = null;
                                    sQLitePreparedStatement16 = null;
                                    messagesStorage.checkSQLException(exc);
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement14 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement16 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement15 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                } catch (Throwable th9) {
                                    th = th9;
                                    z4 = z11;
                                    sQLitePreparedStatement2 = null;
                                    sQLitePreparedStatement5 = null;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement15 = null;
                                    sQLitePreparedStatement16 = null;
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement16 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement15 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    throw th;
                                }
                            } else if (z12) {
                                if (z) {
                                    messagesStorage.database.beginTransaction();
                                    z9 = true;
                                } else {
                                    z9 = false;
                                }
                                try {
                                    sQLitePreparedStatement = messagesStorage.database.executeFast("REPLACE INTO quick_replies_messages VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                                    try {
                                        ArrayList arrayList8 = new ArrayList();
                                        int i53 = 0;
                                        while (i53 < arrayList.size()) {
                                            TLRPC$Message tLRPC$Message2 = arrayList6.get(i53);
                                            if (tLRPC$Message2 instanceof TLRPC$TL_messageEmpty) {
                                                z10 = z9;
                                            } else {
                                                messagesStorage.fixUnsupportedMedia(tLRPC$Message2);
                                                sQLitePreparedStatement.requery();
                                                int i54 = tLRPC$Message2.id;
                                                int i55 = tLRPC$Message2.local_id;
                                                if (i55 != 0) {
                                                    i54 = i55;
                                                }
                                                MessageObject.normalizeFlags(tLRPC$Message2);
                                                NativeByteBuffer nativeByteBuffer7 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                tLRPC$Message2.serializeToStream(nativeByteBuffer7);
                                                long quickReplyId = MessageObject.getQuickReplyId(messagesStorage.currentAccount, tLRPC$Message2);
                                                if (quickReplyId != 0) {
                                                    z10 = z9;
                                                    try {
                                                        messagesStorage.database.executeFast(String.format(Locale.ENGLISH, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", Integer.valueOf(i54), Long.valueOf(quickReplyId))).stepThis().dispose();
                                                    } catch (Exception e8) {
                                                        exc = e8;
                                                        z4 = z10;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement3 = null;
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                    } catch (Throwable th10) {
                                                        th = th10;
                                                        z4 = z10;
                                                        sQLitePreparedStatement2 = null;
                                                        sQLitePreparedStatement5 = null;
                                                        sQLitePreparedStatement4 = null;
                                                        sQLitePreparedStatement3 = null;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } else {
                                                    z10 = z9;
                                                }
                                                long dialogId2 = MessageObject.getDialogId(tLRPC$Message2);
                                                sQLitePreparedStatement.bindInteger(1, i54);
                                                sQLitePreparedStatement.bindLong(2, quickReplyId);
                                                sQLitePreparedStatement.bindInteger(3, tLRPC$Message2.send_state);
                                                sQLitePreparedStatement.bindInteger(4, tLRPC$Message2.date);
                                                sQLitePreparedStatement.bindByteBuffer(5, nativeByteBuffer7);
                                                sQLitePreparedStatement.bindInteger(6, tLRPC$Message2.ttl);
                                                sQLitePreparedStatement.step();
                                                nativeByteBuffer7.reuse();
                                                if (!arrayList8.contains(Long.valueOf(dialogId2))) {
                                                    arrayList8.add(Long.valueOf(dialogId2));
                                                }
                                            }
                                            try {
                                                i53++;
                                                z9 = z10;
                                            } catch (Exception e9) {
                                                e = e9;
                                                z4 = z10;
                                                exc = e;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                            } catch (Throwable th11) {
                                                th = th11;
                                                z4 = z10;
                                                th = th;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        z10 = z9;
                                        sQLitePreparedStatement.dispose();
                                        if (z) {
                                            try {
                                                messagesStorage.database.commitTransaction();
                                                z11 = false;
                                            } catch (Exception e10) {
                                                e = e10;
                                                z4 = z10;
                                                exc = e;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                            } catch (Throwable th12) {
                                                th = th12;
                                                z4 = z10;
                                                th = th;
                                                sQLitePreparedStatement = null;
                                                sQLitePreparedStatement2 = null;
                                                sQLitePreparedStatement5 = null;
                                                sQLitePreparedStatement4 = null;
                                                sQLitePreparedStatement3 = null;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                throw th;
                                            }
                                        } else {
                                            z11 = z10;
                                        }
                                        int size2 = arrayList8.size();
                                        int i56 = 0;
                                        while (i56 < size2) {
                                            long j12 = j11;
                                            messagesStorage.broadcastQuickRepliesMessagesChange((Long) arrayList8.get(i56), j12);
                                            i56++;
                                            j11 = j12;
                                        }
                                    } catch (Exception e11) {
                                        e = e11;
                                        z10 = z9;
                                    } catch (Throwable th13) {
                                        th = th13;
                                        z10 = z9;
                                    }
                                } catch (Exception e12) {
                                    e = e12;
                                    z10 = z9;
                                } catch (Throwable th14) {
                                    th = th14;
                                    z10 = z9;
                                }
                            } else {
                                if (z3) {
                                    TLRPC$Message tLRPC$Message3 = arrayList6.get(0);
                                    if (tLRPC$Message3.dialog_id == 0) {
                                        MessageObject.getDialogId(tLRPC$Message3);
                                    }
                                    SQLiteCursor queryFinalized = messagesStorage.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Message3.dialog_id, new Object[0]);
                                    int intValue8 = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                                    queryFinalized.dispose();
                                    if (intValue8 != 0) {
                                        return;
                                    }
                                }
                                if (z) {
                                    messagesStorage.database.beginTransaction();
                                }
                                LongSparseArray longSparseArray16 = new LongSparseArray();
                                LongSparseIntArray longSparseIntArray9 = new LongSparseIntArray();
                                LongSparseIntArray longSparseIntArray10 = new LongSparseIntArray();
                                LongSparseIntArray longSparseIntArray11 = new LongSparseIntArray();
                                LongSparseIntArray longSparseIntArray12 = new LongSparseIntArray();
                                HashMap hashMap22 = new HashMap();
                                LongSparseArray longSparseArray17 = new LongSparseArray();
                                LongSparseIntArray longSparseIntArray13 = longSparseIntArray10;
                                LongSparseIntArray longSparseIntArray14 = new LongSparseIntArray();
                                LongSparseIntArray longSparseIntArray15 = longSparseIntArray11;
                                LongSparseArray longSparseArray18 = new LongSparseArray();
                                String str14 = "_";
                                LongSparseArray longSparseArray19 = new LongSparseArray();
                                HashMap hashMap23 = new HashMap();
                                HashMap hashMap24 = new HashMap();
                                LongSparseArray longSparseArray20 = longSparseArray16;
                                HashMap hashMap25 = new HashMap();
                                LongSparseIntArray longSparseIntArray16 = longSparseIntArray12;
                                HashMap hashMap26 = new HashMap();
                                HashMap hashMap27 = new HashMap();
                                LongSparseIntArray longSparseIntArray17 = longSparseIntArray9;
                                HashMap hashMap28 = new HashMap();
                                SparseArray sparseArray3 = new SparseArray();
                                long j13 = clientUserId;
                                HashMap hashMap29 = new HashMap();
                                HashMap hashMap30 = new HashMap();
                                SparseArray sparseArray4 = sparseArray3;
                                HashMap hashMap31 = hashMap22;
                                SQLitePreparedStatement executeFast3 = messagesStorage.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                                try {
                                    sQLitePreparedStatement19 = executeFast3;
                                    try {
                                        sQLitePreparedStatement2 = messagesStorage.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                                        try {
                                            sQLitePreparedStatement5 = messagesStorage.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                                            try {
                                                sQLitePreparedStatement17 = sQLitePreparedStatement2;
                                            } catch (Exception e13) {
                                                exc = e13;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                            } catch (Throwable th15) {
                                                th = th15;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                            }
                                        } catch (Exception e14) {
                                            exc = e14;
                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                            z4 = false;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement3 = null;
                                            sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement10 = null;
                                            sQLitePreparedStatement11 = null;
                                            sQLitePreparedStatement12 = null;
                                            sQLitePreparedStatement13 = null;
                                            sQLitePreparedStatement15 = null;
                                            sQLitePreparedStatement16 = null;
                                            messagesStorage.checkSQLException(exc);
                                            if (z4) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement14 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement16 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement15 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                        } catch (Throwable th16) {
                                            th = th16;
                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                            z4 = false;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement4 = null;
                                            sQLitePreparedStatement3 = null;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                            sQLitePreparedStatement7 = null;
                                            sQLitePreparedStatement8 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement10 = null;
                                            sQLitePreparedStatement11 = null;
                                            sQLitePreparedStatement12 = null;
                                            sQLitePreparedStatement13 = null;
                                            sQLitePreparedStatement15 = null;
                                            sQLitePreparedStatement16 = null;
                                            if (z4) {
                                            }
                                            if (sQLitePreparedStatement != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            if (sQLitePreparedStatement16 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement15 != null) {
                                            }
                                            if (sQLitePreparedStatement7 != null) {
                                            }
                                            if (sQLitePreparedStatement8 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e15) {
                                        e = e15;
                                        exc = e;
                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                        sQLitePreparedStatement2 = null;
                                        z4 = false;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement15 = null;
                                        sQLitePreparedStatement16 = null;
                                        messagesStorage.checkSQLException(exc);
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement14 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement16 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement15 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                    } catch (Throwable th17) {
                                        th = th17;
                                        th = th;
                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                        sQLitePreparedStatement2 = null;
                                        z4 = false;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement4 = null;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement15 = null;
                                        sQLitePreparedStatement16 = null;
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement16 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement15 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e16) {
                                    e = e16;
                                    sQLitePreparedStatement19 = executeFast3;
                                } catch (Throwable th18) {
                                    th = th18;
                                    sQLitePreparedStatement19 = executeFast3;
                                }
                                try {
                                    SQLitePreparedStatement executeFast4 = messagesStorage.database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?, ?)");
                                    try {
                                        sQLitePreparedStatement4 = executeFast4;
                                    } catch (Exception e17) {
                                        exc = e17;
                                        sQLitePreparedStatement4 = executeFast4;
                                    } catch (Throwable th19) {
                                        th = th19;
                                        sQLitePreparedStatement4 = executeFast4;
                                    }
                                    try {
                                        sQLitePreparedStatement3 = messagesStorage.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                        SQLitePreparedStatement sQLitePreparedStatement41 = sQLitePreparedStatement5;
                                        int i57 = 0;
                                        LongSparseArray longSparseArray21 = null;
                                        LongSparseArray longSparseArray22 = null;
                                        LongSparseArray longSparseArray23 = null;
                                        while (true) {
                                            try {
                                                hashMap = hashMap30;
                                                hashMap2 = hashMap29;
                                                str = ",";
                                                longSparseArray = longSparseArray21;
                                                str2 = " ";
                                                if (i57 >= arrayList.size()) {
                                                    break;
                                                }
                                                try {
                                                    TLRPC$Message tLRPC$Message4 = arrayList6.get(i57);
                                                    int i58 = tLRPC$Message4.id;
                                                    MessageObject.getDialogId(tLRPC$Message4);
                                                    int i59 = i57;
                                                    HashMap hashMap32 = hashMap23;
                                                    HashMap hashMap33 = hashMap24;
                                                    long topicId = MessageObject.getTopicId(messagesStorage.currentAccount, tLRPC$Message4, messagesStorage.isForum(tLRPC$Message4.dialog_id));
                                                    if (tLRPC$Message4.mentioned && tLRPC$Message4.media_unread) {
                                                        hashMap11 = hashMap25;
                                                        ArrayList arrayList9 = (ArrayList) longSparseArray19.get(tLRPC$Message4.dialog_id);
                                                        if (arrayList9 == null) {
                                                            arrayList9 = new ArrayList();
                                                            str10 = ",";
                                                            str11 = " AND topic_id = ";
                                                            longSparseArray19.put(tLRPC$Message4.dialog_id, arrayList9);
                                                        } else {
                                                            str10 = ",";
                                                            str11 = " AND topic_id = ";
                                                        }
                                                        arrayList9.add(Integer.valueOf(i58));
                                                        if (topicId != 0) {
                                                            FileLog.d("add message with message to " + tLRPC$Message4.dialog_id + " " + topicId);
                                                            TopicKey of = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                            ArrayList arrayList10 = (ArrayList) hashMap27.get(of);
                                                            if (arrayList10 == null) {
                                                                arrayList10 = new ArrayList();
                                                                hashMap27.put(of, arrayList10);
                                                            }
                                                            arrayList10.add(Integer.valueOf(i58));
                                                        }
                                                    } else {
                                                        hashMap11 = hashMap25;
                                                        str10 = ",";
                                                        str11 = " AND topic_id = ";
                                                    }
                                                    if (!(tLRPC$Message4.action instanceof TLRPC$TL_messageActionHistoryClear)) {
                                                        if (MessageObject.isOut(tLRPC$Message4)) {
                                                            if (!tLRPC$Message4.from_scheduled) {
                                                                if (topicId != 0) {
                                                                }
                                                            }
                                                        }
                                                        if ((tLRPC$Message4.id > 0 || MessageObject.isUnread(tLRPC$Message4)) && (!messagesStorage.isForum(tLRPC$Message4.dialog_id) || topicId != 0)) {
                                                            int i60 = longSparseIntArray14.get(tLRPC$Message4.dialog_id, -1);
                                                            if (i60 == -1) {
                                                                SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized("SELECT inbox_max FROM dialogs WHERE did = " + tLRPC$Message4.dialog_id, new Object[0]);
                                                                i60 = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                                                                queryFinalized2.dispose();
                                                                longSparseIntArray14.put(tLRPC$Message4.dialog_id, i60);
                                                            }
                                                            FileLog.d("update messageRead currentMaxId = " + i60 + " dialogId = " + tLRPC$Message4.dialog_id);
                                                            int i61 = tLRPC$Message4.id;
                                                            if (i61 >= 0 && i60 >= i61) {
                                                                str13 = str11;
                                                                str12 = str10;
                                                                if (topicId == 0) {
                                                                    TopicKey of2 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                    hashMap13 = hashMap32;
                                                                    Integer num2 = (Integer) hashMap13.get(of2);
                                                                    if (num2 == null) {
                                                                        longSparseIntArray8 = longSparseIntArray14;
                                                                        i46 = -1;
                                                                        intValue7 = -1;
                                                                    } else {
                                                                        intValue7 = num2.intValue();
                                                                        longSparseIntArray8 = longSparseIntArray14;
                                                                        i46 = -1;
                                                                    }
                                                                    if (intValue7 == i46) {
                                                                        SQLiteDatabase sQLiteDatabase5 = messagesStorage.database;
                                                                        StringBuilder sb2 = new StringBuilder();
                                                                        String str15 = str13;
                                                                        sb2.append("SELECT top_message FROM topics WHERE did = ");
                                                                        hashMap12 = hashMap27;
                                                                        longSparseArray9 = longSparseArray19;
                                                                        sb2.append(tLRPC$Message4.dialog_id);
                                                                        sb2.append(str15);
                                                                        sb2.append(topicId);
                                                                        SQLiteCursor queryFinalized3 = sQLiteDatabase5.queryFinalized(sb2.toString(), new Object[0]);
                                                                        int intValue9 = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                                        queryFinalized3.dispose();
                                                                        hashMap13.put(of2, Integer.valueOf(intValue9));
                                                                        intValue7 = intValue9;
                                                                    } else {
                                                                        hashMap12 = hashMap27;
                                                                        longSparseArray9 = longSparseArray19;
                                                                    }
                                                                    if (intValue7 >= tLRPC$Message4.id || !tLRPC$Message4.unread || tLRPC$Message4.out) {
                                                                        longSparseIntArray7 = longSparseIntArray13;
                                                                        hashMap15 = hashMap33;
                                                                    } else {
                                                                        hashMap15 = hashMap33;
                                                                        Integer num3 = (Integer) hashMap15.get(of2);
                                                                        if (num3 == null) {
                                                                            num3 = num;
                                                                        }
                                                                        longSparseIntArray7 = longSparseIntArray13;
                                                                        hashMap15.put(of2, Integer.valueOf(num3.intValue() + 1));
                                                                    }
                                                                    if (intValue7 < tLRPC$Message4.id) {
                                                                        hashMap14 = hashMap11;
                                                                        Integer num4 = (Integer) hashMap14.get(of2);
                                                                        if (num4 == null) {
                                                                            num4 = num;
                                                                        }
                                                                        hashMap14.put(of2, Integer.valueOf(num4.intValue() + 1));
                                                                    } else {
                                                                        hashMap14 = hashMap11;
                                                                    }
                                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message4)) {
                                                                        if (longSparseArray == null) {
                                                                            longSparseArray15 = new LongSparseArray();
                                                                            longSparseArray13 = new LongSparseArray();
                                                                            hashMap16 = hashMap15;
                                                                            hashMap17 = hashMap14;
                                                                            longSparseIntArray13 = longSparseIntArray7;
                                                                            longSparseArray14 = new LongSparseArray();
                                                                        } else {
                                                                            hashMap16 = hashMap15;
                                                                            hashMap17 = hashMap14;
                                                                            longSparseIntArray13 = longSparseIntArray7;
                                                                            longSparseArray13 = longSparseArray22;
                                                                            longSparseArray14 = longSparseArray23;
                                                                            longSparseArray15 = longSparseArray;
                                                                        }
                                                                        StringBuilder sb3 = (StringBuilder) longSparseArray15.get(tLRPC$Message4.dialog_id);
                                                                        if (sb3 == null) {
                                                                            sb3 = new StringBuilder();
                                                                            longSparseArray11 = longSparseArray17;
                                                                            longSparseArray10 = longSparseArray18;
                                                                            longSparseArray15.put(tLRPC$Message4.dialog_id, sb3);
                                                                        } else {
                                                                            longSparseArray11 = longSparseArray17;
                                                                            longSparseArray10 = longSparseArray18;
                                                                        }
                                                                        if (sb3.length() > 0) {
                                                                            sb3.append(str12);
                                                                        }
                                                                        sb3.append(i58);
                                                                        ArrayList arrayList11 = (ArrayList) longSparseArray13.get(tLRPC$Message4.dialog_id);
                                                                        if (arrayList11 == null) {
                                                                            arrayList11 = new ArrayList();
                                                                            hashMap18 = hashMap13;
                                                                            longSparseArray12 = longSparseArray15;
                                                                            longSparseArray13.put(tLRPC$Message4.dialog_id, arrayList11);
                                                                        } else {
                                                                            hashMap18 = hashMap13;
                                                                            longSparseArray12 = longSparseArray15;
                                                                        }
                                                                        arrayList11.add(Integer.valueOf(i58));
                                                                        SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray14.get(tLRPC$Message4.dialog_id);
                                                                        if (sparseIntArray2 == null) {
                                                                            sparseIntArray2 = new SparseIntArray();
                                                                            longSparseArray14.put(tLRPC$Message4.dialog_id, sparseIntArray2);
                                                                        }
                                                                        sparseIntArray2.put(i58, MediaDataController.getMediaType(tLRPC$Message4));
                                                                        if (topicId != 0) {
                                                                            TopicKey of3 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                            hashMap20 = hashMap2;
                                                                            StringBuilder sb4 = (StringBuilder) hashMap20.get(of3);
                                                                            if (sb4 == null) {
                                                                                sb4 = new StringBuilder();
                                                                                hashMap20.put(of3, sb4);
                                                                            }
                                                                            if (sb4.length() > 0) {
                                                                                sb4.append(str12);
                                                                            }
                                                                            sb4.append(i58);
                                                                            hashMap19 = hashMap;
                                                                            ArrayList arrayList12 = (ArrayList) hashMap19.get(of3);
                                                                            if (arrayList12 == null) {
                                                                                arrayList12 = new ArrayList();
                                                                                hashMap19.put(of3, arrayList12);
                                                                            }
                                                                            arrayList12.add(Integer.valueOf(i58));
                                                                        } else {
                                                                            hashMap19 = hashMap;
                                                                            hashMap20 = hashMap2;
                                                                        }
                                                                        longSparseArray23 = longSparseArray14;
                                                                        longSparseArray22 = longSparseArray13;
                                                                    } else {
                                                                        longSparseArray10 = longSparseArray18;
                                                                        hashMap16 = hashMap15;
                                                                        hashMap17 = hashMap14;
                                                                        longSparseIntArray13 = longSparseIntArray7;
                                                                        hashMap18 = hashMap13;
                                                                        hashMap19 = hashMap;
                                                                        hashMap20 = hashMap2;
                                                                        longSparseArray11 = longSparseArray17;
                                                                        longSparseArray12 = longSparseArray;
                                                                    }
                                                                    if (messagesStorage.isValidKeyboardToSave(tLRPC$Message4)) {
                                                                        TopicKey of4 = TopicKey.of(tLRPC$Message4.dialog_id, topicId);
                                                                        hashMap21 = hashMap31;
                                                                        TLRPC$Message tLRPC$Message5 = (TLRPC$Message) hashMap21.get(of4);
                                                                        if (tLRPC$Message5 != null) {
                                                                            if (tLRPC$Message5.id < tLRPC$Message4.id) {
                                                                            }
                                                                        }
                                                                        hashMap21.put(of4, tLRPC$Message4);
                                                                    } else {
                                                                        hashMap21 = hashMap31;
                                                                    }
                                                                    i57 = i59 + 1;
                                                                    arrayList6 = arrayList;
                                                                    hashMap31 = hashMap21;
                                                                    hashMap23 = hashMap18;
                                                                    longSparseArray17 = longSparseArray11;
                                                                    hashMap29 = hashMap20;
                                                                    longSparseArray19 = longSparseArray9;
                                                                    longSparseIntArray14 = longSparseIntArray8;
                                                                    hashMap24 = hashMap16;
                                                                    hashMap25 = hashMap17;
                                                                    longSparseArray18 = longSparseArray10;
                                                                    hashMap30 = hashMap19;
                                                                    longSparseArray21 = longSparseArray12;
                                                                    hashMap27 = hashMap12;
                                                                } else {
                                                                    hashMap12 = hashMap27;
                                                                    longSparseArray9 = longSparseArray19;
                                                                    hashMap13 = hashMap32;
                                                                    hashMap14 = hashMap11;
                                                                    longSparseIntArray7 = longSparseIntArray13;
                                                                    longSparseIntArray8 = longSparseIntArray14;
                                                                    hashMap15 = hashMap33;
                                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message4)) {
                                                                    }
                                                                    if (messagesStorage.isValidKeyboardToSave(tLRPC$Message4)) {
                                                                    }
                                                                    i57 = i59 + 1;
                                                                    arrayList6 = arrayList;
                                                                    hashMap31 = hashMap21;
                                                                    hashMap23 = hashMap18;
                                                                    longSparseArray17 = longSparseArray11;
                                                                    hashMap29 = hashMap20;
                                                                    longSparseArray19 = longSparseArray9;
                                                                    longSparseIntArray14 = longSparseIntArray8;
                                                                    hashMap24 = hashMap16;
                                                                    hashMap25 = hashMap17;
                                                                    longSparseArray18 = longSparseArray10;
                                                                    hashMap30 = hashMap19;
                                                                    longSparseArray21 = longSparseArray12;
                                                                    hashMap27 = hashMap12;
                                                                }
                                                            }
                                                            StringBuilder sb5 = (StringBuilder) longSparseArray17.get(tLRPC$Message4.dialog_id);
                                                            if (sb5 == null) {
                                                                sb5 = new StringBuilder();
                                                                longSparseArray17.put(tLRPC$Message4.dialog_id, sb5);
                                                            }
                                                            if (sb5.length() > 0) {
                                                                str12 = str10;
                                                                sb5.append(str12);
                                                            } else {
                                                                str12 = str10;
                                                            }
                                                            sb5.append(i58);
                                                            str13 = str11;
                                                            ArrayList arrayList13 = (ArrayList) longSparseArray18.get(tLRPC$Message4.dialog_id);
                                                            if (arrayList13 == null) {
                                                                arrayList13 = new ArrayList();
                                                                longSparseArray18.put(tLRPC$Message4.dialog_id, arrayList13);
                                                            }
                                                            arrayList13.add(Integer.valueOf(i58));
                                                            if (topicId == 0) {
                                                            }
                                                        }
                                                    }
                                                    hashMap12 = hashMap27;
                                                    longSparseArray9 = longSparseArray19;
                                                    hashMap13 = hashMap32;
                                                    hashMap14 = hashMap11;
                                                    str12 = str10;
                                                    longSparseIntArray7 = longSparseIntArray13;
                                                    longSparseIntArray8 = longSparseIntArray14;
                                                    hashMap15 = hashMap33;
                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message4)) {
                                                    }
                                                    if (messagesStorage.isValidKeyboardToSave(tLRPC$Message4)) {
                                                    }
                                                    i57 = i59 + 1;
                                                    arrayList6 = arrayList;
                                                    hashMap31 = hashMap21;
                                                    hashMap23 = hashMap18;
                                                    longSparseArray17 = longSparseArray11;
                                                    hashMap29 = hashMap20;
                                                    longSparseArray19 = longSparseArray9;
                                                    longSparseIntArray14 = longSparseIntArray8;
                                                    hashMap24 = hashMap16;
                                                    hashMap25 = hashMap17;
                                                    longSparseArray18 = longSparseArray10;
                                                    hashMap30 = hashMap19;
                                                    longSparseArray21 = longSparseArray12;
                                                    hashMap27 = hashMap12;
                                                } catch (Exception e18) {
                                                    exc = e18;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th20) {
                                                    th = th20;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } catch (Exception e19) {
                                                exc = e19;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                            } catch (Throwable th21) {
                                                th = th21;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                            }
                                        }
                                        LongSparseArray longSparseArray24 = longSparseArray18;
                                        HashMap hashMap34 = hashMap24;
                                        HashMap hashMap35 = hashMap27;
                                        HashMap hashMap36 = hashMap25;
                                        String str16 = " AND topic_id = ";
                                        LongSparseArray longSparseArray25 = longSparseArray19;
                                        LongSparseArray longSparseArray26 = longSparseArray17;
                                        HashMap hashMap37 = hashMap31;
                                        if (!hashMap37.isEmpty()) {
                                            for (TopicKey topicKey : hashMap37.keySet()) {
                                                getMediaDataController().putBotKeyboard(topicKey, (TLRPC$Message) hashMap37.get(topicKey));
                                            }
                                        }
                                        if (longSparseArray != null) {
                                            int size3 = longSparseArray.size();
                                            int i62 = 0;
                                            sparseArray = null;
                                            longSparseArray5 = null;
                                            while (i62 < size3) {
                                                LongSparseArray longSparseArray27 = longSparseArray;
                                                long keyAt = longSparseArray27.keyAt(i62);
                                                int i63 = size3;
                                                LongSparseArray longSparseArray28 = longSparseArray23;
                                                SparseIntArray sparseIntArray3 = (SparseIntArray) longSparseArray28.get(keyAt);
                                                LongSparseArray longSparseArray29 = longSparseArray25;
                                                LongSparseArray longSparseArray30 = longSparseArray22;
                                                ArrayList arrayList14 = (ArrayList) longSparseArray30.get(keyAt);
                                                HashMap hashMap38 = hashMap36;
                                                String str17 = str16;
                                                String str18 = str2;
                                                LongSparseArray longSparseArray31 = longSparseArray26;
                                                String str19 = str;
                                                try {
                                                    int i64 = 0;
                                                    HashMap hashMap39 = hashMap34;
                                                    SQLiteCursor queryFinalized4 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d", ((StringBuilder) longSparseArray27.valueAt(i62)).toString(), Long.valueOf(keyAt)), new Object[0]);
                                                    SparseIntArray sparseIntArray4 = null;
                                                    while (queryFinalized4.next()) {
                                                        int intValue10 = queryFinalized4.intValue(i64);
                                                        int intValue11 = queryFinalized4.intValue(1);
                                                        if (intValue11 == sparseIntArray3.get(intValue10)) {
                                                            arrayList14.remove(Integer.valueOf(intValue10));
                                                        } else {
                                                            if (sparseIntArray4 == null) {
                                                                if (longSparseArray5 == null) {
                                                                    longSparseArray5 = new LongSparseArray();
                                                                }
                                                                LongSparseArray longSparseArray32 = longSparseArray5;
                                                                SparseIntArray sparseIntArray5 = (SparseIntArray) longSparseArray32.get(keyAt);
                                                                if (sparseIntArray5 == null) {
                                                                    sparseIntArray5 = new SparseIntArray();
                                                                    longSparseArray32.put(keyAt, sparseIntArray5);
                                                                }
                                                                longSparseArray5 = longSparseArray32;
                                                                sparseIntArray4 = sparseIntArray5;
                                                            }
                                                            sparseIntArray4.put(intValue10, intValue11);
                                                        }
                                                        i64 = 0;
                                                    }
                                                    queryFinalized4.dispose();
                                                    if (sparseArray == null) {
                                                        sparseArray = new SparseArray();
                                                    }
                                                    int size4 = arrayList14.size();
                                                    int i65 = 0;
                                                    while (i65 < size4) {
                                                        int intValue12 = ((Integer) arrayList14.get(i65)).intValue();
                                                        int i66 = sparseIntArray3.get(intValue12);
                                                        int i67 = size4;
                                                        LongSparseIntArray longSparseIntArray18 = (LongSparseIntArray) sparseArray.get(i66);
                                                        if (longSparseIntArray18 == null) {
                                                            longSparseIntArray18 = new LongSparseIntArray();
                                                            sparseArray.put(i66, longSparseIntArray18);
                                                            sparseIntArray = sparseIntArray3;
                                                            i41 = 0;
                                                            i40 = Integer.MIN_VALUE;
                                                        } else {
                                                            i40 = Integer.MIN_VALUE;
                                                            sparseIntArray = sparseIntArray3;
                                                            i41 = longSparseIntArray18.get(keyAt, Integer.MIN_VALUE);
                                                        }
                                                        if (i41 == i40) {
                                                            i41 = 0;
                                                        }
                                                        longSparseIntArray18.put(keyAt, i41 + 1);
                                                        if (sparseIntArray4 != null && (i42 = sparseIntArray4.get(intValue12, -1)) >= 0) {
                                                            LongSparseIntArray longSparseIntArray19 = (LongSparseIntArray) sparseArray.get(i42);
                                                            if (longSparseIntArray19 == null) {
                                                                longSparseIntArray19 = new LongSparseIntArray();
                                                                sparseArray.put(i42, longSparseIntArray19);
                                                                i43 = Integer.MIN_VALUE;
                                                                i44 = 0;
                                                            } else {
                                                                i43 = Integer.MIN_VALUE;
                                                                i44 = longSparseIntArray19.get(keyAt, Integer.MIN_VALUE);
                                                            }
                                                            if (i44 == i43) {
                                                                i45 = -1;
                                                                i44 = 0;
                                                            } else {
                                                                i45 = -1;
                                                            }
                                                            longSparseIntArray19.put(keyAt, i44 + i45);
                                                        }
                                                        i65++;
                                                        sparseIntArray3 = sparseIntArray;
                                                        size4 = i67;
                                                    }
                                                    i62++;
                                                    longSparseArray = longSparseArray27;
                                                    str16 = str17;
                                                    longSparseArray25 = longSparseArray29;
                                                    longSparseArray22 = longSparseArray30;
                                                    str2 = str18;
                                                    hashMap36 = hashMap38;
                                                    str = str19;
                                                    longSparseArray26 = longSparseArray31;
                                                    hashMap34 = hashMap39;
                                                    longSparseArray23 = longSparseArray28;
                                                    size3 = i63;
                                                } catch (Exception e20) {
                                                    e = e20;
                                                    exc = e;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th22) {
                                                    th = th22;
                                                    th = th;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            hashMap3 = hashMap36;
                                            str3 = str16;
                                            longSparseArray2 = longSparseArray26;
                                            str4 = str2;
                                            str5 = str;
                                            longSparseArray3 = longSparseArray23;
                                            hashMap4 = hashMap34;
                                            longSparseArray4 = longSparseArray25;
                                        } else {
                                            hashMap3 = hashMap36;
                                            str3 = str16;
                                            longSparseArray2 = longSparseArray26;
                                            str4 = " ";
                                            str5 = ",";
                                            longSparseArray3 = longSparseArray23;
                                            hashMap4 = hashMap34;
                                            longSparseArray4 = longSparseArray25;
                                            sparseArray = null;
                                            longSparseArray5 = null;
                                        }
                                        Iterator it = hashMap2.keySet().iterator();
                                        LongSparseArray longSparseArray33 = longSparseArray5;
                                        while (it.hasNext()) {
                                            TopicKey topicKey2 = (TopicKey) it.next();
                                            SQLiteDatabase sQLiteDatabase6 = messagesStorage.database;
                                            Locale locale = Locale.US;
                                            String sb6 = ((StringBuilder) hashMap2.get(topicKey2)).toString();
                                            Long valueOf = Long.valueOf(topicKey2.dialogId);
                                            ArrayList arrayList15 = (ArrayList) hashMap.get(topicKey2);
                                            SparseArray sparseArray5 = sparseArray;
                                            Iterator it2 = it;
                                            try {
                                                SQLiteCursor queryFinalized5 = sQLiteDatabase6.queryFinalized(String.format(locale, "SELECT mid, type FROM media_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", sb6, valueOf, Long.valueOf(topicKey2.topicId)), new Object[0]);
                                                SparseIntArray sparseIntArray6 = null;
                                                while (queryFinalized5.next()) {
                                                    int intValue13 = queryFinalized5.intValue(0);
                                                    int intValue14 = queryFinalized5.intValue(1);
                                                    if (intValue14 == ((SparseIntArray) longSparseArray3.get(topicKey2.dialogId)).get(intValue13)) {
                                                        arrayList5 = arrayList15;
                                                        arrayList5.remove(Integer.valueOf(intValue13));
                                                    } else {
                                                        arrayList5 = arrayList15;
                                                        if (sparseIntArray6 == null) {
                                                            if (longSparseArray33 == null) {
                                                                longSparseArray33 = new LongSparseArray();
                                                            }
                                                            sparseIntArray6 = (SparseIntArray) longSparseArray33.get(topicKey2.dialogId);
                                                            if (sparseIntArray6 == null) {
                                                                sparseIntArray6 = new SparseIntArray();
                                                                sparseArray2 = sparseArray5;
                                                                longSparseArray33.put(topicKey2.dialogId, sparseIntArray6);
                                                                sparseIntArray6.put(intValue13, intValue14);
                                                                sparseArray5 = sparseArray2;
                                                            }
                                                        }
                                                        sparseArray2 = sparseArray5;
                                                        sparseIntArray6.put(intValue13, intValue14);
                                                        sparseArray5 = sparseArray2;
                                                    }
                                                    arrayList15 = arrayList5;
                                                }
                                                ArrayList arrayList16 = arrayList15;
                                                SparseArray sparseArray6 = sparseArray5;
                                                queryFinalized5.dispose();
                                                SparseIntArray sparseIntArray7 = (SparseIntArray) longSparseArray3.get(topicKey2.dialogId);
                                                int size5 = arrayList16.size();
                                                int i68 = 0;
                                                while (i68 < size5) {
                                                    int intValue15 = ((Integer) arrayList16.get(i68)).intValue();
                                                    int i69 = sparseIntArray7.get(intValue15);
                                                    SparseArray sparseArray7 = sparseArray4;
                                                    HashMap hashMap40 = (HashMap) sparseArray7.get(i69);
                                                    if (hashMap40 == null) {
                                                        hashMap40 = new HashMap();
                                                        sparseArray7.put(i69, hashMap40);
                                                    } else {
                                                        Integer num5 = (Integer) hashMap40.get(topicKey2);
                                                        if (num5 != null) {
                                                            intValue5 = num5.intValue();
                                                            hashMap40.put(topicKey2, Integer.valueOf(intValue5 + 1));
                                                            if (sparseIntArray6 == null && (i39 = sparseIntArray6.get(intValue15, -1)) >= 0) {
                                                                HashMap hashMap41 = (HashMap) sparseArray7.get(i39);
                                                                if (hashMap41 == null) {
                                                                    hashMap41 = new HashMap();
                                                                    sparseArray7.put(i39, hashMap41);
                                                                    intValue6 = 0;
                                                                } else {
                                                                    Integer num6 = (Integer) hashMap41.get(topicKey2);
                                                                    intValue6 = num6 == null ? Integer.MIN_VALUE : num6.intValue();
                                                                }
                                                                if (intValue6 == Integer.MIN_VALUE) {
                                                                    intValue6 = 0;
                                                                }
                                                                hashMap41.put(topicKey2, Integer.valueOf(intValue6 - 1));
                                                            }
                                                            i68++;
                                                            sparseArray4 = sparseArray7;
                                                        }
                                                    }
                                                    intValue5 = 0;
                                                    hashMap40.put(topicKey2, Integer.valueOf(intValue5 + 1));
                                                    if (sparseIntArray6 == null) {
                                                    }
                                                    i68++;
                                                    sparseArray4 = sparseArray7;
                                                }
                                                sparseArray = sparseArray6;
                                                it = it2;
                                            } catch (Exception e21) {
                                                e = e21;
                                                exc = e;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                z4 = false;
                                                sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                            } catch (Throwable th23) {
                                                th = th23;
                                                th = th;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                z4 = false;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                sQLitePreparedStatement11 = null;
                                                sQLitePreparedStatement12 = null;
                                                sQLitePreparedStatement13 = null;
                                                sQLitePreparedStatement15 = null;
                                                sQLitePreparedStatement16 = null;
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        SparseArray sparseArray8 = sparseArray;
                                        SparseArray sparseArray9 = sparseArray4;
                                        if (!longSparseArray2.isEmpty()) {
                                            int i70 = 0;
                                            for (int size6 = longSparseArray2.size(); i70 < size6; size6 = i38) {
                                                LongSparseArray longSparseArray34 = longSparseArray2;
                                                long keyAt2 = longSparseArray34.keyAt(i70);
                                                if (keyAt2 == j13) {
                                                    i38 = size6;
                                                    longSparseArray2 = longSparseArray34;
                                                    longSparseIntArray6 = longSparseIntArray16;
                                                    longSparseIntArray5 = longSparseIntArray17;
                                                    longSparseArray8 = longSparseArray4;
                                                } else {
                                                    LongSparseArray longSparseArray35 = longSparseArray24;
                                                    ArrayList arrayList17 = (ArrayList) longSparseArray35.get(keyAt2);
                                                    longSparseArray8 = longSparseArray4;
                                                    ArrayList arrayList18 = (ArrayList) longSparseArray8.get(keyAt2);
                                                    SQLiteDatabase sQLiteDatabase7 = messagesStorage.database;
                                                    Locale locale2 = Locale.US;
                                                    i38 = size6;
                                                    String sb7 = ((StringBuilder) longSparseArray34.valueAt(i70)).toString();
                                                    longSparseArray2 = longSparseArray34;
                                                    longSparseArray24 = longSparseArray35;
                                                    try {
                                                        int i71 = 0;
                                                        SQLiteCursor queryFinalized6 = sQLiteDatabase7.queryFinalized(String.format(locale2, "SELECT mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", sb7, Long.valueOf(keyAt2)), new Object[0]);
                                                        while (queryFinalized6.next()) {
                                                            Integer valueOf2 = Integer.valueOf(queryFinalized6.intValue(i71));
                                                            if (arrayList17 != null) {
                                                                arrayList17.remove(valueOf2);
                                                            }
                                                            if (arrayList18 != null) {
                                                                arrayList18.remove(valueOf2);
                                                            }
                                                            i71 = 0;
                                                        }
                                                        queryFinalized6.dispose();
                                                        longSparseIntArray5 = longSparseIntArray17;
                                                        int i72 = longSparseIntArray5.get(keyAt2, -1);
                                                        if (i72 < 0) {
                                                            i72 = 0;
                                                        }
                                                        longSparseIntArray5.put(keyAt2, i72 + arrayList17.size());
                                                        if (arrayList18 != null) {
                                                            longSparseIntArray6 = longSparseIntArray16;
                                                            int i73 = longSparseIntArray6.get(keyAt2, -1);
                                                            if (i73 < 0) {
                                                                i73 = 0;
                                                            }
                                                            longSparseIntArray6.put(keyAt2, i73 + arrayList18.size());
                                                        } else {
                                                            longSparseIntArray6 = longSparseIntArray16;
                                                        }
                                                    } catch (Exception e22) {
                                                        e = e22;
                                                        exc = e;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                        z4 = false;
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                    } catch (Throwable th24) {
                                                        th = th24;
                                                        th = th;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                        z4 = false;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                }
                                                i70++;
                                                longSparseIntArray17 = longSparseIntArray5;
                                                longSparseArray4 = longSparseArray8;
                                                longSparseIntArray16 = longSparseIntArray6;
                                            }
                                        }
                                        LongSparseIntArray longSparseIntArray20 = longSparseIntArray16;
                                        LongSparseIntArray longSparseIntArray21 = longSparseIntArray17;
                                        if (!hashMap35.isEmpty()) {
                                            for (TopicKey topicKey3 : hashMap35.keySet()) {
                                                HashMap hashMap42 = hashMap35;
                                                ArrayList arrayList19 = (ArrayList) hashMap42.get(topicKey3);
                                                String str20 = str5;
                                                ArrayList arrayList20 = arrayList19;
                                                SparseArray sparseArray10 = sparseArray9;
                                                try {
                                                    int i74 = 0;
                                                    SQLiteCursor queryFinalized7 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_topics WHERE mid IN(%s) AND uid = %d AND topic_id = %d", TextUtils.join(str20, arrayList19), Long.valueOf(topicKey3.dialogId), Long.valueOf(topicKey3.topicId)), new Object[0]);
                                                    while (queryFinalized7.next()) {
                                                        ArrayList arrayList21 = arrayList20;
                                                        arrayList21.remove(Integer.valueOf(queryFinalized7.intValue(i74)));
                                                        arrayList20 = arrayList21;
                                                        i74 = 0;
                                                    }
                                                    ArrayList arrayList22 = arrayList20;
                                                    queryFinalized7.dispose();
                                                    StringBuilder sb8 = new StringBuilder();
                                                    sb8.append("new unread mentions ");
                                                    sb8.append(topicKey3.dialogId);
                                                    String str21 = str4;
                                                    sb8.append(str21);
                                                    sb8.append(topicKey3.topicId);
                                                    sb8.append(str21);
                                                    sb8.append(arrayList22.size());
                                                    FileLog.d(sb8.toString());
                                                    HashMap hashMap43 = hashMap28;
                                                    hashMap43.put(topicKey3, Integer.valueOf(arrayList22.size()));
                                                    hashMap35 = hashMap42;
                                                    hashMap28 = hashMap43;
                                                    str4 = str21;
                                                    sparseArray9 = sparseArray10;
                                                    str5 = str20;
                                                } catch (Exception e23) {
                                                    e = e23;
                                                    exc = e;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th25) {
                                                    th = th25;
                                                    th = th;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                    z4 = false;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLitePreparedStatement15 = null;
                                                    sQLitePreparedStatement16 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                        }
                                        SparseArray sparseArray11 = sparseArray9;
                                        HashMap hashMap44 = hashMap28;
                                        String str22 = str4;
                                        if (longSparseArray33 != null) {
                                            int i75 = 0;
                                            while (i75 < longSparseArray33.size()) {
                                                long keyAt3 = longSparseArray33.keyAt(i75);
                                                SparseIntArray sparseIntArray8 = (SparseIntArray) longSparseArray33.valueAt(i75);
                                                StringBuilder sb9 = new StringBuilder();
                                                for (int i76 = 0; i76 < longSparseArray33.size(); i76++) {
                                                    int keyAt4 = sparseIntArray8.keyAt(i76);
                                                    if (sb9.length() != 0) {
                                                        sb9.append(", ");
                                                    }
                                                    sb9.append(keyAt4);
                                                }
                                                SQLiteDatabase sQLiteDatabase8 = messagesStorage.database;
                                                Locale locale3 = Locale.US;
                                                LongSparseArray longSparseArray36 = longSparseArray33;
                                                try {
                                                    sQLiteDatabase8.executeFast(String.format(locale3, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", sb9.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                                    try {
                                                        messagesStorage.database.executeFast(String.format(locale3, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", sb9.toString(), Long.valueOf(keyAt3))).stepThis().dispose();
                                                        i75++;
                                                        longSparseArray33 = longSparseArray36;
                                                    } catch (Exception e24) {
                                                        e = e24;
                                                        exc = e;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                        z4 = false;
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                    } catch (Throwable th26) {
                                                        th = th26;
                                                        th = th;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                        z4 = false;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        sQLitePreparedStatement11 = null;
                                                        sQLitePreparedStatement12 = null;
                                                        sQLitePreparedStatement13 = null;
                                                        sQLitePreparedStatement15 = null;
                                                        sQLitePreparedStatement16 = null;
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e25) {
                                                    e = e25;
                                                } catch (Throwable th27) {
                                                    th = th27;
                                                }
                                            }
                                        }
                                        int i77 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        int i78 = 0;
                                        SQLitePreparedStatement sQLitePreparedStatement42 = null;
                                        SQLitePreparedStatement sQLitePreparedStatement43 = null;
                                        SQLitePreparedStatement sQLitePreparedStatement44 = null;
                                        ArrayList arrayList23 = null;
                                        int i79 = 0;
                                        ArrayList arrayList24 = null;
                                        sQLitePreparedStatement12 = null;
                                        while (i79 < arrayList.size()) {
                                            try {
                                                try {
                                                    TLRPC$Message tLRPC$Message6 = arrayList.get(i79);
                                                    if (tLRPC$Message6 == null) {
                                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                        longSparseIntArray3 = longSparseIntArray21;
                                                        arrayList3 = arrayList23;
                                                        hashMap7 = hashMap44;
                                                        str8 = str22;
                                                        i17 = i79;
                                                        longSparseIntArray4 = longSparseIntArray20;
                                                        str9 = str14;
                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                        sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                        j3 = j13;
                                                        hashMap9 = hashMap26;
                                                        longSparseArray7 = longSparseArray20;
                                                    } else {
                                                        messagesStorage.fixUnsupportedMedia(tLRPC$Message6);
                                                        arrayList3 = arrayList23;
                                                        hashMap7 = hashMap44;
                                                        long topicId2 = MessageObject.getTopicId(messagesStorage.currentAccount, tLRPC$Message6, messagesStorage.isForum(tLRPC$Message6.dialog_id));
                                                        sQLitePreparedStatement19.requery();
                                                        int i80 = tLRPC$Message6.id;
                                                        int i81 = tLRPC$Message6.local_id;
                                                        if (i81 == 0) {
                                                            i81 = i80;
                                                        }
                                                        MessageObject.normalizeFlags(tLRPC$Message6);
                                                        str8 = str22;
                                                        longSparseIntArray3 = longSparseIntArray21;
                                                        NativeByteBuffer nativeByteBuffer8 = new NativeByteBuffer(tLRPC$Message6.getObjectSize());
                                                        tLRPC$Message6.serializeToStream(nativeByteBuffer8);
                                                        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message6.action;
                                                        longSparseIntArray4 = longSparseIntArray20;
                                                        try {
                                                            try {
                                                                try {
                                                                    try {
                                                                        try {
                                                                            if (tLRPC$MessageAction instanceof TLRPC$TL_messageEncryptedAction) {
                                                                                try {
                                                                                    TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction = tLRPC$MessageAction.encryptedAction;
                                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                                                    try {
                                                                                        if (!(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) && !(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionScreenshotMessages)) {
                                                                                            z8 = false;
                                                                                            if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) && !MessageObject.isOut(tLRPC$Message6)) {
                                                                                                if (arrayList24 == null) {
                                                                                                    arrayList24 = new ArrayList();
                                                                                                }
                                                                                                arrayList24.add(tLRPC$Message6);
                                                                                            }
                                                                                            if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                                                                if (arrayList24 == null) {
                                                                                                    arrayList24 = new ArrayList();
                                                                                                }
                                                                                                arrayList24.add(tLRPC$Message6);
                                                                                            }
                                                                                            if (z8) {
                                                                                                i17 = i79;
                                                                                                hashMap8 = hashMap26;
                                                                                                longSparseArray7 = longSparseArray20;
                                                                                                arrayList4 = arrayList24;
                                                                                            } else {
                                                                                                ArrayList arrayList25 = arrayList24;
                                                                                                LongSparseArray longSparseArray37 = longSparseArray20;
                                                                                                TLRPC$Message tLRPC$Message7 = (TLRPC$Message) longSparseArray37.get(tLRPC$Message6.dialog_id);
                                                                                                if (tLRPC$Message7 != null) {
                                                                                                    arrayList4 = arrayList25;
                                                                                                    if (tLRPC$Message6.date <= tLRPC$Message7.date) {
                                                                                                        int i82 = tLRPC$Message7.id;
                                                                                                        if (i82 > 0) {
                                                                                                        }
                                                                                                        if (i82 < 0 && tLRPC$Message6.id < i82) {
                                                                                                        }
                                                                                                        if (topicId2 != 0) {
                                                                                                            long j14 = tLRPC$Message6.dialog_id;
                                                                                                            if (j14 != j13) {
                                                                                                                TopicKey of5 = TopicKey.of(j14, topicId2);
                                                                                                                hashMap8 = hashMap26;
                                                                                                                TLRPC$Message tLRPC$Message8 = (TLRPC$Message) hashMap8.get(of5);
                                                                                                                if (tLRPC$Message8 != null) {
                                                                                                                    longSparseArray7 = longSparseArray37;
                                                                                                                    i17 = i79;
                                                                                                                    if (tLRPC$Message6.date <= tLRPC$Message8.date) {
                                                                                                                        int i83 = tLRPC$Message8.id;
                                                                                                                        if (i83 > 0) {
                                                                                                                        }
                                                                                                                        if (i83 < 0 && tLRPC$Message6.id < i83) {
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    longSparseArray7 = longSparseArray37;
                                                                                                                    i17 = i79;
                                                                                                                }
                                                                                                                hashMap8.put(of5, tLRPC$Message6);
                                                                                                            }
                                                                                                        }
                                                                                                        i17 = i79;
                                                                                                        hashMap8 = hashMap26;
                                                                                                        longSparseArray7 = longSparseArray37;
                                                                                                    }
                                                                                                } else {
                                                                                                    arrayList4 = arrayList25;
                                                                                                }
                                                                                                longSparseArray37.put(tLRPC$Message6.dialog_id, tLRPC$Message6);
                                                                                                if (topicId2 != 0) {
                                                                                                }
                                                                                                i17 = i79;
                                                                                                hashMap8 = hashMap26;
                                                                                                longSparseArray7 = longSparseArray37;
                                                                                            }
                                                                                            SQLitePreparedStatement sQLitePreparedStatement45 = sQLitePreparedStatement20;
                                                                                            i18 = 2;
                                                                                            i19 = 0;
                                                                                            while (i19 < i18) {
                                                                                                boolean z13 = i19 == 1;
                                                                                                if (j11 == 0 || z13) {
                                                                                                    j7 = topicId2;
                                                                                                    try {
                                                                                                        long j15 = tLRPC$Message6.dialog_id;
                                                                                                        try {
                                                                                                            try {
                                                                                                                if (!z13) {
                                                                                                                    i25 = i78;
                                                                                                                    long j16 = j13;
                                                                                                                    i26 = i77;
                                                                                                                    j8 = j16;
                                                                                                                    sQLitePreparedStatement37 = sQLitePreparedStatement19;
                                                                                                                } else if (j7 == 0) {
                                                                                                                    i25 = i78;
                                                                                                                } else {
                                                                                                                    if (j13 == j15) {
                                                                                                                        int i84 = i77;
                                                                                                                        i25 = i78;
                                                                                                                        j8 = j13;
                                                                                                                        try {
                                                                                                                            if (MessageObject.getSavedDialogId(j8, tLRPC$Message6) != 0) {
                                                                                                                                i26 = i84;
                                                                                                                                if (tLRPC$Message6.id >= 0 || MessageObject.getSavedDialogId(j8, tLRPC$Message6) == j8) {
                                                                                                                                    if (arrayList3 == null) {
                                                                                                                                        arrayList3 = new ArrayList();
                                                                                                                                    }
                                                                                                                                    ArrayList arrayList26 = arrayList3;
                                                                                                                                    arrayList26.add(tLRPC$Message6);
                                                                                                                                    arrayList3 = arrayList26;
                                                                                                                                }
                                                                                                                                sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                                                i36 = i81;
                                                                                                                                nativeByteBuffer3 = nativeByteBuffer8;
                                                                                                                                hashMap10 = hashMap8;
                                                                                                                                j10 = j7;
                                                                                                                                i37 = 1;
                                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                                i19 += i37;
                                                                                                                                hashMap8 = hashMap10;
                                                                                                                                nativeByteBuffer8 = nativeByteBuffer3;
                                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                                i81 = i36;
                                                                                                                                sQLitePreparedStatement42 = sQLitePreparedStatement16;
                                                                                                                                topicId2 = j10;
                                                                                                                                i18 = 2;
                                                                                                                                long j17 = j8;
                                                                                                                                i77 = i26;
                                                                                                                                j13 = j17;
                                                                                                                                i78 = i25;
                                                                                                                            } else {
                                                                                                                                i26 = i84;
                                                                                                                            }
                                                                                                                        } catch (Exception e26) {
                                                                                                                            exc = e26;
                                                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                            sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            z4 = false;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                            if (z4) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                        } catch (Throwable th28) {
                                                                                                                            th = th28;
                                                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                            sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            z4 = false;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            if (z4) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            throw th;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        i25 = i78;
                                                                                                                        long j18 = j13;
                                                                                                                        i26 = i77;
                                                                                                                        j8 = j18;
                                                                                                                    }
                                                                                                                    sQLitePreparedStatement37 = sQLitePreparedStatement17;
                                                                                                                }
                                                                                                                sQLitePreparedStatement37.bindInteger(i28, tLRPC$Message6.send_state);
                                                                                                                sQLitePreparedStatement37.bindInteger(i29, tLRPC$Message6.date);
                                                                                                                int i85 = i27 + 4;
                                                                                                                j10 = j9;
                                                                                                                sQLitePreparedStatement37.bindByteBuffer(i27 + 3, nativeByteBuffer8);
                                                                                                                int i86 = i27 + 5;
                                                                                                                if (!MessageObject.isOut(tLRPC$Message6) && !tLRPC$Message6.from_scheduled) {
                                                                                                                    i30 = 0;
                                                                                                                    sQLitePreparedStatement37.bindInteger(i85, i30);
                                                                                                                    int i87 = i27 + 6;
                                                                                                                    sQLitePreparedStatement37.bindInteger(i86, tLRPC$Message6.ttl);
                                                                                                                    if ((tLRPC$Message6.flags & 1024) == 0) {
                                                                                                                        i31 = i27 + 7;
                                                                                                                        sQLitePreparedStatement37.bindInteger(i87, tLRPC$Message6.views);
                                                                                                                    } else {
                                                                                                                        i31 = i27 + 7;
                                                                                                                        sQLitePreparedStatement37.bindInteger(i87, messagesStorage.getMessageMediaType(tLRPC$Message6));
                                                                                                                    }
                                                                                                                    if (tLRPC$Message6.replyStory == null) {
                                                                                                                        NativeByteBuffer nativeByteBuffer9 = new NativeByteBuffer(tLRPC$Message6.replyStory.getObjectSize());
                                                                                                                        tLRPC$Message6.replyStory.serializeToStream(nativeByteBuffer9);
                                                                                                                        i32 = i31 + 1;
                                                                                                                        sQLitePreparedStatement37.bindByteBuffer(i31, nativeByteBuffer9);
                                                                                                                        nativeByteBuffer2 = nativeByteBuffer9;
                                                                                                                    } else {
                                                                                                                        i32 = i31 + 1;
                                                                                                                        sQLitePreparedStatement37.bindNull(i31);
                                                                                                                        nativeByteBuffer2 = null;
                                                                                                                    }
                                                                                                                    int i88 = tLRPC$Message6.stickerVerified;
                                                                                                                    sQLitePreparedStatement37.bindInteger(i32, i88 != 0 ? 1 : i88 == 2 ? 2 : 0);
                                                                                                                    nativeByteBuffer3 = nativeByteBuffer8;
                                                                                                                    sQLitePreparedStatement37.bindInteger(i32 + 1, tLRPC$Message6.mentioned ? 1 : 0);
                                                                                                                    int i89 = i32 + 3;
                                                                                                                    sQLitePreparedStatement37.bindInteger(i32 + 2, tLRPC$Message6.forwards);
                                                                                                                    if (tLRPC$Message6.replies == null) {
                                                                                                                        NativeByteBuffer nativeByteBuffer10 = new NativeByteBuffer(tLRPC$Message6.replies.getObjectSize());
                                                                                                                        tLRPC$Message6.replies.serializeToStream(nativeByteBuffer10);
                                                                                                                        i33 = i32 + 4;
                                                                                                                        sQLitePreparedStatement37.bindByteBuffer(i89, nativeByteBuffer10);
                                                                                                                        nativeByteBuffer4 = nativeByteBuffer10;
                                                                                                                    } else {
                                                                                                                        i33 = i32 + 4;
                                                                                                                        sQLitePreparedStatement37.bindNull(i89);
                                                                                                                        nativeByteBuffer4 = null;
                                                                                                                    }
                                                                                                                    tLRPC$MessageReplyHeader = tLRPC$Message6.reply_to;
                                                                                                                    if (tLRPC$MessageReplyHeader == null) {
                                                                                                                        int i90 = i33 + 1;
                                                                                                                        int i91 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                                                                        if (i91 == 0) {
                                                                                                                            i91 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                                                                        }
                                                                                                                        sQLitePreparedStatement37.bindInteger(i33, i91);
                                                                                                                        i34 = i90;
                                                                                                                    } else {
                                                                                                                        sQLitePreparedStatement37.bindInteger(i33, 0);
                                                                                                                        i34 = i33 + 1;
                                                                                                                    }
                                                                                                                    int i92 = i34 + 1;
                                                                                                                    nativeByteBuffer5 = nativeByteBuffer2;
                                                                                                                    sQLitePreparedStatement37.bindLong(i34, MessageObject.getChannelId(tLRPC$Message6));
                                                                                                                    writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message6);
                                                                                                                    if (writeLocalParams == null) {
                                                                                                                        i35 = i34 + 2;
                                                                                                                        sQLitePreparedStatement37.bindByteBuffer(i92, writeLocalParams);
                                                                                                                    } else {
                                                                                                                        i35 = i34 + 2;
                                                                                                                        sQLitePreparedStatement37.bindNull(i92);
                                                                                                                    }
                                                                                                                    if (!z13) {
                                                                                                                        i36 = i81;
                                                                                                                    } else if ((tLRPC$Message6.flags & 131072) != 0) {
                                                                                                                        i36 = i81;
                                                                                                                        sQLitePreparedStatement37.bindLong(i35, tLRPC$Message6.grouped_id);
                                                                                                                        i35++;
                                                                                                                    } else {
                                                                                                                        i36 = i81;
                                                                                                                        sQLitePreparedStatement37.bindNull(i35);
                                                                                                                        i35++;
                                                                                                                    }
                                                                                                                    tLRPC$MessageReplyHeader2 = tLRPC$Message6.reply_to;
                                                                                                                    if (tLRPC$MessageReplyHeader2 == null) {
                                                                                                                        sQLitePreparedStatement37.bindInteger(i35, tLRPC$MessageReplyHeader2.story_id);
                                                                                                                    } else {
                                                                                                                        sQLitePreparedStatement37.bindInteger(i35, 0);
                                                                                                                    }
                                                                                                                    sQLitePreparedStatement37.step();
                                                                                                                    if (nativeByteBuffer4 != null) {
                                                                                                                        nativeByteBuffer4.reuse();
                                                                                                                    }
                                                                                                                    if (writeLocalParams != null) {
                                                                                                                        writeLocalParams.reuse();
                                                                                                                    }
                                                                                                                    if (nativeByteBuffer5 != null) {
                                                                                                                        nativeByteBuffer5.reuse();
                                                                                                                    }
                                                                                                                    if (j15 != j8) {
                                                                                                                        try {
                                                                                                                            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid = %d", Integer.valueOf(tLRPC$Message6.id))).stepThis().dispose();
                                                                                                                            SQLitePreparedStatement executeFast5 = sQLitePreparedStatement20 == null ? messagesStorage.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)") : sQLitePreparedStatement20;
                                                                                                                            try {
                                                                                                                                executeFast5.requery();
                                                                                                                                messagesStorage.bindMessageTags(executeFast5, tLRPC$Message6);
                                                                                                                                executeFast5.step();
                                                                                                                                sQLitePreparedStatement45 = executeFast5;
                                                                                                                            } catch (Exception e27) {
                                                                                                                                exc = e27;
                                                                                                                                sQLitePreparedStatement20 = executeFast5;
                                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                z4 = false;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                                if (z4) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                            } catch (Throwable th29) {
                                                                                                                                th = th29;
                                                                                                                                sQLitePreparedStatement20 = executeFast5;
                                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                                z4 = false;
                                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                                if (z4) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                                }
                                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                                }
                                                                                                                                throw th;
                                                                                                                            }
                                                                                                                        } catch (Exception e28) {
                                                                                                                            exc = e28;
                                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            z4 = false;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                                            if (z4) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                        } catch (Throwable th30) {
                                                                                                                            th = th30;
                                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement41;
                                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                                            z4 = false;
                                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                                            if (z4) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                                            }
                                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                                            }
                                                                                                                            throw th;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        sQLitePreparedStatement45 = sQLitePreparedStatement20;
                                                                                                                    }
                                                                                                                    i37 = 1;
                                                                                                                    i19 += i37;
                                                                                                                    hashMap8 = hashMap10;
                                                                                                                    nativeByteBuffer8 = nativeByteBuffer3;
                                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                    i81 = i36;
                                                                                                                    sQLitePreparedStatement42 = sQLitePreparedStatement16;
                                                                                                                    topicId2 = j10;
                                                                                                                    i18 = 2;
                                                                                                                    long j172 = j8;
                                                                                                                    i77 = i26;
                                                                                                                    j13 = j172;
                                                                                                                    i78 = i25;
                                                                                                                }
                                                                                                                i30 = 1;
                                                                                                                sQLitePreparedStatement37.bindInteger(i85, i30);
                                                                                                                int i872 = i27 + 6;
                                                                                                                sQLitePreparedStatement37.bindInteger(i86, tLRPC$Message6.ttl);
                                                                                                                if ((tLRPC$Message6.flags & 1024) == 0) {
                                                                                                                }
                                                                                                                if (tLRPC$Message6.replyStory == null) {
                                                                                                                }
                                                                                                                int i882 = tLRPC$Message6.stickerVerified;
                                                                                                                sQLitePreparedStatement37.bindInteger(i32, i882 != 0 ? 1 : i882 == 2 ? 2 : 0);
                                                                                                                nativeByteBuffer3 = nativeByteBuffer8;
                                                                                                                sQLitePreparedStatement37.bindInteger(i32 + 1, tLRPC$Message6.mentioned ? 1 : 0);
                                                                                                                int i892 = i32 + 3;
                                                                                                                sQLitePreparedStatement37.bindInteger(i32 + 2, tLRPC$Message6.forwards);
                                                                                                                if (tLRPC$Message6.replies == null) {
                                                                                                                }
                                                                                                                tLRPC$MessageReplyHeader = tLRPC$Message6.reply_to;
                                                                                                                if (tLRPC$MessageReplyHeader == null) {
                                                                                                                }
                                                                                                                int i922 = i34 + 1;
                                                                                                                nativeByteBuffer5 = nativeByteBuffer2;
                                                                                                                sQLitePreparedStatement37.bindLong(i34, MessageObject.getChannelId(tLRPC$Message6));
                                                                                                                writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message6);
                                                                                                                if (writeLocalParams == null) {
                                                                                                                }
                                                                                                                if (!z13) {
                                                                                                                }
                                                                                                                tLRPC$MessageReplyHeader2 = tLRPC$Message6.reply_to;
                                                                                                                if (tLRPC$MessageReplyHeader2 == null) {
                                                                                                                }
                                                                                                                sQLitePreparedStatement37.step();
                                                                                                                if (nativeByteBuffer4 != null) {
                                                                                                                }
                                                                                                                if (writeLocalParams != null) {
                                                                                                                }
                                                                                                                if (nativeByteBuffer5 != null) {
                                                                                                                }
                                                                                                                if (j15 != j8) {
                                                                                                                }
                                                                                                                i37 = 1;
                                                                                                                i19 += i37;
                                                                                                                hashMap8 = hashMap10;
                                                                                                                nativeByteBuffer8 = nativeByteBuffer3;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                i81 = i36;
                                                                                                                sQLitePreparedStatement42 = sQLitePreparedStatement16;
                                                                                                                topicId2 = j10;
                                                                                                                i18 = 2;
                                                                                                                long j1722 = j8;
                                                                                                                i77 = i26;
                                                                                                                j13 = j1722;
                                                                                                                i78 = i25;
                                                                                                            } catch (Exception e29) {
                                                                                                                e = e29;
                                                                                                                exc = e;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                            } catch (Throwable th31) {
                                                                                                                th = th31;
                                                                                                                th = th;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                                throw th;
                                                                                                            }
                                                                                                            sQLitePreparedStatement37.bindInteger(i27, MessageObject.getUnreadFlags(tLRPC$Message6));
                                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement38;
                                                                                                            i29 = i27 + 2;
                                                                                                        } catch (Exception e30) {
                                                                                                            e = e30;
                                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement38;
                                                                                                        } catch (Throwable th32) {
                                                                                                            th = th32;
                                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement38;
                                                                                                        }
                                                                                                        sQLitePreparedStatement37.requery();
                                                                                                        hashMap10 = hashMap8;
                                                                                                        sQLitePreparedStatement37.bindInteger(1, i81);
                                                                                                        sQLitePreparedStatement37.bindLong(2, j15);
                                                                                                        if (z13) {
                                                                                                            sQLitePreparedStatement38 = sQLitePreparedStatement42;
                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                            try {
                                                                                                                sQLitePreparedStatement37.bindLong(3, j7);
                                                                                                                j9 = j7;
                                                                                                                i27 = 4;
                                                                                                            } catch (Exception e31) {
                                                                                                                exc = e31;
                                                                                                                sQLitePreparedStatement16 = sQLitePreparedStatement38;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                            } catch (Throwable th33) {
                                                                                                                th = th33;
                                                                                                                sQLitePreparedStatement16 = sQLitePreparedStatement38;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                                throw th;
                                                                                                            }
                                                                                                        } else {
                                                                                                            sQLitePreparedStatement38 = sQLitePreparedStatement42;
                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                            j9 = j7;
                                                                                                            i27 = 3;
                                                                                                        }
                                                                                                        i28 = i27 + 1;
                                                                                                    } catch (Exception e32) {
                                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                        exc = e32;
                                                                                                    } catch (Throwable th34) {
                                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                                        th = th34;
                                                                                                    }
                                                                                                } else {
                                                                                                    i25 = i78;
                                                                                                    j7 = topicId2;
                                                                                                }
                                                                                                long j19 = j13;
                                                                                                i26 = i77;
                                                                                                j8 = j19;
                                                                                                sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                                i36 = i81;
                                                                                                nativeByteBuffer3 = nativeByteBuffer8;
                                                                                                hashMap10 = hashMap8;
                                                                                                j10 = j7;
                                                                                                i37 = 1;
                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                i19 += i37;
                                                                                                hashMap8 = hashMap10;
                                                                                                nativeByteBuffer8 = nativeByteBuffer3;
                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                i81 = i36;
                                                                                                sQLitePreparedStatement42 = sQLitePreparedStatement16;
                                                                                                topicId2 = j10;
                                                                                                i18 = 2;
                                                                                                long j17222 = j8;
                                                                                                i77 = i26;
                                                                                                j13 = j17222;
                                                                                                i78 = i25;
                                                                                            }
                                                                                            int i93 = i78;
                                                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement45;
                                                                                            int i94 = i81;
                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                            long j20 = topicId2;
                                                                                            NativeByteBuffer nativeByteBuffer11 = nativeByteBuffer8;
                                                                                            long j21 = j13;
                                                                                            i20 = i77;
                                                                                            hashMap9 = hashMap8;
                                                                                            if (tLRPC$Message6.random_id == 0) {
                                                                                                try {
                                                                                                    sQLitePreparedStatement41.requery();
                                                                                                    sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                    try {
                                                                                                        sQLitePreparedStatement23.bindLong(1, tLRPC$Message6.random_id);
                                                                                                        i21 = i94;
                                                                                                        sQLitePreparedStatement23.bindInteger(2, i21);
                                                                                                        sQLitePreparedStatement23.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                        sQLitePreparedStatement23.step();
                                                                                                    } catch (Exception e33) {
                                                                                                        e = e33;
                                                                                                        exc = e;
                                                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                        sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                        z4 = false;
                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                        if (z4) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                    } catch (Throwable th35) {
                                                                                                        th = th35;
                                                                                                        th = th;
                                                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                        sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                        z4 = false;
                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                        if (z4) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                } catch (Exception e34) {
                                                                                                    e = e34;
                                                                                                    sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                } catch (Throwable th36) {
                                                                                                    th = th36;
                                                                                                    sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                }
                                                                                            } else {
                                                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                                i21 = i94;
                                                                                            }
                                                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                                                nativeByteBuffer = nativeByteBuffer11;
                                                                                            } else {
                                                                                                SQLitePreparedStatement executeFast6 = messagesStorage.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                                                                                try {
                                                                                                    executeFast6.requery();
                                                                                                    executeFast6.bindInteger(1, i21);
                                                                                                    executeFast6.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                    executeFast6.bindInteger(3, tLRPC$Message6.date);
                                                                                                    executeFast6.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                                    nativeByteBuffer = nativeByteBuffer11;
                                                                                                    executeFast6.bindByteBuffer(5, nativeByteBuffer);
                                                                                                    executeFast6.step();
                                                                                                    if (j20 != 0) {
                                                                                                        if (sQLitePreparedStatement16 == null) {
                                                                                                            try {
                                                                                                                executeFast = messagesStorage.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                                                                                                            } catch (Exception e35) {
                                                                                                                exc = e35;
                                                                                                                executeFast6 = null;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement11 = executeFast6;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                            } catch (Throwable th37) {
                                                                                                                th = th37;
                                                                                                                executeFast6 = null;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement11 = executeFast6;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                                throw th;
                                                                                                            }
                                                                                                        } else {
                                                                                                            executeFast = sQLitePreparedStatement16;
                                                                                                        }
                                                                                                        try {
                                                                                                            executeFast.requery();
                                                                                                            executeFast.bindInteger(1, i21);
                                                                                                            executeFast.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                            executeFast.bindLong(3, j20);
                                                                                                            executeFast.bindInteger(4, tLRPC$Message6.date);
                                                                                                            executeFast.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message6));
                                                                                                            executeFast.bindByteBuffer(6, nativeByteBuffer);
                                                                                                            executeFast.step();
                                                                                                            sQLitePreparedStatement16 = executeFast;
                                                                                                        } catch (Exception e36) {
                                                                                                            exc = e36;
                                                                                                            sQLitePreparedStatement16 = executeFast;
                                                                                                            executeFast6 = null;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                            sQLitePreparedStatement11 = executeFast6;
                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            z4 = false;
                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                            if (z4) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                        } catch (Throwable th38) {
                                                                                                            th = th38;
                                                                                                            sQLitePreparedStatement16 = executeFast;
                                                                                                            executeFast6 = null;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                            sQLitePreparedStatement11 = executeFast6;
                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            z4 = false;
                                                                                                            if (z4) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    }
                                                                                                } catch (Exception e37) {
                                                                                                    exc = e37;
                                                                                                } catch (Throwable th39) {
                                                                                                    th = th39;
                                                                                                }
                                                                                            }
                                                                                            if (tLRPC$Message6.ttl_period != 0 || tLRPC$Message6.id <= 0) {
                                                                                                i22 = i20;
                                                                                                sQLitePreparedStatement36 = sQLitePreparedStatement15;
                                                                                            } else {
                                                                                                sQLitePreparedStatement36 = sQLitePreparedStatement15 == null ? messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)") : sQLitePreparedStatement15;
                                                                                                try {
                                                                                                    sQLitePreparedStatement36.requery();
                                                                                                    sQLitePreparedStatement36.bindInteger(1, i21);
                                                                                                    sQLitePreparedStatement36.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                    sQLitePreparedStatement36.bindInteger(3, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                    sQLitePreparedStatement36.bindInteger(4, 0);
                                                                                                    sQLitePreparedStatement36.step();
                                                                                                    i22 = Math.min(i20, tLRPC$Message6.date + tLRPC$Message6.ttl_period);
                                                                                                } catch (Exception e38) {
                                                                                                    exc = e38;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th40) {
                                                                                                    th = th40;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                            tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                                            if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll)) {
                                                                                                if (sQLitePreparedStatement12 == null) {
                                                                                                    sQLitePreparedStatement12 = messagesStorage.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                                                }
                                                                                                SQLitePreparedStatement sQLitePreparedStatement46 = sQLitePreparedStatement12;
                                                                                                try {
                                                                                                    sQLitePreparedStatement46.requery();
                                                                                                    sQLitePreparedStatement46.bindInteger(1, i21);
                                                                                                    sQLitePreparedStatement46.bindLong(2, tLRPC$Message6.dialog_id);
                                                                                                    sQLitePreparedStatement46.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message6.media).poll.id);
                                                                                                    sQLitePreparedStatement46.step();
                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement46;
                                                                                                } catch (Exception e39) {
                                                                                                    exc = e39;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement46;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th41) {
                                                                                                    th = th41;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement46;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                try {
                                                                                                    sQLitePreparedStatement3.requery();
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    sQLitePreparedStatement22.bindLong(1, tLRPC$Message6.media.webpage.id);
                                                                                                    sQLitePreparedStatement22.bindInteger(2, i21);
                                                                                                    sQLitePreparedStatement22.bindLong(3, tLRPC$Message6.dialog_id);
                                                                                                    sQLitePreparedStatement22.step();
                                                                                                    nativeByteBuffer.reuse();
                                                                                                    if (i != 0) {
                                                                                                        if (tLRPC$Message6.peer_id.channel_id != 0) {
                                                                                                            try {
                                                                                                            } catch (Exception e40) {
                                                                                                                e = e40;
                                                                                                                exc = e;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                            } catch (Throwable th42) {
                                                                                                                th = th42;
                                                                                                                th = th;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                sQLitePreparedStatement7 = null;
                                                                                                                sQLitePreparedStatement8 = null;
                                                                                                                sQLitePreparedStatement9 = null;
                                                                                                                sQLitePreparedStatement10 = null;
                                                                                                                z4 = false;
                                                                                                                sQLitePreparedStatement11 = null;
                                                                                                                if (z4) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                                }
                                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                                }
                                                                                                                throw th;
                                                                                                            }
                                                                                                        }
                                                                                                        if (tLRPC$Message6.date >= getConnectionsManager().getCurrentTime() - 3600 && getDownloadController().canDownloadMedia(tLRPC$Message6) == 1) {
                                                                                                            TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message6.media;
                                                                                                            if ((tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaDocument) || (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaWebPage)) {
                                                                                                                TLRPC$Document document = MessageObject.getDocument(tLRPC$Message6);
                                                                                                                TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message6);
                                                                                                                if (MessageObject.isVoiceMessage(tLRPC$Message6)) {
                                                                                                                    long j22 = document.id;
                                                                                                                    TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                                                                                    tLRPC$TL_messageMediaDocument.document = document;
                                                                                                                    tLRPC$TL_messageMediaDocument.flags |= 1;
                                                                                                                    j3 = j21;
                                                                                                                    tLRPC$MessageMedia2 = tLRPC$TL_messageMediaDocument;
                                                                                                                    j5 = j22;
                                                                                                                    i23 = 2;
                                                                                                                } else {
                                                                                                                    if (!MessageObject.isStickerMessage(tLRPC$Message6) && !MessageObject.isAnimatedStickerMessage(tLRPC$Message6)) {
                                                                                                                        if (!MessageObject.isVideoMessage(tLRPC$Message6) && !MessageObject.isRoundVideoMessage(tLRPC$Message6) && !MessageObject.isGifMessage(tLRPC$Message6)) {
                                                                                                                            if (document != null) {
                                                                                                                                long j23 = document.id;
                                                                                                                                TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument2 = new TLRPC$TL_messageMediaDocument();
                                                                                                                                tLRPC$TL_messageMediaDocument2.document = document;
                                                                                                                                tLRPC$TL_messageMediaDocument2.flags |= 1;
                                                                                                                                j3 = j21;
                                                                                                                                tLRPC$MessageMedia2 = tLRPC$TL_messageMediaDocument2;
                                                                                                                                j5 = j23;
                                                                                                                                i23 = 8;
                                                                                                                            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                                                                                                                                j3 = j21;
                                                                                                                                j5 = 0;
                                                                                                                                tLRPC$MessageMedia2 = null;
                                                                                                                                i23 = 0;
                                                                                                                            } else {
                                                                                                                                j4 = photo.id;
                                                                                                                                tLRPC$MessageMedia2 = new TLRPC$TL_messageMediaPhoto();
                                                                                                                                tLRPC$MessageMedia2.photo = photo;
                                                                                                                                int i95 = tLRPC$MessageMedia2.flags;
                                                                                                                                tLRPC$MessageMedia2.flags = i95 | 1;
                                                                                                                                if (tLRPC$Message6.media instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                                                    tLRPC$MessageMedia2.flags = i95 | (-2147483647);
                                                                                                                                }
                                                                                                                                j3 = j21;
                                                                                                                                j5 = j4;
                                                                                                                                i23 = 1;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        long j24 = document.id;
                                                                                                                        TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument3 = new TLRPC$TL_messageMediaDocument();
                                                                                                                        tLRPC$TL_messageMediaDocument3.document = document;
                                                                                                                        tLRPC$TL_messageMediaDocument3.flags |= 1;
                                                                                                                        j3 = j21;
                                                                                                                        tLRPC$MessageMedia2 = tLRPC$TL_messageMediaDocument3;
                                                                                                                        j5 = j24;
                                                                                                                        i23 = 4;
                                                                                                                    }
                                                                                                                    j4 = document.id;
                                                                                                                    TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument4 = new TLRPC$TL_messageMediaDocument();
                                                                                                                    tLRPC$TL_messageMediaDocument4.document = document;
                                                                                                                    tLRPC$TL_messageMediaDocument4.flags |= 1;
                                                                                                                    j3 = j21;
                                                                                                                    tLRPC$MessageMedia2 = tLRPC$TL_messageMediaDocument4;
                                                                                                                    j5 = j4;
                                                                                                                    i23 = 1;
                                                                                                                }
                                                                                                                if (tLRPC$MessageMedia2 != null) {
                                                                                                                    int i96 = tLRPC$Message6.media.ttl_seconds;
                                                                                                                    if (i96 != 0) {
                                                                                                                        tLRPC$MessageMedia2.ttl_seconds = i96;
                                                                                                                        tLRPC$MessageMedia2.flags |= 4;
                                                                                                                    }
                                                                                                                    MessageObject messageObject = new MessageObject(messagesStorage.currentAccount, tLRPC$Message6, false, false);
                                                                                                                    int i97 = i93 | i23;
                                                                                                                    sQLitePreparedStatement4.requery();
                                                                                                                    NativeByteBuffer nativeByteBuffer12 = new NativeByteBuffer(tLRPC$MessageMedia2.getObjectSize());
                                                                                                                    tLRPC$MessageMedia2.serializeToStream(nativeByteBuffer12);
                                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                    try {
                                                                                                                        sQLitePreparedStatement21.bindLong(1, j5);
                                                                                                                        sQLitePreparedStatement21.bindInteger(2, i23);
                                                                                                                        sQLitePreparedStatement21.bindInteger(3, tLRPC$Message6.date);
                                                                                                                        sQLitePreparedStatement21.bindByteBuffer(4, nativeByteBuffer12);
                                                                                                                        StringBuilder sb10 = new StringBuilder();
                                                                                                                        sb10.append("sent_");
                                                                                                                        TLRPC$Peer tLRPC$Peer = tLRPC$Message6.peer_id;
                                                                                                                        if (tLRPC$Peer != null) {
                                                                                                                            i24 = i22;
                                                                                                                            j6 = tLRPC$Peer.channel_id;
                                                                                                                        } else {
                                                                                                                            i24 = i22;
                                                                                                                            j6 = 0;
                                                                                                                        }
                                                                                                                        sb10.append(j6);
                                                                                                                        str9 = str14;
                                                                                                                        sb10.append(str9);
                                                                                                                        sb10.append(tLRPC$Message6.id);
                                                                                                                        sb10.append(str9);
                                                                                                                        sb10.append(DialogObject.getPeerDialogId(tLRPC$Message6.peer_id));
                                                                                                                        sb10.append(str9);
                                                                                                                        sb10.append(messageObject.type);
                                                                                                                        sb10.append(str9);
                                                                                                                        sb10.append(messageObject.getSize());
                                                                                                                        sQLitePreparedStatement21.bindString(5, sb10.toString());
                                                                                                                        sQLitePreparedStatement21.step();
                                                                                                                        nativeByteBuffer12.reuse();
                                                                                                                        i77 = i24;
                                                                                                                        sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                        i78 = i97;
                                                                                                                        arrayList24 = arrayList4;
                                                                                                                        sQLitePreparedStatement43 = sQLitePreparedStatement20;
                                                                                                                    } catch (Exception e41) {
                                                                                                                        e = e41;
                                                                                                                        exc = e;
                                                                                                                        sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        z4 = false;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                                        if (z4) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                    } catch (Throwable th43) {
                                                                                                                        th = th43;
                                                                                                                        th = th;
                                                                                                                        sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                                        z4 = false;
                                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                                        if (z4) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                                        }
                                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                                        }
                                                                                                                        throw th;
                                                                                                                    }
                                                                                                                }
                                                                                                                str9 = str14;
                                                                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                                i77 = i22;
                                                                                                                sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                                arrayList24 = arrayList4;
                                                                                                                sQLitePreparedStatement43 = sQLitePreparedStatement20;
                                                                                                                i78 = i93;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    j3 = j21;
                                                                                                    str9 = str14;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    i77 = i22;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    arrayList24 = arrayList4;
                                                                                                    sQLitePreparedStatement43 = sQLitePreparedStatement20;
                                                                                                    i78 = i93;
                                                                                                } catch (Exception e42) {
                                                                                                    e = e42;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    exc = e;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th44) {
                                                                                                    th = th44;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                                    th = th;
                                                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                            nativeByteBuffer.reuse();
                                                                                            if (i != 0) {
                                                                                            }
                                                                                            j3 = j21;
                                                                                            str9 = str14;
                                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                            i77 = i22;
                                                                                            sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                                            arrayList24 = arrayList4;
                                                                                            sQLitePreparedStatement43 = sQLitePreparedStatement20;
                                                                                            i78 = i93;
                                                                                        }
                                                                                    } catch (Exception e43) {
                                                                                        e = e43;
                                                                                        exc = e;
                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                        sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement8 = null;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement10 = null;
                                                                                        z4 = false;
                                                                                        sQLitePreparedStatement11 = null;
                                                                                        messagesStorage.checkSQLException(exc);
                                                                                        if (z4) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                    } catch (Throwable th45) {
                                                                                        th = th45;
                                                                                        th = th;
                                                                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                                        sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement8 = null;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement10 = null;
                                                                                        z4 = false;
                                                                                        sQLitePreparedStatement11 = null;
                                                                                        if (z4) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Exception e44) {
                                                                                    e = e44;
                                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                                                } catch (Throwable th46) {
                                                                                    th = th46;
                                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                                                }
                                                                            } else {
                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                                            }
                                                                            nativeByteBuffer.reuse();
                                                                            if (i != 0) {
                                                                            }
                                                                            j3 = j21;
                                                                            str9 = str14;
                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                            i77 = i22;
                                                                            sQLitePreparedStatement44 = sQLitePreparedStatement36;
                                                                            arrayList24 = arrayList4;
                                                                            sQLitePreparedStatement43 = sQLitePreparedStatement20;
                                                                            i78 = i93;
                                                                        } catch (Exception e45) {
                                                                            e = e45;
                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                        } catch (Throwable th47) {
                                                                            th = th47;
                                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                        }
                                                                        tLRPC$MessageMedia = tLRPC$Message6.media;
                                                                        if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll)) {
                                                                        }
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                    } catch (Exception e46) {
                                                                        e = e46;
                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                    } catch (Throwable th48) {
                                                                        th = th48;
                                                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                    }
                                                                    if (MediaDataController.canAddMessageToMedia(tLRPC$Message6)) {
                                                                    }
                                                                    if (tLRPC$Message6.ttl_period != 0) {
                                                                    }
                                                                    i22 = i20;
                                                                    sQLitePreparedStatement36 = sQLitePreparedStatement15;
                                                                } catch (Exception e47) {
                                                                    e = e47;
                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                    exc = e;
                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement8 = null;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLitePreparedStatement10 = null;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    messagesStorage.checkSQLException(exc);
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement14 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                } catch (Throwable th49) {
                                                                    th = th49;
                                                                    sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                    th = th;
                                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                                    sQLitePreparedStatement7 = null;
                                                                    sQLitePreparedStatement8 = null;
                                                                    sQLitePreparedStatement9 = null;
                                                                    sQLitePreparedStatement10 = null;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                                if (tLRPC$Message6.random_id == 0) {
                                                                }
                                                            } catch (Exception e48) {
                                                                e = e48;
                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                            } catch (Throwable th50) {
                                                                th = th50;
                                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                            }
                                                            if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
                                                                if (arrayList24 == null) {
                                                                }
                                                                arrayList24.add(tLRPC$Message6);
                                                            }
                                                            if (tLRPC$Message6.action instanceof TLRPC$TL_messageActionTopicEdit) {
                                                            }
                                                            if (z8) {
                                                            }
                                                            SQLitePreparedStatement sQLitePreparedStatement452 = sQLitePreparedStatement20;
                                                            i18 = 2;
                                                            i19 = 0;
                                                            while (i19 < i18) {
                                                            }
                                                            int i932 = i78;
                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                            sQLitePreparedStatement20 = sQLitePreparedStatement452;
                                                            int i942 = i81;
                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                            long j202 = topicId2;
                                                            NativeByteBuffer nativeByteBuffer112 = nativeByteBuffer8;
                                                            long j212 = j13;
                                                            i20 = i77;
                                                            hashMap9 = hashMap8;
                                                        } catch (Exception e49) {
                                                            e = e49;
                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                            sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                            sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                            exc = e;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement8 = null;
                                                            sQLitePreparedStatement9 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            z4 = false;
                                                            sQLitePreparedStatement11 = null;
                                                            messagesStorage.checkSQLException(exc);
                                                            if (z4) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement16 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement15 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                        } catch (Throwable th51) {
                                                            th = th51;
                                                            sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                            sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                            sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                            sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                            th = th;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                            sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                            sQLitePreparedStatement7 = null;
                                                            sQLitePreparedStatement8 = null;
                                                            sQLitePreparedStatement9 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            z4 = false;
                                                            sQLitePreparedStatement11 = null;
                                                            if (z4) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement16 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement15 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                        z8 = true;
                                                    }
                                                    i79 = i17 + 1;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                    str14 = str9;
                                                    longSparseArray20 = longSparseArray7;
                                                    hashMap44 = hashMap7;
                                                    hashMap26 = hashMap9;
                                                    arrayList23 = arrayList3;
                                                    j13 = j3;
                                                    longSparseIntArray21 = longSparseIntArray3;
                                                    longSparseIntArray20 = longSparseIntArray4;
                                                    str22 = str8;
                                                    sQLitePreparedStatement41 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement42 = sQLitePreparedStatement16;
                                                } catch (Exception e50) {
                                                    e = e50;
                                                    sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                } catch (Throwable th52) {
                                                    th = th52;
                                                    sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                }
                                            } catch (Exception e51) {
                                                sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                exc = e51;
                                            } catch (Throwable th53) {
                                                sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                                sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                                sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                                sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                                th = th53;
                                            }
                                        }
                                        int i98 = i77;
                                        final int i99 = i78;
                                        sQLitePreparedStatement16 = sQLitePreparedStatement42;
                                        sQLitePreparedStatement20 = sQLitePreparedStatement43;
                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                        LongSparseIntArray longSparseIntArray22 = longSparseIntArray21;
                                        ArrayList arrayList27 = arrayList23;
                                        HashMap hashMap45 = hashMap44;
                                        String str23 = str22;
                                        LongSparseIntArray longSparseIntArray23 = longSparseIntArray20;
                                        HashMap hashMap46 = hashMap26;
                                        sQLitePreparedStatement21 = sQLitePreparedStatement4;
                                        sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                        sQLitePreparedStatement23 = sQLitePreparedStatement41;
                                        LongSparseArray longSparseArray38 = longSparseArray20;
                                        try {
                                            sQLitePreparedStatement19.dispose();
                                            sQLitePreparedStatement17.dispose();
                                            if (sQLitePreparedStatement16 != null) {
                                                try {
                                                    sQLitePreparedStatement16.dispose();
                                                    sQLitePreparedStatement16 = null;
                                                } catch (Exception e52) {
                                                    exc = e52;
                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    z4 = false;
                                                    sQLitePreparedStatement11 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th54) {
                                                    th = th54;
                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    z4 = false;
                                                    sQLitePreparedStatement11 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (sQLitePreparedStatement20 != null) {
                                                sQLitePreparedStatement20.dispose();
                                                sQLitePreparedStatement24 = null;
                                            } else {
                                                sQLitePreparedStatement24 = sQLitePreparedStatement20;
                                            }
                                            if (sQLitePreparedStatement15 != null) {
                                                try {
                                                    sQLitePreparedStatement15.dispose();
                                                    sQLitePreparedStatement25 = null;
                                                    try {
                                                        getMessagesController().didAddedNewTask(i98, 0L, null);
                                                        sQLitePreparedStatement15 = null;
                                                    } catch (Exception e53) {
                                                        e = e53;
                                                        exc = e;
                                                        sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        z4 = false;
                                                        sQLitePreparedStatement11 = null;
                                                        messagesStorage.checkSQLException(exc);
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement14 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                    } catch (Throwable th55) {
                                                        th = th55;
                                                        th = th;
                                                        sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                        sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                        sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                        sQLitePreparedStatement7 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                        sQLitePreparedStatement10 = null;
                                                        z4 = false;
                                                        sQLitePreparedStatement11 = null;
                                                        if (z4) {
                                                        }
                                                        if (sQLitePreparedStatement != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        if (sQLitePreparedStatement16 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement15 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e54) {
                                                    e = e54;
                                                    exc = e;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    z4 = false;
                                                    sQLitePreparedStatement11 = null;
                                                    messagesStorage.checkSQLException(exc);
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement14 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                } catch (Throwable th56) {
                                                    th = th56;
                                                    th = th;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                    sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    z4 = false;
                                                    sQLitePreparedStatement11 = null;
                                                    if (z4) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    if (sQLitePreparedStatement16 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement15 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement25 = null;
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                                sQLitePreparedStatement12.dispose();
                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                            }
                                            try {
                                                sQLitePreparedStatement23.dispose();
                                                try {
                                                    sQLitePreparedStatement21.dispose();
                                                    try {
                                                        sQLitePreparedStatement22.dispose();
                                                        if (arrayList24 != null) {
                                                            for (int i100 = 0; i100 < arrayList24.size(); i100++) {
                                                                try {
                                                                    TLRPC$Message tLRPC$Message9 = (TLRPC$Message) arrayList24.get(i100);
                                                                    messagesStorage.createOrEditTopic(tLRPC$Message9.dialog_id, tLRPC$Message9);
                                                                } catch (Exception e55) {
                                                                    exc = e55;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement27 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement9;
                                                                    sQLitePreparedStatement29 = sQLitePreparedStatement10;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    messagesStorage.checkSQLException(exc);
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement14 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                } catch (Throwable th57) {
                                                                    th = th57;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement27 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement8;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement9;
                                                                    sQLitePreparedStatement26 = sQLitePreparedStatement10;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            }
                                                        }
                                                        try {
                                                            sQLitePreparedStatement28 = messagesStorage.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                            try {
                                                                sQLitePreparedStatement8 = messagesStorage.database.executeFast("UPDATE dialogs SET date = ?, unread_count = ?, last_mid = ?, last_mid_group = ?, unread_count_i = ? WHERE did = ?");
                                                                try {
                                                                    sQLitePreparedStatement9 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                                                } catch (Exception e56) {
                                                                    e = e56;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement27 = null;
                                                                    sQLitePreparedStatement9 = null;
                                                                } catch (Throwable th58) {
                                                                    th = th58;
                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement27 = null;
                                                                    sQLitePreparedStatement9 = null;
                                                                }
                                                            } catch (Exception e57) {
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                exc = e57;
                                                                sQLitePreparedStatement27 = null;
                                                            } catch (Throwable th59) {
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                th = th59;
                                                                sQLitePreparedStatement27 = null;
                                                            }
                                                        } catch (Exception e58) {
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            exc = e58;
                                                            sQLitePreparedStatement27 = null;
                                                        } catch (Throwable th60) {
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            th = th60;
                                                            sQLitePreparedStatement27 = null;
                                                        }
                                                        try {
                                                            sQLitePreparedStatement10 = messagesStorage.database.executeFast("UPDATE topics SET unread_count = ?, top_message = ?, unread_mentions = ?, total_messages_count = ? WHERE did = ? AND topic_id = ?");
                                                            try {
                                                                ArrayList<Long> arrayList28 = new ArrayList<>();
                                                                int i101 = 0;
                                                                while (i101 < longSparseArray38.size()) {
                                                                    SQLitePreparedStatement sQLitePreparedStatement47 = sQLitePreparedStatement10;
                                                                    LongSparseArray longSparseArray39 = longSparseArray38;
                                                                    try {
                                                                        long keyAt5 = longSparseArray39.keyAt(i101);
                                                                        if (keyAt5 == 0) {
                                                                            arrayList2 = arrayList27;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                            sQLitePreparedStatement35 = sQLitePreparedStatement8;
                                                                            i13 = i101;
                                                                            longSparseArray6 = longSparseArray39;
                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement28;
                                                                            longSparseIntArray2 = longSparseIntArray13;
                                                                        } else {
                                                                            TLRPC$Message tLRPC$Message10 = (TLRPC$Message) longSparseArray39.valueAt(i101);
                                                                            SQLitePreparedStatement sQLitePreparedStatement48 = sQLitePreparedStatement28;
                                                                            try {
                                                                                channelId = MessageObject.getChannelId(tLRPC$Message10);
                                                                                sQLiteDatabase3 = messagesStorage.database;
                                                                                sb = new StringBuilder();
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                            } catch (Exception e59) {
                                                                                e = e59;
                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                            } catch (Throwable th61) {
                                                                                th = th61;
                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                            }
                                                                            try {
                                                                                sb.append("SELECT date, unread_count, last_mid, unread_count_i FROM dialogs WHERE did = ");
                                                                                sb.append(keyAt5);
                                                                                longSparseArray6 = longSparseArray39;
                                                                                SQLiteCursor queryFinalized8 = sQLiteDatabase3.queryFinalized(sb.toString(), new Object[0]);
                                                                                boolean next = queryFinalized8.next();
                                                                                if (next) {
                                                                                    try {
                                                                                        int intValue16 = queryFinalized8.intValue(0);
                                                                                        arrayList2 = arrayList27;
                                                                                        int max2 = Math.max(0, queryFinalized8.intValue(1));
                                                                                        int intValue17 = queryFinalized8.intValue(2);
                                                                                        i10 = max2;
                                                                                        i11 = intValue16;
                                                                                        max = Math.max(0, queryFinalized8.intValue(3));
                                                                                        i12 = intValue17;
                                                                                    } catch (Exception e60) {
                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                        exc = e60;
                                                                                        sQLitePreparedStatement27 = null;
                                                                                        sQLitePreparedStatement25 = null;
                                                                                        sQLitePreparedStatement29 = null;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                        z4 = false;
                                                                                        sQLitePreparedStatement11 = null;
                                                                                        messagesStorage.checkSQLException(exc);
                                                                                        if (z4) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                    } catch (Throwable th62) {
                                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                        th = th62;
                                                                                        sQLitePreparedStatement27 = null;
                                                                                        sQLitePreparedStatement25 = null;
                                                                                        sQLitePreparedStatement26 = null;
                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                        z4 = false;
                                                                                        sQLitePreparedStatement11 = null;
                                                                                        if (z4) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } else {
                                                                                    arrayList2 = arrayList27;
                                                                                    if (channelId != 0) {
                                                                                        getMessagesController().checkChatInviter(channelId, true);
                                                                                    }
                                                                                    i12 = 0;
                                                                                    i11 = 0;
                                                                                    i10 = 0;
                                                                                    max = 0;
                                                                                }
                                                                                queryFinalized8.dispose();
                                                                                i13 = i101;
                                                                                LongSparseIntArray longSparseIntArray24 = longSparseIntArray23;
                                                                                int i102 = -1;
                                                                                int i103 = longSparseIntArray24.get(keyAt5, -1);
                                                                                SQLitePreparedStatement sQLitePreparedStatement49 = sQLitePreparedStatement8;
                                                                                LongSparseIntArray longSparseIntArray25 = longSparseIntArray22;
                                                                                try {
                                                                                    int i104 = longSparseIntArray25.get(keyAt5, -1);
                                                                                    if (i104 == -1) {
                                                                                        i104 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray25.put(keyAt5, i104 + i10);
                                                                                        i102 = -1;
                                                                                    }
                                                                                    if (i103 == i102) {
                                                                                        i103 = 0;
                                                                                    } else {
                                                                                        longSparseIntArray24.put(keyAt5, i103 + max);
                                                                                    }
                                                                                    if (tLRPC$Message10 != null) {
                                                                                        try {
                                                                                            i14 = tLRPC$Message10.id;
                                                                                        } catch (Exception e61) {
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                            exc = e61;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement49;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement29 = null;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                        } catch (Throwable th63) {
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                            th = th63;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement49;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement26 = null;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        i14 = i12;
                                                                                    }
                                                                                    if (tLRPC$Message10 != null) {
                                                                                        i15 = i14;
                                                                                        i16 = tLRPC$Message10.local_id;
                                                                                    } else {
                                                                                        i15 = i14;
                                                                                    }
                                                                                    i16 = i15;
                                                                                    if (messagesStorage.isForum(keyAt5)) {
                                                                                        longSparseIntArray22 = longSparseIntArray25;
                                                                                        longSparseIntArray23 = longSparseIntArray24;
                                                                                        longSparseIntArray2 = longSparseIntArray13;
                                                                                    } else {
                                                                                        if (i10 != 0 || i104 == 0) {
                                                                                            longSparseIntArray22 = longSparseIntArray25;
                                                                                            longSparseIntArray2 = longSparseIntArray13;
                                                                                        } else {
                                                                                            longSparseIntArray22 = longSparseIntArray25;
                                                                                            longSparseIntArray2 = longSparseIntArray13;
                                                                                            longSparseIntArray2.put(keyAt5, i104);
                                                                                        }
                                                                                        if (max != 0 || i103 == 0) {
                                                                                            longSparseIntArray23 = longSparseIntArray24;
                                                                                        } else {
                                                                                            longSparseIntArray23 = longSparseIntArray24;
                                                                                            LongSparseIntArray longSparseIntArray26 = longSparseIntArray15;
                                                                                            longSparseIntArray26.put(keyAt5, i103);
                                                                                            longSparseIntArray15 = longSparseIntArray26;
                                                                                        }
                                                                                    }
                                                                                    arrayList28.add(Long.valueOf(keyAt5));
                                                                                    if (next) {
                                                                                        try {
                                                                                            if (tLRPC$Message10 != null) {
                                                                                                if (DialogObject.isEncryptedDialog(keyAt5)) {
                                                                                                    if (tLRPC$Message10.date > i11) {
                                                                                                    }
                                                                                                    if (tLRPC$Message10.send_state == 0 || (tLRPC$Message10.flags & LiteMode.FLAG_CHAT_SCALE) != 0) {
                                                                                                        sQLitePreparedStatement9.requery();
                                                                                                        sQLitePreparedStatement9.bindInteger(1, i10 + i104);
                                                                                                        sQLitePreparedStatement9.bindInteger(2, max + i103);
                                                                                                        sQLitePreparedStatement9.bindLong(3, keyAt5);
                                                                                                        sQLitePreparedStatement9.step();
                                                                                                        sQLitePreparedStatement35 = sQLitePreparedStatement49;
                                                                                                    }
                                                                                                }
                                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                            }
                                                                                            sQLitePreparedStatement35.bindInteger(1, i11);
                                                                                            sQLitePreparedStatement35.bindInteger(2, i10 + i104);
                                                                                            sQLitePreparedStatement35.bindInteger(3, i16);
                                                                                            if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                sQLitePreparedStatement35.bindLong(4, tLRPC$Message10.grouped_id);
                                                                                            } else {
                                                                                                sQLitePreparedStatement35.bindNull(4);
                                                                                            }
                                                                                            sQLitePreparedStatement35.bindInteger(5, max + i103);
                                                                                            sQLitePreparedStatement35.bindLong(6, keyAt5);
                                                                                            sQLitePreparedStatement35.step();
                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                        } catch (Exception e62) {
                                                                                            e = e62;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement35;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement29 = null;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                        } catch (Throwable th64) {
                                                                                            th = th64;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement48;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement35;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement26 = null;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                        sQLitePreparedStatement49.requery();
                                                                                        if (tLRPC$Message10 != null && (!z2 || i11 == 0)) {
                                                                                            i11 = tLRPC$Message10.date;
                                                                                        }
                                                                                        sQLitePreparedStatement35 = sQLitePreparedStatement49;
                                                                                    } else {
                                                                                        sQLitePreparedStatement35 = sQLitePreparedStatement49;
                                                                                        try {
                                                                                            sQLitePreparedStatement48.requery();
                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                        } catch (Exception e63) {
                                                                                            e = e63;
                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                        } catch (Throwable th65) {
                                                                                            th = th65;
                                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                        }
                                                                                        try {
                                                                                            sQLitePreparedStatement34.bindLong(1, keyAt5);
                                                                                            if (tLRPC$Message10 != null && (!z2 || i11 == 0)) {
                                                                                                i11 = tLRPC$Message10.date;
                                                                                            }
                                                                                            sQLitePreparedStatement34.bindInteger(2, i11);
                                                                                            sQLitePreparedStatement34.bindInteger(3, i10 + i104);
                                                                                            sQLitePreparedStatement34.bindInteger(4, i16);
                                                                                            sQLitePreparedStatement34.bindInteger(5, 0);
                                                                                            sQLitePreparedStatement34.bindInteger(6, 0);
                                                                                            sQLitePreparedStatement34.bindLong(7, 0L);
                                                                                            sQLitePreparedStatement34.bindInteger(8, max + i103);
                                                                                            sQLitePreparedStatement34.bindInteger(9, channelId != 0 ? 1 : 0);
                                                                                            sQLitePreparedStatement34.bindInteger(10, 0);
                                                                                            sQLitePreparedStatement34.bindInteger(11, 0);
                                                                                            sQLitePreparedStatement34.bindInteger(12, 0);
                                                                                            sQLitePreparedStatement34.bindInteger(13, 0);
                                                                                            sQLitePreparedStatement34.bindNull(14);
                                                                                            sQLitePreparedStatement34.bindInteger(15, 0);
                                                                                            if (tLRPC$Message10 != null && (tLRPC$Message10.flags & 131072) != 0) {
                                                                                                sQLitePreparedStatement34.bindLong(16, tLRPC$Message10.grouped_id);
                                                                                            } else {
                                                                                                sQLitePreparedStatement34.bindNull(16);
                                                                                            }
                                                                                            sQLitePreparedStatement34.bindInteger(17, 0);
                                                                                            sQLitePreparedStatement34.step();
                                                                                            messagesStorage.unknownDialogsIds.put(keyAt5, Boolean.TRUE);
                                                                                        } catch (Exception e64) {
                                                                                            e = e64;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement35;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement34;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement29 = null;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                        } catch (Throwable th66) {
                                                                                            th = th66;
                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement35;
                                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement34;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement26 = null;
                                                                                            th = th;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                } catch (Exception e65) {
                                                                                    e = e65;
                                                                                    sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                    sQLitePreparedStatement35 = sQLitePreparedStatement49;
                                                                                } catch (Throwable th67) {
                                                                                    th = th67;
                                                                                    sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                    sQLitePreparedStatement35 = sQLitePreparedStatement49;
                                                                                }
                                                                            } catch (Exception e66) {
                                                                                e = e66;
                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                sQLitePreparedStatement28 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement27 = null;
                                                                                sQLitePreparedStatement25 = null;
                                                                                sQLitePreparedStatement29 = null;
                                                                                exc = e;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                z4 = false;
                                                                                sQLitePreparedStatement11 = null;
                                                                                messagesStorage.checkSQLException(exc);
                                                                                if (z4) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                            } catch (Throwable th68) {
                                                                                th = th68;
                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement48;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                                sQLitePreparedStatement28 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement27 = null;
                                                                                sQLitePreparedStatement25 = null;
                                                                                sQLitePreparedStatement26 = null;
                                                                                th = th;
                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                z4 = false;
                                                                                sQLitePreparedStatement11 = null;
                                                                                if (z4) {
                                                                                }
                                                                                if (sQLitePreparedStatement != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement35;
                                                                        longSparseIntArray13 = longSparseIntArray2;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement34;
                                                                        longSparseArray38 = longSparseArray6;
                                                                        arrayList27 = arrayList2;
                                                                        i101 = i13 + 1;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement13;
                                                                    } catch (Exception e67) {
                                                                        e = e67;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                    } catch (Throwable th69) {
                                                                        th = th69;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement47;
                                                                    }
                                                                }
                                                                final ArrayList arrayList29 = arrayList27;
                                                                SQLitePreparedStatement sQLitePreparedStatement50 = sQLitePreparedStatement28;
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                                SQLitePreparedStatement sQLitePreparedStatement51 = sQLitePreparedStatement8;
                                                                SQLitePreparedStatement sQLitePreparedStatement52 = sQLitePreparedStatement10;
                                                                LongSparseIntArray longSparseIntArray27 = longSparseIntArray13;
                                                                try {
                                                                    sQLitePreparedStatement51.dispose();
                                                                    try {
                                                                        sQLitePreparedStatement9.dispose();
                                                                        try {
                                                                            sQLitePreparedStatement50.dispose();
                                                                            try {
                                                                                ArrayList<TopicsController.TopicUpdate> arrayList30 = new ArrayList<>();
                                                                                Iterator it3 = hashMap46.keySet().iterator();
                                                                                while (it3.hasNext()) {
                                                                                    try {
                                                                                        TopicKey topicKey4 = (TopicKey) it3.next();
                                                                                        if (topicKey4.dialogId == 0) {
                                                                                            sQLitePreparedStatement33 = sQLitePreparedStatement52;
                                                                                        } else if (topicKey4.topicId != 0) {
                                                                                            HashMap hashMap47 = hashMap46;
                                                                                            TLRPC$Message tLRPC$Message11 = (TLRPC$Message) hashMap47.get(topicKey4);
                                                                                            SQLiteDatabase sQLiteDatabase9 = messagesStorage.database;
                                                                                            StringBuilder sb11 = new StringBuilder();
                                                                                            sb11.append("SELECT unread_count, top_message, unread_mentions, total_messages_count FROM topics WHERE did = ");
                                                                                            sb11.append(topicKey4.dialogId);
                                                                                            String str24 = str3;
                                                                                            sb11.append(str24);
                                                                                            sb11.append(topicKey4.topicId);
                                                                                            SQLiteCursor queryFinalized9 = sQLiteDatabase9.queryFinalized(sb11.toString(), new Object[0]);
                                                                                            if (queryFinalized9.next()) {
                                                                                                try {
                                                                                                    intValue = queryFinalized9.intValue(0);
                                                                                                    intValue2 = queryFinalized9.intValue(1);
                                                                                                    intValue3 = queryFinalized9.intValue(2);
                                                                                                    intValue4 = queryFinalized9.intValue(3);
                                                                                                    z7 = true;
                                                                                                } catch (Exception e68) {
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                                                    exc = e68;
                                                                                                    sQLitePreparedStatement27 = null;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement29 = null;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th70) {
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                                                    th = th70;
                                                                                                    sQLitePreparedStatement27 = null;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement26 = null;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            } else {
                                                                                                z7 = false;
                                                                                                intValue = 0;
                                                                                                intValue2 = 0;
                                                                                                intValue3 = 0;
                                                                                                intValue4 = 0;
                                                                                            }
                                                                                            queryFinalized9.dispose();
                                                                                            if (!z7) {
                                                                                                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                                                                                                topicUpdate.dialogId = topicKey4.dialogId;
                                                                                                topicUpdate.topicId = topicKey4.topicId;
                                                                                                topicUpdate.reloadTopic = true;
                                                                                                arrayList30.add(topicUpdate);
                                                                                                StringBuilder sb12 = new StringBuilder();
                                                                                                sb12.append("unknown topic need reload ");
                                                                                                sb12.append(topicKey4.dialogId);
                                                                                                String str25 = str23;
                                                                                                sb12.append(str25);
                                                                                                sb12.append(topicKey4.topicId);
                                                                                                FileLog.d(sb12.toString());
                                                                                                hashMap46 = hashMap47;
                                                                                                str23 = str25;
                                                                                                str3 = str24;
                                                                                            } else {
                                                                                                String str26 = str23;
                                                                                                HashMap hashMap48 = hashMap4;
                                                                                                Integer num7 = (Integer) hashMap48.get(topicKey4);
                                                                                                HashMap hashMap49 = hashMap45;
                                                                                                Integer num8 = (Integer) hashMap49.get(topicKey4);
                                                                                                HashMap hashMap50 = hashMap3;
                                                                                                Integer num9 = (Integer) hashMap50.get(topicKey4);
                                                                                                if (tLRPC$Message11 != null) {
                                                                                                    intValue2 = tLRPC$Message11.id;
                                                                                                }
                                                                                                if (tLRPC$Message11 != null) {
                                                                                                    hashMap4 = hashMap48;
                                                                                                    int i105 = tLRPC$Message11.local_id;
                                                                                                    if (i105 != 0) {
                                                                                                        intValue2 = i105;
                                                                                                    }
                                                                                                } else {
                                                                                                    hashMap4 = hashMap48;
                                                                                                }
                                                                                                int intValue18 = num7 != null ? num7.intValue() : 0;
                                                                                                int intValue19 = num8 != null ? num8.intValue() : 0;
                                                                                                int intValue20 = num9 != null ? num9.intValue() : 0;
                                                                                                int i106 = intValue18 + intValue;
                                                                                                Iterator it4 = it3;
                                                                                                int i107 = intValue3 + intValue19;
                                                                                                if (intValue4 == 0) {
                                                                                                    hashMap5 = hashMap49;
                                                                                                    i9 = 0;
                                                                                                } else {
                                                                                                    hashMap5 = hashMap49;
                                                                                                    i9 = intValue4 + intValue20;
                                                                                                }
                                                                                                if (!BuildVars.DEBUG_PRIVATE_VERSION || i107 <= 0) {
                                                                                                    hashMap6 = hashMap47;
                                                                                                    str7 = str26;
                                                                                                    str3 = str24;
                                                                                                    hashMap3 = hashMap50;
                                                                                                } else {
                                                                                                    hashMap6 = hashMap47;
                                                                                                    StringBuilder sb13 = new StringBuilder();
                                                                                                    str7 = str26;
                                                                                                    sb13.append("(putMessagesInternal) new unread mentions ");
                                                                                                    sb13.append(i107);
                                                                                                    sb13.append(" for dialog_id=");
                                                                                                    str3 = str24;
                                                                                                    hashMap3 = hashMap50;
                                                                                                    sb13.append(topicKey4.dialogId);
                                                                                                    sb13.append(" topic_id=");
                                                                                                    sb13.append(topicKey4.topicId);
                                                                                                    FileLog.d(sb13.toString());
                                                                                                }
                                                                                                sQLitePreparedStatement52.requery();
                                                                                                sQLitePreparedStatement33 = sQLitePreparedStatement52;
                                                                                                try {
                                                                                                    sQLitePreparedStatement33.bindInteger(1, i106);
                                                                                                    sQLitePreparedStatement33.bindInteger(2, intValue2);
                                                                                                    sQLitePreparedStatement33.bindInteger(3, i107);
                                                                                                    sQLitePreparedStatement33.bindInteger(4, i9);
                                                                                                    String str27 = str7;
                                                                                                    ArrayList<Long> arrayList31 = arrayList28;
                                                                                                    sQLitePreparedStatement33.bindLong(5, topicKey4.dialogId);
                                                                                                    sQLitePreparedStatement33.bindLong(6, topicKey4.topicId);
                                                                                                    sQLitePreparedStatement33.step();
                                                                                                    if (messagesStorage.isForum(topicKey4.dialogId)) {
                                                                                                        if (intValue == 0 && i106 != 0) {
                                                                                                            longSparseIntArray27.put(topicKey4.dialogId, 1);
                                                                                                        }
                                                                                                        if (intValue3 == 0 && i107 != 0) {
                                                                                                            longSparseIntArray = longSparseIntArray15;
                                                                                                            longSparseIntArray.put(topicKey4.dialogId, i107);
                                                                                                            FileLog.d("update topic " + topicKey4.dialogId + str27 + topicKey4.topicId + str27 + i106 + str27 + i107);
                                                                                                            if (tLRPC$Message11 != null) {
                                                                                                                TopicsController.TopicUpdate topicUpdate2 = new TopicsController.TopicUpdate();
                                                                                                                topicUpdate2.dialogId = topicKey4.dialogId;
                                                                                                                topicUpdate2.topicId = topicKey4.topicId;
                                                                                                                topicUpdate2.topMessage = tLRPC$Message11;
                                                                                                                topicUpdate2.unreadMentions = i107;
                                                                                                                topicUpdate2.topMessageId = intValue2;
                                                                                                                topicUpdate2.unreadCount = i106;
                                                                                                                topicUpdate2.totalMessagesCount = i9;
                                                                                                                arrayList30.add(topicUpdate2);
                                                                                                            }
                                                                                                            it3 = it4;
                                                                                                            str23 = str27;
                                                                                                            longSparseIntArray15 = longSparseIntArray;
                                                                                                            hashMap46 = hashMap6;
                                                                                                            hashMap45 = hashMap5;
                                                                                                            arrayList28 = arrayList31;
                                                                                                        }
                                                                                                    }
                                                                                                    longSparseIntArray = longSparseIntArray15;
                                                                                                    FileLog.d("update topic " + topicKey4.dialogId + str27 + topicKey4.topicId + str27 + i106 + str27 + i107);
                                                                                                    if (tLRPC$Message11 != null) {
                                                                                                    }
                                                                                                    it3 = it4;
                                                                                                    str23 = str27;
                                                                                                    longSparseIntArray15 = longSparseIntArray;
                                                                                                    hashMap46 = hashMap6;
                                                                                                    hashMap45 = hashMap5;
                                                                                                    arrayList28 = arrayList31;
                                                                                                } catch (Exception e69) {
                                                                                                    e = e69;
                                                                                                    exc = e;
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement33;
                                                                                                    sQLitePreparedStatement27 = null;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement29 = null;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th71) {
                                                                                                    th = th71;
                                                                                                    th = th;
                                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement33;
                                                                                                    sQLitePreparedStatement27 = null;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement26 = null;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        sQLitePreparedStatement52 = sQLitePreparedStatement33;
                                                                                    } catch (Exception e70) {
                                                                                        e = e70;
                                                                                        sQLitePreparedStatement33 = sQLitePreparedStatement52;
                                                                                    } catch (Throwable th72) {
                                                                                        th = th72;
                                                                                        sQLitePreparedStatement33 = sQLitePreparedStatement52;
                                                                                    }
                                                                                }
                                                                                sQLitePreparedStatement30 = sQLitePreparedStatement52;
                                                                                LongSparseIntArray longSparseIntArray28 = longSparseIntArray15;
                                                                                ArrayList<Long> arrayList32 = arrayList28;
                                                                                String str28 = str23;
                                                                                try {
                                                                                    sQLitePreparedStatement30.dispose();
                                                                                    if (sparseArray8 != null) {
                                                                                        try {
                                                                                            sQLitePreparedStatement27 = messagesStorage.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)");
                                                                                        } catch (Exception e71) {
                                                                                            exc = e71;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                        } catch (Throwable th73) {
                                                                                            th = th73;
                                                                                            sQLitePreparedStatement27 = null;
                                                                                        }
                                                                                        try {
                                                                                            int size7 = sparseArray8.size();
                                                                                            int i108 = 0;
                                                                                            while (i108 < size7) {
                                                                                                SparseArray sparseArray12 = sparseArray8;
                                                                                                int keyAt6 = sparseArray12.keyAt(i108);
                                                                                                LongSparseIntArray longSparseIntArray29 = (LongSparseIntArray) sparseArray12.valueAt(i108);
                                                                                                int size8 = longSparseIntArray29.size();
                                                                                                int i109 = 0;
                                                                                                while (i109 < size8) {
                                                                                                    String str29 = str28;
                                                                                                    int i110 = size8;
                                                                                                    long keyAt7 = longSparseIntArray29.keyAt(i109);
                                                                                                    int i111 = size7;
                                                                                                    SparseArray sparseArray13 = sparseArray12;
                                                                                                    try {
                                                                                                        SQLiteCursor queryFinalized10 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", Long.valueOf(keyAt7), Integer.valueOf(keyAt6)), new Object[0]);
                                                                                                        if (queryFinalized10.next()) {
                                                                                                            i7 = queryFinalized10.intValue(0);
                                                                                                            str6 = str29;
                                                                                                            i6 = queryFinalized10.intValue(1);
                                                                                                        } else {
                                                                                                            str6 = str29;
                                                                                                            i6 = 0;
                                                                                                            i7 = -1;
                                                                                                        }
                                                                                                        queryFinalized10.dispose();
                                                                                                        if (i7 != -1) {
                                                                                                            sQLitePreparedStatement27.requery();
                                                                                                            sQLitePreparedStatement27.bindLong(1, keyAt7);
                                                                                                            sQLitePreparedStatement27.bindInteger(2, keyAt6);
                                                                                                            str28 = str6;
                                                                                                            sQLitePreparedStatement27.bindInteger(3, Math.max(0, i7 + longSparseIntArray29.valueAt(i109)));
                                                                                                            sQLitePreparedStatement27.bindInteger(4, i6);
                                                                                                            i8 = i109;
                                                                                                            sQLitePreparedStatement27.step();
                                                                                                        } else {
                                                                                                            i8 = i109;
                                                                                                            str28 = str6;
                                                                                                        }
                                                                                                        size7 = i111;
                                                                                                        i109 = i8 + 1;
                                                                                                        sparseArray12 = sparseArray13;
                                                                                                        size8 = i110;
                                                                                                    } catch (Exception e72) {
                                                                                                        exc = e72;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                        z4 = false;
                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        sQLitePreparedStatement3 = null;
                                                                                                        messagesStorage = this;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                        messagesStorage.checkSQLException(exc);
                                                                                                        if (z4) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement14 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                    } catch (Throwable th74) {
                                                                                                        th = th74;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                        z4 = false;
                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        sQLitePreparedStatement3 = null;
                                                                                                        messagesStorage = this;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                        if (z4) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                }
                                                                                                i108++;
                                                                                                size7 = size7;
                                                                                                sparseArray8 = sparseArray12;
                                                                                            }
                                                                                            sQLitePreparedStatement27.dispose();
                                                                                        } catch (Exception e73) {
                                                                                            exc = e73;
                                                                                            sQLitePreparedStatement28 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            sQLitePreparedStatement29 = null;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            messagesStorage.checkSQLException(exc);
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                        } catch (Throwable th75) {
                                                                                            th = th75;
                                                                                            sQLitePreparedStatement28 = null;
                                                                                            sQLitePreparedStatement8 = null;
                                                                                            sQLitePreparedStatement9 = null;
                                                                                            sQLitePreparedStatement25 = null;
                                                                                            sQLitePreparedStatement10 = null;
                                                                                            sQLitePreparedStatement26 = null;
                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                            z4 = false;
                                                                                            sQLitePreparedStatement11 = null;
                                                                                            if (z4) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    try {
                                                                                        sQLitePreparedStatement27 = messagesStorage.database.executeFast("REPLACE INTO media_counts_topics VALUES(?, ?, ?, ?, ?)");
                                                                                        try {
                                                                                            int size9 = sparseArray11.size();
                                                                                            int i112 = 0;
                                                                                            while (i112 < size9) {
                                                                                                SparseArray sparseArray14 = sparseArray11;
                                                                                                try {
                                                                                                    int keyAt8 = sparseArray14.keyAt(i112);
                                                                                                    HashMap hashMap51 = (HashMap) sparseArray14.valueAt(i112);
                                                                                                    Iterator it5 = hashMap51.keySet().iterator();
                                                                                                    while (it5.hasNext()) {
                                                                                                        TopicKey topicKey5 = (TopicKey) it5.next();
                                                                                                        int i113 = size9;
                                                                                                        LongSparseIntArray longSparseIntArray30 = longSparseIntArray28;
                                                                                                        Iterator it6 = it5;
                                                                                                        ArrayList<TopicsController.TopicUpdate> arrayList33 = arrayList30;
                                                                                                        SparseArray sparseArray15 = sparseArray14;
                                                                                                        try {
                                                                                                            SQLiteCursor queryFinalized11 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_topics WHERE uid = %d AND topic_id = %d AND type = %d LIMIT 1", Long.valueOf(topicKey5.dialogId), Long.valueOf(topicKey5.topicId), Integer.valueOf(keyAt8)), new Object[0]);
                                                                                                            if (queryFinalized11.next()) {
                                                                                                                i5 = queryFinalized11.intValue(0);
                                                                                                                i4 = queryFinalized11.intValue(1);
                                                                                                            } else {
                                                                                                                i4 = 0;
                                                                                                                i5 = -1;
                                                                                                            }
                                                                                                            queryFinalized11.dispose();
                                                                                                            if (i5 != -1) {
                                                                                                                sQLitePreparedStatement27.requery();
                                                                                                                i5 += ((Integer) hashMap51.get(topicKey5)).intValue();
                                                                                                                sQLitePreparedStatement27.bindLong(1, topicKey5.dialogId);
                                                                                                                sQLitePreparedStatement27.bindLong(2, topicKey5.topicId);
                                                                                                                sQLitePreparedStatement27.bindInteger(3, keyAt8);
                                                                                                                sQLitePreparedStatement27.bindInteger(4, Math.max(0, i5));
                                                                                                                sQLitePreparedStatement27.bindInteger(5, i4);
                                                                                                                sQLitePreparedStatement27.step();
                                                                                                            }
                                                                                                            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                                                                                                                FileLog.d("update" + topicKey5.dialogId + topicKey5.topicId + str28 + keyAt8 + str28 + i5);
                                                                                                            }
                                                                                                            messagesStorage = this;
                                                                                                            size9 = i113;
                                                                                                            it5 = it6;
                                                                                                            longSparseIntArray28 = longSparseIntArray30;
                                                                                                            arrayList30 = arrayList33;
                                                                                                            sparseArray14 = sparseArray15;
                                                                                                        } catch (Exception e74) {
                                                                                                            exc = e74;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            z4 = false;
                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            sQLitePreparedStatement3 = null;
                                                                                                            messagesStorage = this;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                            if (z4) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                        } catch (Throwable th76) {
                                                                                                            th = th76;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            z4 = false;
                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            sQLitePreparedStatement3 = null;
                                                                                                            messagesStorage = this;
                                                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                            if (z4) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement6 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    }
                                                                                                    i112++;
                                                                                                    messagesStorage = this;
                                                                                                    arrayList30 = arrayList30;
                                                                                                    sparseArray11 = sparseArray14;
                                                                                                } catch (Exception e75) {
                                                                                                    e = e75;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    sQLitePreparedStatement29 = null;
                                                                                                    messagesStorage = this;
                                                                                                    exc = e;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                } catch (Throwable th77) {
                                                                                                    th = th77;
                                                                                                    sQLitePreparedStatement28 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement25 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    sQLitePreparedStatement26 = null;
                                                                                                    messagesStorage = this;
                                                                                                    th = th;
                                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    if (z4) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                            ArrayList<TopicsController.TopicUpdate> arrayList34 = arrayList30;
                                                                                            LongSparseIntArray longSparseIntArray31 = longSparseIntArray28;
                                                                                            try {
                                                                                                sQLitePreparedStatement27.dispose();
                                                                                                if (z) {
                                                                                                    messagesStorage = this;
                                                                                                    try {
                                                                                                        try {
                                                                                                            messagesStorage.database.commitTransaction();
                                                                                                        } catch (Exception e76) {
                                                                                                            exc = e76;
                                                                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                            sQLitePreparedStatement7 = null;
                                                                                                            sQLitePreparedStatement8 = null;
                                                                                                            sQLitePreparedStatement9 = null;
                                                                                                            sQLitePreparedStatement10 = null;
                                                                                                            z4 = false;
                                                                                                            sQLitePreparedStatement5 = null;
                                                                                                            sQLitePreparedStatement11 = null;
                                                                                                            sQLitePreparedStatement4 = null;
                                                                                                            sQLitePreparedStatement3 = null;
                                                                                                            messagesStorage.checkSQLException(exc);
                                                                                                            if (z4) {
                                                                                                                sQLiteDatabase2.commitTransaction();
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement14 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement5 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement16 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement15 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                        }
                                                                                                    } catch (Throwable th78) {
                                                                                                        th = th78;
                                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                        sQLitePreparedStatement7 = null;
                                                                                                        sQLitePreparedStatement8 = null;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLitePreparedStatement10 = null;
                                                                                                        sQLitePreparedStatement18 = null;
                                                                                                        z4 = false;
                                                                                                        sQLitePreparedStatement11 = null;
                                                                                                        sQLitePreparedStatement4 = null;
                                                                                                        sQLitePreparedStatement3 = null;
                                                                                                        sQLitePreparedStatement5 = sQLitePreparedStatement18;
                                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                        if (z4 && (sQLiteDatabase = messagesStorage.database) != null) {
                                                                                                            sQLiteDatabase.commitTransaction();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement != null) {
                                                                                                            sQLitePreparedStatement.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                                            sQLitePreparedStatement6.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                                            sQLitePreparedStatement5.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                            sQLitePreparedStatement4.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                                            sQLitePreparedStatement3.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                                            sQLitePreparedStatement16.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                            sQLitePreparedStatement13.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                            sQLitePreparedStatement11.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                            sQLitePreparedStatement12.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                                            sQLitePreparedStatement15.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                            sQLitePreparedStatement7.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                            sQLitePreparedStatement8.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                            sQLitePreparedStatement9.dispose();
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                            sQLitePreparedStatement10.dispose();
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                } else {
                                                                                                    messagesStorage = this;
                                                                                                }
                                                                                                try {
                                                                                                    messagesStorage.updateFiltersReadCounter(longSparseIntArray27, longSparseIntArray31, false);
                                                                                                    messagesStorage.loadGroupedMessagesForTopicUpdates(arrayList34);
                                                                                                    getMessagesController().processDialogsUpdateRead(longSparseIntArray22, longSparseIntArray23);
                                                                                                    getMessagesController().getTopicsController().processUpdate(arrayList34);
                                                                                                    if (i99 != 0) {
                                                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda169
                                                                                                            @Override // java.lang.Runnable
                                                                                                            public final void run() {
                                                                                                                MessagesStorage.this.lambda$putMessagesInternal$189(i99);
                                                                                                            }
                                                                                                        });
                                                                                                    }
                                                                                                    messagesStorage.updateWidgets(arrayList32);
                                                                                                    if (arrayList29 != null) {
                                                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda170
                                                                                                            @Override // java.lang.Runnable
                                                                                                            public final void run() {
                                                                                                                MessagesStorage.this.lambda$putMessagesInternal$190(arrayList29);
                                                                                                            }
                                                                                                        });
                                                                                                    }
                                                                                                    sQLitePreparedStatement31 = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement32 = sQLitePreparedStatement17;
                                                                                                    z6 = false;
                                                                                                    if (z6 && (sQLiteDatabase4 = messagesStorage.database) != null) {
                                                                                                        sQLiteDatabase4.commitTransaction();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement31 != null) {
                                                                                                        sQLitePreparedStatement31.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement32 != null) {
                                                                                                        sQLitePreparedStatement32.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                        sQLitePreparedStatement16.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                        sQLitePreparedStatement13.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                        sQLitePreparedStatement12.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                        sQLitePreparedStatement15.dispose();
                                                                                                        return;
                                                                                                    }
                                                                                                    return;
                                                                                                } catch (Exception e77) {
                                                                                                    e = e77;
                                                                                                    exc = e;
                                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                    sQLitePreparedStatement7 = null;
                                                                                                    sQLitePreparedStatement8 = null;
                                                                                                    sQLitePreparedStatement9 = null;
                                                                                                    sQLitePreparedStatement10 = null;
                                                                                                    z4 = false;
                                                                                                    sQLitePreparedStatement5 = null;
                                                                                                    sQLitePreparedStatement11 = null;
                                                                                                    sQLitePreparedStatement4 = null;
                                                                                                    sQLitePreparedStatement3 = null;
                                                                                                    messagesStorage.checkSQLException(exc);
                                                                                                    if (z4 && (sQLiteDatabase2 = messagesStorage.database) != null) {
                                                                                                        sQLiteDatabase2.commitTransaction();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement != null) {
                                                                                                        sQLitePreparedStatement.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                                        sQLitePreparedStatement14.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                                        sQLitePreparedStatement5.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                        sQLitePreparedStatement4.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                        sQLitePreparedStatement3.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                                        sQLitePreparedStatement16.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                        sQLitePreparedStatement13.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                        sQLitePreparedStatement11.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                        sQLitePreparedStatement12.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                                        sQLitePreparedStatement15.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                        sQLitePreparedStatement7.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                        sQLitePreparedStatement8.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                        sQLitePreparedStatement9.dispose();
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                        sQLitePreparedStatement10.dispose();
                                                                                                        return;
                                                                                                    }
                                                                                                    return;
                                                                                                }
                                                                                            } catch (Exception e78) {
                                                                                                e = e78;
                                                                                                messagesStorage = this;
                                                                                                exc = e;
                                                                                                sQLitePreparedStatement28 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement25 = null;
                                                                                                sQLitePreparedStatement10 = null;
                                                                                                sQLitePreparedStatement29 = null;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                                z4 = false;
                                                                                                sQLitePreparedStatement11 = null;
                                                                                                messagesStorage.checkSQLException(exc);
                                                                                                if (z4) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement14 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                            } catch (Throwable th79) {
                                                                                                th = th79;
                                                                                                messagesStorage = this;
                                                                                                th = th;
                                                                                                sQLitePreparedStatement28 = null;
                                                                                                sQLitePreparedStatement8 = null;
                                                                                                sQLitePreparedStatement9 = null;
                                                                                                sQLitePreparedStatement25 = null;
                                                                                                sQLitePreparedStatement10 = null;
                                                                                                sQLitePreparedStatement26 = null;
                                                                                                sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                                sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                                z4 = false;
                                                                                                sQLitePreparedStatement11 = null;
                                                                                                if (z4) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement16 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement15 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                                }
                                                                                                throw th;
                                                                                            }
                                                                                        } catch (Exception e79) {
                                                                                            e = e79;
                                                                                        } catch (Throwable th80) {
                                                                                            th = th80;
                                                                                        }
                                                                                    } catch (Exception e80) {
                                                                                        e = e80;
                                                                                    } catch (Throwable th81) {
                                                                                        th = th81;
                                                                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                        sQLitePreparedStatement7 = null;
                                                                                        sQLitePreparedStatement8 = null;
                                                                                        sQLitePreparedStatement9 = null;
                                                                                        sQLitePreparedStatement10 = null;
                                                                                        z4 = false;
                                                                                        sQLitePreparedStatement5 = null;
                                                                                        sQLitePreparedStatement11 = null;
                                                                                        sQLitePreparedStatement4 = null;
                                                                                        sQLitePreparedStatement3 = null;
                                                                                        if (z4) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement6 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement5 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement16 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement15 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Exception e81) {
                                                                                    e = e81;
                                                                                    exc = e;
                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement30;
                                                                                    sQLitePreparedStatement27 = null;
                                                                                    sQLitePreparedStatement28 = null;
                                                                                    sQLitePreparedStatement8 = null;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement25 = null;
                                                                                    sQLitePreparedStatement29 = null;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                                    z4 = false;
                                                                                    sQLitePreparedStatement11 = null;
                                                                                    messagesStorage.checkSQLException(exc);
                                                                                    if (z4) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement14 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                } catch (Throwable th82) {
                                                                                    th = th82;
                                                                                    th = th;
                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement30;
                                                                                    sQLitePreparedStatement27 = null;
                                                                                    sQLitePreparedStatement28 = null;
                                                                                    sQLitePreparedStatement8 = null;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLitePreparedStatement25 = null;
                                                                                    sQLitePreparedStatement26 = null;
                                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                                    z4 = false;
                                                                                    sQLitePreparedStatement11 = null;
                                                                                    if (z4) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement16 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement15 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            } catch (Exception e82) {
                                                                                e = e82;
                                                                                sQLitePreparedStatement30 = sQLitePreparedStatement52;
                                                                            } catch (Throwable th83) {
                                                                                th = th83;
                                                                                sQLitePreparedStatement30 = sQLitePreparedStatement52;
                                                                            }
                                                                        } catch (Exception e83) {
                                                                            exc = e83;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                            sQLitePreparedStatement27 = null;
                                                                        } catch (Throwable th84) {
                                                                            th = th84;
                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                            sQLitePreparedStatement27 = null;
                                                                        }
                                                                    } catch (Exception e84) {
                                                                        exc = e84;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                        sQLitePreparedStatement27 = null;
                                                                        sQLitePreparedStatement8 = null;
                                                                    } catch (Throwable th85) {
                                                                        th = th85;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                        sQLitePreparedStatement27 = null;
                                                                        sQLitePreparedStatement8 = null;
                                                                    }
                                                                } catch (Exception e85) {
                                                                    e = e85;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement51;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                    sQLitePreparedStatement27 = null;
                                                                    sQLitePreparedStatement25 = null;
                                                                    sQLitePreparedStatement29 = null;
                                                                    exc = e;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    messagesStorage.checkSQLException(exc);
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement14 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                } catch (Throwable th86) {
                                                                    th = th86;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement51;
                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement52;
                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement50;
                                                                    sQLitePreparedStatement27 = null;
                                                                    sQLitePreparedStatement25 = null;
                                                                    sQLitePreparedStatement26 = null;
                                                                    th = th;
                                                                    sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                                                    sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                                    z4 = false;
                                                                    sQLitePreparedStatement11 = null;
                                                                    if (z4) {
                                                                    }
                                                                    if (sQLitePreparedStatement != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement16 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement15 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement7 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement8 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e86) {
                                                                e = e86;
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            } catch (Throwable th87) {
                                                                th = th87;
                                                                sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            }
                                                        } catch (Exception e87) {
                                                            e = e87;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            sQLitePreparedStatement27 = null;
                                                            sQLitePreparedStatement25 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            sQLitePreparedStatement29 = null;
                                                            exc = e;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement29;
                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                            sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                            z4 = false;
                                                            sQLitePreparedStatement11 = null;
                                                            messagesStorage.checkSQLException(exc);
                                                            if (z4) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement14 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement16 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement15 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                        } catch (Throwable th88) {
                                                            th = th88;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                            sQLitePreparedStatement27 = null;
                                                            sQLitePreparedStatement25 = null;
                                                            sQLitePreparedStatement10 = null;
                                                            sQLitePreparedStatement26 = null;
                                                            th = th;
                                                            sQLitePreparedStatement5 = sQLitePreparedStatement27;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement28;
                                                            sQLitePreparedStatement3 = sQLitePreparedStatement25;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement26;
                                                            sQLitePreparedStatement = sQLitePreparedStatement19;
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                            z4 = false;
                                                            sQLitePreparedStatement11 = null;
                                                            if (z4) {
                                                            }
                                                            if (sQLitePreparedStatement != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement3 != null) {
                                                            }
                                                            if (sQLitePreparedStatement16 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement15 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    } catch (Exception e88) {
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                        exc = e88;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement22;
                                                        sQLitePreparedStatement27 = null;
                                                        sQLitePreparedStatement28 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                    } catch (Throwable th89) {
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                        th = th89;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement22;
                                                        sQLitePreparedStatement27 = null;
                                                        sQLitePreparedStatement28 = null;
                                                        sQLitePreparedStatement8 = null;
                                                        sQLitePreparedStatement9 = null;
                                                    }
                                                } catch (Exception e89) {
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                    exc = e89;
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement29 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement27 = null;
                                                    sQLitePreparedStatement28 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                } catch (Throwable th90) {
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement24;
                                                    th = th90;
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement26 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement27 = null;
                                                    sQLitePreparedStatement28 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                }
                                            } catch (Exception e90) {
                                                exc = e90;
                                                sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement14 = sQLitePreparedStatement17;
                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                z4 = false;
                                                sQLitePreparedStatement11 = null;
                                                messagesStorage.checkSQLException(exc);
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement14 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                            } catch (Throwable th91) {
                                                th = th91;
                                                sQLitePreparedStatement20 = sQLitePreparedStatement24;
                                                sQLitePreparedStatement44 = sQLitePreparedStatement15;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement23;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                                sQLitePreparedStatement15 = sQLitePreparedStatement44;
                                                sQLitePreparedStatement4 = sQLitePreparedStatement21;
                                                sQLitePreparedStatement = sQLitePreparedStatement19;
                                                sQLitePreparedStatement6 = sQLitePreparedStatement17;
                                                sQLitePreparedStatement13 = sQLitePreparedStatement20;
                                                sQLitePreparedStatement7 = null;
                                                sQLitePreparedStatement8 = null;
                                                sQLitePreparedStatement9 = null;
                                                sQLitePreparedStatement10 = null;
                                                z4 = false;
                                                sQLitePreparedStatement11 = null;
                                                if (z4) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                                if (sQLitePreparedStatement6 != null) {
                                                }
                                                if (sQLitePreparedStatement5 != null) {
                                                }
                                                if (sQLitePreparedStatement4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                if (sQLitePreparedStatement16 != null) {
                                                }
                                                if (sQLitePreparedStatement13 != null) {
                                                }
                                                if (sQLitePreparedStatement11 != null) {
                                                }
                                                if (sQLitePreparedStatement12 != null) {
                                                }
                                                if (sQLitePreparedStatement15 != null) {
                                                }
                                                if (sQLitePreparedStatement7 != null) {
                                                }
                                                if (sQLitePreparedStatement8 != null) {
                                                }
                                                if (sQLitePreparedStatement9 != null) {
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e91) {
                                            exc = e91;
                                        } catch (Throwable th92) {
                                            th = th92;
                                        }
                                    } catch (Exception e92) {
                                        exc = e92;
                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                        z4 = false;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement15 = null;
                                        sQLitePreparedStatement16 = null;
                                        messagesStorage.checkSQLException(exc);
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement14 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement16 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement15 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                    } catch (Throwable th93) {
                                        th = th93;
                                        sQLitePreparedStatement = sQLitePreparedStatement19;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                        z4 = false;
                                        sQLitePreparedStatement3 = null;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                        sQLitePreparedStatement7 = null;
                                        sQLitePreparedStatement8 = null;
                                        sQLitePreparedStatement9 = null;
                                        sQLitePreparedStatement10 = null;
                                        sQLitePreparedStatement11 = null;
                                        sQLitePreparedStatement12 = null;
                                        sQLitePreparedStatement13 = null;
                                        sQLitePreparedStatement15 = null;
                                        sQLitePreparedStatement16 = null;
                                        if (z4) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        if (sQLitePreparedStatement16 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement15 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e93) {
                                    exc = e93;
                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                    z4 = false;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement14 = sQLitePreparedStatement2;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement15 = null;
                                    sQLitePreparedStatement16 = null;
                                    messagesStorage.checkSQLException(exc);
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement14 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement16 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement15 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                } catch (Throwable th94) {
                                    th = th94;
                                    sQLitePreparedStatement = sQLitePreparedStatement19;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement17;
                                    z4 = false;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement3 = null;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement2;
                                    sQLitePreparedStatement7 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement15 = null;
                                    sQLitePreparedStatement16 = null;
                                    if (z4) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement16 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement15 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    throw th;
                                }
                            }
                            z6 = z11;
                            sQLitePreparedStatement31 = null;
                            sQLitePreparedStatement32 = null;
                            sQLitePreparedStatement12 = null;
                            sQLitePreparedStatement13 = null;
                            sQLitePreparedStatement15 = null;
                            sQLitePreparedStatement16 = null;
                            if (z6) {
                                sQLiteDatabase4.commitTransaction();
                            }
                            if (sQLitePreparedStatement31 != null) {
                            }
                            if (sQLitePreparedStatement32 != null) {
                            }
                            if (sQLitePreparedStatement16 != null) {
                            }
                            if (sQLitePreparedStatement13 != null) {
                            }
                            if (sQLitePreparedStatement12 != null) {
                            }
                            if (sQLitePreparedStatement15 != null) {
                            }
                        }
                    } catch (Exception e94) {
                        e = e94;
                        exc = e;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        z4 = false;
                        sQLitePreparedStatement5 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement14 = sQLitePreparedStatement2;
                        sQLitePreparedStatement7 = null;
                        sQLitePreparedStatement8 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement12 = null;
                        sQLitePreparedStatement13 = null;
                        sQLitePreparedStatement15 = null;
                        sQLitePreparedStatement16 = null;
                        messagesStorage.checkSQLException(exc);
                        if (z4) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement14 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement16 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement15 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                    } catch (Throwable th95) {
                        th = th95;
                        th = th;
                        sQLitePreparedStatement = null;
                        sQLitePreparedStatement2 = null;
                        z4 = false;
                        sQLitePreparedStatement5 = null;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement3 = null;
                        sQLitePreparedStatement6 = sQLitePreparedStatement2;
                        sQLitePreparedStatement7 = null;
                        sQLitePreparedStatement8 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement12 = null;
                        sQLitePreparedStatement13 = null;
                        sQLitePreparedStatement15 = null;
                        sQLitePreparedStatement16 = null;
                        if (z4) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement16 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement15 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        throw th;
                    }
                }
                if (!z5) {
                }
                z6 = z11;
                sQLitePreparedStatement31 = null;
                sQLitePreparedStatement32 = null;
                sQLitePreparedStatement12 = null;
                sQLitePreparedStatement13 = null;
                sQLitePreparedStatement15 = null;
                sQLitePreparedStatement16 = null;
                if (z6) {
                }
                if (sQLitePreparedStatement31 != null) {
                }
                if (sQLitePreparedStatement32 != null) {
                }
                if (sQLitePreparedStatement16 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement15 != null) {
                }
            } catch (Exception e95) {
                exc = e95;
                z4 = clientUserId;
            } catch (Throwable th96) {
                th = th96;
                z4 = clientUserId;
            }
            long j112 = j2;
            clientUserId = getUserConfig().getClientUserId();
        } catch (Exception e96) {
            e = e96;
            exc = e;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            z4 = false;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement14 = sQLitePreparedStatement2;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement8 = null;
            sQLitePreparedStatement9 = null;
            sQLitePreparedStatement10 = null;
            sQLitePreparedStatement11 = null;
            sQLitePreparedStatement12 = null;
            sQLitePreparedStatement13 = null;
            sQLitePreparedStatement15 = null;
            sQLitePreparedStatement16 = null;
            messagesStorage.checkSQLException(exc);
            if (z4) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement14 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement16 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement15 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
        } catch (Throwable th97) {
            th = th97;
            th = th;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement2 = null;
            z4 = false;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement6 = sQLitePreparedStatement2;
            sQLitePreparedStatement7 = null;
            sQLitePreparedStatement8 = null;
            sQLitePreparedStatement9 = null;
            sQLitePreparedStatement10 = null;
            sQLitePreparedStatement11 = null;
            sQLitePreparedStatement12 = null;
            sQLitePreparedStatement13 = null;
            sQLitePreparedStatement15 = null;
            sQLitePreparedStatement16 = null;
            if (z4) {
            }
            if (sQLitePreparedStatement != null) {
            }
            if (sQLitePreparedStatement6 != null) {
            }
            if (sQLitePreparedStatement5 != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            if (sQLitePreparedStatement16 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement15 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            throw th;
        }
        num = 0;
        i3 = i2;
        j2 = j;
        if (i3 != 1) {
        }
        if (i3 != 5) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$189(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$190(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    private void createOrEditTopic(final long j, TLRPC$Message tLRPC$Message) {
        final TLRPC$TL_forumTopic tLRPC$TL_forumTopic = new TLRPC$TL_forumTopic();
        tLRPC$TL_forumTopic.topicStartMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.top_message = tLRPC$Message.id;
        tLRPC$TL_forumTopic.topMessage = tLRPC$Message;
        tLRPC$TL_forumTopic.from_id = tLRPC$Message.from_id;
        tLRPC$TL_forumTopic.notify_settings = new TLRPC$TL_peerNotifySettings();
        tLRPC$TL_forumTopic.unread_count = 0;
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicCreate) {
            TLRPC$TL_messageActionTopicCreate tLRPC$TL_messageActionTopicCreate = (TLRPC$TL_messageActionTopicCreate) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = tLRPC$Message.id;
            long j2 = tLRPC$TL_messageActionTopicCreate.icon_emoji_id;
            tLRPC$TL_forumTopic.icon_emoji_id = j2;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicCreate.title;
            tLRPC$TL_forumTopic.icon_color = tLRPC$TL_messageActionTopicCreate.icon_color;
            if (j2 != 0) {
                tLRPC$TL_forumTopic.flags |= 1;
            }
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$TL_forumTopic);
            saveTopics(j, arrayList, false, false, tLRPC$Message.date);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda47
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$createOrEditTopic$191(j, tLRPC$TL_forumTopic);
                }
            });
        } else if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionTopicEdit) {
            TLRPC$TL_messageActionTopicEdit tLRPC$TL_messageActionTopicEdit = (TLRPC$TL_messageActionTopicEdit) tLRPC$MessageAction;
            tLRPC$TL_forumTopic.id = (int) MessageObject.getTopicId(this.currentAccount, tLRPC$Message, true);
            tLRPC$TL_forumTopic.icon_emoji_id = tLRPC$TL_messageActionTopicEdit.icon_emoji_id;
            tLRPC$TL_forumTopic.title = tLRPC$TL_messageActionTopicEdit.title;
            tLRPC$TL_forumTopic.closed = tLRPC$TL_messageActionTopicEdit.closed;
            tLRPC$TL_forumTopic.hidden = tLRPC$TL_messageActionTopicEdit.hidden;
            int i = tLRPC$TL_messageActionTopicEdit.flags;
            int i2 = (i & 1) != 0 ? 1 : 0;
            if ((i & 2) != 0) {
                i2 += 2;
            }
            if ((i & 4) != 0) {
                i2 += 8;
            }
            if ((i & 8) != 0) {
                i2 += 32;
            }
            updateTopicData(j, tLRPC$TL_forumTopic, i2, tLRPC$Message.date);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createOrEditTopic$191(long j, TLRPC$TL_forumTopic tLRPC$TL_forumTopic) {
        getMessagesController().getTopicsController().onTopicCreated(j, tLRPC$TL_forumTopic, false);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, int i2, long j) {
        putMessages(arrayList, z, z2, z3, i, false, i2, j);
    }

    public void putMessages(final ArrayList<TLRPC$Message> arrayList, final boolean z, boolean z2, final boolean z3, final int i, final boolean z4, final int i2, final long j) {
        if (arrayList.size() == 0) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda49
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
                }
            });
        } else {
            lambda$putMessages$192(arrayList, z, z3, i, z4, i2, j);
        }
    }

    public void markMessageAsSendError(final TLRPC$Message tLRPC$Message, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessageAsSendError$193(i, tLRPC$Message);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsSendError$193(int i, TLRPC$Message tLRPC$Message) {
        try {
            long j = tLRPC$Message.id;
            if (MessageObject.isQuickReply(tLRPC$Message)) {
                i = 5;
            }
            if (i == 5) {
                this.database.executeFast(String.format(Locale.US, "UPDATE quick_replies_messages SET send_state = 2 WHERE mid = %d AND topic_id = %d", Long.valueOf(j), Integer.valueOf(MessageObject.getQuickReplyId(this.currentAccount, tLRPC$Message)))).stepThis().dispose();
            } else if (i == 1) {
                this.database.executeFast(String.format(Locale.US, "UPDATE scheduled_messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE messages_topics SET send_state = 2 WHERE mid = %d AND uid = %d", Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message)))).stepThis().dispose();
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void setMessageSeq(final int i, final int i2, final int i3) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda57
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setMessageSeq$194(i, i2, i3);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageSeq$194(int i, int i2, int i3) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindInteger(2, i2);
                sQLitePreparedStatement.bindInteger(3, i3);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(22:1|2|(7:294|295|296|297|(3:299|301|302)(1:312)|303|(1:305))(1:4)|5|(2:280|(6:282|(1:284)(1:293)|285|286|287|288))(8:8|9|10|11|12|13|14|15)|16|(24:222|223|224|225|(10:227|228|229|230|231|(2:233|234)(1:237)|235|(4:208|209|(2:211|212)|214)|23|(2:29|(4:82|(16:135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150)(1:(5:112|113|114|115|116)(2:85|(5:89|90|91|92|93)))|87|88)(10:32|(1:34)(1:(1:72)(2:73|(1:75)(8:76|36|37|(1:39)(1:68)|40|41|(4:43|45|46|47)|66)))|35|36|37|(0)(0)|40|41|(0)|66))(1:27))|248|229|230|231|(0)(0)|235|(0)|208|209|(0)|214|23|(1:25)|29|(0)|82|(0)(0)|87|88)(1:19)|20|(0)|208|209|(0)|214|23|(0)|29|(0)|82|(0)(0)|87|88|(18:(1:122)|(0)|(1:99)|(1:102)|(1:163)|(1:125)|(1:266)|(1:166)|(1:178)|(1:159)|(0)|(0)|(0)|(0)|(0)|(0)|(0)|(0))) */
    /* JADX WARN: Can't wrap try/catch for region: R(22:253|254|(18:256|230|231|(0)(0)|235|(0)|208|209|(0)|214|23|(0)|29|(0)|82|(0)(0)|87|88)|248|229|230|231|(0)(0)|235|(0)|208|209|(0)|214|23|(0)|29|(0)|82|(0)(0)|87|88) */
    /* JADX WARN: Code restructure failed: missing block: B:101:0x019a, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x019d, code lost:
        if (r10 != null) goto L241;
     */
    /* JADX WARN: Code restructure failed: missing block: B:103:0x019f, code lost:
        r10.dispose();
     */
    /* JADX WARN: Code restructure failed: missing block: B:113:0x01cc, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:114:0x01cd, code lost:
        checkSQLException(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:115:0x01d0, code lost:
        if (r10 == null) goto L23;
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x024d, code lost:
        if (r6 == null) goto L56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:167:0x0265, code lost:
        return new long[]{r9, r24};
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x0362, code lost:
        if (r6 != null) goto L144;
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x03a7, code lost:
        if (r6 != null) goto L147;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x03c7, code lost:
        if (r6 == null) goto L87;
     */
    /* JADX WARN: Code restructure failed: missing block: B:23:0x0053, code lost:
        if (r10 == null) goto L304;
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x0430, code lost:
        if (r3 != null) goto L116;
     */
    /* JADX WARN: Code restructure failed: missing block: B:269:0x0488, code lost:
        if (r5 != null) goto L93;
     */
    /* JADX WARN: Code restructure failed: missing block: B:50:0x00a9, code lost:
        if (r12 == null) goto L16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:97:0x0190, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:106:0x01a7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:109:0x01c3 A[Catch: all -> 0x01c9, Exception -> 0x01cc, TRY_LEAVE, TryCatch #35 {Exception -> 0x01cc, blocks: (B:107:0x01a9, B:109:0x01c3), top: B:305:0x01a9, outer: #18 }] */
    /* JADX WARN: Removed duplicated region for block: B:119:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x01e3 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x021a A[Catch: all -> 0x0246, Exception -> 0x0248, TryCatch #16 {all -> 0x0246, blocks: (B:139:0x0211, B:141:0x021a, B:144:0x021f, B:146:0x0227, B:161:0x0250), top: B:304:0x01e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x021d  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x0227 A[Catch: all -> 0x0246, Exception -> 0x0248, TRY_LEAVE, TryCatch #16 {all -> 0x0246, blocks: (B:139:0x0211, B:141:0x021a, B:144:0x021f, B:146:0x0227, B:161:0x0250), top: B:304:0x01e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0268  */
    /* JADX WARN: Removed duplicated region for block: B:171:0x026d  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x03e7  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0435  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x048d  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x0273 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00ae  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x0187 A[Catch: all -> 0x018d, Exception -> 0x0190, TRY_LEAVE, TryCatch #11 {Exception -> 0x0190, blocks: (B:91:0x016d, B:93:0x0187), top: B:296:0x016d, outer: #40 }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0192  */
    /* JADX WARN: Type inference failed for: r11v10 */
    /* JADX WARN: Type inference failed for: r11v11 */
    /* JADX WARN: Type inference failed for: r11v12, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r11v14 */
    /* JADX WARN: Type inference failed for: r11v17, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r11v18 */
    /* JADX WARN: Type inference failed for: r11v20 */
    /* JADX WARN: Type inference failed for: r11v9, types: [java.lang.Object, java.lang.Integer] */
    /* JADX WARN: Type inference failed for: r12v13, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r12v14, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r12v9, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r13v3, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r13v4, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r15v2, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r15v4, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r3v0, types: [int] */
    /* JADX WARN: Type inference failed for: r3v22, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r3v5 */
    /* JADX WARN: Type inference failed for: r3v6 */
    /* JADX WARN: Type inference failed for: r3v7, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r3v8 */
    /* JADX WARN: Type inference failed for: r3v9 */
    /* JADX WARN: Type inference failed for: r4v12, types: [int] */
    /* JADX WARN: Type inference failed for: r4v13 */
    /* JADX WARN: Type inference failed for: r4v16 */
    /* JADX WARN: Type inference failed for: r4v17, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r4v21 */
    /* JADX WARN: Type inference failed for: r4v25, types: [org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARN: Type inference failed for: r4v34 */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r5v5, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.lang.Object[]] */
    /* JADX WARN: Type inference failed for: r6v7, types: [java.lang.Object[]] */
    /* renamed from: updateMessageStateAndIdInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public long[] lambda$updateMessageStateAndId$196(long j, long j2, Integer num, int i, int i2, int i3, int i4) {
        Integer num2;
        SQLiteCursor sQLiteCursor;
        long j3;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        long j4;
        int i5;
        int i6;
        int i7;
        long j5;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        ?? r3 = i2;
        int i8 = i3;
        SQLiteCursor sQLiteCursor4 = null;
        try {
            if (num == null) {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id = %d LIMIT 1", Long.valueOf(j)), new Object[0]);
                    try {
                        if (sQLiteCursor.next()) {
                            num2 = Integer.valueOf(sQLiteCursor.intValue(0));
                            try {
                                j3 = sQLiteCursor.longValue(1);
                            } catch (Exception e) {
                                e = e;
                                checkSQLException(e);
                                j3 = j2;
                            }
                        } else {
                            j3 = j2;
                            num2 = num;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        num2 = num;
                    }
                } catch (Exception e3) {
                    e = e3;
                    num2 = num;
                    sQLiteCursor = null;
                } catch (Throwable th) {
                    th = th;
                    if (sQLiteCursor4 != null) {
                        sQLiteCursor4.dispose();
                    }
                    throw th;
                }
                sQLiteCursor.dispose();
                if (num2 == null) {
                    return null;
                }
            } else {
                j3 = j2;
                num2 = num;
                sQLiteCursor = null;
            }
            getUserConfig().getClientUserId();
            int intValue = num2.intValue();
            if (num2.intValue() < 0 && i8 == 1) {
                try {
                    sQLitePreparedStatement9 = this.database.executeFast("UPDATE randoms_v2 SET mid = ? WHERE random_id = ? AND mid = ?");
                    try {
                        try {
                            sQLitePreparedStatement9.bindInteger(1, i);
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e4) {
                            e = e4;
                            sQLiteCursor2 = sQLiteCursor;
                        }
                        try {
                            sQLitePreparedStatement9.bindLong(2, j);
                            sQLitePreparedStatement9.bindInteger(3, intValue);
                            sQLitePreparedStatement9.step();
                        } catch (Exception e5) {
                            e = e5;
                            checkSQLException(e);
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement8 = sQLitePreparedStatement9;
                        if (sQLitePreparedStatement8 != null) {
                            sQLitePreparedStatement8.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e6) {
                    e = e6;
                    sQLiteCursor2 = sQLiteCursor;
                    sQLitePreparedStatement9 = null;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement8 = null;
                    if (sQLitePreparedStatement8 != null) {
                    }
                    throw th;
                }
                sQLitePreparedStatement9.dispose();
            } else {
                sQLiteCursor2 = sQLiteCursor;
                if (num2.intValue() > 0) {
                    TLRPC$TL_updateDeleteScheduledMessages tLRPC$TL_updateDeleteScheduledMessages = new TLRPC$TL_updateDeleteScheduledMessages();
                    tLRPC$TL_updateDeleteScheduledMessages.messages.add(num2);
                    if (DialogObject.isChatDialog(j3)) {
                        TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                        tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerChannel;
                        tLRPC$TL_peerChannel.channel_id = -j3;
                    } else {
                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                        tLRPC$TL_updateDeleteScheduledMessages.peer = tLRPC$TL_peerUser;
                        tLRPC$TL_peerUser.user_id = j3;
                    }
                    final TLRPC$TL_updates tLRPC$TL_updates = new TLRPC$TL_updates();
                    tLRPC$TL_updates.updates.add(tLRPC$TL_updateDeleteScheduledMessages);
                    Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda34
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$updateMessageStateAndIdInternal$195(tLRPC$TL_updates);
                        }
                    });
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM randoms_v2 WHERE random_id = %d AND mid = %d AND uid = %d", new Object[]{Long.valueOf(j), num2, Long.valueOf(j3)})).stepThis().dispose();
                        return null;
                    } catch (Exception e7) {
                        checkSQLException(e7);
                        return null;
                    }
                }
            }
            try {
                try {
                    if (i8 == -1 || i8 == 0) {
                        try {
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                            try {
                                try {
                                } catch (Throwable th4) {
                                    th = th4;
                                    if (sQLiteCursor3 != null) {
                                        sQLiteCursor3.dispose();
                                    }
                                    throw th;
                                }
                            } catch (Exception e8) {
                                e = e8;
                                checkSQLException(e);
                                if (sQLiteCursor3 == null) {
                                    j4 = 0;
                                    sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                    if (sQLiteCursor3.next()) {
                                    }
                                    sQLiteCursor3.dispose();
                                    i6 = i8;
                                    i7 = i5;
                                    if (i6 != -1) {
                                    }
                                    sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                    if (sQLiteCursor3.next()) {
                                    }
                                    sQLiteCursor3.dispose();
                                    j5 = j4;
                                    if (j5 != 0) {
                                    }
                                    SQLitePreparedStatement sQLitePreparedStatement10 = null;
                                    if (intValue != i) {
                                    }
                                    if (i6 == 0) {
                                    }
                                    return new long[]{j5, num2.intValue()};
                                }
                                j4 = 0;
                                sQLiteCursor3.dispose();
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                }
                                sQLiteCursor3.dispose();
                                i6 = i8;
                                i7 = i5;
                                if (i6 != -1) {
                                }
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                }
                                sQLiteCursor3.dispose();
                                j5 = j4;
                                if (j5 != 0) {
                                }
                                SQLitePreparedStatement sQLitePreparedStatement102 = null;
                                if (intValue != i) {
                                }
                                if (i6 == 0) {
                                }
                                return new long[]{j5, num2.intValue()};
                            }
                        } catch (Exception e9) {
                            e = e9;
                            sQLiteCursor3 = sQLiteCursor2;
                        } catch (Throwable th5) {
                            th = th5;
                            sQLiteCursor3 = sQLiteCursor2;
                        }
                        try {
                            if (sQLiteCursor3.next()) {
                                j4 = sQLiteCursor3.longValue(0);
                                i8 = 0;
                                sQLiteCursor3.dispose();
                                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                if (sQLiteCursor3.next()) {
                                    i5 = i4;
                                } else {
                                    i5 = sQLiteCursor3.intValue(0);
                                    i8 = 2;
                                }
                                sQLiteCursor3.dispose();
                                i6 = i8;
                                i7 = i5;
                                if (i6 != -1 || i6 == 1) {
                                    sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                                    if (sQLiteCursor3.next()) {
                                        j4 = sQLiteCursor3.longValue(0);
                                        i6 = 1;
                                    }
                                    sQLiteCursor3.dispose();
                                }
                                j5 = j4;
                                if (j5 != 0 && i6 != 2) {
                                    return null;
                                }
                                SQLitePreparedStatement sQLitePreparedStatement1022 = null;
                                if (intValue != i && r3 != 0) {
                                    try {
                                        try {
                                            try {
                                                if (i6 == 0) {
                                                    executeFast = this.database.executeFast("UPDATE messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                                } else if (i6 == 1) {
                                                    executeFast = this.database.executeFast("UPDATE scheduled_messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                                } else if (i6 == 2) {
                                                    executeFast = this.database.executeFast("UPDATE quick_replies_messages SET send_state = 0, date = ? WHERE mid = ? AND topic_id = ?");
                                                } else {
                                                    num2 = 0;
                                                    num2.bindInteger(1, r3);
                                                    num2.bindInteger(2, i);
                                                    num2.bindLong(3, i6 != 2 ? (long) i7 : j5);
                                                    num2.step();
                                                    if (i6 == 0) {
                                                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_topics SET send_state = 0, date = ? WHERE mid = ? AND uid = ?");
                                                        try {
                                                            executeFast2.bindInteger(1, r3);
                                                            executeFast2.bindInteger(2, i);
                                                            executeFast2.bindLong(3, j5);
                                                            executeFast2.step();
                                                            sQLitePreparedStatement1022 = executeFast2;
                                                        } catch (Exception e10) {
                                                            e = e10;
                                                            sQLitePreparedStatement1022 = executeFast2;
                                                            checkSQLException(e);
                                                            if (num2 != 0) {
                                                                num2.dispose();
                                                            }
                                                        } catch (Throwable th6) {
                                                            th = th6;
                                                            sQLitePreparedStatement1022 = executeFast2;
                                                            sQLitePreparedStatement7 = num2;
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement1022 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    }
                                                    num2.dispose();
                                                }
                                                num2.bindInteger(1, r3);
                                                num2.bindInteger(2, i);
                                                num2.bindLong(3, i6 != 2 ? (long) i7 : j5);
                                                num2.step();
                                                if (i6 == 0) {
                                                }
                                                num2.dispose();
                                            } catch (Exception e11) {
                                                e = e11;
                                            }
                                            num2 = executeFast;
                                        } catch (Throwable th7) {
                                            th = th7;
                                        }
                                    } catch (Exception e12) {
                                        e = e12;
                                        num2 = 0;
                                    } catch (Throwable th8) {
                                        th = th8;
                                        sQLitePreparedStatement7 = null;
                                        if (sQLitePreparedStatement7 != null) {
                                            sQLitePreparedStatement7.dispose();
                                        }
                                        if (sQLitePreparedStatement1022 != null) {
                                            sQLitePreparedStatement1022.dispose();
                                        }
                                        throw th;
                                    }
                                } else {
                                    if (i6 == 0) {
                                        try {
                                            r3 = this.database.executeFast("UPDATE messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                            try {
                                                r3.bindInteger(1, i);
                                                r3.bindInteger(2, intValue);
                                                r3.bindLong(3, j5);
                                                r3.step();
                                                i7 = this.database.executeFast("UPDATE messages_topics SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                                try {
                                                    i7.bindInteger(1, i);
                                                    i7.bindInteger(2, intValue);
                                                    i7.bindLong(3, j5);
                                                    i7.step();
                                                    r3.dispose();
                                                    i7.dispose();
                                                } catch (Exception unused) {
                                                    try {
                                                        SQLiteDatabase sQLiteDatabase = this.database;
                                                        Locale locale = Locale.US;
                                                        sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{num2, Long.valueOf(j5)})).stepThis().dispose();
                                                        this.database.executeFast(String.format(locale, "DELETE FROM messages_seq WHERE mid = %d", new Object[]{num2})).stepThis().dispose();
                                                        this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE mid = %d AND uid = %d", new Object[]{num2, Long.valueOf(j5)})).stepThis().dispose();
                                                    } catch (Exception e13) {
                                                        checkSQLException(e13);
                                                    }
                                                    if (r3 != 0) {
                                                        r3.dispose();
                                                        r3 = 0;
                                                    }
                                                    if (i7 != 0) {
                                                        i7.dispose();
                                                    }
                                                    sQLitePreparedStatement1022 = r3;
                                                    try {
                                                        try {
                                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                            sQLitePreparedStatement1022.bindLong(3, j5);
                                                            sQLitePreparedStatement1022.step();
                                                        } catch (Exception e14) {
                                                            checkSQLException(e14);
                                                        }
                                                        sQLitePreparedStatement1022.dispose();
                                                        sQLitePreparedStatement1022 = null;
                                                        try {
                                                            try {
                                                                sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                                                sQLitePreparedStatement1022.bindInteger(1, i);
                                                                sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                                sQLitePreparedStatement1022.bindLong(3, j5);
                                                                sQLitePreparedStatement1022.step();
                                                            } catch (Exception unused2) {
                                                                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_topics WHERE mid = %d AND uid = %d", new Object[]{num2, Long.valueOf(j5)})).stepThis().dispose();
                                                            }
                                                        } catch (Exception e15) {
                                                            checkSQLException(e15);
                                                        }
                                                        sQLitePreparedStatement1022.dispose();
                                                        sQLitePreparedStatement1022 = null;
                                                        try {
                                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                            sQLitePreparedStatement1022.step();
                                                            sQLitePreparedStatement1022.dispose();
                                                            return new long[]{j5, num2.intValue()};
                                                        } finally {
                                                            if (sQLitePreparedStatement1022 != null) {
                                                                sQLitePreparedStatement1022.dispose();
                                                            }
                                                        }
                                                    } finally {
                                                        if (sQLitePreparedStatement1022 != null) {
                                                            sQLitePreparedStatement1022.dispose();
                                                        }
                                                    }
                                                }
                                            } catch (Exception unused3) {
                                                i7 = 0;
                                            } catch (Throwable th9) {
                                                th = th9;
                                                sQLitePreparedStatement = r3;
                                                sQLitePreparedStatement2 = null;
                                                if (sQLitePreparedStatement != null) {
                                                    sQLitePreparedStatement.dispose();
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                    sQLitePreparedStatement2.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Exception unused4) {
                                            r3 = 0;
                                            i7 = 0;
                                        } catch (Throwable th10) {
                                            th = th10;
                                            sQLitePreparedStatement2 = null;
                                            sQLitePreparedStatement = null;
                                        }
                                        try {
                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                            sQLitePreparedStatement1022.bindLong(3, j5);
                                            sQLitePreparedStatement1022.step();
                                        } catch (Exception unused5) {
                                            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", new Object[]{num2, Long.valueOf(j5)})).stepThis().dispose();
                                        }
                                        sQLitePreparedStatement1022.dispose();
                                        sQLitePreparedStatement1022 = null;
                                        try {
                                            sQLitePreparedStatement1022 = this.database.executeFast("UPDATE media_topics SET mid = ? WHERE mid = ? AND uid = ?");
                                            sQLitePreparedStatement1022.bindInteger(1, i);
                                            sQLitePreparedStatement1022.bindInteger(2, intValue);
                                            sQLitePreparedStatement1022.bindLong(3, j5);
                                            sQLitePreparedStatement1022.step();
                                            sQLitePreparedStatement1022.dispose();
                                            sQLitePreparedStatement1022 = null;
                                            try {
                                                sQLitePreparedStatement1022 = this.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                                                sQLitePreparedStatement1022.bindInteger(1, i);
                                                sQLitePreparedStatement1022.bindInteger(2, intValue);
                                                sQLitePreparedStatement1022.step();
                                            } catch (Exception e16) {
                                                checkSQLException(e16);
                                            }
                                            sQLitePreparedStatement1022.dispose();
                                        } finally {
                                            if (sQLitePreparedStatement1022 != null) {
                                                sQLitePreparedStatement1022.dispose();
                                            }
                                        }
                                    } else if (i6 == 1) {
                                        try {
                                            sQLitePreparedStatement4 = this.database.executeFast("UPDATE scheduled_messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?");
                                            try {
                                                try {
                                                    sQLitePreparedStatement4.bindInteger(1, i);
                                                    sQLitePreparedStatement4.bindInteger(2, intValue);
                                                    sQLitePreparedStatement4.bindLong(3, j5);
                                                    sQLitePreparedStatement4.step();
                                                } catch (Exception unused6) {
                                                    try {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid = %d AND uid = %d", new Object[]{num2, Long.valueOf(j5)})).stepThis().dispose();
                                                    } catch (Exception e17) {
                                                        checkSQLException(e17);
                                                    }
                                                }
                                            } catch (Throwable th11) {
                                                th = th11;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement4;
                                                if (sQLitePreparedStatement3 != null) {
                                                    sQLitePreparedStatement3.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Exception unused7) {
                                            sQLitePreparedStatement4 = null;
                                        } catch (Throwable th12) {
                                            th = th12;
                                            sQLitePreparedStatement3 = null;
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            throw th;
                                        }
                                        sQLitePreparedStatement4.dispose();
                                    } else if (i6 == 2) {
                                        try {
                                            sQLitePreparedStatement6 = this.database.executeFast("UPDATE quick_replies_messages SET mid = ?, topic_id = ?, send_state = 0 WHERE mid = ? AND topic_id = ?");
                                            try {
                                                try {
                                                    sQLitePreparedStatement6.bindInteger(1, i);
                                                    sQLitePreparedStatement6.bindInteger(2, i4);
                                                    sQLitePreparedStatement6.bindInteger(3, intValue);
                                                    sQLitePreparedStatement6.bindLong(4, (long) i7);
                                                    sQLitePreparedStatement6.step();
                                                } catch (Exception unused8) {
                                                    try {
                                                        this.database.executeFast(String.format(Locale.US, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", new Object[]{num2, Integer.valueOf((int) i7)})).stepThis().dispose();
                                                    } catch (Exception e18) {
                                                        checkSQLException(e18);
                                                    }
                                                }
                                            } catch (Throwable th13) {
                                                th = th13;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement6;
                                                if (sQLitePreparedStatement5 != null) {
                                                    sQLitePreparedStatement5.dispose();
                                                }
                                                throw th;
                                            }
                                        } catch (Exception unused9) {
                                            sQLitePreparedStatement6 = null;
                                        } catch (Throwable th14) {
                                            th = th14;
                                            sQLitePreparedStatement5 = null;
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            throw th;
                                        }
                                        sQLitePreparedStatement6.dispose();
                                    }
                                    return new long[]{j5, num2.intValue()};
                                }
                            }
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT topic_id FROM quick_replies_messages WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                            if (sQLiteCursor3.next()) {
                            }
                            sQLiteCursor3.dispose();
                            i6 = i8;
                            i7 = i5;
                            if (i6 != -1) {
                            }
                            sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                            if (sQLiteCursor3.next()) {
                            }
                            sQLiteCursor3.dispose();
                            j5 = j4;
                            if (j5 != 0) {
                            }
                            SQLitePreparedStatement sQLitePreparedStatement10222 = null;
                            if (intValue != i) {
                            }
                            if (i6 == 0) {
                            }
                            return new long[]{j5, num2.intValue()};
                        } catch (Throwable th15) {
                            if (sQLiteCursor3 != null) {
                                sQLiteCursor3.dispose();
                            }
                            throw th15;
                        }
                        j4 = 0;
                        sQLiteCursor3.dispose();
                    } else {
                        sQLiteCursor3 = sQLiteCursor2;
                        j4 = 0;
                    }
                    if (i6 == 0) {
                    }
                    return new long[]{j5, num2.intValue()};
                } catch (Throwable th16) {
                    th = th16;
                    sQLitePreparedStatement = r3;
                    sQLitePreparedStatement2 = i7;
                }
                sQLiteCursor3 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1", new Object[]{num2}), new Object[0]);
                if (sQLiteCursor3.next()) {
                }
                sQLiteCursor3.dispose();
                j5 = j4;
                if (j5 != 0) {
                }
                SQLitePreparedStatement sQLitePreparedStatement102222 = null;
                if (intValue != i) {
                }
            } catch (Throwable th17) {
                if (sQLiteCursor3 != null) {
                    sQLiteCursor3.dispose();
                }
                throw th17;
            }
            i6 = i8;
            i7 = i4;
            if (i6 != -1) {
            }
        } catch (Throwable th18) {
            th = th18;
            sQLiteCursor4 = sQLiteCursor;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageStateAndIdInternal$195(TLRPC$TL_updates tLRPC$TL_updates) {
        getMessagesController().processUpdates(tLRPC$TL_updates, false);
    }

    public long[] updateMessageStateAndId(final long j, final long j2, final Integer num, final int i, final int i2, boolean z, final int i3, final int i4) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
                }
            });
            return null;
        }
        return lambda$updateMessageStateAndId$196(j, j2, num, i, i2, i3, i4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: updateUsersInternal */
    public void lambda$updateUsers$197(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (z) {
                    if (z2) {
                        this.database.beginTransaction();
                    }
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
                    try {
                        int size = arrayList.size();
                        for (int i = 0; i < size; i++) {
                            TLRPC$User tLRPC$User = arrayList.get(i);
                            executeFast.requery();
                            TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                            if (tLRPC$UserStatus != null) {
                                executeFast.bindInteger(1, tLRPC$UserStatus.expires);
                            } else {
                                executeFast.bindInteger(1, 0);
                            }
                            executeFast.bindLong(2, tLRPC$User.id);
                            executeFast.step();
                        }
                        executeFast.dispose();
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        checkSQLException(e);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th) {
                        th = th;
                        sQLitePreparedStatement = executeFast;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } else {
                    ArrayList<Long> arrayList2 = new ArrayList<>();
                    LongSparseArray longSparseArray = new LongSparseArray();
                    int size2 = arrayList.size();
                    for (int i2 = 0; i2 < size2; i2++) {
                        TLRPC$User tLRPC$User2 = arrayList.get(i2);
                        arrayList2.add(Long.valueOf(tLRPC$User2.id));
                        longSparseArray.put(tLRPC$User2.id, tLRPC$User2);
                    }
                    ArrayList<TLRPC$User> arrayList3 = new ArrayList<>();
                    getUsersInternal(arrayList2, arrayList3);
                    int size3 = arrayList3.size();
                    for (int i3 = 0; i3 < size3; i3++) {
                        TLRPC$User tLRPC$User3 = arrayList3.get(i3);
                        TLRPC$User tLRPC$User4 = (TLRPC$User) longSparseArray.get(tLRPC$User3.id);
                        if (tLRPC$User4 != null) {
                            if (tLRPC$User4.first_name != null && tLRPC$User4.last_name != null) {
                                if (!UserObject.isContact(tLRPC$User3)) {
                                    tLRPC$User3.first_name = tLRPC$User4.first_name;
                                    tLRPC$User3.last_name = tLRPC$User4.last_name;
                                }
                                tLRPC$User3.username = tLRPC$User4.username;
                            } else {
                                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User4.photo;
                                if (tLRPC$UserProfilePhoto != null) {
                                    tLRPC$User3.photo = tLRPC$UserProfilePhoto;
                                } else {
                                    String str = tLRPC$User4.phone;
                                    if (str != null) {
                                        tLRPC$User3.phone = str;
                                    }
                                }
                            }
                        }
                    }
                    if (!arrayList3.isEmpty()) {
                        if (z2) {
                            this.database.beginTransaction();
                        }
                        putUsersInternal(arrayList3);
                        if (z2) {
                            this.database.commitTransaction();
                        }
                    }
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void updateUsers(final ArrayList<TLRPC$User> arrayList, final boolean z, final boolean z2, boolean z3) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        if (z3) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda241
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateUsers$197(arrayList, z, z2);
                }
            });
        } else {
            lambda$updateUsers$197(arrayList, z, z2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:67:? A[RETURN, SYNTHETIC] */
    /* renamed from: markMessagesAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessagesAsRead$199(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray) {
        SQLitePreparedStatement sQLitePreparedStatement;
        try {
            if (!isEmpty(longSparseIntArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < longSparseIntArray.size(); i++) {
                    try {
                        long keyAt = longSparseIntArray.keyAt(i);
                        int i2 = longSparseIntArray.get(keyAt);
                        this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", Long.valueOf(keyAt), Integer.valueOf(i2))).stepThis().dispose();
                        executeFast.requery();
                        executeFast.bindLong(1, keyAt);
                        executeFast.bindInteger(2, i2);
                        executeFast.step();
                    } catch (Exception e) {
                        e = e;
                        sQLitePreparedStatement = executeFast;
                        try {
                            checkSQLException(e);
                            if (sQLitePreparedStatement == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        sQLitePreparedStatement = executeFast;
                        if (sQLitePreparedStatement != null) {
                        }
                        throw th;
                    }
                }
                executeFast.dispose();
            }
            if (!isEmpty(longSparseIntArray2)) {
                for (int i3 = 0; i3 < longSparseIntArray2.size(); i3++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i3);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", Long.valueOf(keyAt2), Integer.valueOf(longSparseIntArray2.get(keyAt2)))).stepThis().dispose();
                }
            }
            if (sparseIntArray == null || isEmpty(sparseIntArray)) {
                return;
            }
            for (int i4 = 0; i4 < sparseIntArray.size(); i4++) {
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(sparseIntArray.keyAt(i4));
                int valueAt = sparseIntArray.valueAt(i4);
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                try {
                    executeFast2.requery();
                    executeFast2.bindLong(1, makeEncryptedDialogId);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement = executeFast2;
                    checkSQLException(e);
                    if (sQLitePreparedStatement == null) {
                        sQLitePreparedStatement.dispose();
                        return;
                    }
                    return;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    private void markMessagesContentAsReadInternal(long j, ArrayList<Integer> arrayList, int i) {
        SQLiteCursor sQLiteCursor = null;
        ArrayList<Integer> arrayList2 = null;
        sQLiteCursor = null;
        try {
            try {
                String join = TextUtils.join(",", arrayList);
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid IN (%s) AND uid = %d", join, Long.valueOf(j))).stepThis().dispose();
                if (i != 0) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT mid, ttl FROM messages_v2 WHERE mid IN (%s) AND uid = %d AND ttl > 0", join, Long.valueOf(j)), new Object[0]);
                    while (queryFinalized.next()) {
                        try {
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList<>();
                            }
                            arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                        } catch (Exception e) {
                            e = e;
                            sQLiteCursor = queryFinalized;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        } catch (Throwable th) {
                            th = th;
                            sQLiteCursor = queryFinalized;
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    if (arrayList2 != null) {
                        emptyMessagesMedia(j, arrayList2);
                    }
                    queryFinalized.dispose();
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public void markMessagesContentAsRead(final long j, final ArrayList<Integer> arrayList, final int i, final int i2) {
        if (isEmpty(arrayList)) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesContentAsRead$198(j, arrayList, i2, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00d5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$markMessagesContentAsRead$198(long j, ArrayList arrayList, int i, int i2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        SQLiteCursor sQLiteCursor2;
        Exception e;
        int i3;
        if (j == 0) {
            try {
                try {
                    LongSparseArray longSparseArray = new LongSparseArray();
                    LongSparseArray longSparseArray2 = new LongSparseArray();
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid, ttl FROM messages_v2 WHERE mid IN (%s) AND is_channel = 0", TextUtils.join(",", arrayList)), new Object[0]);
                    while (sQLiteCursor2.next()) {
                        try {
                            long longValue = sQLiteCursor2.longValue(0);
                            int intValue = sQLiteCursor2.intValue(1);
                            int intValue2 = sQLiteCursor2.intValue(2);
                            if (intValue2 > 0 && intValue2 != Integer.MAX_VALUE && i != 0 && (i3 = intValue2 + i) >= i2) {
                                SparseArray sparseArray = (SparseArray) longSparseArray2.get(longValue);
                                if (sparseArray == null) {
                                    sparseArray = new SparseArray();
                                    longSparseArray2.put(longValue, sparseArray);
                                }
                                ArrayList arrayList2 = (ArrayList) sparseArray.get(i3);
                                if (arrayList2 == null) {
                                    arrayList2 = new ArrayList();
                                    sparseArray.put(i3, arrayList2);
                                }
                                arrayList2.add(Integer.valueOf(intValue));
                            }
                            ArrayList arrayList3 = (ArrayList) longSparseArray.get(longValue);
                            if (arrayList3 == null) {
                                arrayList3 = new ArrayList();
                                longSparseArray.put(longValue, arrayList3);
                            }
                            arrayList3.add(Integer.valueOf(intValue));
                        } catch (Exception e2) {
                            e = e2;
                            checkSQLException(e);
                            if (sQLiteCursor2 != null) {
                                sQLiteCursor2.dispose();
                                return;
                            }
                            return;
                        }
                    }
                    sQLiteCursor2.dispose();
                    int size = longSparseArray.size();
                    for (int i4 = 0; i4 < size; i4++) {
                        markMessagesContentAsReadInternal(longSparseArray.keyAt(i4), (ArrayList) longSparseArray.valueAt(i4), i2);
                    }
                    int size2 = longSparseArray2.size();
                    for (int i5 = 0; i5 < size2; i5++) {
                        createTaskForSecretMedia(longSparseArray2.keyAt(i5), (SparseArray) longSparseArray2.valueAt(i5));
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = arrayList;
                    if (sQLiteCursor != 0) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            } catch (Exception e3) {
                sQLiteCursor2 = null;
                e = e3;
            } catch (Throwable th3) {
                sQLiteCursor = 0;
                th = th3;
                if (sQLiteCursor != 0) {
                }
                throw th;
            }
        } else {
            markMessagesContentAsReadInternal(j, arrayList, i2);
        }
    }

    public void markMessagesAsRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
                }
            });
        } else {
            lambda$markMessagesAsRead$199(longSparseIntArray, longSparseIntArray2, sparseIntArray);
        }
    }

    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> arrayList) {
        if (arrayList.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda182
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$201(arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$201(ArrayList arrayList) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                try {
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id IN(%s)", TextUtils.join(",", arrayList)), new Object[0]);
                } catch (Exception e) {
                    e = e;
                } catch (Throwable th) {
                    th = th;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e2) {
            e = e2;
        }
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(1);
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (longSparseArray.isEmpty()) {
                return;
            }
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                long keyAt = longSparseArray.keyAt(i);
                final ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray.valueAt(i);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda63
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$200(arrayList3);
                    }
                });
                updateDialogsWithReadMessagesInternal(arrayList3, null, null, null, null);
                lambda$markMessagesAsDeleted$209(keyAt, arrayList3, true, 0, 0);
                lambda$updateDialogsWithDeletedMessages$208(keyAt, 0L, arrayList3, null);
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th3) {
            th = th3;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$200(ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", Long.valueOf(j), TextUtils.join(",", arrayList))).stepThis().dispose();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    private void broadcastScheduledMessagesChange(final Long l) {
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages_v2 WHERE uid = %d", l), new Object[0]);
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            final int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda52
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$broadcastScheduledMessagesChange$202(l, intValue);
                }
            });
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = queryFinalized;
            checkSQLException(e);
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = queryFinalized;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$202(Long l, int i) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i), Boolean.TRUE);
    }

    private void broadcastQuickRepliesMessagesChange(Long l, long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda81
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$broadcastQuickRepliesMessagesChange$203();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastQuickRepliesMessagesChange$203() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.quickRepliesUpdated, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1003:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:134:0x028e A[Catch: all -> 0x01d8, Exception -> 0x0317, TRY_LEAVE, TryCatch #29 {Exception -> 0x0317, blocks: (B:124:0x0273, B:132:0x0287, B:134:0x028e, B:137:0x029f), top: B:823:0x0273 }] */
    /* JADX WARN: Removed duplicated region for block: B:252:0x04a8  */
    /* JADX WARN: Removed duplicated region for block: B:257:0x04b8  */
    /* JADX WARN: Removed duplicated region for block: B:295:0x0593 A[Catch: all -> 0x072d, Exception -> 0x0730, TRY_LEAVE, TryCatch #122 {Exception -> 0x0730, all -> 0x072d, blocks: (B:260:0x04be, B:261:0x04cd, B:266:0x04e3, B:267:0x04f2, B:270:0x0504, B:274:0x0519, B:292:0x0575, B:293:0x058d, B:295:0x0593, B:320:0x063c, B:322:0x0642, B:323:0x064c, B:325:0x0652, B:328:0x0675, B:350:0x0727, B:355:0x0733, B:356:0x073c, B:358:0x0752, B:359:0x0757, B:374:0x077f, B:375:0x0783, B:377:0x0789), top: B:889:0x04be }] */
    /* JADX WARN: Removed duplicated region for block: B:322:0x0642 A[Catch: all -> 0x072d, Exception -> 0x0730, TryCatch #122 {Exception -> 0x0730, all -> 0x072d, blocks: (B:260:0x04be, B:261:0x04cd, B:266:0x04e3, B:267:0x04f2, B:270:0x0504, B:274:0x0519, B:292:0x0575, B:293:0x058d, B:295:0x0593, B:320:0x063c, B:322:0x0642, B:323:0x064c, B:325:0x0652, B:328:0x0675, B:350:0x0727, B:355:0x0733, B:356:0x073c, B:358:0x0752, B:359:0x0757, B:374:0x077f, B:375:0x0783, B:377:0x0789), top: B:889:0x04be }] */
    /* JADX WARN: Removed duplicated region for block: B:379:0x0797  */
    /* JADX WARN: Removed duplicated region for block: B:383:0x07a3  */
    /* JADX WARN: Removed duplicated region for block: B:572:0x0b4f A[Catch: all -> 0x0cd2, Exception -> 0x0cd7, TRY_LEAVE, TryCatch #90 {Exception -> 0x0cd7, all -> 0x0cd2, blocks: (B:570:0x0b49, B:572:0x0b4f, B:577:0x0b62), top: B:952:0x0b49 }] */
    /* JADX WARN: Removed duplicated region for block: B:653:0x0cf1  */
    /* JADX WARN: Removed duplicated region for block: B:694:0x0d9b A[Catch: all -> 0x07ee, Exception -> 0x07f1, TryCatch #120 {Exception -> 0x07f1, all -> 0x07ee, blocks: (B:393:0x07dd, B:421:0x084b, B:424:0x085e, B:412:0x0814, B:415:0x082f, B:692:0x0d95, B:694:0x0d9b, B:695:0x0da5, B:698:0x0db1, B:702:0x0dca, B:703:0x0dda, B:706:0x0de8, B:712:0x0e00, B:714:0x0e06, B:721:0x0e29, B:725:0x0e33, B:726:0x0e43, B:729:0x0e51, B:734:0x0e67, B:736:0x0e75, B:737:0x0e79, B:740:0x0e81, B:742:0x0e87, B:745:0x0eaa, B:750:0x0ec3, B:752:0x0ed2, B:718:0x0e19, B:720:0x0e1f), top: B:893:0x07dd }] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0165 A[Catch: all -> 0x0037, Exception -> 0x003a, TRY_LEAVE, TryCatch #119 {Exception -> 0x003a, all -> 0x0037, blocks: (B:3:0x000b, B:6:0x0019, B:8:0x0027, B:19:0x0049, B:25:0x0056, B:27:0x006a, B:32:0x0083, B:34:0x009c, B:47:0x00cd, B:49:0x00dd, B:51:0x00f2, B:60:0x010c, B:69:0x0165, B:72:0x0181, B:75:0x0191, B:78:0x01a5, B:66:0x0158), top: B:895:0x000b }] */
    /* JADX WARN: Removed duplicated region for block: B:700:0x0dc6  */
    /* JADX WARN: Removed duplicated region for block: B:712:0x0e00 A[Catch: all -> 0x07ee, Exception -> 0x07f1, TryCatch #120 {Exception -> 0x07f1, all -> 0x07ee, blocks: (B:393:0x07dd, B:421:0x084b, B:424:0x085e, B:412:0x0814, B:415:0x082f, B:692:0x0d95, B:694:0x0d9b, B:695:0x0da5, B:698:0x0db1, B:702:0x0dca, B:703:0x0dda, B:706:0x0de8, B:712:0x0e00, B:714:0x0e06, B:721:0x0e29, B:725:0x0e33, B:726:0x0e43, B:729:0x0e51, B:734:0x0e67, B:736:0x0e75, B:737:0x0e79, B:740:0x0e81, B:742:0x0e87, B:745:0x0eaa, B:750:0x0ec3, B:752:0x0ed2, B:718:0x0e19, B:720:0x0e1f), top: B:893:0x07dd }] */
    /* JADX WARN: Removed duplicated region for block: B:718:0x0e19 A[Catch: all -> 0x07ee, Exception -> 0x07f1, TryCatch #120 {Exception -> 0x07f1, all -> 0x07ee, blocks: (B:393:0x07dd, B:421:0x084b, B:424:0x085e, B:412:0x0814, B:415:0x082f, B:692:0x0d95, B:694:0x0d9b, B:695:0x0da5, B:698:0x0db1, B:702:0x0dca, B:703:0x0dda, B:706:0x0de8, B:712:0x0e00, B:714:0x0e06, B:721:0x0e29, B:725:0x0e33, B:726:0x0e43, B:729:0x0e51, B:734:0x0e67, B:736:0x0e75, B:737:0x0e79, B:740:0x0e81, B:742:0x0e87, B:745:0x0eaa, B:750:0x0ec3, B:752:0x0ed2, B:718:0x0e19, B:720:0x0e1f), top: B:893:0x07dd }] */
    /* JADX WARN: Removed duplicated region for block: B:723:0x0e2f  */
    /* JADX WARN: Removed duplicated region for block: B:736:0x0e75 A[Catch: all -> 0x07ee, Exception -> 0x07f1, TryCatch #120 {Exception -> 0x07f1, all -> 0x07ee, blocks: (B:393:0x07dd, B:421:0x084b, B:424:0x085e, B:412:0x0814, B:415:0x082f, B:692:0x0d95, B:694:0x0d9b, B:695:0x0da5, B:698:0x0db1, B:702:0x0dca, B:703:0x0dda, B:706:0x0de8, B:712:0x0e00, B:714:0x0e06, B:721:0x0e29, B:725:0x0e33, B:726:0x0e43, B:729:0x0e51, B:734:0x0e67, B:736:0x0e75, B:737:0x0e79, B:740:0x0e81, B:742:0x0e87, B:745:0x0eaa, B:750:0x0ec3, B:752:0x0ed2, B:718:0x0e19, B:720:0x0e1f), top: B:893:0x07dd }] */
    /* JADX WARN: Removed duplicated region for block: B:739:0x0e80  */
    /* JADX WARN: Removed duplicated region for block: B:752:0x0ed2 A[Catch: all -> 0x07ee, Exception -> 0x07f1, TRY_LEAVE, TryCatch #120 {Exception -> 0x07f1, all -> 0x07ee, blocks: (B:393:0x07dd, B:421:0x084b, B:424:0x085e, B:412:0x0814, B:415:0x082f, B:692:0x0d95, B:694:0x0d9b, B:695:0x0da5, B:698:0x0db1, B:702:0x0dca, B:703:0x0dda, B:706:0x0de8, B:712:0x0e00, B:714:0x0e06, B:721:0x0e29, B:725:0x0e33, B:726:0x0e43, B:729:0x0e51, B:734:0x0e67, B:736:0x0e75, B:737:0x0e79, B:740:0x0e81, B:742:0x0e87, B:745:0x0eaa, B:750:0x0ec3, B:752:0x0ed2, B:718:0x0e19, B:720:0x0e1f), top: B:893:0x07dd }] */
    /* JADX WARN: Removed duplicated region for block: B:756:0x0ee7  */
    /* JADX WARN: Removed duplicated region for block: B:758:0x0eec  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0191 A[Catch: all -> 0x0037, Exception -> 0x003a, TRY_LEAVE, TryCatch #119 {Exception -> 0x003a, all -> 0x0037, blocks: (B:3:0x000b, B:6:0x0019, B:8:0x0027, B:19:0x0049, B:25:0x0056, B:27:0x006a, B:32:0x0083, B:34:0x009c, B:47:0x00cd, B:49:0x00dd, B:51:0x00f2, B:60:0x010c, B:69:0x0165, B:72:0x0181, B:75:0x0191, B:78:0x01a5, B:66:0x0158), top: B:895:0x000b }] */
    /* JADX WARN: Removed duplicated region for block: B:760:0x0ef1  */
    /* JADX WARN: Removed duplicated region for block: B:787:0x0f36  */
    /* JADX WARN: Removed duplicated region for block: B:789:0x0f3b  */
    /* JADX WARN: Removed duplicated region for block: B:791:0x0f40  */
    /* JADX WARN: Removed duplicated region for block: B:799:0x0f4e  */
    /* JADX WARN: Removed duplicated region for block: B:801:0x0f53  */
    /* JADX WARN: Removed duplicated region for block: B:803:0x0f58  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01b6  */
    /* JADX WARN: Removed duplicated region for block: B:954:0x0369 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:970:0x0325 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v5 */
    /* JADX WARN: Type inference failed for: r13v6, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r13v7 */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:130:0x0280 -> B:131:0x0284). Please submit an issue!!! */
    /* renamed from: markMessagesAsDeletedInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$209(long j, ArrayList<Integer> arrayList, boolean z, int i, int i2) {
        Throwable th;
        Throwable th2;
        SQLiteCursor sQLiteCursor;
        Throwable th3;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor3;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor4;
        SQLitePreparedStatement sQLitePreparedStatement3;
        Throwable th4;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor5;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor6;
        ArrayList<Long> arrayList2;
        boolean z2;
        HashMap hashMap;
        ArrayList arrayList3;
        ArrayList arrayList4;
        LongSparseArray longSparseArray;
        ArrayList<String> arrayList5;
        ArrayList<Pair<Long, Integer>> arrayList6;
        int i3;
        ArrayList arrayList7;
        ArrayList arrayList8;
        ArrayList<File> arrayList9;
        LongSparseArray longSparseArray2;
        ArrayList arrayList10;
        LongSparseArray longSparseArray3;
        int i4;
        long j2;
        Throwable th5;
        HashMap hashMap2;
        long j3;
        ArrayList arrayList11;
        ArrayList<TopicKey> arrayList12;
        long j4;
        long j5;
        SQLitePreparedStatement sQLitePreparedStatement4;
        Throwable th6;
        int i5;
        int i6;
        ArrayList<TopicKey> arrayList13;
        LongSparseArray longSparseArray4;
        List<TopicsController.TopicUpdate> list;
        Throwable th7;
        SQLitePreparedStatement sQLitePreparedStatement5;
        Throwable th8;
        SQLiteCursor sQLiteCursor7;
        SQLiteCursor sQLiteCursor8;
        int size;
        int i7;
        SQLitePreparedStatement sQLitePreparedStatement6;
        List<TopicsController.TopicUpdate> list2;
        SQLiteCursor sQLiteCursor9;
        LongSparseArray longSparseArray5;
        ArrayList arrayList14;
        final ArrayList<Integer> arrayList15;
        ArrayList<Long> arrayList16;
        SQLiteCursor sQLiteCursor10;
        SQLitePreparedStatement sQLitePreparedStatement7;
        Throwable th9;
        Throwable e;
        Throwable th10;
        SQLiteCursor sQLiteCursor11;
        SQLiteCursor sQLiteCursor12;
        long keyAt;
        CharSequence charSequence;
        String join;
        int i8;
        SQLiteDatabase sQLiteDatabase3;
        Locale locale;
        Throwable e2;
        int i9;
        List<TopicsController.TopicUpdate> list3;
        LongSparseArray longSparseArray6;
        String str;
        CharSequence charSequence2;
        SQLiteCursor sQLiteCursor13;
        Throwable e3;
        long j6;
        Throwable th11;
        Throwable th12;
        Object[] objArr;
        int i10;
        SQLiteCursor sQLiteCursor14;
        TopicKey topicKey;
        SparseArray sparseArray;
        int i11;
        int i12;
        int i13;
        Integer num;
        SQLiteCursor sQLiteCursor15;
        int i14;
        int i15;
        Integer num2;
        Throwable th13;
        int i16;
        int i17;
        int i18;
        int max;
        int max2;
        int max3;
        SQLitePreparedStatement executeFast;
        SQLiteCursor sQLiteCursor16;
        SQLiteCursor sQLiteCursor17;
        int i19;
        int i20;
        Throwable th14;
        ArrayList arrayList17;
        NativeByteBuffer byteBufferValue;
        long j7;
        Integer[] numArr;
        SQLiteDatabase sQLiteDatabase4;
        try {
            if (getUserConfig().getClientUserId() == j) {
                try {
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM tag_message_id WHERE mid IN(%s)", TextUtils.join(",", arrayList))).stepThis().dispose();
                    } catch (Throwable th15) {
                        th = th15;
                    }
                } catch (Exception e4) {
                    e = e4;
                    th3 = e;
                    sQLitePreparedStatement = null;
                    sQLiteCursor5 = null;
                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                    th4 = th3;
                    sQLiteCursor4 = sQLiteCursor5;
                    try {
                        checkSQLException(th4);
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLiteCursor4 != null) {
                        }
                        if (sQLitePreparedStatement2 == null) {
                        }
                    } catch (Throwable th16) {
                        th = th16;
                        sQLiteCursor3 = sQLiteCursor4;
                        sQLiteCursor4 = sQLiteCursor3;
                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor4 != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        throw th;
                    }
                }
            }
            arrayList2 = new ArrayList<>();
            z2 = i == 1;
        } catch (Exception e5) {
            th2 = e5;
            sQLiteCursor = null;
        } catch (Throwable th17) {
            th = th17;
        }
        if (i == 5) {
            try {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d", TextUtils.join(",", arrayList), Integer.valueOf(i2))).stepThis().dispose();
            } catch (Throwable th18) {
                th = th18;
            }
        } else if (z2) {
            String join2 = TextUtils.join(",", arrayList);
            ArrayList arrayList18 = new ArrayList();
            try {
                sQLiteCursor4 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", join2, Long.valueOf(j)), new Object[0]);
                while (sQLiteCursor4.next()) {
                    try {
                        try {
                            long longValue = sQLiteCursor4.longValue(0);
                            if (!arrayList18.contains(Long.valueOf(longValue))) {
                                arrayList18.add(Long.valueOf(longValue));
                            }
                        } catch (Exception e6) {
                            try {
                                checkSQLException(e6);
                            } catch (Exception e7) {
                                th4 = e7;
                                sQLitePreparedStatement2 = null;
                                checkSQLException(th4);
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                    sQLiteDatabase.commitTransaction();
                                }
                                if (sQLiteCursor4 != null) {
                                    sQLiteCursor4.dispose();
                                }
                                if (sQLitePreparedStatement2 == null) {
                                    sQLitePreparedStatement2.dispose();
                                    return null;
                                }
                                return null;
                            }
                        }
                    } catch (Throwable th19) {
                        th = th19;
                        sQLitePreparedStatement3 = null;
                    }
                }
                sQLiteCursor4.dispose();
                try {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d", join2, Long.valueOf(j))).stepThis().dispose();
                    int size2 = arrayList18.size();
                    for (int i21 = 0; i21 < size2; i21++) {
                        broadcastScheduledMessagesChange((Long) arrayList18.get(i21));
                    }
                } catch (Throwable th20) {
                    th = th20;
                }
            } catch (Throwable th21) {
                th = th21;
            }
        } else {
            long clientUserId = getUserConfig().getClientUserId();
            ArrayList arrayList19 = new ArrayList(arrayList);
            ArrayList arrayList20 = new ArrayList(arrayList);
            LongSparseArray longSparseArray7 = new LongSparseArray();
            LongSparseArray longSparseArray8 = new LongSparseArray();
            HashMap hashMap3 = new HashMap();
            LongSparseArray longSparseArray9 = new LongSparseArray();
            String join3 = TextUtils.join(",", arrayList);
            CharSequence charSequence3 = ",";
            ArrayList<File> arrayList21 = new ArrayList<>();
            ArrayList<String> arrayList22 = new ArrayList<>();
            ArrayList<Long> arrayList23 = arrayList2;
            ArrayList<Pair<Long, Integer>> arrayList24 = new ArrayList<>();
            if (clientUserId != j && j != 0) {
                hashMap = hashMap3;
                arrayList3 = null;
                if (j == 0) {
                    arrayList4 = arrayList20;
                    longSparseArray = longSparseArray8;
                    arrayList5 = arrayList22;
                    arrayList6 = arrayList24;
                    try {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(j)), new Object[0]);
                        i3 = 0;
                        while (sQLiteCursor.next()) {
                            ArrayList<File> arrayList25 = arrayList21;
                            try {
                                try {
                                    long longValue2 = sQLiteCursor.longValue(i3);
                                    int intValue = sQLiteCursor.intValue(5);
                                    arrayList19.remove(Integer.valueOf(intValue));
                                    ArrayList arrayList26 = (ArrayList) longSparseArray9.get(longValue2);
                                    if (arrayList26 == null) {
                                        try {
                                            arrayList26 = new ArrayList();
                                            longSparseArray9.put(longValue2, arrayList26);
                                        } catch (Exception e8) {
                                            arrayList7 = arrayList4;
                                            th14 = e8;
                                            arrayList8 = arrayList19;
                                            j2 = clientUserId;
                                            arrayList9 = arrayList25;
                                            longSparseArray2 = longSparseArray9;
                                            arrayList10 = arrayList3;
                                            longSparseArray3 = longSparseArray;
                                            i4 = 5;
                                            try {
                                                checkSQLException(th14);
                                                sQLiteCursor.dispose();
                                                if (j >= 0) {
                                                }
                                                this.database.beginTransaction();
                                                while (i5 < 4) {
                                                }
                                                deleteFromDownloadQueue(arrayList6, true);
                                                final ArrayList<String> arrayList27 = arrayList5;
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList27);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList9, 0);
                                                i6 = 0;
                                                while (i6 < longSparseArray7.size()) {
                                                }
                                                arrayList13 = arrayList12;
                                                if (hashMap2.isEmpty()) {
                                                }
                                                try {
                                                    size = longSparseArray2.size();
                                                    SQLitePreparedStatement sQLitePreparedStatement8 = null;
                                                    i7 = 0;
                                                    SQLiteCursor sQLiteCursor18 = null;
                                                    while (i7 < size) {
                                                    }
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement8;
                                                    list2 = list;
                                                    sQLiteCursor9 = sQLiteCursor18;
                                                    longSparseArray5 = longSparseArray7;
                                                    String str2 = join3;
                                                    if (!longSparseArray4.isEmpty()) {
                                                    }
                                                    SQLiteDatabase sQLiteDatabase5 = this.database;
                                                    Locale locale2 = Locale.US;
                                                    try {
                                                        sQLiteDatabase5.executeFast(String.format(locale2, "DELETE FROM messages_seq WHERE mid IN(%s)", str2)).stepThis().dispose();
                                                        if (!arrayList8.isEmpty()) {
                                                        }
                                                        if (arrayList10 == null) {
                                                        }
                                                        arrayList14 = arrayList10;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList11.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList23;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList13 != null) {
                                                        }
                                                        if (list2 != null) {
                                                        }
                                                        sQLiteCursor10 = sQLiteCursor9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    } catch (Exception e9) {
                                                        e = e9;
                                                    } catch (Throwable th22) {
                                                        th = th22;
                                                    }
                                                } catch (Exception e10) {
                                                    th8 = e10;
                                                    sQLiteCursor7 = null;
                                                    sQLitePreparedStatement2 = null;
                                                } catch (Throwable th23) {
                                                    th7 = th23;
                                                    sQLitePreparedStatement5 = null;
                                                }
                                            } catch (Exception e11) {
                                                th2 = e11;
                                                th3 = th2;
                                                sQLiteCursor2 = sQLiteCursor;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = sQLiteCursor2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            }
                                        }
                                    }
                                    arrayList26.add(Integer.valueOf(intValue));
                                    if (longValue2 != clientUserId) {
                                        try {
                                            int intValue2 = sQLiteCursor.intValue(2);
                                            if (sQLiteCursor.intValue(3) == 0) {
                                                Integer[] numArr2 = (Integer[]) longSparseArray7.get(longValue2);
                                                if (numArr2 == null) {
                                                    try {
                                                        try {
                                                            longSparseArray7.put(longValue2, numArr);
                                                            numArr2 = numArr;
                                                        } catch (Exception e12) {
                                                            e = e12;
                                                            arrayList7 = arrayList4;
                                                            th14 = e;
                                                            j2 = clientUserId;
                                                            arrayList9 = arrayList25;
                                                            arrayList10 = arrayList3;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList8 = arrayList17;
                                                            i4 = 5;
                                                            checkSQLException(th14);
                                                            sQLiteCursor.dispose();
                                                            if (j >= 0) {
                                                            }
                                                            this.database.beginTransaction();
                                                            while (i5 < 4) {
                                                            }
                                                            deleteFromDownloadQueue(arrayList6, true);
                                                            final ArrayList arrayList272 = arrayList5;
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList272);
                                                                }
                                                            });
                                                            getFileLoader().deleteFiles(arrayList9, 0);
                                                            i6 = 0;
                                                            while (i6 < longSparseArray7.size()) {
                                                            }
                                                            arrayList13 = arrayList12;
                                                            if (hashMap2.isEmpty()) {
                                                            }
                                                            size = longSparseArray2.size();
                                                            SQLitePreparedStatement sQLitePreparedStatement82 = null;
                                                            i7 = 0;
                                                            SQLiteCursor sQLiteCursor182 = null;
                                                            while (i7 < size) {
                                                            }
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement82;
                                                            list2 = list;
                                                            sQLiteCursor9 = sQLiteCursor182;
                                                            longSparseArray5 = longSparseArray7;
                                                            String str22 = join3;
                                                            if (!longSparseArray4.isEmpty()) {
                                                            }
                                                            SQLiteDatabase sQLiteDatabase52 = this.database;
                                                            Locale locale22 = Locale.US;
                                                            sQLiteDatabase52.executeFast(String.format(locale22, "DELETE FROM messages_seq WHERE mid IN(%s)", str22)).stepThis().dispose();
                                                            if (!arrayList8.isEmpty()) {
                                                            }
                                                            if (arrayList10 == null) {
                                                            }
                                                            arrayList14 = arrayList10;
                                                            if (arrayList14 != null) {
                                                            }
                                                            arrayList15 = arrayList;
                                                            if (!arrayList11.isEmpty()) {
                                                            }
                                                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                            if (longSparseArray5.size() != 0) {
                                                            }
                                                            arrayList16 = arrayList23;
                                                            updateWidgets(arrayList16);
                                                            if (arrayList13 != null) {
                                                            }
                                                            if (list2 != null) {
                                                            }
                                                            sQLiteCursor10 = sQLiteCursor9;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                            sQLiteDatabase4 = this.database;
                                                            if (sQLiteDatabase4 != null) {
                                                            }
                                                            if (sQLiteCursor10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            return arrayList16;
                                                        }
                                                        numArr = new Integer[]{0, 0};
                                                    } catch (Exception e13) {
                                                        th14 = e13;
                                                        arrayList7 = arrayList4;
                                                        j2 = clientUserId;
                                                        arrayList9 = arrayList25;
                                                        arrayList10 = arrayList3;
                                                        longSparseArray3 = longSparseArray;
                                                        arrayList8 = arrayList17;
                                                        i4 = 5;
                                                        checkSQLException(th14);
                                                        sQLiteCursor.dispose();
                                                        if (j >= 0) {
                                                        }
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList6, true);
                                                        final ArrayList arrayList2722 = arrayList5;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2722);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList9, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList13 = arrayList12;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement822 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor1822 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement822;
                                                        list2 = list;
                                                        sQLiteCursor9 = sQLiteCursor1822;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str222 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase522 = this.database;
                                                        Locale locale222 = Locale.US;
                                                        sQLiteDatabase522.executeFast(String.format(locale222, "DELETE FROM messages_seq WHERE mid IN(%s)", str222)).stepThis().dispose();
                                                        if (!arrayList8.isEmpty()) {
                                                        }
                                                        if (arrayList10 == null) {
                                                        }
                                                        arrayList14 = arrayList10;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList11.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList23;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList13 != null) {
                                                        }
                                                        if (list2 != null) {
                                                        }
                                                        sQLiteCursor10 = sQLiteCursor9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    } catch (Throwable th24) {
                                                        th = th24;
                                                        th = th;
                                                        sQLiteCursor6 = sQLiteCursor;
                                                        sQLitePreparedStatement3 = null;
                                                        sQLiteCursor4 = sQLiteCursor6;
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                    arrayList17 = arrayList19;
                                                    longSparseArray2 = longSparseArray9;
                                                } else {
                                                    arrayList17 = arrayList19;
                                                    longSparseArray2 = longSparseArray9;
                                                }
                                                if (intValue2 < 2) {
                                                    numArr2[1] = Integer.valueOf(numArr2[1].intValue() + 1);
                                                }
                                                if (intValue2 == 0 || intValue2 == 2) {
                                                    numArr2[0] = Integer.valueOf(numArr2[0].intValue() + 1);
                                                }
                                                if (!DialogObject.isEncryptedDialog(longValue2) || z || longValue2 == clientUserId) {
                                                    byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                                    if (byteBufferValue == null) {
                                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                        TLdeserialize.readAttachPath(byteBufferValue, clientUserId);
                                                        if (arrayList3 != null) {
                                                            arrayList3.add(TLdeserialize);
                                                        }
                                                        byteBufferValue.reuse();
                                                        if (DialogObject.isEncryptedDialog(longValue2) || z) {
                                                            arrayList7 = arrayList4;
                                                            arrayList8 = arrayList17;
                                                            long j8 = clientUserId;
                                                            j7 = longValue2;
                                                            arrayList9 = arrayList25;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList10 = arrayList3;
                                                            i4 = 5;
                                                            try {
                                                                addFilesToDelete(TLdeserialize, arrayList25, arrayList6, arrayList5, false);
                                                                j2 = j8;
                                                            } catch (Exception e14) {
                                                                e = e14;
                                                                j2 = j8;
                                                                th14 = e;
                                                                checkSQLException(th14);
                                                                sQLiteCursor.dispose();
                                                                if (j >= 0) {
                                                                }
                                                                this.database.beginTransaction();
                                                                while (i5 < 4) {
                                                                }
                                                                deleteFromDownloadQueue(arrayList6, true);
                                                                final ArrayList arrayList27222 = arrayList5;
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList27222);
                                                                    }
                                                                });
                                                                getFileLoader().deleteFiles(arrayList9, 0);
                                                                i6 = 0;
                                                                while (i6 < longSparseArray7.size()) {
                                                                }
                                                                arrayList13 = arrayList12;
                                                                if (hashMap2.isEmpty()) {
                                                                }
                                                                size = longSparseArray2.size();
                                                                SQLitePreparedStatement sQLitePreparedStatement8222 = null;
                                                                i7 = 0;
                                                                SQLiteCursor sQLiteCursor18222 = null;
                                                                while (i7 < size) {
                                                                }
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement8222;
                                                                list2 = list;
                                                                sQLiteCursor9 = sQLiteCursor18222;
                                                                longSparseArray5 = longSparseArray7;
                                                                String str2222 = join3;
                                                                if (!longSparseArray4.isEmpty()) {
                                                                }
                                                                SQLiteDatabase sQLiteDatabase5222 = this.database;
                                                                Locale locale2222 = Locale.US;
                                                                sQLiteDatabase5222.executeFast(String.format(locale2222, "DELETE FROM messages_seq WHERE mid IN(%s)", str2222)).stepThis().dispose();
                                                                if (!arrayList8.isEmpty()) {
                                                                }
                                                                if (arrayList10 == null) {
                                                                }
                                                                arrayList14 = arrayList10;
                                                                if (arrayList14 != null) {
                                                                }
                                                                arrayList15 = arrayList;
                                                                if (!arrayList11.isEmpty()) {
                                                                }
                                                                getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                if (longSparseArray5.size() != 0) {
                                                                }
                                                                arrayList16 = arrayList23;
                                                                updateWidgets(arrayList16);
                                                                if (arrayList13 != null) {
                                                                }
                                                                if (list2 != null) {
                                                                }
                                                                sQLiteCursor10 = sQLiteCursor9;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                sQLiteDatabase4 = this.database;
                                                                if (sQLiteDatabase4 != null) {
                                                                }
                                                                if (sQLiteCursor10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                return arrayList16;
                                                            }
                                                        } else {
                                                            arrayList7 = arrayList4;
                                                            j7 = longValue2;
                                                            arrayList9 = arrayList25;
                                                            arrayList10 = arrayList3;
                                                            longSparseArray3 = longSparseArray;
                                                            arrayList8 = arrayList17;
                                                            i4 = 5;
                                                            j2 = clientUserId;
                                                        }
                                                        if (j7 == j2) {
                                                            try {
                                                                long savedDialogId = MessageObject.getSavedDialogId(j2, TLdeserialize);
                                                                if (savedDialogId != 0) {
                                                                    ArrayList arrayList28 = (ArrayList) longSparseArray3.get(savedDialogId);
                                                                    if (arrayList28 == null) {
                                                                        arrayList28 = new ArrayList();
                                                                        longSparseArray3.put(savedDialogId, arrayList28);
                                                                    }
                                                                    arrayList28.add(Integer.valueOf(intValue));
                                                                }
                                                            } catch (Exception e15) {
                                                                e = e15;
                                                                th14 = e;
                                                                checkSQLException(th14);
                                                                sQLiteCursor.dispose();
                                                                if (j >= 0) {
                                                                }
                                                                this.database.beginTransaction();
                                                                while (i5 < 4) {
                                                                }
                                                                deleteFromDownloadQueue(arrayList6, true);
                                                                final ArrayList arrayList272222 = arrayList5;
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList272222);
                                                                    }
                                                                });
                                                                getFileLoader().deleteFiles(arrayList9, 0);
                                                                i6 = 0;
                                                                while (i6 < longSparseArray7.size()) {
                                                                }
                                                                arrayList13 = arrayList12;
                                                                if (hashMap2.isEmpty()) {
                                                                }
                                                                size = longSparseArray2.size();
                                                                SQLitePreparedStatement sQLitePreparedStatement82222 = null;
                                                                i7 = 0;
                                                                SQLiteCursor sQLiteCursor182222 = null;
                                                                while (i7 < size) {
                                                                }
                                                                sQLitePreparedStatement6 = sQLitePreparedStatement82222;
                                                                list2 = list;
                                                                sQLiteCursor9 = sQLiteCursor182222;
                                                                longSparseArray5 = longSparseArray7;
                                                                String str22222 = join3;
                                                                if (!longSparseArray4.isEmpty()) {
                                                                }
                                                                SQLiteDatabase sQLiteDatabase52222 = this.database;
                                                                Locale locale22222 = Locale.US;
                                                                sQLiteDatabase52222.executeFast(String.format(locale22222, "DELETE FROM messages_seq WHERE mid IN(%s)", str22222)).stepThis().dispose();
                                                                if (!arrayList8.isEmpty()) {
                                                                }
                                                                if (arrayList10 == null) {
                                                                }
                                                                arrayList14 = arrayList10;
                                                                if (arrayList14 != null) {
                                                                }
                                                                arrayList15 = arrayList;
                                                                if (!arrayList11.isEmpty()) {
                                                                }
                                                                getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                if (longSparseArray5.size() != 0) {
                                                                }
                                                                arrayList16 = arrayList23;
                                                                updateWidgets(arrayList16);
                                                                if (arrayList13 != null) {
                                                                }
                                                                if (list2 != null) {
                                                                }
                                                                sQLiteCursor10 = sQLiteCursor9;
                                                                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                sQLiteDatabase4 = this.database;
                                                                if (sQLiteDatabase4 != null) {
                                                                }
                                                                if (sQLiteCursor10 != null) {
                                                                }
                                                                if (sQLitePreparedStatement7 != null) {
                                                                }
                                                                return arrayList16;
                                                            }
                                                        }
                                                        clientUserId = j2;
                                                        longSparseArray = longSparseArray3;
                                                        arrayList3 = arrayList10;
                                                        arrayList19 = arrayList8;
                                                        longSparseArray9 = longSparseArray2;
                                                        i3 = 0;
                                                        arrayList21 = arrayList9;
                                                        arrayList4 = arrayList7;
                                                    } else {
                                                        arrayList21 = arrayList25;
                                                        arrayList3 = arrayList3;
                                                    }
                                                } else {
                                                    arrayList21 = arrayList25;
                                                }
                                                arrayList19 = arrayList17;
                                                longSparseArray9 = longSparseArray2;
                                                i3 = 0;
                                                while (sQLiteCursor.next()) {
                                                    try {
                                                        try {
                                                        } catch (Throwable th25) {
                                                            th = th25;
                                                        }
                                                    } catch (Exception e16) {
                                                        e = e16;
                                                        arrayList7 = arrayList4;
                                                        arrayList8 = arrayList19;
                                                        arrayList9 = arrayList21;
                                                        longSparseArray2 = longSparseArray9;
                                                        arrayList10 = arrayList3;
                                                        longSparseArray3 = longSparseArray;
                                                        i4 = 5;
                                                        j2 = clientUserId;
                                                    }
                                                }
                                            }
                                        } catch (Exception e17) {
                                            e = e17;
                                            arrayList17 = arrayList19;
                                            longSparseArray2 = longSparseArray9;
                                        }
                                    }
                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue == null) {
                                    }
                                } catch (Exception e18) {
                                    e = e18;
                                    arrayList7 = arrayList4;
                                    j2 = clientUserId;
                                    arrayList9 = arrayList25;
                                    arrayList10 = arrayList3;
                                    longSparseArray3 = longSparseArray;
                                    arrayList8 = arrayList17;
                                    i4 = 5;
                                    th14 = e;
                                    checkSQLException(th14);
                                    sQLiteCursor.dispose();
                                    if (j >= 0) {
                                    }
                                    this.database.beginTransaction();
                                    while (i5 < 4) {
                                    }
                                    deleteFromDownloadQueue(arrayList6, true);
                                    final ArrayList arrayList2722222 = arrayList5;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2722222);
                                        }
                                    });
                                    getFileLoader().deleteFiles(arrayList9, 0);
                                    i6 = 0;
                                    while (i6 < longSparseArray7.size()) {
                                    }
                                    arrayList13 = arrayList12;
                                    if (hashMap2.isEmpty()) {
                                    }
                                    size = longSparseArray2.size();
                                    SQLitePreparedStatement sQLitePreparedStatement822222 = null;
                                    i7 = 0;
                                    SQLiteCursor sQLiteCursor1822222 = null;
                                    while (i7 < size) {
                                    }
                                    sQLitePreparedStatement6 = sQLitePreparedStatement822222;
                                    list2 = list;
                                    sQLiteCursor9 = sQLiteCursor1822222;
                                    longSparseArray5 = longSparseArray7;
                                    String str222222 = join3;
                                    if (!longSparseArray4.isEmpty()) {
                                    }
                                    SQLiteDatabase sQLiteDatabase522222 = this.database;
                                    Locale locale222222 = Locale.US;
                                    sQLiteDatabase522222.executeFast(String.format(locale222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str222222)).stepThis().dispose();
                                    if (!arrayList8.isEmpty()) {
                                    }
                                    if (arrayList10 == null) {
                                    }
                                    arrayList14 = arrayList10;
                                    if (arrayList14 != null) {
                                    }
                                    arrayList15 = arrayList;
                                    if (!arrayList11.isEmpty()) {
                                    }
                                    getMediaDataController().clearBotKeyboard(null, arrayList15);
                                    if (longSparseArray5.size() != 0) {
                                    }
                                    arrayList16 = arrayList23;
                                    updateWidgets(arrayList16);
                                    if (arrayList13 != null) {
                                    }
                                    if (list2 != null) {
                                    }
                                    sQLiteCursor10 = sQLiteCursor9;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                    sQLiteDatabase4 = this.database;
                                    if (sQLiteDatabase4 != null) {
                                    }
                                    if (sQLiteCursor10 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    return arrayList16;
                                }
                                arrayList17 = arrayList19;
                                longSparseArray2 = longSparseArray9;
                            } catch (Exception e19) {
                                e = e19;
                                arrayList7 = arrayList4;
                                arrayList8 = arrayList19;
                                j2 = clientUserId;
                                arrayList9 = arrayList25;
                                longSparseArray2 = longSparseArray9;
                                arrayList10 = arrayList3;
                                longSparseArray3 = longSparseArray;
                            }
                        }
                        arrayList7 = arrayList4;
                        arrayList8 = arrayList19;
                        arrayList9 = arrayList21;
                        longSparseArray2 = longSparseArray9;
                        arrayList10 = arrayList3;
                        longSparseArray3 = longSparseArray;
                        i4 = 5;
                        j2 = clientUserId;
                        sQLiteCursor.dispose();
                        if (j >= 0) {
                            try {
                            } catch (Exception e20) {
                                th5 = e20;
                                sQLiteCursor2 = null;
                            } catch (Throwable th26) {
                                th = th26;
                                sQLiteCursor2 = null;
                            }
                            try {
                                ?? r13 = 0;
                                sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(j)), new Object[0]);
                                ArrayList<TopicKey> arrayList29 = null;
                                while (sQLiteCursor2.next()) {
                                    try {
                                        try {
                                            long longValue3 = sQLiteCursor2.longValue(r13);
                                            ArrayList arrayList30 = arrayList7;
                                            try {
                                                arrayList30.remove(Integer.valueOf(sQLiteCursor2.intValue(i4)));
                                                NativeByteBuffer byteBufferValue2 = sQLiteCursor2.byteBufferValue(1);
                                                if (byteBufferValue2 != 0) {
                                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(r13), r13);
                                                    try {
                                                        TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                        byteBufferValue2.reuse();
                                                        arrayList11 = arrayList30;
                                                        j3 = j2;
                                                        try {
                                                            addFilesToDelete(TLdeserialize2, arrayList9, arrayList6, arrayList5, false);
                                                            if (TLdeserialize2.action instanceof TLRPC$TL_messageActionTopicCreate) {
                                                                ArrayList<TopicKey> arrayList31 = arrayList29 == null ? new ArrayList<>() : arrayList29;
                                                                try {
                                                                    j5 = longValue3;
                                                                    arrayList31.add(TopicKey.of(j5, TLdeserialize2.id));
                                                                    arrayList29 = arrayList31;
                                                                } catch (Exception e21) {
                                                                    e = e21;
                                                                    hashMap2 = hashMap;
                                                                    arrayList29 = arrayList31;
                                                                    try {
                                                                        checkSQLException(e);
                                                                        sQLiteCursor2.dispose();
                                                                        arrayList12 = arrayList29;
                                                                        this.database.beginTransaction();
                                                                        while (i5 < 4) {
                                                                        }
                                                                        deleteFromDownloadQueue(arrayList6, true);
                                                                        final ArrayList arrayList27222222 = arrayList5;
                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList27222222);
                                                                            }
                                                                        });
                                                                        getFileLoader().deleteFiles(arrayList9, 0);
                                                                        i6 = 0;
                                                                        while (i6 < longSparseArray7.size()) {
                                                                        }
                                                                        arrayList13 = arrayList12;
                                                                        if (hashMap2.isEmpty()) {
                                                                        }
                                                                        size = longSparseArray2.size();
                                                                        SQLitePreparedStatement sQLitePreparedStatement8222222 = null;
                                                                        i7 = 0;
                                                                        SQLiteCursor sQLiteCursor18222222 = null;
                                                                        while (i7 < size) {
                                                                        }
                                                                        sQLitePreparedStatement6 = sQLitePreparedStatement8222222;
                                                                        list2 = list;
                                                                        sQLiteCursor9 = sQLiteCursor18222222;
                                                                        longSparseArray5 = longSparseArray7;
                                                                        String str2222222 = join3;
                                                                        if (!longSparseArray4.isEmpty()) {
                                                                        }
                                                                        SQLiteDatabase sQLiteDatabase5222222 = this.database;
                                                                        Locale locale2222222 = Locale.US;
                                                                        sQLiteDatabase5222222.executeFast(String.format(locale2222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str2222222)).stepThis().dispose();
                                                                        if (!arrayList8.isEmpty()) {
                                                                        }
                                                                        if (arrayList10 == null) {
                                                                        }
                                                                        arrayList14 = arrayList10;
                                                                        if (arrayList14 != null) {
                                                                        }
                                                                        arrayList15 = arrayList;
                                                                        if (!arrayList11.isEmpty()) {
                                                                        }
                                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                                        if (longSparseArray5.size() != 0) {
                                                                        }
                                                                        arrayList16 = arrayList23;
                                                                        updateWidgets(arrayList16);
                                                                        if (arrayList13 != null) {
                                                                        }
                                                                        if (list2 != null) {
                                                                        }
                                                                        sQLiteCursor10 = sQLiteCursor9;
                                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                                        sQLiteDatabase4 = this.database;
                                                                        if (sQLiteDatabase4 != null) {
                                                                        }
                                                                        if (sQLiteCursor10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        return arrayList16;
                                                                    } catch (Exception e22) {
                                                                        th5 = e22;
                                                                        th3 = th5;
                                                                        sQLitePreparedStatement = null;
                                                                        sQLiteCursor5 = sQLiteCursor2;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                                        th4 = th3;
                                                                        sQLiteCursor4 = sQLiteCursor5;
                                                                        checkSQLException(th4);
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 == null) {
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                j5 = longValue3;
                                                            }
                                                            j4 = MessageObject.getTopicId(this.currentAccount, TLdeserialize2, isForum(j5));
                                                        } catch (Exception e23) {
                                                            e = e23;
                                                            hashMap2 = hashMap;
                                                            checkSQLException(e);
                                                            sQLiteCursor2.dispose();
                                                            arrayList12 = arrayList29;
                                                            this.database.beginTransaction();
                                                            while (i5 < 4) {
                                                            }
                                                            deleteFromDownloadQueue(arrayList6, true);
                                                            final ArrayList arrayList272222222 = arrayList5;
                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList272222222);
                                                                }
                                                            });
                                                            getFileLoader().deleteFiles(arrayList9, 0);
                                                            i6 = 0;
                                                            while (i6 < longSparseArray7.size()) {
                                                            }
                                                            arrayList13 = arrayList12;
                                                            if (hashMap2.isEmpty()) {
                                                            }
                                                            size = longSparseArray2.size();
                                                            SQLitePreparedStatement sQLitePreparedStatement82222222 = null;
                                                            i7 = 0;
                                                            SQLiteCursor sQLiteCursor182222222 = null;
                                                            while (i7 < size) {
                                                            }
                                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222;
                                                            list2 = list;
                                                            sQLiteCursor9 = sQLiteCursor182222222;
                                                            longSparseArray5 = longSparseArray7;
                                                            String str22222222 = join3;
                                                            if (!longSparseArray4.isEmpty()) {
                                                            }
                                                            SQLiteDatabase sQLiteDatabase52222222 = this.database;
                                                            Locale locale22222222 = Locale.US;
                                                            sQLiteDatabase52222222.executeFast(String.format(locale22222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str22222222)).stepThis().dispose();
                                                            if (!arrayList8.isEmpty()) {
                                                            }
                                                            if (arrayList10 == null) {
                                                            }
                                                            arrayList14 = arrayList10;
                                                            if (arrayList14 != null) {
                                                            }
                                                            arrayList15 = arrayList;
                                                            if (!arrayList11.isEmpty()) {
                                                            }
                                                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                            if (longSparseArray5.size() != 0) {
                                                            }
                                                            arrayList16 = arrayList23;
                                                            updateWidgets(arrayList16);
                                                            if (arrayList13 != null) {
                                                            }
                                                            if (list2 != null) {
                                                            }
                                                            sQLiteCursor10 = sQLiteCursor9;
                                                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                            sQLiteDatabase4 = this.database;
                                                            if (sQLiteDatabase4 != null) {
                                                            }
                                                            if (sQLiteCursor10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            return arrayList16;
                                                        }
                                                    } catch (Exception e24) {
                                                        e = e24;
                                                        arrayList11 = arrayList30;
                                                        j3 = j2;
                                                        hashMap2 = hashMap;
                                                        checkSQLException(e);
                                                        sQLiteCursor2.dispose();
                                                        arrayList12 = arrayList29;
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList6, true);
                                                        final ArrayList arrayList2722222222 = arrayList5;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2722222222);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList9, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList13 = arrayList12;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement822222222 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor1822222222 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement822222222;
                                                        list2 = list;
                                                        sQLiteCursor9 = sQLiteCursor1822222222;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str222222222 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase522222222 = this.database;
                                                        Locale locale222222222 = Locale.US;
                                                        sQLiteDatabase522222222.executeFast(String.format(locale222222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str222222222)).stepThis().dispose();
                                                        if (!arrayList8.isEmpty()) {
                                                        }
                                                        if (arrayList10 == null) {
                                                        }
                                                        arrayList14 = arrayList10;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList11.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList23;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList13 != null) {
                                                        }
                                                        if (list2 != null) {
                                                        }
                                                        sQLiteCursor10 = sQLiteCursor9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    }
                                                } else {
                                                    arrayList11 = arrayList30;
                                                    j3 = j2;
                                                    j4 = 0;
                                                }
                                                if (j4 != 0) {
                                                    TopicKey of = TopicKey.of(j, j4);
                                                    int intValue3 = sQLiteCursor2.intValue(2);
                                                    hashMap2 = hashMap;
                                                    try {
                                                        int[] iArr = (int[]) hashMap2.get(of);
                                                        if (iArr == null) {
                                                            iArr = new int[3];
                                                            hashMap2.put(of, iArr);
                                                        }
                                                        iArr[2] = iArr[2] + 1;
                                                        if (sQLiteCursor2.intValue(3) == 0) {
                                                            if (intValue3 < 2) {
                                                                iArr[1] = iArr[1] + 1;
                                                            }
                                                            if (intValue3 == 0 || intValue3 == 2) {
                                                                iArr[0] = iArr[0] + 1;
                                                            }
                                                        }
                                                    } catch (Exception e25) {
                                                        e = e25;
                                                        checkSQLException(e);
                                                        sQLiteCursor2.dispose();
                                                        arrayList12 = arrayList29;
                                                        this.database.beginTransaction();
                                                        while (i5 < 4) {
                                                        }
                                                        deleteFromDownloadQueue(arrayList6, true);
                                                        final ArrayList arrayList27222222222 = arrayList5;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList27222222222);
                                                            }
                                                        });
                                                        getFileLoader().deleteFiles(arrayList9, 0);
                                                        i6 = 0;
                                                        while (i6 < longSparseArray7.size()) {
                                                        }
                                                        arrayList13 = arrayList12;
                                                        if (hashMap2.isEmpty()) {
                                                        }
                                                        size = longSparseArray2.size();
                                                        SQLitePreparedStatement sQLitePreparedStatement8222222222 = null;
                                                        i7 = 0;
                                                        SQLiteCursor sQLiteCursor18222222222 = null;
                                                        while (i7 < size) {
                                                        }
                                                        sQLitePreparedStatement6 = sQLitePreparedStatement8222222222;
                                                        list2 = list;
                                                        sQLiteCursor9 = sQLiteCursor18222222222;
                                                        longSparseArray5 = longSparseArray7;
                                                        String str2222222222 = join3;
                                                        if (!longSparseArray4.isEmpty()) {
                                                        }
                                                        SQLiteDatabase sQLiteDatabase5222222222 = this.database;
                                                        Locale locale2222222222 = Locale.US;
                                                        sQLiteDatabase5222222222.executeFast(String.format(locale2222222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str2222222222)).stepThis().dispose();
                                                        if (!arrayList8.isEmpty()) {
                                                        }
                                                        if (arrayList10 == null) {
                                                        }
                                                        arrayList14 = arrayList10;
                                                        if (arrayList14 != null) {
                                                        }
                                                        arrayList15 = arrayList;
                                                        if (!arrayList11.isEmpty()) {
                                                        }
                                                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                                                        if (longSparseArray5.size() != 0) {
                                                        }
                                                        arrayList16 = arrayList23;
                                                        updateWidgets(arrayList16);
                                                        if (arrayList13 != null) {
                                                        }
                                                        if (list2 != null) {
                                                        }
                                                        sQLiteCursor10 = sQLiteCursor9;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                                        sQLiteDatabase4 = this.database;
                                                        if (sQLiteDatabase4 != null) {
                                                        }
                                                        if (sQLiteCursor10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        return arrayList16;
                                                    }
                                                } else {
                                                    hashMap2 = hashMap;
                                                }
                                                hashMap = hashMap2;
                                                arrayList7 = arrayList11;
                                                j2 = j3;
                                                r13 = 0;
                                                i4 = 5;
                                            } catch (Exception e26) {
                                                e = e26;
                                                arrayList11 = arrayList30;
                                            }
                                        } catch (Exception e27) {
                                            e = e27;
                                            hashMap2 = hashMap;
                                            j3 = j2;
                                            arrayList11 = arrayList7;
                                        }
                                    } catch (Throwable th27) {
                                        th = th27;
                                        sQLiteCursor6 = sQLiteCursor2;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        throw th;
                                    }
                                }
                                hashMap2 = hashMap;
                                j3 = j2;
                                arrayList11 = arrayList7;
                                sQLiteCursor2.dispose();
                                arrayList12 = arrayList29;
                            } catch (Exception e28) {
                                e = e28;
                                th3 = e;
                                sQLitePreparedStatement = null;
                                sQLiteCursor5 = null;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                th4 = th3;
                                sQLiteCursor4 = sQLiteCursor5;
                                checkSQLException(th4);
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor4 != null) {
                                }
                                if (sQLitePreparedStatement2 == null) {
                                }
                            } catch (Throwable th28) {
                                th = th28;
                                th = th;
                                sQLitePreparedStatement3 = null;
                                sQLiteCursor6 = null;
                                sQLiteCursor4 = sQLiteCursor6;
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor4 != null) {
                                }
                                if (sQLitePreparedStatement3 != null) {
                                }
                                throw th;
                            }
                        } else {
                            hashMap2 = hashMap;
                            j3 = j2;
                            arrayList11 = arrayList7;
                            arrayList12 = null;
                        }
                        try {
                            this.database.beginTransaction();
                            for (i5 = 0; i5 < 4; i5++) {
                                try {
                                    if (i5 == 0) {
                                        if (j != 0) {
                                            try {
                                                sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?");
                                            } catch (Exception e29) {
                                                e = e29;
                                                th3 = e;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = null;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th29) {
                                                th = th29;
                                                th = th;
                                                sQLitePreparedStatement3 = null;
                                                sQLiteCursor6 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        } else {
                                            sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND is_channel = 0");
                                        }
                                    } else if (i5 == 1) {
                                        if (j != 0) {
                                            sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?");
                                        } else {
                                            sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?)");
                                        }
                                    } else if (i5 == 2) {
                                        sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE quick_replies_messages SET replydata = ? WHERE reply_to_message_id IN(?)");
                                    } else {
                                        if (j != 0) {
                                            sQLitePreparedStatement4 = getMessagesStorage().getDatabase().executeFast("UPDATE messages_topics SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?");
                                        }
                                    }
                                    TLRPC$TL_messageEmpty tLRPC$TL_messageEmpty = new TLRPC$TL_messageEmpty();
                                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messageEmpty.getObjectSize());
                                    tLRPC$TL_messageEmpty.serializeToStream(nativeByteBuffer);
                                    sQLitePreparedStatement4.requery();
                                    sQLitePreparedStatement4.bindByteBuffer(1, nativeByteBuffer);
                                    sQLitePreparedStatement4.bindString(2, join3);
                                    if (j != 0 && i5 != 2) {
                                        sQLitePreparedStatement4.bindLong(3, j);
                                    }
                                    sQLitePreparedStatement4.step();
                                    sQLitePreparedStatement4.dispose();
                                    this.database.commitTransaction();
                                    nativeByteBuffer.reuse();
                                } catch (Exception e30) {
                                    th6 = e30;
                                    th3 = th6;
                                    sQLitePreparedStatement = sQLitePreparedStatement4;
                                    sQLiteCursor5 = null;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                    th4 = th3;
                                    sQLiteCursor4 = sQLiteCursor5;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th30) {
                                    th = th30;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement4;
                                    sQLiteCursor6 = null;
                                    sQLiteCursor4 = sQLiteCursor6;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    throw th;
                                }
                            }
                            deleteFromDownloadQueue(arrayList6, true);
                            final ArrayList arrayList272222222222 = arrayList5;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList272222222222);
                                }
                            });
                            getFileLoader().deleteFiles(arrayList9, 0);
                            i6 = 0;
                            while (i6 < longSparseArray7.size()) {
                                long keyAt2 = longSparseArray7.keyAt(i6);
                                Integer[] numArr3 = (Integer[]) longSparseArray7.valueAt(i6);
                                ArrayList<TopicKey> arrayList32 = arrayList12;
                                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt2, new Object[0]);
                                try {
                                    if (queryFinalized.next()) {
                                        i19 = queryFinalized.intValue(0);
                                        i20 = queryFinalized.intValue(1);
                                    } else {
                                        i19 = 0;
                                        i20 = 0;
                                    }
                                    queryFinalized.dispose();
                                    try {
                                        ArrayList<Long> arrayList33 = arrayList23;
                                        arrayList33.add(Long.valueOf(keyAt2));
                                        arrayList23 = arrayList33;
                                        sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                        try {
                                            sQLitePreparedStatement.requery();
                                            sQLitePreparedStatement.bindInteger(1, Math.max(0, i19 - numArr3[0].intValue()));
                                            sQLitePreparedStatement.bindInteger(2, Math.max(0, i20 - numArr3[1].intValue()));
                                            sQLitePreparedStatement.bindLong(3, keyAt2);
                                            sQLitePreparedStatement.step();
                                            sQLitePreparedStatement.dispose();
                                            i6++;
                                            arrayList12 = arrayList32;
                                        } catch (Exception e31) {
                                            th3 = e31;
                                            sQLiteCursor5 = null;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            th4 = th3;
                                            sQLiteCursor4 = sQLiteCursor5;
                                            checkSQLException(th4);
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement2 == null) {
                                            }
                                        } catch (Throwable th31) {
                                            sQLitePreparedStatement3 = sQLitePreparedStatement;
                                            th = th31;
                                            sQLiteCursor6 = null;
                                            sQLiteCursor4 = sQLiteCursor6;
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e32) {
                                        th5 = e32;
                                        sQLiteCursor17 = null;
                                        sQLiteCursor2 = sQLiteCursor17;
                                        th3 = th5;
                                        sQLitePreparedStatement = null;
                                        sQLiteCursor5 = sQLiteCursor2;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        th4 = th3;
                                        sQLiteCursor4 = sQLiteCursor5;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 == null) {
                                        }
                                    } catch (Throwable th32) {
                                        th = th32;
                                        sQLiteCursor16 = null;
                                        sQLiteCursor6 = sQLiteCursor16;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e33) {
                                    sQLiteCursor17 = queryFinalized;
                                    th5 = e33;
                                } catch (Throwable th33) {
                                    sQLiteCursor16 = queryFinalized;
                                    th = th33;
                                }
                            }
                            arrayList13 = arrayList12;
                            if (hashMap2.isEmpty()) {
                                HashSet hashSet = null;
                                list = null;
                                for (TopicKey topicKey2 : hashMap2.keySet()) {
                                    LongSparseArray longSparseArray10 = longSparseArray3;
                                    try {
                                        SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_count, unread_mentions, total_messages_count FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey2.dialogId), Long.valueOf(topicKey2.topicId)), new Object[0]);
                                        try {
                                            if (queryFinalized2.next()) {
                                                i16 = queryFinalized2.intValue(0);
                                                i17 = queryFinalized2.intValue(1);
                                                i18 = queryFinalized2.intValue(2);
                                            } else {
                                                i16 = 0;
                                                i17 = 0;
                                                i18 = 0;
                                            }
                                            queryFinalized2.dispose();
                                            try {
                                                int[] iArr2 = (int[]) hashMap2.get(topicKey2);
                                                max = Math.max(0, i16 - iArr2[0]);
                                                max2 = Math.max(0, i17 - iArr2[1]);
                                                max3 = Math.max(0, i18 - iArr2[2]);
                                                if (BuildVars.DEBUG_PRIVATE_VERSION && max2 > 0) {
                                                    FileLog.d("(markMessagesAsDeletedInternal) new unread mentions " + max2 + " for dialog_id=" + topicKey2.dialogId + " topic_id=" + topicKey2.topicId);
                                                }
                                                executeFast = this.database.executeFast("UPDATE topics SET unread_count = ?, unread_mentions = ?, total_messages_count = ? WHERE did = ? AND topic_id = ?");
                                            } catch (Exception e34) {
                                                th13 = e34;
                                                queryFinalized2 = null;
                                                th3 = th13;
                                                sQLiteCursor2 = queryFinalized2;
                                                sQLitePreparedStatement = null;
                                                sQLiteCursor5 = sQLiteCursor2;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th34) {
                                                th = th34;
                                                queryFinalized2 = null;
                                                sQLiteCursor6 = queryFinalized2;
                                                sQLitePreparedStatement3 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                            try {
                                                executeFast.requery();
                                                executeFast.bindInteger(1, max);
                                                executeFast.bindInteger(2, max2);
                                                executeFast.bindLong(3, max3);
                                                executeFast.bindLong(4, topicKey2.dialogId);
                                                executeFast.bindLong(5, topicKey2.topicId);
                                                executeFast.step();
                                                executeFast.dispose();
                                                if (max == 0) {
                                                    if (hashSet == null) {
                                                        hashSet = new HashSet();
                                                    }
                                                    hashSet.add(Long.valueOf(topicKey2.dialogId));
                                                }
                                                TopicsController.TopicUpdate topicUpdate = new TopicsController.TopicUpdate();
                                                topicUpdate.dialogId = topicKey2.dialogId;
                                                topicUpdate.topicId = topicKey2.topicId;
                                                topicUpdate.unreadCount = max;
                                                topicUpdate.totalMessagesCount = max3;
                                                topicUpdate.onlyCounters = true;
                                                if (list == null) {
                                                    list = new ArrayList<>();
                                                }
                                                list.add(topicUpdate);
                                                longSparseArray3 = longSparseArray10;
                                            } catch (Exception e35) {
                                                th3 = e35;
                                                sQLitePreparedStatement = executeFast;
                                                sQLiteCursor5 = null;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th35) {
                                                th = th35;
                                                sQLitePreparedStatement3 = executeFast;
                                                sQLiteCursor6 = null;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e36) {
                                            th13 = e36;
                                        } catch (Throwable th36) {
                                            th = th36;
                                        }
                                    } catch (Exception e37) {
                                        e = e37;
                                        th3 = e;
                                        sQLitePreparedStatement = null;
                                        sQLiteCursor5 = null;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        th4 = th3;
                                        sQLiteCursor4 = sQLiteCursor5;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 == null) {
                                        }
                                    } catch (Throwable th37) {
                                        th = th37;
                                        th = th;
                                        sQLitePreparedStatement3 = null;
                                        sQLiteCursor6 = null;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        throw th;
                                    }
                                }
                                longSparseArray4 = longSparseArray3;
                                if (hashSet != null) {
                                    Iterator it = hashSet.iterator();
                                    while (it.hasNext()) {
                                        resetForumBadgeIfNeed(((Long) it.next()).longValue());
                                    }
                                }
                            } else {
                                longSparseArray4 = longSparseArray3;
                                list = null;
                            }
                            size = longSparseArray2.size();
                            SQLitePreparedStatement sQLitePreparedStatement82222222222 = null;
                            i7 = 0;
                            SQLiteCursor sQLiteCursor182222222222 = null;
                            while (i7 < size) {
                                LongSparseArray longSparseArray11 = longSparseArray2;
                                try {
                                    keyAt = longSparseArray11.keyAt(i7);
                                    charSequence = charSequence3;
                                    join = TextUtils.join(charSequence, (ArrayList) longSparseArray11.valueAt(i7));
                                    if (DialogObject.isEncryptedDialog(keyAt)) {
                                        i8 = size;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor9 = sQLiteCursor182222222222;
                                        longSparseArray2 = longSparseArray11;
                                    } else if (DialogObject.isChatDialog(keyAt)) {
                                        i8 = size;
                                        sQLiteCursor9 = sQLiteCursor182222222222;
                                        longSparseArray2 = longSparseArray11;
                                        try {
                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                            try {
                                                try {
                                                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(-keyAt), join)).stepThis().dispose();
                                                } catch (Exception e38) {
                                                    e = e38;
                                                    th10 = e;
                                                    sQLiteCursor12 = sQLiteCursor9;
                                                    th3 = th10;
                                                    sQLitePreparedStatement = sQLitePreparedStatement6;
                                                    sQLiteCursor5 = sQLiteCursor12;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    th4 = th3;
                                                    sQLiteCursor4 = sQLiteCursor5;
                                                    checkSQLException(th4);
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 == null) {
                                                    }
                                                } catch (Throwable th38) {
                                                    th9 = th38;
                                                    th = th9;
                                                    sQLiteCursor11 = sQLiteCursor9;
                                                    sQLiteCursor6 = sQLiteCursor11;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                    sQLiteCursor4 = sQLiteCursor6;
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement3 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } catch (Exception e39) {
                                                e = e39;
                                                th10 = e;
                                                sQLiteCursor12 = sQLiteCursor9;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor12;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th39) {
                                                th = th39;
                                                th = th;
                                                sQLiteCursor11 = sQLiteCursor9;
                                                sQLiteCursor6 = sQLiteCursor11;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Exception e40) {
                                            e = e40;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                            th10 = e;
                                            sQLiteCursor12 = sQLiteCursor9;
                                            th3 = th10;
                                            sQLitePreparedStatement = sQLitePreparedStatement6;
                                            sQLiteCursor5 = sQLiteCursor12;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            th4 = th3;
                                            sQLiteCursor4 = sQLiteCursor5;
                                            checkSQLException(th4);
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement2 == null) {
                                            }
                                        } catch (Throwable th40) {
                                            th9 = th40;
                                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                            th = th9;
                                            sQLiteCursor11 = sQLiteCursor9;
                                            sQLiteCursor6 = sQLiteCursor11;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                            sQLiteCursor4 = sQLiteCursor6;
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            throw th;
                                        }
                                    } else {
                                        i8 = size;
                                        sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor9 = sQLiteCursor182222222222;
                                        longSparseArray2 = longSparseArray11;
                                        try {
                                            this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", Long.valueOf(keyAt), join)).stepThis().dispose();
                                        } catch (Exception e41) {
                                            e = e41;
                                            th10 = e;
                                            sQLiteCursor12 = sQLiteCursor9;
                                            th3 = th10;
                                            sQLitePreparedStatement = sQLitePreparedStatement6;
                                            sQLiteCursor5 = sQLiteCursor12;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            th4 = th3;
                                            sQLiteCursor4 = sQLiteCursor5;
                                            checkSQLException(th4);
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement2 == null) {
                                            }
                                        } catch (Throwable th41) {
                                            th = th41;
                                            th = th;
                                            sQLiteCursor11 = sQLiteCursor9;
                                            sQLiteCursor6 = sQLiteCursor11;
                                            sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                            sQLiteCursor4 = sQLiteCursor6;
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor4 != null) {
                                            }
                                            if (sQLitePreparedStatement3 != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    sQLiteDatabase3 = this.database;
                                    locale = Locale.US;
                                } catch (Exception e42) {
                                    e = e42;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                    sQLiteCursor9 = sQLiteCursor182222222222;
                                } catch (Throwable th42) {
                                    th9 = th42;
                                    sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                                    sQLiteCursor9 = sQLiteCursor182222222222;
                                }
                                try {
                                    sQLiteDatabase3.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", Long.valueOf(keyAt), join)).stepThis().dispose();
                                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                    try {
                                        int intValue4 = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                        queryFinalized3.dispose();
                                        if (intValue4 > 0) {
                                            try {
                                            } catch (Exception e43) {
                                                th10 = e43;
                                            } catch (Throwable th43) {
                                                th = th43;
                                            }
                                            try {
                                                SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(locale, "SELECT count FROM chat_pinned_count WHERE uid = %d", Long.valueOf(keyAt)), new Object[0]);
                                                if (queryFinalized4.next()) {
                                                    int intValue5 = queryFinalized4.intValue(0);
                                                    sQLitePreparedStatement2 = this.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                                                    try {
                                                        sQLitePreparedStatement2.requery();
                                                        sQLitePreparedStatement2.bindInteger(1, Math.max(0, intValue5 - intValue4));
                                                        sQLitePreparedStatement2.bindLong(2, keyAt);
                                                        sQLitePreparedStatement2.step();
                                                        sQLitePreparedStatement2.dispose();
                                                    } catch (Exception e44) {
                                                        e2 = e44;
                                                        th3 = e2;
                                                        sQLiteCursor5 = queryFinalized4;
                                                        sQLitePreparedStatement = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                        th4 = th3;
                                                        sQLiteCursor4 = sQLiteCursor5;
                                                        checkSQLException(th4);
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 == null) {
                                                        }
                                                    } catch (Throwable th44) {
                                                        sQLiteCursor6 = queryFinalized4;
                                                        th = th44;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    }
                                                } else {
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement6;
                                                }
                                                try {
                                                    queryFinalized4.dispose();
                                                } catch (Exception e45) {
                                                    e2 = e45;
                                                    th3 = e2;
                                                    sQLiteCursor5 = queryFinalized4;
                                                    sQLitePreparedStatement = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                    th4 = th3;
                                                    sQLiteCursor4 = sQLiteCursor5;
                                                    checkSQLException(th4);
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 == null) {
                                                    }
                                                } catch (Throwable th45) {
                                                    sQLiteCursor6 = queryFinalized4;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    th = th45;
                                                }
                                            } catch (Exception e46) {
                                                th10 = e46;
                                                sQLiteCursor12 = null;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor12;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th46) {
                                                th = th46;
                                                sQLiteCursor11 = null;
                                                sQLiteCursor6 = sQLiteCursor11;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        } else {
                                            sQLitePreparedStatement2 = sQLitePreparedStatement6;
                                        }
                                        try {
                                            try {
                                                try {
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                    try {
                                                        this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                        try {
                                                            this.database.executeFast(String.format(locale, "DELETE FROM polls_v2 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                            try {
                                                                this.database.executeFast(String.format(locale, "DELETE FROM bot_keyboard WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                                try {
                                                                    this.database.executeFast(String.format(locale, "DELETE FROM bot_keyboard_topics WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt))).stepThis().dispose();
                                                                } catch (Throwable th47) {
                                                                    th = th47;
                                                                }
                                                            } catch (Throwable th48) {
                                                                th = th48;
                                                            }
                                                        } catch (Throwable th49) {
                                                            th = th49;
                                                        }
                                                    } catch (Throwable th50) {
                                                        th = th50;
                                                    }
                                                } catch (Throwable th51) {
                                                    th = th51;
                                                }
                                            } catch (Throwable th52) {
                                                th = th52;
                                            }
                                        } catch (Exception e47) {
                                            th4 = e47;
                                            sQLiteCursor4 = null;
                                        }
                                    } catch (Exception e48) {
                                        sQLiteCursor12 = queryFinalized3;
                                        th10 = e48;
                                    } catch (Throwable th53) {
                                        sQLiteCursor11 = queryFinalized3;
                                        th = th53;
                                    }
                                } catch (Exception e49) {
                                    e = e49;
                                    th10 = e;
                                    sQLiteCursor12 = sQLiteCursor9;
                                    th3 = th10;
                                    sQLitePreparedStatement = sQLitePreparedStatement6;
                                    sQLiteCursor5 = sQLiteCursor12;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement;
                                    th4 = th3;
                                    sQLiteCursor4 = sQLiteCursor5;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th54) {
                                    th = th54;
                                    th = th;
                                    sQLiteCursor11 = sQLiteCursor9;
                                    sQLiteCursor6 = sQLiteCursor11;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                    sQLiteCursor4 = sQLiteCursor6;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    throw th;
                                }
                                try {
                                    try {
                                        try {
                                            try {
                                                if (arrayList8.isEmpty()) {
                                                    try {
                                                        int i22 = 0;
                                                        sQLiteCursor7 = this.database.queryFinalized(String.format(locale, "SELECT uid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d", join3, Long.valueOf(keyAt)), new Object[0]);
                                                        SparseArray sparseArray2 = null;
                                                        while (sQLiteCursor7.next()) {
                                                            try {
                                                                long longValue4 = sQLiteCursor7.longValue(i22);
                                                                int intValue6 = sQLiteCursor7.intValue(1);
                                                                if (sparseArray2 == null) {
                                                                    sparseArray2 = new SparseArray();
                                                                }
                                                                LongSparseArray longSparseArray12 = (LongSparseArray) sparseArray2.get(intValue6);
                                                                if (longSparseArray12 == null) {
                                                                    longSparseArray12 = new LongSparseArray();
                                                                    num2 = 0;
                                                                    sparseArray2.put(intValue6, longSparseArray12);
                                                                } else {
                                                                    num2 = (Integer) longSparseArray12.get(longValue4);
                                                                }
                                                                if (num2 == null) {
                                                                    num2 = 0;
                                                                }
                                                                longSparseArray12.put(longValue4, Integer.valueOf(num2.intValue() + 1));
                                                                i22 = 0;
                                                            } catch (Exception e50) {
                                                                e3 = e50;
                                                                th8 = e3;
                                                                sQLiteCursor4 = sQLiteCursor7;
                                                                th4 = th8;
                                                                checkSQLException(th4);
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 == null) {
                                                                }
                                                            } catch (Throwable th55) {
                                                                th7 = th55;
                                                                sQLiteCursor8 = sQLiteCursor7;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                sQLiteCursor4 = sQLiteCursor8;
                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                th = th7;
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor4 != null) {
                                                                }
                                                                if (sQLitePreparedStatement3 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        }
                                                        sQLiteCursor7.dispose();
                                                        if (sparseArray2 != null) {
                                                            try {
                                                                sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)");
                                                                try {
                                                                    int size3 = sparseArray2.size();
                                                                    sQLiteCursor13 = null;
                                                                    int i23 = 0;
                                                                    while (i23 < size3) {
                                                                        try {
                                                                            int keyAt3 = sparseArray2.keyAt(i23);
                                                                            LongSparseArray longSparseArray13 = (LongSparseArray) sparseArray2.valueAt(i23);
                                                                            SparseArray sparseArray3 = sparseArray2;
                                                                            int size4 = longSparseArray13.size();
                                                                            int i24 = size3;
                                                                            int i25 = 0;
                                                                            while (i25 < size4) {
                                                                                int i26 = size4;
                                                                                int i27 = i7;
                                                                                try {
                                                                                    long keyAt4 = longSparseArray13.keyAt(i25);
                                                                                    sQLiteCursor15 = sQLiteCursor13;
                                                                                    try {
                                                                                        CharSequence charSequence4 = charSequence;
                                                                                        List<TopicsController.TopicUpdate> list4 = list;
                                                                                        LongSparseArray longSparseArray14 = longSparseArray7;
                                                                                        String str3 = join3;
                                                                                        try {
                                                                                            sQLiteCursor13 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", Long.valueOf(keyAt4), Integer.valueOf(keyAt3)), new Object[0]);
                                                                                            if (sQLiteCursor13.next()) {
                                                                                                i14 = sQLiteCursor13.intValue(0);
                                                                                                i15 = sQLiteCursor13.intValue(1);
                                                                                            } else {
                                                                                                i14 = -1;
                                                                                                i15 = 0;
                                                                                            }
                                                                                            sQLiteCursor13.dispose();
                                                                                            if (i14 != -1) {
                                                                                                sQLitePreparedStatement5.requery();
                                                                                                int max4 = Math.max(0, i14 - ((Integer) longSparseArray13.valueAt(i25)).intValue());
                                                                                                sQLitePreparedStatement5.bindLong(1, keyAt4);
                                                                                                sQLitePreparedStatement5.bindInteger(2, keyAt3);
                                                                                                sQLitePreparedStatement5.bindInteger(3, max4);
                                                                                                sQLitePreparedStatement5.bindInteger(4, i15);
                                                                                                sQLitePreparedStatement5.step();
                                                                                            }
                                                                                            i25++;
                                                                                            i7 = i27;
                                                                                            size4 = i26;
                                                                                            charSequence = charSequence4;
                                                                                            list = list4;
                                                                                            longSparseArray7 = longSparseArray14;
                                                                                            join3 = str3;
                                                                                        } catch (Exception e51) {
                                                                                            th12 = e51;
                                                                                            sQLiteCursor13 = sQLiteCursor15;
                                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                            th4 = th12;
                                                                                            sQLiteCursor4 = sQLiteCursor13;
                                                                                            checkSQLException(th4);
                                                                                            sQLiteDatabase = this.database;
                                                                                            if (sQLiteDatabase != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement2 == null) {
                                                                                            }
                                                                                        } catch (Throwable th56) {
                                                                                            th11 = th56;
                                                                                            sQLiteCursor13 = sQLiteCursor15;
                                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                            th = th11;
                                                                                            sQLiteCursor4 = sQLiteCursor13;
                                                                                            sQLiteDatabase2 = this.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                            }
                                                                                            if (sQLiteCursor4 != null) {
                                                                                            }
                                                                                            if (sQLitePreparedStatement3 != null) {
                                                                                            }
                                                                                            throw th;
                                                                                        }
                                                                                    } catch (Exception e52) {
                                                                                        e = e52;
                                                                                        th8 = e;
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                        sQLiteCursor7 = sQLiteCursor15;
                                                                                        sQLiteCursor4 = sQLiteCursor7;
                                                                                        th4 = th8;
                                                                                        checkSQLException(th4);
                                                                                        sQLiteDatabase = this.database;
                                                                                        if (sQLiteDatabase != null) {
                                                                                        }
                                                                                        if (sQLiteCursor4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement2 == null) {
                                                                                        }
                                                                                    } catch (Throwable th57) {
                                                                                        th = th57;
                                                                                        th7 = th;
                                                                                        sQLiteCursor8 = sQLiteCursor15;
                                                                                        sQLiteCursor4 = sQLiteCursor8;
                                                                                        sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                        th = th7;
                                                                                        sQLiteDatabase2 = this.database;
                                                                                        if (sQLiteDatabase2 != null) {
                                                                                        }
                                                                                        if (sQLiteCursor4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement3 != null) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Exception e53) {
                                                                                    e = e53;
                                                                                    sQLiteCursor15 = sQLiteCursor13;
                                                                                } catch (Throwable th58) {
                                                                                    th = th58;
                                                                                    sQLiteCursor15 = sQLiteCursor13;
                                                                                }
                                                                            }
                                                                            i23++;
                                                                            sparseArray2 = sparseArray3;
                                                                            size3 = i24;
                                                                        } catch (Exception e54) {
                                                                            th8 = e54;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                            sQLiteCursor7 = sQLiteCursor13;
                                                                            sQLiteCursor4 = sQLiteCursor7;
                                                                            th4 = th8;
                                                                            checkSQLException(th4);
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLiteCursor4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 == null) {
                                                                            }
                                                                        } catch (Throwable th59) {
                                                                            th7 = th59;
                                                                            sQLiteCursor8 = sQLiteCursor13;
                                                                        }
                                                                    }
                                                                    i9 = i7;
                                                                    list3 = list;
                                                                    longSparseArray6 = longSparseArray7;
                                                                    str = join3;
                                                                    charSequence2 = charSequence;
                                                                    sQLitePreparedStatement5.dispose();
                                                                    sQLitePreparedStatement2 = null;
                                                                    if (arrayList11.isEmpty()) {
                                                                        j6 = keyAt;
                                                                        sQLiteCursor182222222222 = sQLiteCursor13;
                                                                        sQLitePreparedStatement82222222222 = sQLitePreparedStatement2;
                                                                    } else {
                                                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                        Locale locale3 = Locale.US;
                                                                        Long valueOf = Long.valueOf(keyAt);
                                                                        try {
                                                                            objArr = new Object[2];
                                                                            i10 = 0;
                                                                        } catch (Exception e55) {
                                                                            th12 = e55;
                                                                        } catch (Throwable th60) {
                                                                            th11 = th60;
                                                                        }
                                                                        try {
                                                                            objArr[0] = str;
                                                                            objArr[1] = valueOf;
                                                                            SQLiteCursor queryFinalized5 = sQLiteDatabase6.queryFinalized(String.format(locale3, "SELECT uid, topic_id, type FROM media_topics WHERE mid IN(%s) AND uid = %d", objArr), new Object[0]);
                                                                            SparseArray sparseArray4 = null;
                                                                            while (queryFinalized5.next()) {
                                                                                long longValue5 = queryFinalized5.longValue(i10);
                                                                                int intValue7 = queryFinalized5.intValue(1);
                                                                                int intValue8 = queryFinalized5.intValue(2);
                                                                                TopicKey of2 = TopicKey.of(longValue5, intValue7);
                                                                                if (sparseArray4 == null) {
                                                                                    sparseArray4 = new SparseArray();
                                                                                }
                                                                                HashMap hashMap4 = (HashMap) sparseArray4.get(intValue8);
                                                                                if (hashMap4 == null) {
                                                                                    hashMap4 = new HashMap();
                                                                                    num = 0;
                                                                                    sparseArray4.put(intValue8, hashMap4);
                                                                                } else {
                                                                                    num = (Integer) hashMap4.get(of2);
                                                                                }
                                                                                if (num == null) {
                                                                                    num = 0;
                                                                                }
                                                                                hashMap4.put(of2, Integer.valueOf(num.intValue() + 1));
                                                                                i10 = 0;
                                                                            }
                                                                            queryFinalized5.dispose();
                                                                            if (sparseArray4 != null) {
                                                                                sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO media_counts_topics VALUES(?, ?, ?, ?, ?)");
                                                                                int size5 = sparseArray4.size();
                                                                                SQLiteCursor sQLiteCursor19 = null;
                                                                                int i28 = 0;
                                                                                while (i28 < size5) {
                                                                                    try {
                                                                                        int keyAt5 = sparseArray4.keyAt(i28);
                                                                                        HashMap hashMap5 = (HashMap) sparseArray4.valueAt(i28);
                                                                                        Iterator it2 = hashMap5.keySet().iterator();
                                                                                        while (it2.hasNext()) {
                                                                                            try {
                                                                                                topicKey = (TopicKey) it2.next();
                                                                                                sparseArray = sparseArray4;
                                                                                                i11 = size5;
                                                                                                sQLiteCursor14 = sQLiteCursor19;
                                                                                            } catch (Exception e56) {
                                                                                                e = e56;
                                                                                                sQLiteCursor14 = sQLiteCursor19;
                                                                                            } catch (Throwable th61) {
                                                                                                th = th61;
                                                                                                sQLiteCursor14 = sQLiteCursor19;
                                                                                            }
                                                                                            try {
                                                                                                long j9 = keyAt;
                                                                                                Iterator it3 = it2;
                                                                                                try {
                                                                                                    sQLiteCursor19 = this.database.queryFinalized(String.format(Locale.US, "SELECT count, old FROM media_counts_topics WHERE uid = %d AND topic_id = %d AND type = %d LIMIT 1", Long.valueOf(topicKey.dialogId), Long.valueOf(topicKey.topicId), Integer.valueOf(keyAt5)), new Object[0]);
                                                                                                    if (sQLiteCursor19.next()) {
                                                                                                        i13 = sQLiteCursor19.intValue(0);
                                                                                                        i12 = sQLiteCursor19.intValue(1);
                                                                                                    } else {
                                                                                                        i12 = 0;
                                                                                                        i13 = -1;
                                                                                                    }
                                                                                                    sQLiteCursor19.dispose();
                                                                                                    if (i13 != -1) {
                                                                                                        sQLitePreparedStatement5.requery();
                                                                                                        int max5 = Math.max(0, i13 - ((Integer) hashMap5.get(topicKey)).intValue());
                                                                                                        sQLitePreparedStatement5.bindLong(1, topicKey.dialogId);
                                                                                                        sQLitePreparedStatement5.bindLong(2, topicKey.topicId);
                                                                                                        sQLitePreparedStatement5.bindInteger(3, keyAt5);
                                                                                                        sQLitePreparedStatement5.bindInteger(4, max5);
                                                                                                        sQLitePreparedStatement5.bindInteger(5, i12);
                                                                                                        sQLitePreparedStatement5.step();
                                                                                                    }
                                                                                                    sparseArray4 = sparseArray;
                                                                                                    size5 = i11;
                                                                                                    it2 = it3;
                                                                                                    keyAt = j9;
                                                                                                } catch (Exception e57) {
                                                                                                    th12 = e57;
                                                                                                    sQLiteCursor13 = sQLiteCursor14;
                                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                                    th4 = th12;
                                                                                                    sQLiteCursor4 = sQLiteCursor13;
                                                                                                    checkSQLException(th4);
                                                                                                    sQLiteDatabase = this.database;
                                                                                                    if (sQLiteDatabase != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement2 == null) {
                                                                                                    }
                                                                                                } catch (Throwable th62) {
                                                                                                    th11 = th62;
                                                                                                    sQLiteCursor13 = sQLiteCursor14;
                                                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                                    th = th11;
                                                                                                    sQLiteCursor4 = sQLiteCursor13;
                                                                                                    sQLiteDatabase2 = this.database;
                                                                                                    if (sQLiteDatabase2 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement3 != null) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            } catch (Exception e58) {
                                                                                                e = e58;
                                                                                                th8 = e;
                                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                                sQLiteCursor7 = sQLiteCursor14;
                                                                                                sQLiteCursor4 = sQLiteCursor7;
                                                                                                th4 = th8;
                                                                                                checkSQLException(th4);
                                                                                                sQLiteDatabase = this.database;
                                                                                                if (sQLiteDatabase != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement2 == null) {
                                                                                                }
                                                                                            } catch (Throwable th63) {
                                                                                                th = th63;
                                                                                                th7 = th;
                                                                                                sQLiteCursor8 = sQLiteCursor14;
                                                                                                sQLiteCursor4 = sQLiteCursor8;
                                                                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                                                th = th7;
                                                                                                sQLiteDatabase2 = this.database;
                                                                                                if (sQLiteDatabase2 != null) {
                                                                                                }
                                                                                                if (sQLiteCursor4 != null) {
                                                                                                }
                                                                                                if (sQLitePreparedStatement3 != null) {
                                                                                                }
                                                                                                throw th;
                                                                                            }
                                                                                        }
                                                                                        i28++;
                                                                                        sparseArray4 = sparseArray4;
                                                                                        size5 = size5;
                                                                                        keyAt = keyAt;
                                                                                    } catch (Exception e59) {
                                                                                        th8 = e59;
                                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                                        sQLiteCursor7 = sQLiteCursor19;
                                                                                    } catch (Throwable th64) {
                                                                                        th7 = th64;
                                                                                        sQLiteCursor8 = sQLiteCursor19;
                                                                                    }
                                                                                }
                                                                                j6 = keyAt;
                                                                                sQLitePreparedStatement5.dispose();
                                                                                sQLiteCursor182222222222 = sQLiteCursor19;
                                                                                sQLitePreparedStatement82222222222 = null;
                                                                            } else {
                                                                                j6 = keyAt;
                                                                                sQLitePreparedStatement82222222222 = sQLitePreparedStatement2;
                                                                                sQLiteCursor182222222222 = null;
                                                                            }
                                                                        } catch (Exception e60) {
                                                                            th12 = e60;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                            th4 = th12;
                                                                            sQLiteCursor4 = sQLiteCursor13;
                                                                            checkSQLException(th4);
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLiteCursor4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 == null) {
                                                                            }
                                                                        } catch (Throwable th65) {
                                                                            th11 = th65;
                                                                            sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                                            sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                            th = th11;
                                                                            sQLiteCursor4 = sQLiteCursor13;
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLiteCursor4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement3 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    }
                                                                    SQLiteDatabase sQLiteDatabase7 = this.database;
                                                                    Locale locale4 = Locale.US;
                                                                    sQLiteDatabase7.executeFast(String.format(locale4, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                                    this.database.executeFast(String.format(locale4, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                                    i7 = i9 + 1;
                                                                    size = i8;
                                                                    charSequence3 = charSequence2;
                                                                    list = list3;
                                                                    longSparseArray7 = longSparseArray6;
                                                                    join3 = str;
                                                                } catch (Exception e61) {
                                                                    th8 = e61;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                                    sQLiteCursor7 = null;
                                                                    sQLiteCursor4 = sQLiteCursor7;
                                                                    th4 = th8;
                                                                    checkSQLException(th4);
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLiteCursor4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 == null) {
                                                                    }
                                                                } catch (Throwable th66) {
                                                                    th7 = th66;
                                                                    sQLiteCursor8 = null;
                                                                    sQLiteCursor4 = sQLiteCursor8;
                                                                    sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                                    th = th7;
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLiteCursor4 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement3 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e62) {
                                                                th8 = e62;
                                                            } catch (Throwable th67) {
                                                                th7 = th67;
                                                                sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                                            }
                                                        }
                                                    } catch (Throwable th68) {
                                                        th = th68;
                                                        th = th;
                                                        sQLiteCursor3 = null;
                                                        sQLiteCursor4 = sQLiteCursor3;
                                                        sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement3 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                }
                                                this.database.executeFast(String.format(locale4, "DELETE FROM media_topics WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                                i7 = i9 + 1;
                                                size = i8;
                                                charSequence3 = charSequence2;
                                                list = list3;
                                                longSparseArray7 = longSparseArray6;
                                                join3 = str;
                                            } catch (Exception e63) {
                                                e = e63;
                                                sQLiteCursor13 = sQLiteCursor182222222222;
                                                SQLitePreparedStatement sQLitePreparedStatement9 = sQLitePreparedStatement82222222222;
                                                th12 = e;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement5;
                                                th4 = th12;
                                                sQLiteCursor4 = sQLiteCursor13;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th69) {
                                                th = th69;
                                                sQLiteCursor13 = sQLiteCursor182222222222;
                                                SQLitePreparedStatement sQLitePreparedStatement10 = sQLitePreparedStatement82222222222;
                                                th11 = th;
                                                sQLitePreparedStatement5 = sQLitePreparedStatement10;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                                th = th11;
                                                sQLiteCursor4 = sQLiteCursor13;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                            sQLiteDatabase7.executeFast(String.format(locale4, "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d", str, Long.valueOf(j6))).stepThis().dispose();
                                        } catch (Exception e64) {
                                            e = e64;
                                        } catch (Throwable th70) {
                                            th = th70;
                                        }
                                        SQLiteDatabase sQLiteDatabase72 = this.database;
                                        Locale locale42 = Locale.US;
                                    } catch (Exception e65) {
                                        e3 = e65;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor7 = sQLiteCursor182222222222;
                                        th8 = e3;
                                        sQLiteCursor4 = sQLiteCursor7;
                                        th4 = th8;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 == null) {
                                        }
                                    } catch (Throwable th71) {
                                        sQLitePreparedStatement5 = sQLitePreparedStatement82222222222;
                                        sQLiteCursor8 = sQLiteCursor182222222222;
                                        th7 = th71;
                                        sQLiteCursor4 = sQLiteCursor8;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                        th = th7;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        throw th;
                                    }
                                    if (arrayList11.isEmpty()) {
                                    }
                                } catch (Exception e66) {
                                    th8 = e66;
                                    sQLiteCursor7 = sQLiteCursor13;
                                    sQLiteCursor4 = sQLiteCursor7;
                                    th4 = th8;
                                    checkSQLException(th4);
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement2 == null) {
                                    }
                                } catch (Throwable th72) {
                                    th7 = th72;
                                    sQLiteCursor8 = sQLiteCursor13;
                                    sQLitePreparedStatement5 = sQLitePreparedStatement2;
                                    sQLiteCursor4 = sQLiteCursor8;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement5;
                                    th = th7;
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor4 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    throw th;
                                }
                                i9 = i7;
                                list3 = list;
                                longSparseArray6 = longSparseArray7;
                                str = join3;
                                charSequence2 = charSequence;
                                sQLiteCursor13 = null;
                            }
                            sQLitePreparedStatement6 = sQLitePreparedStatement82222222222;
                            list2 = list;
                            sQLiteCursor9 = sQLiteCursor182222222222;
                            longSparseArray5 = longSparseArray7;
                            String str22222222222 = join3;
                            if (!longSparseArray4.isEmpty()) {
                                final LongSparseArray longSparseArray15 = longSparseArray4;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda189
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$205(longSparseArray15);
                                    }
                                });
                            }
                            SQLiteDatabase sQLiteDatabase52222222222 = this.database;
                            Locale locale22222222222 = Locale.US;
                            sQLiteDatabase52222222222.executeFast(String.format(locale22222222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str22222222222)).stepThis().dispose();
                            if (!arrayList8.isEmpty()) {
                                if (j == 0) {
                                    this.database.executeFast("UPDATE media_counts_v2 SET old = 1 WHERE 1").stepThis().dispose();
                                } else {
                                    try {
                                        this.database.executeFast(String.format(locale22222222222, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
                                    } catch (Exception e67) {
                                        e = e67;
                                        th10 = e;
                                        sQLiteCursor12 = sQLiteCursor9;
                                        th3 = th10;
                                        sQLitePreparedStatement = sQLitePreparedStatement6;
                                        sQLiteCursor5 = sQLiteCursor12;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement;
                                        th4 = th3;
                                        sQLiteCursor4 = sQLiteCursor5;
                                        checkSQLException(th4);
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement2 == null) {
                                        }
                                    } catch (Throwable th73) {
                                        th = th73;
                                        th = th;
                                        sQLiteCursor11 = sQLiteCursor9;
                                        sQLiteCursor6 = sQLiteCursor11;
                                        sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                        sQLiteCursor4 = sQLiteCursor6;
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor4 != null) {
                                        }
                                        if (sQLitePreparedStatement3 != null) {
                                        }
                                        throw th;
                                    }
                                }
                            }
                            if (arrayList10 == null && !arrayList10.isEmpty()) {
                                final ArrayList arrayList34 = arrayList10;
                                final long j10 = j3;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda190
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$206(arrayList34, j10);
                                    }
                                });
                            } else {
                                arrayList14 = arrayList10;
                                if (arrayList14 != null && arrayList14.isEmpty()) {
                                    arrayList15 = arrayList;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda191
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$markMessagesAsDeletedInternal$207(arrayList15);
                                        }
                                    });
                                    if (!arrayList11.isEmpty()) {
                                        if (j == 0) {
                                            this.database.executeFast("UPDATE media_counts_topics SET old = 1 WHERE 1").stepThis().dispose();
                                        } else {
                                            try {
                                                this.database.executeFast(String.format(locale22222222222, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
                                            } catch (Exception e68) {
                                                e = e68;
                                                th10 = e;
                                                sQLiteCursor12 = sQLiteCursor9;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor12;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th74) {
                                                th = th74;
                                                th = th;
                                                sQLiteCursor11 = sQLiteCursor9;
                                                sQLiteCursor6 = sQLiteCursor11;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                    }
                                    getMediaDataController().clearBotKeyboard(null, arrayList15);
                                    if (longSparseArray5.size() != 0) {
                                        resetAllUnreadCounters(false);
                                    }
                                    arrayList16 = arrayList23;
                                    updateWidgets(arrayList16);
                                    if (arrayList13 != null) {
                                        int i29 = 0;
                                        while (i29 < arrayList13.size()) {
                                            ArrayList<TopicKey> arrayList35 = arrayList13;
                                            TopicKey topicKey3 = arrayList35.get(i29);
                                            try {
                                                this.database.executeFast(String.format(Locale.US, "DELETE FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(topicKey3.dialogId), Long.valueOf(topicKey3.topicId))).stepThis().dispose();
                                                i29++;
                                                arrayList13 = arrayList35;
                                            } catch (Exception e69) {
                                                e = e69;
                                                th10 = e;
                                                sQLiteCursor12 = sQLiteCursor9;
                                                th3 = th10;
                                                sQLitePreparedStatement = sQLitePreparedStatement6;
                                                sQLiteCursor5 = sQLiteCursor12;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                th4 = th3;
                                                sQLiteCursor4 = sQLiteCursor5;
                                                checkSQLException(th4);
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement2 == null) {
                                                }
                                            } catch (Throwable th75) {
                                                th = th75;
                                                th = th;
                                                sQLiteCursor11 = sQLiteCursor9;
                                                sQLiteCursor6 = sQLiteCursor11;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement6;
                                                sQLiteCursor4 = sQLiteCursor6;
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor4 != null) {
                                                }
                                                if (sQLitePreparedStatement3 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        getMessagesController().getTopicsController().onTopicsDeletedServerSide(arrayList13);
                                    }
                                    if (list2 != null) {
                                        getMessagesController().getTopicsController().processUpdate(list2);
                                    }
                                    sQLiteCursor10 = sQLiteCursor9;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement6;
                                    sQLiteDatabase4 = this.database;
                                    if (sQLiteDatabase4 != null) {
                                        sQLiteDatabase4.commitTransaction();
                                    }
                                    if (sQLiteCursor10 != null) {
                                        sQLiteCursor10.dispose();
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                        sQLitePreparedStatement7.dispose();
                                    }
                                    return arrayList16;
                                }
                            }
                            arrayList15 = arrayList;
                            if (!arrayList11.isEmpty()) {
                            }
                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                            if (longSparseArray5.size() != 0) {
                            }
                            arrayList16 = arrayList23;
                            updateWidgets(arrayList16);
                            if (arrayList13 != null) {
                            }
                            if (list2 != null) {
                            }
                            sQLiteCursor10 = sQLiteCursor9;
                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                            sQLiteDatabase4 = this.database;
                            if (sQLiteDatabase4 != null) {
                            }
                            if (sQLiteCursor10 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            return arrayList16;
                        } catch (Exception e70) {
                            th6 = e70;
                            sQLitePreparedStatement4 = null;
                        } catch (Throwable th76) {
                            th = th76;
                            sQLitePreparedStatement4 = null;
                        }
                    } catch (Throwable th77) {
                        th = th77;
                    }
                } else {
                    arrayList4 = arrayList20;
                    longSparseArray = longSparseArray8;
                    arrayList5 = arrayList22;
                    arrayList6 = arrayList24;
                    try {
                        i3 = 0;
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0", join3), new Object[0]);
                        while (sQLiteCursor.next()) {
                        }
                        arrayList7 = arrayList4;
                        arrayList8 = arrayList19;
                        arrayList9 = arrayList21;
                        longSparseArray2 = longSparseArray9;
                        arrayList10 = arrayList3;
                        longSparseArray3 = longSparseArray;
                        i4 = 5;
                        j2 = clientUserId;
                        sQLiteCursor.dispose();
                        if (j >= 0) {
                        }
                        this.database.beginTransaction();
                        while (i5 < 4) {
                        }
                        deleteFromDownloadQueue(arrayList6, true);
                        final ArrayList arrayList2722222222222 = arrayList5;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda188
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$204(arrayList2722222222222);
                            }
                        });
                        getFileLoader().deleteFiles(arrayList9, 0);
                        i6 = 0;
                        while (i6 < longSparseArray7.size()) {
                        }
                        arrayList13 = arrayList12;
                        if (hashMap2.isEmpty()) {
                        }
                        size = longSparseArray2.size();
                        SQLitePreparedStatement sQLitePreparedStatement822222222222 = null;
                        i7 = 0;
                        SQLiteCursor sQLiteCursor1822222222222 = null;
                        while (i7 < size) {
                        }
                        sQLitePreparedStatement6 = sQLitePreparedStatement822222222222;
                        list2 = list;
                        sQLiteCursor9 = sQLiteCursor1822222222222;
                        longSparseArray5 = longSparseArray7;
                        String str222222222222 = join3;
                        if (!longSparseArray4.isEmpty()) {
                        }
                        SQLiteDatabase sQLiteDatabase522222222222 = this.database;
                        Locale locale222222222222 = Locale.US;
                        sQLiteDatabase522222222222.executeFast(String.format(locale222222222222, "DELETE FROM messages_seq WHERE mid IN(%s)", str222222222222)).stepThis().dispose();
                        if (!arrayList8.isEmpty()) {
                        }
                        if (arrayList10 == null) {
                        }
                        arrayList14 = arrayList10;
                        if (arrayList14 != null) {
                            arrayList15 = arrayList;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda191
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesStorage.this.lambda$markMessagesAsDeletedInternal$207(arrayList15);
                                }
                            });
                            if (!arrayList11.isEmpty()) {
                            }
                            getMediaDataController().clearBotKeyboard(null, arrayList15);
                            if (longSparseArray5.size() != 0) {
                            }
                            arrayList16 = arrayList23;
                            updateWidgets(arrayList16);
                            if (arrayList13 != null) {
                            }
                            if (list2 != null) {
                            }
                            sQLiteCursor10 = sQLiteCursor9;
                            sQLitePreparedStatement7 = sQLitePreparedStatement6;
                            sQLiteDatabase4 = this.database;
                            if (sQLiteDatabase4 != null) {
                            }
                            if (sQLiteCursor10 != null) {
                            }
                            if (sQLitePreparedStatement7 != null) {
                            }
                            return arrayList16;
                        }
                        arrayList15 = arrayList;
                        if (!arrayList11.isEmpty()) {
                        }
                        getMediaDataController().clearBotKeyboard(null, arrayList15);
                        if (longSparseArray5.size() != 0) {
                        }
                        arrayList16 = arrayList23;
                        updateWidgets(arrayList16);
                        if (arrayList13 != null) {
                        }
                        if (list2 != null) {
                        }
                        sQLiteCursor10 = sQLiteCursor9;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                        }
                        if (sQLiteCursor10 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        return arrayList16;
                    } catch (Throwable th78) {
                        th = th78;
                    }
                }
                th = th;
                sQLiteCursor = null;
                sQLiteCursor6 = sQLiteCursor;
                sQLitePreparedStatement3 = null;
                sQLiteCursor4 = sQLiteCursor6;
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                    sQLiteDatabase2.commitTransaction();
                }
                if (sQLiteCursor4 != null) {
                    sQLiteCursor4.dispose();
                }
                if (sQLitePreparedStatement3 != null) {
                    sQLitePreparedStatement3.dispose();
                }
                throw th;
            }
            hashMap = hashMap3;
            arrayList3 = new ArrayList();
            if (j == 0) {
            }
            th = th;
            sQLiteCursor = null;
            sQLiteCursor6 = sQLiteCursor;
            sQLitePreparedStatement3 = null;
            sQLiteCursor4 = sQLiteCursor6;
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLiteCursor4 != null) {
            }
            if (sQLitePreparedStatement3 != null) {
            }
            throw th;
        }
        arrayList16 = arrayList2;
        sQLiteCursor10 = null;
        sQLitePreparedStatement7 = null;
        sQLiteDatabase4 = this.database;
        if (sQLiteDatabase4 != null) {
        }
        if (sQLiteCursor10 != null) {
        }
        if (sQLitePreparedStatement7 != null) {
        }
        return arrayList16;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$204(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$205(LongSparseArray longSparseArray) {
        getMessagesController().getSavedMessagesController().updateDeleted(longSparseArray);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$206(ArrayList arrayList, long j) {
        HashSet<Long> hashSet = new HashSet<>();
        Iterator it = arrayList.iterator();
        boolean z = false;
        while (it.hasNext()) {
            TLRPC$Message tLRPC$Message = (TLRPC$Message) it.next();
            if (getMessagesController().processDeletedReactionTags(tLRPC$Message)) {
                hashSet.add(Long.valueOf(MessageObject.getSavedDialogId(j, tLRPC$Message)));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$207(ArrayList arrayList) {
        HashSet<Long> hashSet = new HashSet<>();
        long[] jArr = new long[1];
        boolean z = false;
        for (int i = 0; i < arrayList.size(); i++) {
            if (getMediaDataController().processDeletedMessage(((Integer) arrayList.get(i)).intValue(), jArr)) {
                hashSet.add(Long.valueOf(jArr[0]));
                z = true;
            }
        }
        if (z) {
            getMessagesController().updateSavedReactionTags(hashSet);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:210:0x0426  */
    /* JADX WARN: Removed duplicated region for block: B:212:0x042b  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x0430  */
    /* JADX WARN: Removed duplicated region for block: B:220:0x043a  */
    /* JADX WARN: Removed duplicated region for block: B:222:0x043f  */
    /* JADX WARN: Removed duplicated region for block: B:224:0x0444  */
    /* JADX WARN: Removed duplicated region for block: B:272:? A[RETURN, SYNTHETIC] */
    /* renamed from: updateDialogsWithDeletedMessagesInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$updateDialogsWithDeletedMessages$208(long j, long j2, ArrayList<Integer> arrayList, ArrayList<Long> arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        SQLiteCursor sQLiteCursor2;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        String str;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        SQLiteCursor sQLiteCursor3;
        TLRPC$TL_dialog tLRPC$TL_dialog;
        String str2;
        SQLitePreparedStatement executeFast;
        long j3 = j2;
        try {
            ArrayList arrayList3 = new ArrayList();
            String str3 = ",";
            if (!arrayList.isEmpty()) {
                try {
                    try {
                        if (j3 != 0) {
                            arrayList3.add(Long.valueOf(-j3));
                            executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ?)) WHERE did = ?");
                        } else {
                            if (j == 0) {
                                try {
                                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s) AND flags = 0", TextUtils.join(",", arrayList)), new Object[0]);
                                    while (sQLiteCursor.next()) {
                                        try {
                                            arrayList3.add(Long.valueOf(sQLiteCursor.longValue(0)));
                                        } catch (Exception e) {
                                            e = e;
                                            sQLitePreparedStatement = null;
                                            try {
                                                checkSQLException(e);
                                                sQLiteDatabase2 = this.database;
                                                if (sQLiteDatabase2 != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement != null) {
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                                sQLiteDatabase = this.database;
                                                if (sQLiteDatabase != null) {
                                                }
                                                if (sQLiteCursor != null) {
                                                }
                                                if (sQLitePreparedStatement2 != null) {
                                                }
                                                throw th;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            sQLitePreparedStatement = null;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    sQLiteCursor.dispose();
                                } catch (Throwable th3) {
                                    th = th3;
                                    sQLiteCursor = null;
                                    sQLitePreparedStatement2 = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                arrayList3.add(Long.valueOf(j));
                            }
                            executeFast = this.database.executeFast("UPDATE dialogs SET (last_mid, last_mid_group) = (SELECT mid, group_id FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ? AND date != 0)) WHERE did = ?");
                        }
                        try {
                            this.database.beginTransaction();
                            for (int i = 0; i < arrayList3.size(); i++) {
                                long longValue = ((Long) arrayList3.get(i)).longValue();
                                executeFast.requery();
                                executeFast.bindLong(1, longValue);
                                executeFast.bindLong(2, longValue);
                                executeFast.bindLong(3, longValue);
                                executeFast.step();
                            }
                            executeFast.dispose();
                        } catch (Exception e2) {
                            e = e2;
                        } catch (Throwable th4) {
                            th = th4;
                        }
                    } catch (Exception e3) {
                        e = e3;
                        sQLiteCursor = null;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    sQLiteCursor = null;
                }
                try {
                    this.database.commitTransaction();
                } catch (Exception e4) {
                    e = e4;
                    executeFast = null;
                    sQLitePreparedStatement = executeFast;
                    sQLiteCursor = null;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    executeFast = null;
                    sQLitePreparedStatement2 = executeFast;
                    sQLiteCursor = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            } else {
                arrayList3.add(Long.valueOf(-j3));
            }
            if (arrayList2 != null) {
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    try {
                        Long l = arrayList2.get(i2);
                        if (!arrayList3.contains(l)) {
                            arrayList3.add(l);
                        }
                    } catch (Exception e5) {
                        e = e5;
                        sQLiteCursor2 = null;
                        sQLitePreparedStatement = null;
                        sQLiteCursor = sQLiteCursor2;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                    }
                }
            }
            try {
                String join = TextUtils.join(",", arrayList3);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
                ArrayList<TLRPC$EncryptedChat> arrayList4 = new ArrayList<>();
                ArrayList<Long> arrayList5 = new ArrayList<>();
                ArrayList arrayList6 = new ArrayList();
                ArrayList arrayList7 = new ArrayList();
                LongSparseArray longSparseArray = new LongSparseArray();
                int i3 = 0;
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL WHERE d.did IN(%s)", join), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        try {
                            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs3 = tLRPC$TL_messages_dialogs2;
                            try {
                                long longValue2 = queryFinalized.longValue(i3);
                                if (DialogObject.isFolderDialogId(longValue2)) {
                                    TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
                                    tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                    if (!queryFinalized.isNull(16)) {
                                        NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(16);
                                        if (byteBufferValue2 != null) {
                                            tLRPC$TL_dialogFolder.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                            byteBufferValue2.reuse();
                                            tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                        } else {
                                            TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                            tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
                                            tLRPC$TL_folder.id = queryFinalized.intValue(15);
                                            tLRPC$TL_dialog = tLRPC$TL_dialogFolder;
                                        }
                                    }
                                } else {
                                    tLRPC$TL_dialog = new TLRPC$TL_dialog();
                                }
                                tLRPC$TL_dialog.id = longValue2;
                                tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
                                tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(10);
                                tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(11);
                                tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
                                tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(13);
                                tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
                                tLRPC$TL_dialog.pts = queryFinalized.intValue(9);
                                tLRPC$TL_dialog.flags = j3 == 0 ? 0 : 1;
                                int intValue = queryFinalized.intValue(12);
                                tLRPC$TL_dialog.pinnedNum = intValue;
                                tLRPC$TL_dialog.pinned = intValue != 0;
                                int intValue2 = queryFinalized.intValue(14);
                                tLRPC$TL_dialog.unread_mark = (intValue2 & 1) != 0;
                                tLRPC$TL_dialog.view_forum_as_messages = (intValue2 & 64) != 0;
                                tLRPC$TL_dialog.folder_id = queryFinalized.intValue(15);
                                tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(17);
                                long longValue3 = queryFinalized.longValue(18);
                                if (longValue3 != 0) {
                                    longSparseArray.put(longValue2, Long.valueOf(longValue3));
                                }
                                tLRPC$TL_dialog.ttl_period = queryFinalized.intValue(19);
                                tLRPC$TL_messages_dialogs3.dialogs.add(tLRPC$TL_dialog);
                                NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(4);
                                if (byteBufferValue3 != null) {
                                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                    str2 = str3;
                                    TLdeserialize.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                                    byteBufferValue3.reuse();
                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                                    TLdeserialize.id = queryFinalized.intValue(6);
                                    TLdeserialize.send_state = queryFinalized.intValue(7);
                                    int intValue3 = queryFinalized.intValue(8);
                                    if (intValue3 != 0) {
                                        tLRPC$TL_dialog.last_message_date = intValue3;
                                    }
                                    TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                                    tLRPC$TL_messages_dialogs3.messages.add(TLdeserialize);
                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList5, arrayList6, null);
                                } else {
                                    str2 = str3;
                                }
                                if (!DialogObject.isEncryptedDialog(longValue2) && tLRPC$TL_dialog.read_inbox_max_id > tLRPC$TL_dialog.top_message) {
                                    tLRPC$TL_dialog.read_inbox_max_id = 0;
                                }
                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                    int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                    if (!arrayList7.contains(Integer.valueOf(encryptedChatId))) {
                                        arrayList7.add(Integer.valueOf(encryptedChatId));
                                    }
                                } else if (DialogObject.isUserDialog(longValue2)) {
                                    if (!arrayList5.contains(Long.valueOf(longValue2))) {
                                        arrayList5.add(Long.valueOf(longValue2));
                                    }
                                } else {
                                    long j4 = -longValue2;
                                    if (!arrayList6.contains(Long.valueOf(j4))) {
                                        arrayList6.add(Long.valueOf(j4));
                                    }
                                }
                                j3 = j2;
                                tLRPC$TL_messages_dialogs2 = tLRPC$TL_messages_dialogs3;
                                str3 = str2;
                                i3 = 0;
                            } catch (Throwable th7) {
                                th = th7;
                                sQLiteCursor = sQLiteCursor3;
                                sQLitePreparedStatement2 = null;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                    sQLiteDatabase.commitTransaction();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                if (sQLitePreparedStatement2 != null) {
                                    sQLitePreparedStatement2.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e6) {
                            e = e6;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = sQLiteCursor2;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                                sQLiteDatabase2.commitTransaction();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            if (sQLitePreparedStatement != null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        }
                    } catch (Throwable th8) {
                        th = th8;
                        sQLitePreparedStatement = null;
                    }
                }
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs2;
                String str4 = str3;
                queryFinalized.dispose();
                if (longSparseArray.isEmpty()) {
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                    sQLitePreparedStatement = null;
                    sQLiteCursor2 = null;
                } else {
                    StringBuilder sb = new StringBuilder();
                    int i4 = 0;
                    while (i4 < longSparseArray.size()) {
                        sb.append("uid = ");
                        sb.append(longSparseArray.keyAt(i4));
                        sb.append(" AND group_id = ");
                        sb.append(longSparseArray.valueAt(i4));
                        i4++;
                        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs5 = tLRPC$TL_messages_dialogs4;
                        if (i4 < longSparseArray.size()) {
                            sb.append(" OR ");
                        }
                        tLRPC$TL_messages_dialogs4 = tLRPC$TL_messages_dialogs5;
                    }
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs4;
                    int i5 = 0;
                    sQLiteCursor2 = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, group_id FROM messages_v2 WHERE %s", sb), new Object[0]);
                    while (sQLiteCursor2.next()) {
                        long longValue4 = sQLiteCursor2.longValue(i5);
                        int i6 = 0;
                        while (true) {
                            if (i6 >= tLRPC$TL_messages_dialogs.dialogs.size()) {
                                tLRPC$Dialog = null;
                                break;
                            }
                            tLRPC$Dialog = tLRPC$TL_messages_dialogs.dialogs.get(i6);
                            if (tLRPC$Dialog != null && tLRPC$Dialog.id == longValue4) {
                                break;
                            }
                            i6++;
                        }
                        if (tLRPC$Dialog != null && (byteBufferValue = sQLiteCursor2.byteBufferValue(1)) != null) {
                            TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            MessageObject.setUnreadFlags(TLdeserialize2, sQLiteCursor2.intValue(2));
                            TLdeserialize2.id = sQLiteCursor2.intValue(3);
                            TLdeserialize2.send_state = sQLiteCursor2.intValue(4);
                            int intValue4 = sQLiteCursor2.intValue(5);
                            if (intValue4 != 0) {
                                tLRPC$Dialog.last_message_date = intValue4;
                            }
                            TLdeserialize2.dialog_id = tLRPC$Dialog.id;
                            tLRPC$TL_messages_dialogs.messages.add(TLdeserialize2);
                            sQLitePreparedStatement = null;
                            try {
                                addUsersAndChatsFromMessage(TLdeserialize2, arrayList5, arrayList6, null);
                            } catch (Exception e7) {
                                e = e7;
                                sQLiteCursor = sQLiteCursor2;
                                checkSQLException(e);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                            } catch (Throwable th9) {
                                th = th9;
                                sQLiteCursor = sQLiteCursor2;
                                sQLitePreparedStatement2 = sQLitePreparedStatement;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                if (sQLitePreparedStatement2 != null) {
                                }
                                throw th;
                            }
                        }
                        i5 = 0;
                    }
                    sQLitePreparedStatement = null;
                    sQLiteCursor2.dispose();
                }
                if (arrayList7.isEmpty()) {
                    str = str4;
                } else {
                    str = str4;
                    getEncryptedChatsInternal(TextUtils.join(str, arrayList7), arrayList4, arrayList5);
                }
                if (!arrayList6.isEmpty()) {
                    getChatsInternal(TextUtils.join(str, arrayList6), tLRPC$TL_messages_dialogs.chats);
                }
                if (!arrayList5.isEmpty()) {
                    getUsersInternal(arrayList5, tLRPC$TL_messages_dialogs.users);
                }
                getMessagesController().getTopicsController().updateTopicsWithDeletedMessages(j, arrayList);
                if (!tLRPC$TL_messages_dialogs.dialogs.isEmpty() || !arrayList4.isEmpty()) {
                    getMessagesController().processDialogsUpdate(tLRPC$TL_messages_dialogs, arrayList4, true);
                }
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
            } catch (Exception e8) {
                e = e8;
                sQLitePreparedStatement = null;
                sQLiteCursor2 = null;
            } catch (Throwable th10) {
                th = th10;
                sQLiteCursor = null;
                sQLitePreparedStatement2 = null;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                throw th;
            }
        } catch (Exception e9) {
            e = e9;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        } catch (Throwable th11) {
            th = th11;
            sQLitePreparedStatement = null;
            sQLiteCursor = null;
        }
    }

    public void updateDialogsWithDeletedMessages(final long j, final long j2, final ArrayList<Integer> arrayList, final ArrayList<Long> arrayList2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda68
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
                }
            });
        } else {
            lambda$updateDialogsWithDeletedMessages$208(j, j2, arrayList, arrayList2);
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final ArrayList<Integer> arrayList, boolean z, final boolean z2, final int i, final int i2) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda133
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$209(j, arrayList, z2, i, i2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:119:0x0330  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0335  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0346  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x034b  */
    /* JADX WARN: Removed duplicated region for block: B:168:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x010b A[Catch: all -> 0x0263, Exception -> 0x0265, TRY_LEAVE, TryCatch #1 {all -> 0x0263, blocks: (B:43:0x00f1, B:44:0x0105, B:46:0x010b, B:70:0x01a2, B:81:0x020e), top: B:134:0x00f1 }] */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01fd A[Catch: all -> 0x0202, Exception -> 0x0205, TryCatch #21 {Exception -> 0x0205, all -> 0x0202, blocks: (B:71:0x01f7, B:73:0x01fd, B:79:0x0209), top: B:148:0x01f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0208  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x020e A[Catch: all -> 0x0263, Exception -> 0x0265, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0263, blocks: (B:43:0x00f1, B:44:0x0105, B:46:0x010b, B:70:0x01a2, B:81:0x020e), top: B:134:0x00f1 }] */
    /* renamed from: markMessagesAsDeletedInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Long> lambda$markMessagesAsDeleted$211(long j, int i, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLiteCursor sQLiteCursor3;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteCursor sQLiteCursor4;
        SQLitePreparedStatement sQLitePreparedStatement3;
        ArrayList<Pair<Long, Integer>> arrayList;
        int i2;
        int i3;
        ArrayList<Long> arrayList2;
        Locale locale;
        SQLiteCursor queryFinalized;
        int intValue;
        int i4;
        int i5;
        int i6 = 2;
        boolean z2 = false;
        try {
            ArrayList<Long> arrayList3 = new ArrayList<>();
            LongSparseArray longSparseArray = new LongSparseArray();
            ArrayList<File> arrayList4 = new ArrayList<>();
            final ArrayList<String> arrayList5 = new ArrayList<>();
            ArrayList<Pair<Long, Integer>> arrayList6 = new ArrayList<>();
            long clientUserId = getUserConfig().getClientUserId();
            ArrayList<Long> arrayList7 = arrayList3;
            long j2 = -j;
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i)), new Object[0]);
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                long longValue = sQLiteCursor.longValue(z2 ? 1 : 0);
                                if (longValue != clientUserId) {
                                    int intValue2 = sQLiteCursor.intValue(i6);
                                    if (sQLiteCursor.intValue(3) == 0) {
                                        Integer[] numArr = (Integer[]) longSparseArray.get(longValue);
                                        if (numArr == null) {
                                            Integer valueOf = Integer.valueOf(z2 ? 1 : 0);
                                            Integer valueOf2 = Integer.valueOf(z2 ? 1 : 0);
                                            Integer[] numArr2 = new Integer[i6];
                                            numArr2[z2 ? 1 : 0] = valueOf;
                                            numArr2[1] = valueOf2;
                                            longSparseArray.put(longValue, numArr2);
                                            numArr = numArr2;
                                        }
                                        if (intValue2 < i6) {
                                            numArr[1] = Integer.valueOf(numArr[1].intValue() + 1);
                                        }
                                        if (intValue2 == 0 || intValue2 == i6) {
                                            numArr[z2 ? 1 : 0] = Integer.valueOf(numArr[z2 ? 1 : 0].intValue() + 1);
                                        }
                                    }
                                }
                                if (DialogObject.isEncryptedDialog(longValue) || z) {
                                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(1);
                                    if (byteBufferValue != null) {
                                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z2), z2);
                                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                        byteBufferValue.reuse();
                                        i2 = 3;
                                        arrayList = arrayList6;
                                        try {
                                            addFilesToDelete(TLdeserialize, arrayList4, arrayList6, arrayList5, false);
                                            arrayList6 = arrayList;
                                            i6 = 2;
                                        } catch (Exception e) {
                                            e = e;
                                            try {
                                                checkSQLException(e);
                                                sQLiteCursor.dispose();
                                                deleteFromDownloadQueue(arrayList, true);
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList5);
                                                    }
                                                });
                                                getFileLoader().deleteFiles(arrayList4, 0);
                                                i3 = 0;
                                                while (i3 < longSparseArray.size()) {
                                                }
                                                arrayList2 = arrayList7;
                                                SQLiteDatabase sQLiteDatabase = this.database;
                                                locale = Locale.US;
                                                sQLiteDatabase.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                                                this.database.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                                                queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                                                if (!queryFinalized.next()) {
                                                }
                                                queryFinalized.dispose();
                                                if (intValue > 0) {
                                                }
                                                try {
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                                                    this.database.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                                                    updateWidgets(arrayList2);
                                                    return arrayList2;
                                                } catch (Throwable th) {
                                                    th = th;
                                                    sQLitePreparedStatement3 = null;
                                                    sQLiteCursor4 = null;
                                                    SQLiteCursor sQLiteCursor5 = sQLiteCursor4;
                                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                                    sQLiteCursor2 = sQLiteCursor5;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            } catch (Exception e2) {
                                                e = e2;
                                                sQLiteCursor3 = sQLiteCursor;
                                                sQLitePreparedStatement2 = null;
                                                try {
                                                    checkSQLException(e);
                                                    if (sQLiteCursor3 != null) {
                                                        sQLiteCursor3.dispose();
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                        sQLitePreparedStatement2.dispose();
                                                        return null;
                                                    }
                                                    return null;
                                                } catch (Throwable th2) {
                                                    th = th2;
                                                    sQLitePreparedStatement3 = sQLitePreparedStatement2;
                                                    sQLiteCursor4 = sQLiteCursor3;
                                                    SQLiteCursor sQLiteCursor52 = sQLiteCursor4;
                                                    sQLitePreparedStatement = sQLitePreparedStatement3;
                                                    sQLiteCursor2 = sQLiteCursor52;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                        }
                                    }
                                    z2 = false;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                sQLiteCursor2 = sQLiteCursor;
                                sQLitePreparedStatement = null;
                                if (sQLiteCursor2 != null) {
                                }
                                if (sQLitePreparedStatement != null) {
                                }
                                throw th;
                            }
                        } catch (Exception e3) {
                            e = e3;
                            arrayList = arrayList6;
                            i2 = 3;
                        }
                    }
                    arrayList = arrayList6;
                    i2 = 3;
                    sQLiteCursor.dispose();
                    try {
                        deleteFromDownloadQueue(arrayList, true);
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda83
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.this.lambda$markMessagesAsDeletedInternal$210(arrayList5);
                            }
                        });
                        getFileLoader().deleteFiles(arrayList4, 0);
                        i3 = 0;
                        while (i3 < longSparseArray.size()) {
                            long keyAt = longSparseArray.keyAt(i3);
                            Integer[] numArr3 = (Integer[]) longSparseArray.valueAt(i3);
                            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt, new Object[0]);
                            try {
                                if (queryFinalized2.next()) {
                                    i4 = queryFinalized2.intValue(0);
                                    i5 = queryFinalized2.intValue(1);
                                } else {
                                    i4 = 0;
                                    i5 = 0;
                                }
                                queryFinalized2.dispose();
                                try {
                                    ArrayList<Long> arrayList8 = arrayList7;
                                    arrayList8.add(Long.valueOf(keyAt));
                                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                                    try {
                                        executeFast.requery();
                                        executeFast.bindInteger(1, Math.max(0, i4 - numArr3[0].intValue()));
                                        executeFast.bindInteger(2, Math.max(0, i5 - numArr3[1].intValue()));
                                        executeFast.bindLong(i2, keyAt);
                                        executeFast.step();
                                        executeFast.dispose();
                                        i3++;
                                        arrayList7 = arrayList8;
                                    } catch (Exception e4) {
                                        e = e4;
                                        sQLitePreparedStatement2 = executeFast;
                                        sQLiteCursor3 = null;
                                        checkSQLException(e);
                                        if (sQLiteCursor3 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLitePreparedStatement = executeFast;
                                        sQLiteCursor2 = null;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        if (sQLitePreparedStatement != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLiteCursor3 = null;
                                    sQLitePreparedStatement2 = null;
                                    checkSQLException(e);
                                    if (sQLiteCursor3 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLiteCursor2 = null;
                                    sQLitePreparedStatement = null;
                                    if (sQLiteCursor2 != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e6) {
                                e = e6;
                            } catch (Throwable th6) {
                                th = th6;
                            }
                        }
                        arrayList2 = arrayList7;
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        locale = Locale.US;
                        sQLiteDatabase2.executeFast(String.format(locale, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        this.database.executeFast(String.format(locale, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j), Integer.valueOf(i))).stepThis().dispose();
                        queryFinalized = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    } catch (Throwable th7) {
                        th = th7;
                        sQLiteCursor2 = null;
                    }
                } catch (Throwable th8) {
                    th = th8;
                    sQLiteCursor = null;
                    sQLiteCursor2 = sQLiteCursor;
                    sQLitePreparedStatement = null;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Exception e7) {
                e = e7;
                sQLitePreparedStatement2 = null;
            }
            try {
                intValue = !queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                queryFinalized.dispose();
                if (intValue > 0) {
                    sQLiteCursor3 = this.database.queryFinalized(String.format(locale, "SELECT count FROM chat_pinned_count WHERE uid = %d", Long.valueOf(j2)), new Object[0]);
                    if (sQLiteCursor3.next()) {
                        int intValue3 = sQLiteCursor3.intValue(0);
                        sQLitePreparedStatement2 = this.database.executeFast("UPDATE chat_pinned_count SET count = ? WHERE uid = ?");
                        try {
                            sQLitePreparedStatement2.requery();
                            sQLitePreparedStatement2.bindInteger(1, Math.max(0, intValue3 - intValue));
                            sQLitePreparedStatement2.bindLong(2, j2);
                            sQLitePreparedStatement2.step();
                            sQLitePreparedStatement2.dispose();
                        } catch (Exception e8) {
                            e = e8;
                            checkSQLException(e);
                            if (sQLiteCursor3 != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                        } catch (Throwable th9) {
                            th = th9;
                            sQLitePreparedStatement = sQLitePreparedStatement2;
                            sQLiteCursor2 = sQLiteCursor3;
                            if (sQLiteCursor2 != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            throw th;
                        }
                    }
                    sQLiteCursor3.dispose();
                }
                this.database.executeFast(String.format(locale, "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "DELETE FROM messages_topics WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d", Long.valueOf(j2), Integer.valueOf(i))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                this.database.executeFast(String.format(locale, "UPDATE media_counts_topics SET old = 1 WHERE uid = %d", Long.valueOf(j2))).stepThis().dispose();
                updateWidgets(arrayList2);
                return arrayList2;
            } catch (Exception e9) {
                e = e9;
                sQLiteCursor3 = queryFinalized;
                sQLitePreparedStatement2 = null;
                checkSQLException(e);
                if (sQLiteCursor3 != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
            } catch (Throwable th10) {
                th = th10;
                sQLiteCursor2 = queryFinalized;
                sQLitePreparedStatement = null;
                if (sQLiteCursor2 != null) {
                }
                if (sQLitePreparedStatement != null) {
                }
                throw th;
            }
        } catch (Exception e10) {
            e = e10;
            sQLiteCursor = null;
        } catch (Throwable th11) {
            th = th11;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$210(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public ArrayList<Long> markMessagesAsDeleted(final long j, final int i, boolean z, final boolean z2) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda96
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeleted$211(j, i, z2);
                }
            });
            return null;
        }
        return lambda$markMessagesAsDeleted$211(j, i, z2);
    }

    private void fixUnsupportedMedia(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message == null) {
            return;
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported_old) {
            if (tLRPC$MessageMedia.bytes.length == 0) {
                tLRPC$MessageMedia.bytes = Utilities.intToBytes(NotificationCenter.didUpdatePremiumGiftFieldIcon);
            }
        } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported) {
            TLRPC$TL_messageMediaUnsupported_old tLRPC$TL_messageMediaUnsupported_old = new TLRPC$TL_messageMediaUnsupported_old();
            tLRPC$Message.media = tLRPC$TL_messageMediaUnsupported_old;
            tLRPC$TL_messageMediaUnsupported_old.bytes = Utilities.intToBytes(NotificationCenter.didUpdatePremiumGiftFieldIcon);
            tLRPC$Message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
        }
    }

    private void doneHolesInTable(String str, long j, int i, long j2) throws Exception {
        SQLitePreparedStatement executeFast;
        int i2 = 2;
        if (j2 != 0) {
            if (i == 0) {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            } else {
                SQLiteDatabase sQLiteDatabase2 = this.database;
                Locale locale2 = Locale.US;
                sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = 0", Long.valueOf(j), Long.valueOf(j2))).stepThis().dispose();
            }
        } else if (i == 0) {
            SQLiteDatabase sQLiteDatabase3 = this.database;
            Locale locale3 = Locale.US;
            sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d", Long.valueOf(j))).stepThis().dispose();
        } else {
            SQLiteDatabase sQLiteDatabase4 = this.database;
            Locale locale4 = Locale.US;
            sQLiteDatabase4.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = 0", Long.valueOf(j))).stepThis().dispose();
        }
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                if (j2 != 0) {
                    SQLiteDatabase sQLiteDatabase5 = this.database;
                    executeFast = sQLiteDatabase5.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                } else {
                    SQLiteDatabase sQLiteDatabase6 = this.database;
                    executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                }
                sQLitePreparedStatement = executeFast;
                sQLitePreparedStatement.requery();
                sQLitePreparedStatement.bindLong(1, j);
                if (j2 != 0) {
                    sQLitePreparedStatement.bindLong(2, j2);
                    i2 = 3;
                }
                sQLitePreparedStatement.bindInteger(i2, 1);
                sQLitePreparedStatement.bindInteger(i2 + 1, 1);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                throw e;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:15:0x00a7 A[Catch: all -> 0x00af, Exception -> 0x00b2, TRY_ENTER, TryCatch #7 {Exception -> 0x00b2, all -> 0x00af, blocks: (B:15:0x00a7, B:21:0x00b5), top: B:78:0x00a5 }] */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00b5 A[Catch: all -> 0x00af, Exception -> 0x00b2, TRY_LEAVE, TryCatch #7 {Exception -> 0x00b2, all -> 0x00af, blocks: (B:15:0x00a7, B:21:0x00b5), top: B:78:0x00a5 }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00f1  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01ab A[Catch: all -> 0x01b3, Exception -> 0x01b6, TRY_ENTER, TryCatch #8 {Exception -> 0x01b6, all -> 0x01b3, blocks: (B:53:0x01ab, B:59:0x01b9), top: B:79:0x01a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:59:0x01b9 A[Catch: all -> 0x01b3, Exception -> 0x01b6, TRY_LEAVE, TryCatch #8 {Exception -> 0x01b6, all -> 0x01b3, blocks: (B:53:0x01ab, B:59:0x01b9), top: B:79:0x01a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x01cc A[Catch: all -> 0x01d2, Exception -> 0x01d4, TryCatch #1 {all -> 0x01d2, blocks: (B:61:0x01c0, B:63:0x01cc, B:69:0x01d7, B:72:0x01f0), top: B:79:0x01a9 }] */
    /* JADX WARN: Removed duplicated region for block: B:68:0x01d6  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01f3  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x00c0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:87:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doneHolesInMedia(long j, int i, int i2, long j2) throws Exception {
        Object obj;
        long j3;
        Object obj2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement executeFast;
        int i3;
        Object obj3;
        long j4;
        Object obj4;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        int i4;
        if (i2 == -1) {
            try {
                try {
                    if (j2 != 0) {
                        if (i == 0) {
                            SQLiteDatabase sQLiteDatabase = this.database;
                            Locale locale = Locale.US;
                            Object[] objArr = {Long.valueOf(j), Long.valueOf(j2)};
                            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d", objArr)).stepThis().dispose();
                            j4 = 0;
                            obj4 = objArr;
                            if (j2 == j4) {
                                executeFast2 = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                            } else {
                                executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                            }
                            sQLitePreparedStatement3 = executeFast2;
                            for (int i5 = 0; i5 < 8; i5++) {
                                try {
                                    sQLitePreparedStatement3.requery();
                                    sQLitePreparedStatement3.bindLong(1, j);
                                    if (j2 != 0) {
                                        sQLitePreparedStatement3.bindLong(2, j2);
                                        i4 = 3;
                                    } else {
                                        i4 = 2;
                                    }
                                    sQLitePreparedStatement3.bindInteger(i4, i5);
                                    sQLitePreparedStatement3.bindInteger(i4 + 1, 1);
                                    sQLitePreparedStatement3.bindInteger(i4 + 2, 1);
                                    sQLitePreparedStatement3.step();
                                } catch (Exception e) {
                                    e = e;
                                    throw e;
                                }
                            }
                            if (sQLitePreparedStatement3 == null) {
                                sQLitePreparedStatement3.dispose();
                                return;
                            }
                            return;
                        }
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale2 = Locale.US;
                        Long valueOf = Long.valueOf(j);
                        Object valueOf2 = Long.valueOf(j2);
                        sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND start = 0", valueOf, valueOf2)).stepThis().dispose();
                        obj3 = valueOf2;
                    } else if (i == 0) {
                        SQLiteDatabase sQLiteDatabase3 = this.database;
                        Locale locale3 = Locale.US;
                        Object[] objArr2 = {Long.valueOf(j)};
                        sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM media_holes_v2 WHERE uid = %d", objArr2)).stepThis().dispose();
                        obj3 = objArr2;
                    } else {
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        Locale locale4 = Locale.US;
                        Object[] objArr3 = {Long.valueOf(j)};
                        sQLiteDatabase4.executeFast(String.format(locale4, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", objArr3)).stepThis().dispose();
                        obj3 = objArr3;
                    }
                    if (j2 == j4) {
                    }
                    sQLitePreparedStatement3 = executeFast2;
                    while (i5 < 8) {
                    }
                    if (sQLitePreparedStatement3 == null) {
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLitePreparedStatement2 = obj4;
                    if (sQLitePreparedStatement2 != 0) {
                        sQLitePreparedStatement2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
            } catch (Throwable th2) {
                th = th2;
                sQLitePreparedStatement2 = 0;
                if (sQLitePreparedStatement2 != 0) {
                }
                throw th;
            }
            j4 = 0;
            obj4 = obj3;
        } else {
            try {
                try {
                    try {
                        if (j2 != 0) {
                            if (i == 0) {
                                SQLiteDatabase sQLiteDatabase5 = this.database;
                                Locale locale5 = Locale.US;
                                Object valueOf3 = Long.valueOf(j);
                                sQLiteDatabase5.executeFast(String.format(locale5, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d", valueOf3, Long.valueOf(j2), Integer.valueOf(i2))).stepThis().dispose();
                                j3 = 0;
                                obj2 = valueOf3;
                                if (j2 == j3) {
                                    executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                                } else {
                                    executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                }
                                SQLitePreparedStatement sQLitePreparedStatement4 = executeFast;
                                sQLitePreparedStatement4.requery();
                                sQLitePreparedStatement4.bindLong(1, j);
                                if (j2 == 0) {
                                    sQLitePreparedStatement4.bindLong(2, j2);
                                    i3 = 3;
                                } else {
                                    i3 = 2;
                                }
                                sQLitePreparedStatement4.bindInteger(i3, i2);
                                sQLitePreparedStatement4.bindInteger(i3 + 1, 1);
                                sQLitePreparedStatement4.bindInteger(i3 + 2, 1);
                                sQLitePreparedStatement4.step();
                                sQLitePreparedStatement4.dispose();
                                sQLitePreparedStatement4.dispose();
                                return;
                            }
                            SQLiteDatabase sQLiteDatabase6 = this.database;
                            Locale locale6 = Locale.US;
                            Long valueOf4 = Long.valueOf(j);
                            Object valueOf5 = Long.valueOf(j2);
                            sQLiteDatabase6.executeFast(String.format(locale6, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = 0", valueOf4, valueOf5, Integer.valueOf(i2))).stepThis().dispose();
                            obj = valueOf5;
                        } else if (i == 0) {
                            SQLiteDatabase sQLiteDatabase7 = this.database;
                            Locale locale7 = Locale.US;
                            Long valueOf6 = Long.valueOf(j);
                            Object valueOf7 = Integer.valueOf(i2);
                            sQLiteDatabase7.executeFast(String.format(locale7, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", valueOf6, valueOf7)).stepThis().dispose();
                            obj = valueOf7;
                        } else {
                            SQLiteDatabase sQLiteDatabase8 = this.database;
                            Locale locale8 = Locale.US;
                            Long valueOf8 = Long.valueOf(j);
                            Object valueOf9 = Integer.valueOf(i2);
                            sQLiteDatabase8.executeFast(String.format(locale8, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", valueOf8, valueOf9)).stepThis().dispose();
                            obj = valueOf9;
                        }
                        sQLitePreparedStatement4.requery();
                        sQLitePreparedStatement4.bindLong(1, j);
                        if (j2 == 0) {
                        }
                        sQLitePreparedStatement4.bindInteger(i3, i2);
                        sQLitePreparedStatement4.bindInteger(i3 + 1, 1);
                        sQLitePreparedStatement4.bindInteger(i3 + 2, 1);
                        sQLitePreparedStatement4.step();
                        sQLitePreparedStatement4.dispose();
                        sQLitePreparedStatement4.dispose();
                        return;
                    } catch (Exception e3) {
                        e = e3;
                        throw e;
                    }
                    if (j2 == j3) {
                    }
                    SQLitePreparedStatement sQLitePreparedStatement42 = executeFast;
                } catch (Throwable th3) {
                    th = th3;
                    sQLitePreparedStatement = obj2;
                    if (sQLitePreparedStatement != 0) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } catch (Exception e4) {
                e = e4;
            } catch (Throwable th4) {
                th = th4;
                sQLitePreparedStatement = 0;
                if (sQLitePreparedStatement != 0) {
                }
                throw th;
            }
            j3 = 0;
            obj2 = obj;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes3.dex */
    public static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:161:0x0500  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0505  */
    /* JADX WARN: Removed duplicated region for block: B:215:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void closeHolesInMedia(long j, int i, int i2, int i3, long j2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        Exception exc;
        ArrayList arrayList;
        int i4;
        ArrayList arrayList2;
        long j3;
        SQLitePreparedStatement executeFast;
        long j4;
        int i5;
        int i6;
        int i7 = i2;
        long j5 = j2;
        int i8 = 1;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                try {
                    if (j5 != 0) {
                        if (i3 < 0) {
                            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                        } else {
                            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                        }
                    } else if (i3 < 0) {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    } else {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    }
                    arrayList = null;
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                int intValue = sQLiteCursor.intValue(0);
                                int intValue2 = sQLiteCursor.intValue(1);
                                int intValue3 = sQLiteCursor.intValue(2);
                                if (intValue2 != intValue3 || intValue2 != 1) {
                                    arrayList.add(new Hole(intValue, intValue2, intValue3));
                                }
                            } catch (Exception e) {
                                exc = e;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e3) {
            e = e3;
        } catch (Throwable th4) {
            th = th4;
        }
        if (arrayList != null) {
            int i9 = 0;
            while (i9 < arrayList.size()) {
                try {
                    Hole hole = (Hole) arrayList.get(i9);
                    int i10 = hole.end;
                    int i11 = i10 - 1;
                    if (i7 >= i11) {
                        arrayList2 = arrayList;
                        if (i <= hole.start + i8) {
                            if (j5 != 0) {
                                i4 = i9;
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                } catch (Throwable th5) {
                                    th = th5;
                                }
                            } else {
                                i4 = i9;
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                } catch (Throwable th6) {
                                    th = th6;
                                }
                            }
                            i6 = i7;
                            j3 = j5;
                            j4 = j;
                            i7 = i6;
                            i8 = 1;
                            arrayList = arrayList2;
                            i9 = i4 + 1;
                            j5 = j3;
                        } else {
                            i4 = i9;
                        }
                    } else {
                        i4 = i9;
                        arrayList2 = arrayList;
                    }
                    if (i7 < i11) {
                        int i12 = hole.start;
                        if (i <= i12 + 1) {
                            if (i12 != i7) {
                                j3 = j2;
                                if (j3 != 0) {
                                    try {
                                        try {
                                            try {
                                                this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET start = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                            } catch (Exception e4) {
                                                e = e4;
                                                checkSQLException(e, false);
                                                j4 = j;
                                                i6 = i2;
                                                i7 = i6;
                                                i8 = 1;
                                                arrayList = arrayList2;
                                                i9 = i4 + 1;
                                                j5 = j3;
                                            }
                                        } catch (Exception e5) {
                                            e = e5;
                                        } catch (Throwable th7) {
                                            th = th7;
                                        }
                                    } catch (Exception e6) {
                                        e = e6;
                                    }
                                } else {
                                    try {
                                        this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    } catch (Exception e7) {
                                        e = e7;
                                        checkSQLException(e, false);
                                        j4 = j;
                                        i6 = i2;
                                        i7 = i6;
                                        i8 = 1;
                                        arrayList = arrayList2;
                                        i9 = i4 + 1;
                                        j5 = j3;
                                    } catch (Throwable th8) {
                                        th = th8;
                                    }
                                }
                            } else {
                                j3 = j2;
                            }
                            j4 = j;
                            i6 = i2;
                        } else {
                            j3 = j2;
                            if (j3 != 0) {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_topics WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    executeFast = this.database.executeFast("REPLACE INTO media_holes_topics VALUES(?, ?, ?, ?, ?)");
                                } catch (Throwable th9) {
                                    th = th9;
                                }
                            } else {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                } catch (Throwable th10) {
                                    th = th10;
                                }
                            }
                            try {
                                executeFast.requery();
                                j4 = j;
                                executeFast.bindLong(1, j4);
                                if (j3 != 0) {
                                    executeFast.bindLong(2, j3);
                                    i5 = 3;
                                } else {
                                    i5 = 2;
                                }
                                executeFast.bindInteger(i5, hole.type);
                                executeFast.bindInteger(i5 + 1, hole.start);
                                executeFast.bindInteger(i5 + 2, i);
                                executeFast.step();
                                executeFast.requery();
                                executeFast.bindLong(1, j4);
                                executeFast.bindInteger(2, hole.type);
                                i6 = i2;
                                executeFast.bindInteger(3, i6);
                                executeFast.bindInteger(4, hole.end);
                                executeFast.step();
                                executeFast.dispose();
                                i7 = i6;
                                i8 = 1;
                                arrayList = arrayList2;
                                i9 = i4 + 1;
                                j5 = j3;
                            } catch (Exception e8) {
                                exc = e8;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast;
                                checkSQLException(exc);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th11) {
                                th = th11;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast;
                            }
                        }
                        th = th;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                    if (i10 != i) {
                        if (j5 != 0) {
                            try {
                            } catch (Exception e9) {
                                e = e9;
                            }
                            try {
                                this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_topics SET end = %d WHERE uid = %d AND topic_id = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            } catch (Exception e10) {
                                e = e10;
                                checkSQLException(e, false);
                                j4 = j;
                                j3 = j2;
                                i6 = i7;
                                i7 = i6;
                                i8 = 1;
                                arrayList = arrayList2;
                                i9 = i4 + 1;
                                j5 = j3;
                            } catch (Throwable th12) {
                                th = th12;
                            }
                        } else {
                            try {
                                this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                            } catch (Exception e11) {
                                e = e11;
                                checkSQLException(e, false);
                                j4 = j;
                                j3 = j2;
                                i6 = i7;
                                i7 = i6;
                                i8 = 1;
                                arrayList = arrayList2;
                                i9 = i4 + 1;
                                j5 = j3;
                            } catch (Throwable th13) {
                                th = th13;
                            }
                        }
                    }
                    j4 = j;
                    j3 = j2;
                    i6 = i7;
                    i7 = i6;
                    i8 = 1;
                    arrayList = arrayList2;
                    i9 = i4 + 1;
                    j5 = j3;
                } catch (Exception e12) {
                    e = e12;
                    exc = e;
                    sQLiteCursor = null;
                    checkSQLException(exc);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:184:0x05c9  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x05ce  */
    /* JADX WARN: Removed duplicated region for block: B:244:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void closeHolesInTable(String str, long j, int i, int i2, long j2) {
        SQLiteCursor sQLiteCursor;
        Throwable th;
        Exception exc;
        ArrayList arrayList;
        int i3;
        SQLitePreparedStatement executeFast;
        long j3;
        int i4;
        int i5;
        int i6;
        int i7;
        Locale locale;
        int i8 = i;
        int i9 = i2;
        long j4 = j2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                try {
                    if (j4 != 0) {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM " + str + " WHERE uid = %d AND topic_id = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    } else {
                        sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM " + str + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                    }
                    arrayList = null;
                    while (sQLiteCursor.next()) {
                        try {
                            try {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                int intValue = sQLiteCursor.intValue(0);
                                int intValue2 = sQLiteCursor.intValue(1);
                                if (intValue != intValue2 || intValue != 1) {
                                    arrayList.add(new Hole(intValue, intValue2));
                                }
                            } catch (Exception e) {
                                exc = e;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Throwable th3) {
                    th = th3;
                }
            } catch (Exception e2) {
                e = e2;
            }
        } catch (Exception e3) {
            e = e3;
        } catch (Throwable th4) {
            th = th4;
        }
        if (arrayList != null) {
            int i10 = 0;
            while (i10 < arrayList.size()) {
                try {
                    Hole hole = (Hole) arrayList.get(i10);
                    int i11 = hole.end;
                    int i12 = i11 - 1;
                    ArrayList arrayList2 = arrayList;
                    if (i9 >= i12) {
                        i3 = i10;
                        if (i8 <= hole.start + 1) {
                            if (j4 != 0) {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                } catch (Throwable th5) {
                                    th = th5;
                                }
                            } else {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                } catch (Throwable th6) {
                                    th = th6;
                                }
                            }
                            i5 = i8;
                            i7 = i9;
                            j3 = j;
                            i10 = i3 + 1;
                            i8 = i5;
                            arrayList = arrayList2;
                            i9 = i7;
                            j4 = j2;
                        }
                    } else {
                        i3 = i10;
                    }
                    if (i9 < i12) {
                        int i13 = hole.start;
                        if (i8 <= i13 + 1) {
                            if (i13 != i2) {
                                if (j2 != 0) {
                                    try {
                                        SQLiteDatabase sQLiteDatabase = this.database;
                                        locale = Locale.US;
                                        try {
                                            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        } catch (Exception e4) {
                                            e = e4;
                                        } catch (Throwable th7) {
                                            th = th7;
                                        }
                                    } catch (Exception e5) {
                                        e = e5;
                                    }
                                    try {
                                        this.database.executeFast(String.format(locale, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i2), Integer.valueOf(hole.end))).stepThis().dispose();
                                    } catch (Exception e6) {
                                        e = e6;
                                        checkSQLException(e, false);
                                        j3 = j;
                                        i5 = i;
                                        i7 = i2;
                                        i10 = i3 + 1;
                                        i8 = i5;
                                        arrayList = arrayList2;
                                        i9 = i7;
                                        j4 = j2;
                                    } catch (Throwable th8) {
                                        th = th8;
                                    }
                                } else {
                                    SQLiteDatabase sQLiteDatabase2 = this.database;
                                    Locale locale2 = Locale.US;
                                    try {
                                        sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                        try {
                                            this.database.executeFast(String.format(locale2, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(hole.end))).stepThis().dispose();
                                        } catch (Exception e7) {
                                            e = e7;
                                            checkSQLException(e, false);
                                            j3 = j;
                                            i5 = i;
                                            i7 = i2;
                                            i10 = i3 + 1;
                                            i8 = i5;
                                            arrayList = arrayList2;
                                            i9 = i7;
                                            j4 = j2;
                                        } catch (Throwable th9) {
                                            th = th9;
                                        }
                                    } catch (Exception e8) {
                                        e = e8;
                                    } catch (Throwable th10) {
                                        th = th10;
                                    }
                                }
                            }
                            j3 = j;
                            i5 = i;
                            i7 = i2;
                        } else {
                            if (j2 != 0) {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    executeFast = this.database.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?, ?)");
                                } catch (Throwable th11) {
                                    th = th11;
                                }
                            } else {
                                try {
                                    this.database.executeFast(String.format(Locale.US, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    executeFast = this.database.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
                                } catch (Throwable th12) {
                                    th = th12;
                                }
                            }
                            try {
                                executeFast.requery();
                                j3 = j;
                                executeFast.bindLong(1, j3);
                                if (j2 != 0) {
                                    executeFast.bindLong(2, j2);
                                    i4 = 3;
                                } else {
                                    i4 = 2;
                                }
                                int i14 = i4 + 1;
                                executeFast.bindInteger(i4, hole.start);
                                i5 = i;
                                executeFast.bindInteger(i14, i5);
                                executeFast.step();
                                executeFast.requery();
                                executeFast.bindLong(1, j3);
                                if (j2 != 0) {
                                    executeFast.bindLong(2, j2);
                                    i6 = 3;
                                } else {
                                    i6 = 2;
                                }
                                i7 = i2;
                                executeFast.bindInteger(i6, i7);
                                executeFast.bindInteger(i6 + 1, hole.end);
                                executeFast.step();
                                executeFast.dispose();
                                i10 = i3 + 1;
                                i8 = i5;
                                arrayList = arrayList2;
                                i9 = i7;
                                j4 = j2;
                            } catch (Exception e9) {
                                exc = e9;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast;
                                checkSQLException(exc);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th13) {
                                th = th13;
                                sQLiteCursor = null;
                                sQLitePreparedStatement = executeFast;
                            }
                        }
                        th = th;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                    if (i11 != i8) {
                        if (j4 != 0) {
                            try {
                                SQLiteDatabase sQLiteDatabase3 = this.database;
                                Locale locale3 = Locale.US;
                                try {
                                    sQLiteDatabase3.executeFast(String.format(locale3, "DELETE FROM " + str + " WHERE uid = %d AND topic_id = %d AND start = %d AND end = %d", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                    try {
                                        this.database.executeFast(String.format(locale3, "REPLACE INTO " + str + " VALUES(%d, %d, %d, %d)", Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(hole.start), Integer.valueOf(i))).stepThis().dispose();
                                    } catch (Exception e10) {
                                        e = e10;
                                        checkSQLException(e, false);
                                        j3 = j;
                                        i7 = i2;
                                        i5 = i8;
                                        i10 = i3 + 1;
                                        i8 = i5;
                                        arrayList = arrayList2;
                                        i9 = i7;
                                        j4 = j2;
                                    } catch (Throwable th14) {
                                        th = th14;
                                    }
                                } catch (Exception e11) {
                                    e = e11;
                                } catch (Throwable th15) {
                                    th = th15;
                                }
                            } catch (Exception e12) {
                                e = e12;
                            }
                        } else {
                            SQLiteDatabase sQLiteDatabase4 = this.database;
                            Locale locale4 = Locale.US;
                            try {
                                sQLiteDatabase4.executeFast(String.format(locale4, "DELETE FROM " + str + " WHERE uid = %d AND start = %d AND end = %d", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end))).stepThis().dispose();
                                try {
                                    this.database.executeFast(String.format(locale4, "REPLACE INTO " + str + " VALUES(%d, %d, %d)", Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(i))).stepThis().dispose();
                                } catch (Exception e13) {
                                    e = e13;
                                    checkSQLException(e, false);
                                    j3 = j;
                                    i7 = i2;
                                    i5 = i8;
                                    i10 = i3 + 1;
                                    i8 = i5;
                                    arrayList = arrayList2;
                                    i9 = i7;
                                    j4 = j2;
                                } catch (Throwable th16) {
                                    th = th16;
                                }
                            } catch (Exception e14) {
                                e = e14;
                            } catch (Throwable th17) {
                                th = th17;
                            }
                        }
                    }
                    j3 = j;
                    i7 = i2;
                    i5 = i8;
                    i10 = i3 + 1;
                    i8 = i5;
                    arrayList = arrayList2;
                    i9 = i7;
                    j4 = j2;
                } catch (Exception e15) {
                    e = e15;
                    exc = e;
                    sQLiteCursor = null;
                    checkSQLException(exc);
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLiteCursor == null) {
                        sQLiteCursor.dispose();
                        return;
                    }
                    return;
                }
            }
        }
    }

    public void replaceMessageIfExists(final TLRPC$Message tLRPC$Message, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final boolean z) {
        if (tLRPC$Message == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$replaceMessageIfExists$214(tLRPC$Message, z, arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:104:0x01d6 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:107:0x01ec A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:108:0x01f2 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01f9 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:116:0x0216 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:117:0x021d A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:120:0x0229 A[Catch: all -> 0x022d, Exception -> 0x022f, TRY_ENTER, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:126:0x0233 A[Catch: all -> 0x022d, Exception -> 0x022f, TRY_LEAVE, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0259  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x02e9 A[Catch: Exception -> 0x022f, all -> 0x02d9, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:181:0x0346 A[Catch: Exception -> 0x022f, all -> 0x02d9, TRY_LEAVE, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:184:0x0352  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x036b  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x0370  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x0375  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x038a  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x038f  */
    /* JADX WARN: Removed duplicated region for block: B:208:0x0394  */
    /* JADX WARN: Removed duplicated region for block: B:216:0x02d5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:239:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:241:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x005f A[Catch: all -> 0x022d, Exception -> 0x022f, TRY_ENTER, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0070 A[Catch: all -> 0x022d, Exception -> 0x022f, TryCatch #1 {Exception -> 0x022f, blocks: (B:7:0x0034, B:18:0x004d, B:30:0x0063, B:32:0x0070, B:33:0x0073, B:120:0x0229, B:126:0x0233, B:146:0x0263, B:152:0x027f, B:153:0x0288, B:167:0x02d5, B:170:0x02df, B:172:0x02e9, B:173:0x02f4, B:175:0x02fa, B:176:0x030e, B:178:0x0314, B:179:0x0328, B:181:0x0346, B:28:0x005f, B:188:0x0360, B:189:0x0363), top: B:212:0x0007 }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0147 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:81:0x014f A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:84:0x015c A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0173 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x017e  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0182  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x01a1 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x01ba A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01c5 A[Catch: all -> 0x0100, Exception -> 0x0104, TryCatch #17 {Exception -> 0x0104, all -> 0x0100, blocks: (B:63:0x00ea, B:65:0x00f9, B:71:0x010a, B:73:0x012f, B:78:0x0137, B:80:0x0147, B:82:0x0158, B:84:0x015c, B:86:0x017a, B:93:0x0189, B:95:0x01a1, B:97:0x01c1, B:99:0x01c5, B:103:0x01cf, B:105:0x01df, B:107:0x01ec, B:110:0x01f9, B:112:0x0200, B:113:0x020b, B:114:0x0212, B:116:0x0216, B:118:0x0221, B:117:0x021d, B:108:0x01f2, B:102:0x01cd, B:104:0x01d6, B:96:0x01ba, B:85:0x0173, B:81:0x014f), top: B:221:0x00ea }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$replaceMessageIfExists$214(TLRPC$Message tLRPC$Message, boolean z, ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement3;
        int i;
        NativeByteBuffer nativeByteBuffer;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLiteDatabase sQLiteDatabase2;
        final ArrayList arrayList3;
        int i2;
        SQLiteDatabase sQLiteDatabase3;
        SQLitePreparedStatement executeFast;
        int i3;
        NativeByteBuffer nativeByteBuffer2;
        int i4;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement7;
        int i5;
        int i6;
        int i7;
        int i8;
        NativeByteBuffer nativeByteBuffer3;
        int i9;
        NativeByteBuffer nativeByteBuffer4;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader;
        int i10;
        int i11;
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2;
        int i12;
        int i13 = 2;
        int i14 = 1;
        try {
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d LIMIT 1", Integer.valueOf(tLRPC$Message.id), Long.valueOf(MessageObject.getDialogId(tLRPC$Message))), new Object[0]);
                    try {
                        try {
                        } catch (Exception e) {
                            e = e;
                            i = 0;
                            checkSQLException(e);
                            if (sQLiteCursor != null) {
                            }
                            nativeByteBuffer = null;
                            this.database.beginTransaction();
                            long j = 0;
                            if (tLRPC$Message.dialog_id == 0) {
                            }
                            fixUnsupportedMedia(tLRPC$Message);
                            MessageObject.normalizeFlags(tLRPC$Message);
                            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                            tLRPC$Message.serializeToStream(nativeByteBuffer5);
                            long clientUserId = getUserConfig().getClientUserId();
                            arrayList3 = null;
                            i2 = 0;
                            while (i2 < i13) {
                            }
                            NativeByteBuffer nativeByteBuffer6 = nativeByteBuffer5;
                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                            }
                            NativeByteBuffer nativeByteBuffer7 = nativeByteBuffer6;
                            if (nativeByteBuffer != null) {
                            }
                            nativeByteBuffer7.reuse();
                            this.database.commitTransaction();
                            if (z) {
                            }
                            if (arrayList3 != null) {
                            }
                            sQLiteDatabase3 = this.database;
                            if (sQLiteDatabase3 != null) {
                            }
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        throw th;
                    }
                } catch (Exception e2) {
                    e = e2;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement6 = null;
                    try {
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                            sQLiteDatabase2.commitTransaction();
                        }
                        if (sQLitePreparedStatement3 != null) {
                            sQLitePreparedStatement3.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                            return;
                        }
                        return;
                    } catch (Throwable th2) {
                        th = th2;
                        SQLitePreparedStatement sQLitePreparedStatement8 = sQLitePreparedStatement6;
                        sQLitePreparedStatement4 = sQLitePreparedStatement3;
                        sQLitePreparedStatement5 = sQLitePreparedStatement8;
                        SQLitePreparedStatement sQLitePreparedStatement9 = sQLitePreparedStatement4;
                        sQLitePreparedStatement2 = sQLitePreparedStatement5;
                        sQLitePreparedStatement = sQLitePreparedStatement9;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                }
            } catch (Exception e3) {
                e = e3;
                sQLiteCursor = null;
            } catch (Throwable th3) {
                th = th3;
                sQLiteCursor = null;
            }
            if (!sQLiteCursor.next()) {
                sQLiteCursor.dispose();
                sQLiteCursor.dispose();
                SQLiteDatabase sQLiteDatabase4 = this.database;
                if (sQLiteDatabase4 != null) {
                    sQLiteDatabase4.commitTransaction();
                    return;
                }
                return;
            }
            i = sQLiteCursor.intValue(1);
            try {
                nativeByteBuffer = sQLiteCursor.byteBufferValue(2);
                sQLiteCursor.dispose();
            } catch (Exception e4) {
                e = e4;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
                nativeByteBuffer = null;
                this.database.beginTransaction();
                long j2 = 0;
                if (tLRPC$Message.dialog_id == 0) {
                }
                fixUnsupportedMedia(tLRPC$Message);
                MessageObject.normalizeFlags(tLRPC$Message);
                NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                tLRPC$Message.serializeToStream(nativeByteBuffer52);
                long clientUserId2 = getUserConfig().getClientUserId();
                arrayList3 = null;
                i2 = 0;
                while (i2 < i13) {
                }
                NativeByteBuffer nativeByteBuffer62 = nativeByteBuffer52;
                if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                }
                NativeByteBuffer nativeByteBuffer72 = nativeByteBuffer62;
                if (nativeByteBuffer != null) {
                }
                nativeByteBuffer72.reuse();
                this.database.commitTransaction();
                if (z) {
                }
                if (arrayList3 != null) {
                }
                sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                }
            }
            this.database.beginTransaction();
            long j22 = 0;
            if (tLRPC$Message.dialog_id == 0) {
                MessageObject.getDialogId(tLRPC$Message);
            }
            fixUnsupportedMedia(tLRPC$Message);
            MessageObject.normalizeFlags(tLRPC$Message);
            NativeByteBuffer nativeByteBuffer522 = new NativeByteBuffer(tLRPC$Message.getObjectSize());
            tLRPC$Message.serializeToStream(nativeByteBuffer522);
            long clientUserId22 = getUserConfig().getClientUserId();
            arrayList3 = null;
            i2 = 0;
            while (i2 < i13) {
                boolean z2 = i2 == i14;
                try {
                    long topicId = MessageObject.getTopicId(this.currentAccount, tLRPC$Message, isForum(tLRPC$Message.dialog_id));
                    NativeByteBuffer nativeByteBuffer8 = nativeByteBuffer522;
                    long j3 = tLRPC$Message.dialog_id;
                    try {
                        if (!z2) {
                            executeFast2 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                        } else if (topicId == j22) {
                            i12 = 1;
                            i2 += i12;
                            nativeByteBuffer522 = nativeByteBuffer8;
                            i13 = 2;
                            i14 = 1;
                            j22 = 0;
                        } else {
                            executeFast2 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                            if (j3 == clientUserId22) {
                                try {
                                    if (MessageObject.getSavedDialogId(clientUserId22, tLRPC$Message) != j22) {
                                        if (arrayList3 == null) {
                                            arrayList3 = new ArrayList();
                                        }
                                        arrayList3.add(tLRPC$Message);
                                    }
                                } catch (Exception e5) {
                                    e = e5;
                                    sQLitePreparedStatement3 = executeFast2;
                                    sQLitePreparedStatement6 = null;
                                    checkSQLException(e);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLitePreparedStatement3 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    sQLitePreparedStatement = executeFast2;
                                    sQLitePreparedStatement2 = null;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLitePreparedStatement != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    throw th;
                                }
                            }
                        }
                        sQLitePreparedStatement7.requery();
                        sQLitePreparedStatement7.bindInteger(1, tLRPC$Message.id);
                        sQLitePreparedStatement7.bindLong(2, j3);
                        if (z2) {
                            sQLitePreparedStatement7.bindLong(3, topicId);
                            i5 = 4;
                        } else {
                            i5 = 3;
                        }
                        sQLitePreparedStatement7.bindInteger(i5, i);
                        sQLitePreparedStatement7.bindInteger(i5 + 1, tLRPC$Message.send_state);
                        sQLitePreparedStatement7.bindInteger(i5 + 2, tLRPC$Message.date);
                        int i15 = i5 + 4;
                        sQLitePreparedStatement7.bindByteBuffer(i5 + 3, nativeByteBuffer8);
                        int i16 = i5 + 5;
                        if (!MessageObject.isOut(tLRPC$Message) && !tLRPC$Message.from_scheduled) {
                            i6 = 0;
                            sQLitePreparedStatement7.bindInteger(i15, i6);
                            int i17 = i5 + 6;
                            sQLitePreparedStatement7.bindInteger(i16, tLRPC$Message.ttl);
                            if ((tLRPC$Message.flags & 1024) == 0) {
                                i7 = i5 + 7;
                                sQLitePreparedStatement7.bindInteger(i17, tLRPC$Message.views);
                            } else {
                                i7 = i5 + 7;
                                sQLitePreparedStatement7.bindInteger(i17, getMessageMediaType(tLRPC$Message));
                            }
                            if (tLRPC$Message.replyStory == null) {
                                nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message.replyStory.getObjectSize());
                                tLRPC$Message.replyStory.serializeToStream(nativeByteBuffer3);
                                i8 = i7 + 1;
                                sQLitePreparedStatement7.bindByteBuffer(i7, nativeByteBuffer3);
                            } else {
                                i8 = i7 + 1;
                                sQLitePreparedStatement7.bindNull(i7);
                                nativeByteBuffer3 = null;
                            }
                            int i18 = tLRPC$Message.stickerVerified;
                            sQLitePreparedStatement7.bindInteger(i8, i18 != 0 ? 1 : i18 == 2 ? 2 : 0);
                            sQLitePreparedStatement7.bindInteger(i8 + 1, tLRPC$Message.mentioned ? 1 : 0);
                            int i19 = i8 + 3;
                            sQLitePreparedStatement7.bindInteger(i8 + 2, tLRPC$Message.forwards);
                            if (tLRPC$Message.replies == null) {
                                NativeByteBuffer nativeByteBuffer9 = new NativeByteBuffer(tLRPC$Message.replies.getObjectSize());
                                tLRPC$Message.replies.serializeToStream(nativeByteBuffer9);
                                sQLitePreparedStatement7.bindByteBuffer(i19, nativeByteBuffer9);
                                i9 = i8 + 4;
                                nativeByteBuffer4 = nativeByteBuffer9;
                            } else {
                                sQLitePreparedStatement7.bindNull(i19);
                                i9 = i8 + 4;
                                nativeByteBuffer4 = null;
                            }
                            tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader == null) {
                                int i20 = i9 + 1;
                                int i21 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                if (i21 == 0) {
                                    i21 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                }
                                sQLitePreparedStatement7.bindInteger(i9, i21);
                                i10 = i20;
                            } else {
                                sQLitePreparedStatement7.bindInteger(i9, 0);
                                i10 = i9 + 1;
                            }
                            int i22 = i10 + 1;
                            nativeByteBuffer8 = nativeByteBuffer8;
                            sQLitePreparedStatement7.bindLong(i10, MessageObject.getChannelId(tLRPC$Message));
                            if (nativeByteBuffer == null) {
                                i11 = i10 + 2;
                                sQLitePreparedStatement7.bindByteBuffer(i22, nativeByteBuffer);
                            } else {
                                i11 = i10 + 2;
                                sQLitePreparedStatement7.bindNull(i22);
                            }
                            if (!z2) {
                                if ((tLRPC$Message.flags & 131072) != 0) {
                                    sQLitePreparedStatement7.bindLong(i11, tLRPC$Message.grouped_id);
                                    i11++;
                                } else {
                                    sQLitePreparedStatement7.bindNull(i11);
                                    i11++;
                                }
                            }
                            tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                            if (tLRPC$MessageReplyHeader2 == null) {
                                sQLitePreparedStatement7.bindInteger(i11, tLRPC$MessageReplyHeader2.story_id);
                            } else {
                                sQLitePreparedStatement7.bindInteger(i11, 0);
                            }
                            sQLitePreparedStatement7.step();
                            sQLitePreparedStatement7.dispose();
                            if (nativeByteBuffer4 != null) {
                                nativeByteBuffer4.reuse();
                            }
                            if (nativeByteBuffer3 != null) {
                                nativeByteBuffer3.reuse();
                            }
                            i12 = 1;
                            i2 += i12;
                            nativeByteBuffer522 = nativeByteBuffer8;
                            i13 = 2;
                            i14 = 1;
                            j22 = 0;
                        }
                        i6 = 1;
                        sQLitePreparedStatement7.bindInteger(i15, i6);
                        int i172 = i5 + 6;
                        sQLitePreparedStatement7.bindInteger(i16, tLRPC$Message.ttl);
                        if ((tLRPC$Message.flags & 1024) == 0) {
                        }
                        if (tLRPC$Message.replyStory == null) {
                        }
                        int i182 = tLRPC$Message.stickerVerified;
                        sQLitePreparedStatement7.bindInteger(i8, i182 != 0 ? 1 : i182 == 2 ? 2 : 0);
                        sQLitePreparedStatement7.bindInteger(i8 + 1, tLRPC$Message.mentioned ? 1 : 0);
                        int i192 = i8 + 3;
                        sQLitePreparedStatement7.bindInteger(i8 + 2, tLRPC$Message.forwards);
                        if (tLRPC$Message.replies == null) {
                        }
                        tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                        if (tLRPC$MessageReplyHeader == null) {
                        }
                        int i222 = i10 + 1;
                        nativeByteBuffer8 = nativeByteBuffer8;
                        sQLitePreparedStatement7.bindLong(i10, MessageObject.getChannelId(tLRPC$Message));
                        if (nativeByteBuffer == null) {
                        }
                        if (!z2) {
                        }
                        tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
                        if (tLRPC$MessageReplyHeader2 == null) {
                        }
                        sQLitePreparedStatement7.step();
                        sQLitePreparedStatement7.dispose();
                        if (nativeByteBuffer4 != null) {
                        }
                        if (nativeByteBuffer3 != null) {
                        }
                        i12 = 1;
                        i2 += i12;
                        nativeByteBuffer522 = nativeByteBuffer8;
                        i13 = 2;
                        i14 = 1;
                        j22 = 0;
                    } catch (Exception e6) {
                        e = e6;
                        executeFast2 = sQLitePreparedStatement7;
                        sQLitePreparedStatement3 = executeFast2;
                        sQLitePreparedStatement6 = null;
                        checkSQLException(e);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement3 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        executeFast2 = sQLitePreparedStatement7;
                        sQLitePreparedStatement = executeFast2;
                        sQLitePreparedStatement2 = null;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        throw th;
                    }
                    sQLitePreparedStatement7 = executeFast2;
                } catch (Exception e7) {
                    e = e7;
                    executeFast = null;
                    sQLitePreparedStatement6 = executeFast;
                    sQLitePreparedStatement3 = null;
                    checkSQLException(e);
                    sQLiteDatabase2 = this.database;
                    if (sQLiteDatabase2 != null) {
                    }
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                } catch (Throwable th6) {
                    th = th6;
                    executeFast = null;
                    sQLitePreparedStatement2 = executeFast;
                    sQLitePreparedStatement = null;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    throw th;
                }
            }
            NativeByteBuffer nativeByteBuffer622 = nativeByteBuffer522;
            if (MediaDataController.canAddMessageToMedia(tLRPC$Message)) {
                int i23 = 0;
                while (i23 < 2) {
                    boolean z3 = i23 == 1;
                    long topicId2 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message, isForum(tLRPC$Message.dialog_id));
                    if (z3 && topicId2 == 0) {
                        nativeByteBuffer2 = nativeByteBuffer622;
                        i4 = 1;
                    } else {
                        executeFast = i23 == 0 ? this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)") : this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                        try {
                            executeFast.requery();
                            executeFast.bindInteger(1, tLRPC$Message.id);
                            executeFast.bindLong(2, tLRPC$Message.dialog_id);
                            if (i23 != 0) {
                                executeFast.bindLong(3, topicId2);
                                i3 = 4;
                            } else {
                                i3 = 3;
                            }
                            executeFast.bindInteger(i3, tLRPC$Message.date);
                            executeFast.bindInteger(i3 + 1, MediaDataController.getMediaType(tLRPC$Message));
                            nativeByteBuffer2 = nativeByteBuffer622;
                            executeFast.bindByteBuffer(i3 + 2, nativeByteBuffer2);
                            executeFast.step();
                            executeFast.dispose();
                            i4 = 1;
                        } catch (Exception e8) {
                            e = e8;
                            sQLitePreparedStatement6 = executeFast;
                            sQLitePreparedStatement3 = null;
                            checkSQLException(e);
                            sQLiteDatabase2 = this.database;
                            if (sQLiteDatabase2 != null) {
                            }
                            if (sQLitePreparedStatement3 != null) {
                            }
                            if (sQLitePreparedStatement6 != null) {
                            }
                        } catch (Throwable th7) {
                            th = th7;
                            sQLitePreparedStatement2 = executeFast;
                            sQLitePreparedStatement = null;
                            sQLiteDatabase = this.database;
                            if (sQLiteDatabase != null) {
                            }
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLitePreparedStatement2 != null) {
                            }
                            throw th;
                        }
                    }
                    i23 += i4;
                    nativeByteBuffer622 = nativeByteBuffer2;
                }
            }
            NativeByteBuffer nativeByteBuffer722 = nativeByteBuffer622;
            if (nativeByteBuffer != null) {
                try {
                    nativeByteBuffer.reuse();
                } catch (Throwable th8) {
                    th = th8;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement4 = null;
                    SQLitePreparedStatement sQLitePreparedStatement92 = sQLitePreparedStatement4;
                    sQLitePreparedStatement2 = sQLitePreparedStatement5;
                    sQLitePreparedStatement = sQLitePreparedStatement92;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                        sQLiteDatabase.commitTransaction();
                    }
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    if (sQLitePreparedStatement2 != null) {
                        sQLitePreparedStatement2.dispose();
                    }
                    throw th;
                }
            }
            nativeByteBuffer722.reuse();
            this.database.commitTransaction();
            if (z) {
                HashMap hashMap = new HashMap();
                HashMap hashMap2 = new HashMap();
                for (int i24 = 0; i24 < arrayList.size(); i24++) {
                    TLRPC$User tLRPC$User = (TLRPC$User) arrayList.get(i24);
                    hashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                }
                for (int i25 = 0; i25 < arrayList2.size(); i25++) {
                    TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) arrayList2.get(i25);
                    hashMap2.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                }
                final MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message, (AbstractMap<Long, TLRPC$User>) hashMap, (AbstractMap<Long, TLRPC$Chat>) hashMap2, true, true);
                final ArrayList arrayList4 = new ArrayList();
                arrayList4.add(messageObject);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda85
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$replaceMessageIfExists$212(messageObject, arrayList4);
                    }
                });
            }
            if (arrayList3 != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda86
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.this.lambda$replaceMessageIfExists$213(arrayList3);
                    }
                });
            }
            sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
        } catch (Throwable th9) {
            th = th9;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$212(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$213(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public void loadMessageAttachPaths(final ArrayList<MessageObject> arrayList, final Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda124
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$loadMessageAttachPaths$215(arrayList, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessageAttachPaths$215(ArrayList arrayList, Runnable runnable) {
        NativeByteBuffer byteBufferValue;
        long clientUserId = getUserConfig().getClientUserId();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            MessageObject messageObject = (MessageObject) it.next();
            if (!messageObject.scheduled && !messageObject.isQuickReply()) {
                SQLiteCursor sQLiteCursor = null;
                try {
                    try {
                        sQLiteCursor = this.database.queryFinalized("SELECT data FROM messages_v2 WHERE uid = ? AND mid = ?", Long.valueOf(messageObject.getDialogId()), Integer.valueOf(messageObject.getId()));
                        if (sQLiteCursor.next() && (byteBufferValue = sQLiteCursor.byteBufferValue(0)) != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, clientUserId);
                            byteBufferValue.reuse();
                            messageObject.messageOwner.attachPath = TLdeserialize.attachPath;
                            messageObject.checkMediaExistance();
                        }
                    } catch (Exception e) {
                        FileLog.e(e);
                        if (sQLiteCursor != null) {
                        }
                    }
                    sQLiteCursor.dispose();
                } catch (Throwable th) {
                    if (sQLiteCursor != null) {
                        sQLiteCursor.dispose();
                    }
                    throw th;
                }
            }
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    public void putMessages(final TLRPC$messages_Messages tLRPC$messages_Messages, final long j, final int i, final int i2, final boolean z, final int i3, final long j2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putMessages$218(i3, tLRPC$messages_Messages, j, j2, i, i2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(14:145|(38:(1:147)(2:826|(1:828)(52:829|(2:831|(0))(1:839)|(1:838)(1:836)|837|149|150|(2:152|153)(1:825)|154|156|157|158|159|160|161|162|163|164|165|(6:787|788|(1:790)|791|792|793)(1:167)|168|(39:170|171|172|173|(33:(5:636|637|638|639|640)(1:649)|642|643|181|(2:183|184)|185|(15:509|510|511|512|513|514|515|516|517|518|519|(7:521|(16:523|(4:525|526|527|528)(1:605)|529|530|(4:532|(1:534)(1:596)|535|536)(1:597)|537|(2:539|(9:545|(8:547|548|549|(1:553)|(1:555)(1:584)|556|557|(1:559))|585|549|(2:551|553)|(0)(0)|556|557|(0)))|586|(2:588|(2:590|(2:592|(1:594))))|585|549|(0)|(0)(0)|556|557|(0))(1:606)|560|561|(1:563)(1:583)|564|(3:566|(3:568|(1:570)|571)|(2:573|(3:575|576|(3:578|372|373)))(2:579|(3:581|576|(0)))))(1:607)|582|576|(0))(1:187)|(1:508)(9:190|191|192|193|(1:195)(1:497)|196|197|(7:471|472|473|474|(1:476)(1:479)|477|478)(7:199|200|201|202|203|(1:205)(1:463)|206)|207)|208|209|210|(34:213|(1:215)(1:336)|(4:217|(1:219)(1:334)|220|(3:222|223|224)(3:225|(3:(1:230)|231|232)|233))(1:335)|234|235|(3:237|238|239)(1:328)|240|241|(1:327)(1:245)|246|247|(3:249|250|251)(2:325|326)|252|(2:254|255)(2:323|324)|256|(1:258)(2:319|(1:321)(1:322))|259|260|(1:262)(2:317|318)|263|(5:265|266|(1:268)(1:314)|269|270)(2:315|316)|271|(2:273|274)(2:312|313)|(3:276|(1:278)(1:280)|279)|281|(1:283)(2:310|311)|284|(1:309)(3:287|288|289)|(1:291)|(1:293)|(1:295)|223|224|211)|337|338|(2:340|(16:342|343|(2:345|(13:347|(1:349)|350|351|(3:401|402|(11:(1:405)|406|407|408|409|354|(5:(1:357)|358|359|360|361)(2:388|(5:(1:391)|392|393|394|395))|(1:380)(3:365|(1:367)(1:379)|(5:(1:375)(1:378)|376|377|372|373))|371|372|373))|353|354|(0)(0)|(1:363)|380|371|372|373)(11:419|351|(0)|353|354|(0)(0)|(0)|380|371|372|373))|420|(13:422|(1:424)|425|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373))(1:457)|427|428|(3:430|431|432)(2:433|(6:437|438|439|440|441|442))|343|(0)|420|(0)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)(1:176)|177|178|(1:180)(1:629)|181|(0)|185|(0)(0)|(0)|508|208|209|210|(1:211)|337|338|(0)(0)|427|428|(0)(0)|343|(0)|420|(0)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)|655|656|657|658|659|660|(3:769|770|771)(1:662)|663|664|(3:754|755|756)|(3:748|749|750)|(3:738|739|740)|(4:727|728|(2:731|729)|732)|669|670|671|(8:673|674|675|676|677|678|679|680)(1:722)|(7:682|(1:684)(1:710)|685|686|687|688|689)(1:711)|690|(11:(1:693)|694|(1:696)|697|698|91|(1:93)|(1:95)|(1:97)|(1:99)|(2:101|102)(1:103))|700|694|(0)|697|698|91|(0)|(0)|(0)|(0)|(0)(0)))|163|164|165|(0)(0)|168|(0)|655|656|657|658|659|660|(0)(0)|663|664|(0)|(0)|(0)|(0)|669|670|671|(0)(0)|(0)(0)|690|(0)|700|694|(0)|697|698|91|(0)|(0)|(0)|(0)|(0)(0))|148|149|150|(0)(0)|154|156|157|158|159|160|161|162) */
    /* JADX WARN: Can't wrap try/catch for region: R(6:(8:(18:(1:147)(2:826|(1:828)(52:829|(2:831|(0))(1:839)|(1:838)(1:836)|837|149|150|(2:152|153)(1:825)|154|156|157|158|159|160|161|162|163|164|165|(6:787|788|(1:790)|791|792|793)(1:167)|168|(39:170|171|172|173|(33:(5:636|637|638|639|640)(1:649)|642|643|181|(2:183|184)|185|(15:509|510|511|512|513|514|515|516|517|518|519|(7:521|(16:523|(4:525|526|527|528)(1:605)|529|530|(4:532|(1:534)(1:596)|535|536)(1:597)|537|(2:539|(9:545|(8:547|548|549|(1:553)|(1:555)(1:584)|556|557|(1:559))|585|549|(2:551|553)|(0)(0)|556|557|(0)))|586|(2:588|(2:590|(2:592|(1:594))))|585|549|(0)|(0)(0)|556|557|(0))(1:606)|560|561|(1:563)(1:583)|564|(3:566|(3:568|(1:570)|571)|(2:573|(3:575|576|(3:578|372|373)))(2:579|(3:581|576|(0)))))(1:607)|582|576|(0))(1:187)|(1:508)(9:190|191|192|193|(1:195)(1:497)|196|197|(7:471|472|473|474|(1:476)(1:479)|477|478)(7:199|200|201|202|203|(1:205)(1:463)|206)|207)|208|209|210|(34:213|(1:215)(1:336)|(4:217|(1:219)(1:334)|220|(3:222|223|224)(3:225|(3:(1:230)|231|232)|233))(1:335)|234|235|(3:237|238|239)(1:328)|240|241|(1:327)(1:245)|246|247|(3:249|250|251)(2:325|326)|252|(2:254|255)(2:323|324)|256|(1:258)(2:319|(1:321)(1:322))|259|260|(1:262)(2:317|318)|263|(5:265|266|(1:268)(1:314)|269|270)(2:315|316)|271|(2:273|274)(2:312|313)|(3:276|(1:278)(1:280)|279)|281|(1:283)(2:310|311)|284|(1:309)(3:287|288|289)|(1:291)|(1:293)|(1:295)|223|224|211)|337|338|(2:340|(16:342|343|(2:345|(13:347|(1:349)|350|351|(3:401|402|(11:(1:405)|406|407|408|409|354|(5:(1:357)|358|359|360|361)(2:388|(5:(1:391)|392|393|394|395))|(1:380)(3:365|(1:367)(1:379)|(5:(1:375)(1:378)|376|377|372|373))|371|372|373))|353|354|(0)(0)|(1:363)|380|371|372|373)(11:419|351|(0)|353|354|(0)(0)|(0)|380|371|372|373))|420|(13:422|(1:424)|425|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373))(1:457)|427|428|(3:430|431|432)(2:433|(6:437|438|439|440|441|442))|343|(0)|420|(0)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)(1:176)|177|178|(1:180)(1:629)|181|(0)|185|(0)(0)|(0)|508|208|209|210|(1:211)|337|338|(0)(0)|427|428|(0)(0)|343|(0)|420|(0)|350|351|(0)|353|354|(0)(0)|(0)|380|371|372|373)|655|656|657|658|659|660|(3:769|770|771)(1:662)|663|664|(3:754|755|756)|(3:748|749|750)|(3:738|739|740)|(4:727|728|(2:731|729)|732)|669|670|671|(8:673|674|675|676|677|678|679|680)(1:722)|(7:682|(1:684)(1:710)|685|686|687|688|689)(1:711)|690|(11:(1:693)|694|(1:696)|697|698|91|(1:93)|(1:95)|(1:97)|(1:99)|(2:101|102)(1:103))|700|694|(0)|697|698|91|(0)|(0)|(0)|(0)|(0)(0)))|670|671|(0)(0)|(0)(0)|690|(0)|700|694|(0)|697|698|91|(0)|(0)|(0)|(0)|(0)(0))|663|664|(0)|(0)|(0)|(0)|669)|657|658|659|660|(0)(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x03ae, code lost:
        if (r22.intValue() < r4.id) goto L177;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x0511, code lost:
        if (r1.id == r3.id) goto L548;
     */
    /* JADX WARN: Code restructure failed: missing block: B:687:0x0dda, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:688:0x0ddb, code lost:
        r13 = null;
        r2 = r0;
        r5 = r7;
        r15 = null;
        r14 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:689:0x0de2, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:690:0x0de3, code lost:
        r13 = null;
        r2 = r0;
        r5 = r7;
        r15 = null;
        r14 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:703:0x0e2a, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:704:0x0e2b, code lost:
        r44 = r15;
        r13 = null;
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:705:0x0e33, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:706:0x0e34, code lost:
        r44 = r15;
        r13 = null;
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:707:0x0e3c, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:708:0x0e3d, code lost:
        r44 = r15;
        r13 = null;
        r2 = r0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:709:0x0e45, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:710:0x0e46, code lost:
        r44 = r15;
        r13 = null;
        r2 = r0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:711:0x0e4e, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:712:0x0e4f, code lost:
        r13 = null;
        r2 = r0;
        r1 = 0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:713:0x0e56, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:714:0x0e57, code lost:
        r13 = null;
        r2 = r0;
        r1 = 0;
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:93:0x0264, code lost:
        if (r13 != 4) goto L148;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:104:0x02c3 A[Catch: all -> 0x00df, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #73 {Exception -> 0x00e3, all -> 0x00df, blocks: (B:9:0x0021, B:35:0x00ce, B:41:0x00e9, B:44:0x00f8, B:53:0x0168, B:76:0x01d8, B:83:0x01f6, B:104:0x02c3, B:87:0x0236), top: B:812:0x001f }] */
    /* JADX WARN: Removed duplicated region for block: B:106:0x02ca  */
    /* JADX WARN: Removed duplicated region for block: B:126:0x036e  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x038c  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x0404 A[Catch: all -> 0x03cb, Exception -> 0x03d6, TRY_LEAVE, TryCatch #65 {Exception -> 0x03d6, all -> 0x03cb, blocks: (B:142:0x03b0, B:144:0x03bc, B:161:0x0404, B:140:0x03ac), top: B:827:0x03b0 }] */
    /* JADX WARN: Removed duplicated region for block: B:224:0x051a A[Catch: all -> 0x0481, Exception -> 0x0485, TryCatch #55 {Exception -> 0x0485, all -> 0x0481, blocks: (B:179:0x0479, B:190:0x04a9, B:192:0x04b0, B:194:0x04be, B:197:0x04cd, B:199:0x04d8, B:201:0x04de, B:203:0x04e4, B:205:0x04e8, B:207:0x04ec, B:222:0x0516, B:224:0x051a, B:226:0x051e, B:228:0x0522, B:231:0x0533, B:233:0x053c, B:236:0x0556, B:240:0x0560, B:244:0x056f, B:246:0x058f, B:247:0x0594, B:251:0x059c, B:257:0x05be, B:252:0x05a0, B:254:0x05a5, B:210:0x04f7, B:212:0x04fd, B:214:0x0503, B:216:0x0507, B:218:0x050b), top: B:845:0x0479 }] */
    /* JADX WARN: Removed duplicated region for block: B:228:0x0522 A[Catch: all -> 0x0481, Exception -> 0x0485, TryCatch #55 {Exception -> 0x0485, all -> 0x0481, blocks: (B:179:0x0479, B:190:0x04a9, B:192:0x04b0, B:194:0x04be, B:197:0x04cd, B:199:0x04d8, B:201:0x04de, B:203:0x04e4, B:205:0x04e8, B:207:0x04ec, B:222:0x0516, B:224:0x051a, B:226:0x051e, B:228:0x0522, B:231:0x0533, B:233:0x053c, B:236:0x0556, B:240:0x0560, B:244:0x056f, B:246:0x058f, B:247:0x0594, B:251:0x059c, B:257:0x05be, B:252:0x05a0, B:254:0x05a5, B:210:0x04f7, B:212:0x04fd, B:214:0x0503, B:216:0x0507, B:218:0x050b), top: B:845:0x0479 }] */
    /* JADX WARN: Removed duplicated region for block: B:230:0x0531  */
    /* JADX WARN: Removed duplicated region for block: B:233:0x053c A[Catch: all -> 0x0481, Exception -> 0x0485, TryCatch #55 {Exception -> 0x0485, all -> 0x0481, blocks: (B:179:0x0479, B:190:0x04a9, B:192:0x04b0, B:194:0x04be, B:197:0x04cd, B:199:0x04d8, B:201:0x04de, B:203:0x04e4, B:205:0x04e8, B:207:0x04ec, B:222:0x0516, B:224:0x051a, B:226:0x051e, B:228:0x0522, B:231:0x0533, B:233:0x053c, B:236:0x0556, B:240:0x0560, B:244:0x056f, B:246:0x058f, B:247:0x0594, B:251:0x059c, B:257:0x05be, B:252:0x05a0, B:254:0x05a5, B:210:0x04f7, B:212:0x04fd, B:214:0x0503, B:216:0x0507, B:218:0x050b), top: B:845:0x0479 }] */
    /* JADX WARN: Removed duplicated region for block: B:259:0x05c3  */
    /* JADX WARN: Removed duplicated region for block: B:282:0x0624  */
    /* JADX WARN: Removed duplicated region for block: B:343:0x07ae  */
    /* JADX WARN: Removed duplicated region for block: B:463:0x0995  */
    /* JADX WARN: Removed duplicated region for block: B:467:0x09a0  */
    /* JADX WARN: Removed duplicated region for block: B:470:0x09a8 A[Catch: all -> 0x09e2, Exception -> 0x09e6, TRY_LEAVE, TryCatch #78 {Exception -> 0x09e6, all -> 0x09e2, blocks: (B:468:0x09a2, B:470:0x09a8), top: B:802:0x09a2 }] */
    /* JADX WARN: Removed duplicated region for block: B:483:0x09ea A[Catch: all -> 0x09d0, Exception -> 0x09d9, TryCatch #10 {Exception -> 0x09d9, blocks: (B:498:0x0a51, B:513:0x0aad, B:515:0x0ab4, B:518:0x0aba, B:527:0x0b02, B:530:0x0b0a, B:550:0x0b7e, B:552:0x0b84, B:557:0x0ba2, B:560:0x0baa, B:562:0x0bb1, B:555:0x0b98, B:538:0x0b41, B:541:0x0b47, B:507:0x0a77, B:509:0x0a7d, B:512:0x0a94, B:472:0x09b0, B:483:0x09ea, B:485:0x09f2, B:497:0x0a4e), top: B:770:0x0ab4 }] */
    /* JADX WARN: Removed duplicated region for block: B:500:0x0a63  */
    /* JADX WARN: Removed duplicated region for block: B:509:0x0a7d A[Catch: all -> 0x09d0, Exception -> 0x09d9, TryCatch #10 {Exception -> 0x09d9, blocks: (B:498:0x0a51, B:513:0x0aad, B:515:0x0ab4, B:518:0x0aba, B:527:0x0b02, B:530:0x0b0a, B:550:0x0b7e, B:552:0x0b84, B:557:0x0ba2, B:560:0x0baa, B:562:0x0bb1, B:555:0x0b98, B:538:0x0b41, B:541:0x0b47, B:507:0x0a77, B:509:0x0a7d, B:512:0x0a94, B:472:0x09b0, B:483:0x09ea, B:485:0x09f2, B:497:0x0a4e), top: B:770:0x0ab4 }] */
    /* JADX WARN: Removed duplicated region for block: B:529:0x0b08  */
    /* JADX WARN: Removed duplicated region for block: B:538:0x0b41 A[Catch: all -> 0x09d0, Exception -> 0x09d9, TRY_ENTER, TryCatch #10 {Exception -> 0x09d9, blocks: (B:498:0x0a51, B:513:0x0aad, B:515:0x0ab4, B:518:0x0aba, B:527:0x0b02, B:530:0x0b0a, B:550:0x0b7e, B:552:0x0b84, B:557:0x0ba2, B:560:0x0baa, B:562:0x0bb1, B:555:0x0b98, B:538:0x0b41, B:541:0x0b47, B:507:0x0a77, B:509:0x0a7d, B:512:0x0a94, B:472:0x09b0, B:483:0x09ea, B:485:0x09f2, B:497:0x0a4e), top: B:770:0x0ab4 }] */
    /* JADX WARN: Removed duplicated region for block: B:550:0x0b7e A[Catch: all -> 0x09d0, Exception -> 0x09d9, TRY_ENTER, TryCatch #10 {Exception -> 0x09d9, blocks: (B:498:0x0a51, B:513:0x0aad, B:515:0x0ab4, B:518:0x0aba, B:527:0x0b02, B:530:0x0b0a, B:550:0x0b7e, B:552:0x0b84, B:557:0x0ba2, B:560:0x0baa, B:562:0x0bb1, B:555:0x0b98, B:538:0x0b41, B:541:0x0b47, B:507:0x0a77, B:509:0x0a7d, B:512:0x0a94, B:472:0x09b0, B:483:0x09ea, B:485:0x09f2, B:497:0x0a4e), top: B:770:0x0ab4 }] */
    /* JADX WARN: Removed duplicated region for block: B:587:0x0c2f  */
    /* JADX WARN: Removed duplicated region for block: B:625:0x0cd3 A[Catch: all -> 0x0d12, Exception -> 0x0d15, TRY_LEAVE, TryCatch #66 {Exception -> 0x0d15, all -> 0x0d12, blocks: (B:623:0x0cac, B:625:0x0cd3, B:628:0x0cea), top: B:825:0x0cac }] */
    /* JADX WARN: Removed duplicated region for block: B:645:0x0d22  */
    /* JADX WARN: Removed duplicated region for block: B:647:0x0d25 A[Catch: all -> 0x0d0b, Exception -> 0x0d0e, TryCatch #70 {Exception -> 0x0d0e, all -> 0x0d0b, blocks: (B:630:0x0d07, B:647:0x0d25, B:651:0x0d41, B:654:0x0d51, B:662:0x0d7d, B:669:0x0d9d, B:670:0x0da5, B:667:0x0d8a, B:650:0x0d30), top: B:817:0x0d07 }] */
    /* JADX WARN: Removed duplicated region for block: B:661:0x0d7b  */
    /* JADX WARN: Removed duplicated region for block: B:664:0x0d84  */
    /* JADX WARN: Removed duplicated region for block: B:669:0x0d9d A[Catch: all -> 0x0d0b, Exception -> 0x0d0e, TryCatch #70 {Exception -> 0x0d0e, all -> 0x0d0b, blocks: (B:630:0x0d07, B:647:0x0d25, B:651:0x0d41, B:654:0x0d51, B:662:0x0d7d, B:669:0x0d9d, B:670:0x0da5, B:667:0x0d8a, B:650:0x0d30), top: B:817:0x0d07 }] */
    /* JADX WARN: Removed duplicated region for block: B:674:0x0db1  */
    /* JADX WARN: Removed duplicated region for block: B:676:0x0db6  */
    /* JADX WARN: Removed duplicated region for block: B:678:0x0dbb  */
    /* JADX WARN: Removed duplicated region for block: B:680:0x0dc0  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x0dc5  */
    /* JADX WARN: Removed duplicated region for block: B:724:0x0e90  */
    /* JADX WARN: Removed duplicated region for block: B:726:0x0e95  */
    /* JADX WARN: Removed duplicated region for block: B:728:0x0e9a  */
    /* JADX WARN: Removed duplicated region for block: B:730:0x0e9f  */
    /* JADX WARN: Removed duplicated region for block: B:732:0x0ea4  */
    /* JADX WARN: Removed duplicated region for block: B:734:0x0ea9  */
    /* JADX WARN: Removed duplicated region for block: B:736:0x0eae  */
    /* JADX WARN: Removed duplicated region for block: B:738:0x0eb3  */
    /* JADX WARN: Removed duplicated region for block: B:740:0x0eb8  */
    /* JADX WARN: Removed duplicated region for block: B:742:0x0ebd  */
    /* JADX WARN: Removed duplicated region for block: B:748:0x0ec7  */
    /* JADX WARN: Removed duplicated region for block: B:750:0x0ecc  */
    /* JADX WARN: Removed duplicated region for block: B:752:0x0ed1  */
    /* JADX WARN: Removed duplicated region for block: B:754:0x0ed6  */
    /* JADX WARN: Removed duplicated region for block: B:756:0x0edb  */
    /* JADX WARN: Removed duplicated region for block: B:758:0x0ee0  */
    /* JADX WARN: Removed duplicated region for block: B:760:0x0ee5  */
    /* JADX WARN: Removed duplicated region for block: B:762:0x0eea  */
    /* JADX WARN: Removed duplicated region for block: B:764:0x0eef  */
    /* JADX WARN: Removed duplicated region for block: B:766:0x0ef4  */
    /* JADX WARN: Removed duplicated region for block: B:770:0x0ab4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:786:0x0c6f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:792:0x040d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:804:0x0c35 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:831:0x02f3 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:839:0x0c47 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:855:0x0c1a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:857:0x0c7d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:870:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:872:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r13v100 */
    /* JADX WARN: Type inference failed for: r13v102 */
    /* JADX WARN: Type inference failed for: r13v103 */
    /* JADX WARN: Type inference failed for: r13v104 */
    /* JADX WARN: Type inference failed for: r13v105 */
    /* JADX WARN: Type inference failed for: r13v106 */
    /* JADX WARN: Type inference failed for: r13v108 */
    /* JADX WARN: Type inference failed for: r13v19 */
    /* JADX WARN: Type inference failed for: r13v20 */
    /* JADX WARN: Type inference failed for: r13v5, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r13v6, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r13v82 */
    /* JADX WARN: Type inference failed for: r13v83 */
    /* JADX WARN: Type inference failed for: r13v86 */
    /* JADX WARN: Type inference failed for: r13v87 */
    /* JADX WARN: Type inference failed for: r13v98 */
    /* JADX WARN: Type inference failed for: r13v99 */
    /* JADX WARN: Type inference failed for: r1v174 */
    /* JADX WARN: Type inference failed for: r1v175 */
    /* JADX WARN: Type inference failed for: r1v34 */
    /* JADX WARN: Type inference failed for: r1v35 */
    /* JADX WARN: Type inference failed for: r49v0, types: [org.telegram.messenger.MessagesStorage, org.telegram.messenger.BaseController] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$putMessages$218(int i, TLRPC$messages_Messages tLRPC$messages_Messages, long j, long j2, int i2, int i3, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        Exception exc;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        SQLiteCursor sQLiteCursor2;
        SQLiteDatabase sQLiteDatabase2;
        long clientUserId;
        boolean z2;
        long j3;
        int i4;
        int i5;
        long j4;
        int i6;
        int size;
        long j5;
        SQLitePreparedStatement executeFast;
        SQLitePreparedStatement sQLitePreparedStatement14;
        long j6;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement executeFast2;
        int i7;
        Integer num;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLitePreparedStatement sQLitePreparedStatement17;
        int i8;
        SQLitePreparedStatement sQLitePreparedStatement18;
        HashMap hashMap;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        SQLitePreparedStatement sQLitePreparedStatement21;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement sQLitePreparedStatement23;
        boolean z3;
        boolean z4;
        SQLitePreparedStatement sQLitePreparedStatement24;
        SQLitePreparedStatement sQLitePreparedStatement25;
        SQLitePreparedStatement sQLitePreparedStatement26;
        SQLitePreparedStatement sQLitePreparedStatement27;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement28;
        Exception e;
        boolean z5;
        final ArrayList arrayList;
        SQLitePreparedStatement sQLitePreparedStatement29;
        SQLitePreparedStatement sQLitePreparedStatement30;
        TLRPC$Message tLRPC$Message;
        int i9;
        ArrayList arrayList2;
        Integer num2;
        long j7;
        Long l;
        int i10;
        SQLitePreparedStatement sQLitePreparedStatement31;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        SQLiteCursor sQLiteCursor5;
        int i11;
        ArrayList arrayList3;
        ArrayList arrayList4;
        HashMap hashMap2;
        int i12;
        TLRPC$Message tLRPC$Message2;
        long j8;
        int i13;
        int i14;
        int i15;
        ArrayList<File> arrayList5;
        long j9;
        ArrayList arrayList6;
        SQLitePreparedStatement sQLitePreparedStatement32;
        int i16;
        int i17;
        TLRPC$Message tLRPC$Message3;
        int i18;
        TLRPC$Message tLRPC$Message4;
        TLRPC$Message tLRPC$Message5;
        boolean z6;
        boolean z7;
        NativeByteBuffer byteBufferValue;
        TLRPC$Photo tLRPC$Photo;
        TLRPC$Photo tLRPC$Photo2;
        SQLiteCursor sQLiteCursor6;
        int i19;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        HashMap hashMap3;
        TLRPC$Message tLRPC$Message6;
        int i20;
        long j10;
        long j11;
        SQLitePreparedStatement sQLitePreparedStatement33;
        SQLitePreparedStatement sQLitePreparedStatement34;
        int i21;
        int i22;
        int i23;
        NativeByteBuffer nativeByteBuffer;
        ArrayList arrayList7;
        int i24;
        NativeByteBuffer nativeByteBuffer2;
        int i25;
        ArrayList<File> arrayList8;
        int i26;
        int i27;
        int i28;
        int i29;
        int i30;
        SQLitePreparedStatement executeFast3;
        ArrayList<TLRPC$Message> arrayList9;
        SQLitePreparedStatement sQLitePreparedStatement35;
        int i31;
        SQLiteDatabase sQLiteDatabase3;
        int i32 = i;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        long j12 = j;
        int i33 = i2;
        int i34 = 0;
        int i35 = 1;
        try {
            clientUserId = getUserConfig().getClientUserId();
            z2 = i32 == 1;
            j3 = 0;
        } catch (Exception e2) {
            sQLitePreparedStatement5 = null;
            exc = e2;
            sQLitePreparedStatement6 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
        } catch (Throwable th3) {
            sQLitePreparedStatement = null;
            th = th3;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
        }
        try {
            try {
                if (i32 == 5) {
                    sQLitePreparedStatement35 = this.database.executeFast("REPLACE INTO quick_replies_messages VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                    int size2 = tLRPC$messages_Messages2.messages.size();
                    int i36 = 0;
                    while (i36 < size2) {
                        TLRPC$Message tLRPC$Message7 = tLRPC$messages_Messages2.messages.get(i36);
                        if (!(tLRPC$Message7 instanceof TLRPC$TL_messageEmpty)) {
                            long quickReplyId = MessageObject.getQuickReplyId(this.currentAccount, tLRPC$Message7);
                            if (quickReplyId != j3) {
                                try {
                                    this.database.executeFast(String.format(Locale.ENGLISH, "DELETE FROM quick_replies_messages WHERE mid = %d AND topic_id = %d", Integer.valueOf(tLRPC$Message7.id), Long.valueOf(quickReplyId))).stepThis().dispose();
                                } catch (Exception e3) {
                                    exc = e3;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement35;
                                    z4 = false;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLiteCursor2 = z4;
                                    try {
                                        checkSQLException(exc);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLiteCursor2 == 0) {
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        sQLiteCursor = sQLiteCursor2;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                            sQLiteDatabase.commitTransaction();
                                        }
                                        if (sQLitePreparedStatement4 != null) {
                                            sQLitePreparedStatement4.dispose();
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                            sQLitePreparedStatement13.dispose();
                                        }
                                        if (sQLitePreparedStatement7 != null) {
                                            sQLitePreparedStatement7.dispose();
                                        }
                                        if (sQLitePreparedStatement8 != null) {
                                            sQLitePreparedStatement8.dispose();
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                            sQLitePreparedStatement12.dispose();
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                            sQLitePreparedStatement10.dispose();
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                            sQLitePreparedStatement11.dispose();
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                            sQLitePreparedStatement9.dispose();
                                        }
                                        if (sQLiteCursor != 0) {
                                            sQLiteCursor.dispose();
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    sQLitePreparedStatement7 = sQLitePreparedStatement35;
                                    z3 = false;
                                    sQLitePreparedStatement4 = null;
                                    sQLitePreparedStatement9 = null;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    sQLitePreparedStatement12 = null;
                                    sQLitePreparedStatement13 = null;
                                    sQLitePreparedStatement8 = null;
                                    sQLiteCursor = z3;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLitePreparedStatement4 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement7 != null) {
                                    }
                                    if (sQLitePreparedStatement8 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLiteCursor != 0) {
                                    }
                                    throw th;
                                }
                            }
                            fixUnsupportedMedia(tLRPC$Message7);
                            MessageObject.normalizeFlags(tLRPC$Message7);
                            sQLitePreparedStatement35.requery();
                            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message7.getObjectSize());
                            tLRPC$Message7.serializeToStream(nativeByteBuffer3);
                            sQLitePreparedStatement35.bindInteger(1, tLRPC$Message7.id);
                            sQLitePreparedStatement35.bindLong(2, quickReplyId);
                            sQLitePreparedStatement35.bindInteger(3, tLRPC$Message7.send_state);
                            sQLitePreparedStatement35.bindInteger(4, tLRPC$Message7.date);
                            sQLitePreparedStatement35.bindByteBuffer(5, nativeByteBuffer3);
                            sQLitePreparedStatement35.bindInteger(6, tLRPC$Message7.ttl);
                            sQLitePreparedStatement35.step();
                            nativeByteBuffer3.reuse();
                            i35 = 1;
                        }
                        i36 += i35;
                        j3 = 0;
                    }
                    sQLitePreparedStatement35.dispose();
                    putUsersInternal(tLRPC$messages_Messages2.users);
                    putChatsInternal(tLRPC$messages_Messages2.chats);
                    this.database.commitTransaction();
                } else if (z2) {
                    try {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM scheduled_messages_v2 WHERE uid = %d AND mid > 0", Long.valueOf(j))).stepThis().dispose();
                        SQLitePreparedStatement executeFast4 = this.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)");
                        int size3 = tLRPC$messages_Messages2.messages.size();
                        while (i34 < size3) {
                            TLRPC$Message tLRPC$Message8 = tLRPC$messages_Messages2.messages.get(i34);
                            if (tLRPC$Message8 instanceof TLRPC$TL_messageEmpty) {
                                i31 = 1;
                            } else {
                                fixUnsupportedMedia(tLRPC$Message8);
                                MessageObject.normalizeFlags(tLRPC$Message8);
                                executeFast4.requery();
                                NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$Message8.getObjectSize());
                                tLRPC$Message8.serializeToStream(nativeByteBuffer4);
                                executeFast4.bindInteger(1, tLRPC$Message8.id);
                                executeFast4.bindLong(2, j12);
                                executeFast4.bindInteger(3, tLRPC$Message8.send_state);
                                executeFast4.bindInteger(4, tLRPC$Message8.date);
                                executeFast4.bindByteBuffer(5, nativeByteBuffer4);
                                executeFast4.bindInteger(6, tLRPC$Message8.ttl);
                                executeFast4.step();
                                nativeByteBuffer4.reuse();
                                i31 = 1;
                            }
                            i34 += i31;
                        }
                        executeFast4.dispose();
                        putUsersInternal(tLRPC$messages_Messages2.users);
                        putChatsInternal(tLRPC$messages_Messages2.chats);
                        this.database.commitTransaction();
                        broadcastScheduledMessagesChange(Long.valueOf(j));
                    } catch (Exception e4) {
                        exc = e4;
                        sQLitePreparedStatement35 = null;
                        sQLitePreparedStatement7 = sQLitePreparedStatement35;
                        z4 = false;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement12 = null;
                        sQLitePreparedStatement13 = null;
                        sQLitePreparedStatement8 = null;
                        sQLiteCursor2 = z4;
                        checkSQLException(exc);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLiteCursor2 == 0) {
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        sQLitePreparedStatement35 = null;
                        sQLitePreparedStatement7 = sQLitePreparedStatement35;
                        z3 = false;
                        sQLitePreparedStatement4 = null;
                        sQLitePreparedStatement9 = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement12 = null;
                        sQLitePreparedStatement13 = null;
                        sQLitePreparedStatement8 = null;
                        sQLiteCursor = z3;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLiteCursor != 0) {
                        }
                        throw th;
                    }
                } else {
                    String str = j2 != 0 ? "messages_holes_topics" : "messages_holes";
                    if (tLRPC$messages_Messages2.messages.isEmpty()) {
                        if (i33 == 0) {
                            doneHolesInTable(str, j, i3, j2);
                            doneHolesInMedia(j, i3, -1, j2);
                        }
                        SQLiteDatabase sQLiteDatabase4 = this.database;
                        if (sQLiteDatabase4 != null) {
                            sQLiteDatabase4.commitTransaction();
                            return;
                        }
                        return;
                    }
                    this.database.beginTransaction();
                    try {
                        try {
                            try {
                                try {
                                    if (i33 == 0) {
                                        int i37 = tLRPC$messages_Messages2.messages.get(arrayList9.size() - 1).id;
                                        j4 = clientUserId;
                                        closeHolesInTable(str, j, i37, i3, j2);
                                        closeHolesInMedia(j, i37, i3, -1, j2);
                                    } else {
                                        j4 = clientUserId;
                                        if (i33 == 1) {
                                            int i38 = tLRPC$messages_Messages2.messages.get(0).id;
                                            closeHolesInTable(str, j, i3, i38, j2);
                                            closeHolesInMedia(j, i3, i38, -1, j2);
                                        } else {
                                            if (i33 != 3) {
                                                i6 = 4;
                                                if (i33 != 2) {
                                                }
                                            } else {
                                                i6 = 4;
                                            }
                                            int i39 = (i3 != 0 || i33 == i6) ? tLRPC$messages_Messages2.messages.get(0).id : ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            ArrayList<TLRPC$Message> arrayList10 = tLRPC$messages_Messages2.messages;
                                            int i40 = arrayList10.get(arrayList10.size() - 1).id;
                                            closeHolesInTable(str, j, i40, i39, j2);
                                            closeHolesInMedia(j, i40, i39, -1, j2);
                                            size = tLRPC$messages_Messages2.messages.size();
                                            ArrayList<File> arrayList11 = new ArrayList<>();
                                            ArrayList arrayList12 = new ArrayList();
                                            ArrayList arrayList13 = new ArrayList();
                                            j5 = j4;
                                            ArrayList arrayList14 = j12 != j5 ? new ArrayList() : null;
                                            sQLitePreparedStatement4 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                                            executeFast = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                                            sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                                            sQLitePreparedStatement14 = sQLitePreparedStatement3;
                                            SQLitePreparedStatement executeFast5 = this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                                            if (j5 != j12) {
                                                try {
                                                    ArrayList arrayList15 = new ArrayList();
                                                    j6 = j5;
                                                    for (int i41 = 0; i41 < size; i41++) {
                                                        arrayList15.add(Integer.valueOf(tLRPC$messages_Messages2.messages.get(i41).id));
                                                    }
                                                    SQLiteDatabase sQLiteDatabase5 = this.database;
                                                    StringBuilder sb = new StringBuilder();
                                                    sQLitePreparedStatement15 = executeFast5;
                                                    sb.append("DELETE FROM tag_message_id WHERE mid IN (");
                                                    sb.append(TextUtils.join(",", arrayList15));
                                                    sb.append(")");
                                                    sQLiteDatabase5.executeFast(sb.toString()).stepThis().dispose();
                                                    executeFast2 = this.database.executeFast("REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)");
                                                } catch (Exception e5) {
                                                    exc = e5;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                    sQLiteCursor2 = 0;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                    sQLiteCursor = 0;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement10 = null;
                                                    sQLitePreparedStatement11 = null;
                                                    sQLitePreparedStatement12 = null;
                                                    sQLitePreparedStatement13 = null;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                j6 = j5;
                                                sQLitePreparedStatement15 = executeFast5;
                                                executeFast2 = null;
                                            }
                                            i7 = 0;
                                            Long l2 = null;
                                            int i42 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            HashMap hashMap4 = null;
                                            long j13 = 0;
                                            num = null;
                                            sQLitePreparedStatement10 = null;
                                            sQLitePreparedStatement11 = null;
                                            sQLitePreparedStatement12 = null;
                                            ArrayList arrayList16 = null;
                                            int i43 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            while (i7 < size) {
                                                int i44 = i42;
                                                try {
                                                    tLRPC$Message = tLRPC$messages_Messages2.messages.get(i7);
                                                } catch (Exception e6) {
                                                    sQLitePreparedStatement18 = executeFast2;
                                                    exc = e6;
                                                    sQLitePreparedStatement22 = sQLitePreparedStatement14;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                } catch (Throwable th8) {
                                                    sQLitePreparedStatement18 = executeFast2;
                                                    th = th8;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement14;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                }
                                                try {
                                                    try {
                                                        try {
                                                            if (num != null || tLRPC$Message == null) {
                                                                if (num != null) {
                                                                    i9 = i7;
                                                                    try {
                                                                        sQLitePreparedStatement13 = executeFast2;
                                                                    } catch (Exception e7) {
                                                                        e = e7;
                                                                        sQLitePreparedStatement13 = executeFast2;
                                                                        exc = e;
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement14;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement21 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor2 = sQLitePreparedStatement21;
                                                                        checkSQLException(exc);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 == 0) {
                                                                        }
                                                                    } catch (Throwable th9) {
                                                                        th = th9;
                                                                        sQLitePreparedStatement13 = executeFast2;
                                                                        th = th;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement14;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement19 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor = sQLitePreparedStatement19;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    i9 = i7;
                                                                    sQLitePreparedStatement13 = executeFast2;
                                                                }
                                                                arrayList2 = arrayList12;
                                                                num2 = num;
                                                                j7 = 0;
                                                                l = l2;
                                                                if (j13 == j7) {
                                                                    j13 = tLRPC$Message.peer_id.channel_id;
                                                                }
                                                                if (i33 != -2) {
                                                                    try {
                                                                        SQLiteDatabase sQLiteDatabase6 = this.database;
                                                                        Locale locale = Locale.US;
                                                                        Integer valueOf = Integer.valueOf(tLRPC$Message.id);
                                                                        Long valueOf2 = Long.valueOf(MessageObject.getDialogId(tLRPC$Message));
                                                                        i10 = size;
                                                                        try {
                                                                            try {
                                                                                Object[] objArr = new Object[2];
                                                                                try {
                                                                                    objArr[0] = valueOf;
                                                                                    objArr[1] = valueOf2;
                                                                                    SQLiteCursor queryFinalized = sQLiteDatabase6.queryFinalized(String.format(locale, "SELECT mid, data, ttl, mention, read_state, send_state, custom_params FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                                                                                    try {
                                                                                        boolean next = queryFinalized.next();
                                                                                        if (next) {
                                                                                            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(1);
                                                                                            if (byteBufferValue2 != null) {
                                                                                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                                                                TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                                                                byteBufferValue2.reuse();
                                                                                                if (arrayList14 != null) {
                                                                                                    sQLitePreparedStatement7 = executeFast;
                                                                                                    arrayList4 = arrayList14;
                                                                                                    long j14 = j6;
                                                                                                    hashMap2 = hashMap4;
                                                                                                    i12 = i43;
                                                                                                    i18 = i44;
                                                                                                    j8 = j14;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                                    tLRPC$Message3 = TLdeserialize;
                                                                                                    arrayList3 = arrayList2;
                                                                                                    try {
                                                                                                        arrayList4.add(new SavedReactionsUpdate(j8, TLdeserialize, tLRPC$Message));
                                                                                                    } catch (Exception e8) {
                                                                                                        e = e8;
                                                                                                        exc = e;
                                                                                                        sQLiteCursor5 = queryFinalized;
                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                        sQLiteCursor3 = sQLiteCursor5;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLiteCursor2 = sQLiteCursor3;
                                                                                                        checkSQLException(exc);
                                                                                                        sQLiteDatabase2 = this.database;
                                                                                                        if (sQLiteDatabase2 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor2 == 0) {
                                                                                                        }
                                                                                                    } catch (Throwable th10) {
                                                                                                        th = th10;
                                                                                                        th = th;
                                                                                                        sQLiteCursor4 = queryFinalized;
                                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                        sQLiteCursor6 = sQLiteCursor4;
                                                                                                        sQLitePreparedStatement9 = null;
                                                                                                        sQLiteCursor = sQLiteCursor6;
                                                                                                        sQLiteDatabase = this.database;
                                                                                                        if (sQLiteDatabase != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                                        }
                                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                                        }
                                                                                                        if (sQLiteCursor != 0) {
                                                                                                        }
                                                                                                        throw th;
                                                                                                    }
                                                                                                } else {
                                                                                                    tLRPC$Message3 = TLdeserialize;
                                                                                                    sQLitePreparedStatement7 = executeFast;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                                    arrayList3 = arrayList2;
                                                                                                    arrayList4 = arrayList14;
                                                                                                    long j15 = j6;
                                                                                                    hashMap2 = hashMap4;
                                                                                                    i12 = i43;
                                                                                                    i18 = i44;
                                                                                                    j8 = j15;
                                                                                                }
                                                                                                if (queryFinalized.intValue(5) != 3) {
                                                                                                    if (MessageObject.getFileName(tLRPC$Message3).equals(MessageObject.getFileName(tLRPC$Message))) {
                                                                                                        tLRPC$Message4 = tLRPC$Message3;
                                                                                                        tLRPC$Message5 = tLRPC$Message;
                                                                                                        tLRPC$Message5.attachPath = tLRPC$Message4.attachPath;
                                                                                                    } else {
                                                                                                        tLRPC$Message4 = tLRPC$Message3;
                                                                                                        tLRPC$Message5 = tLRPC$Message;
                                                                                                    }
                                                                                                    tLRPC$Message5.ttl = queryFinalized.intValue(2);
                                                                                                } else {
                                                                                                    tLRPC$Message4 = tLRPC$Message3;
                                                                                                    tLRPC$Message5 = tLRPC$Message;
                                                                                                }
                                                                                                TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message4.media;
                                                                                                if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto) {
                                                                                                    TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message5.media;
                                                                                                    if ((tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) && (tLRPC$Photo = tLRPC$MessageMedia2.photo) != null && (tLRPC$Photo2 = tLRPC$MessageMedia3.photo) != null) {
                                                                                                        i17 = i18;
                                                                                                        if (tLRPC$Photo.id == tLRPC$Photo2.id) {
                                                                                                            z6 = true;
                                                                                                            z7 = tLRPC$Message4.out;
                                                                                                            if (z7 && !tLRPC$Message5.out) {
                                                                                                                tLRPC$Message5.out = z7;
                                                                                                            }
                                                                                                            if (z6) {
                                                                                                                tLRPC$Message2 = tLRPC$Message5;
                                                                                                            } else {
                                                                                                                tLRPC$Message2 = tLRPC$Message5;
                                                                                                                addFilesToDelete(tLRPC$Message4, arrayList11, arrayList13, arrayList3, false);
                                                                                                            }
                                                                                                            byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                            MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue);
                                                                                                            if (byteBufferValue != null) {
                                                                                                                byteBufferValue.reuse();
                                                                                                            }
                                                                                                        }
                                                                                                        z6 = false;
                                                                                                        z7 = tLRPC$Message4.out;
                                                                                                        if (z7) {
                                                                                                            tLRPC$Message5.out = z7;
                                                                                                        }
                                                                                                        if (z6) {
                                                                                                        }
                                                                                                        byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                        MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue);
                                                                                                        if (byteBufferValue != null) {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                i17 = i18;
                                                                                                if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) {
                                                                                                    TLRPC$MessageMedia tLRPC$MessageMedia4 = tLRPC$Message5.media;
                                                                                                    if (tLRPC$MessageMedia4 instanceof TLRPC$TL_messageMediaDocument) {
                                                                                                        TLRPC$Document tLRPC$Document = tLRPC$MessageMedia2.document;
                                                                                                        if (tLRPC$Document != null) {
                                                                                                            TLRPC$Document tLRPC$Document2 = tLRPC$MessageMedia4.document;
                                                                                                            if (tLRPC$Document2 != null) {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                z6 = false;
                                                                                                z7 = tLRPC$Message4.out;
                                                                                                if (z7) {
                                                                                                }
                                                                                                if (z6) {
                                                                                                }
                                                                                                byteBufferValue = queryFinalized.byteBufferValue(6);
                                                                                                MessageCustomParamsHelper.readLocalParams(tLRPC$Message2, byteBufferValue);
                                                                                                if (byteBufferValue != null) {
                                                                                                }
                                                                                            } else {
                                                                                                sQLitePreparedStatement7 = executeFast;
                                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                                i17 = i44;
                                                                                                arrayList3 = arrayList2;
                                                                                                arrayList4 = arrayList14;
                                                                                                long j16 = j6;
                                                                                                hashMap2 = hashMap4;
                                                                                                i12 = i43;
                                                                                                tLRPC$Message2 = tLRPC$Message;
                                                                                                j8 = j16;
                                                                                            }
                                                                                            boolean z8 = queryFinalized.intValue(3) != 0;
                                                                                            int intValue = queryFinalized.intValue(4);
                                                                                            i11 = i17;
                                                                                            if (z8 != tLRPC$Message2.mentioned) {
                                                                                                if (i11 == Integer.MAX_VALUE) {
                                                                                                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j12, new Object[0]);
                                                                                                    if (queryFinalized2.next()) {
                                                                                                        i11 = queryFinalized2.intValue(0);
                                                                                                    }
                                                                                                    queryFinalized2.dispose();
                                                                                                }
                                                                                                if (z8) {
                                                                                                    if (intValue <= 1) {
                                                                                                        i13 = i11 - 1;
                                                                                                        queryFinalized.dispose();
                                                                                                        if (!next) {
                                                                                                            i14 = i2;
                                                                                                            i15 = i13;
                                                                                                            arrayList5 = arrayList11;
                                                                                                            j9 = j12;
                                                                                                            arrayList6 = arrayList4;
                                                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                                                            hashMap4 = hashMap2;
                                                                                                            i16 = i12;
                                                                                                            sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                                                            sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                                                                            i33 = i14;
                                                                                                            i7 = i9 + 1;
                                                                                                            executeFast2 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                                                            j12 = j9;
                                                                                                            i42 = i15;
                                                                                                            arrayList12 = arrayList3;
                                                                                                            l2 = l;
                                                                                                            num = num2;
                                                                                                            j6 = j8;
                                                                                                            arrayList14 = arrayList6;
                                                                                                            arrayList11 = arrayList5;
                                                                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                            i43 = i16;
                                                                                                            size = i10;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                        }
                                                                                                    }
                                                                                                } else if (tLRPC$Message2.media_unread) {
                                                                                                    i13 = i11 + 1;
                                                                                                    queryFinalized.dispose();
                                                                                                    if (!next) {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                            i11 = i44;
                                                                                            arrayList3 = arrayList2;
                                                                                            arrayList4 = arrayList14;
                                                                                            long j17 = j6;
                                                                                            hashMap2 = hashMap4;
                                                                                            i12 = i43;
                                                                                            tLRPC$Message2 = tLRPC$Message;
                                                                                            j8 = j17;
                                                                                        }
                                                                                        i13 = i11;
                                                                                        queryFinalized.dispose();
                                                                                        if (!next) {
                                                                                        }
                                                                                    } catch (Exception e9) {
                                                                                        e = e9;
                                                                                        sQLitePreparedStatement7 = executeFast;
                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                    } catch (Throwable th11) {
                                                                                        th = th11;
                                                                                        sQLitePreparedStatement7 = executeFast;
                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                    }
                                                                                } catch (Exception e10) {
                                                                                    sQLitePreparedStatement7 = executeFast;
                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                    exc = e10;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                    sQLiteCursor3 = null;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLiteCursor2 = sQLiteCursor3;
                                                                                    checkSQLException(exc);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor2 == 0) {
                                                                                    }
                                                                                }
                                                                            } catch (Exception e11) {
                                                                                sQLitePreparedStatement7 = executeFast;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                                exc = e11;
                                                                            }
                                                                        } catch (Throwable th12) {
                                                                            sQLitePreparedStatement7 = executeFast;
                                                                            th = th12;
                                                                            sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                            sQLitePreparedStatement31 = sQLitePreparedStatement14;
                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement31;
                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                            sQLiteCursor6 = null;
                                                                            sQLitePreparedStatement9 = null;
                                                                            sQLiteCursor = sQLiteCursor6;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement4 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement7 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement8 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLiteCursor != 0) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e12) {
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                        exc = e12;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement8;
                                                                        sQLitePreparedStatement21 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor2 = sQLitePreparedStatement21;
                                                                        checkSQLException(exc);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 == 0) {
                                                                        }
                                                                    } catch (Throwable th13) {
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                        th = th13;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                        sQLitePreparedStatement19 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor = sQLitePreparedStatement19;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    i10 = size;
                                                                    sQLitePreparedStatement7 = executeFast;
                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement14;
                                                                    arrayList3 = arrayList2;
                                                                    arrayList4 = arrayList14;
                                                                    HashMap hashMap5 = hashMap4;
                                                                    tLRPC$Message2 = tLRPC$Message;
                                                                    long j18 = j6;
                                                                    hashMap2 = hashMap5;
                                                                    i12 = i43;
                                                                    j8 = j18;
                                                                    i13 = i44;
                                                                }
                                                                if (i9 != 0 && z) {
                                                                    try {
                                                                        SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = " + j12, new Object[0]);
                                                                        try {
                                                                            boolean next2 = queryFinalized3.next();
                                                                            if (next2) {
                                                                                i29 = queryFinalized3.intValue(0);
                                                                                int intValue2 = queryFinalized3.intValue(1);
                                                                                i30 = queryFinalized3.intValue(2);
                                                                                i28 = intValue2;
                                                                            } else {
                                                                                i28 = 0;
                                                                                i29 = 0;
                                                                                i30 = 0;
                                                                            }
                                                                            queryFinalized3.dispose();
                                                                            if (next2) {
                                                                                try {
                                                                                    executeFast3 = this.database.executeFast("UPDATE dialogs SET date = ?, last_mid = ?, last_mid_group = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?");
                                                                                    try {
                                                                                        executeFast3.bindInteger(1, tLRPC$Message2.date);
                                                                                        executeFast3.bindInteger(2, tLRPC$Message2.id);
                                                                                        if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                            executeFast3.bindLong(3, tLRPC$Message2.grouped_id);
                                                                                        } else {
                                                                                            executeFast3.bindNull(3);
                                                                                        }
                                                                                        executeFast3.bindInteger(4, tLRPC$Message2.id);
                                                                                        executeFast3.bindInteger(5, tLRPC$Message2.id);
                                                                                        executeFast3.bindInteger(6, tLRPC$messages_Messages2.pts);
                                                                                        executeFast3.bindInteger(7, tLRPC$Message2.date);
                                                                                        executeFast3.bindLong(8, j12);
                                                                                    } catch (Exception e13) {
                                                                                        exc = e13;
                                                                                        sQLitePreparedStatement9 = executeFast3;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                        sQLiteCursor2 = 0;
                                                                                        checkSQLException(exc);
                                                                                        sQLiteDatabase2 = this.database;
                                                                                        if (sQLiteDatabase2 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLiteCursor2 == 0) {
                                                                                        }
                                                                                    } catch (Throwable th14) {
                                                                                        th = th14;
                                                                                        sQLitePreparedStatement9 = executeFast3;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                        sQLiteCursor = 0;
                                                                                        sQLiteDatabase = this.database;
                                                                                        if (sQLiteDatabase != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLiteCursor != 0) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Exception e14) {
                                                                                    exc = e14;
                                                                                    queryFinalized3 = null;
                                                                                    sQLiteCursor5 = queryFinalized3;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                    sQLiteCursor3 = sQLiteCursor5;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLiteCursor2 = sQLiteCursor3;
                                                                                    checkSQLException(exc);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor2 == 0) {
                                                                                    }
                                                                                } catch (Throwable th15) {
                                                                                    th = th15;
                                                                                    queryFinalized3 = null;
                                                                                    sQLiteCursor4 = queryFinalized3;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                    sQLiteCursor6 = sQLiteCursor4;
                                                                                    sQLitePreparedStatement9 = null;
                                                                                    sQLiteCursor = sQLiteCursor6;
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor != 0) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            } else {
                                                                                executeFast3 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                                try {
                                                                                    executeFast3.bindLong(1, j12);
                                                                                    executeFast3.bindInteger(2, tLRPC$Message2.date);
                                                                                    executeFast3.bindInteger(3, 0);
                                                                                    executeFast3.bindInteger(4, tLRPC$Message2.id);
                                                                                    executeFast3.bindInteger(5, tLRPC$Message2.id);
                                                                                    executeFast3.bindInteger(6, 0);
                                                                                    executeFast3.bindInteger(7, tLRPC$Message2.id);
                                                                                    executeFast3.bindInteger(8, i28);
                                                                                    executeFast3.bindInteger(9, tLRPC$messages_Messages2.pts);
                                                                                    executeFast3.bindInteger(10, tLRPC$Message2.date);
                                                                                    executeFast3.bindInteger(11, i29);
                                                                                    executeFast3.bindInteger(12, i30);
                                                                                    executeFast3.bindInteger(13, -1);
                                                                                    executeFast3.bindNull(14);
                                                                                    executeFast3.bindInteger(15, 0);
                                                                                    if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                        executeFast3.bindLong(16, tLRPC$Message2.grouped_id);
                                                                                    } else {
                                                                                        executeFast3.bindNull(16);
                                                                                    }
                                                                                    executeFast3.bindInteger(17, 0);
                                                                                    this.unknownDialogsIds.put(j12, Boolean.TRUE);
                                                                                } catch (Exception e15) {
                                                                                    sQLitePreparedStatement9 = executeFast3;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                    sQLiteCursor2 = 0;
                                                                                    exc = e15;
                                                                                    checkSQLException(exc);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor2 == 0) {
                                                                                    }
                                                                                } catch (Throwable th16) {
                                                                                    sQLitePreparedStatement9 = executeFast3;
                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                    sQLiteCursor = 0;
                                                                                    th = th16;
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor != 0) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            }
                                                                            executeFast3.step();
                                                                            executeFast3.dispose();
                                                                        } catch (Exception e16) {
                                                                            exc = e16;
                                                                        } catch (Throwable th17) {
                                                                            th = th17;
                                                                        }
                                                                    } catch (Exception e17) {
                                                                        exc = e17;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        executeFast = sQLitePreparedStatement7;
                                                                        sQLitePreparedStatement22 = sQLitePreparedStatement8;
                                                                        sQLitePreparedStatement21 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor2 = sQLitePreparedStatement21;
                                                                        checkSQLException(exc);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 == 0) {
                                                                        }
                                                                    } catch (Throwable th18) {
                                                                        th = th18;
                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                                        executeFast = sQLitePreparedStatement7;
                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                        sQLitePreparedStatement19 = null;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                        sQLitePreparedStatement7 = executeFast;
                                                                        sQLiteCursor = sQLitePreparedStatement19;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement4 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement7 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement8 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                }
                                                                fixUnsupportedMedia(tLRPC$Message2);
                                                                MessageObject.normalizeFlags(tLRPC$Message2);
                                                                NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                                tLRPC$Message2.serializeToStream(nativeByteBuffer5);
                                                                i19 = 0;
                                                                while (i19 < 2) {
                                                                    boolean z9 = i19 == 1;
                                                                    try {
                                                                        if (z9) {
                                                                            if (j2 == 0) {
                                                                                i20 = i13;
                                                                                j11 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                                            } else {
                                                                                i20 = i13;
                                                                                j11 = j2;
                                                                            }
                                                                            if (j11 == 0) {
                                                                                arrayList8 = arrayList11;
                                                                                arrayList7 = arrayList4;
                                                                                sQLitePreparedStatement34 = sQLitePreparedStatement13;
                                                                                i19++;
                                                                                j12 = j;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement34;
                                                                                i13 = i20;
                                                                                arrayList4 = arrayList7;
                                                                                arrayList11 = arrayList8;
                                                                            } else {
                                                                                j10 = j8;
                                                                                if (j12 == j10 && MessageObject.getSavedDialogId(j10, tLRPC$Message2) != 0) {
                                                                                    if (arrayList16 == null) {
                                                                                        arrayList16 = new ArrayList();
                                                                                    }
                                                                                    ArrayList arrayList17 = arrayList16;
                                                                                    arrayList17.add(tLRPC$Message2);
                                                                                    arrayList16 = arrayList17;
                                                                                }
                                                                                sQLitePreparedStatement33 = sQLitePreparedStatement4;
                                                                            }
                                                                        } else {
                                                                            i20 = i13;
                                                                            j10 = j8;
                                                                            j11 = j2;
                                                                            sQLitePreparedStatement33 = sQLitePreparedStatement7;
                                                                        }
                                                                        sQLitePreparedStatement33.requery();
                                                                        j8 = j10;
                                                                        sQLitePreparedStatement33.bindInteger(1, tLRPC$Message2.id);
                                                                        sQLitePreparedStatement33.bindLong(2, j12);
                                                                        if (z9) {
                                                                            sQLitePreparedStatement33.bindLong(3, j11);
                                                                            i21 = 4;
                                                                        } else {
                                                                            i21 = 3;
                                                                        }
                                                                        int i45 = i21 + 1;
                                                                        sQLitePreparedStatement33.bindInteger(i21, MessageObject.getUnreadFlags(tLRPC$Message2));
                                                                        sQLitePreparedStatement33.bindInteger(i45, tLRPC$Message2.send_state);
                                                                        sQLitePreparedStatement33.bindInteger(i21 + 2, tLRPC$Message2.date);
                                                                        int i46 = i21 + 4;
                                                                        sQLitePreparedStatement33.bindByteBuffer(i21 + 3, nativeByteBuffer5);
                                                                        int i47 = i21 + 5;
                                                                        sQLitePreparedStatement33.bindInteger(i46, (MessageObject.isOut(tLRPC$Message2) || tLRPC$Message2.from_scheduled) ? 1 : 0);
                                                                        int i48 = i21 + 6;
                                                                        sQLitePreparedStatement33.bindInteger(i47, tLRPC$Message2.ttl);
                                                                        if ((tLRPC$Message2.flags & 1024) != 0) {
                                                                            i22 = i21 + 7;
                                                                            sQLitePreparedStatement33.bindInteger(i48, tLRPC$Message2.views);
                                                                        } else {
                                                                            i22 = i21 + 7;
                                                                            sQLitePreparedStatement33.bindInteger(i48, getMessageMediaType(tLRPC$Message2));
                                                                        }
                                                                        if (tLRPC$Message2.replyStory != null) {
                                                                            nativeByteBuffer = new NativeByteBuffer(tLRPC$Message2.replyStory.getObjectSize());
                                                                            tLRPC$Message2.replyStory.serializeToStream(nativeByteBuffer);
                                                                            int i49 = i22 + 1;
                                                                            sQLitePreparedStatement33.bindByteBuffer(i22, nativeByteBuffer);
                                                                            i23 = i49;
                                                                        } else {
                                                                            int i50 = i22 + 1;
                                                                            sQLitePreparedStatement33.bindNull(i22);
                                                                            i23 = i50;
                                                                            nativeByteBuffer = null;
                                                                        }
                                                                        int i51 = tLRPC$Message2.stickerVerified;
                                                                        sQLitePreparedStatement33.bindInteger(i23, i51 == 0 ? 1 : i51 == 2 ? 2 : 0);
                                                                        arrayList7 = arrayList4;
                                                                        sQLitePreparedStatement33.bindInteger(i23 + 1, tLRPC$Message2.mentioned ? 1 : 0);
                                                                        int i52 = i23 + 3;
                                                                        sQLitePreparedStatement33.bindInteger(i23 + 2, tLRPC$Message2.forwards);
                                                                        if (tLRPC$Message2.replies != null) {
                                                                            nativeByteBuffer2 = new NativeByteBuffer(tLRPC$Message2.replies.getObjectSize());
                                                                            tLRPC$Message2.replies.serializeToStream(nativeByteBuffer2);
                                                                            i24 = i23 + 4;
                                                                            sQLitePreparedStatement33.bindByteBuffer(i52, nativeByteBuffer2);
                                                                        } else {
                                                                            i24 = i23 + 4;
                                                                            sQLitePreparedStatement33.bindNull(i52);
                                                                            nativeByteBuffer2 = null;
                                                                        }
                                                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message2.reply_to;
                                                                        if (tLRPC$MessageReplyHeader != null) {
                                                                            int i53 = i24 + 1;
                                                                            int i54 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                            if (i54 == 0) {
                                                                                i54 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                            }
                                                                            sQLitePreparedStatement33.bindInteger(i24, i54);
                                                                            i25 = i53;
                                                                        } else {
                                                                            int i55 = i24 + 1;
                                                                            sQLitePreparedStatement33.bindInteger(i24, 0);
                                                                            i25 = i55;
                                                                        }
                                                                        int i56 = i25 + 1;
                                                                        arrayList8 = arrayList11;
                                                                        sQLitePreparedStatement33.bindLong(i25, MessageObject.getChannelId(tLRPC$Message2));
                                                                        NativeByteBuffer writeLocalParams = MessageCustomParamsHelper.writeLocalParams(tLRPC$Message2);
                                                                        if (writeLocalParams == null) {
                                                                            i26 = i25 + 2;
                                                                            sQLitePreparedStatement33.bindNull(i56);
                                                                        } else {
                                                                            i26 = i25 + 2;
                                                                            sQLitePreparedStatement33.bindByteBuffer(i56, writeLocalParams);
                                                                        }
                                                                        if (!z9) {
                                                                            if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                                i27 = i26 + 1;
                                                                                sQLitePreparedStatement33.bindLong(i26, tLRPC$Message2.grouped_id);
                                                                            } else {
                                                                                i27 = i26 + 1;
                                                                                sQLitePreparedStatement33.bindNull(i26);
                                                                            }
                                                                            i26 = i27;
                                                                        }
                                                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message2.reply_to;
                                                                        if (tLRPC$MessageReplyHeader2 != null) {
                                                                            sQLitePreparedStatement33.bindInteger(i26, tLRPC$MessageReplyHeader2.story_id);
                                                                        } else {
                                                                            sQLitePreparedStatement33.bindInteger(i26, 0);
                                                                        }
                                                                        sQLitePreparedStatement33.step();
                                                                        if (i19 != 0 || sQLitePreparedStatement13 == null) {
                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement13;
                                                                        } else {
                                                                            sQLitePreparedStatement34 = sQLitePreparedStatement13;
                                                                            try {
                                                                                bindMessageTags(sQLitePreparedStatement34, tLRPC$Message2);
                                                                            } catch (Exception e18) {
                                                                                e = e18;
                                                                                exc = e;
                                                                                sQLitePreparedStatement18 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                executeFast = sQLitePreparedStatement7;
                                                                                sQLitePreparedStatement22 = sQLitePreparedStatement8;
                                                                                sQLitePreparedStatement21 = null;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                                sQLitePreparedStatement7 = executeFast;
                                                                                sQLiteCursor2 = sQLitePreparedStatement21;
                                                                                checkSQLException(exc);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLiteCursor2 == 0) {
                                                                                }
                                                                            } catch (Throwable th19) {
                                                                                th = th19;
                                                                                th = th;
                                                                                sQLitePreparedStatement18 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                executeFast = sQLitePreparedStatement7;
                                                                                sQLitePreparedStatement20 = sQLitePreparedStatement8;
                                                                                sQLitePreparedStatement19 = null;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                sQLitePreparedStatement7 = executeFast;
                                                                                sQLiteCursor = sQLitePreparedStatement19;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLiteCursor != 0) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                        if (nativeByteBuffer2 != null) {
                                                                            nativeByteBuffer2.reuse();
                                                                        }
                                                                        if (writeLocalParams != null) {
                                                                            writeLocalParams.reuse();
                                                                        }
                                                                        if (nativeByteBuffer != null) {
                                                                            nativeByteBuffer.reuse();
                                                                        }
                                                                        i19++;
                                                                        j12 = j;
                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement34;
                                                                        i13 = i20;
                                                                        arrayList4 = arrayList7;
                                                                        arrayList11 = arrayList8;
                                                                    } catch (Exception e19) {
                                                                        e = e19;
                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement13;
                                                                    } catch (Throwable th20) {
                                                                        th = th20;
                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement13;
                                                                    }
                                                                }
                                                                i15 = i13;
                                                                arrayList5 = arrayList11;
                                                                arrayList6 = arrayList4;
                                                                SQLitePreparedStatement sQLitePreparedStatement36 = sQLitePreparedStatement13;
                                                                i14 = i2;
                                                                if (j2 == 0) {
                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement36;
                                                                    if (i14 != -2) {
                                                                        j9 = j;
                                                                        sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                                        long topicId = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                                        if (j2 == 0) {
                                                                            if (i14 == -2) {
                                                                                if (topicId != 0) {
                                                                                }
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                                nativeByteBuffer5.reuse();
                                                                                if (tLRPC$Message2.ttl_period != 0) {
                                                                                    try {
                                                                                        try {
                                                                                            if (tLRPC$Message2.id > 0) {
                                                                                                if (sQLitePreparedStatement11 == null) {
                                                                                                    sQLitePreparedStatement11 = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                                                                                                }
                                                                                                SQLitePreparedStatement sQLitePreparedStatement37 = sQLitePreparedStatement11;
                                                                                                try {
                                                                                                    sQLitePreparedStatement37.requery();
                                                                                                    sQLitePreparedStatement37.bindInteger(1, tLRPC$Message2.id);
                                                                                                    sQLitePreparedStatement37.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                                    sQLitePreparedStatement37.bindInteger(3, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                                    sQLitePreparedStatement37.bindInteger(4, 0);
                                                                                                    sQLitePreparedStatement37.step();
                                                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement37;
                                                                                                    i16 = Math.min(i12, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                                                    tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                                                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                                        if (sQLitePreparedStatement12 == null) {
                                                                                                            sQLitePreparedStatement12 = this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                                                        }
                                                                                                        SQLitePreparedStatement sQLitePreparedStatement38 = sQLitePreparedStatement12;
                                                                                                        try {
                                                                                                            sQLitePreparedStatement38.requery();
                                                                                                            sQLitePreparedStatement38.bindInteger(1, tLRPC$Message2.id);
                                                                                                            sQLitePreparedStatement38.bindLong(2, tLRPC$Message2.dialog_id);
                                                                                                            sQLitePreparedStatement38.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message2.media).poll.id);
                                                                                                            sQLitePreparedStatement38.step();
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement38;
                                                                                                        } catch (Exception e20) {
                                                                                                            exc = e20;
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement38;
                                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                            sQLitePreparedStatement21 = null;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                                            sQLiteCursor2 = sQLitePreparedStatement21;
                                                                                                            checkSQLException(exc);
                                                                                                            sQLiteDatabase2 = this.database;
                                                                                                            if (sQLiteDatabase2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLiteCursor2 == 0) {
                                                                                                            }
                                                                                                        } catch (Throwable th21) {
                                                                                                            th = th21;
                                                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement38;
                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                            sQLitePreparedStatement19 = null;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                                            sQLiteCursor = sQLitePreparedStatement19;
                                                                                                            sQLiteDatabase = this.database;
                                                                                                            if (sQLiteDatabase != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLiteCursor != 0) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                                                                                        if (sQLitePreparedStatement10 == null) {
                                                                                                            sQLitePreparedStatement10 = this.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                                                                                                        }
                                                                                                        SQLitePreparedStatement sQLitePreparedStatement39 = sQLitePreparedStatement10;
                                                                                                        try {
                                                                                                            sQLitePreparedStatement39.requery();
                                                                                                            sQLitePreparedStatement39.bindLong(1, tLRPC$Message2.media.webpage.id);
                                                                                                            sQLitePreparedStatement39.bindInteger(2, tLRPC$Message2.id);
                                                                                                            sQLitePreparedStatement39.bindLong(3, tLRPC$Message2.dialog_id);
                                                                                                            sQLitePreparedStatement39.step();
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement39;
                                                                                                        } catch (Exception e21) {
                                                                                                            exc = e21;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement39;
                                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                            sQLitePreparedStatement21 = null;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                                            sQLiteCursor2 = sQLitePreparedStatement21;
                                                                                                            checkSQLException(exc);
                                                                                                            sQLiteDatabase2 = this.database;
                                                                                                            if (sQLiteDatabase2 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLiteCursor2 == 0) {
                                                                                                            }
                                                                                                        } catch (Throwable th22) {
                                                                                                            th = th22;
                                                                                                            sQLitePreparedStatement10 = sQLitePreparedStatement39;
                                                                                                            sQLitePreparedStatement20 = sQLitePreparedStatement31;
                                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                            sQLitePreparedStatement19 = null;
                                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                                            sQLiteCursor = sQLitePreparedStatement19;
                                                                                                            sQLiteDatabase = this.database;
                                                                                                            if (sQLiteDatabase != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                            }
                                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                            }
                                                                                                            if (sQLiteCursor != 0) {
                                                                                                            }
                                                                                                            throw th;
                                                                                                        }
                                                                                                    }
                                                                                                    if (i14 == 0 || !isValidKeyboardToSave(tLRPC$Message2)) {
                                                                                                        hashMap3 = hashMap2;
                                                                                                    } else {
                                                                                                        TopicKey of = TopicKey.of(j9, MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(j9)));
                                                                                                        if (hashMap2 == null) {
                                                                                                            hashMap3 = hashMap2;
                                                                                                            tLRPC$Message6 = null;
                                                                                                        } else {
                                                                                                            hashMap3 = hashMap2;
                                                                                                            tLRPC$Message6 = (TLRPC$Message) hashMap3.get(of);
                                                                                                        }
                                                                                                        if (tLRPC$Message6 == null || tLRPC$Message6.id < tLRPC$Message2.id) {
                                                                                                            HashMap hashMap6 = hashMap3 == null ? new HashMap() : hashMap3;
                                                                                                            hashMap6.put(of, tLRPC$Message2);
                                                                                                            hashMap4 = hashMap6;
                                                                                                            i33 = i14;
                                                                                                            i7 = i9 + 1;
                                                                                                            executeFast2 = sQLitePreparedStatement18;
                                                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                                                            j12 = j9;
                                                                                                            i42 = i15;
                                                                                                            arrayList12 = arrayList3;
                                                                                                            l2 = l;
                                                                                                            num = num2;
                                                                                                            j6 = j8;
                                                                                                            arrayList14 = arrayList6;
                                                                                                            arrayList11 = arrayList5;
                                                                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                            i43 = i16;
                                                                                                            size = i10;
                                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                                        }
                                                                                                    }
                                                                                                    hashMap4 = hashMap3;
                                                                                                    i33 = i14;
                                                                                                    i7 = i9 + 1;
                                                                                                    executeFast2 = sQLitePreparedStatement18;
                                                                                                    sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                                                    j12 = j9;
                                                                                                    i42 = i15;
                                                                                                    arrayList12 = arrayList3;
                                                                                                    l2 = l;
                                                                                                    num = num2;
                                                                                                    j6 = j8;
                                                                                                    arrayList14 = arrayList6;
                                                                                                    arrayList11 = arrayList5;
                                                                                                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                                    sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                                    i43 = i16;
                                                                                                    size = i10;
                                                                                                    executeFast = sQLitePreparedStatement7;
                                                                                                } catch (Exception e22) {
                                                                                                    exc = e22;
                                                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement37;
                                                                                                    sQLitePreparedStatement22 = sQLitePreparedStatement31;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                    executeFast = sQLitePreparedStatement7;
                                                                                                    sQLitePreparedStatement21 = null;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                                                    sQLitePreparedStatement7 = executeFast;
                                                                                                    sQLiteCursor2 = sQLitePreparedStatement21;
                                                                                                    checkSQLException(exc);
                                                                                                    sQLiteDatabase2 = this.database;
                                                                                                    if (sQLiteDatabase2 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor2 == 0) {
                                                                                                    }
                                                                                                } catch (Throwable th23) {
                                                                                                    th = th23;
                                                                                                    sQLitePreparedStatement11 = sQLitePreparedStatement37;
                                                                                                    sQLitePreparedStatement20 = sQLitePreparedStatement31;
                                                                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                                    executeFast = sQLitePreparedStatement7;
                                                                                                    sQLitePreparedStatement19 = null;
                                                                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                                    sQLitePreparedStatement7 = executeFast;
                                                                                                    sQLiteCursor = sQLitePreparedStatement19;
                                                                                                    sQLiteDatabase = this.database;
                                                                                                    if (sQLiteDatabase != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement4 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement7 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement8 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                                    }
                                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                                    }
                                                                                                    if (sQLiteCursor != 0) {
                                                                                                    }
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                        } catch (Exception e23) {
                                                                                            e = e23;
                                                                                            exc = e;
                                                                                            sQLitePreparedStatement22 = sQLitePreparedStatement31;
                                                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                            executeFast = sQLitePreparedStatement7;
                                                                                            sQLitePreparedStatement21 = null;
                                                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                            sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                                                            sQLitePreparedStatement7 = executeFast;
                                                                                            sQLiteCursor2 = sQLitePreparedStatement21;
                                                                                            checkSQLException(exc);
                                                                                            sQLiteDatabase2 = this.database;
                                                                                            if (sQLiteDatabase2 != null) {
                                                                                                sQLiteDatabase2.commitTransaction();
                                                                                            }
                                                                                            if (sQLitePreparedStatement4 != null) {
                                                                                                sQLitePreparedStatement4.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement13 != null) {
                                                                                                sQLitePreparedStatement13.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement7 != null) {
                                                                                                sQLitePreparedStatement7.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement8 != null) {
                                                                                                sQLitePreparedStatement8.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement12 != null) {
                                                                                                sQLitePreparedStatement12.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement10 != null) {
                                                                                                sQLitePreparedStatement10.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement11 != null) {
                                                                                                sQLitePreparedStatement11.dispose();
                                                                                            }
                                                                                            if (sQLitePreparedStatement9 != null) {
                                                                                                sQLitePreparedStatement9.dispose();
                                                                                            }
                                                                                            if (sQLiteCursor2 == 0) {
                                                                                                sQLiteCursor2.dispose();
                                                                                                return;
                                                                                            }
                                                                                            return;
                                                                                        }
                                                                                    } catch (Throwable th24) {
                                                                                        th = th24;
                                                                                        th = th;
                                                                                        sQLitePreparedStatement20 = sQLitePreparedStatement31;
                                                                                        sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                        executeFast = sQLitePreparedStatement7;
                                                                                        sQLitePreparedStatement19 = null;
                                                                                        sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                        sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                                                        sQLitePreparedStatement7 = executeFast;
                                                                                        sQLiteCursor = sQLitePreparedStatement19;
                                                                                        sQLiteDatabase = this.database;
                                                                                        if (sQLiteDatabase != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement4 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement13 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement7 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement8 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement12 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement10 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement11 != null) {
                                                                                        }
                                                                                        if (sQLitePreparedStatement9 != null) {
                                                                                        }
                                                                                        if (sQLiteCursor != 0) {
                                                                                        }
                                                                                        throw th;
                                                                                    }
                                                                                }
                                                                                i16 = i12;
                                                                                tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                }
                                                                                if (i14 == 0) {
                                                                                }
                                                                                hashMap3 = hashMap2;
                                                                                hashMap4 = hashMap3;
                                                                                i33 = i14;
                                                                                i7 = i9 + 1;
                                                                                executeFast2 = sQLitePreparedStatement18;
                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                                j12 = j9;
                                                                                i42 = i15;
                                                                                arrayList12 = arrayList3;
                                                                                l2 = l;
                                                                                num = num2;
                                                                                j6 = j8;
                                                                                arrayList14 = arrayList6;
                                                                                arrayList11 = arrayList5;
                                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                i43 = i16;
                                                                                size = i10;
                                                                                executeFast = sQLitePreparedStatement7;
                                                                            } else {
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                                nativeByteBuffer5.reuse();
                                                                                if (tLRPC$Message2.ttl_period != 0) {
                                                                                }
                                                                                i16 = i12;
                                                                                tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                                }
                                                                                if (i14 == 0) {
                                                                                }
                                                                                hashMap3 = hashMap2;
                                                                                hashMap4 = hashMap3;
                                                                                i33 = i14;
                                                                                i7 = i9 + 1;
                                                                                executeFast2 = sQLitePreparedStatement18;
                                                                                sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                                j12 = j9;
                                                                                i42 = i15;
                                                                                arrayList12 = arrayList3;
                                                                                l2 = l;
                                                                                num = num2;
                                                                                j6 = j8;
                                                                                arrayList14 = arrayList6;
                                                                                arrayList11 = arrayList5;
                                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                                i43 = i16;
                                                                                size = i10;
                                                                                executeFast = sQLitePreparedStatement7;
                                                                            }
                                                                        }
                                                                        if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                            sQLitePreparedStatement15.requery();
                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                            sQLitePreparedStatement32.bindInteger(1, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement32.bindLong(2, j9);
                                                                            if (j2 != 0) {
                                                                                topicId = j2;
                                                                            }
                                                                            sQLitePreparedStatement32.bindLong(3, topicId);
                                                                            sQLitePreparedStatement32.bindInteger(4, tLRPC$Message2.date);
                                                                            sQLitePreparedStatement32.bindInteger(5, MediaDataController.getMediaType(tLRPC$Message2));
                                                                            sQLitePreparedStatement32.bindByteBuffer(6, nativeByteBuffer5);
                                                                            sQLitePreparedStatement32.step();
                                                                            nativeByteBuffer5.reuse();
                                                                            if (tLRPC$Message2.ttl_period != 0) {
                                                                            }
                                                                            i16 = i12;
                                                                            tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                            }
                                                                            if (i14 == 0) {
                                                                            }
                                                                            hashMap3 = hashMap2;
                                                                            hashMap4 = hashMap3;
                                                                            i33 = i14;
                                                                            i7 = i9 + 1;
                                                                            executeFast2 = sQLitePreparedStatement18;
                                                                            sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                            j12 = j9;
                                                                            i42 = i15;
                                                                            arrayList12 = arrayList3;
                                                                            l2 = l;
                                                                            num = num2;
                                                                            j6 = j8;
                                                                            arrayList14 = arrayList6;
                                                                            arrayList11 = arrayList5;
                                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                            i43 = i16;
                                                                            size = i10;
                                                                            executeFast = sQLitePreparedStatement7;
                                                                        }
                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                        nativeByteBuffer5.reuse();
                                                                        if (tLRPC$Message2.ttl_period != 0) {
                                                                        }
                                                                        i16 = i12;
                                                                        tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                        }
                                                                        if (i14 == 0) {
                                                                        }
                                                                        hashMap3 = hashMap2;
                                                                        hashMap4 = hashMap3;
                                                                        i33 = i14;
                                                                        i7 = i9 + 1;
                                                                        executeFast2 = sQLitePreparedStatement18;
                                                                        sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                        j12 = j9;
                                                                        i42 = i15;
                                                                        arrayList12 = arrayList3;
                                                                        l2 = l;
                                                                        num = num2;
                                                                        j6 = j8;
                                                                        arrayList14 = arrayList6;
                                                                        arrayList11 = arrayList5;
                                                                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                        sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                        i43 = i16;
                                                                        size = i10;
                                                                        executeFast = sQLitePreparedStatement7;
                                                                    }
                                                                } else {
                                                                    sQLitePreparedStatement18 = sQLitePreparedStatement36;
                                                                }
                                                                if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                    j9 = j;
                                                                    sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                                    if ((tLRPC$Message2 instanceof TLRPC$TL_messageService) && (tLRPC$Message2.action instanceof TLRPC$TL_messageActionHistoryClear)) {
                                                                        try {
                                                                            try {
                                                                                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", Integer.valueOf(tLRPC$Message2.id), Long.valueOf(j))).stepThis().dispose();
                                                                                this.database.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j9).stepThis().dispose();
                                                                            } catch (Throwable th25) {
                                                                                th = th25;
                                                                                sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                                                sQLitePreparedStatement8 = sQLitePreparedStatement31;
                                                                                sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                                                sQLiteCursor6 = null;
                                                                                sQLitePreparedStatement9 = null;
                                                                                sQLiteCursor = sQLiteCursor6;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement4 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement7 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement8 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLiteCursor != 0) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } catch (Exception e24) {
                                                                            checkSQLException(e24);
                                                                        }
                                                                    }
                                                                } else {
                                                                    sQLitePreparedStatement8.requery();
                                                                    sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                                    sQLitePreparedStatement31.bindInteger(1, tLRPC$Message2.id);
                                                                    j9 = j;
                                                                    sQLitePreparedStatement31.bindLong(2, j9);
                                                                    sQLitePreparedStatement31.bindInteger(3, tLRPC$Message2.date);
                                                                    sQLitePreparedStatement31.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message2));
                                                                    sQLitePreparedStatement31.bindByteBuffer(5, nativeByteBuffer5);
                                                                    sQLitePreparedStatement31.step();
                                                                }
                                                                long topicId2 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                                if (j2 == 0) {
                                                                }
                                                                if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                }
                                                                sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                                nativeByteBuffer5.reuse();
                                                                if (tLRPC$Message2.ttl_period != 0) {
                                                                }
                                                                i16 = i12;
                                                                tLRPC$MessageMedia = tLRPC$Message2.media;
                                                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                                }
                                                                if (i14 == 0) {
                                                                }
                                                                hashMap3 = hashMap2;
                                                                hashMap4 = hashMap3;
                                                                i33 = i14;
                                                                i7 = i9 + 1;
                                                                executeFast2 = sQLitePreparedStatement18;
                                                                sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                                j12 = j9;
                                                                i42 = i15;
                                                                arrayList12 = arrayList3;
                                                                l2 = l;
                                                                num = num2;
                                                                j6 = j8;
                                                                arrayList14 = arrayList6;
                                                                arrayList11 = arrayList5;
                                                                tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                                sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                                i43 = i16;
                                                                size = i10;
                                                                executeFast = sQLitePreparedStatement7;
                                                            } else {
                                                                i9 = i7;
                                                                sQLitePreparedStatement13 = executeFast2;
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                            }
                                                            long topicId22 = MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(tLRPC$Message2.dialog_id));
                                                            if (j2 == 0) {
                                                            }
                                                            if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                            }
                                                            sQLitePreparedStatement32 = sQLitePreparedStatement15;
                                                            nativeByteBuffer5.reuse();
                                                            if (tLRPC$Message2.ttl_period != 0) {
                                                            }
                                                            i16 = i12;
                                                            tLRPC$MessageMedia = tLRPC$Message2.media;
                                                            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                                            }
                                                            if (i14 == 0) {
                                                            }
                                                            hashMap3 = hashMap2;
                                                            hashMap4 = hashMap3;
                                                            i33 = i14;
                                                            i7 = i9 + 1;
                                                            executeFast2 = sQLitePreparedStatement18;
                                                            sQLitePreparedStatement15 = sQLitePreparedStatement32;
                                                            j12 = j9;
                                                            i42 = i15;
                                                            arrayList12 = arrayList3;
                                                            l2 = l;
                                                            num = num2;
                                                            j6 = j8;
                                                            arrayList14 = arrayList6;
                                                            arrayList11 = arrayList5;
                                                            tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                                                            sQLitePreparedStatement14 = sQLitePreparedStatement31;
                                                            i43 = i16;
                                                            size = i10;
                                                            executeFast = sQLitePreparedStatement7;
                                                        } catch (Exception e25) {
                                                            e = e25;
                                                            sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                            exc = e;
                                                            sQLitePreparedStatement22 = sQLitePreparedStatement31;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                            executeFast = sQLitePreparedStatement7;
                                                            sQLitePreparedStatement21 = null;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                            sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                            sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                            sQLitePreparedStatement7 = executeFast;
                                                            sQLiteCursor2 = sQLitePreparedStatement21;
                                                            checkSQLException(exc);
                                                            sQLiteDatabase2 = this.database;
                                                            if (sQLiteDatabase2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLiteCursor2 == 0) {
                                                            }
                                                        } catch (Throwable th26) {
                                                            th = th26;
                                                            sQLitePreparedStatement31 = sQLitePreparedStatement8;
                                                            th = th;
                                                            sQLitePreparedStatement20 = sQLitePreparedStatement31;
                                                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                            executeFast = sQLitePreparedStatement7;
                                                            sQLitePreparedStatement19 = null;
                                                            sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                            sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                            sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                            sQLitePreparedStatement7 = executeFast;
                                                            sQLiteCursor = sQLitePreparedStatement19;
                                                            sQLiteDatabase = this.database;
                                                            if (sQLiteDatabase != null) {
                                                            }
                                                            if (sQLitePreparedStatement4 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement7 != null) {
                                                            }
                                                            if (sQLitePreparedStatement8 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLiteCursor != 0) {
                                                            }
                                                            throw th;
                                                        }
                                                        fixUnsupportedMedia(tLRPC$Message2);
                                                        MessageObject.normalizeFlags(tLRPC$Message2);
                                                        NativeByteBuffer nativeByteBuffer52 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                        tLRPC$Message2.serializeToStream(nativeByteBuffer52);
                                                        i19 = 0;
                                                        while (i19 < 2) {
                                                        }
                                                        i15 = i13;
                                                        arrayList5 = arrayList11;
                                                        arrayList6 = arrayList4;
                                                        SQLitePreparedStatement sQLitePreparedStatement362 = sQLitePreparedStatement13;
                                                        i14 = i2;
                                                        if (j2 == 0) {
                                                        }
                                                    } catch (Exception e26) {
                                                        e = e26;
                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                    } catch (Throwable th27) {
                                                        th = th27;
                                                        sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                    }
                                                    Integer valueOf3 = Integer.valueOf(tLRPC$Message.id);
                                                    if ((tLRPC$Message.flags & 131072) != 0) {
                                                        arrayList2 = arrayList12;
                                                        num2 = valueOf3;
                                                        l = Long.valueOf(tLRPC$Message.grouped_id);
                                                        j7 = 0;
                                                    } else {
                                                        arrayList2 = arrayList12;
                                                        num2 = valueOf3;
                                                        j7 = 0;
                                                        l = null;
                                                    }
                                                    if (j13 == j7) {
                                                    }
                                                    if (i33 != -2) {
                                                    }
                                                    if (i9 != 0) {
                                                    }
                                                } catch (Exception e27) {
                                                    e = e27;
                                                    exc = e;
                                                    sQLitePreparedStatement22 = sQLitePreparedStatement14;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement21 = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor2 = sQLitePreparedStatement21;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th28) {
                                                    th = th28;
                                                    th = th;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement14;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement19 = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor = sQLitePreparedStatement19;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            ArrayList arrayList18 = arrayList14;
                                            ArrayList<File> arrayList19 = arrayList11;
                                            long j19 = j12;
                                            sQLitePreparedStatement16 = executeFast;
                                            sQLitePreparedStatement17 = sQLitePreparedStatement14;
                                            int i57 = i43;
                                            final ArrayList arrayList20 = arrayList12;
                                            i8 = i42;
                                            sQLitePreparedStatement18 = executeFast2;
                                            hashMap = hashMap4;
                                            sQLitePreparedStatement16.dispose();
                                            sQLitePreparedStatement4.dispose();
                                            if (sQLitePreparedStatement18 == null) {
                                                try {
                                                    sQLitePreparedStatement18.dispose();
                                                    sQLitePreparedStatement23 = null;
                                                } catch (Exception e28) {
                                                    exc = e28;
                                                    sQLitePreparedStatement22 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement21 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor2 = sQLitePreparedStatement21;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th29) {
                                                    th = th29;
                                                    sQLitePreparedStatement20 = sQLitePreparedStatement17;
                                                    sQLitePreparedStatement19 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor = sQLitePreparedStatement19;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement23 = sQLitePreparedStatement18;
                                            }
                                            sQLitePreparedStatement17.dispose();
                                            if (sQLitePreparedStatement10 != null) {
                                                try {
                                                    sQLitePreparedStatement10.dispose();
                                                    sQLitePreparedStatement10 = null;
                                                } catch (Exception e29) {
                                                    exc = e29;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement22 = null;
                                                    sQLitePreparedStatement21 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor2 = sQLitePreparedStatement21;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th30) {
                                                    th = th30;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement20 = null;
                                                    sQLitePreparedStatement19 = null;
                                                    sQLitePreparedStatement4 = null;
                                                    executeFast = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                                    sQLitePreparedStatement7 = executeFast;
                                                    sQLiteCursor = sQLitePreparedStatement19;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                                try {
                                                    sQLitePreparedStatement11.dispose();
                                                    getMessagesController().didAddedNewTask(i57, 0L, null);
                                                    sQLitePreparedStatement11 = null;
                                                } catch (Exception e30) {
                                                    e = e30;
                                                    exc = e;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    z4 = false;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLiteCursor2 = z4;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th31) {
                                                    th = th31;
                                                    th = th;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    z3 = false;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLiteCursor = z3;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                                try {
                                                    sQLitePreparedStatement12.dispose();
                                                    sQLitePreparedStatement12 = null;
                                                } catch (Exception e31) {
                                                    e = e31;
                                                    exc = e;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    z4 = false;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLiteCursor2 = z4;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th32) {
                                                    th = th32;
                                                    th = th;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    z3 = false;
                                                    sQLitePreparedStatement4 = null;
                                                    sQLitePreparedStatement9 = null;
                                                    sQLitePreparedStatement7 = null;
                                                    sQLitePreparedStatement8 = null;
                                                    sQLiteCursor = z3;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (hashMap != null) {
                                                try {
                                                    for (TopicKey topicKey : hashMap.keySet()) {
                                                        getMediaDataController().putBotKeyboard(topicKey, (TLRPC$Message) hashMap.get(topicKey));
                                                    }
                                                } catch (Exception e32) {
                                                    exc = e32;
                                                    sQLitePreparedStatement25 = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement25;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor2 = sQLitePreparedStatement25;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th33) {
                                                    th = th33;
                                                    sQLitePreparedStatement24 = null;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor = sQLitePreparedStatement24;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            deleteFromDownloadQueue(arrayList13, false);
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda221
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesStorage.this.lambda$putMessages$216(arrayList20);
                                                }
                                            });
                                            getFileLoader().deleteFiles(arrayList19, 0);
                                            putUsersInternal(tLRPC$messages_Messages.users);
                                            putChatsInternal(tLRPC$messages_Messages.chats);
                                            if (i8 == Integer.MAX_VALUE) {
                                                try {
                                                    this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", Integer.valueOf(i8), Long.valueOf(j))).stepThis().dispose();
                                                    LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                                                    longSparseIntArray.put(j19, i8);
                                                    sQLitePreparedStatement26 = null;
                                                    sQLitePreparedStatement26 = null;
                                                    sQLitePreparedStatement26 = null;
                                                    try {
                                                        getMessagesController().processDialogsUpdateRead(null, longSparseIntArray);
                                                    } catch (Exception e33) {
                                                        e = e33;
                                                        exc = e;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement26;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement25;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                        sQLiteCursor2 = sQLitePreparedStatement25;
                                                        checkSQLException(exc);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLiteCursor2 == 0) {
                                                        }
                                                    } catch (Throwable th34) {
                                                        th = th34;
                                                        th = th;
                                                        sQLitePreparedStatement24 = sQLitePreparedStatement26;
                                                        sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                        sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                        sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                        sQLiteCursor = sQLitePreparedStatement24;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLitePreparedStatement4 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement7 != null) {
                                                        }
                                                        if (sQLitePreparedStatement8 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLiteCursor != 0) {
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Exception e34) {
                                                    e = e34;
                                                    sQLitePreparedStatement28 = null;
                                                    exc = e;
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement28;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement25;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor2 = sQLitePreparedStatement25;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th35) {
                                                    th2 = th35;
                                                    sQLitePreparedStatement27 = null;
                                                    th = th2;
                                                    sQLitePreparedStatement24 = sQLitePreparedStatement27;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor = sQLitePreparedStatement24;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement26 = null;
                                            }
                                            if (num == null) {
                                                SQLiteDatabase sQLiteDatabase7 = this.database;
                                                Locale locale2 = Locale.US;
                                                String str2 = l2 == null ? "NULL" : l2 + "";
                                                try {
                                                    z5 = true;
                                                    sQLiteDatabase7.executeFast(String.format(locale2, "UPDATE dialogs SET last_mid_group = %s WHERE did = %d AND last_mid <= %d", str2, Long.valueOf(j), num)).stepThis().dispose();
                                                } catch (Exception e35) {
                                                    e = e35;
                                                    sQLitePreparedStatement28 = sQLitePreparedStatement26;
                                                    exc = e;
                                                    sQLitePreparedStatement25 = sQLitePreparedStatement28;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement25;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor2 = sQLitePreparedStatement25;
                                                    checkSQLException(exc);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor2 == 0) {
                                                    }
                                                } catch (Throwable th36) {
                                                    th2 = th36;
                                                    sQLitePreparedStatement27 = sQLitePreparedStatement26;
                                                    th = th2;
                                                    sQLitePreparedStatement24 = sQLitePreparedStatement27;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement23;
                                                    sQLitePreparedStatement4 = sQLitePreparedStatement24;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement4;
                                                    sQLitePreparedStatement7 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement8 = sQLitePreparedStatement7;
                                                    sQLiteCursor = sQLitePreparedStatement24;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLitePreparedStatement4 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement7 != null) {
                                                    }
                                                    if (sQLitePreparedStatement8 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                z5 = false;
                                            }
                                            this.database.commitTransaction();
                                            if (!z) {
                                                if (!z5) {
                                                }
                                                arrayList = arrayList16;
                                                if (arrayList != null) {
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda222
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            MessagesStorage.this.lambda$putMessages$217(arrayList);
                                                        }
                                                    });
                                                }
                                                onReactionsUpdate(arrayList18);
                                                sQLitePreparedStatement29 = sQLitePreparedStatement23;
                                                sQLitePreparedStatement30 = sQLitePreparedStatement12;
                                                sQLiteDatabase3 = this.database;
                                                if (sQLiteDatabase3 != null) {
                                                    sQLiteDatabase3.commitTransaction();
                                                }
                                                if (sQLitePreparedStatement29 != null) {
                                                    sQLitePreparedStatement29.dispose();
                                                }
                                                if (sQLitePreparedStatement30 != null) {
                                                    sQLitePreparedStatement30.dispose();
                                                }
                                                if (sQLitePreparedStatement10 != null) {
                                                    sQLitePreparedStatement10.dispose();
                                                }
                                                if (sQLitePreparedStatement11 == null) {
                                                    sQLitePreparedStatement11.dispose();
                                                    return;
                                                }
                                                return;
                                            }
                                            updateDialogsWithDeletedMessages(j, j13, new ArrayList(), null, false);
                                            arrayList = arrayList16;
                                            if (arrayList != null) {
                                            }
                                            onReactionsUpdate(arrayList18);
                                            sQLitePreparedStatement29 = sQLitePreparedStatement23;
                                            sQLitePreparedStatement30 = sQLitePreparedStatement12;
                                            sQLiteDatabase3 = this.database;
                                            if (sQLiteDatabase3 != null) {
                                            }
                                            if (sQLitePreparedStatement29 != null) {
                                            }
                                            if (sQLitePreparedStatement30 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            if (sQLitePreparedStatement11 == null) {
                                            }
                                        }
                                    }
                                    deleteFromDownloadQueue(arrayList13, false);
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda221
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesStorage.this.lambda$putMessages$216(arrayList20);
                                        }
                                    });
                                    getFileLoader().deleteFiles(arrayList19, 0);
                                    putUsersInternal(tLRPC$messages_Messages.users);
                                    putChatsInternal(tLRPC$messages_Messages.chats);
                                    if (i8 == Integer.MAX_VALUE) {
                                    }
                                    if (num == null) {
                                    }
                                    this.database.commitTransaction();
                                    if (!z) {
                                    }
                                    updateDialogsWithDeletedMessages(j, j13, new ArrayList(), null, false);
                                    arrayList = arrayList16;
                                    if (arrayList != null) {
                                    }
                                    onReactionsUpdate(arrayList18);
                                    sQLitePreparedStatement29 = sQLitePreparedStatement23;
                                    sQLitePreparedStatement30 = sQLitePreparedStatement12;
                                    sQLiteDatabase3 = this.database;
                                    if (sQLiteDatabase3 != null) {
                                    }
                                    if (sQLitePreparedStatement29 != null) {
                                    }
                                    if (sQLitePreparedStatement30 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    if (sQLitePreparedStatement11 == null) {
                                    }
                                } catch (Exception e36) {
                                    e = e36;
                                    sQLitePreparedStatement26 = null;
                                } catch (Throwable th37) {
                                    th = th37;
                                    sQLitePreparedStatement26 = null;
                                }
                                sQLitePreparedStatement17.dispose();
                                if (sQLitePreparedStatement10 != null) {
                                }
                                if (sQLitePreparedStatement11 != null) {
                                }
                                if (sQLitePreparedStatement12 != null) {
                                }
                                if (hashMap != null) {
                                }
                            } catch (Exception e37) {
                                sQLitePreparedStatement21 = null;
                                exc = e37;
                                sQLitePreparedStatement22 = sQLitePreparedStatement17;
                                sQLitePreparedStatement18 = sQLitePreparedStatement23;
                                sQLitePreparedStatement4 = null;
                                executeFast = null;
                                sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                sQLitePreparedStatement8 = sQLitePreparedStatement22;
                                sQLitePreparedStatement9 = sQLitePreparedStatement21;
                                sQLitePreparedStatement7 = executeFast;
                                sQLiteCursor2 = sQLitePreparedStatement21;
                                checkSQLException(exc);
                                sQLiteDatabase2 = this.database;
                                if (sQLiteDatabase2 != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement13 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement8 != null) {
                                }
                                if (sQLitePreparedStatement12 != null) {
                                }
                                if (sQLitePreparedStatement10 != null) {
                                }
                                if (sQLitePreparedStatement11 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                                if (sQLiteCursor2 == 0) {
                                }
                            } catch (Throwable th38) {
                                sQLitePreparedStatement19 = null;
                                th = th38;
                                sQLitePreparedStatement20 = sQLitePreparedStatement17;
                                sQLitePreparedStatement18 = sQLitePreparedStatement23;
                                sQLitePreparedStatement4 = null;
                                executeFast = null;
                                sQLitePreparedStatement13 = sQLitePreparedStatement18;
                                sQLitePreparedStatement8 = sQLitePreparedStatement20;
                                sQLitePreparedStatement9 = sQLitePreparedStatement19;
                                sQLitePreparedStatement7 = executeFast;
                                sQLiteCursor = sQLitePreparedStatement19;
                                sQLiteDatabase = this.database;
                                if (sQLiteDatabase != null) {
                                }
                                if (sQLitePreparedStatement4 != null) {
                                }
                                if (sQLitePreparedStatement13 != null) {
                                }
                                if (sQLitePreparedStatement7 != null) {
                                }
                                if (sQLitePreparedStatement8 != null) {
                                }
                                if (sQLitePreparedStatement12 != null) {
                                }
                                if (sQLitePreparedStatement10 != null) {
                                }
                                if (sQLitePreparedStatement11 != null) {
                                }
                                if (sQLitePreparedStatement9 != null) {
                                }
                                if (sQLiteCursor != 0) {
                                }
                                throw th;
                            }
                            sQLitePreparedStatement16.dispose();
                            sQLitePreparedStatement4.dispose();
                            if (sQLitePreparedStatement18 == null) {
                            }
                        } catch (Exception e38) {
                            sQLitePreparedStatement21 = null;
                            exc = e38;
                            sQLitePreparedStatement22 = sQLitePreparedStatement17;
                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                            executeFast = sQLitePreparedStatement16;
                        } catch (Throwable th39) {
                            sQLitePreparedStatement19 = null;
                            th = th39;
                            sQLitePreparedStatement20 = sQLitePreparedStatement17;
                            sQLitePreparedStatement4 = sQLitePreparedStatement4;
                            executeFast = sQLitePreparedStatement16;
                        }
                        SQLitePreparedStatement executeFast52 = this.database.executeFast("REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)");
                        if (j5 != j12) {
                        }
                        i7 = 0;
                        Long l22 = null;
                        int i422 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        HashMap hashMap42 = null;
                        long j132 = 0;
                        num = null;
                        sQLitePreparedStatement10 = null;
                        sQLitePreparedStatement11 = null;
                        sQLitePreparedStatement12 = null;
                        ArrayList arrayList162 = null;
                        int i432 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        while (i7 < size) {
                        }
                        ArrayList arrayList182 = arrayList14;
                        ArrayList<File> arrayList192 = arrayList11;
                        long j192 = j12;
                        sQLitePreparedStatement16 = executeFast;
                        sQLitePreparedStatement17 = sQLitePreparedStatement14;
                        int i572 = i432;
                        final ArrayList arrayList202 = arrayList12;
                        i8 = i422;
                        sQLitePreparedStatement18 = executeFast2;
                        hashMap = hashMap42;
                    } catch (Exception e39) {
                        SQLitePreparedStatement sQLitePreparedStatement40 = executeFast;
                        SQLitePreparedStatement sQLitePreparedStatement41 = null;
                        exc = e39;
                        sQLitePreparedStatement3 = sQLitePreparedStatement14;
                        sQLitePreparedStatement6 = sQLitePreparedStatement40;
                        sQLitePreparedStatement5 = sQLitePreparedStatement41;
                        sQLitePreparedStatement7 = sQLitePreparedStatement6;
                        sQLitePreparedStatement8 = sQLitePreparedStatement3;
                        sQLitePreparedStatement9 = sQLitePreparedStatement5;
                        sQLitePreparedStatement10 = sQLitePreparedStatement9;
                        sQLitePreparedStatement11 = sQLitePreparedStatement10;
                        sQLitePreparedStatement12 = sQLitePreparedStatement11;
                        sQLitePreparedStatement13 = sQLitePreparedStatement12;
                        sQLiteCursor2 = sQLitePreparedStatement5;
                        checkSQLException(exc);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLiteCursor2 == 0) {
                        }
                    } catch (Throwable th40) {
                        SQLitePreparedStatement sQLitePreparedStatement42 = executeFast;
                        SQLitePreparedStatement sQLitePreparedStatement43 = null;
                        th = th40;
                        sQLitePreparedStatement3 = sQLitePreparedStatement14;
                        sQLitePreparedStatement2 = sQLitePreparedStatement42;
                        sQLitePreparedStatement = sQLitePreparedStatement43;
                        sQLitePreparedStatement7 = sQLitePreparedStatement2;
                        sQLitePreparedStatement8 = sQLitePreparedStatement3;
                        sQLitePreparedStatement9 = sQLitePreparedStatement;
                        sQLitePreparedStatement10 = sQLitePreparedStatement9;
                        sQLitePreparedStatement11 = sQLitePreparedStatement10;
                        sQLitePreparedStatement12 = sQLitePreparedStatement11;
                        sQLitePreparedStatement13 = sQLitePreparedStatement12;
                        sQLiteCursor = sQLitePreparedStatement;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                        }
                        if (sQLitePreparedStatement4 != null) {
                        }
                        if (sQLitePreparedStatement13 != null) {
                        }
                        if (sQLitePreparedStatement7 != null) {
                        }
                        if (sQLitePreparedStatement8 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement10 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLiteCursor != 0) {
                        }
                        throw th;
                    }
                    size = tLRPC$messages_Messages2.messages.size();
                    ArrayList<File> arrayList112 = new ArrayList<>();
                    ArrayList arrayList122 = new ArrayList();
                    ArrayList arrayList132 = new ArrayList();
                    j5 = j4;
                    if (j12 != j5) {
                    }
                    sQLitePreparedStatement4 = this.database.executeFast("REPLACE INTO messages_topics VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?)");
                    executeFast = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, ?, ?, ?)");
                    sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                    sQLitePreparedStatement14 = sQLitePreparedStatement3;
                }
                sQLitePreparedStatement29 = null;
                sQLitePreparedStatement30 = null;
                sQLitePreparedStatement10 = null;
                sQLitePreparedStatement11 = null;
                sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                }
                if (sQLitePreparedStatement29 != null) {
                }
                if (sQLitePreparedStatement30 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement11 == null) {
                }
            } catch (Exception e40) {
                exc = e40;
                i5 = 0;
                sQLitePreparedStatement3 = null;
                sQLitePreparedStatement5 = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement6 = i5;
                sQLitePreparedStatement7 = sQLitePreparedStatement6;
                sQLitePreparedStatement8 = sQLitePreparedStatement3;
                sQLitePreparedStatement9 = sQLitePreparedStatement5;
                sQLitePreparedStatement10 = sQLitePreparedStatement9;
                sQLitePreparedStatement11 = sQLitePreparedStatement10;
                sQLitePreparedStatement12 = sQLitePreparedStatement11;
                sQLitePreparedStatement13 = sQLitePreparedStatement12;
                sQLiteCursor2 = sQLitePreparedStatement5;
                checkSQLException(exc);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                }
                if (sQLitePreparedStatement4 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLiteCursor2 == 0) {
                }
            } catch (Throwable th41) {
                th = th41;
                i4 = 0;
                sQLitePreparedStatement3 = null;
                sQLitePreparedStatement = null;
                sQLitePreparedStatement4 = null;
                sQLitePreparedStatement2 = i4;
                sQLitePreparedStatement7 = sQLitePreparedStatement2;
                sQLitePreparedStatement8 = sQLitePreparedStatement3;
                sQLitePreparedStatement9 = sQLitePreparedStatement;
                sQLitePreparedStatement10 = sQLitePreparedStatement9;
                sQLitePreparedStatement11 = sQLitePreparedStatement10;
                sQLitePreparedStatement12 = sQLitePreparedStatement11;
                sQLitePreparedStatement13 = sQLitePreparedStatement12;
                sQLiteCursor = sQLitePreparedStatement;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLitePreparedStatement4 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement7 != null) {
                }
                if (sQLitePreparedStatement8 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLiteCursor != 0) {
                }
                throw th;
            }
        } catch (Exception e41) {
            exc = e41;
            i5 = i32;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement6 = i5;
            sQLitePreparedStatement7 = sQLitePreparedStatement6;
            sQLitePreparedStatement8 = sQLitePreparedStatement3;
            sQLitePreparedStatement9 = sQLitePreparedStatement5;
            sQLitePreparedStatement10 = sQLitePreparedStatement9;
            sQLitePreparedStatement11 = sQLitePreparedStatement10;
            sQLitePreparedStatement12 = sQLitePreparedStatement11;
            sQLitePreparedStatement13 = sQLitePreparedStatement12;
            sQLiteCursor2 = sQLitePreparedStatement5;
            checkSQLException(exc);
            sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLiteCursor2 == 0) {
            }
        } catch (Throwable th42) {
            th = th42;
            i4 = i32;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement2 = i4;
            sQLitePreparedStatement7 = sQLitePreparedStatement2;
            sQLitePreparedStatement8 = sQLitePreparedStatement3;
            sQLitePreparedStatement9 = sQLitePreparedStatement;
            sQLitePreparedStatement10 = sQLitePreparedStatement9;
            sQLitePreparedStatement11 = sQLitePreparedStatement10;
            sQLitePreparedStatement12 = sQLitePreparedStatement11;
            sQLitePreparedStatement13 = sQLitePreparedStatement12;
            sQLiteCursor = sQLitePreparedStatement;
            sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
            }
            if (sQLitePreparedStatement4 != null) {
            }
            if (sQLitePreparedStatement13 != null) {
            }
            if (sQLitePreparedStatement7 != null) {
            }
            if (sQLitePreparedStatement8 != null) {
            }
            if (sQLitePreparedStatement12 != null) {
            }
            if (sQLitePreparedStatement10 != null) {
            }
            if (sQLitePreparedStatement11 != null) {
            }
            if (sQLitePreparedStatement9 != null) {
            }
            if (sQLiteCursor != 0) {
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$216(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$217(ArrayList arrayList) {
        if (getMessagesController().getSavedMessagesController().updateSavedDialogs(arrayList)) {
            getMessagesController().getSavedMessagesController().update();
        }
    }

    public static void addUsersAndChatsFromMessage(TLRPC$Message tLRPC$Message, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Long> arrayList3) {
        TLRPC$Peer tLRPC$Peer;
        String str;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$Peer tLRPC$Peer2;
        TLRPC$Peer tLRPC$Peer3;
        TLRPC$WebPage tLRPC$WebPage;
        TLRPC$Peer tLRPC$Peer4;
        TL_stories$StoryFwdHeader tL_stories$StoryFwdHeader;
        TL_stories$StoryItem tL_stories$StoryItem;
        TLRPC$Peer tLRPC$Peer5;
        long fromChatId = MessageObject.getFromChatId(tLRPC$Message);
        if (DialogObject.isUserDialog(fromChatId)) {
            if (!arrayList.contains(Long.valueOf(fromChatId))) {
                arrayList.add(Long.valueOf(fromChatId));
            }
        } else if (DialogObject.isChatDialog(fromChatId)) {
            long j = -fromChatId;
            if (!arrayList2.contains(Long.valueOf(j))) {
                arrayList2.add(Long.valueOf(j));
            }
        }
        long j2 = tLRPC$Message.via_bot_id;
        if (j2 != 0 && !arrayList.contains(Long.valueOf(j2))) {
            arrayList.add(Long.valueOf(tLRPC$Message.via_bot_id));
        }
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction != null) {
            long j3 = tLRPC$MessageAction.user_id;
            if (j3 != 0 && !arrayList.contains(Long.valueOf(j3))) {
                arrayList.add(Long.valueOf(tLRPC$Message.action.user_id));
            }
            long j4 = tLRPC$Message.action.channel_id;
            if (j4 != 0 && !arrayList2.contains(Long.valueOf(j4))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.channel_id));
            }
            long j5 = tLRPC$Message.action.chat_id;
            if (j5 != 0 && !arrayList2.contains(Long.valueOf(j5))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.chat_id));
            }
            TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGiftCode) {
                addLoadPeerInfo(((TLRPC$TL_messageActionGiftCode) tLRPC$MessageAction2).boost_peer, arrayList, arrayList2);
            }
            TLRPC$MessageAction tLRPC$MessageAction3 = tLRPC$Message.action;
            if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGeoProximityReached) {
                TLRPC$TL_messageActionGeoProximityReached tLRPC$TL_messageActionGeoProximityReached = (TLRPC$TL_messageActionGeoProximityReached) tLRPC$MessageAction3;
                addLoadPeerInfo(tLRPC$TL_messageActionGeoProximityReached.from_id, arrayList, arrayList2);
                addLoadPeerInfo(tLRPC$TL_messageActionGeoProximityReached.to_id, arrayList, arrayList2);
            }
            if (!tLRPC$Message.action.users.isEmpty()) {
                for (int i = 0; i < tLRPC$Message.action.users.size(); i++) {
                    Long l = tLRPC$Message.action.users.get(i);
                    if (!arrayList.contains(l)) {
                        arrayList.add(l);
                    }
                }
            }
        }
        if (!tLRPC$Message.entities.isEmpty()) {
            for (int i2 = 0; i2 < tLRPC$Message.entities.size(); i2++) {
                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i2);
                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id));
                } else if (tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id));
                } else if (arrayList3 != null && (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji)) {
                    arrayList3.add(Long.valueOf(((TLRPC$TL_messageEntityCustomEmoji) tLRPC$MessageEntity).document_id));
                }
            }
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia != null) {
            long j6 = tLRPC$MessageMedia.user_id;
            if (j6 != 0 && !arrayList.contains(Long.valueOf(j6))) {
                arrayList.add(Long.valueOf(tLRPC$Message.media.user_id));
            }
            TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
            if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGiveaway) {
                Iterator<Long> it = ((TLRPC$TL_messageMediaGiveaway) tLRPC$MessageMedia2).channels.iterator();
                while (it.hasNext()) {
                    Long next = it.next();
                    if (!arrayList2.contains(next)) {
                        arrayList2.add(next);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message.media;
            if (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaGiveawayResults) {
                Iterator<Long> it2 = ((TLRPC$TL_messageMediaGiveawayResults) tLRPC$MessageMedia3).winners.iterator();
                while (it2.hasNext()) {
                    Long next2 = it2.next();
                    if (!arrayList.contains(next2)) {
                        arrayList.add(next2);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia4 = tLRPC$Message.media;
            if (tLRPC$MessageMedia4 instanceof TLRPC$TL_messageMediaPoll) {
                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia4;
                if (!tLRPC$TL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    for (int i3 = 0; i3 < tLRPC$TL_messageMediaPoll.results.recent_voters.size(); i3++) {
                        addLoadPeerInfo(tLRPC$TL_messageMediaPoll.results.recent_voters.get(i3), arrayList, arrayList2);
                    }
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia5 = tLRPC$Message.media;
            if ((tLRPC$MessageMedia5 instanceof TLRPC$TL_messageMediaStory) && (tL_stories$StoryItem = tLRPC$MessageMedia5.storyItem) != null) {
                TL_stories$StoryFwdHeader tL_stories$StoryFwdHeader2 = tL_stories$StoryItem.fwd_from;
                if (tL_stories$StoryFwdHeader2 != null) {
                    addLoadPeerInfo(tL_stories$StoryFwdHeader2.from, arrayList, arrayList2);
                }
                TL_stories$StoryItem tL_stories$StoryItem2 = tLRPC$Message.media.storyItem;
                if (tL_stories$StoryItem2 != null && tL_stories$StoryItem2.media_areas != null) {
                    for (int i4 = 0; i4 < tLRPC$Message.media.storyItem.media_areas.size(); i4++) {
                        if (tLRPC$Message.media.storyItem.media_areas.get(i4) instanceof TL_stories$TL_mediaAreaChannelPost) {
                            long j7 = ((TL_stories$TL_mediaAreaChannelPost) tLRPC$Message.media.storyItem.media_areas.get(i4)).channel_id;
                            if (!arrayList2.contains(Long.valueOf(j7))) {
                                arrayList2.add(Long.valueOf(j7));
                            }
                        }
                    }
                }
                TL_stories$StoryItem tL_stories$StoryItem3 = tLRPC$Message.media.storyItem;
                if (tL_stories$StoryItem3 != null && (tLRPC$Peer5 = tL_stories$StoryItem3.from_id) != null) {
                    addLoadPeerInfo(tLRPC$Peer5, arrayList, arrayList2);
                }
            }
            TLRPC$MessageMedia tLRPC$MessageMedia6 = tLRPC$Message.media;
            if ((tLRPC$MessageMedia6 instanceof TLRPC$TL_messageMediaWebPage) && (tLRPC$WebPage = tLRPC$MessageMedia6.webpage) != null && tLRPC$WebPage.attributes != null) {
                for (int i5 = 0; i5 < tLRPC$Message.media.webpage.attributes.size(); i5++) {
                    if (tLRPC$Message.media.webpage.attributes.get(i5) instanceof TLRPC$TL_webPageAttributeStory) {
                        TLRPC$TL_webPageAttributeStory tLRPC$TL_webPageAttributeStory = (TLRPC$TL_webPageAttributeStory) tLRPC$Message.media.webpage.attributes.get(i5);
                        TL_stories$StoryItem tL_stories$StoryItem4 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem4 != null && (tL_stories$StoryFwdHeader = tL_stories$StoryItem4.fwd_from) != null) {
                            addLoadPeerInfo(tL_stories$StoryFwdHeader.from, arrayList, arrayList2);
                        }
                        TL_stories$StoryItem tL_stories$StoryItem5 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem5 != null && tL_stories$StoryItem5.media_areas != null) {
                            for (int i6 = 0; i6 < tLRPC$TL_webPageAttributeStory.storyItem.media_areas.size(); i6++) {
                                if (tLRPC$TL_webPageAttributeStory.storyItem.media_areas.get(i6) instanceof TL_stories$TL_mediaAreaChannelPost) {
                                    long j8 = ((TL_stories$TL_mediaAreaChannelPost) tLRPC$TL_webPageAttributeStory.storyItem.media_areas.get(i6)).channel_id;
                                    if (!arrayList2.contains(Long.valueOf(j8))) {
                                        arrayList2.add(Long.valueOf(j8));
                                    }
                                }
                            }
                        }
                        TL_stories$StoryItem tL_stories$StoryItem6 = tLRPC$TL_webPageAttributeStory.storyItem;
                        if (tL_stories$StoryItem6 != null && (tLRPC$Peer4 = tL_stories$StoryItem6.from_id) != null) {
                            addLoadPeerInfo(tLRPC$Peer4, arrayList, arrayList2);
                        }
                    }
                }
            }
            TLRPC$Peer tLRPC$Peer6 = tLRPC$Message.media.peer;
            if (tLRPC$Peer6 != null) {
                addLoadPeerInfo(tLRPC$Peer6, arrayList, arrayList2);
            }
        }
        TLRPC$MessageReplies tLRPC$MessageReplies = tLRPC$Message.replies;
        if (tLRPC$MessageReplies != null) {
            int size = tLRPC$MessageReplies.recent_repliers.size();
            for (int i7 = 0; i7 < size; i7++) {
                addLoadPeerInfo(tLRPC$Message.replies.recent_repliers.get(i7), arrayList, arrayList2);
            }
        }
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
        if (tLRPC$MessageReplyHeader != null && (tLRPC$Peer3 = tLRPC$MessageReplyHeader.reply_to_peer_id) != null) {
            addLoadPeerInfo(tLRPC$Peer3, arrayList, arrayList2);
        }
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = tLRPC$Message.fwd_from;
        if (tLRPC$MessageFwdHeader2 != null) {
            addLoadPeerInfo(tLRPC$MessageFwdHeader2.from_id, arrayList, arrayList2);
            addLoadPeerInfo(tLRPC$Message.fwd_from.saved_from_peer, arrayList, arrayList2);
        }
        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message.reply_to;
        if (tLRPC$MessageReplyHeader2 != null && (tLRPC$MessageFwdHeader = tLRPC$MessageReplyHeader2.reply_from) != null && (tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id) != null) {
            addLoadPeerInfo(tLRPC$Peer2, arrayList, arrayList2);
        }
        HashMap<String, String> hashMap = tLRPC$Message.params;
        if (hashMap != null && (str = hashMap.get("fwd_peer")) != null) {
            long longValue = Utilities.parseLong(str).longValue();
            if (longValue < 0) {
                long j9 = -longValue;
                if (!arrayList2.contains(Long.valueOf(j9))) {
                    arrayList2.add(Long.valueOf(j9));
                }
            }
        }
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
        if (tLRPC$TL_messageReactions == null || tLRPC$TL_messageReactions.top_reactors == null) {
            return;
        }
        for (int i8 = 0; i8 < tLRPC$Message.reactions.top_reactors.size(); i8++) {
            TLRPC$MessageReactor tLRPC$MessageReactor = tLRPC$Message.reactions.top_reactors.get(i8);
            if (tLRPC$MessageReactor != null && (tLRPC$Peer = tLRPC$MessageReactor.peer_id) != null) {
                addLoadPeerInfo(tLRPC$Peer, arrayList, arrayList2);
            }
        }
    }

    public static void addLoadPeerInfo(TLRPC$Peer tLRPC$Peer, ArrayList<Long> arrayList, ArrayList<Long> arrayList2) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
            if (arrayList.contains(Long.valueOf(tLRPC$Peer.user_id))) {
                return;
            }
            arrayList.add(Long.valueOf(tLRPC$Peer.user_id));
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            if (arrayList2.contains(Long.valueOf(tLRPC$Peer.channel_id))) {
                return;
            }
            arrayList2.add(Long.valueOf(tLRPC$Peer.channel_id));
        } else if (!(tLRPC$Peer instanceof TLRPC$TL_peerChat) || arrayList2.contains(Long.valueOf(tLRPC$Peer.chat_id))) {
        } else {
            arrayList2.add(Long.valueOf(tLRPC$Peer.chat_id));
        }
    }

    public void getDialogs(final int i, final int i2, final int i3, boolean z) {
        long[] jArr;
        LongSparseArray<LongSparseArray<TLRPC$DraftMessage>> drafts;
        int size;
        if (!z || (size = (drafts = getMediaDataController().getDrafts()).size()) <= 0) {
            jArr = null;
        } else {
            jArr = new long[size];
            for (int i4 = 0; i4 < size; i4++) {
                if (drafts.valueAt(i4).get(0L) != null) {
                    jArr[i4] = drafts.keyAt(i4);
                }
            }
        }
        final long[] jArr2 = jArr;
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda6
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogs$220(i, i2, i3, jArr2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't wrap try/catch for region: R(13:1|(6:2|3|4|(24:9|10|(1:12)(1:368)|13|14|16|17|18|19|20|21|(36:25|26|27|(5:184|185|(2:187|(1:189)(1:190))|191|(3:193|194|97)(1:(1:196)))(1:29)|30|(3:32|33|(28:35|36|(1:38)(1:181)|39|(1:41)(1:180)|42|(1:44)(1:179)|45|46|(3:48|49|(1:51))|52|53|54|(1:56)|57|58|(1:60)|61|62|(2:64|(10:66|(1:68)|69|70|71|72|(11:76|(3:165|166|(1:168))|78|79|(3:145|146|(12:148|149|150|151|152|153|(1:155)|82|83|(4:135|136|137|86)|85|86))|81|82|83|(0)|85|86)|173|85|86)(1:177))(1:178)|87|(3:110|111|(1:113))|89|(2:91|(1:93)(4:98|95|96|97))(2:99|(3:101|(1:103)|104)(2:105|(2:107|(1:109))))|94|95|96|97))(1:183)|182|36|(0)(0)|39|(0)(0)|42|(0)(0)|45|46|(0)|52|53|54|(0)|57|58|(0)|61|62|(0)(0)|87|(0)|89|(0)(0)|94|95|96|97|22|23)|207|208|209|210|211|212|(11:214|(6:217|218|219|(2:221|222)(1:224)|223|215)|230|231|232|233|234|235|(7:238|(2:239|(4:241|(3:243|244|(1:248))(1:316)|246|247)(2:317|318))|(4:251|252|(11:254|255|(1:257)|258|259|260|261|(2:265|(7:275|276|(2:280|(6:282|283|284|285|287|(1:289)))|305|285|287|(0))(1:271))|272|273|274)(2:311|312)|295)|296|297|274|236)|319|320)(1:333)|321|322|5|6|7)|374|375)|(14:376|377|378|(7:451|452|(5:455|(4:459|(2:461|(1:463))(2:467|(1:469))|464|(1:466))|457|458|453)|470|471|(9:473|474|475|476|477|(3:481|478|479)|482|483|484)(1:493)|485)(1:380)|381|382|383|(5:438|439|440|441|442)(1:385)|386|387|(1:389)|390|(1:392)|393)|(5:395|(4:398|(4:401|(2:405|406)|407|399)|410|396)|411|412|(9:414|415|416|417|418|419|(1:421)|122|123))|435|416|417|418|419|(0)|122|123|(1:(0))) */
    /* JADX WARN: Code restructure failed: missing block: B:396:0x072a, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:397:0x072b, code lost:
        r11 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:398:0x072e, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:399:0x072f, code lost:
        r10 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:96:0x024a, code lost:
        if ((r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore) == false) goto L173;
     */
    /* JADX WARN: Removed duplicated region for block: B:124:0x02bc  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0306  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x032b A[Catch: all -> 0x02db, Exception -> 0x02e1, TryCatch #48 {Exception -> 0x02e1, all -> 0x02db, blocks: (B:146:0x0316, B:148:0x031c, B:150:0x0322, B:151:0x0325, B:153:0x032b, B:155:0x033b, B:158:0x0357, B:160:0x035f, B:162:0x0369, B:163:0x0370, B:164:0x037a, B:166:0x0382, B:168:0x038d, B:133:0x02d7, B:144:0x02f2, B:196:0x0437, B:198:0x0441), top: B:481:0x031c }] */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0357 A[Catch: all -> 0x02db, Exception -> 0x02e1, TryCatch #48 {Exception -> 0x02e1, all -> 0x02db, blocks: (B:146:0x0316, B:148:0x031c, B:150:0x0322, B:151:0x0325, B:153:0x032b, B:155:0x033b, B:158:0x0357, B:160:0x035f, B:162:0x0369, B:163:0x0370, B:164:0x037a, B:166:0x0382, B:168:0x038d, B:133:0x02d7, B:144:0x02f2, B:196:0x0437, B:198:0x0441), top: B:481:0x031c }] */
    /* JADX WARN: Removed duplicated region for block: B:246:0x04fb A[Catch: all -> 0x00dc, Exception -> 0x04f4, TRY_LEAVE, TryCatch #4 {Exception -> 0x04f4, blocks: (B:240:0x04f0, B:244:0x04f7, B:246:0x04fb), top: B:433:0x04f0 }] */
    /* JADX WARN: Removed duplicated region for block: B:423:0x0792  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x079b  */
    /* JADX WARN: Removed duplicated region for block: B:481:0x031c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:528:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:529:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0162  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0178  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x017a  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0181  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0183  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x019c  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x01c3 A[Catch: all -> 0x00dc, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #10 {Exception -> 0x00e3, blocks: (B:22:0x00ba, B:24:0x00c7, B:26:0x00cd, B:31:0x00ed, B:32:0x00fa, B:37:0x0104, B:43:0x0136, B:65:0x01a0, B:67:0x01a4, B:72:0x01c3, B:76:0x01e2, B:84:0x021f, B:215:0x048d), top: B:441:0x00ba }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01e2 A[Catch: all -> 0x00dc, Exception -> 0x00e3, TRY_ENTER, TRY_LEAVE, TryCatch #10 {Exception -> 0x00e3, blocks: (B:22:0x00ba, B:24:0x00c7, B:26:0x00cd, B:31:0x00ed, B:32:0x00fa, B:37:0x0104, B:43:0x0136, B:65:0x01a0, B:67:0x01a4, B:72:0x01c3, B:76:0x01e2, B:84:0x021f, B:215:0x048d), top: B:441:0x00ba }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01f0 A[Catch: all -> 0x02ea, Exception -> 0x02ee, TryCatch #53 {Exception -> 0x02ee, all -> 0x02ea, blocks: (B:20:0x00b0, B:40:0x0113, B:49:0x0144, B:53:0x0163, B:57:0x017b, B:61:0x0184, B:69:0x01ab, B:74:0x01d5, B:78:0x01ea, B:80:0x01f0, B:82:0x01fb, B:86:0x0222, B:39:0x010e), top: B:471:0x00b0 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogs$220(int i, int i2, int i3, long[] jArr) {
        SQLiteCursor sQLiteCursor;
        MessagesStorage messagesStorage;
        ArrayList<TLRPC$EncryptedChat> arrayList;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        Throwable th;
        SQLiteCursor sQLiteCursor3;
        ArrayList<Long> arrayList2;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray;
        LongSparseArray<ArrayList<Integer>> longSparseArray2;
        SQLiteCursor sQLiteCursor4;
        ArrayList arrayList3;
        ArrayList arrayList4;
        ArrayList<Long> arrayList5;
        HashSet hashSet;
        ArrayList<TLRPC$EncryptedChat> arrayList6;
        final MessagesStorage messagesStorage2;
        final LongSparseArray longSparseArray3;
        ArrayList<TLRPC$EncryptedChat> arrayList7;
        ArrayList<TLRPC$UserFull> arrayList8;
        Integer num;
        int i4;
        int i5;
        ArrayList arrayList9;
        HashSet hashSet2;
        ArrayList arrayList10;
        MessagesStorage messagesStorage3;
        SQLiteCursor sQLiteCursor5;
        ArrayList arrayList11;
        ArrayList arrayList12;
        HashSet hashSet3;
        MessagesStorage messagesStorage4;
        HashSet hashSet4;
        TLRPC$Dialog tLRPC$Dialog;
        NativeByteBuffer byteBufferValue;
        MessagesStorage messagesStorage5;
        TLRPC$Dialog tLRPC$Dialog2;
        int i6;
        ArrayList arrayList13;
        int i7;
        int i8;
        long longValue;
        NativeByteBuffer byteBufferValue2;
        int i9;
        ArrayList arrayList14;
        LongSparseArray<ArrayList<Integer>> longSparseArray4;
        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray5;
        ArrayList arrayList15;
        ArrayList<Long> arrayList16;
        ArrayList arrayList17;
        HashSet hashSet5;
        Exception exc2;
        MessagesStorage messagesStorage6 = this;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs2 = new TLRPC$TL_messages_dialogs();
        ArrayList<TLRPC$EncryptedChat> arrayList18 = new ArrayList<>();
        try {
            ArrayList<Long> arrayList19 = new ArrayList<>();
            HashSet hashSet6 = new HashSet();
            arrayList19.add(Long.valueOf(getUserConfig().getClientUserId()));
            arrayList2 = new ArrayList<>();
            ArrayList arrayList20 = new ArrayList();
            ArrayList arrayList21 = new ArrayList();
            ArrayList arrayList22 = new ArrayList();
            longSparseArray = new LongSparseArray<>();
            longSparseArray2 = new LongSparseArray<>();
            ArrayList arrayList23 = new ArrayList(2);
            arrayList23.add(Integer.valueOf(i));
            int i10 = 0;
            sQLiteCursor4 = null;
            while (i10 < arrayList23.size()) {
                try {
                    try {
                        try {
                            num = (Integer) arrayList23.get(i10);
                            num.intValue();
                            if (i10 == 0) {
                                i4 = i2;
                                i5 = i3;
                                arrayList6 = arrayList18;
                            } else {
                                arrayList6 = arrayList18;
                                i4 = 0;
                                i5 = 100;
                            }
                            try {
                                arrayList9 = new ArrayList();
                                hashSet2 = hashSet6;
                                arrayList10 = arrayList20;
                            } catch (Exception e) {
                                e = e;
                                messagesStorage2 = messagesStorage6;
                            }
                        } catch (Exception e2) {
                            e = e2;
                            messagesStorage2 = messagesStorage6;
                            arrayList6 = arrayList18;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        messagesStorage2 = messagesStorage6;
                    }
                } catch (Exception e3) {
                    e = e3;
                    messagesStorage = messagesStorage6;
                    arrayList = arrayList18;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                } catch (Throwable th3) {
                    th = th3;
                }
                try {
                    LongSparseArray<ArrayList<Integer>> longSparseArray6 = longSparseArray2;
                    LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray7 = longSparseArray;
                    try {
                        int i11 = 0;
                        SQLiteCursor queryFinalized = messagesStorage6.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions, d.last_mid_group, d.ttl_period FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid AND d.last_mid_group IS NULL LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d", num, Integer.valueOf(i4), Integer.valueOf(i5)), new Object[0]);
                        while (queryFinalized.next()) {
                            try {
                                ArrayList<Long> arrayList24 = arrayList19;
                                try {
                                    long longValue2 = queryFinalized.longValue(i11);
                                    if (DialogObject.isFolderDialogId(longValue2)) {
                                        try {
                                            try {
                                                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
                                                if (!queryFinalized.isNull(18)) {
                                                    NativeByteBuffer byteBufferValue3 = queryFinalized.byteBufferValue(18);
                                                    if (byteBufferValue3 != null) {
                                                        tLRPC$TL_dialogFolder.folder = TLRPC$TL_folder.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                        byteBufferValue3.reuse();
                                                    } else {
                                                        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
                                                        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
                                                        tLRPC$TL_folder.id = DialogObject.getFolderId(longValue2);
                                                    }
                                                }
                                                TLRPC$TL_folder tLRPC$TL_folder2 = tLRPC$TL_dialogFolder.folder;
                                                tLRPC$Dialog2 = tLRPC$TL_dialogFolder;
                                                if (tLRPC$TL_folder2 == null) {
                                                    arrayList19 = arrayList24;
                                                    i11 = 0;
                                                } else if (i10 == 0) {
                                                    arrayList23.add(Integer.valueOf(tLRPC$TL_folder2.id));
                                                    tLRPC$Dialog2 = tLRPC$TL_dialogFolder;
                                                }
                                            } catch (Exception e4) {
                                                exc = e4;
                                                sQLiteCursor = queryFinalized;
                                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                arrayList = arrayList6;
                                                messagesStorage = this;
                                                try {
                                                    tLRPC$TL_messages_dialogs.dialogs.clear();
                                                    tLRPC$TL_messages_dialogs.users.clear();
                                                    tLRPC$TL_messages_dialogs.chats.clear();
                                                    arrayList.clear();
                                                    messagesStorage.checkSQLException(exc);
                                                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                    if (sQLiteCursor == null) {
                                                    }
                                                } catch (Throwable th4) {
                                                    th = th4;
                                                    th = th;
                                                    sQLiteCursor2 = sQLiteCursor;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                        } catch (Throwable th5) {
                                            th = th5;
                                            sQLiteCursor2 = queryFinalized;
                                            if (sQLiteCursor2 != null) {
                                            }
                                            throw th;
                                        }
                                    } else {
                                        tLRPC$Dialog2 = new TLRPC$TL_dialog();
                                    }
                                    tLRPC$Dialog2.id = longValue2;
                                    tLRPC$Dialog2.top_message = queryFinalized.intValue(1);
                                    tLRPC$Dialog2.unread_count = queryFinalized.intValue(2);
                                    tLRPC$Dialog2.last_message_date = queryFinalized.intValue(3);
                                    int intValue = queryFinalized.intValue(10);
                                    tLRPC$Dialog2.pts = intValue;
                                    if (intValue != 0) {
                                        i6 = i10;
                                        arrayList13 = arrayList22;
                                        if (!DialogObject.isUserDialog(tLRPC$Dialog2.id)) {
                                            i7 = 1;
                                            tLRPC$Dialog2.flags = i7;
                                            tLRPC$Dialog2.read_inbox_max_id = queryFinalized.intValue(11);
                                            tLRPC$Dialog2.read_outbox_max_id = queryFinalized.intValue(12);
                                            int intValue2 = queryFinalized.intValue(14);
                                            tLRPC$Dialog2.pinnedNum = intValue2;
                                            tLRPC$Dialog2.pinned = intValue2 == 0;
                                            tLRPC$Dialog2.unread_mentions_count = queryFinalized.intValue(15);
                                            int intValue3 = queryFinalized.intValue(16);
                                            tLRPC$Dialog2.unread_mark = (intValue3 & 1) == 0;
                                            tLRPC$Dialog2.view_forum_as_messages = (intValue3 & 64) == 0;
                                            long longValue3 = queryFinalized.longValue(8);
                                            i8 = (int) longValue3;
                                            ArrayList arrayList25 = arrayList23;
                                            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
                                            tLRPC$Dialog2.notify_settings = tLRPC$TL_peerNotifySettings;
                                            if ((i8 & 1) != 0) {
                                                int i12 = (int) (longValue3 >> 32);
                                                tLRPC$TL_peerNotifySettings.mute_until = i12;
                                                if (i12 == 0) {
                                                    tLRPC$TL_peerNotifySettings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                }
                                            }
                                            tLRPC$Dialog2.folder_id = queryFinalized.intValue(17);
                                            tLRPC$Dialog2.unread_reactions_count = queryFinalized.intValue(19);
                                            longValue = queryFinalized.longValue(20);
                                            if (longValue != 0) {
                                                arrayList9.add(new Pair(Long.valueOf(longValue2), Long.valueOf(longValue)));
                                            }
                                            tLRPC$Dialog2.ttl_period = queryFinalized.intValue(21);
                                            tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$Dialog2);
                                            if (jArr != null) {
                                                arrayList21.add(Long.valueOf(longValue2));
                                            }
                                            byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                            if (byteBufferValue2 == null) {
                                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                                if (TLdeserialize != null) {
                                                    ArrayList arrayList26 = arrayList21;
                                                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                                                    byteBufferValue2.reuse();
                                                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                                                    TLdeserialize.id = queryFinalized.intValue(6);
                                                    int intValue4 = queryFinalized.intValue(9);
                                                    if (intValue4 != 0) {
                                                        tLRPC$Dialog2.last_message_date = intValue4;
                                                    }
                                                    TLdeserialize.send_state = queryFinalized.intValue(7);
                                                    TLdeserialize.dialog_id = tLRPC$Dialog2.id;
                                                    tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize);
                                                    arrayList16 = arrayList24;
                                                    addUsersAndChatsFromMessage(TLdeserialize, arrayList16, arrayList2, arrayList13);
                                                    try {
                                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = TLdeserialize.reply_to;
                                                        if (tLRPC$MessageReplyHeader != null && tLRPC$MessageReplyHeader.reply_to_msg_id != 0) {
                                                            TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                                            if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage)) {
                                                                try {
                                                                    if (!(tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent)) {
                                                                    }
                                                                } catch (Exception e5) {
                                                                    exc2 = e5;
                                                                    arrayList15 = arrayList26;
                                                                    i9 = i6;
                                                                    arrayList14 = arrayList9;
                                                                    longSparseArray4 = longSparseArray6;
                                                                    longSparseArray5 = longSparseArray7;
                                                                    messagesStorage5 = this;
                                                                    messagesStorage5.checkSQLException(exc2);
                                                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                    }
                                                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                    }
                                                                    longSparseArray7 = longSparseArray5;
                                                                    arrayList19 = arrayList16;
                                                                    arrayList22 = arrayList13;
                                                                    longSparseArray6 = longSparseArray4;
                                                                    arrayList10 = arrayList17;
                                                                    hashSet2 = hashSet5;
                                                                    i10 = i9;
                                                                    arrayList21 = arrayList15;
                                                                    arrayList23 = arrayList25;
                                                                    arrayList9 = arrayList14;
                                                                    i11 = 0;
                                                                }
                                                            }
                                                            try {
                                                                if (!queryFinalized.isNull(13)) {
                                                                    try {
                                                                        NativeByteBuffer byteBufferValue4 = queryFinalized.byteBufferValue(13);
                                                                        if (byteBufferValue4 != null) {
                                                                            arrayList15 = arrayList26;
                                                                            try {
                                                                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                                TLdeserialize.replyMessage = TLdeserialize2;
                                                                                i9 = i6;
                                                                                arrayList14 = arrayList9;
                                                                                try {
                                                                                    TLdeserialize2.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                                                                                    byteBufferValue4.reuse();
                                                                                    TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                                                                    if (tLRPC$Message != null) {
                                                                                        addUsersAndChatsFromMessage(tLRPC$Message, arrayList16, arrayList2, arrayList13);
                                                                                    }
                                                                                    if (TLdeserialize.replyMessage == null) {
                                                                                        longSparseArray4 = longSparseArray6;
                                                                                        longSparseArray5 = longSparseArray7;
                                                                                        try {
                                                                                            addReplyMessages(TLdeserialize, longSparseArray5, longSparseArray4);
                                                                                            messagesStorage5 = this;
                                                                                        } catch (Exception e6) {
                                                                                            e = e6;
                                                                                            messagesStorage5 = this;
                                                                                            exc2 = e;
                                                                                            messagesStorage5.checkSQLException(exc2);
                                                                                            if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                            }
                                                                                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                            }
                                                                                            longSparseArray7 = longSparseArray5;
                                                                                            arrayList19 = arrayList16;
                                                                                            arrayList22 = arrayList13;
                                                                                            longSparseArray6 = longSparseArray4;
                                                                                            arrayList10 = arrayList17;
                                                                                            hashSet2 = hashSet5;
                                                                                            i10 = i9;
                                                                                            arrayList21 = arrayList15;
                                                                                            arrayList23 = arrayList25;
                                                                                            arrayList9 = arrayList14;
                                                                                            i11 = 0;
                                                                                        }
                                                                                    }
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                    messagesStorage5 = this;
                                                                                } catch (Exception e7) {
                                                                                    e = e7;
                                                                                    messagesStorage5 = this;
                                                                                    exc2 = e;
                                                                                    longSparseArray4 = longSparseArray6;
                                                                                    longSparseArray5 = longSparseArray7;
                                                                                    messagesStorage5.checkSQLException(exc2);
                                                                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                    }
                                                                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                    }
                                                                                    longSparseArray7 = longSparseArray5;
                                                                                    arrayList19 = arrayList16;
                                                                                    arrayList22 = arrayList13;
                                                                                    longSparseArray6 = longSparseArray4;
                                                                                    arrayList10 = arrayList17;
                                                                                    hashSet2 = hashSet5;
                                                                                    i10 = i9;
                                                                                    arrayList21 = arrayList15;
                                                                                    arrayList23 = arrayList25;
                                                                                    arrayList9 = arrayList14;
                                                                                    i11 = 0;
                                                                                }
                                                                            } catch (Exception e8) {
                                                                                e = e8;
                                                                                i9 = i6;
                                                                                arrayList14 = arrayList9;
                                                                                messagesStorage5 = this;
                                                                                exc2 = e;
                                                                                longSparseArray4 = longSparseArray6;
                                                                                longSparseArray5 = longSparseArray7;
                                                                                messagesStorage5.checkSQLException(exc2);
                                                                                if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                                }
                                                                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                                }
                                                                                longSparseArray7 = longSparseArray5;
                                                                                arrayList19 = arrayList16;
                                                                                arrayList22 = arrayList13;
                                                                                longSparseArray6 = longSparseArray4;
                                                                                arrayList10 = arrayList17;
                                                                                hashSet2 = hashSet5;
                                                                                i10 = i9;
                                                                                arrayList21 = arrayList15;
                                                                                arrayList23 = arrayList25;
                                                                                arrayList9 = arrayList14;
                                                                                i11 = 0;
                                                                            }
                                                                        }
                                                                    } catch (Exception e9) {
                                                                        e = e9;
                                                                        arrayList15 = arrayList26;
                                                                    }
                                                                }
                                                                if (TLdeserialize.replyMessage == null) {
                                                                }
                                                                longSparseArray4 = longSparseArray6;
                                                                longSparseArray5 = longSparseArray7;
                                                                messagesStorage5 = this;
                                                            } catch (Exception e10) {
                                                                e = e10;
                                                                longSparseArray4 = longSparseArray6;
                                                                longSparseArray5 = longSparseArray7;
                                                                messagesStorage5 = this;
                                                                exc2 = e;
                                                                messagesStorage5.checkSQLException(exc2);
                                                                if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                                }
                                                                if (DialogObject.isEncryptedDialog(longValue2)) {
                                                                }
                                                                longSparseArray7 = longSparseArray5;
                                                                arrayList19 = arrayList16;
                                                                arrayList22 = arrayList13;
                                                                longSparseArray6 = longSparseArray4;
                                                                arrayList10 = arrayList17;
                                                                hashSet2 = hashSet5;
                                                                i10 = i9;
                                                                arrayList21 = arrayList15;
                                                                arrayList23 = arrayList25;
                                                                arrayList9 = arrayList14;
                                                                i11 = 0;
                                                            }
                                                            arrayList15 = arrayList26;
                                                            i9 = i6;
                                                            arrayList14 = arrayList9;
                                                        }
                                                        arrayList15 = arrayList26;
                                                        i9 = i6;
                                                        arrayList14 = arrayList9;
                                                        longSparseArray4 = longSparseArray6;
                                                        longSparseArray5 = longSparseArray7;
                                                        messagesStorage5 = this;
                                                    } catch (Exception e11) {
                                                        e = e11;
                                                        arrayList15 = arrayList26;
                                                        i9 = i6;
                                                        arrayList14 = arrayList9;
                                                    }
                                                } else {
                                                    i9 = i6;
                                                    arrayList14 = arrayList9;
                                                    longSparseArray4 = longSparseArray6;
                                                    longSparseArray5 = longSparseArray7;
                                                    messagesStorage5 = this;
                                                    arrayList15 = arrayList21;
                                                    arrayList16 = arrayList24;
                                                    byteBufferValue2.reuse();
                                                }
                                            } else {
                                                i9 = i6;
                                                arrayList14 = arrayList9;
                                                longSparseArray4 = longSparseArray6;
                                                longSparseArray5 = longSparseArray7;
                                                messagesStorage5 = this;
                                                arrayList15 = arrayList21;
                                                arrayList16 = arrayList24;
                                            }
                                            if (!DialogObject.isEncryptedDialog(longValue2)) {
                                                try {
                                                    if (tLRPC$Dialog2.read_inbox_max_id > tLRPC$Dialog2.top_message) {
                                                        tLRPC$Dialog2.read_inbox_max_id = 0;
                                                    }
                                                } catch (Exception e12) {
                                                    e = e12;
                                                    exc = e;
                                                    sQLiteCursor = queryFinalized;
                                                    messagesStorage = messagesStorage5;
                                                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                    arrayList = arrayList6;
                                                    tLRPC$TL_messages_dialogs.dialogs.clear();
                                                    tLRPC$TL_messages_dialogs.users.clear();
                                                    tLRPC$TL_messages_dialogs.chats.clear();
                                                    arrayList.clear();
                                                    messagesStorage.checkSQLException(exc);
                                                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                    if (sQLiteCursor == null) {
                                                    }
                                                } catch (Throwable th6) {
                                                    th = th6;
                                                    th = th;
                                                    sQLiteCursor2 = queryFinalized;
                                                    if (sQLiteCursor2 != null) {
                                                    }
                                                    throw th;
                                                }
                                            }
                                            if (DialogObject.isEncryptedDialog(longValue2)) {
                                                int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                                                arrayList17 = arrayList10;
                                                if (arrayList17.contains(Integer.valueOf(encryptedChatId))) {
                                                    longSparseArray7 = longSparseArray5;
                                                    arrayList19 = arrayList16;
                                                    arrayList22 = arrayList13;
                                                    longSparseArray6 = longSparseArray4;
                                                    arrayList10 = arrayList17;
                                                    i10 = i9;
                                                    arrayList21 = arrayList15;
                                                    arrayList23 = arrayList25;
                                                    arrayList9 = arrayList14;
                                                    i11 = 0;
                                                } else {
                                                    arrayList17.add(Integer.valueOf(encryptedChatId));
                                                    hashSet5 = hashSet2;
                                                }
                                            } else {
                                                arrayList17 = arrayList10;
                                                if (DialogObject.isUserDialog(longValue2)) {
                                                    if (!arrayList16.contains(Long.valueOf(longValue2))) {
                                                        arrayList16.add(Long.valueOf(longValue2));
                                                    }
                                                    hashSet5 = hashSet2;
                                                    hashSet5.add(Long.valueOf(longValue2));
                                                } else {
                                                    hashSet5 = hashSet2;
                                                    if (DialogObject.isChatDialog(longValue2)) {
                                                        long j = -longValue2;
                                                        if (!arrayList2.contains(Long.valueOf(j))) {
                                                            arrayList2.add(Long.valueOf(j));
                                                        }
                                                    }
                                                }
                                            }
                                            longSparseArray7 = longSparseArray5;
                                            arrayList19 = arrayList16;
                                            arrayList22 = arrayList13;
                                            longSparseArray6 = longSparseArray4;
                                            arrayList10 = arrayList17;
                                            hashSet2 = hashSet5;
                                            i10 = i9;
                                            arrayList21 = arrayList15;
                                            arrayList23 = arrayList25;
                                            arrayList9 = arrayList14;
                                            i11 = 0;
                                        }
                                    } else {
                                        i6 = i10;
                                        arrayList13 = arrayList22;
                                    }
                                    i7 = 0;
                                    tLRPC$Dialog2.flags = i7;
                                    tLRPC$Dialog2.read_inbox_max_id = queryFinalized.intValue(11);
                                    tLRPC$Dialog2.read_outbox_max_id = queryFinalized.intValue(12);
                                    int intValue22 = queryFinalized.intValue(14);
                                    tLRPC$Dialog2.pinnedNum = intValue22;
                                    tLRPC$Dialog2.pinned = intValue22 == 0;
                                    tLRPC$Dialog2.unread_mentions_count = queryFinalized.intValue(15);
                                    int intValue32 = queryFinalized.intValue(16);
                                    tLRPC$Dialog2.unread_mark = (intValue32 & 1) == 0;
                                    tLRPC$Dialog2.view_forum_as_messages = (intValue32 & 64) == 0;
                                    long longValue32 = queryFinalized.longValue(8);
                                    i8 = (int) longValue32;
                                    ArrayList arrayList252 = arrayList23;
                                    TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings2 = new TLRPC$TL_peerNotifySettings();
                                    tLRPC$Dialog2.notify_settings = tLRPC$TL_peerNotifySettings2;
                                    if ((i8 & 1) != 0) {
                                    }
                                    tLRPC$Dialog2.folder_id = queryFinalized.intValue(17);
                                    tLRPC$Dialog2.unread_reactions_count = queryFinalized.intValue(19);
                                    longValue = queryFinalized.longValue(20);
                                    if (longValue != 0) {
                                    }
                                    tLRPC$Dialog2.ttl_period = queryFinalized.intValue(21);
                                    tLRPC$TL_messages_dialogs2.dialogs.add(tLRPC$Dialog2);
                                    if (jArr != null) {
                                    }
                                    byteBufferValue2 = queryFinalized.byteBufferValue(4);
                                    if (byteBufferValue2 == null) {
                                    }
                                    if (!DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    if (DialogObject.isEncryptedDialog(longValue2)) {
                                    }
                                    longSparseArray7 = longSparseArray5;
                                    arrayList19 = arrayList16;
                                    arrayList22 = arrayList13;
                                    longSparseArray6 = longSparseArray4;
                                    arrayList10 = arrayList17;
                                    hashSet2 = hashSet5;
                                    i10 = i9;
                                    arrayList21 = arrayList15;
                                    arrayList23 = arrayList252;
                                    arrayList9 = arrayList14;
                                    i11 = 0;
                                } catch (Exception e13) {
                                    e = e13;
                                    messagesStorage5 = this;
                                } catch (Throwable th7) {
                                    th = th7;
                                    messagesStorage5 = this;
                                }
                            } catch (Exception e14) {
                                e = e14;
                                messagesStorage3 = this;
                            } catch (Throwable th8) {
                                th = th8;
                                messagesStorage3 = this;
                            }
                        }
                        int i13 = i10;
                        ArrayList arrayList27 = arrayList22;
                        ArrayList arrayList28 = arrayList21;
                        ArrayList arrayList29 = arrayList23;
                        ArrayList<Long> arrayList30 = arrayList19;
                        ArrayList arrayList31 = arrayList9;
                        HashSet hashSet7 = hashSet2;
                        ArrayList arrayList32 = arrayList10;
                        LongSparseArray<ArrayList<Integer>> longSparseArray8 = longSparseArray6;
                        LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray9 = longSparseArray7;
                        MessagesStorage messagesStorage7 = this;
                        try {
                            queryFinalized.dispose();
                            try {
                                if (arrayList31.isEmpty()) {
                                    arrayList11 = arrayList27;
                                    arrayList12 = arrayList32;
                                    hashSet3 = hashSet7;
                                    messagesStorage4 = messagesStorage7;
                                    queryFinalized = null;
                                } else {
                                    StringBuilder sb = new StringBuilder();
                                    int i14 = 0;
                                    while (i14 < arrayList31.size()) {
                                        ArrayList arrayList33 = arrayList31;
                                        try {
                                            Pair pair = (Pair) arrayList33.get(i14);
                                            sb.append("uid = ");
                                            sb.append(pair.first);
                                            sb.append(" AND group_id = ");
                                            sb.append(pair.second);
                                            i14++;
                                            if (i14 < arrayList33.size()) {
                                                sb.append(" OR ");
                                            }
                                            arrayList31 = arrayList33;
                                        } catch (Exception e15) {
                                            exc = e15;
                                            messagesStorage = messagesStorage7;
                                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                            arrayList = arrayList6;
                                            sQLiteCursor = null;
                                            tLRPC$TL_messages_dialogs.dialogs.clear();
                                            tLRPC$TL_messages_dialogs.users.clear();
                                            tLRPC$TL_messages_dialogs.chats.clear();
                                            arrayList.clear();
                                            messagesStorage.checkSQLException(exc);
                                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                            if (sQLiteCursor == null) {
                                            }
                                        } catch (Throwable th9) {
                                            th = th9;
                                            sQLiteCursor2 = null;
                                            if (sQLiteCursor2 != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    arrayList11 = arrayList27;
                                    try {
                                        int i15 = 0;
                                        queryFinalized = messagesStorage7.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, mid, send_state, date, replydata, group_id FROM messages_v2 WHERE %s ORDER BY date DESC", sb), new Object[0]);
                                        while (queryFinalized.next()) {
                                            ArrayList arrayList34 = arrayList32;
                                            long longValue4 = queryFinalized.longValue(i15);
                                            NativeByteBuffer byteBufferValue5 = queryFinalized.byteBufferValue(1);
                                            int i16 = 0;
                                            while (true) {
                                                if (i16 >= tLRPC$TL_messages_dialogs2.dialogs.size()) {
                                                    hashSet4 = hashSet7;
                                                    tLRPC$Dialog = null;
                                                    break;
                                                }
                                                tLRPC$Dialog = tLRPC$TL_messages_dialogs2.dialogs.get(i16);
                                                if (tLRPC$Dialog != null) {
                                                    hashSet4 = hashSet7;
                                                    if (tLRPC$Dialog.id == longValue4) {
                                                        break;
                                                    }
                                                } else {
                                                    hashSet4 = hashSet7;
                                                }
                                                i16++;
                                                hashSet7 = hashSet4;
                                            }
                                            if (tLRPC$Dialog != null && byteBufferValue5 != null) {
                                                TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                if (TLdeserialize3 != null) {
                                                    TLdeserialize3.readAttachPath(byteBufferValue5, getUserConfig().clientUserId);
                                                    byteBufferValue5.reuse();
                                                    MessageObject.setUnreadFlags(TLdeserialize3, queryFinalized.intValue(2));
                                                    TLdeserialize3.id = queryFinalized.intValue(3);
                                                    int intValue5 = queryFinalized.intValue(5);
                                                    if (intValue5 != 0) {
                                                        tLRPC$Dialog.last_message_date = intValue5;
                                                    }
                                                    TLdeserialize3.send_state = queryFinalized.intValue(4);
                                                    TLdeserialize3.dialog_id = longValue4;
                                                    tLRPC$TL_messages_dialogs2.messages.add(TLdeserialize3);
                                                    addUsersAndChatsFromMessage(TLdeserialize3, arrayList30, arrayList2, null);
                                                    try {
                                                        TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = TLdeserialize3.reply_to;
                                                        if (tLRPC$MessageReplyHeader2 != null && tLRPC$MessageReplyHeader2.reply_to_msg_id != 0) {
                                                            TLRPC$MessageAction tLRPC$MessageAction2 = TLdeserialize3.action;
                                                            if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGameScore)) {
                                                                if (!queryFinalized.isNull(7) && (byteBufferValue = queryFinalized.byteBufferValue(7)) != null) {
                                                                    TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                                    TLdeserialize3.replyMessage = TLdeserialize4;
                                                                    TLdeserialize4.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                                                    byteBufferValue.reuse();
                                                                    TLRPC$Message tLRPC$Message2 = TLdeserialize3.replyMessage;
                                                                    if (tLRPC$Message2 != null) {
                                                                        try {
                                                                            addUsersAndChatsFromMessage(tLRPC$Message2, arrayList30, arrayList2, null);
                                                                            if (TLdeserialize3.replyMessage == null) {
                                                                                addReplyMessages(TLdeserialize3, longSparseArray9, longSparseArray8);
                                                                            }
                                                                        } catch (Exception e16) {
                                                                            e = e16;
                                                                            messagesStorage3 = this;
                                                                            try {
                                                                                messagesStorage3.checkSQLException(e);
                                                                                messagesStorage7 = messagesStorage3;
                                                                                arrayList32 = arrayList34;
                                                                                hashSet7 = hashSet4;
                                                                                i15 = 0;
                                                                            } catch (Exception e17) {
                                                                                e = e17;
                                                                                exc = e;
                                                                                sQLiteCursor = queryFinalized;
                                                                                messagesStorage = messagesStorage3;
                                                                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                                                                arrayList = arrayList6;
                                                                                tLRPC$TL_messages_dialogs.dialogs.clear();
                                                                                tLRPC$TL_messages_dialogs.users.clear();
                                                                                tLRPC$TL_messages_dialogs.chats.clear();
                                                                                arrayList.clear();
                                                                                messagesStorage.checkSQLException(exc);
                                                                                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                                                                if (sQLiteCursor == null) {
                                                                                }
                                                                            } catch (Throwable th10) {
                                                                                th = th10;
                                                                                th = th;
                                                                                sQLiteCursor2 = queryFinalized;
                                                                                if (sQLiteCursor2 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (TLdeserialize3.replyMessage == null) {
                                                                }
                                                            }
                                                        }
                                                        i15 = 0;
                                                        messagesStorage7 = this;
                                                        arrayList32 = arrayList34;
                                                        hashSet7 = hashSet4;
                                                    } catch (Exception e18) {
                                                        e = e18;
                                                    }
                                                } else {
                                                    messagesStorage3 = messagesStorage7;
                                                    byteBufferValue5.reuse();
                                                }
                                                messagesStorage7 = messagesStorage3;
                                            }
                                            arrayList32 = arrayList34;
                                            hashSet7 = hashSet4;
                                            i15 = 0;
                                        }
                                        arrayList12 = arrayList32;
                                        hashSet3 = hashSet7;
                                        messagesStorage4 = messagesStorage7;
                                        queryFinalized.dispose();
                                    } catch (Exception e19) {
                                        messagesStorage3 = messagesStorage7;
                                        sQLiteCursor = null;
                                        exc = e19;
                                        messagesStorage = messagesStorage3;
                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                        arrayList = arrayList6;
                                        tLRPC$TL_messages_dialogs.dialogs.clear();
                                        tLRPC$TL_messages_dialogs.users.clear();
                                        tLRPC$TL_messages_dialogs.chats.clear();
                                        arrayList.clear();
                                        messagesStorage.checkSQLException(exc);
                                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                        if (sQLiteCursor == null) {
                                        }
                                    } catch (Throwable th11) {
                                        messagesStorage3 = messagesStorage7;
                                        sQLiteCursor5 = null;
                                        th = th11;
                                        sQLiteCursor2 = sQLiteCursor5;
                                        if (sQLiteCursor2 != null) {
                                        }
                                        throw th;
                                    }
                                }
                                int i17 = i13 + 1;
                                sQLiteCursor4 = queryFinalized;
                                longSparseArray = longSparseArray9;
                                i10 = i17;
                                longSparseArray2 = longSparseArray8;
                                messagesStorage6 = messagesStorage4;
                                arrayList18 = arrayList6;
                                arrayList22 = arrayList11;
                                arrayList20 = arrayList12;
                                hashSet6 = hashSet3;
                                arrayList23 = arrayList29;
                                arrayList19 = arrayList30;
                                arrayList21 = arrayList28;
                            } catch (Exception e20) {
                                messagesStorage3 = messagesStorage7;
                                sQLiteCursor = null;
                                exc = e20;
                            } catch (Throwable th12) {
                                messagesStorage3 = messagesStorage7;
                                sQLiteCursor5 = null;
                                th = th12;
                            }
                        } catch (Exception e21) {
                            e = e21;
                            messagesStorage3 = messagesStorage7;
                        } catch (Throwable th13) {
                            th = th13;
                            messagesStorage3 = messagesStorage7;
                        }
                    } catch (Exception e22) {
                        e = e22;
                        messagesStorage2 = this;
                        exc = e;
                        messagesStorage = messagesStorage2;
                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                        sQLiteCursor = sQLiteCursor4;
                        arrayList = arrayList6;
                        tLRPC$TL_messages_dialogs.dialogs.clear();
                        tLRPC$TL_messages_dialogs.users.clear();
                        tLRPC$TL_messages_dialogs.chats.clear();
                        arrayList.clear();
                        messagesStorage.checkSQLException(exc);
                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th14) {
                        th = th14;
                        messagesStorage2 = this;
                        th = th;
                        sQLiteCursor2 = sQLiteCursor4;
                        if (sQLiteCursor2 != null) {
                        }
                        throw th;
                    }
                } catch (Exception e23) {
                    e = e23;
                    messagesStorage2 = this;
                    exc = e;
                    messagesStorage = messagesStorage2;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    sQLiteCursor = sQLiteCursor4;
                    arrayList = arrayList6;
                    tLRPC$TL_messages_dialogs.dialogs.clear();
                    tLRPC$TL_messages_dialogs.users.clear();
                    tLRPC$TL_messages_dialogs.chats.clear();
                    arrayList.clear();
                    messagesStorage.checkSQLException(exc);
                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th15) {
                    th = th15;
                    messagesStorage2 = this;
                    th = th;
                    sQLiteCursor2 = sQLiteCursor4;
                    if (sQLiteCursor2 != null) {
                    }
                    throw th;
                }
            }
            arrayList3 = arrayList21;
            arrayList4 = arrayList20;
            arrayList5 = arrayList19;
            hashSet = hashSet6;
            arrayList6 = arrayList18;
            messagesStorage2 = messagesStorage6;
        } catch (Exception e24) {
            e = e24;
            messagesStorage = messagesStorage6;
            arrayList = arrayList18;
            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
            sQLiteCursor = null;
        } catch (Throwable th16) {
            th = th16;
            sQLiteCursor = null;
            th = th;
            sQLiteCursor2 = sQLiteCursor;
            if (sQLiteCursor2 != null) {
            }
            throw th;
        }
        try {
            loadReplyMessages(longSparseArray, longSparseArray2, arrayList5, arrayList2, 0);
            if (jArr != null) {
                try {
                    ArrayList arrayList35 = new ArrayList();
                    for (int i18 = 0; i18 < jArr.length; i18++) {
                        long j2 = jArr[i18];
                        if (!DialogObject.isEncryptedDialog(j2)) {
                            if (j2 > 0) {
                                if (!arrayList5.contains(Long.valueOf(j2))) {
                                    arrayList5.add(Long.valueOf(j2));
                                }
                            } else {
                                long j3 = -j2;
                                if (!arrayList2.contains(Long.valueOf(j3))) {
                                    arrayList2.add(Long.valueOf(j3));
                                }
                            }
                            if (!arrayList3.contains(Long.valueOf(jArr[i18]))) {
                                arrayList35.add(Long.valueOf(jArr[i18]));
                            }
                        }
                    }
                    if (arrayList35.isEmpty()) {
                        longSparseArray3 = null;
                    } else {
                        longSparseArray3 = new LongSparseArray(arrayList35.size());
                        try {
                            SQLiteCursor queryFinalized2 = messagesStorage2.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN(%s)", TextUtils.join(",", arrayList35)), new Object[0]);
                            while (queryFinalized2.next()) {
                                try {
                                    try {
                                        longSparseArray3.put(queryFinalized2.longValue(0), Integer.valueOf(queryFinalized2.intValue(1)));
                                    } catch (Exception e25) {
                                        e = e25;
                                        sQLiteCursor = queryFinalized2;
                                        messagesStorage = messagesStorage2;
                                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                        arrayList = arrayList6;
                                        exc = e;
                                        tLRPC$TL_messages_dialogs.dialogs.clear();
                                        tLRPC$TL_messages_dialogs.users.clear();
                                        tLRPC$TL_messages_dialogs.chats.clear();
                                        arrayList.clear();
                                        messagesStorage.checkSQLException(exc);
                                        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                        if (sQLiteCursor == null) {
                                            sQLiteCursor3 = sQLiteCursor;
                                            sQLiteCursor3.dispose();
                                        }
                                        return;
                                    }
                                } catch (Throwable th17) {
                                    th = th17;
                                    sQLiteCursor2 = sQLiteCursor3;
                                    th = th;
                                    if (sQLiteCursor2 != null) {
                                        sQLiteCursor2.dispose();
                                    }
                                    throw th;
                                }
                            }
                            queryFinalized2.dispose();
                            sQLiteCursor4 = null;
                        } catch (Exception e26) {
                            e = e26;
                            exc = e;
                            messagesStorage = messagesStorage2;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            sQLiteCursor = sQLiteCursor4;
                            arrayList = arrayList6;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor == null) {
                            }
                        } catch (Throwable th18) {
                            th = th18;
                            th = th;
                            sQLiteCursor2 = sQLiteCursor4;
                            if (sQLiteCursor2 != null) {
                            }
                            throw th;
                        }
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda202
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$getDialogs$219(longSparseArray3);
                        }
                    });
                } catch (Exception e27) {
                    e = e27;
                    exc = e;
                    messagesStorage = messagesStorage2;
                    tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    sQLiteCursor = sQLiteCursor4;
                    arrayList = arrayList6;
                    tLRPC$TL_messages_dialogs.dialogs.clear();
                    tLRPC$TL_messages_dialogs.users.clear();
                    tLRPC$TL_messages_dialogs.chats.clear();
                    arrayList.clear();
                    messagesStorage.checkSQLException(exc);
                    getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                    if (sQLiteCursor == null) {
                    }
                } catch (Throwable th19) {
                    th = th19;
                    th = th;
                    sQLiteCursor2 = sQLiteCursor4;
                    if (sQLiteCursor2 != null) {
                    }
                    throw th;
                }
            }
            sQLiteCursor3 = sQLiteCursor4;
            try {
                try {
                    if (arrayList4.isEmpty()) {
                        arrayList7 = arrayList6;
                    } else {
                        try {
                            arrayList7 = arrayList6;
                            try {
                                messagesStorage2.getEncryptedChatsInternal(TextUtils.join(",", arrayList4), arrayList7, arrayList5);
                            } catch (Exception e28) {
                                e = e28;
                                sQLiteCursor = sQLiteCursor3;
                                arrayList = arrayList7;
                                messagesStorage = messagesStorage2;
                                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                                exc = e;
                                tLRPC$TL_messages_dialogs.dialogs.clear();
                                tLRPC$TL_messages_dialogs.users.clear();
                                tLRPC$TL_messages_dialogs.chats.clear();
                                arrayList.clear();
                                messagesStorage.checkSQLException(exc);
                                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                                if (sQLiteCursor == null) {
                                }
                            }
                        } catch (Exception e29) {
                            e = e29;
                            arrayList7 = arrayList6;
                            sQLiteCursor = sQLiteCursor3;
                            arrayList = arrayList7;
                            messagesStorage = messagesStorage2;
                            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                            exc = e;
                            tLRPC$TL_messages_dialogs.dialogs.clear();
                            tLRPC$TL_messages_dialogs.users.clear();
                            tLRPC$TL_messages_dialogs.chats.clear();
                            arrayList.clear();
                            messagesStorage.checkSQLException(exc);
                            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
                            if (sQLiteCursor == null) {
                            }
                        }
                    }
                    try {
                        if (!arrayList2.isEmpty()) {
                            messagesStorage2.getChatsInternal(TextUtils.join(",", arrayList2), tLRPC$TL_messages_dialogs2.chats);
                        }
                        if (!arrayList5.isEmpty()) {
                            messagesStorage2.getUsersInternal(arrayList5, tLRPC$TL_messages_dialogs2.users);
                        }
                    } catch (Exception e30) {
                        e = e30;
                        arrayList = arrayList7;
                        messagesStorage = messagesStorage2;
                        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                    }
                } catch (Throwable th20) {
                    th = th20;
                }
            } catch (Exception e31) {
                e = e31;
                messagesStorage = messagesStorage2;
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                arrayList = arrayList6;
            }
        } catch (Exception e32) {
            e = e32;
            messagesStorage = messagesStorage2;
            tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
            arrayList = arrayList6;
            exc = e;
            sQLiteCursor = sQLiteCursor4;
            tLRPC$TL_messages_dialogs.dialogs.clear();
            tLRPC$TL_messages_dialogs.users.clear();
            tLRPC$TL_messages_dialogs.chats.clear();
            arrayList.clear();
            messagesStorage.checkSQLException(exc);
            getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs, arrayList, null, i, 0, 100, 1, true, false, true);
            if (sQLiteCursor == null) {
            }
        } catch (Throwable th21) {
            th = th21;
            th = th;
            sQLiteCursor2 = sQLiteCursor4;
            if (sQLiteCursor2 != null) {
            }
            throw th;
        }
        if (!hashSet.isEmpty()) {
            HashSet<Long> hashSet8 = new HashSet<>();
            Iterator it = hashSet.iterator();
            while (it.hasNext()) {
                Long l = (Long) it.next();
                for (int i19 = 0; i19 < tLRPC$TL_messages_dialogs2.users.size(); i19++) {
                    if (tLRPC$TL_messages_dialogs2.users.get(i19).id == l.longValue() && tLRPC$TL_messages_dialogs2.users.get(i19).premium) {
                        hashSet8.add(l);
                    }
                }
            }
            if (!hashSet8.isEmpty()) {
                arrayList8 = messagesStorage2.loadUserInfos(hashSet8);
                ArrayList<TLRPC$EncryptedChat> arrayList36 = arrayList7;
                messagesStorage = this;
                arrayList = arrayList7;
                tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
                getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList36, arrayList8, i, i2, i3, 1, false, false, true);
                if (sQLiteCursor3 == null) {
                    return;
                }
                sQLiteCursor3.dispose();
            }
        }
        arrayList8 = null;
        ArrayList<TLRPC$EncryptedChat> arrayList362 = arrayList7;
        messagesStorage = this;
        arrayList = arrayList7;
        tLRPC$TL_messages_dialogs = tLRPC$TL_messages_dialogs2;
        getMessagesController().processLoadedDialogs(tLRPC$TL_messages_dialogs2, arrayList362, arrayList8, i, i2, i3, 1, false, false, true);
        if (sQLiteCursor3 == null) {
        }
        sQLiteCursor3.dispose();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogs$219(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i, long j2) throws Exception {
        int i2;
        int i3;
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        if (j2 != 0) {
            sQLitePreparedStatement.bindLong(2, j2);
            i2 = 3;
        } else {
            i2 = 2;
        }
        int i4 = i2 + 1;
        sQLitePreparedStatement.bindInteger(i2, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(i4, i);
        sQLitePreparedStatement.step();
        for (int i5 = 0; i5 < 8; i5++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            if (j2 != 0) {
                sQLitePreparedStatement2.bindLong(2, j2);
                i3 = 3;
            } else {
                i3 = 2;
            }
            int i6 = i3 + 1;
            sQLitePreparedStatement2.bindInteger(i3, i5);
            int i7 = i3 + 2;
            sQLitePreparedStatement2.bindInteger(i6, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(i7, i);
            sQLitePreparedStatement2.step();
        }
    }

    public void updateDialogData(final TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda3
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogData$221(tLRPC$Dialog);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0074  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0079  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogData$221(TLRPC$Dialog tLRPC$Dialog) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor sQLiteCursor = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data FROM dialogs WHERE did = " + tLRPC$Dialog.id, new Object[0]);
            try {
                if (!queryFinalized.next()) {
                    queryFinalized.dispose();
                    return;
                }
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET data = ? WHERE did = ?");
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Dialog.getObjectSize());
                    tLRPC$Dialog.serializeToStream(nativeByteBuffer);
                    sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                    sQLitePreparedStatement.bindLong(2, tLRPC$Dialog.id);
                    sQLitePreparedStatement.step();
                    sQLitePreparedStatement.dispose();
                    nativeByteBuffer.reuse();
                    queryFinalized.dispose();
                } catch (Exception e) {
                    e = e;
                    sQLiteCursor = queryFinalized;
                    try {
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                    } catch (Throwable th) {
                        th = th;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != null) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLiteCursor = queryFinalized;
                    if (sQLiteCursor != null) {
                    }
                    if (sQLitePreparedStatement != null) {
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLitePreparedStatement = null;
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = null;
            }
        } catch (Exception e3) {
            e = e3;
            sQLitePreparedStatement = null;
        } catch (Throwable th4) {
            th = th4;
            sQLitePreparedStatement = null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:36:0x00e4, code lost:
        if (r8 != false) goto L342;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x0172, code lost:
        if (r8 < 0) goto L342;
     */
    /* JADX WARN: Code restructure failed: missing block: B:73:0x0174, code lost:
        r29 = r5;
        r7 = r6;
        r12 = r16;
        r26 = r17;
        r27 = r25;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:377:0x0703  */
    /* JADX WARN: Removed duplicated region for block: B:379:0x0708  */
    /* JADX WARN: Removed duplicated region for block: B:381:0x070d  */
    /* JADX WARN: Removed duplicated region for block: B:383:0x0712  */
    /* JADX WARN: Removed duplicated region for block: B:385:0x0717  */
    /* JADX WARN: Removed duplicated region for block: B:387:0x071c  */
    /* JADX WARN: Removed duplicated region for block: B:389:0x0721  */
    /* JADX WARN: Removed duplicated region for block: B:391:0x0726  */
    /* JADX WARN: Removed duplicated region for block: B:393:0x072b  */
    /* JADX WARN: Removed duplicated region for block: B:395:0x0730  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x0746  */
    /* JADX WARN: Removed duplicated region for block: B:406:0x074b  */
    /* JADX WARN: Removed duplicated region for block: B:408:0x0750  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x0755  */
    /* JADX WARN: Removed duplicated region for block: B:412:0x075a  */
    /* JADX WARN: Removed duplicated region for block: B:414:0x075f  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0764  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x0769  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x076e  */
    /* JADX WARN: Removed duplicated region for block: B:422:0x0773  */
    /* JADX WARN: Removed duplicated region for block: B:424:0x0778  */
    /* JADX WARN: Removed duplicated region for block: B:507:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void putDialogsInternal(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        Throwable th;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3;
        SQLitePreparedStatement sQLitePreparedStatement4;
        SQLitePreparedStatement sQLitePreparedStatement5;
        SQLitePreparedStatement sQLitePreparedStatement6;
        SQLitePreparedStatement sQLitePreparedStatement7;
        Throwable th2;
        SQLitePreparedStatement sQLitePreparedStatement8;
        SQLitePreparedStatement sQLitePreparedStatement9;
        SQLitePreparedStatement sQLitePreparedStatement10;
        SQLitePreparedStatement sQLitePreparedStatement11;
        SQLitePreparedStatement sQLitePreparedStatement12;
        SQLitePreparedStatement sQLitePreparedStatement13;
        SQLiteCursor sQLiteCursor;
        SQLiteDatabase sQLiteDatabase;
        SQLitePreparedStatement sQLitePreparedStatement14;
        SQLitePreparedStatement sQLitePreparedStatement15;
        SQLitePreparedStatement sQLitePreparedStatement16;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement17;
        SQLiteDatabase sQLiteDatabase2;
        SQLitePreparedStatement sQLitePreparedStatement18;
        SQLitePreparedStatement sQLitePreparedStatement19;
        SQLitePreparedStatement sQLitePreparedStatement20;
        SQLitePreparedStatement sQLitePreparedStatement21;
        SQLitePreparedStatement sQLitePreparedStatement22;
        SQLitePreparedStatement sQLitePreparedStatement23;
        SQLitePreparedStatement executeFast;
        int i2;
        SQLitePreparedStatement sQLitePreparedStatement24;
        SQLitePreparedStatement sQLitePreparedStatement25;
        Object obj;
        SQLitePreparedStatement sQLitePreparedStatement26;
        SQLitePreparedStatement sQLitePreparedStatement27;
        Object obj2;
        Object obj3;
        SQLitePreparedStatement sQLitePreparedStatement28;
        SQLitePreparedStatement sQLitePreparedStatement29;
        SQLitePreparedStatement sQLitePreparedStatement30;
        SQLitePreparedStatement sQLitePreparedStatement31;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        boolean next;
        int i3;
        LongSparseArray longSparseArray;
        SQLitePreparedStatement sQLitePreparedStatement32;
        SQLitePreparedStatement sQLitePreparedStatement33;
        boolean z;
        int i4;
        int i5;
        NativeByteBuffer nativeByteBuffer;
        SQLitePreparedStatement sQLitePreparedStatement34;
        long j;
        int i6;
        TLRPC$Dialog tLRPC$Dialog;
        int i7;
        int i8;
        NativeByteBuffer nativeByteBuffer2;
        int i9;
        int i10 = i;
        try {
            this.database.beginTransaction();
            LongSparseArray longSparseArray2 = new LongSparseArray(tLRPC$messages_Dialogs.messages.size());
            for (int i11 = 0; i11 < tLRPC$messages_Dialogs.messages.size(); i11++) {
                try {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Dialogs.messages.get(i11);
                    long dialogId = MessageObject.getDialogId(tLRPC$Message);
                    if (longSparseArray2.containsKey(dialogId)) {
                        if (longSparseArray2.get(dialogId) != null && ((TLRPC$Message) longSparseArray2.get(dialogId)).date < tLRPC$Message.date) {
                        }
                    }
                    longSparseArray2.put(dialogId, tLRPC$Message);
                } catch (Exception e) {
                    th2 = e;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement7 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement9 = sQLitePreparedStatement3;
                    sQLitePreparedStatement10 = sQLitePreparedStatement7;
                    sQLitePreparedStatement11 = sQLitePreparedStatement10;
                    SQLitePreparedStatement sQLitePreparedStatement35 = sQLitePreparedStatement11;
                    sQLitePreparedStatement12 = sQLitePreparedStatement8;
                    sQLitePreparedStatement18 = sQLitePreparedStatement35;
                    sQLitePreparedStatement19 = sQLitePreparedStatement35;
                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                    sQLiteCursor2 = sQLitePreparedStatement19;
                    try {
                        checkSQLException(th2);
                        sQLiteDatabase2 = this.database;
                        if (sQLiteDatabase2 != null) {
                        }
                        if (sQLiteCursor2 != 0) {
                        }
                        if (sQLitePreparedStatement5 != null) {
                        }
                        if (sQLitePreparedStatement9 != null) {
                        }
                        if (sQLitePreparedStatement12 != null) {
                        }
                        if (sQLitePreparedStatement2 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement6 != null) {
                        }
                        if (sQLitePreparedStatement17 != null) {
                        }
                        if (sQLitePreparedStatement11 != null) {
                        }
                        if (sQLitePreparedStatement10 == null) {
                        }
                        sQLitePreparedStatement10.dispose();
                    } catch (Throwable th3) {
                        th = th3;
                        sQLitePreparedStatement15 = sQLitePreparedStatement17;
                        sQLitePreparedStatement16 = sQLitePreparedStatement12;
                        sQLitePreparedStatement12 = sQLitePreparedStatement5;
                        sQLitePreparedStatement14 = sQLiteCursor2;
                        sQLitePreparedStatement5 = sQLitePreparedStatement12;
                        sQLiteCursor = sQLitePreparedStatement14;
                        sQLitePreparedStatement12 = sQLitePreparedStatement16;
                        sQLitePreparedStatement13 = sQLitePreparedStatement15;
                        sQLiteDatabase = this.database;
                        if (sQLiteDatabase != null) {
                            sQLiteDatabase.commitTransaction();
                        }
                        if (sQLiteCursor != 0) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement5 != null) {
                            sQLitePreparedStatement5.dispose();
                        }
                        if (sQLitePreparedStatement9 != null) {
                            sQLitePreparedStatement9.dispose();
                        }
                        if (sQLitePreparedStatement12 != null) {
                            sQLitePreparedStatement12.dispose();
                        }
                        if (sQLitePreparedStatement2 != null) {
                            sQLitePreparedStatement2.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement6 != null) {
                            sQLitePreparedStatement6.dispose();
                        }
                        if (sQLitePreparedStatement13 != null) {
                            sQLitePreparedStatement13.dispose();
                        }
                        if (sQLitePreparedStatement11 != null) {
                            sQLitePreparedStatement11.dispose();
                        }
                        if (sQLitePreparedStatement10 != null) {
                            sQLitePreparedStatement10.dispose();
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement5 = null;
                    sQLitePreparedStatement6 = null;
                    sQLitePreparedStatement9 = sQLitePreparedStatement3;
                    sQLitePreparedStatement10 = sQLitePreparedStatement;
                    sQLitePreparedStatement11 = sQLitePreparedStatement10;
                    SQLitePreparedStatement sQLitePreparedStatement36 = sQLitePreparedStatement11;
                    sQLitePreparedStatement12 = sQLitePreparedStatement4;
                    sQLitePreparedStatement13 = sQLitePreparedStatement36;
                    sQLiteCursor = sQLitePreparedStatement36;
                    sQLiteDatabase = this.database;
                    if (sQLiteDatabase != null) {
                    }
                    if (sQLiteCursor != 0) {
                    }
                    if (sQLitePreparedStatement5 != null) {
                    }
                    if (sQLitePreparedStatement9 != null) {
                    }
                    if (sQLitePreparedStatement12 != null) {
                    }
                    if (sQLitePreparedStatement2 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement6 != null) {
                    }
                    if (sQLitePreparedStatement13 != null) {
                    }
                    if (sQLitePreparedStatement11 != null) {
                    }
                    if (sQLitePreparedStatement10 != null) {
                    }
                    throw th;
                }
            }
            if (tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                sQLitePreparedStatement12 = null;
                sQLitePreparedStatement10 = null;
                sQLitePreparedStatement11 = null;
            } else {
                sQLitePreparedStatement5 = this.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0, NULL, ?, ?)");
                try {
                    sQLitePreparedStatement3 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    try {
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                        try {
                            sQLitePreparedStatement2 = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                            try {
                                sQLitePreparedStatement6 = this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                try {
                                    executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                    i2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    sQLitePreparedStatement10 = null;
                                    sQLitePreparedStatement11 = null;
                                    int i12 = 0;
                                    while (true) {
                                        try {
                                            sQLitePreparedStatement9 = sQLitePreparedStatement3;
                                            sQLitePreparedStatement29 = executeFast2;
                                            if (i12 >= tLRPC$messages_Dialogs.dialogs.size()) {
                                                break;
                                            }
                                            try {
                                                TLRPC$Dialog tLRPC$Dialog2 = tLRPC$messages_Dialogs.dialogs.get(i12);
                                                DialogObject.initDialog(tLRPC$Dialog2);
                                                LongSparseArray longSparseArray3 = longSparseArray2;
                                                this.unknownDialogsIds.remove(tLRPC$Dialog2.id);
                                                if (i10 == 1) {
                                                    try {
                                                        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                        try {
                                                            next = queryFinalized.next();
                                                            queryFinalized.dispose();
                                                        } catch (Exception e2) {
                                                            th2 = e2;
                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                            sQLiteCursor4 = queryFinalized;
                                                            sQLitePreparedStatement18 = executeFast;
                                                            sQLitePreparedStatement19 = sQLiteCursor4;
                                                            sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                            sQLiteCursor2 = sQLitePreparedStatement19;
                                                            checkSQLException(th2);
                                                            sQLiteDatabase2 = this.database;
                                                            if (sQLiteDatabase2 != null) {
                                                                sQLiteDatabase2.commitTransaction();
                                                            }
                                                            if (sQLiteCursor2 != 0) {
                                                                sQLiteCursor2.dispose();
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                                sQLitePreparedStatement5.dispose();
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                                sQLitePreparedStatement9.dispose();
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                                sQLitePreparedStatement12.dispose();
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                                sQLitePreparedStatement2.dispose();
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                                sQLitePreparedStatement6.dispose();
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                                sQLitePreparedStatement6.dispose();
                                                            }
                                                            if (sQLitePreparedStatement17 != null) {
                                                                sQLitePreparedStatement17.dispose();
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                                sQLitePreparedStatement11.dispose();
                                                            }
                                                            if (sQLitePreparedStatement10 == null) {
                                                                return;
                                                            }
                                                            sQLitePreparedStatement10.dispose();
                                                        } catch (Throwable th5) {
                                                            th = th5;
                                                            sQLitePreparedStatement12 = sQLitePreparedStatement29;
                                                            sQLiteCursor3 = queryFinalized;
                                                            sQLitePreparedStatement13 = executeFast;
                                                            sQLiteCursor = sQLiteCursor3;
                                                            sQLiteDatabase = this.database;
                                                            if (sQLiteDatabase != null) {
                                                            }
                                                            if (sQLiteCursor != 0) {
                                                            }
                                                            if (sQLitePreparedStatement5 != null) {
                                                            }
                                                            if (sQLitePreparedStatement9 != null) {
                                                            }
                                                            if (sQLitePreparedStatement12 != null) {
                                                            }
                                                            if (sQLitePreparedStatement2 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement6 != null) {
                                                            }
                                                            if (sQLitePreparedStatement13 != null) {
                                                            }
                                                            if (sQLitePreparedStatement11 != null) {
                                                            }
                                                            if (sQLitePreparedStatement10 != null) {
                                                            }
                                                            throw th;
                                                        }
                                                    } catch (Exception e3) {
                                                        th2 = e3;
                                                        sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                        sQLitePreparedStatement27 = null;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                        sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                        sQLitePreparedStatement18 = executeFast;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                        sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                        sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                        sQLiteCursor2 = sQLitePreparedStatement19;
                                                        checkSQLException(th2);
                                                        sQLiteDatabase2 = this.database;
                                                        if (sQLiteDatabase2 != null) {
                                                        }
                                                        if (sQLiteCursor2 != 0) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement17 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 == null) {
                                                        }
                                                        sQLitePreparedStatement10.dispose();
                                                    } catch (Throwable th6) {
                                                        th = th6;
                                                        sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                        obj = null;
                                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                        obj3 = obj;
                                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                        obj2 = obj3;
                                                        sQLitePreparedStatement13 = executeFast;
                                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                        sQLiteCursor = obj2;
                                                        sQLiteDatabase = this.database;
                                                        if (sQLiteDatabase != null) {
                                                        }
                                                        if (sQLiteCursor != 0) {
                                                        }
                                                        if (sQLitePreparedStatement5 != null) {
                                                        }
                                                        if (sQLitePreparedStatement9 != null) {
                                                        }
                                                        if (sQLitePreparedStatement12 != null) {
                                                        }
                                                        if (sQLitePreparedStatement2 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement6 != null) {
                                                        }
                                                        if (sQLitePreparedStatement13 != null) {
                                                        }
                                                        if (sQLitePreparedStatement11 != null) {
                                                        }
                                                        if (sQLitePreparedStatement10 != null) {
                                                        }
                                                        throw th;
                                                    }
                                                } else {
                                                    if (i10 == 2) {
                                                        SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT pinned FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                        if (queryFinalized2.next()) {
                                                            if (tLRPC$Dialog2.pinned) {
                                                                tLRPC$Dialog2.pinnedNum = queryFinalized2.intValue(0);
                                                            }
                                                            next = true;
                                                        } else {
                                                            next = false;
                                                        }
                                                        queryFinalized2.dispose();
                                                    } else {
                                                        if (i10 == 3) {
                                                            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT last_mid FROM dialogs WHERE did = " + tLRPC$Dialog2.id, new Object[0]);
                                                            int intValue = queryFinalized3.next() ? queryFinalized3.intValue(0) : 0;
                                                            queryFinalized3.dispose();
                                                        }
                                                        next = false;
                                                    }
                                                    TLRPC$Message tLRPC$Message2 = (TLRPC$Message) longSparseArray3.get(tLRPC$Dialog2.id);
                                                    if (tLRPC$Message2 != null) {
                                                        try {
                                                            int max = Math.max(tLRPC$Message2.date, 0);
                                                            if (isValidKeyboardToSave(tLRPC$Message2)) {
                                                                z = next;
                                                                try {
                                                                    long j2 = tLRPC$Dialog2.id;
                                                                    i3 = i12;
                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement2;
                                                                    try {
                                                                        getMediaDataController().putBotKeyboard(TopicKey.of(j2, MessageObject.getTopicId(this.currentAccount, tLRPC$Message2, isForum(j2))), tLRPC$Message2);
                                                                    } catch (Exception e4) {
                                                                        e = e4;
                                                                        th2 = e;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                                        sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                        sQLitePreparedStatement27 = null;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                        sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                        sQLitePreparedStatement18 = executeFast;
                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                        sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                        sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                        sQLiteCursor2 = sQLitePreparedStatement19;
                                                                        checkSQLException(th2);
                                                                        sQLiteDatabase2 = this.database;
                                                                        if (sQLiteDatabase2 != null) {
                                                                        }
                                                                        if (sQLiteCursor2 != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement17 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 == null) {
                                                                        }
                                                                        sQLitePreparedStatement10.dispose();
                                                                    } catch (Throwable th7) {
                                                                        th = th7;
                                                                        th = th;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                                        sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                        obj = null;
                                                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                        obj3 = obj;
                                                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                        obj2 = obj3;
                                                                        sQLitePreparedStatement13 = executeFast;
                                                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                        sQLiteCursor = obj2;
                                                                        sQLiteDatabase = this.database;
                                                                        if (sQLiteDatabase != null) {
                                                                        }
                                                                        if (sQLiteCursor != 0) {
                                                                        }
                                                                        if (sQLitePreparedStatement5 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement9 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement12 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement2 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement6 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement13 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement11 != null) {
                                                                        }
                                                                        if (sQLitePreparedStatement10 != null) {
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } catch (Exception e5) {
                                                                    e = e5;
                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement2;
                                                                } catch (Throwable th8) {
                                                                    th = th8;
                                                                    sQLitePreparedStatement33 = sQLitePreparedStatement2;
                                                                }
                                                            } else {
                                                                i3 = i12;
                                                                sQLitePreparedStatement33 = sQLitePreparedStatement2;
                                                                z = next;
                                                            }
                                                            try {
                                                                fixUnsupportedMedia(tLRPC$Message2);
                                                                MessageObject.normalizeFlags(tLRPC$Message2);
                                                                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$Message2.getObjectSize());
                                                                tLRPC$Message2.serializeToStream(nativeByteBuffer3);
                                                                sQLitePreparedStatement5.requery();
                                                                sQLitePreparedStatement5.bindInteger(1, tLRPC$Message2.id);
                                                                sQLitePreparedStatement5.bindLong(2, tLRPC$Dialog2.id);
                                                                sQLitePreparedStatement5.bindInteger(3, MessageObject.getUnreadFlags(tLRPC$Message2));
                                                                sQLitePreparedStatement5.bindInteger(4, tLRPC$Message2.send_state);
                                                                sQLitePreparedStatement5.bindInteger(5, tLRPC$Message2.date);
                                                                sQLitePreparedStatement5.bindByteBuffer(6, nativeByteBuffer3);
                                                                sQLitePreparedStatement5.bindInteger(7, (MessageObject.isOut(tLRPC$Message2) || tLRPC$Message2.from_scheduled) ? 1 : 0);
                                                                sQLitePreparedStatement5.bindInteger(8, 0);
                                                                if ((tLRPC$Message2.flags & 1024) != 0) {
                                                                    i5 = tLRPC$Message2.views;
                                                                    i4 = 9;
                                                                } else {
                                                                    i4 = 9;
                                                                    i5 = 0;
                                                                }
                                                                sQLitePreparedStatement5.bindInteger(i4, i5);
                                                                int i13 = tLRPC$Message2.stickerVerified;
                                                                sQLitePreparedStatement5.bindInteger(10, i13 == 0 ? 1 : i13 == 2 ? 2 : 0);
                                                                sQLitePreparedStatement5.bindInteger(11, tLRPC$Message2.mentioned ? 1 : 0);
                                                                sQLitePreparedStatement5.bindInteger(12, tLRPC$Message2.forwards);
                                                                if (tLRPC$Message2.replies != null) {
                                                                    nativeByteBuffer = new NativeByteBuffer(tLRPC$Message2.replies.getObjectSize());
                                                                    tLRPC$Message2.replies.serializeToStream(nativeByteBuffer);
                                                                    sQLitePreparedStatement5.bindByteBuffer(13, nativeByteBuffer);
                                                                } else {
                                                                    sQLitePreparedStatement5.bindNull(13);
                                                                    nativeByteBuffer = null;
                                                                }
                                                                TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message2.reply_to;
                                                                if (tLRPC$MessageReplyHeader != null) {
                                                                    int i14 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                                                    if (i14 == 0) {
                                                                        i14 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                                                    }
                                                                    sQLitePreparedStatement5.bindInteger(14, i14);
                                                                } else {
                                                                    sQLitePreparedStatement5.bindInteger(14, 0);
                                                                }
                                                                sQLitePreparedStatement5.bindLong(15, MessageObject.getChannelId(tLRPC$Message2));
                                                                if ((tLRPC$Message2.flags & 131072) != 0) {
                                                                    sQLitePreparedStatement5.bindLong(16, tLRPC$Message2.grouped_id);
                                                                } else {
                                                                    sQLitePreparedStatement5.bindNull(16);
                                                                }
                                                                TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader2 = tLRPC$Message2.reply_to;
                                                                if (tLRPC$MessageReplyHeader2 != null) {
                                                                    sQLitePreparedStatement5.bindInteger(17, tLRPC$MessageReplyHeader2.story_id);
                                                                } else {
                                                                    sQLitePreparedStatement5.bindInteger(17, 0);
                                                                }
                                                                sQLitePreparedStatement5.step();
                                                                if (MediaDataController.canAddMessageToMedia(tLRPC$Message2)) {
                                                                    try {
                                                                        sQLitePreparedStatement29.requery();
                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement29;
                                                                        try {
                                                                            sQLitePreparedStatement34.bindInteger(1, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement34.bindLong(2, tLRPC$Dialog2.id);
                                                                            sQLitePreparedStatement34.bindInteger(3, tLRPC$Message2.date);
                                                                            sQLitePreparedStatement34.bindInteger(4, MediaDataController.getMediaType(tLRPC$Message2));
                                                                            sQLitePreparedStatement34.bindByteBuffer(5, nativeByteBuffer3);
                                                                            sQLitePreparedStatement34.step();
                                                                        } catch (Exception e6) {
                                                                            e = e6;
                                                                            th2 = e;
                                                                            sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                            sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                            sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                            sQLitePreparedStatement27 = null;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                            sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                            sQLitePreparedStatement18 = executeFast;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                            sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                            sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                            sQLiteCursor2 = sQLitePreparedStatement19;
                                                                            checkSQLException(th2);
                                                                            sQLiteDatabase2 = this.database;
                                                                            if (sQLiteDatabase2 != null) {
                                                                            }
                                                                            if (sQLiteCursor2 != 0) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement17 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 == null) {
                                                                            }
                                                                            sQLitePreparedStatement10.dispose();
                                                                        } catch (Throwable th9) {
                                                                            th = th9;
                                                                            th = th;
                                                                            sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                            sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                            sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                            obj = null;
                                                                            sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                            obj3 = obj;
                                                                            sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                            obj2 = obj3;
                                                                            sQLitePreparedStatement13 = executeFast;
                                                                            sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                            sQLiteCursor = obj2;
                                                                            sQLiteDatabase = this.database;
                                                                            if (sQLiteDatabase != null) {
                                                                            }
                                                                            if (sQLiteCursor != 0) {
                                                                            }
                                                                            if (sQLitePreparedStatement5 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement9 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement12 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement2 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement6 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement13 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement11 != null) {
                                                                            }
                                                                            if (sQLitePreparedStatement10 != null) {
                                                                            }
                                                                            throw th;
                                                                        }
                                                                    } catch (Exception e7) {
                                                                        e = e7;
                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement29;
                                                                    } catch (Throwable th10) {
                                                                        th = th10;
                                                                        sQLitePreparedStatement34 = sQLitePreparedStatement29;
                                                                    }
                                                                } else {
                                                                    sQLitePreparedStatement34 = sQLitePreparedStatement29;
                                                                }
                                                                if (nativeByteBuffer != null) {
                                                                    nativeByteBuffer.reuse();
                                                                }
                                                                try {
                                                                    nativeByteBuffer3.reuse();
                                                                    if (tLRPC$Message2.ttl_period != 0 && tLRPC$Message2.id > 0) {
                                                                        if (sQLitePreparedStatement10 == null) {
                                                                            sQLitePreparedStatement10 = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                                                                        }
                                                                        sQLitePreparedStatement10.requery();
                                                                        sQLitePreparedStatement10.bindInteger(1, tLRPC$Message2.id);
                                                                        sQLitePreparedStatement10.bindLong(2, tLRPC$Message2.dialog_id);
                                                                        sQLitePreparedStatement10.bindInteger(3, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                        sQLitePreparedStatement10.bindInteger(4, 0);
                                                                        sQLitePreparedStatement10.step();
                                                                        i2 = Math.min(i2, tLRPC$Message2.date + tLRPC$Message2.ttl_period);
                                                                    }
                                                                    int i15 = i2;
                                                                    SQLitePreparedStatement sQLitePreparedStatement37 = sQLitePreparedStatement10;
                                                                    try {
                                                                        if (tLRPC$Message2.media instanceof TLRPC$TL_messageMediaPoll) {
                                                                            if (sQLitePreparedStatement11 == null) {
                                                                                try {
                                                                                    sQLitePreparedStatement11 = this.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                                                                                } catch (Exception e8) {
                                                                                    th2 = e8;
                                                                                    sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                                    sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                                    sQLitePreparedStatement27 = null;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                                    sQLitePreparedStatement18 = executeFast;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                                    sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                                                                    checkSQLException(th2);
                                                                                    sQLiteDatabase2 = this.database;
                                                                                    if (sQLiteDatabase2 != null) {
                                                                                    }
                                                                                    if (sQLiteCursor2 != 0) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement17 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 == null) {
                                                                                    }
                                                                                    sQLitePreparedStatement10.dispose();
                                                                                } catch (Throwable th11) {
                                                                                    th = th11;
                                                                                    sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                                    sQLitePreparedStatement26 = sQLitePreparedStatement33;
                                                                                    sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                                    obj = null;
                                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                                    obj3 = obj;
                                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                                    obj2 = obj3;
                                                                                    sQLitePreparedStatement13 = executeFast;
                                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                                    sQLiteCursor = obj2;
                                                                                    sQLiteDatabase = this.database;
                                                                                    if (sQLiteDatabase != null) {
                                                                                    }
                                                                                    if (sQLiteCursor != 0) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement5 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement9 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement12 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement2 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement6 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement13 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement11 != null) {
                                                                                    }
                                                                                    if (sQLitePreparedStatement10 != null) {
                                                                                    }
                                                                                    throw th;
                                                                                }
                                                                            }
                                                                            sQLitePreparedStatement11.requery();
                                                                            sQLitePreparedStatement11.bindInteger(1, tLRPC$Message2.id);
                                                                            sQLitePreparedStatement11.bindLong(2, tLRPC$Message2.dialog_id);
                                                                            sQLitePreparedStatement11.bindLong(3, ((TLRPC$TL_messageMediaPoll) tLRPC$Message2.media).poll.id);
                                                                            sQLitePreparedStatement11.step();
                                                                        }
                                                                        SQLitePreparedStatement sQLitePreparedStatement38 = sQLitePreparedStatement11;
                                                                        if (z) {
                                                                            try {
                                                                                j = tLRPC$Dialog2.id;
                                                                                i6 = tLRPC$Message2.id;
                                                                                tLRPC$Dialog = tLRPC$Dialog2;
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                                sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                                longSparseArray = longSparseArray3;
                                                                                i7 = 1;
                                                                            } catch (Exception e9) {
                                                                                e = e9;
                                                                                sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                            } catch (Throwable th12) {
                                                                                th = th12;
                                                                                sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                                sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                            }
                                                                            try {
                                                                                closeHolesInTable("messages_holes", j, i6, i6, 0L);
                                                                                long j3 = tLRPC$Dialog.id;
                                                                                int i16 = tLRPC$Message2.id;
                                                                                closeHolesInMedia(j3, i16, i16, -1, 0L);
                                                                            } catch (Exception e10) {
                                                                                e = e10;
                                                                                th2 = e;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                                sQLitePreparedStatement11 = sQLitePreparedStatement38;
                                                                                sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                                sQLitePreparedStatement27 = null;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                                sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                                sQLitePreparedStatement18 = executeFast;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                                sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                                sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                                sQLiteCursor2 = sQLitePreparedStatement19;
                                                                                checkSQLException(th2);
                                                                                sQLiteDatabase2 = this.database;
                                                                                if (sQLiteDatabase2 != null) {
                                                                                }
                                                                                if (sQLiteCursor2 != 0) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement17 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 == null) {
                                                                                }
                                                                                sQLitePreparedStatement10.dispose();
                                                                            } catch (Throwable th13) {
                                                                                th = th13;
                                                                                th = th;
                                                                                sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                                sQLitePreparedStatement11 = sQLitePreparedStatement38;
                                                                                sQLitePreparedStatement24 = sQLitePreparedStatement24;
                                                                                sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                                obj = null;
                                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                                obj3 = obj;
                                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                                obj2 = obj3;
                                                                                sQLitePreparedStatement13 = executeFast;
                                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                                sQLiteCursor = obj2;
                                                                                sQLiteDatabase = this.database;
                                                                                if (sQLiteDatabase != null) {
                                                                                }
                                                                                if (sQLiteCursor != 0) {
                                                                                }
                                                                                if (sQLitePreparedStatement5 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement9 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement12 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement2 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement6 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement13 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement11 != null) {
                                                                                }
                                                                                if (sQLitePreparedStatement10 != null) {
                                                                                }
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            tLRPC$Dialog = tLRPC$Dialog2;
                                                                            sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                            sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                            longSparseArray = longSparseArray3;
                                                                            sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                            i7 = 1;
                                                                            createFirstHoles(tLRPC$Dialog.id, sQLitePreparedStatement6, executeFast, tLRPC$Message2.id, 0L);
                                                                        }
                                                                        i8 = max;
                                                                        i2 = i15;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                        sQLitePreparedStatement11 = sQLitePreparedStatement38;
                                                                    } catch (Exception e11) {
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                        th2 = e11;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                    } catch (Throwable th14) {
                                                                        sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                        sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                        th = th14;
                                                                        sQLitePreparedStatement10 = sQLitePreparedStatement37;
                                                                    }
                                                                } catch (Exception e12) {
                                                                    e = e12;
                                                                    sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                    sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                    th2 = e;
                                                                    sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                    sQLitePreparedStatement27 = null;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                    sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement18 = executeFast;
                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                    sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                                                    checkSQLException(th2);
                                                                    sQLiteDatabase2 = this.database;
                                                                    if (sQLiteDatabase2 != null) {
                                                                    }
                                                                    if (sQLiteCursor2 != 0) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement17 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 == null) {
                                                                    }
                                                                    sQLitePreparedStatement10.dispose();
                                                                } catch (Throwable th15) {
                                                                    th = th15;
                                                                    sQLitePreparedStatement25 = sQLitePreparedStatement34;
                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                    sQLitePreparedStatement32 = sQLitePreparedStatement33;
                                                                    th = th;
                                                                    sQLitePreparedStatement24 = sQLitePreparedStatement24;
                                                                    sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                    obj = null;
                                                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                    obj3 = obj;
                                                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                    obj2 = obj3;
                                                                    sQLitePreparedStatement13 = executeFast;
                                                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                    sQLiteCursor = obj2;
                                                                    sQLiteDatabase = this.database;
                                                                    if (sQLiteDatabase != null) {
                                                                    }
                                                                    if (sQLiteCursor != 0) {
                                                                    }
                                                                    if (sQLitePreparedStatement5 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement9 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement12 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement2 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement6 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement13 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement11 != null) {
                                                                    }
                                                                    if (sQLitePreparedStatement10 != null) {
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Exception e13) {
                                                                e = e13;
                                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                            } catch (Throwable th16) {
                                                                th = th16;
                                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                                sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                            }
                                                        } catch (Exception e14) {
                                                            e = e14;
                                                            sQLitePreparedStatement32 = sQLitePreparedStatement2;
                                                            sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                            sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                        } catch (Throwable th17) {
                                                            th = th17;
                                                            sQLitePreparedStatement32 = sQLitePreparedStatement2;
                                                            sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                            sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                        }
                                                    } else {
                                                        tLRPC$Dialog = tLRPC$Dialog2;
                                                        i3 = i12;
                                                        sQLitePreparedStatement32 = sQLitePreparedStatement2;
                                                        sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                        sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                                        longSparseArray = longSparseArray3;
                                                        i7 = 1;
                                                        i8 = 0;
                                                    }
                                                    try {
                                                        sQLitePreparedStatement24.requery();
                                                        sQLitePreparedStatement24.bindLong(i7, tLRPC$Dialog.id);
                                                        sQLitePreparedStatement24.bindInteger(2, i8);
                                                        sQLitePreparedStatement24.bindInteger(3, tLRPC$Dialog.unread_count);
                                                        sQLitePreparedStatement24.bindInteger(4, tLRPC$Dialog.top_message);
                                                        sQLitePreparedStatement24.bindInteger(5, tLRPC$Dialog.read_inbox_max_id);
                                                        sQLitePreparedStatement24.bindInteger(6, tLRPC$Dialog.read_outbox_max_id);
                                                        sQLitePreparedStatement24.bindLong(7, 0L);
                                                        sQLitePreparedStatement24.bindInteger(8, tLRPC$Dialog.unread_mentions_count);
                                                        sQLitePreparedStatement24.bindInteger(9, tLRPC$Dialog.pts);
                                                        sQLitePreparedStatement24.bindInteger(10, 0);
                                                        sQLitePreparedStatement24.bindInteger(11, tLRPC$Dialog.pinnedNum);
                                                        boolean z2 = tLRPC$Dialog.unread_mark;
                                                        int i17 = z2;
                                                        if (tLRPC$Dialog.view_forum_as_messages) {
                                                            i17 = (z2 ? 1 : 0) | 64;
                                                        }
                                                        sQLitePreparedStatement24.bindInteger(12, i17);
                                                        sQLitePreparedStatement24.bindInteger(13, tLRPC$Dialog.folder_id);
                                                        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                                                            try {
                                                                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                                                                nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_dialogFolder.folder.getObjectSize());
                                                                tLRPC$TL_dialogFolder.folder.serializeToStream(nativeByteBuffer2);
                                                                sQLitePreparedStatement24.bindByteBuffer(14, nativeByteBuffer2);
                                                            } catch (Exception e15) {
                                                                e = e15;
                                                                th2 = e;
                                                                sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                sQLitePreparedStatement27 = null;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                sQLitePreparedStatement18 = executeFast;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                sQLiteCursor2 = sQLitePreparedStatement19;
                                                                checkSQLException(th2);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor2 != 0) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement17 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 == null) {
                                                                }
                                                                sQLitePreparedStatement10.dispose();
                                                            } catch (Throwable th18) {
                                                                th = th18;
                                                                th = th;
                                                                sQLitePreparedStatement24 = sQLitePreparedStatement24;
                                                                sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                                obj = null;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                obj3 = obj;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                obj2 = obj3;
                                                                sQLitePreparedStatement13 = executeFast;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                sQLiteCursor = obj2;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor != 0) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement13 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } else {
                                                            sQLitePreparedStatement24.bindNull(14);
                                                            nativeByteBuffer2 = null;
                                                        }
                                                        sQLitePreparedStatement24.bindInteger(15, tLRPC$Dialog.unread_reactions_count);
                                                        if (tLRPC$Message2 != null && (tLRPC$Message2.flags & 131072) != 0) {
                                                            sQLitePreparedStatement24.bindLong(16, tLRPC$Message2.grouped_id);
                                                        } else {
                                                            sQLitePreparedStatement24.bindNull(16);
                                                        }
                                                        sQLitePreparedStatement24.bindInteger(17, tLRPC$Dialog.ttl_period);
                                                        sQLitePreparedStatement24.step();
                                                        if (nativeByteBuffer2 != null) {
                                                            nativeByteBuffer2.reuse();
                                                        }
                                                        if (tLRPC$Dialog.notify_settings != null) {
                                                            sQLitePreparedStatement32.requery();
                                                            sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                            try {
                                                                sQLitePreparedStatement26.bindLong(i7, tLRPC$Dialog.id);
                                                                if (tLRPC$Dialog.notify_settings.mute_until != 0) {
                                                                    i9 = 2;
                                                                } else {
                                                                    i9 = 2;
                                                                    i7 = 0;
                                                                }
                                                                sQLitePreparedStatement26.bindInteger(i9, i7);
                                                                sQLitePreparedStatement26.step();
                                                            } catch (Exception e16) {
                                                                e = e16;
                                                                th2 = e;
                                                                sQLitePreparedStatement27 = null;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                sQLitePreparedStatement18 = executeFast;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                                                sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                                sQLiteCursor2 = sQLitePreparedStatement19;
                                                                checkSQLException(th2);
                                                                sQLiteDatabase2 = this.database;
                                                                if (sQLiteDatabase2 != null) {
                                                                }
                                                                if (sQLiteCursor2 != 0) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement17 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 == null) {
                                                                }
                                                                sQLitePreparedStatement10.dispose();
                                                            } catch (Throwable th19) {
                                                                th = th19;
                                                                th = th;
                                                                obj = null;
                                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                                obj3 = obj;
                                                                sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                                                obj2 = obj3;
                                                                sQLitePreparedStatement13 = executeFast;
                                                                sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                                                sQLiteCursor = obj2;
                                                                sQLiteDatabase = this.database;
                                                                if (sQLiteDatabase != null) {
                                                                }
                                                                if (sQLiteCursor != 0) {
                                                                }
                                                                if (sQLitePreparedStatement5 != null) {
                                                                }
                                                                if (sQLitePreparedStatement9 != null) {
                                                                }
                                                                if (sQLitePreparedStatement12 != null) {
                                                                }
                                                                if (sQLitePreparedStatement2 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement6 != null) {
                                                                }
                                                                if (sQLitePreparedStatement13 != null) {
                                                                }
                                                                if (sQLitePreparedStatement11 != null) {
                                                                }
                                                                if (sQLitePreparedStatement10 != null) {
                                                                }
                                                                throw th;
                                                            }
                                                        } else {
                                                            sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                        }
                                                    } catch (Exception e17) {
                                                        e = e17;
                                                        sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                    } catch (Throwable th20) {
                                                        th = th20;
                                                        sQLitePreparedStatement26 = sQLitePreparedStatement32;
                                                    }
                                                }
                                                i12 = i3 + 1;
                                                i10 = i;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                sQLitePreparedStatement3 = sQLitePreparedStatement24;
                                                executeFast2 = sQLitePreparedStatement25;
                                                longSparseArray2 = longSparseArray;
                                            } catch (Exception e18) {
                                                e = e18;
                                                sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                            } catch (Throwable th21) {
                                                th = th21;
                                                sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                                sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                                sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                            }
                                        } catch (Exception e19) {
                                            e = e19;
                                            sQLitePreparedStatement24 = sQLitePreparedStatement3;
                                            sQLitePreparedStatement25 = executeFast2;
                                            sQLitePreparedStatement27 = null;
                                            sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                        } catch (Throwable th22) {
                                            th = th22;
                                            sQLitePreparedStatement24 = sQLitePreparedStatement3;
                                            sQLitePreparedStatement25 = executeFast2;
                                            obj = null;
                                            sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                        }
                                    }
                                    sQLitePreparedStatement26 = sQLitePreparedStatement2;
                                    sQLitePreparedStatement24 = sQLitePreparedStatement9;
                                    sQLitePreparedStatement25 = sQLitePreparedStatement29;
                                } catch (Exception e20) {
                                    sQLitePreparedStatement23 = sQLitePreparedStatement3;
                                    sQLitePreparedStatement21 = executeFast2;
                                    sQLitePreparedStatement7 = null;
                                    th2 = e20;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement23;
                                    sQLitePreparedStatement8 = sQLitePreparedStatement21;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement3;
                                    sQLitePreparedStatement10 = sQLitePreparedStatement7;
                                    sQLitePreparedStatement11 = sQLitePreparedStatement10;
                                    SQLitePreparedStatement sQLitePreparedStatement352 = sQLitePreparedStatement11;
                                    sQLitePreparedStatement12 = sQLitePreparedStatement8;
                                    sQLitePreparedStatement18 = sQLitePreparedStatement352;
                                    sQLitePreparedStatement19 = sQLitePreparedStatement352;
                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                    checkSQLException(th2);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor2 != 0) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement17 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement10 == null) {
                                    }
                                    sQLitePreparedStatement10.dispose();
                                } catch (Throwable th23) {
                                    sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                    sQLitePreparedStatement20 = executeFast2;
                                    sQLitePreparedStatement = null;
                                    th = th23;
                                    sQLitePreparedStatement3 = sQLitePreparedStatement22;
                                    sQLitePreparedStatement4 = sQLitePreparedStatement20;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement3;
                                    sQLitePreparedStatement10 = sQLitePreparedStatement;
                                    sQLitePreparedStatement11 = sQLitePreparedStatement10;
                                    SQLitePreparedStatement sQLitePreparedStatement362 = sQLitePreparedStatement11;
                                    sQLitePreparedStatement12 = sQLitePreparedStatement4;
                                    sQLitePreparedStatement13 = sQLitePreparedStatement362;
                                    sQLiteCursor = sQLitePreparedStatement362;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != 0) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    throw th;
                                }
                                try {
                                    sQLitePreparedStatement5.dispose();
                                    try {
                                        sQLitePreparedStatement24.dispose();
                                        try {
                                            sQLitePreparedStatement25.dispose();
                                            try {
                                                sQLitePreparedStatement26.dispose();
                                            } catch (Exception e21) {
                                                sQLitePreparedStatement12 = null;
                                                th2 = e21;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                sQLitePreparedStatement31 = null;
                                            } catch (Throwable th24) {
                                                sQLitePreparedStatement12 = null;
                                                th = th24;
                                                sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                                sQLitePreparedStatement30 = null;
                                            }
                                        } catch (Exception e22) {
                                            th2 = e22;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                            sQLitePreparedStatement28 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement18 = executeFast;
                                            sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                            sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                            sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                            sQLiteCursor2 = sQLitePreparedStatement19;
                                            checkSQLException(th2);
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor2 != 0) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement17 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement10 == null) {
                                            }
                                            sQLitePreparedStatement10.dispose();
                                        } catch (Throwable th25) {
                                            th = th25;
                                            sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                            obj2 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement13 = executeFast;
                                            sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                            sQLiteCursor = obj2;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != 0) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e23) {
                                        th2 = e23;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                        sQLitePreparedStatement28 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                        sQLitePreparedStatement18 = executeFast;
                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                        sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                        sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                        sQLiteCursor2 = sQLitePreparedStatement19;
                                        checkSQLException(th2);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor2 != 0) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement17 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement10 == null) {
                                        }
                                        sQLitePreparedStatement10.dispose();
                                    } catch (Throwable th26) {
                                        th = th26;
                                        sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                        obj3 = null;
                                        sQLitePreparedStatement5 = null;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                        obj2 = obj3;
                                        sQLitePreparedStatement13 = executeFast;
                                        sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                        sQLiteCursor = obj2;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor != 0) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        throw th;
                                    }
                                    try {
                                        sQLitePreparedStatement6.dispose();
                                        try {
                                            executeFast.dispose();
                                            if (sQLitePreparedStatement10 != null) {
                                                try {
                                                    sQLitePreparedStatement10.dispose();
                                                    sQLitePreparedStatement12 = null;
                                                } catch (Exception e24) {
                                                    e = e24;
                                                    sQLitePreparedStatement12 = null;
                                                    th2 = e;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                    SQLitePreparedStatement sQLitePreparedStatement39 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement39;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement19 = sQLitePreparedStatement39;
                                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor2 != 0) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement17 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 == null) {
                                                    }
                                                    sQLitePreparedStatement10.dispose();
                                                } catch (Throwable th27) {
                                                    th = th27;
                                                    sQLitePreparedStatement12 = null;
                                                    th = th;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                    SQLitePreparedStatement sQLitePreparedStatement40 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement40;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement9;
                                                    sQLiteCursor = sQLitePreparedStatement40;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                                try {
                                                    getMessagesController().didAddedNewTask(i2, 0L, null);
                                                } catch (Exception e25) {
                                                    e = e25;
                                                    th2 = e;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                    SQLitePreparedStatement sQLitePreparedStatement392 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement18 = sQLitePreparedStatement392;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement18;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement9;
                                                    sQLitePreparedStatement19 = sQLitePreparedStatement392;
                                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                                    checkSQLException(th2);
                                                    sQLiteDatabase2 = this.database;
                                                    if (sQLiteDatabase2 != null) {
                                                    }
                                                    if (sQLiteCursor2 != 0) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement17 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 == null) {
                                                    }
                                                    sQLitePreparedStatement10.dispose();
                                                } catch (Throwable th28) {
                                                    th = th28;
                                                    th = th;
                                                    sQLitePreparedStatement2 = sQLitePreparedStatement12;
                                                    SQLitePreparedStatement sQLitePreparedStatement402 = sQLitePreparedStatement2;
                                                    sQLitePreparedStatement13 = sQLitePreparedStatement402;
                                                    sQLitePreparedStatement5 = sQLitePreparedStatement13;
                                                    sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                                    sQLitePreparedStatement6 = sQLitePreparedStatement9;
                                                    sQLiteCursor = sQLitePreparedStatement402;
                                                    sQLiteDatabase = this.database;
                                                    if (sQLiteDatabase != null) {
                                                    }
                                                    if (sQLiteCursor != 0) {
                                                    }
                                                    if (sQLitePreparedStatement5 != null) {
                                                    }
                                                    if (sQLitePreparedStatement9 != null) {
                                                    }
                                                    if (sQLitePreparedStatement12 != null) {
                                                    }
                                                    if (sQLitePreparedStatement2 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement6 != null) {
                                                    }
                                                    if (sQLitePreparedStatement13 != null) {
                                                    }
                                                    if (sQLitePreparedStatement11 != null) {
                                                    }
                                                    if (sQLitePreparedStatement10 != null) {
                                                    }
                                                    throw th;
                                                }
                                            } else {
                                                sQLitePreparedStatement12 = null;
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                                sQLitePreparedStatement11.dispose();
                                            }
                                        } catch (Exception e26) {
                                            sQLitePreparedStatement12 = null;
                                            th2 = e26;
                                            sQLitePreparedStatement2 = null;
                                            sQLiteCursor4 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement18 = executeFast;
                                            sQLitePreparedStatement19 = sQLiteCursor4;
                                            sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                            sQLiteCursor2 = sQLitePreparedStatement19;
                                            checkSQLException(th2);
                                            sQLiteDatabase2 = this.database;
                                            if (sQLiteDatabase2 != null) {
                                            }
                                            if (sQLiteCursor2 != 0) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement17 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement10 == null) {
                                            }
                                            sQLitePreparedStatement10.dispose();
                                        } catch (Throwable th29) {
                                            sQLitePreparedStatement12 = null;
                                            th = th29;
                                            sQLitePreparedStatement2 = null;
                                            sQLiteCursor3 = null;
                                            sQLitePreparedStatement5 = null;
                                            sQLitePreparedStatement9 = null;
                                            sQLitePreparedStatement6 = null;
                                            sQLitePreparedStatement13 = executeFast;
                                            sQLiteCursor = sQLiteCursor3;
                                            sQLiteDatabase = this.database;
                                            if (sQLiteDatabase != null) {
                                            }
                                            if (sQLiteCursor != 0) {
                                            }
                                            if (sQLitePreparedStatement5 != null) {
                                            }
                                            if (sQLitePreparedStatement9 != null) {
                                            }
                                            if (sQLitePreparedStatement12 != null) {
                                            }
                                            if (sQLitePreparedStatement2 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement6 != null) {
                                            }
                                            if (sQLitePreparedStatement13 != null) {
                                            }
                                            if (sQLitePreparedStatement11 != null) {
                                            }
                                            if (sQLitePreparedStatement10 != null) {
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e27) {
                                        sQLitePreparedStatement12 = null;
                                        th2 = e27;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement31 = null;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement31;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                        sQLiteCursor4 = sQLitePreparedStatement31;
                                        sQLitePreparedStatement18 = executeFast;
                                        sQLitePreparedStatement19 = sQLiteCursor4;
                                        sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                        sQLiteCursor2 = sQLitePreparedStatement19;
                                        checkSQLException(th2);
                                        sQLiteDatabase2 = this.database;
                                        if (sQLiteDatabase2 != null) {
                                        }
                                        if (sQLiteCursor2 != 0) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement17 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement10 == null) {
                                        }
                                        sQLitePreparedStatement10.dispose();
                                    } catch (Throwable th30) {
                                        sQLitePreparedStatement12 = null;
                                        th = th30;
                                        sQLitePreparedStatement2 = null;
                                        sQLitePreparedStatement30 = null;
                                        sQLitePreparedStatement5 = sQLitePreparedStatement30;
                                        sQLitePreparedStatement9 = sQLitePreparedStatement5;
                                        sQLiteCursor3 = sQLitePreparedStatement30;
                                        sQLitePreparedStatement13 = executeFast;
                                        sQLiteCursor = sQLiteCursor3;
                                        sQLiteDatabase = this.database;
                                        if (sQLiteDatabase != null) {
                                        }
                                        if (sQLiteCursor != 0) {
                                        }
                                        if (sQLitePreparedStatement5 != null) {
                                        }
                                        if (sQLitePreparedStatement9 != null) {
                                        }
                                        if (sQLitePreparedStatement12 != null) {
                                        }
                                        if (sQLitePreparedStatement2 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement6 != null) {
                                        }
                                        if (sQLitePreparedStatement13 != null) {
                                        }
                                        if (sQLitePreparedStatement11 != null) {
                                        }
                                        if (sQLitePreparedStatement10 != null) {
                                        }
                                        throw th;
                                    }
                                } catch (Exception e28) {
                                    e = e28;
                                    sQLitePreparedStatement27 = null;
                                    th2 = e;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                    sQLitePreparedStatement28 = sQLitePreparedStatement27;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                    sQLitePreparedStatement18 = executeFast;
                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                    sQLitePreparedStatement19 = sQLitePreparedStatement28;
                                    sQLitePreparedStatement17 = sQLitePreparedStatement18;
                                    sQLiteCursor2 = sQLitePreparedStatement19;
                                    checkSQLException(th2);
                                    sQLiteDatabase2 = this.database;
                                    if (sQLiteDatabase2 != null) {
                                    }
                                    if (sQLiteCursor2 != 0) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement17 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement10 == null) {
                                    }
                                    sQLitePreparedStatement10.dispose();
                                } catch (Throwable th31) {
                                    th = th31;
                                    obj = null;
                                    th = th;
                                    sQLitePreparedStatement2 = sQLitePreparedStatement26;
                                    obj3 = obj;
                                    sQLitePreparedStatement9 = sQLitePreparedStatement24;
                                    obj2 = obj3;
                                    sQLitePreparedStatement13 = executeFast;
                                    sQLitePreparedStatement12 = sQLitePreparedStatement25;
                                    sQLiteCursor = obj2;
                                    sQLiteDatabase = this.database;
                                    if (sQLiteDatabase != null) {
                                    }
                                    if (sQLiteCursor != 0) {
                                    }
                                    if (sQLitePreparedStatement5 != null) {
                                    }
                                    if (sQLitePreparedStatement9 != null) {
                                    }
                                    if (sQLitePreparedStatement12 != null) {
                                    }
                                    if (sQLitePreparedStatement2 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement6 != null) {
                                    }
                                    if (sQLitePreparedStatement13 != null) {
                                    }
                                    if (sQLitePreparedStatement11 != null) {
                                    }
                                    if (sQLitePreparedStatement10 != null) {
                                    }
                                    throw th;
                                }
                            } catch (Exception e29) {
                                sQLitePreparedStatement23 = sQLitePreparedStatement3;
                                sQLitePreparedStatement21 = executeFast2;
                                sQLitePreparedStatement7 = null;
                                th2 = e29;
                                sQLitePreparedStatement6 = null;
                            } catch (Throwable th32) {
                                sQLitePreparedStatement22 = sQLitePreparedStatement3;
                                sQLitePreparedStatement20 = executeFast2;
                                sQLitePreparedStatement = null;
                                th = th32;
                                sQLitePreparedStatement6 = null;
                            }
                        } catch (Exception e30) {
                            sQLitePreparedStatement21 = executeFast2;
                            sQLitePreparedStatement7 = null;
                            th2 = e30;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement6 = null;
                        } catch (Throwable th33) {
                            sQLitePreparedStatement20 = executeFast2;
                            sQLitePreparedStatement = null;
                            th = th33;
                            sQLitePreparedStatement2 = null;
                            sQLitePreparedStatement6 = null;
                        }
                    } catch (Exception e31) {
                        sQLitePreparedStatement7 = null;
                        th2 = e31;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement8 = null;
                    } catch (Throwable th34) {
                        sQLitePreparedStatement = null;
                        th = th34;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement6 = null;
                        sQLitePreparedStatement4 = null;
                    }
                } catch (Exception e32) {
                    sQLitePreparedStatement7 = null;
                    th2 = e32;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement8 = null;
                    sQLitePreparedStatement6 = null;
                } catch (Throwable th35) {
                    sQLitePreparedStatement = null;
                    th = th35;
                    sQLitePreparedStatement2 = null;
                    sQLitePreparedStatement3 = null;
                    sQLitePreparedStatement4 = null;
                    sQLitePreparedStatement6 = null;
                }
            }
            try {
                putUsersInternal(tLRPC$messages_Dialogs.users);
                putChatsInternal(tLRPC$messages_Dialogs.chats);
                this.database.commitTransaction();
                resetAllUnreadCounters(false);
                SQLiteDatabase sQLiteDatabase3 = this.database;
                if (sQLiteDatabase3 != null) {
                    sQLiteDatabase3.commitTransaction();
                }
                if (sQLitePreparedStatement11 != null) {
                    sQLitePreparedStatement11.dispose();
                }
                if (sQLitePreparedStatement10 == null) {
                    return;
                }
            } catch (Exception e33) {
                th2 = e33;
                sQLitePreparedStatement17 = sQLitePreparedStatement12;
                sQLitePreparedStatement2 = sQLitePreparedStatement17;
                SQLitePreparedStatement sQLitePreparedStatement41 = sQLitePreparedStatement2;
                sQLitePreparedStatement5 = sQLitePreparedStatement41;
                sQLitePreparedStatement9 = sQLitePreparedStatement5;
                sQLitePreparedStatement6 = sQLitePreparedStatement9;
                sQLiteCursor2 = sQLitePreparedStatement41;
                checkSQLException(th2);
                sQLiteDatabase2 = this.database;
                if (sQLiteDatabase2 != null) {
                }
                if (sQLiteCursor2 != 0) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement17 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement10 == null) {
                }
                sQLitePreparedStatement10.dispose();
            } catch (Throwable th36) {
                th = th36;
                sQLitePreparedStatement16 = sQLitePreparedStatement12;
                sQLitePreparedStatement15 = sQLitePreparedStatement16;
                sQLitePreparedStatement2 = sQLitePreparedStatement15;
                SQLitePreparedStatement sQLitePreparedStatement42 = sQLitePreparedStatement2;
                sQLitePreparedStatement9 = sQLitePreparedStatement42;
                sQLitePreparedStatement6 = sQLitePreparedStatement9;
                sQLitePreparedStatement14 = sQLitePreparedStatement42;
                sQLitePreparedStatement5 = sQLitePreparedStatement12;
                sQLiteCursor = sQLitePreparedStatement14;
                sQLitePreparedStatement12 = sQLitePreparedStatement16;
                sQLitePreparedStatement13 = sQLitePreparedStatement15;
                sQLiteDatabase = this.database;
                if (sQLiteDatabase != null) {
                }
                if (sQLiteCursor != 0) {
                }
                if (sQLitePreparedStatement5 != null) {
                }
                if (sQLitePreparedStatement9 != null) {
                }
                if (sQLitePreparedStatement12 != null) {
                }
                if (sQLitePreparedStatement2 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement6 != null) {
                }
                if (sQLitePreparedStatement13 != null) {
                }
                if (sQLitePreparedStatement11 != null) {
                }
                if (sQLitePreparedStatement10 != null) {
                }
                throw th;
            }
        } catch (Exception e34) {
            sQLitePreparedStatement7 = null;
            th2 = e34;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement8 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
        } catch (Throwable th37) {
            sQLitePreparedStatement = null;
            th = th37;
            sQLitePreparedStatement2 = null;
            sQLitePreparedStatement3 = null;
            sQLitePreparedStatement4 = null;
            sQLitePreparedStatement5 = null;
            sQLitePreparedStatement6 = null;
        }
        sQLitePreparedStatement10.dispose();
    }

    public void getDialogFolderId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda113
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogFolderId$223(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogFolderId$223(long j, final IntCallback intCallback) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (this.unknownDialogsIds.get(j) == null) {
                    sQLiteCursor = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                    r3 = sQLiteCursor.next() ? sQLiteCursor.intValue(0) : -1;
                    sQLiteCursor.dispose();
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.IntCallback.this.run(r2);
                    }
                });
                if (sQLiteCursor == null) {
                    return;
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void setDialogsFolderId(final ArrayList<TLRPC$TL_folderPeer> arrayList, final ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, final long j, final int i) {
        if (arrayList == null && arrayList2 == null && j == 0) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsFolderId$224(arrayList, arrayList2, i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsFolderId$224(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        SQLitePreparedStatement executeFast;
        boolean z;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                this.database.beginTransaction();
                executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            } catch (Throwable th) {
                th = th;
            }
        } catch (Exception e) {
            e = e;
        }
        try {
            if (arrayList != null) {
                int size = arrayList.size();
                z = false;
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$TL_folderPeer tLRPC$TL_folderPeer = (TLRPC$TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_folderPeer.folder_id);
                    if (tLRPC$TL_folderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                z = false;
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = (TLRPC$TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_inputFolderPeer.folder_id);
                    if (tLRPC$TL_inputFolderPeer.folder_id == 1) {
                        z = true;
                    }
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                boolean z2 = i == 1;
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
                z = z2;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            if (!z) {
                lambda$checkIfFolderEmpty$226(1);
            }
            resetAllUnreadCounters(false);
            SQLiteDatabase sQLiteDatabase = this.database;
            if (sQLiteDatabase != null) {
                sQLiteDatabase.commitTransaction();
            }
        } catch (Exception e2) {
            e = e2;
            sQLitePreparedStatement = executeFast;
            checkSQLException(e);
            SQLiteDatabase sQLiteDatabase2 = this.database;
            if (sQLiteDatabase2 != null) {
                sQLiteDatabase2.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
        } catch (Throwable th2) {
            th = th2;
            sQLitePreparedStatement = executeFast;
            SQLiteDatabase sQLiteDatabase3 = this.database;
            if (sQLiteDatabase3 != null) {
                sQLiteDatabase3.commitTransaction();
            }
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal */
    public void lambda$checkIfFolderEmpty$226(final int i) {
        boolean z = false;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
                while (true) {
                    if (!sQLiteCursor.next()) {
                        z = true;
                        break;
                    }
                    long longValue = sQLiteCursor.longValue(0);
                    if (!DialogObject.isUserDialog(longValue) && !DialogObject.isEncryptedDialog(longValue)) {
                        TLRPC$Chat chat = getChat(-longValue);
                        if (!ChatObject.isNotInChat(chat) && chat.migrated_to == null) {
                            break;
                        }
                    } else {
                        break;
                    }
                }
                sQLiteCursor.dispose();
                if (z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesStorage.this.lambda$checkIfFolderEmptyInternal$225(i);
                        }
                    });
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteDatabase.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
                }
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLiteCursor == null) {
                    return;
                }
            }
            sQLiteCursor.dispose();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$225(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    public void checkIfFolderEmpty(final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda199
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$checkIfFolderEmpty$226(i);
            }
        });
    }

    public void unpinAllDialogsExceptNew(final ArrayList<Long> arrayList, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda163
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$unpinAllDialogsExceptNew$227(arrayList, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00a1  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00a6  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00ac  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00b1  */
    /* JADX WARN: Removed duplicated region for block: B:75:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$227(ArrayList arrayList, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        ArrayList arrayList2;
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                arrayList2 = new ArrayList();
            } catch (Throwable th) {
                th = th;
                sQLitePreparedStatement = arrayList;
            }
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", TextUtils.join(",", arrayList)), new Object[0]);
                while (queryFinalized.next()) {
                    try {
                        long longValue = queryFinalized.longValue(0);
                        if (queryFinalized.intValue(1) == i && !DialogObject.isEncryptedDialog(longValue) && !DialogObject.isFolderDialogId(longValue)) {
                            arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                        }
                    } catch (Exception e) {
                        e = e;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement2 = null;
                    } catch (Throwable th2) {
                        th = th2;
                        sQLiteCursor = queryFinalized;
                        sQLitePreparedStatement = 0;
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement != 0) {
                            sQLitePreparedStatement.dispose();
                        }
                        throw th;
                    }
                }
                queryFinalized.dispose();
                if (arrayList2.isEmpty()) {
                    return;
                }
                sQLitePreparedStatement2 = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    try {
                        long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                        sQLitePreparedStatement2.requery();
                        sQLitePreparedStatement2.bindInteger(1, 0);
                        sQLitePreparedStatement2.bindLong(2, longValue2);
                        sQLitePreparedStatement2.step();
                    } catch (Exception e2) {
                        e = e2;
                        checkSQLException(e);
                        if (sQLiteCursor != null) {
                            sQLiteCursor.dispose();
                        }
                        if (sQLitePreparedStatement2 == null) {
                            sQLitePreparedStatement2.dispose();
                            return;
                        }
                        return;
                    }
                }
                sQLitePreparedStatement2.dispose();
            } catch (Exception e3) {
                e = e3;
                sQLitePreparedStatement2 = null;
                checkSQLException(e);
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement2 == null) {
                }
            } catch (Throwable th3) {
                th = th3;
                sQLitePreparedStatement = 0;
                if (sQLiteCursor != null) {
                }
                if (sQLitePreparedStatement != 0) {
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void setDialogUnread(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda220
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogUnread$228(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0043 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #1 {Exception -> 0x003d, blocks: (B:20:0x0037, B:28:0x0043, B:30:0x0048, B:29:0x0046, B:33:0x0066, B:34:0x0069), top: B:44:0x0002, outer: #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0046 A[Catch: all -> 0x003b, Exception -> 0x003d, TryCatch #1 {Exception -> 0x003d, blocks: (B:20:0x0037, B:28:0x0043, B:30:0x0048, B:29:0x0046, B:33:0x0066, B:34:0x0069), top: B:44:0x0002, outer: #4 }] */
    /* JADX WARN: Type inference failed for: r0v0, types: [org.telegram.SQLite.SQLitePreparedStatement, org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r0v3 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogUnread$228(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        int i;
        SQLitePreparedStatement sQLitePreparedStatement = 0;
        try {
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                try {
                    sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                } catch (Exception e) {
                    checkSQLException(e);
                    if (0 == 0) {
                        return;
                    }
                }
                try {
                } catch (Exception e2) {
                    e = e2;
                    checkSQLException(e);
                    if (sQLiteCursor == null) {
                        i = 0;
                        if (!z) {
                        }
                        SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                        executeFast.bindInteger(1, r8);
                        executeFast.bindLong(2, j);
                        executeFast.step();
                        executeFast.dispose();
                        resetAllUnreadCounters(false);
                        sQLitePreparedStatement = executeFast;
                        sQLitePreparedStatement.dispose();
                    }
                    i = 0;
                    sQLiteCursor.dispose();
                    if (!z) {
                    }
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
                    executeFast2.bindInteger(1, r8);
                    executeFast2.bindLong(2, j);
                    executeFast2.step();
                    executeFast2.dispose();
                    resetAllUnreadCounters(false);
                    sQLitePreparedStatement = executeFast2;
                    sQLitePreparedStatement.dispose();
                }
            } catch (Throwable th2) {
                if (0 != 0) {
                    sQLitePreparedStatement.dispose();
                }
                throw th2;
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th3) {
            th = th3;
            if (0 != 0) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        if (sQLiteCursor.next()) {
            i = sQLiteCursor.intValue(0);
            sQLiteCursor.dispose();
            int i2 = !z ? i | 1 : i & (-2);
            SQLitePreparedStatement executeFast22 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            executeFast22.bindInteger(1, i2);
            executeFast22.bindLong(2, j);
            executeFast22.step();
            executeFast22.dispose();
            resetAllUnreadCounters(false);
            sQLitePreparedStatement = executeFast22;
            sQLitePreparedStatement.dispose();
        }
        i = 0;
        sQLiteCursor.dispose();
        if (!z) {
        }
        SQLitePreparedStatement executeFast222 = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
        executeFast222.bindInteger(1, i2);
        executeFast222.bindLong(2, j);
        executeFast222.step();
        executeFast222.dispose();
        resetAllUnreadCounters(false);
        sQLitePreparedStatement = executeFast222;
        sQLitePreparedStatement.dispose();
    }

    public void setDialogViewThreadAsMessages(final long j, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogViewThreadAsMessages$229(j, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:17:0x0032, code lost:
        if (r2 == null) goto L12;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$setDialogViewThreadAsMessages$229(long j, boolean z) {
        SQLiteCursor sQLiteCursor;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        int i = 0;
        try {
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                sQLiteCursor = this.database.queryFinalized("SELECT flags FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    if (sQLiteCursor.next()) {
                        i = sQLiteCursor.intValue(0);
                    }
                } catch (Exception e) {
                    e = e;
                    checkSQLException(e);
                }
            } catch (Exception e2) {
                checkSQLException(e2);
                if (0 == 0) {
                    return;
                }
            }
        } catch (Exception e3) {
            e = e3;
            sQLiteCursor = null;
        } catch (Throwable th2) {
            th = th2;
            sQLiteCursor = null;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        try {
            sQLiteCursor.dispose();
            int i2 = z ? i | 64 : i & (-65);
            sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET flags = ? WHERE did = ?");
            sQLitePreparedStatement.bindInteger(1, i2);
            sQLitePreparedStatement.bindLong(2, j);
            sQLitePreparedStatement.step();
            sQLitePreparedStatement.dispose();
            sQLitePreparedStatement.dispose();
        } catch (Throwable th3) {
            if (0 != 0) {
                sQLitePreparedStatement.dispose();
            }
            throw th3;
        }
    }

    public void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (z) {
                if ((dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                    dialogFilter.pendingUnreadCount = -1;
                }
            } else {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda233
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$resetAllUnreadCounters$230();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAllUnreadCounters$230() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void setDialogPinned(final long j, final int i) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda192
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogPinned$231(i, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogPinned$231(int i, long j) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                sQLitePreparedStatement.bindInteger(1, i);
                sQLitePreparedStatement.bindLong(2, j);
                sQLitePreparedStatement.step();
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void setDialogsPinned(final ArrayList<Long> arrayList, final ArrayList<Integer> arrayList2) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda197
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$setDialogsPinned$232(arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsPinned$232(ArrayList arrayList, ArrayList arrayList2) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                sQLitePreparedStatement = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    sQLitePreparedStatement.requery();
                    sQLitePreparedStatement.bindInteger(1, ((Integer) arrayList2.get(i)).intValue());
                    sQLitePreparedStatement.bindLong(2, ((Long) arrayList.get(i)).longValue());
                    sQLitePreparedStatement.step();
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception e) {
                checkSQLException(e);
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void putDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final int i) {
        if (tLRPC$messages_Dialogs.dialogs.isEmpty()) {
            return;
        }
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$putDialogs$233(tLRPC$messages_Dialogs, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogs$233(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        putDialogsInternal(tLRPC$messages_Dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            checkSQLException(e);
        }
    }

    public void getDialogMaxMessageId(final long j, final IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda110
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogMaxMessageId$235(j, intCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0031, code lost:
        if (r1 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogMaxMessageId$235(long j, final IntCallback intCallback) {
        final int[] iArr = new int[1];
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT MAX(mid) FROM messages_v2 WHERE uid = " + j, new Object[0]);
                if (sQLiteCursor.next()) {
                    iArr[0] = sQLiteCursor.intValue(0);
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda64
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.lambda$getDialogMaxMessageId$234(MessagesStorage.IntCallback.this, iArr);
                }
            });
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getDialogMaxMessageId$234(IntCallback intCallback, int[] iArr) {
        intCallback.run(iArr[0]);
    }

    public int getDialogReadMax(final boolean z, final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda103
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getDialogReadMax$236(z, j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:19:0x006d, code lost:
        if (r1 == null) goto L9;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDialogReadMax$236(boolean z, long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                if (z) {
                    SQLiteDatabase sQLiteDatabase = this.database;
                    sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT outbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                    }
                } else {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT last_mid, inbox_max FROM dialogs WHERE did = " + j, new Object[0]);
                    if (sQLiteCursor.next()) {
                        int intValue = sQLiteCursor.intValue(0);
                        int intValue2 = sQLiteCursor.intValue(1);
                        if (intValue2 > intValue) {
                            numArr[0] = 0;
                        } else {
                            numArr[0] = Integer.valueOf(intValue2);
                        }
                    }
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            countDownLatch.countDown();
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public int getChannelPtsSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChannelPtsSync$237(j, numArr, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return numArr[0].intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:11:0x0033, code lost:
        if (r0 == null) goto L8;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelPtsSync$237(long j, Integer[] numArr, CountDownLatch countDownLatch) {
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT pts FROM dialogs WHERE did = " + (-j), new Object[0]);
                if (sQLiteCursor.next()) {
                    numArr[0] = Integer.valueOf(sQLiteCursor.intValue(0));
                }
            } catch (Exception e) {
                checkSQLException(e);
            }
            sQLiteCursor.dispose();
            try {
                countDownLatch.countDown();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public TLRPC$User getUserSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$User[] tLRPC$UserArr = new TLRPC$User[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda111
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getUserSync$238(tLRPC$UserArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$UserArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getUserSync$238(TLRPC$User[] tLRPC$UserArr, long j, CountDownLatch countDownLatch) {
        tLRPC$UserArr[0] = getUser(j);
        countDownLatch.countDown();
    }

    public TLRPC$Chat getChatSync(final long j) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final TLRPC$Chat[] tLRPC$ChatArr = new TLRPC$Chat[1];
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda213
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$getChatSync$239(tLRPC$ChatArr, j, countDownLatch);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            checkSQLException(e);
        }
        return tLRPC$ChatArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatSync$239(TLRPC$Chat[] tLRPC$ChatArr, long j, CountDownLatch countDownLatch) {
        tLRPC$ChatArr[0] = getChat(j);
        countDownLatch.countDown();
    }

    public TLRPC$User getUser(long j) {
        try {
            ArrayList<TLRPC$User> arrayList = new ArrayList<>();
            ArrayList<Long> arrayList2 = new ArrayList<>();
            arrayList2.add(Long.valueOf(j));
            getUsersInternal(arrayList2, arrayList);
            if (!arrayList.isEmpty()) {
                return arrayList.get(0);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
        return null;
    }

    public ArrayList<TLRPC$User> getUsers(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(arrayList, arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public ArrayList<TLRPC$Chat> getChats(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$Chat> arrayList2 = new ArrayList<>();
        try {
            getChatsInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            checkSQLException(e);
        }
        return arrayList2;
    }

    public TLRPC$Chat getChat(long j) {
        try {
            ArrayList<TLRPC$Chat> arrayList = new ArrayList<>();
            getChatsInternal("" + j, arrayList);
            if (!arrayList.isEmpty()) {
                return arrayList.get(0);
            }
        } catch (Exception e) {
            checkSQLException(e);
        }
        return null;
    }

    public TLRPC$EncryptedChat getEncryptedChat(long j) {
        try {
            ArrayList<TLRPC$EncryptedChat> arrayList = new ArrayList<>();
            getEncryptedChatsInternal("" + j, arrayList, null);
            if (arrayList.isEmpty()) {
                return null;
            }
            return arrayList.get(0);
        } catch (Exception e) {
            checkSQLException(e);
            return null;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:156:0x02d6, code lost:
        r7 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r4.get(r11.id);
        r8 = r11.status;
     */
    /* JADX WARN: Code restructure failed: missing block: B:157:0x02e0, code lost:
        if (r8 == null) goto L142;
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x02e2, code lost:
        r27 = r4;
        r8.expires = r1.intValue(1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:160:0x02ed, code lost:
        r27 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:161:0x02f0, code lost:
        if (r9 != 1) goto L141;
     */
    /* JADX WARN: Code restructure failed: missing block: B:162:0x02f2, code lost:
        r7.name = org.telegram.messenger.AndroidUtilities.generateSearchName(r11.first_name, r11.last_name, r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x02fd, code lost:
        r7.name = org.telegram.messenger.AndroidUtilities.generateSearchName("@" + org.telegram.messenger.UserObject.getPublicUsername(r11), null, "@" + r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x0326, code lost:
        r7.object = r11;
        r6 = r6 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:198:0x03ed, code lost:
        if (r3.contains(" " + r9) != false) goto L185;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0174, code lost:
        if (r6.startsWith(r15) == false) goto L75;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x0052, code lost:
        if (r9.length() == 0) goto L9;
     */
    /* JADX WARN: Removed duplicated region for block: B:106:0x01cb A[Catch: all -> 0x017c, Exception -> 0x06ad, TryCatch #2 {Exception -> 0x06ad, blocks: (B:86:0x0170, B:95:0x0187, B:99:0x01aa, B:104:0x01ba, B:106:0x01cb, B:108:0x01dc, B:113:0x0204, B:116:0x0218, B:318:0x0693, B:320:0x069d, B:322:0x06a1, B:333:0x06c2), top: B:414:0x0170 }] */
    /* JADX WARN: Removed duplicated region for block: B:108:0x01dc A[Catch: all -> 0x017c, Exception -> 0x06ad, TRY_LEAVE, TryCatch #2 {Exception -> 0x06ad, blocks: (B:86:0x0170, B:95:0x0187, B:99:0x01aa, B:104:0x01ba, B:106:0x01cb, B:108:0x01dc, B:113:0x0204, B:116:0x0218, B:318:0x0693, B:320:0x069d, B:322:0x06a1, B:333:0x06c2), top: B:414:0x0170 }] */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0204 A[Catch: all -> 0x017c, Exception -> 0x06ad, TRY_ENTER, TRY_LEAVE, TryCatch #2 {Exception -> 0x06ad, blocks: (B:86:0x0170, B:95:0x0187, B:99:0x01aa, B:104:0x01ba, B:106:0x01cb, B:108:0x01dc, B:113:0x0204, B:116:0x0218, B:318:0x0693, B:320:0x069d, B:322:0x06a1, B:333:0x06c2), top: B:414:0x0170 }] */
    /* JADX WARN: Removed duplicated region for block: B:147:0x02a7 A[Catch: all -> 0x00f7, Exception -> 0x0731, TryCatch #12 {Exception -> 0x0731, blocks: (B:39:0x00c4, B:41:0x00ca, B:44:0x00e8, B:50:0x00fb, B:52:0x0101, B:66:0x0119, B:68:0x0125, B:73:0x0134, B:75:0x013f, B:80:0x014e, B:82:0x015c, B:83:0x0164, B:118:0x0224, B:120:0x022a, B:123:0x023e, B:125:0x0245, B:129:0x0256, B:131:0x0260, B:134:0x0279, B:136:0x027f, B:140:0x0297, B:147:0x02a7, B:149:0x02b2, B:152:0x02c5, B:168:0x0340, B:156:0x02d6, B:158:0x02e2, B:162:0x02f2, B:164:0x0326, B:163:0x02fd, B:170:0x0358, B:183:0x0396, B:185:0x039c, B:190:0x03b5, B:192:0x03bd, B:195:0x03d4, B:197:0x03da, B:219:0x042c, B:201:0x03f3, B:203:0x03f9, B:206:0x040a, B:211:0x041b, B:216:0x0425, B:221:0x0430, B:223:0x0434, B:225:0x043a, B:229:0x0444, B:231:0x0462, B:344:0x06f7, B:346:0x06fd, B:349:0x0709, B:352:0x071d, B:354:0x0725, B:362:0x073b, B:364:0x0743, B:367:0x075c, B:369:0x0762, B:373:0x077a, B:379:0x0787, B:381:0x078e, B:383:0x079d, B:386:0x07a7, B:388:0x07de, B:387:0x07b4, B:390:0x07e5, B:391:0x07f2), top: B:421:0x00c4 }] */
    /* JADX WARN: Removed duplicated region for block: B:167:0x0337  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x036a  */
    /* JADX WARN: Removed duplicated region for block: B:179:0x037a A[Catch: all -> 0x0673, Exception -> 0x0678, TRY_ENTER, TRY_LEAVE, TryCatch #19 {Exception -> 0x0678, all -> 0x0673, blocks: (B:8:0x004e, B:18:0x0068, B:22:0x0086, B:25:0x009a, B:179:0x037a, B:182:0x038c, B:242:0x047e, B:245:0x0492), top: B:437:0x004e }] */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0470  */
    /* JADX WARN: Removed duplicated region for block: B:240:0x047a  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x0659 A[Catch: all -> 0x04ca, Exception -> 0x04ce, LOOP:6: B:261:0x04d5->B:301:0x0659, LOOP_END, TryCatch #23 {Exception -> 0x04ce, all -> 0x04ca, blocks: (B:246:0x049c, B:248:0x04a2, B:252:0x04bc, B:254:0x04c3, B:262:0x04d7, B:264:0x04df, B:267:0x04f6, B:269:0x04fc, B:273:0x0514, B:278:0x051f, B:280:0x0526, B:282:0x0536, B:284:0x053c, B:288:0x054e, B:290:0x05dd, B:291:0x05df, B:293:0x05eb, B:296:0x05f5, B:298:0x0645, B:297:0x061c, B:301:0x0659, B:302:0x0663), top: B:429:0x049c }] */
    /* JADX WARN: Removed duplicated region for block: B:333:0x06c2 A[Catch: all -> 0x06a6, Exception -> 0x06ad, TRY_ENTER, TRY_LEAVE, TryCatch #2 {Exception -> 0x06ad, blocks: (B:86:0x0170, B:95:0x0187, B:99:0x01aa, B:104:0x01ba, B:106:0x01cb, B:108:0x01dc, B:113:0x0204, B:116:0x0218, B:318:0x0693, B:320:0x069d, B:322:0x06a1, B:333:0x06c2), top: B:414:0x0170 }] */
    /* JADX WARN: Removed duplicated region for block: B:337:0x06e0  */
    /* JADX WARN: Removed duplicated region for block: B:346:0x06fd A[Catch: all -> 0x072b, Exception -> 0x0731, TryCatch #11 {all -> 0x072b, blocks: (B:344:0x06f7, B:346:0x06fd, B:349:0x0709, B:352:0x071d, B:354:0x0725, B:362:0x073b, B:364:0x0743, B:367:0x075c, B:369:0x0762, B:373:0x077a, B:379:0x0787, B:381:0x078e, B:383:0x079d, B:386:0x07a7, B:388:0x07de, B:387:0x07b4, B:390:0x07e5, B:391:0x07f2), top: B:419:0x06f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:390:0x07e5 A[Catch: all -> 0x072b, Exception -> 0x0731, LOOP:10: B:361:0x0739->B:390:0x07e5, LOOP_END, TryCatch #11 {all -> 0x072b, blocks: (B:344:0x06f7, B:346:0x06fd, B:349:0x0709, B:352:0x071d, B:354:0x0725, B:362:0x073b, B:364:0x0743, B:367:0x075c, B:369:0x0762, B:373:0x077a, B:379:0x0787, B:381:0x078e, B:383:0x079d, B:386:0x07a7, B:388:0x07de, B:387:0x07b4, B:390:0x07e5, B:391:0x07f2), top: B:419:0x06f7 }] */
    /* JADX WARN: Removed duplicated region for block: B:405:0x0812  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x081b  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0693 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:464:0x051f A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:469:0x0787 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:476:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void localSearch(int i, String str, ArrayList<Object> arrayList, ArrayList<CharSequence> arrayList2, ArrayList<TLRPC$User> arrayList3, ArrayList<Long> arrayList4, int i2) {
        SQLiteCursor sQLiteCursor;
        Exception exc;
        SQLiteCursor sQLiteCursor2;
        Throwable th;
        SQLiteCursor sQLiteCursor3;
        String str2;
        String str3;
        String str4;
        SQLiteCursor queryFinalized;
        Throwable th2;
        Exception e;
        int i3;
        LongSparseArray longSparseArray;
        String str5;
        ArrayList arrayList5;
        int i4;
        int i5;
        LongSparseArray longSparseArray2;
        String str6;
        String str7;
        ArrayList arrayList6;
        int i6;
        int i7;
        SQLiteCursor queryFinalized2;
        String str8;
        String str9;
        String str10;
        String str11;
        int i8;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        TLRPC$User tLRPC$User;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        int i9;
        ArrayList arrayList7;
        char c;
        LongSparseArray longSparseArray5;
        String str12;
        String str13;
        String str14;
        TLRPC$User user;
        ArrayList arrayList8;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        try {
            try {
                String lowerCase = str.trim().toLowerCase();
                if (TextUtils.isEmpty(lowerCase)) {
                    return;
                }
                String lowerCase2 = LocaleController.getString("SavedMessages", R.string.SavedMessages).toLowerCase();
                String str15 = "saved messages";
                String lowerCase3 = LocaleController.getString("RepliesTitle", R.string.RepliesTitle).toLowerCase();
                String translitString = LocaleController.getInstance().getTranslitString(lowerCase);
                if (!lowerCase.equals(translitString)) {
                    try {
                    } catch (Exception e2) {
                        exc = e2;
                        sQLiteCursor = null;
                        sQLiteCursor3 = sQLiteCursor;
                        try {
                            checkSQLException(exc);
                            if (sQLiteCursor3 == null) {
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            th = th;
                            if (sQLiteCursor3 != null) {
                            }
                            throw th;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        sQLiteCursor2 = null;
                        sQLiteCursor3 = sQLiteCursor2;
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                }
                translitString = null;
                int i10 = (translitString != null ? 1 : 0) + 1;
                String[] strArr = new String[i10];
                strArr[0] = lowerCase;
                if (translitString != null) {
                    strArr[1] = translitString;
                }
                ArrayList arrayList9 = new ArrayList();
                ArrayList arrayList10 = new ArrayList();
                ArrayList arrayList11 = new ArrayList();
                int i11 = i10;
                LongSparseArray longSparseArray6 = new LongSparseArray();
                if (i2 >= 0) {
                    str4 = "RepliesTitle";
                    str2 = "replies";
                    str3 = lowerCase3;
                    try {
                        queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs WHERE folder_id = ? ORDER BY date DESC LIMIT 600", Integer.valueOf(i2));
                    } catch (Exception e3) {
                        e = e3;
                        exc = e;
                        sQLiteCursor3 = null;
                        checkSQLException(exc);
                        if (sQLiteCursor3 == null) {
                        }
                    } catch (Throwable th5) {
                        th2 = th5;
                        th = th2;
                        sQLiteCursor3 = null;
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                } else {
                    str2 = "replies";
                    str3 = lowerCase3;
                    str4 = "RepliesTitle";
                    queryFinalized = getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600", new Object[0]);
                }
                while (queryFinalized.next()) {
                    try {
                        try {
                            ArrayList arrayList12 = arrayList9;
                            long longValue = queryFinalized.longValue(0);
                            DialogsSearchAdapter.DialogSearchResult dialogSearchResult = new DialogsSearchAdapter.DialogSearchResult();
                            String str16 = str15;
                            dialogSearchResult.date = queryFinalized.intValue(1);
                            longSparseArray6.put(longValue, dialogSearchResult);
                            if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(longValue)))) {
                                if (DialogObject.isEncryptedDialog(longValue)) {
                                    arrayList8 = arrayList12;
                                    if (i == 0 || i == 3) {
                                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                                        if (!arrayList11.contains(Integer.valueOf(encryptedChatId))) {
                                            arrayList11.add(Integer.valueOf(encryptedChatId));
                                        }
                                    }
                                } else if (!DialogObject.isUserDialog(longValue)) {
                                    arrayList8 = arrayList12;
                                    if (i != 4) {
                                        long j = -longValue;
                                        if (!arrayList10.contains(Long.valueOf(j))) {
                                            arrayList10.add(Long.valueOf(j));
                                        }
                                    }
                                } else if ((i != 4 || longValue != clientUserId) && i != 6 && i != 5 && i != 2) {
                                    arrayList8 = arrayList12;
                                    if (!arrayList8.contains(Long.valueOf(longValue))) {
                                        arrayList8.add(Long.valueOf(longValue));
                                    }
                                }
                                arrayList9 = arrayList8;
                                str15 = str16;
                            }
                            arrayList9 = arrayList12;
                            str15 = str16;
                        } catch (Exception e4) {
                            sQLiteCursor3 = queryFinalized;
                            exc = e4;
                        }
                    } catch (Throwable th6) {
                        sQLiteCursor3 = queryFinalized;
                        th = th6;
                    }
                }
                ArrayList arrayList13 = arrayList9;
                String str17 = str15;
                queryFinalized.dispose();
                if (i != 4) {
                    try {
                        try {
                        } catch (Exception e5) {
                            exc = e5;
                            sQLiteCursor3 = null;
                            checkSQLException(exc);
                            if (sQLiteCursor3 == null) {
                                sQLiteCursor3.dispose();
                                return;
                            }
                            return;
                        }
                    } catch (Throwable th7) {
                        th = th7;
                        sQLiteCursor3 = null;
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                }
                try {
                    try {
                        if (!str17.startsWith(lowerCase)) {
                            i3 = 0;
                            if ((i != 4 && str3.startsWith(lowerCase)) || str2.startsWith(lowerCase)) {
                                user = getMessagesController().getUser((Long) 708513L);
                                if (user == null) {
                                    user = getMessagesController().getUser(Long.valueOf((long) UserObject.REPLY_BOT));
                                }
                                if (user != null) {
                                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult2 = new DialogsSearchAdapter.DialogSearchResult();
                                    dialogSearchResult2.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    dialogSearchResult2.name = LocaleController.getString(str4, R.string.RepliesTitle);
                                    dialogSearchResult2.object = user;
                                    longSparseArray6.put(user.id, dialogSearchResult2);
                                    i3++;
                                }
                            }
                            String str18 = ";;;";
                            String str19 = " ";
                            if (arrayList13.isEmpty()) {
                                longSparseArray = longSparseArray6;
                                str5 = ";;;";
                                arrayList5 = arrayList11;
                                i4 = i11;
                            } else {
                                int i12 = i3;
                                try {
                                    SQLiteCursor queryFinalized3 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", arrayList13)), new Object[0]);
                                    i3 = i12;
                                    while (queryFinalized3.next()) {
                                        String stringValue = queryFinalized3.stringValue(2);
                                        String translitString2 = LocaleController.getInstance().getTranslitString(stringValue);
                                        if (stringValue.equals(translitString2)) {
                                            translitString2 = null;
                                        }
                                        int lastIndexOf = stringValue.lastIndexOf(str18);
                                        String substring = lastIndexOf != -1 ? stringValue.substring(lastIndexOf + 3) : null;
                                        String str20 = str18;
                                        int i13 = i11;
                                        int i14 = 0;
                                        char c2 = 0;
                                        while (true) {
                                            if (i14 >= i13) {
                                                longSparseArray4 = longSparseArray6;
                                                i9 = i13;
                                                arrayList7 = arrayList11;
                                                break;
                                            }
                                            arrayList7 = arrayList11;
                                            String str21 = strArr[i14];
                                            if (stringValue.startsWith(str21)) {
                                                i9 = i13;
                                            } else {
                                                i9 = i13;
                                                if (!stringValue.contains(" " + str21)) {
                                                    if (translitString2 != null) {
                                                        if (!translitString2.startsWith(str21)) {
                                                            if (translitString2.contains(" " + str21)) {
                                                            }
                                                        }
                                                    }
                                                    c = (substring == null || !substring.startsWith(str21)) ? c2 : (char) 2;
                                                    if (c == 0) {
                                                        str12 = translitString2;
                                                        str13 = stringValue;
                                                        NativeByteBuffer byteBufferValue = queryFinalized3.byteBufferValue(0);
                                                        if (byteBufferValue == null) {
                                                            longSparseArray4 = longSparseArray6;
                                                            break;
                                                        }
                                                        str14 = substring;
                                                        TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                                        byteBufferValue.reuse();
                                                        if (i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(TLdeserialize.id)))) {
                                                            break;
                                                        }
                                                        longSparseArray5 = longSparseArray6;
                                                    } else {
                                                        longSparseArray5 = longSparseArray6;
                                                        str12 = translitString2;
                                                        str13 = stringValue;
                                                        str14 = substring;
                                                    }
                                                    i14++;
                                                    translitString2 = str12;
                                                    stringValue = str13;
                                                    arrayList11 = arrayList7;
                                                    substring = str14;
                                                    longSparseArray6 = longSparseArray5;
                                                    c2 = c;
                                                    i13 = i9;
                                                }
                                            }
                                            c = 1;
                                            if (c == 0) {
                                            }
                                            i14++;
                                            translitString2 = str12;
                                            stringValue = str13;
                                            arrayList11 = arrayList7;
                                            substring = str14;
                                            longSparseArray6 = longSparseArray5;
                                            c2 = c;
                                            i13 = i9;
                                        }
                                        str18 = str20;
                                        arrayList11 = arrayList7;
                                        i11 = i9;
                                        longSparseArray6 = longSparseArray4;
                                    }
                                    longSparseArray = longSparseArray6;
                                    str5 = str18;
                                    arrayList5 = arrayList11;
                                    i4 = i11;
                                    queryFinalized3.dispose();
                                } catch (Exception e6) {
                                    e = e6;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th8) {
                                    th2 = th8;
                                    th = th2;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 != null) {
                                    }
                                    throw th;
                                }
                            }
                            if (arrayList10.isEmpty()) {
                                i5 = i4;
                                longSparseArray2 = longSparseArray;
                            } else {
                                try {
                                    SQLiteCursor queryFinalized4 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", arrayList10)), new Object[0]);
                                    while (queryFinalized4.next()) {
                                        String stringValue2 = queryFinalized4.stringValue(1);
                                        String translitString3 = LocaleController.getInstance().getTranslitString(stringValue2);
                                        if (stringValue2.equals(translitString3)) {
                                            translitString3 = null;
                                        }
                                        int i15 = i4;
                                        for (int i16 = 0; i16 < i15; i16++) {
                                            String str22 = strArr[i16];
                                            if (!stringValue2.startsWith(str22)) {
                                                if (!stringValue2.contains(" " + str22)) {
                                                    if (translitString3 != null) {
                                                        if (!translitString3.startsWith(str22)) {
                                                        }
                                                    }
                                                }
                                            }
                                            NativeByteBuffer byteBufferValue2 = queryFinalized4.byteBufferValue(0);
                                            if (byteBufferValue2 == null) {
                                                break;
                                            }
                                            TLRPC$Chat TLdeserialize2 = TLRPC$Chat.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                                            byteBufferValue2.reuse();
                                            if ((i != 15 || (arrayList4 != null && arrayList4.contains(Long.valueOf(-TLdeserialize2.id)))) && ((i != 6 || !ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)) && (i != 5 || ChatObject.isChannelAndNotMegaGroup(TLdeserialize2)))) {
                                                if (TLdeserialize2 != null) {
                                                    if (!TLdeserialize2.deactivated) {
                                                        if (ChatObject.isChannel(TLdeserialize2)) {
                                                            if (!ChatObject.isNotInChat(TLdeserialize2)) {
                                                            }
                                                        }
                                                        longSparseArray3 = longSparseArray;
                                                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult3 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray3.get(-TLdeserialize2.id);
                                                        dialogSearchResult3.name = AndroidUtilities.generateSearchName(TLdeserialize2.title, null, str22);
                                                        dialogSearchResult3.object = TLdeserialize2;
                                                        i3++;
                                                        longSparseArray = longSparseArray3;
                                                        i4 = i15;
                                                    }
                                                }
                                            }
                                        }
                                        longSparseArray3 = longSparseArray;
                                        longSparseArray = longSparseArray3;
                                        i4 = i15;
                                    }
                                    i5 = i4;
                                    longSparseArray2 = longSparseArray;
                                    queryFinalized4.dispose();
                                } catch (Exception e7) {
                                    e = e7;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th9) {
                                    th2 = th9;
                                    th = th2;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 != null) {
                                    }
                                    throw th;
                                }
                            }
                            if (!arrayList5.isEmpty() || i == 15) {
                                str6 = " ";
                                str7 = str5;
                            } else {
                                try {
                                    SQLiteCursor queryFinalized5 = getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash, q.in_seq_no, q.admin_id, q.mtproto_seq FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", arrayList5)), new Object[0]);
                                    while (queryFinalized5.next()) {
                                        try {
                                            String stringValue3 = queryFinalized5.stringValue(1);
                                            String translitString4 = LocaleController.getInstance().getTranslitString(stringValue3);
                                            if (stringValue3.equals(translitString4)) {
                                                str10 = str5;
                                                str9 = null;
                                            } else {
                                                str9 = translitString4;
                                                str10 = str5;
                                            }
                                            int lastIndexOf2 = stringValue3.lastIndexOf(str10);
                                            String substring2 = lastIndexOf2 != -1 ? stringValue3.substring(lastIndexOf2 + 2) : null;
                                            char c3 = 0;
                                            int i17 = 0;
                                            while (true) {
                                                if (i17 >= i5) {
                                                    break;
                                                }
                                                String str23 = strArr[i17];
                                                if (!stringValue3.startsWith(str23)) {
                                                    if (!stringValue3.contains(str19 + str23)) {
                                                        if (str9 != null) {
                                                            if (!str9.startsWith(str23)) {
                                                                if (str9.contains(str19 + str23)) {
                                                                }
                                                            }
                                                        }
                                                        if (substring2 != null && substring2.startsWith(str23)) {
                                                            c3 = 2;
                                                        }
                                                        if (c3 == 0) {
                                                            NativeByteBuffer byteBufferValue3 = queryFinalized5.byteBufferValue(0);
                                                            if (byteBufferValue3 != null) {
                                                                TLRPC$EncryptedChat TLdeserialize3 = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                                                                byteBufferValue3.reuse();
                                                                tLRPC$EncryptedChat = TLdeserialize3;
                                                                i8 = 6;
                                                            } else {
                                                                i8 = 6;
                                                                tLRPC$EncryptedChat = null;
                                                            }
                                                            NativeByteBuffer byteBufferValue4 = queryFinalized5.byteBufferValue(i8);
                                                            if (byteBufferValue4 != null) {
                                                                tLRPC$User = TLRPC$User.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(false), false);
                                                                byteBufferValue4.reuse();
                                                            } else {
                                                                tLRPC$User = null;
                                                            }
                                                            if (tLRPC$EncryptedChat != null && tLRPC$User != null) {
                                                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult4 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.get(DialogObject.makeEncryptedDialogId(tLRPC$EncryptedChat.id));
                                                                str11 = str19;
                                                                tLRPC$EncryptedChat.user_id = queryFinalized5.longValue(2);
                                                                tLRPC$EncryptedChat.a_or_b = queryFinalized5.byteArrayValue(3);
                                                                tLRPC$EncryptedChat.auth_key = queryFinalized5.byteArrayValue(4);
                                                                tLRPC$EncryptedChat.ttl = queryFinalized5.intValue(5);
                                                                tLRPC$EncryptedChat.layer = queryFinalized5.intValue(8);
                                                                tLRPC$EncryptedChat.seq_in = queryFinalized5.intValue(9);
                                                                tLRPC$EncryptedChat.seq_out = queryFinalized5.intValue(10);
                                                                int intValue = queryFinalized5.intValue(11);
                                                                tLRPC$EncryptedChat.key_use_count_in = (short) (intValue >> 16);
                                                                tLRPC$EncryptedChat.key_use_count_out = (short) intValue;
                                                                tLRPC$EncryptedChat.exchange_id = queryFinalized5.longValue(12);
                                                                tLRPC$EncryptedChat.key_create_date = queryFinalized5.intValue(13);
                                                                tLRPC$EncryptedChat.future_key_fingerprint = queryFinalized5.longValue(14);
                                                                tLRPC$EncryptedChat.future_auth_key = queryFinalized5.byteArrayValue(15);
                                                                tLRPC$EncryptedChat.key_hash = queryFinalized5.byteArrayValue(16);
                                                                tLRPC$EncryptedChat.in_seq_no = queryFinalized5.intValue(17);
                                                                long longValue2 = queryFinalized5.longValue(18);
                                                                if (longValue2 != 0) {
                                                                    tLRPC$EncryptedChat.admin_id = longValue2;
                                                                }
                                                                tLRPC$EncryptedChat.mtproto_seq = queryFinalized5.intValue(19);
                                                                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                                                                if (tLRPC$UserStatus != null) {
                                                                    tLRPC$UserStatus.expires = queryFinalized5.intValue(7);
                                                                }
                                                                if (c3 == 1) {
                                                                    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(ContactsController.formatName(tLRPC$User.first_name, tLRPC$User.last_name));
                                                                    dialogSearchResult4.name = spannableStringBuilder;
                                                                    spannableStringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_chats_secretName)), 0, dialogSearchResult4.name.length(), 33);
                                                                } else {
                                                                    dialogSearchResult4.name = AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(tLRPC$User), null, "@" + str23);
                                                                }
                                                                dialogSearchResult4.object = tLRPC$EncryptedChat;
                                                                arrayList3.add(tLRPC$User);
                                                                i3++;
                                                            }
                                                        } else {
                                                            i17++;
                                                            str19 = str19;
                                                        }
                                                    }
                                                }
                                                c3 = 1;
                                                if (c3 == 0) {
                                                }
                                            }
                                            str11 = str19;
                                            str5 = str10;
                                            str19 = str11;
                                        } catch (Exception e8) {
                                            sQLiteCursor3 = queryFinalized5;
                                            exc = e8;
                                            checkSQLException(exc);
                                            if (sQLiteCursor3 == null) {
                                            }
                                        } catch (Throwable th10) {
                                            sQLiteCursor3 = queryFinalized5;
                                            th = th10;
                                            if (sQLiteCursor3 != null) {
                                            }
                                            throw th;
                                        }
                                    }
                                    str6 = str19;
                                    str7 = str5;
                                    queryFinalized5.dispose();
                                } catch (Exception e9) {
                                    e = e9;
                                    exc = e;
                                    sQLiteCursor3 = null;
                                    checkSQLException(exc);
                                    if (sQLiteCursor3 == null) {
                                    }
                                } catch (Throwable th11) {
                                    th2 = th11;
                                    th = th2;
                                    sQLiteCursor3 = null;
                                    if (sQLiteCursor3 != null) {
                                    }
                                    throw th;
                                }
                            }
                            arrayList6 = new ArrayList(i3);
                            for (i6 = 0; i6 < longSparseArray2.size(); i6++) {
                                try {
                                    DialogsSearchAdapter.DialogSearchResult dialogSearchResult5 = (DialogsSearchAdapter.DialogSearchResult) longSparseArray2.valueAt(i6);
                                    if (dialogSearchResult5.object != null && dialogSearchResult5.name != null) {
                                        arrayList6.add(dialogSearchResult5);
                                    }
                                } catch (Throwable th12) {
                                    th = th12;
                                    sQLiteCursor3 = null;
                                    th = th;
                                    if (sQLiteCursor3 != null) {
                                        sQLiteCursor3.dispose();
                                    }
                                    throw th;
                                }
                            }
                            Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$localSearch$240;
                                    lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                    return lambda$localSearch$240;
                                }
                            });
                            for (i7 = 0; i7 < arrayList6.size(); i7++) {
                                DialogsSearchAdapter.DialogSearchResult dialogSearchResult6 = (DialogsSearchAdapter.DialogSearchResult) arrayList6.get(i7);
                                arrayList.add(dialogSearchResult6.object);
                                arrayList2.add(dialogSearchResult6.name);
                            }
                            if (i != 2 && i != 15 && i != 6 && i != 5) {
                                queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                                while (queryFinalized2.next()) {
                                    try {
                                        if (longSparseArray2.indexOfKey(queryFinalized2.longValue(3)) < 0) {
                                            String stringValue4 = queryFinalized2.stringValue(2);
                                            String translitString5 = LocaleController.getInstance().getTranslitString(stringValue4);
                                            if (stringValue4.equals(translitString5)) {
                                                translitString5 = null;
                                            }
                                            int lastIndexOf3 = stringValue4.lastIndexOf(str7);
                                            String substring3 = lastIndexOf3 != -1 ? stringValue4.substring(lastIndexOf3 + 3) : null;
                                            int i18 = 0;
                                            char c4 = 0;
                                            while (true) {
                                                if (i18 < i5) {
                                                    String str24 = strArr[i18];
                                                    if (stringValue4.startsWith(str24)) {
                                                        str8 = str6;
                                                    } else {
                                                        StringBuilder sb = new StringBuilder();
                                                        str8 = str6;
                                                        sb.append(str8);
                                                        sb.append(str24);
                                                        if (!stringValue4.contains(sb.toString())) {
                                                            if (translitString5 != null) {
                                                                if (!translitString5.startsWith(str24)) {
                                                                    if (translitString5.contains(str8 + str24)) {
                                                                    }
                                                                }
                                                            }
                                                            if (substring3 != null && substring3.startsWith(str24)) {
                                                                c4 = 2;
                                                            }
                                                            if (c4 == 0) {
                                                                NativeByteBuffer byteBufferValue5 = queryFinalized2.byteBufferValue(0);
                                                                if (byteBufferValue5 != null) {
                                                                    TLRPC$User TLdeserialize4 = TLRPC$User.TLdeserialize(byteBufferValue5, byteBufferValue5.readInt32(false), false);
                                                                    byteBufferValue5.reuse();
                                                                    TLRPC$UserStatus tLRPC$UserStatus2 = TLdeserialize4.status;
                                                                    if (tLRPC$UserStatus2 != null) {
                                                                        tLRPC$UserStatus2.expires = queryFinalized2.intValue(1);
                                                                    }
                                                                    if (c4 == 1) {
                                                                        arrayList2.add(AndroidUtilities.generateSearchName(TLdeserialize4.first_name, TLdeserialize4.last_name, str24));
                                                                    } else {
                                                                        arrayList2.add(AndroidUtilities.generateSearchName("@" + UserObject.getPublicUsername(TLdeserialize4), null, "@" + str24));
                                                                    }
                                                                    arrayList.add(TLdeserialize4);
                                                                }
                                                                str6 = str8;
                                                            } else {
                                                                i18++;
                                                                str6 = str8;
                                                            }
                                                        }
                                                    }
                                                    c4 = 1;
                                                    if (c4 == 0) {
                                                    }
                                                }
                                            }
                                        }
                                    } catch (Throwable th13) {
                                        th = th13;
                                        sQLiteCursor3 = queryFinalized2;
                                        th = th;
                                        if (sQLiteCursor3 != null) {
                                        }
                                        throw th;
                                    }
                                }
                                queryFinalized2.dispose();
                            }
                        }
                        TLRPC$User currentUser = UserConfig.getInstance(this.currentAccount).getCurrentUser();
                        DialogsSearchAdapter.DialogSearchResult dialogSearchResult7 = new DialogsSearchAdapter.DialogSearchResult();
                        dialogSearchResult7.date = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        dialogSearchResult7.name = lowerCase2;
                        dialogSearchResult7.object = currentUser;
                        longSparseArray6.put(currentUser.id, dialogSearchResult7);
                        i3 = 1;
                        if (i != 4) {
                            user = getMessagesController().getUser((Long) 708513L);
                            if (user == null) {
                            }
                            if (user != null) {
                            }
                            String str182 = ";;;";
                            String str192 = " ";
                            if (arrayList13.isEmpty()) {
                            }
                            if (arrayList10.isEmpty()) {
                            }
                            if (arrayList5.isEmpty()) {
                            }
                            str6 = " ";
                            str7 = str5;
                            arrayList6 = new ArrayList(i3);
                            while (i6 < longSparseArray2.size()) {
                            }
                            Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                                @Override // java.util.Comparator
                                public final int compare(Object obj, Object obj2) {
                                    int lambda$localSearch$240;
                                    lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                    return lambda$localSearch$240;
                                }
                            });
                            while (i7 < arrayList6.size()) {
                            }
                            if (i != 2) {
                                queryFinalized2 = getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid", new Object[0]);
                                while (queryFinalized2.next()) {
                                }
                                queryFinalized2.dispose();
                            }
                        }
                        user = getMessagesController().getUser((Long) 708513L);
                        if (user == null) {
                        }
                        if (user != null) {
                        }
                        String str1822 = ";;;";
                        String str1922 = " ";
                        if (arrayList13.isEmpty()) {
                        }
                        if (arrayList10.isEmpty()) {
                        }
                        if (arrayList5.isEmpty()) {
                        }
                        str6 = " ";
                        str7 = str5;
                        arrayList6 = new ArrayList(i3);
                        while (i6 < longSparseArray2.size()) {
                        }
                        Collections.sort(arrayList6, new Comparator() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda48
                            @Override // java.util.Comparator
                            public final int compare(Object obj, Object obj2) {
                                int lambda$localSearch$240;
                                lambda$localSearch$240 = MessagesStorage.lambda$localSearch$240((DialogsSearchAdapter.DialogSearchResult) obj, (DialogsSearchAdapter.DialogSearchResult) obj2);
                                return lambda$localSearch$240;
                            }
                        });
                        while (i7 < arrayList6.size()) {
                        }
                        if (i != 2) {
                        }
                    } catch (Throwable th14) {
                        sQLiteCursor2 = null;
                        th = th14;
                        sQLiteCursor3 = sQLiteCursor2;
                        if (sQLiteCursor3 != null) {
                        }
                        throw th;
                    }
                } catch (Exception e10) {
                    sQLiteCursor = null;
                    exc = e10;
                    sQLiteCursor3 = sQLiteCursor;
                    checkSQLException(exc);
                    if (sQLiteCursor3 == null) {
                    }
                }
            } catch (Throwable th15) {
                sQLiteCursor2 = null;
                th = th15;
            }
        } catch (Exception e11) {
            sQLiteCursor = null;
            exc = e11;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$localSearch$240(DialogsSearchAdapter.DialogSearchResult dialogSearchResult, DialogsSearchAdapter.DialogSearchResult dialogSearchResult2) {
        int i = dialogSearchResult.date;
        int i2 = dialogSearchResult2.date;
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:16:0x0051, code lost:
        if (0 == 0) goto L11;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public ArrayList<Integer> getCachedMessagesInRange(long j, int i, int i2) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        SQLiteCursor sQLiteCursor = null;
        try {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND date >= %d AND date <= %d", Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)), new Object[0]);
                while (sQLiteCursor.next()) {
                    try {
                        arrayList.add(Integer.valueOf(sQLiteCursor.intValue(0)));
                    } catch (Exception e) {
                        checkSQLException(e);
                    }
                }
                sQLiteCursor.dispose();
            } catch (Exception e2) {
                checkSQLException(e2);
            }
            sQLiteCursor.dispose();
            return arrayList;
        } catch (Throwable th) {
            if (0 != 0) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
    }

    public void updateUnreadReactionsCount(long j, long j2, int i) {
        updateUnreadReactionsCount(j, j2, i, false);
    }

    public void updateUnreadReactionsCount(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateUnreadReactionsCount$241(j2, z, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:27:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:64:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateUnreadReactionsCount$241(long j, boolean z, long j2, int i) {
        SQLitePreparedStatement executeFast;
        int intValue;
        SQLiteException e;
        SQLitePreparedStatement executeFast2;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if (j != 0) {
                try {
                    if (z) {
                        try {
                            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
                            intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            queryFinalized.dispose();
                        } catch (SQLiteException e2) {
                            e = e2;
                            e.printStackTrace();
                            if (sQLitePreparedStatement == null) {
                                sQLitePreparedStatement.dispose();
                                return;
                            }
                            return;
                        }
                    } else {
                        intValue = 0;
                    }
                    executeFast2 = this.database.executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    executeFast2.bindInteger(1, Math.max(intValue + i, 0));
                    executeFast2.bindLong(2, j2);
                    executeFast2.bindLong(3, j);
                    executeFast2.step();
                    executeFast2.dispose();
                    if (i == 0) {
                        sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? ");
                        sQLitePreparedStatement.bindLong(1, j2);
                        sQLitePreparedStatement.bindLong(2, j);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    }
                } catch (SQLiteException e3) {
                    e = e3;
                    sQLitePreparedStatement = executeFast2;
                    e.printStackTrace();
                    if (sQLitePreparedStatement == null) {
                    }
                } catch (Throwable th2) {
                    th = th2;
                    sQLitePreparedStatement = executeFast2;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            } else {
                try {
                    executeFast = this.database.executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
                } catch (SQLiteException e4) {
                    e = e4;
                }
                try {
                    executeFast.bindInteger(1, Math.max(i, 0));
                    executeFast.bindLong(2, j2);
                    executeFast.step();
                    executeFast.dispose();
                    if (i == 0) {
                        sQLitePreparedStatement = this.database.executeFast("UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?");
                        sQLitePreparedStatement.bindLong(1, j2);
                        sQLitePreparedStatement.step();
                        sQLitePreparedStatement.dispose();
                    }
                } catch (SQLiteException e5) {
                    sQLitePreparedStatement = executeFast;
                    e = e5;
                    e.printStackTrace();
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                } catch (Throwable th3) {
                    sQLitePreparedStatement = executeFast;
                    th = th3;
                    if (sQLitePreparedStatement != null) {
                        sQLitePreparedStatement.dispose();
                    }
                    throw th;
                }
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public void markMessageReactionsAsRead(final long j, final long j2, final int i, boolean z) {
        if (z) {
            getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda91
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesStorage.this.lambda$markMessageReactionsAsRead$242(j, j2, i);
                }
            });
        } else {
            lambda$markMessageReactionsAsRead$242(j, j2, i);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:120:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0192  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0197  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x019e  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x01a3  */
    /* renamed from: markMessageReactionsAsReadInternal */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$markMessageReactionsAsRead$242(long j, long j2, int i) {
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLiteCursor queryFinalized;
        SQLiteCursor sQLiteCursor;
        TLRPC$Message tLRPC$Message;
        SQLitePreparedStatement executeFast;
        NativeByteBuffer byteBufferValue;
        int i2 = 1;
        int i3 = 0;
        SQLitePreparedStatement sQLitePreparedStatement2 = null;
        while (i3 < 2) {
            boolean z = i3 == i2;
            if (!z || j2 != 0) {
                if (!z) {
                    try {
                        sQLitePreparedStatement2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions SET state = 0 WHERE message_id = ? AND dialog_id = ?");
                        sQLitePreparedStatement2.bindInteger(i2, i);
                        sQLitePreparedStatement2.bindLong(2, j);
                        sQLitePreparedStatement2.step();
                        sQLitePreparedStatement2.dispose();
                    } catch (SQLiteException e) {
                        e = e;
                    } catch (Throwable th) {
                        th = th;
                    }
                    try {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        Long valueOf = Long.valueOf(j);
                        Integer valueOf2 = Integer.valueOf(i);
                        try {
                            Object[] objArr = new Object[2];
                            objArr[0] = valueOf;
                            objArr[i2] = valueOf2;
                            queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE uid = %d AND mid = %d", objArr), new Object[0]);
                        } catch (SQLiteException e2) {
                            e = e2;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = null;
                            try {
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            sQLitePreparedStatement = null;
                            sQLiteCursor = null;
                            if (sQLitePreparedStatement != null) {
                            }
                            if (sQLiteCursor != null) {
                            }
                            throw th;
                        }
                    } catch (SQLiteException e3) {
                        e = e3;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        sQLiteCursor = null;
                        checkSQLException(e);
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor == null) {
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        sQLitePreparedStatement2 = null;
                        sQLitePreparedStatement = sQLitePreparedStatement2;
                        sQLiteCursor = null;
                        if (sQLitePreparedStatement != null) {
                        }
                        if (sQLiteCursor != null) {
                        }
                        throw th;
                    }
                } else {
                    SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions_topics SET state = 0 WHERE message_id = ? AND dialog_id = ? AND topic_id = ? ");
                    executeFast2.bindInteger(i2, i);
                    executeFast2.bindLong(2, j);
                    executeFast2.bindLong(3, j2);
                    executeFast2.step();
                    executeFast2.dispose();
                    queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_topics WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)), new Object[0]);
                }
                try {
                    if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                        tLRPC$Message = null;
                    } else {
                        tLRPC$Message = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        tLRPC$Message.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
                        if (tLRPC$TL_messageReactions != null && tLRPC$TL_messageReactions.recent_reactions != null) {
                            for (int i4 = 0; i4 < tLRPC$Message.reactions.recent_reactions.size(); i4++) {
                                tLRPC$Message.reactions.recent_reactions.get(i4).unread = false;
                            }
                        }
                    }
                    queryFinalized.dispose();
                    if (tLRPC$Message != null) {
                        if (!z) {
                            try {
                                executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_v2 SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)));
                            } catch (SQLiteException e4) {
                                e = e4;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor == null) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                queryFinalized = null;
                                sQLiteCursor = queryFinalized;
                                sQLitePreparedStatement = null;
                                if (sQLitePreparedStatement != null) {
                                }
                                if (sQLiteCursor != null) {
                                }
                                throw th;
                            }
                        } else {
                            executeFast = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_topics SET data = ? WHERE uid = %d AND mid = %d", Long.valueOf(j), Integer.valueOf(i)));
                        }
                        SQLitePreparedStatement sQLitePreparedStatement3 = executeFast;
                        try {
                            try {
                                MessageObject.normalizeFlags(tLRPC$Message);
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                                tLRPC$Message.serializeToStream(nativeByteBuffer);
                                sQLitePreparedStatement3.bindByteBuffer(1, nativeByteBuffer);
                                sQLitePreparedStatement3.step();
                                sQLitePreparedStatement3.dispose();
                                nativeByteBuffer.reuse();
                            } catch (Throwable th6) {
                                th = th6;
                                sQLitePreparedStatement = sQLitePreparedStatement3;
                                sQLiteCursor = null;
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor != null) {
                                    sQLiteCursor.dispose();
                                }
                                throw th;
                            }
                        } catch (Exception e5) {
                            try {
                                FileLog.e(e5);
                            } catch (SQLiteException e6) {
                                e = e6;
                                sQLitePreparedStatement = sQLitePreparedStatement3;
                                sQLiteCursor = null;
                                checkSQLException(e);
                                if (sQLitePreparedStatement != null) {
                                    sQLitePreparedStatement.dispose();
                                }
                                if (sQLiteCursor == null) {
                                    sQLiteCursor.dispose();
                                    return;
                                }
                                return;
                            }
                        }
                        sQLitePreparedStatement2 = sQLitePreparedStatement3;
                        i2 = 1;
                    } else {
                        i2 = 1;
                        sQLitePreparedStatement2 = null;
                    }
                } catch (SQLiteException e7) {
                    e = e7;
                } catch (Throwable th7) {
                    th = th7;
                }
            }
            i3 += i2;
        }
        if (sQLitePreparedStatement2 != null) {
            sQLitePreparedStatement2.dispose();
        }
    }

    public void updateDialogUnreadReactions(final long j, final long j2, final int i, final boolean z) {
        this.storageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda217
            @Override // java.lang.Runnable
            public final void run() {
                MessagesStorage.this.lambda$updateDialogUnreadReactions$243(z, j, i, j2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x00e4  */
    /* JADX WARN: Removed duplicated region for block: B:60:0x00ea  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x00ef  */
    /* JADX WARN: Removed duplicated region for block: B:76:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateDialogUnreadReactions$243(boolean z, long j, int i, long j2) {
        int max;
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        SQLitePreparedStatement sQLitePreparedStatement;
        SQLitePreparedStatement sQLitePreparedStatement2;
        SQLitePreparedStatement sQLitePreparedStatement3 = null;
        if (z) {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_reactions FROM dialogs WHERE did = " + j, new Object[0]);
                try {
                    max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0)) : 0;
                    queryFinalized.dispose();
                } catch (SQLiteException e) {
                    e = e;
                    sQLiteCursor2 = queryFinalized;
                    e.printStackTrace();
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLiteCursor2 == null) {
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor = queryFinalized;
                    if (sQLitePreparedStatement3 != null) {
                    }
                    if (sQLiteCursor != null) {
                    }
                    throw th;
                }
            } catch (SQLiteException e2) {
                e = e2;
                sQLiteCursor2 = null;
            } catch (Throwable th2) {
                th = th2;
                sQLiteCursor = null;
            }
        } else {
            max = 0;
        }
        int i2 = max + i;
        try {
            SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
            try {
                executeFast.bindInteger(1, i2);
                executeFast.bindLong(2, j);
                executeFast.step();
                executeFast.dispose();
                if (j2 != 0) {
                    if (z) {
                        SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d", Long.valueOf(j), Long.valueOf(j2)), new Object[0]);
                        try {
                            try {
                                r8 = queryFinalized2.next() ? Math.max(0, queryFinalized2.intValue(0)) : 0;
                                queryFinalized2.dispose();
                            } catch (SQLiteException e3) {
                                e = e3;
                                sQLitePreparedStatement2 = null;
                                sQLitePreparedStatement3 = queryFinalized2;
                                SQLitePreparedStatement sQLitePreparedStatement4 = sQLitePreparedStatement2;
                                sQLiteCursor2 = sQLitePreparedStatement3;
                                sQLitePreparedStatement3 = sQLitePreparedStatement4;
                                e.printStackTrace();
                                if (sQLitePreparedStatement3 != null) {
                                    sQLitePreparedStatement3.dispose();
                                }
                                if (sQLiteCursor2 == null) {
                                    sQLiteCursor2.dispose();
                                    return;
                                }
                                return;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            SQLiteCursor sQLiteCursor3 = sQLiteCursor2;
                            sQLitePreparedStatement = sQLitePreparedStatement3;
                            sQLitePreparedStatement3 = sQLiteCursor3;
                            SQLitePreparedStatement sQLitePreparedStatement5 = sQLitePreparedStatement;
                            sQLiteCursor = sQLitePreparedStatement3;
                            sQLitePreparedStatement3 = sQLitePreparedStatement5;
                            if (sQLitePreparedStatement3 != null) {
                                sQLitePreparedStatement3.dispose();
                            }
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                            }
                            throw th;
                        }
                    }
                    int i3 = r8 + i;
                    SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?");
                    executeFast2.bindInteger(1, i3);
                    executeFast2.bindLong(2, j);
                    executeFast2.bindLong(3, j2);
                    executeFast2.step();
                    executeFast2.dispose();
                }
            } catch (SQLiteException e4) {
                e = e4;
            } catch (Throwable th4) {
                th = th4;
                SQLitePreparedStatement sQLitePreparedStatement52 = sQLitePreparedStatement;
                sQLiteCursor = sQLitePreparedStatement3;
                sQLitePreparedStatement3 = sQLitePreparedStatement52;
                if (sQLitePreparedStatement3 != null) {
                }
                if (sQLiteCursor != null) {
                }
                throw th;
            }
        } catch (SQLiteException e5) {
            e = e5;
            sQLitePreparedStatement2 = null;
        } catch (Throwable th5) {
            th = th5;
            sQLitePreparedStatement = null;
        }
    }

    private boolean isForum(long j) {
        int i = this.dialogIsForum.get(j, -1);
        if (i == -1) {
            TLRPC$Chat chat = getChat(-j);
            i = (chat == null || !chat.forum) ? 0 : 1;
            this.dialogIsForum.put(j, i);
        }
        return i == 1;
    }

    /* loaded from: classes3.dex */
    public static class TopicKey {
        public long dialogId;
        public long topicId;

        public static TopicKey of(long j, long j2) {
            TopicKey topicKey = new TopicKey();
            topicKey.dialogId = j;
            topicKey.topicId = j2;
            return topicKey;
        }

        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            TopicKey topicKey = (TopicKey) obj;
            return this.dialogId == topicKey.dialogId && this.topicId == topicKey.topicId;
        }

        public int hashCode() {
            return Objects.hash(Long.valueOf(this.dialogId), Long.valueOf(this.topicId));
        }

        public String toString() {
            return "TopicKey{dialogId=" + this.dialogId + ", topicId=" + this.topicId + '}';
        }
    }
}

package org.telegram.messenger;

import android.annotation.SuppressLint;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetFileDescriptor;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.BitmapDrawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.MediaCodecInfo;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Spannable;
import android.text.TextUtils;
import android.util.Base64;
import android.util.SparseArray;
import android.webkit.MimeTypeMap;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.collection.LongSparseArray;
import androidx.core.view.inputmethod.InputContentInfoCompat;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.json.JSONObject;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.audioinfo.AudioInfo;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.QuickAckDelegate;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInlineMessage;
import org.telegram.tgnet.TLRPC$BotInlineResult;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$DecryptedMessage;
import org.telegram.tgnet.TLRPC$DecryptedMessageAction;
import org.telegram.tgnet.TLRPC$DecryptedMessageMedia;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DocumentAttribute;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GeoPoint;
import org.telegram.tgnet.TLRPC$InputCheckPasswordSRP;
import org.telegram.tgnet.TLRPC$InputDocument;
import org.telegram.tgnet.TLRPC$InputEncryptedFile;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputStickerSet;
import org.telegram.tgnet.TLRPC$KeyboardButton;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_account_getPassword;
import org.telegram.tgnet.TLRPC$TL_botInlineMediaResult;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaAuto;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaContact;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaGeo;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageMediaVenue;
import org.telegram.tgnet.TLRPC$TL_botInlineMessageText;
import org.telegram.tgnet.TLRPC$TL_dataJSON;
import org.telegram.tgnet.TLRPC$TL_decryptedMessage;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionAbortKey;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionAcceptKey;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionCommitKey;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionFlushHistory;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionNoop;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionNotifyLayer;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionReadMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionRequestKey;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionResend;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageActionTyping;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaContact;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaEmpty;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaExternalDocument;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaGeoPoint;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaVenue;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaVideo;
import org.telegram.tgnet.TLRPC$TL_decryptedMessageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_decryptedMessage_layer45;
import org.telegram.tgnet.TLRPC$TL_document;
import org.telegram.tgnet.TLRPC$TL_documentAttributeAnimated;
import org.telegram.tgnet.TLRPC$TL_documentAttributeAudio;
import org.telegram.tgnet.TLRPC$TL_documentAttributeFilename;
import org.telegram.tgnet.TLRPC$TL_documentAttributeHasStickers;
import org.telegram.tgnet.TLRPC$TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC$TL_documentAttributeSticker;
import org.telegram.tgnet.TLRPC$TL_documentAttributeSticker_layer55;
import org.telegram.tgnet.TLRPC$TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC$TL_document_layer82;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC$TL_fileLocation_layer82;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_game;
import org.telegram.tgnet.TLRPC$TL_geoPoint;
import org.telegram.tgnet.TLRPC$TL_inputCheckPasswordEmpty;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedFile;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputInvoiceMessage;
import org.telegram.tgnet.TLRPC$TL_inputMediaContact;
import org.telegram.tgnet.TLRPC$TL_inputMediaDice;
import org.telegram.tgnet.TLRPC$TL_inputMediaDocument;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMediaGeoLive;
import org.telegram.tgnet.TLRPC$TL_inputMediaGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_inputMediaPoll;
import org.telegram.tgnet.TLRPC$TL_inputMediaUploadedDocument;
import org.telegram.tgnet.TLRPC$TL_inputMediaUploadedPhoto;
import org.telegram.tgnet.TLRPC$TL_inputMediaVenue;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhoto;
import org.telegram.tgnet.TLRPC$TL_inputSingleMedia;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetEmpty;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetItem;
import org.telegram.tgnet.TLRPC$TL_inputStickerSetShortName;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC$TL_keyboardButtonUrlAuth;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionScreenshotTaken;
import org.telegram.tgnet.TLRPC$TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC$TL_messageEntityBold;
import org.telegram.tgnet.TLRPC$TL_messageEntityCode;
import org.telegram.tgnet.TLRPC$TL_messageEntityCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_messageEntityItalic;
import org.telegram.tgnet.TLRPC$TL_messageEntityPre;
import org.telegram.tgnet.TLRPC$TL_messageEntitySpoiler;
import org.telegram.tgnet.TLRPC$TL_messageEntityTextUrl;
import org.telegram.tgnet.TLRPC$TL_messageEntityUrl;
import org.telegram.tgnet.TLRPC$TL_messageFwdHeader;
import org.telegram.tgnet.TLRPC$TL_messageMediaContact;
import org.telegram.tgnet.TLRPC$TL_messageMediaDice;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaEmpty;
import org.telegram.tgnet.TLRPC$TL_messageMediaGame;
import org.telegram.tgnet.TLRPC$TL_messageMediaGeo;
import org.telegram.tgnet.TLRPC$TL_messageMediaGeoLive;
import org.telegram.tgnet.TLRPC$TL_messageMediaInvoice;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaVenue;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_editMessage;
import org.telegram.tgnet.TLRPC$TL_messages_forwardMessages;
import org.telegram.tgnet.TLRPC$TL_messages_getBotCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_getStickerSet;
import org.telegram.tgnet.TLRPC$TL_messages_historyImport;
import org.telegram.tgnet.TLRPC$TL_messages_initHistoryImport;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_requestUrlAuth;
import org.telegram.tgnet.TLRPC$TL_messages_sendEncryptedMultiMedia;
import org.telegram.tgnet.TLRPC$TL_messages_sendInlineBotResult;
import org.telegram.tgnet.TLRPC$TL_messages_sendMedia;
import org.telegram.tgnet.TLRPC$TL_messages_sendMessage;
import org.telegram.tgnet.TLRPC$TL_messages_sendMultiMedia;
import org.telegram.tgnet.TLRPC$TL_messages_sendReaction;
import org.telegram.tgnet.TLRPC$TL_messages_sendScreenshotNotification;
import org.telegram.tgnet.TLRPC$TL_messages_sendVote;
import org.telegram.tgnet.TLRPC$TL_messages_startHistoryImport;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_messages_uploadImportedMedia;
import org.telegram.tgnet.TLRPC$TL_messages_uploadMedia;
import org.telegram.tgnet.TLRPC$TL_payments_getPaymentForm;
import org.telegram.tgnet.TLRPC$TL_payments_getPaymentReceipt;
import org.telegram.tgnet.TLRPC$TL_payments_paymentForm;
import org.telegram.tgnet.TLRPC$TL_payments_paymentReceipt;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoCachedSize;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photoPathSize;
import org.telegram.tgnet.TLRPC$TL_photoSize;
import org.telegram.tgnet.TLRPC$TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC$TL_photoSizeProgressive;
import org.telegram.tgnet.TLRPC$TL_photoSize_layer127;
import org.telegram.tgnet.TLRPC$TL_photoStrippedSize;
import org.telegram.tgnet.TLRPC$TL_pollAnswer;
import org.telegram.tgnet.TLRPC$TL_reactionCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_restrictionReason;
import org.telegram.tgnet.TLRPC$TL_stickers_createStickerSet;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage;
import org.telegram.tgnet.TLRPC$TL_updateShortSentMessage;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultAccepted;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultDefault;
import org.telegram.tgnet.TLRPC$TL_urlAuthResultRequest;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_userContact_old2;
import org.telegram.tgnet.TLRPC$TL_userRequest_old2;
import org.telegram.tgnet.TLRPC$TL_webDocument;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WebDocument;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$account_Password;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.Point;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.Reactions.ReactionsUtils;
import org.telegram.ui.PaymentFormActivity;
import org.telegram.ui.TwoStepVerificationActivity;
import org.telegram.ui.TwoStepVerificationSetupActivity;
import org.webrtc.MediaStreamTrack;
/* loaded from: classes.dex */
public class SendMessagesHelper extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    private static final int ERROR_TYPE_FILE_TOO_LARGE = 2;
    private static final int ERROR_TYPE_UNSUPPORTED = 1;
    private static volatile SendMessagesHelper[] Instance;
    private static DispatchQueue mediaSendQueue = new DispatchQueue("mediaSendQueue");
    private static ThreadPoolExecutor mediaSendThreadPool;
    private HashMap<String, ArrayList<DelayedMessage>> delayedMessages;
    private SparseArray<TLRPC$Message> editingMessages;
    private HashMap<String, ImportingHistory> importingHistoryFiles;
    private LongSparseArray<ImportingHistory> importingHistoryMap;
    private HashMap<String, ImportingStickers> importingStickersFiles;
    private HashMap<String, ImportingStickers> importingStickersMap;
    private LocationProvider locationProvider;
    private SparseArray<TLRPC$Message> sendingMessages;
    private LongSparseArray<Integer> sendingMessagesIdDialogs;
    private SparseArray<MessageObject> unsentMessages;
    private SparseArray<TLRPC$Message> uploadMessages;
    private LongSparseArray<Integer> uploadingMessagesIdDialogs;
    private LongSparseArray<Long> voteSendTime;
    private HashMap<String, Boolean> waitingForCallback;
    private HashMap<String, List<String>> waitingForCallbackMap;
    private HashMap<String, MessageObject> waitingForLocation;
    private HashMap<String, byte[]> waitingForVote;

    /* loaded from: classes.dex */
    public static class SendingMediaInfo {
        public boolean canDeleteAfter;
        public String caption;
        public TLRPC$VideoSize emojiMarkup;
        public ArrayList<TLRPC$MessageEntity> entities;
        public boolean forceImage;
        public boolean hasMediaSpoilers;
        public TLRPC$BotInlineResult inlineResult;
        public boolean isVideo;
        public ArrayList<TLRPC$InputDocument> masks;
        public String paintPath;
        public HashMap<String, String> params;
        public String path;
        public MediaController.SearchImage searchImage;
        public String thumbPath;
        public int ttl;
        public boolean updateStickersOrder;
        public Uri uri;
        public VideoEditedInfo videoEditedInfo;
    }

    public static boolean checkUpdateStickersOrder(CharSequence charSequence) {
        if (charSequence instanceof Spannable) {
            for (AnimatedEmojiSpan animatedEmojiSpan : (AnimatedEmojiSpan[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), AnimatedEmojiSpan.class)) {
                if (animatedEmojiSpan.fromEmojiKeyboard) {
                    return true;
                }
            }
        }
        return false;
    }

    /* loaded from: classes.dex */
    public class ImportingHistory {
        public long dialogId;
        public double estimatedUploadSpeed;
        public String historyPath;
        public long importId;
        private long lastUploadSize;
        private long lastUploadTime;
        public TLRPC$InputPeer peer;
        public long totalSize;
        public int uploadProgress;
        public long uploadedSize;
        public ArrayList<Uri> mediaPaths = new ArrayList<>();
        public HashSet<String> uploadSet = new HashSet<>();
        public HashMap<String, Float> uploadProgresses = new HashMap<>();
        public HashMap<String, Long> uploadSize = new HashMap<>();
        public ArrayList<String> uploadMedia = new ArrayList<>();
        public int timeUntilFinish = ConnectionsManager.DEFAULT_DATACENTER_ID;

        public ImportingHistory() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void initImport(TLRPC$InputFile tLRPC$InputFile) {
            TLRPC$TL_messages_initHistoryImport tLRPC$TL_messages_initHistoryImport = new TLRPC$TL_messages_initHistoryImport();
            tLRPC$TL_messages_initHistoryImport.file = tLRPC$InputFile;
            tLRPC$TL_messages_initHistoryImport.media_count = this.mediaPaths.size();
            tLRPC$TL_messages_initHistoryImport.peer = this.peer;
            SendMessagesHelper.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_initHistoryImport, new 1(tLRPC$TL_messages_initHistoryImport), 2);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes.dex */
        public class 1 implements RequestDelegate {
            final /* synthetic */ TLRPC$TL_messages_initHistoryImport val$req;

            1(TLRPC$TL_messages_initHistoryImport tLRPC$TL_messages_initHistoryImport) {
                this.val$req = tLRPC$TL_messages_initHistoryImport;
            }

            @Override // org.telegram.tgnet.RequestDelegate
            public void run(final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
                final TLRPC$TL_messages_initHistoryImport tLRPC$TL_messages_initHistoryImport = this.val$req;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingHistory$1$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.ImportingHistory.1.this.lambda$run$0(tLObject, tLRPC$TL_messages_initHistoryImport, tLRPC$TL_error);
                    }
                });
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(TLObject tLObject, TLRPC$TL_messages_initHistoryImport tLRPC$TL_messages_initHistoryImport, TLRPC$TL_error tLRPC$TL_error) {
                if (!(tLObject instanceof TLRPC$TL_messages_historyImport)) {
                    SendMessagesHelper.this.importingHistoryMap.remove(ImportingHistory.this.dialogId);
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(ImportingHistory.this.dialogId), tLRPC$TL_messages_initHistoryImport, tLRPC$TL_error);
                    return;
                }
                ImportingHistory importingHistory = ImportingHistory.this;
                importingHistory.importId = ((TLRPC$TL_messages_historyImport) tLObject).id;
                importingHistory.uploadSet.remove(importingHistory.historyPath);
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(ImportingHistory.this.dialogId));
                if (ImportingHistory.this.uploadSet.isEmpty()) {
                    ImportingHistory.this.startImport();
                }
                ImportingHistory.this.lastUploadTime = SystemClock.elapsedRealtime();
                int size = ImportingHistory.this.uploadMedia.size();
                for (int i = 0; i < size; i++) {
                    SendMessagesHelper.this.getFileLoader().uploadFile(ImportingHistory.this.uploadMedia.get(i), false, true, ConnectionsManager.FileTypeFile);
                }
            }
        }

        public long getUploadedCount() {
            return this.uploadedSize;
        }

        public long getTotalCount() {
            return this.totalSize;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void onFileFailedToUpload(String str) {
            if (str.equals(this.historyPath)) {
                SendMessagesHelper.this.importingHistoryMap.remove(this.dialogId);
                TLRPC$TL_error tLRPC$TL_error = new TLRPC$TL_error();
                tLRPC$TL_error.code = 400;
                tLRPC$TL_error.text = "IMPORT_UPLOAD_FAILED";
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(this.dialogId), new TLRPC$TL_messages_initHistoryImport(), tLRPC$TL_error);
                return;
            }
            this.uploadSet.remove(str);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void addUploadProgress(String str, long j, float f) {
            this.uploadProgresses.put(str, Float.valueOf(f));
            this.uploadSize.put(str, Long.valueOf(j));
            this.uploadedSize = 0L;
            for (Map.Entry<String, Long> entry : this.uploadSize.entrySet()) {
                this.uploadedSize += entry.getValue().longValue();
            }
            long elapsedRealtime = SystemClock.elapsedRealtime();
            if (!str.equals(this.historyPath)) {
                long j2 = this.uploadedSize;
                long j3 = this.lastUploadSize;
                if (j2 != j3) {
                    long j4 = this.lastUploadTime;
                    if (elapsedRealtime != j4) {
                        double d = elapsedRealtime - j4;
                        Double.isNaN(d);
                        double d2 = j2 - j3;
                        Double.isNaN(d2);
                        double d3 = d2 / (d / 1000.0d);
                        double d4 = this.estimatedUploadSpeed;
                        if (d4 == 0.0d) {
                            this.estimatedUploadSpeed = d3;
                        } else {
                            this.estimatedUploadSpeed = (d3 * 0.01d) + (0.99d * d4);
                        }
                        double d5 = (this.totalSize - j2) * 1000;
                        double d6 = this.estimatedUploadSpeed;
                        Double.isNaN(d5);
                        this.timeUntilFinish = (int) (d5 / d6);
                        this.lastUploadSize = j2;
                        this.lastUploadTime = elapsedRealtime;
                    }
                }
            }
            int uploadedCount = (int) ((((float) getUploadedCount()) / ((float) getTotalCount())) * 100.0f);
            if (this.uploadProgress != uploadedCount) {
                this.uploadProgress = uploadedCount;
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(this.dialogId));
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void onMediaImport(String str, long j, TLRPC$InputFile tLRPC$InputFile) {
            addUploadProgress(str, j, 1.0f);
            TLRPC$TL_messages_uploadImportedMedia tLRPC$TL_messages_uploadImportedMedia = new TLRPC$TL_messages_uploadImportedMedia();
            tLRPC$TL_messages_uploadImportedMedia.peer = this.peer;
            tLRPC$TL_messages_uploadImportedMedia.import_id = this.importId;
            tLRPC$TL_messages_uploadImportedMedia.file_name = new File(str).getName();
            MimeTypeMap singleton = MimeTypeMap.getSingleton();
            int lastIndexOf = tLRPC$TL_messages_uploadImportedMedia.file_name.lastIndexOf(46);
            String lowerCase = lastIndexOf != -1 ? tLRPC$TL_messages_uploadImportedMedia.file_name.substring(lastIndexOf + 1).toLowerCase() : "txt";
            String mimeTypeFromExtension = singleton.getMimeTypeFromExtension(lowerCase);
            if (mimeTypeFromExtension == null) {
                if ("opus".equals(lowerCase)) {
                    mimeTypeFromExtension = "audio/opus";
                } else {
                    mimeTypeFromExtension = "webp".equals(lowerCase) ? "image/webp" : "text/plain";
                }
            }
            if (mimeTypeFromExtension.equals("image/jpg") || mimeTypeFromExtension.equals("image/jpeg")) {
                TLRPC$TL_inputMediaUploadedPhoto tLRPC$TL_inputMediaUploadedPhoto = new TLRPC$TL_inputMediaUploadedPhoto();
                tLRPC$TL_inputMediaUploadedPhoto.file = tLRPC$InputFile;
                tLRPC$TL_messages_uploadImportedMedia.media = tLRPC$TL_inputMediaUploadedPhoto;
            } else {
                TLRPC$TL_inputMediaUploadedDocument tLRPC$TL_inputMediaUploadedDocument = new TLRPC$TL_inputMediaUploadedDocument();
                tLRPC$TL_inputMediaUploadedDocument.file = tLRPC$InputFile;
                tLRPC$TL_inputMediaUploadedDocument.mime_type = mimeTypeFromExtension;
                tLRPC$TL_messages_uploadImportedMedia.media = tLRPC$TL_inputMediaUploadedDocument;
            }
            SendMessagesHelper.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_uploadImportedMedia, new 2(str), 2);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes.dex */
        public class 2 implements RequestDelegate {
            final /* synthetic */ String val$path;

            2(String str) {
                this.val$path = str;
            }

            @Override // org.telegram.tgnet.RequestDelegate
            public void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                final String str = this.val$path;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingHistory$2$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.ImportingHistory.2.this.lambda$run$0(str);
                    }
                });
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(String str) {
                ImportingHistory.this.uploadSet.remove(str);
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(ImportingHistory.this.dialogId));
                if (ImportingHistory.this.uploadSet.isEmpty()) {
                    ImportingHistory.this.startImport();
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void startImport() {
            TLRPC$TL_messages_startHistoryImport tLRPC$TL_messages_startHistoryImport = new TLRPC$TL_messages_startHistoryImport();
            tLRPC$TL_messages_startHistoryImport.peer = this.peer;
            tLRPC$TL_messages_startHistoryImport.import_id = this.importId;
            SendMessagesHelper.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_startHistoryImport, new 3(tLRPC$TL_messages_startHistoryImport));
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes.dex */
        public class 3 implements RequestDelegate {
            final /* synthetic */ TLRPC$TL_messages_startHistoryImport val$req;

            3(TLRPC$TL_messages_startHistoryImport tLRPC$TL_messages_startHistoryImport) {
                this.val$req = tLRPC$TL_messages_startHistoryImport;
            }

            @Override // org.telegram.tgnet.RequestDelegate
            public void run(TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
                final TLRPC$TL_messages_startHistoryImport tLRPC$TL_messages_startHistoryImport = this.val$req;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingHistory$3$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.ImportingHistory.3.this.lambda$run$0(tLRPC$TL_error, tLRPC$TL_messages_startHistoryImport);
                    }
                });
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_messages_startHistoryImport tLRPC$TL_messages_startHistoryImport) {
                SendMessagesHelper.this.importingHistoryMap.remove(ImportingHistory.this.dialogId);
                if (tLRPC$TL_error == null) {
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(ImportingHistory.this.dialogId));
                } else {
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(ImportingHistory.this.dialogId), tLRPC$TL_messages_startHistoryImport, tLRPC$TL_error);
                }
            }
        }

        public void setImportProgress(int i) {
            if (i == 100) {
                SendMessagesHelper.this.importingHistoryMap.remove(this.dialogId);
            }
            SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(this.dialogId));
        }
    }

    /* loaded from: classes.dex */
    public static class ImportingSticker {
        public boolean animated;
        public String emoji;
        public TLRPC$TL_inputStickerSetItem item;
        public String mimeType;
        public String path;
        public boolean validated;

        public void uploadMedia(int i, TLRPC$InputFile tLRPC$InputFile, Runnable runnable) {
            TLRPC$TL_messages_uploadMedia tLRPC$TL_messages_uploadMedia = new TLRPC$TL_messages_uploadMedia();
            tLRPC$TL_messages_uploadMedia.peer = new TLRPC$TL_inputPeerSelf();
            TLRPC$TL_inputMediaUploadedDocument tLRPC$TL_inputMediaUploadedDocument = new TLRPC$TL_inputMediaUploadedDocument();
            tLRPC$TL_messages_uploadMedia.media = tLRPC$TL_inputMediaUploadedDocument;
            tLRPC$TL_inputMediaUploadedDocument.file = tLRPC$InputFile;
            tLRPC$TL_inputMediaUploadedDocument.mime_type = this.mimeType;
            ConnectionsManager.getInstance(i).sendRequest(tLRPC$TL_messages_uploadMedia, new 1(runnable), 2);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes.dex */
        public class 1 implements RequestDelegate {
            final /* synthetic */ Runnable val$onFinish;

            1(Runnable runnable) {
                this.val$onFinish = runnable;
            }

            @Override // org.telegram.tgnet.RequestDelegate
            public void run(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                final Runnable runnable = this.val$onFinish;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingSticker$1$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.ImportingSticker.1.this.lambda$run$0(tLObject, runnable);
                    }
                });
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(TLObject tLObject, Runnable runnable) {
                if (tLObject instanceof TLRPC$TL_messageMediaDocument) {
                    ImportingSticker.this.item = new TLRPC$TL_inputStickerSetItem();
                    ImportingSticker.this.item.document = new TLRPC$TL_inputDocument();
                    ImportingSticker importingSticker = ImportingSticker.this;
                    TLRPC$TL_inputStickerSetItem tLRPC$TL_inputStickerSetItem = importingSticker.item;
                    TLRPC$InputDocument tLRPC$InputDocument = tLRPC$TL_inputStickerSetItem.document;
                    TLRPC$Document tLRPC$Document = ((TLRPC$TL_messageMediaDocument) tLObject).document;
                    tLRPC$InputDocument.id = tLRPC$Document.id;
                    tLRPC$InputDocument.access_hash = tLRPC$Document.access_hash;
                    tLRPC$InputDocument.file_reference = tLRPC$Document.file_reference;
                    String str = importingSticker.emoji;
                    if (str == null) {
                        str = "";
                    }
                    tLRPC$TL_inputStickerSetItem.emoji = str;
                    importingSticker.mimeType = tLRPC$Document.mime_type;
                } else {
                    ImportingSticker importingSticker2 = ImportingSticker.this;
                    if (importingSticker2.animated) {
                        importingSticker2.mimeType = "application/x-bad-tgsticker";
                    }
                }
                runnable.run();
            }
        }
    }

    /* loaded from: classes.dex */
    public class ImportingStickers {
        public double estimatedUploadSpeed;
        private long lastUploadSize;
        private long lastUploadTime;
        public String shortName;
        public String software;
        public String title;
        public long totalSize;
        public int uploadProgress;
        public long uploadedSize;
        public HashMap<String, ImportingSticker> uploadSet = new HashMap<>();
        public HashMap<String, Float> uploadProgresses = new HashMap<>();
        public HashMap<String, Long> uploadSize = new HashMap<>();
        public ArrayList<ImportingSticker> uploadMedia = new ArrayList<>();
        public int timeUntilFinish = ConnectionsManager.DEFAULT_DATACENTER_ID;

        public ImportingStickers() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void initImport() {
            SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, this.shortName);
            this.lastUploadTime = SystemClock.elapsedRealtime();
            int size = this.uploadMedia.size();
            for (int i = 0; i < size; i++) {
                SendMessagesHelper.this.getFileLoader().uploadFile(this.uploadMedia.get(i).path, false, true, ConnectionsManager.FileTypeFile);
            }
        }

        public long getUploadedCount() {
            return this.uploadedSize;
        }

        public long getTotalCount() {
            return this.totalSize;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void onFileFailedToUpload(String str) {
            ImportingSticker remove = this.uploadSet.remove(str);
            if (remove != null) {
                this.uploadMedia.remove(remove);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void addUploadProgress(String str, long j, float f) {
            this.uploadProgresses.put(str, Float.valueOf(f));
            this.uploadSize.put(str, Long.valueOf(j));
            this.uploadedSize = 0L;
            for (Map.Entry<String, Long> entry : this.uploadSize.entrySet()) {
                this.uploadedSize += entry.getValue().longValue();
            }
            long elapsedRealtime = SystemClock.elapsedRealtime();
            long j2 = this.uploadedSize;
            long j3 = this.lastUploadSize;
            if (j2 != j3) {
                long j4 = this.lastUploadTime;
                if (elapsedRealtime != j4) {
                    double d = elapsedRealtime - j4;
                    Double.isNaN(d);
                    double d2 = j2 - j3;
                    Double.isNaN(d2);
                    double d3 = d2 / (d / 1000.0d);
                    double d4 = this.estimatedUploadSpeed;
                    if (d4 == 0.0d) {
                        this.estimatedUploadSpeed = d3;
                    } else {
                        this.estimatedUploadSpeed = (d3 * 0.01d) + (0.99d * d4);
                    }
                    double d5 = (this.totalSize - j2) * 1000;
                    double d6 = this.estimatedUploadSpeed;
                    Double.isNaN(d5);
                    this.timeUntilFinish = (int) (d5 / d6);
                    this.lastUploadSize = j2;
                    this.lastUploadTime = elapsedRealtime;
                }
            }
            int uploadedCount = (int) ((((float) getUploadedCount()) / ((float) getTotalCount())) * 100.0f);
            if (this.uploadProgress != uploadedCount) {
                this.uploadProgress = uploadedCount;
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, this.shortName);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void onMediaImport(final String str, long j, TLRPC$InputFile tLRPC$InputFile) {
            addUploadProgress(str, j, 1.0f);
            ImportingSticker importingSticker = this.uploadSet.get(str);
            if (importingSticker == null) {
                return;
            }
            importingSticker.uploadMedia(SendMessagesHelper.this.currentAccount, tLRPC$InputFile, new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingStickers$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.ImportingStickers.this.lambda$onMediaImport$0(str);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onMediaImport$0(String str) {
            this.uploadSet.remove(str);
            SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, this.shortName);
            if (this.uploadSet.isEmpty()) {
                startImport();
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void startImport() {
            TLRPC$TL_stickers_createStickerSet tLRPC$TL_stickers_createStickerSet = new TLRPC$TL_stickers_createStickerSet();
            tLRPC$TL_stickers_createStickerSet.user_id = new TLRPC$TL_inputUserSelf();
            tLRPC$TL_stickers_createStickerSet.title = this.title;
            tLRPC$TL_stickers_createStickerSet.short_name = this.shortName;
            tLRPC$TL_stickers_createStickerSet.animated = this.uploadMedia.get(0).animated;
            String str = this.software;
            if (str != null) {
                tLRPC$TL_stickers_createStickerSet.software = str;
                tLRPC$TL_stickers_createStickerSet.flags |= 8;
            }
            int size = this.uploadMedia.size();
            for (int i = 0; i < size; i++) {
                TLRPC$TL_inputStickerSetItem tLRPC$TL_inputStickerSetItem = this.uploadMedia.get(i).item;
                if (tLRPC$TL_inputStickerSetItem != null) {
                    tLRPC$TL_stickers_createStickerSet.stickers.add(tLRPC$TL_inputStickerSetItem);
                }
            }
            SendMessagesHelper.this.getConnectionsManager().sendRequest(tLRPC$TL_stickers_createStickerSet, new 1(tLRPC$TL_stickers_createStickerSet));
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* loaded from: classes.dex */
        public class 1 implements RequestDelegate {
            final /* synthetic */ TLRPC$TL_stickers_createStickerSet val$req;

            1(TLRPC$TL_stickers_createStickerSet tLRPC$TL_stickers_createStickerSet) {
                this.val$req = tLRPC$TL_stickers_createStickerSet;
            }

            @Override // org.telegram.tgnet.RequestDelegate
            public void run(final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
                final TLRPC$TL_stickers_createStickerSet tLRPC$TL_stickers_createStickerSet = this.val$req;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$ImportingStickers$1$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.ImportingStickers.1.this.lambda$run$0(tLRPC$TL_error, tLRPC$TL_stickers_createStickerSet, tLObject);
                    }
                });
            }

            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_stickers_createStickerSet tLRPC$TL_stickers_createStickerSet, TLObject tLObject) {
                SendMessagesHelper.this.importingStickersMap.remove(ImportingStickers.this.shortName);
                if (tLRPC$TL_error == null) {
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, ImportingStickers.this.shortName);
                } else {
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, ImportingStickers.this.shortName, tLRPC$TL_stickers_createStickerSet, tLRPC$TL_error);
                }
                if (tLObject instanceof TLRPC$TL_messages_stickerSet) {
                    NotificationCenter notificationCenter = SendMessagesHelper.this.getNotificationCenter();
                    int i = NotificationCenter.stickersImportComplete;
                    if (notificationCenter.hasObservers(i)) {
                        SendMessagesHelper.this.getNotificationCenter().postNotificationName(i, tLObject);
                    } else {
                        SendMessagesHelper.this.getMediaDataController().toggleStickerSet(null, tLObject, 2, null, false, false);
                    }
                }
            }
        }

        public void setImportProgress(int i) {
            if (i == 100) {
                SendMessagesHelper.this.importingStickersMap.remove(this.shortName);
            }
            SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.stickersImportProgressChanged, this.shortName);
        }
    }

    static {
        int availableProcessors = Build.VERSION.SDK_INT >= 17 ? Runtime.getRuntime().availableProcessors() : 2;
        mediaSendThreadPool = new ThreadPoolExecutor(availableProcessors, availableProcessors, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue());
        Instance = new SendMessagesHelper[4];
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static class MediaSendPrepareWorker {
        public volatile String parentObject;
        public volatile TLRPC$TL_photo photo;
        public CountDownLatch sync;

        private MediaSendPrepareWorker() {
        }
    }

    @SuppressLint({"MissingPermission"})
    /* loaded from: classes.dex */
    public static class LocationProvider {
        private LocationProviderDelegate delegate;
        private Location lastKnownLocation;
        private LocationManager locationManager;
        private Runnable locationQueryCancelRunnable;
        private GpsLocationListener gpsLocationListener = new GpsLocationListener();
        private GpsLocationListener networkLocationListener = new GpsLocationListener();

        /* loaded from: classes.dex */
        public interface LocationProviderDelegate {
            void onLocationAcquired(Location location);

            void onUnableLocationAcquire();
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* loaded from: classes.dex */
        public class GpsLocationListener implements LocationListener {
            @Override // android.location.LocationListener
            public void onProviderDisabled(String str) {
            }

            @Override // android.location.LocationListener
            public void onProviderEnabled(String str) {
            }

            @Override // android.location.LocationListener
            public void onStatusChanged(String str, int i, Bundle bundle) {
            }

            private GpsLocationListener() {
            }

            @Override // android.location.LocationListener
            public void onLocationChanged(Location location) {
                if (location == null || LocationProvider.this.locationQueryCancelRunnable == null) {
                    return;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("found location " + location);
                }
                LocationProvider.this.lastKnownLocation = location;
                if (location.getAccuracy() < 100.0f) {
                    if (LocationProvider.this.delegate != null) {
                        LocationProvider.this.delegate.onLocationAcquired(location);
                    }
                    if (LocationProvider.this.locationQueryCancelRunnable != null) {
                        AndroidUtilities.cancelRunOnUIThread(LocationProvider.this.locationQueryCancelRunnable);
                    }
                    LocationProvider.this.cleanup();
                }
            }
        }

        public LocationProvider() {
        }

        public LocationProvider(LocationProviderDelegate locationProviderDelegate) {
            this.delegate = locationProviderDelegate;
        }

        public void setDelegate(LocationProviderDelegate locationProviderDelegate) {
            this.delegate = locationProviderDelegate;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void cleanup() {
            this.locationManager.removeUpdates(this.gpsLocationListener);
            this.locationManager.removeUpdates(this.networkLocationListener);
            this.lastKnownLocation = null;
            this.locationQueryCancelRunnable = null;
        }

        public void start() {
            if (this.locationManager == null) {
                this.locationManager = (LocationManager) ApplicationLoader.applicationContext.getSystemService("location");
            }
            try {
                this.locationManager.requestLocationUpdates("gps", 1L, 0.0f, this.gpsLocationListener);
            } catch (Exception e) {
                FileLog.e(e);
            }
            try {
                this.locationManager.requestLocationUpdates("network", 1L, 0.0f, this.networkLocationListener);
            } catch (Exception e2) {
                FileLog.e(e2);
            }
            try {
                Location lastKnownLocation = this.locationManager.getLastKnownLocation("gps");
                this.lastKnownLocation = lastKnownLocation;
                if (lastKnownLocation == null) {
                    this.lastKnownLocation = this.locationManager.getLastKnownLocation("network");
                }
            } catch (Exception e3) {
                FileLog.e(e3);
            }
            Runnable runnable = this.locationQueryCancelRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$LocationProvider$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.LocationProvider.this.lambda$start$0();
                }
            };
            this.locationQueryCancelRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2, 5000L);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$start$0() {
            LocationProviderDelegate locationProviderDelegate = this.delegate;
            if (locationProviderDelegate != null) {
                Location location = this.lastKnownLocation;
                if (location != null) {
                    locationProviderDelegate.onLocationAcquired(location);
                } else {
                    locationProviderDelegate.onUnableLocationAcquire();
                }
            }
            cleanup();
        }

        public void stop() {
            if (this.locationManager == null) {
                return;
            }
            Runnable runnable = this.locationQueryCancelRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            cleanup();
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* loaded from: classes.dex */
    public class DelayedMessageSendAfterRequest {
        public DelayedMessage delayedMessage;
        public MessageObject msgObj;
        public ArrayList<MessageObject> msgObjs;
        public String originalPath;
        public ArrayList<String> originalPaths;
        public Object parentObject;
        public ArrayList<Object> parentObjects;
        public TLObject request;
        public boolean scheduled;

        protected DelayedMessageSendAfterRequest() {
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* loaded from: classes.dex */
    public class DelayedMessage {
        public TLRPC$EncryptedChat encryptedChat;
        public HashMap<Object, Object> extraHashMap;
        public int finalGroupMessage;
        public long groupId;
        public String httpLocation;
        public ArrayList<String> httpLocations;
        public ArrayList<TLRPC$InputMedia> inputMedias;
        public TLRPC$InputMedia inputUploadMedia;
        public TLObject locationParent;
        public ArrayList<TLRPC$PhotoSize> locations;
        public ArrayList<MessageObject> messageObjects;
        public ArrayList<TLRPC$Message> messages;
        public MessageObject obj;
        public String originalPath;
        public ArrayList<String> originalPaths;
        public Object parentObject;
        public ArrayList<Object> parentObjects;
        public long peer;
        public boolean performMediaUpload;
        public TLRPC$PhotoSize photoSize;
        ArrayList<DelayedMessageSendAfterRequest> requests;
        public boolean retriedToSend;
        public boolean scheduled;
        public TLObject sendEncryptedRequest;
        public TLObject sendRequest;
        public int topMessageId;
        public int type;
        public VideoEditedInfo videoEditedInfo;
        public ArrayList<VideoEditedInfo> videoEditedInfos;

        public DelayedMessage(long j) {
            this.peer = j;
        }

        public void initForGroup(long j) {
            this.type = 4;
            this.groupId = j;
            this.messageObjects = new ArrayList<>();
            this.messages = new ArrayList<>();
            this.inputMedias = new ArrayList<>();
            this.originalPaths = new ArrayList<>();
            this.parentObjects = new ArrayList<>();
            this.extraHashMap = new HashMap<>();
            this.locations = new ArrayList<>();
            this.httpLocations = new ArrayList<>();
            this.videoEditedInfos = new ArrayList<>();
        }

        public void addDelayedRequest(TLObject tLObject, MessageObject messageObject, String str, Object obj, DelayedMessage delayedMessage, boolean z) {
            DelayedMessageSendAfterRequest delayedMessageSendAfterRequest = new DelayedMessageSendAfterRequest();
            delayedMessageSendAfterRequest.request = tLObject;
            delayedMessageSendAfterRequest.msgObj = messageObject;
            delayedMessageSendAfterRequest.originalPath = str;
            delayedMessageSendAfterRequest.delayedMessage = delayedMessage;
            delayedMessageSendAfterRequest.parentObject = obj;
            delayedMessageSendAfterRequest.scheduled = z;
            if (this.requests == null) {
                this.requests = new ArrayList<>();
            }
            this.requests.add(delayedMessageSendAfterRequest);
        }

        public void addDelayedRequest(TLObject tLObject, ArrayList<MessageObject> arrayList, ArrayList<String> arrayList2, ArrayList<Object> arrayList3, DelayedMessage delayedMessage, boolean z) {
            DelayedMessageSendAfterRequest delayedMessageSendAfterRequest = new DelayedMessageSendAfterRequest();
            delayedMessageSendAfterRequest.request = tLObject;
            delayedMessageSendAfterRequest.msgObjs = arrayList;
            delayedMessageSendAfterRequest.originalPaths = arrayList2;
            delayedMessageSendAfterRequest.delayedMessage = delayedMessage;
            delayedMessageSendAfterRequest.parentObjects = arrayList3;
            delayedMessageSendAfterRequest.scheduled = z;
            if (this.requests == null) {
                this.requests = new ArrayList<>();
            }
            this.requests.add(delayedMessageSendAfterRequest);
        }

        public void sendDelayedRequests() {
            ArrayList<DelayedMessageSendAfterRequest> arrayList = this.requests;
            if (arrayList != null) {
                int i = this.type;
                if (i == 4 || i == 0) {
                    int size = arrayList.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        DelayedMessageSendAfterRequest delayedMessageSendAfterRequest = this.requests.get(i2);
                        TLObject tLObject = delayedMessageSendAfterRequest.request;
                        if (tLObject instanceof TLRPC$TL_messages_sendEncryptedMultiMedia) {
                            SendMessagesHelper.this.getSecretChatHelper().performSendEncryptedRequest((TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessageSendAfterRequest.request, this);
                        } else if (!(tLObject instanceof TLRPC$TL_messages_sendMultiMedia)) {
                            SendMessagesHelper.this.performSendMessageRequest(tLObject, delayedMessageSendAfterRequest.msgObj, delayedMessageSendAfterRequest.originalPath, delayedMessageSendAfterRequest.delayedMessage, delayedMessageSendAfterRequest.parentObject, null, delayedMessageSendAfterRequest.scheduled);
                        } else {
                            SendMessagesHelper.this.performSendMessageRequestMulti((TLRPC$TL_messages_sendMultiMedia) tLObject, delayedMessageSendAfterRequest.msgObjs, delayedMessageSendAfterRequest.originalPaths, delayedMessageSendAfterRequest.parentObjects, delayedMessageSendAfterRequest.delayedMessage, delayedMessageSendAfterRequest.scheduled);
                        }
                    }
                    this.requests = null;
                }
            }
        }

        public void markAsError() {
            if (this.type == 4) {
                for (int i = 0; i < this.messageObjects.size(); i++) {
                    MessageObject messageObject = this.messageObjects.get(i);
                    SendMessagesHelper.this.getMessagesStorage().markMessageAsSendError(messageObject.messageOwner, messageObject.scheduled);
                    messageObject.messageOwner.send_state = 2;
                    SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(messageObject.getId()));
                    SendMessagesHelper.this.processSentMessage(messageObject.getId());
                    SendMessagesHelper.this.removeFromUploadingMessages(messageObject.getId(), this.scheduled);
                }
                HashMap hashMap = SendMessagesHelper.this.delayedMessages;
                hashMap.remove("group_" + this.groupId);
            } else {
                MessagesStorage messagesStorage = SendMessagesHelper.this.getMessagesStorage();
                MessageObject messageObject2 = this.obj;
                messagesStorage.markMessageAsSendError(messageObject2.messageOwner, messageObject2.scheduled);
                this.obj.messageOwner.send_state = 2;
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(this.obj.getId()));
                SendMessagesHelper.this.processSentMessage(this.obj.getId());
                SendMessagesHelper.this.removeFromUploadingMessages(this.obj.getId(), this.scheduled);
            }
            sendDelayedRequests();
        }
    }

    public static SendMessagesHelper getInstance(int i) {
        SendMessagesHelper sendMessagesHelper = Instance[i];
        if (sendMessagesHelper == null) {
            synchronized (SendMessagesHelper.class) {
                sendMessagesHelper = Instance[i];
                if (sendMessagesHelper == null) {
                    SendMessagesHelper[] sendMessagesHelperArr = Instance;
                    SendMessagesHelper sendMessagesHelper2 = new SendMessagesHelper(i);
                    sendMessagesHelperArr[i] = sendMessagesHelper2;
                    sendMessagesHelper = sendMessagesHelper2;
                }
            }
        }
        return sendMessagesHelper;
    }

    public SendMessagesHelper(int i) {
        super(i);
        this.delayedMessages = new HashMap<>();
        this.unsentMessages = new SparseArray<>();
        this.sendingMessages = new SparseArray<>();
        this.editingMessages = new SparseArray<>();
        this.uploadMessages = new SparseArray<>();
        this.sendingMessagesIdDialogs = new LongSparseArray<>();
        this.uploadingMessagesIdDialogs = new LongSparseArray<>();
        this.waitingForLocation = new HashMap<>();
        this.waitingForCallback = new HashMap<>();
        this.waitingForCallbackMap = new HashMap<>();
        this.waitingForVote = new HashMap<>();
        this.voteSendTime = new LongSparseArray<>();
        this.importingHistoryFiles = new HashMap<>();
        this.importingHistoryMap = new LongSparseArray<>();
        this.importingStickersFiles = new HashMap<>();
        this.importingStickersMap = new HashMap<>();
        this.locationProvider = new LocationProvider(new LocationProvider.LocationProviderDelegate() { // from class: org.telegram.messenger.SendMessagesHelper.1
            @Override // org.telegram.messenger.SendMessagesHelper.LocationProvider.LocationProviderDelegate
            public void onLocationAcquired(Location location) {
                SendMessagesHelper.this.sendLocation(location);
                SendMessagesHelper.this.waitingForLocation.clear();
            }

            @Override // org.telegram.messenger.SendMessagesHelper.LocationProvider.LocationProviderDelegate
            public void onUnableLocationAcquire() {
                SendMessagesHelper.this.getNotificationCenter().postNotificationName(NotificationCenter.wasUnableToFindCurrentLocation, new HashMap(SendMessagesHelper.this.waitingForLocation));
                SendMessagesHelper.this.waitingForLocation.clear();
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$new$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        getNotificationCenter().addObserver(this, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(this, NotificationCenter.fileUploadProgressChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(this, NotificationCenter.filePreparingStarted);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.filePreparingFailed);
        getNotificationCenter().addObserver(this, NotificationCenter.httpFileDidFailedLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.httpFileDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(this, NotificationCenter.fileLoadFailed);
    }

    public void cleanup() {
        this.delayedMessages.clear();
        this.unsentMessages.clear();
        this.sendingMessages.clear();
        this.editingMessages.clear();
        this.sendingMessagesIdDialogs.clear();
        this.uploadMessages.clear();
        this.uploadingMessagesIdDialogs.clear();
        this.waitingForLocation.clear();
        this.waitingForCallback.clear();
        this.waitingForVote.clear();
        this.importingHistoryFiles.clear();
        this.importingHistoryMap.clear();
        this.importingStickersFiles.clear();
        this.importingStickersMap.clear();
        this.locationProvider.stop();
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        String str;
        ArrayList<DelayedMessage> arrayList;
        char c;
        final MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC$InputMedia tLRPC$InputMedia;
        ArrayList<DelayedMessage> arrayList2;
        TLRPC$InputFile tLRPC$InputFile;
        String str2;
        TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile;
        TLObject tLObject;
        TLRPC$TL_decryptedMessage tLRPC$TL_decryptedMessage;
        ArrayList<DelayedMessage> arrayList3;
        TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile2;
        int i3;
        String str3;
        int i4;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLRPC$PhotoSize tLRPC$PhotoSize2;
        int i5 = 0;
        boolean z = true;
        if (i == NotificationCenter.fileUploadProgressChanged) {
            String str4 = (String) objArr[0];
            ImportingHistory importingHistory = this.importingHistoryFiles.get(str4);
            if (importingHistory != null) {
                Long l = (Long) objArr[1];
                importingHistory.addUploadProgress(str4, l.longValue(), ((float) l.longValue()) / ((float) ((Long) objArr[2]).longValue()));
            }
            ImportingStickers importingStickers = this.importingStickersFiles.get(str4);
            if (importingStickers != null) {
                Long l2 = (Long) objArr[1];
                importingStickers.addUploadProgress(str4, l2.longValue(), ((float) l2.longValue()) / ((float) ((Long) objArr[2]).longValue()));
            }
        } else if (i == NotificationCenter.fileUploaded) {
            String str5 = (String) objArr[0];
            TLRPC$InputFile tLRPC$InputFile2 = (TLRPC$InputFile) objArr[1];
            TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile3 = (TLRPC$InputEncryptedFile) objArr[2];
            ImportingHistory importingHistory2 = this.importingHistoryFiles.get(str5);
            if (importingHistory2 != null) {
                if (str5.equals(importingHistory2.historyPath)) {
                    importingHistory2.initImport(tLRPC$InputFile2);
                } else {
                    importingHistory2.onMediaImport(str5, ((Long) objArr[5]).longValue(), tLRPC$InputFile2);
                }
            }
            ImportingStickers importingStickers2 = this.importingStickersFiles.get(str5);
            if (importingStickers2 != null) {
                importingStickers2.onMediaImport(str5, ((Long) objArr[5]).longValue(), tLRPC$InputFile2);
            }
            ArrayList<DelayedMessage> arrayList4 = this.delayedMessages.get(str5);
            if (arrayList4 != null) {
                while (i5 < arrayList4.size()) {
                    DelayedMessage delayedMessage = arrayList4.get(i5);
                    TLObject tLObject2 = delayedMessage.sendRequest;
                    if (tLObject2 instanceof TLRPC$TL_messages_sendMedia) {
                        tLRPC$InputMedia = ((TLRPC$TL_messages_sendMedia) tLObject2).media;
                    } else if (tLObject2 instanceof TLRPC$TL_messages_editMessage) {
                        tLRPC$InputMedia = ((TLRPC$TL_messages_editMessage) tLObject2).media;
                    } else {
                        tLRPC$InputMedia = tLObject2 instanceof TLRPC$TL_messages_sendMultiMedia ? (TLRPC$InputMedia) delayedMessage.extraHashMap.get(str5) : null;
                    }
                    if (tLRPC$InputFile2 == null || tLRPC$InputMedia == null) {
                        arrayList2 = arrayList4;
                        TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile4 = tLRPC$InputEncryptedFile3;
                        tLRPC$InputFile = tLRPC$InputFile2;
                        str2 = str5;
                        tLRPC$InputEncryptedFile = tLRPC$InputEncryptedFile4;
                        if (tLRPC$InputEncryptedFile != null && (tLObject = delayedMessage.sendEncryptedRequest) != null) {
                            if (delayedMessage.type == 4) {
                                TLRPC$TL_messages_sendEncryptedMultiMedia tLRPC$TL_messages_sendEncryptedMultiMedia = (TLRPC$TL_messages_sendEncryptedMultiMedia) tLObject;
                                TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile5 = (TLRPC$InputEncryptedFile) delayedMessage.extraHashMap.get(str2);
                                int indexOf = tLRPC$TL_messages_sendEncryptedMultiMedia.files.indexOf(tLRPC$InputEncryptedFile5);
                                if (indexOf >= 0) {
                                    tLRPC$TL_messages_sendEncryptedMultiMedia.files.set(indexOf, tLRPC$InputEncryptedFile);
                                    if (tLRPC$InputEncryptedFile5.id == 1) {
                                        MessageObject messageObject3 = (MessageObject) delayedMessage.extraHashMap.get(str2 + "_i");
                                        delayedMessage.photoSize = (TLRPC$PhotoSize) delayedMessage.extraHashMap.get(str2 + "_t");
                                        stopVideoService(delayedMessage.messageObjects.get(indexOf).messageOwner.attachPath);
                                    }
                                    tLRPC$TL_decryptedMessage = tLRPC$TL_messages_sendEncryptedMultiMedia.messages.get(indexOf);
                                } else {
                                    tLRPC$TL_decryptedMessage = null;
                                }
                            } else {
                                tLRPC$TL_decryptedMessage = (TLRPC$TL_decryptedMessage) tLObject;
                            }
                            if (tLRPC$TL_decryptedMessage != null) {
                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia = tLRPC$TL_decryptedMessage.media;
                                if ((tLRPC$DecryptedMessageMedia instanceof TLRPC$TL_decryptedMessageMediaVideo) || (tLRPC$DecryptedMessageMedia instanceof TLRPC$TL_decryptedMessageMediaPhoto) || (tLRPC$DecryptedMessageMedia instanceof TLRPC$TL_decryptedMessageMediaDocument)) {
                                    tLRPC$TL_decryptedMessage.media.size = ((Long) objArr[5]).longValue();
                                }
                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia2 = tLRPC$TL_decryptedMessage.media;
                                tLRPC$DecryptedMessageMedia2.key = (byte[]) objArr[3];
                                tLRPC$DecryptedMessageMedia2.iv = (byte[]) objArr[4];
                                if (delayedMessage.type == 4) {
                                    uploadMultiMedia(delayedMessage, null, tLRPC$InputEncryptedFile, str2);
                                } else {
                                    SecretChatHelper secretChatHelper = getSecretChatHelper();
                                    MessageObject messageObject4 = delayedMessage.obj;
                                    secretChatHelper.performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, delayedMessage.encryptedChat, tLRPC$InputEncryptedFile, delayedMessage.originalPath, messageObject4);
                                }
                            }
                            arrayList2.remove(i5);
                            i5--;
                        }
                    } else {
                        int i6 = delayedMessage.type;
                        if (i6 == 0) {
                            tLRPC$InputMedia.file = tLRPC$InputFile2;
                            arrayList3 = arrayList4;
                            tLRPC$InputEncryptedFile2 = tLRPC$InputEncryptedFile3;
                            i3 = i5;
                            tLRPC$InputFile = tLRPC$InputFile2;
                            str3 = str5;
                            performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, delayedMessage, true, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                        } else {
                            arrayList3 = arrayList4;
                            tLRPC$InputEncryptedFile2 = tLRPC$InputEncryptedFile3;
                            i3 = i5;
                            tLRPC$InputFile = tLRPC$InputFile2;
                            str3 = str5;
                            if (i6 == z) {
                                if (tLRPC$InputMedia.file == null) {
                                    tLRPC$InputMedia.file = tLRPC$InputFile;
                                    if (tLRPC$InputMedia.thumb == null && (tLRPC$PhotoSize2 = delayedMessage.photoSize) != null && tLRPC$PhotoSize2.location != null) {
                                        performSendDelayedMessage(delayedMessage);
                                    } else {
                                        performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                                    }
                                } else {
                                    tLRPC$InputMedia.thumb = tLRPC$InputFile;
                                    tLRPC$InputMedia.flags |= 4;
                                    performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                                }
                            } else if (i6 == 2) {
                                if (tLRPC$InputMedia.file == null) {
                                    tLRPC$InputMedia.file = tLRPC$InputFile;
                                    if (tLRPC$InputMedia.thumb == null && (tLRPC$PhotoSize = delayedMessage.photoSize) != null && tLRPC$PhotoSize.location != null) {
                                        performSendDelayedMessage(delayedMessage);
                                    } else {
                                        performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                                    }
                                } else {
                                    tLRPC$InputMedia.thumb = tLRPC$InputFile;
                                    tLRPC$InputMedia.flags |= 4;
                                    performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                                }
                            } else if (i6 == 3) {
                                tLRPC$InputMedia.file = tLRPC$InputFile;
                                performSendMessageRequest(delayedMessage.sendRequest, delayedMessage.obj, delayedMessage.originalPath, null, delayedMessage.parentObject, null, delayedMessage.scheduled);
                            } else {
                                if (i6 != 4) {
                                    str2 = str3;
                                } else if (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaUploadedDocument) {
                                    if (tLRPC$InputMedia.file == null) {
                                        tLRPC$InputMedia.file = tLRPC$InputFile;
                                        HashMap<Object, Object> hashMap = delayedMessage.extraHashMap;
                                        StringBuilder sb = new StringBuilder();
                                        str2 = str3;
                                        sb.append(str2);
                                        sb.append("_i");
                                        int indexOf2 = delayedMessage.messageObjects.indexOf((MessageObject) hashMap.get(sb.toString()));
                                        if (indexOf2 >= 0) {
                                            stopVideoService(delayedMessage.messageObjects.get(indexOf2).messageOwner.attachPath);
                                        }
                                        TLRPC$PhotoSize tLRPC$PhotoSize3 = (TLRPC$PhotoSize) delayedMessage.extraHashMap.get(str2 + "_t");
                                        delayedMessage.photoSize = tLRPC$PhotoSize3;
                                        if (tLRPC$InputMedia.thumb == null && tLRPC$PhotoSize3 != null && tLRPC$PhotoSize3.location != null) {
                                            delayedMessage.performMediaUpload = z;
                                            performSendDelayedMessage(delayedMessage, indexOf2);
                                        } else {
                                            uploadMultiMedia(delayedMessage, tLRPC$InputMedia, null, str2);
                                        }
                                    } else {
                                        str2 = str3;
                                        tLRPC$InputMedia.thumb = tLRPC$InputFile;
                                        tLRPC$InputMedia.flags |= 4;
                                        uploadMultiMedia(delayedMessage, tLRPC$InputMedia, null, (String) delayedMessage.extraHashMap.get(str2 + "_o"));
                                    }
                                } else {
                                    str2 = str3;
                                    tLRPC$InputMedia.file = tLRPC$InputFile;
                                    uploadMultiMedia(delayedMessage, tLRPC$InputMedia, null, str2);
                                }
                                arrayList2 = arrayList3;
                                i4 = i3;
                                arrayList2.remove(i4);
                                i5 = i4 - 1;
                                tLRPC$InputEncryptedFile = tLRPC$InputEncryptedFile2;
                            }
                        }
                        arrayList2 = arrayList3;
                        i4 = i3;
                        str2 = str3;
                        arrayList2.remove(i4);
                        i5 = i4 - 1;
                        tLRPC$InputEncryptedFile = tLRPC$InputEncryptedFile2;
                    }
                    i5++;
                    arrayList4 = arrayList2;
                    str5 = str2;
                    tLRPC$InputFile2 = tLRPC$InputFile;
                    z = true;
                    tLRPC$InputEncryptedFile3 = tLRPC$InputEncryptedFile;
                }
                String str6 = str5;
                if (arrayList4.isEmpty()) {
                    this.delayedMessages.remove(str6);
                }
            }
        } else if (i == NotificationCenter.fileUploadFailed) {
            String str7 = (String) objArr[0];
            boolean booleanValue = ((Boolean) objArr[1]).booleanValue();
            ImportingHistory importingHistory3 = this.importingHistoryFiles.get(str7);
            if (importingHistory3 != null) {
                importingHistory3.onFileFailedToUpload(str7);
            }
            ImportingStickers importingStickers3 = this.importingStickersFiles.get(str7);
            if (importingStickers3 != null) {
                importingStickers3.onFileFailedToUpload(str7);
            }
            ArrayList<DelayedMessage> arrayList5 = this.delayedMessages.get(str7);
            if (arrayList5 != null) {
                while (i5 < arrayList5.size()) {
                    DelayedMessage delayedMessage2 = arrayList5.get(i5);
                    if ((booleanValue && delayedMessage2.sendEncryptedRequest != null) || (!booleanValue && delayedMessage2.sendRequest != null)) {
                        delayedMessage2.markAsError();
                        arrayList5.remove(i5);
                        i5--;
                    }
                    i5++;
                }
                if (arrayList5.isEmpty()) {
                    this.delayedMessages.remove(str7);
                }
            }
        } else if (i == NotificationCenter.filePreparingStarted) {
            MessageObject messageObject5 = (MessageObject) objArr[0];
            if (messageObject5.getId() == 0) {
                return;
            }
            String str8 = (String) objArr[1];
            ArrayList<DelayedMessage> arrayList6 = this.delayedMessages.get(messageObject5.messageOwner.attachPath);
            if (arrayList6 != null) {
                while (true) {
                    if (i5 >= arrayList6.size()) {
                        break;
                    }
                    DelayedMessage delayedMessage3 = arrayList6.get(i5);
                    if (delayedMessage3.type == 4) {
                        int indexOf3 = delayedMessage3.messageObjects.indexOf(messageObject5);
                        delayedMessage3.photoSize = (TLRPC$PhotoSize) delayedMessage3.extraHashMap.get(messageObject5.messageOwner.attachPath + "_t");
                        delayedMessage3.performMediaUpload = true;
                        performSendDelayedMessage(delayedMessage3, indexOf3);
                        arrayList6.remove(i5);
                        break;
                    } else if (delayedMessage3.obj == messageObject5) {
                        delayedMessage3.videoEditedInfo = null;
                        performSendDelayedMessage(delayedMessage3);
                        arrayList6.remove(i5);
                        break;
                    } else {
                        i5++;
                    }
                }
                if (arrayList6.isEmpty()) {
                    this.delayedMessages.remove(messageObject5.messageOwner.attachPath);
                }
            }
        } else {
            MessageObject messageObject6 = null;
            if (i == NotificationCenter.fileNewChunkAvailable) {
                MessageObject messageObject7 = (MessageObject) objArr[0];
                if (messageObject7.getId() == 0) {
                    return;
                }
                long longValue = ((Long) objArr[2]).longValue();
                long longValue2 = ((Long) objArr[3]).longValue();
                getFileLoader().checkUploadNewDataAvailable((String) objArr[1], DialogObject.isEncryptedDialog(messageObject7.getDialogId()), longValue, longValue2);
                if (longValue2 != 0) {
                    stopVideoService(messageObject7.messageOwner.attachPath);
                    ArrayList<DelayedMessage> arrayList7 = this.delayedMessages.get(messageObject7.messageOwner.attachPath);
                    if (arrayList7 != null) {
                        for (int i7 = 0; i7 < arrayList7.size(); i7++) {
                            DelayedMessage delayedMessage4 = arrayList7.get(i7);
                            if (delayedMessage4.type == 4) {
                                int i8 = 0;
                                while (true) {
                                    if (i8 >= delayedMessage4.messageObjects.size()) {
                                        break;
                                    }
                                    MessageObject messageObject8 = delayedMessage4.messageObjects.get(i8);
                                    if (messageObject8 == messageObject7) {
                                        delayedMessage4.obj.shouldRemoveVideoEditedInfo = true;
                                        messageObject8.messageOwner.params.remove("ve");
                                        messageObject8.messageOwner.media.document.size = longValue2;
                                        ArrayList<TLRPC$Message> arrayList8 = new ArrayList<>();
                                        arrayList8.add(messageObject8.messageOwner);
                                        getMessagesStorage().putMessages(arrayList8, false, true, false, 0, messageObject8.scheduled, 0);
                                        break;
                                    }
                                    i8++;
                                }
                            } else {
                                MessageObject messageObject9 = delayedMessage4.obj;
                                if (messageObject9 == messageObject7) {
                                    messageObject9.shouldRemoveVideoEditedInfo = true;
                                    messageObject9.messageOwner.params.remove("ve");
                                    delayedMessage4.obj.messageOwner.media.document.size = longValue2;
                                    ArrayList<TLRPC$Message> arrayList9 = new ArrayList<>();
                                    arrayList9.add(delayedMessage4.obj.messageOwner);
                                    getMessagesStorage().putMessages(arrayList9, false, true, false, 0, delayedMessage4.obj.scheduled, 0);
                                    return;
                                }
                            }
                        }
                    }
                }
            } else if (i == NotificationCenter.filePreparingFailed) {
                MessageObject messageObject10 = (MessageObject) objArr[0];
                if (messageObject10.getId() == 0) {
                    return;
                }
                String str9 = (String) objArr[1];
                stopVideoService(messageObject10.messageOwner.attachPath);
                ArrayList<DelayedMessage> arrayList10 = this.delayedMessages.get(str9);
                if (arrayList10 != null) {
                    int i9 = 0;
                    while (i9 < arrayList10.size()) {
                        DelayedMessage delayedMessage5 = arrayList10.get(i9);
                        if (delayedMessage5.type == 4) {
                            for (int i10 = 0; i10 < delayedMessage5.messages.size(); i10++) {
                                if (delayedMessage5.messageObjects.get(i10) == messageObject10) {
                                    delayedMessage5.markAsError();
                                    arrayList10.remove(i9);
                                    i9--;
                                    break;
                                }
                            }
                            i9++;
                        } else if (delayedMessage5.obj == messageObject10) {
                            delayedMessage5.markAsError();
                            arrayList10.remove(i9);
                            i9--;
                            break;
                            i9++;
                        } else {
                            i9++;
                        }
                    }
                    if (arrayList10.isEmpty()) {
                        this.delayedMessages.remove(str9);
                    }
                }
            } else if (i == NotificationCenter.httpFileDidLoad) {
                final String str10 = (String) objArr[0];
                ArrayList<DelayedMessage> arrayList11 = this.delayedMessages.get(str10);
                if (arrayList11 != null) {
                    int i11 = 0;
                    while (i11 < arrayList11.size()) {
                        final DelayedMessage delayedMessage6 = arrayList11.get(i11);
                        int i12 = delayedMessage6.type;
                        if (i12 == 0) {
                            messageObject = delayedMessage6.obj;
                            c = 0;
                        } else {
                            if (i12 == 2) {
                                messageObject2 = delayedMessage6.obj;
                            } else if (i12 == 4) {
                                messageObject2 = (MessageObject) delayedMessage6.extraHashMap.get(str10);
                                if (messageObject2.getDocument() == null) {
                                    messageObject = messageObject2;
                                    c = 0;
                                }
                            } else {
                                c = 65535;
                                messageObject = messageObject6;
                            }
                            messageObject = messageObject2;
                            c = 1;
                        }
                        if (c == 0) {
                            final File file = new File(FileLoader.getDirectory(4), Utilities.MD5(str10) + "." + ImageLoader.getHttpUrlExtension(str10, "file"));
                            Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda25
                                @Override // java.lang.Runnable
                                public final void run() {
                                    SendMessagesHelper.this.lambda$didReceivedNotification$2(file, messageObject, delayedMessage6, str10);
                                }
                            });
                        } else if (c == 1) {
                            final File file2 = new File(FileLoader.getDirectory(4), Utilities.MD5(str10) + ".gif");
                            Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda39
                                @Override // java.lang.Runnable
                                public final void run() {
                                    SendMessagesHelper.this.lambda$didReceivedNotification$4(delayedMessage6, file2, messageObject);
                                }
                            });
                            i11++;
                            messageObject6 = null;
                        }
                        i11++;
                        messageObject6 = null;
                    }
                    this.delayedMessages.remove(str10);
                }
            } else if (i == NotificationCenter.fileLoaded) {
                String str11 = (String) objArr[0];
                ArrayList<DelayedMessage> arrayList12 = this.delayedMessages.get(str11);
                if (arrayList12 != null) {
                    while (i5 < arrayList12.size()) {
                        performSendDelayedMessage(arrayList12.get(i5));
                        i5++;
                    }
                    this.delayedMessages.remove(str11);
                }
            } else if ((i == NotificationCenter.httpFileDidFailedLoad || i == NotificationCenter.fileLoadFailed) && (arrayList = this.delayedMessages.get((str = (String) objArr[0]))) != null) {
                while (i5 < arrayList.size()) {
                    arrayList.get(i5).markAsError();
                    i5++;
                }
                this.delayedMessages.remove(str);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$2(final File file, final MessageObject messageObject, final DelayedMessage delayedMessage, final String str) {
        final TLRPC$TL_photo generatePhotoSizes = generatePhotoSizes(file.toString(), null);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$didReceivedNotification$1(generatePhotoSizes, messageObject, file, delayedMessage, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$1(TLRPC$TL_photo tLRPC$TL_photo, MessageObject messageObject, File file, DelayedMessage delayedMessage, String str) {
        if (tLRPC$TL_photo != null) {
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            tLRPC$Message.media.photo = tLRPC$TL_photo;
            tLRPC$Message.attachPath = file.toString();
            ArrayList<TLRPC$Message> arrayList = new ArrayList<>();
            arrayList.add(messageObject.messageOwner);
            getMessagesStorage().putMessages(arrayList, false, true, false, 0, messageObject.scheduled, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia, messageObject.messageOwner);
            ArrayList<TLRPC$PhotoSize> arrayList2 = tLRPC$TL_photo.sizes;
            delayedMessage.photoSize = arrayList2.get(arrayList2.size() - 1);
            delayedMessage.locationParent = tLRPC$TL_photo;
            delayedMessage.httpLocation = null;
            if (delayedMessage.type == 4) {
                delayedMessage.performMediaUpload = true;
                performSendDelayedMessage(delayedMessage, delayedMessage.messageObjects.indexOf(messageObject));
                return;
            }
            performSendDelayedMessage(delayedMessage);
            return;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.e("can't load image " + str + " to file " + file.toString());
        }
        delayedMessage.markAsError();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$4(final DelayedMessage delayedMessage, final File file, final MessageObject messageObject) {
        final TLRPC$Document document = delayedMessage.obj.getDocument();
        if (document.thumbs.isEmpty() || (document.thumbs.get(0).location instanceof TLRPC$TL_fileLocationUnavailable)) {
            try {
                Bitmap loadBitmap = ImageLoader.loadBitmap(file.getAbsolutePath(), null, 90.0f, 90.0f, true);
                if (loadBitmap != null) {
                    document.thumbs.clear();
                    document.thumbs.add(ImageLoader.scaleAndSaveImage(loadBitmap, 90.0f, 90.0f, 55, delayedMessage.sendEncryptedRequest != null));
                    loadBitmap.recycle();
                }
            } catch (Exception e) {
                document.thumbs.clear();
                FileLog.e(e);
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda40
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$didReceivedNotification$3(delayedMessage, file, document, messageObject);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$3(DelayedMessage delayedMessage, File file, TLRPC$Document tLRPC$Document, MessageObject messageObject) {
        delayedMessage.httpLocation = null;
        delayedMessage.obj.messageOwner.attachPath = file.toString();
        if (!tLRPC$Document.thumbs.isEmpty()) {
            TLRPC$PhotoSize tLRPC$PhotoSize = tLRPC$Document.thumbs.get(0);
            if (!(tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize)) {
                delayedMessage.photoSize = tLRPC$PhotoSize;
                delayedMessage.locationParent = tLRPC$Document;
            }
        }
        ArrayList<TLRPC$Message> arrayList = new ArrayList<>();
        arrayList.add(messageObject.messageOwner);
        getMessagesStorage().putMessages(arrayList, false, true, false, 0, messageObject.scheduled, 0);
        delayedMessage.performMediaUpload = true;
        performSendDelayedMessage(delayedMessage);
        getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia, delayedMessage.obj.messageOwner);
    }

    private void revertEditingMessageObject(MessageObject messageObject) {
        messageObject.cancelEditing = true;
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        tLRPC$Message.media = messageObject.previousMedia;
        tLRPC$Message.message = messageObject.previousMessage;
        ArrayList<TLRPC$MessageEntity> arrayList = messageObject.previousMessageEntities;
        tLRPC$Message.entities = arrayList;
        tLRPC$Message.attachPath = messageObject.previousAttachPath;
        tLRPC$Message.send_state = 0;
        if (arrayList != null) {
            tLRPC$Message.flags |= 128;
        } else {
            tLRPC$Message.flags &= -129;
        }
        messageObject.previousMedia = null;
        messageObject.previousMessage = null;
        messageObject.previousMessageEntities = null;
        messageObject.previousAttachPath = null;
        messageObject.videoEditedInfo = null;
        messageObject.type = -1;
        messageObject.setType();
        messageObject.caption = null;
        if (messageObject.type != 0) {
            messageObject.generateCaption();
        } else {
            messageObject.resetLayout();
        }
        ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
        arrayList2.add(messageObject.messageOwner);
        getMessagesStorage().putMessages(arrayList2, false, true, false, 0, messageObject.scheduled, 0);
        ArrayList arrayList3 = new ArrayList();
        arrayList3.add(messageObject);
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList3);
    }

    public void cancelSendingMessage(MessageObject messageObject) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(messageObject);
        cancelSendingMessage(arrayList);
    }

    public void cancelSendingMessage(ArrayList<MessageObject> arrayList) {
        boolean z;
        long j;
        ArrayList arrayList2 = new ArrayList();
        ArrayList arrayList3 = new ArrayList();
        ArrayList<Integer> arrayList4 = new ArrayList<>();
        long j2 = 0;
        int i = 0;
        boolean z2 = false;
        boolean z3 = false;
        while (i < arrayList.size()) {
            MessageObject messageObject = arrayList.get(i);
            if (messageObject.scheduled) {
                z3 = true;
            }
            long dialogId = messageObject.getDialogId();
            arrayList4.add(Integer.valueOf(messageObject.getId()));
            TLRPC$Message removeFromSendingMessages = removeFromSendingMessages(messageObject.getId(), messageObject.scheduled);
            if (removeFromSendingMessages != null) {
                getConnectionsManager().cancelRequest(removeFromSendingMessages.reqId, true);
            }
            for (Map.Entry<String, ArrayList<DelayedMessage>> entry : this.delayedMessages.entrySet()) {
                ArrayList<DelayedMessage> value = entry.getValue();
                int i2 = 0;
                while (true) {
                    if (i2 >= value.size()) {
                        z = z2;
                        break;
                    }
                    DelayedMessage delayedMessage = value.get(i2);
                    z = z2;
                    if (delayedMessage.type == 4) {
                        int i3 = -1;
                        MessageObject messageObject2 = null;
                        int i4 = 0;
                        while (true) {
                            if (i4 >= delayedMessage.messageObjects.size()) {
                                break;
                            }
                            messageObject2 = delayedMessage.messageObjects.get(i4);
                            if (messageObject2.getId() == messageObject.getId()) {
                                removeFromUploadingMessages(messageObject.getId(), messageObject.scheduled);
                                i3 = i4;
                                break;
                            }
                            i4++;
                        }
                        if (i3 >= 0) {
                            delayedMessage.messageObjects.remove(i3);
                            delayedMessage.messages.remove(i3);
                            delayedMessage.originalPaths.remove(i3);
                            if (!delayedMessage.parentObjects.isEmpty()) {
                                delayedMessage.parentObjects.remove(i3);
                            }
                            TLObject tLObject = delayedMessage.sendRequest;
                            if (tLObject != null) {
                                ((TLRPC$TL_messages_sendMultiMedia) tLObject).multi_media.remove(i3);
                            } else {
                                TLRPC$TL_messages_sendEncryptedMultiMedia tLRPC$TL_messages_sendEncryptedMultiMedia = (TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest;
                                tLRPC$TL_messages_sendEncryptedMultiMedia.messages.remove(i3);
                                tLRPC$TL_messages_sendEncryptedMultiMedia.files.remove(i3);
                            }
                            MediaController.getInstance().cancelVideoConvert(messageObject);
                            String str = (String) delayedMessage.extraHashMap.get(messageObject2);
                            if (str != null) {
                                arrayList2.add(str);
                            }
                            if (delayedMessage.messageObjects.isEmpty()) {
                                delayedMessage.sendDelayedRequests();
                            } else {
                                if (delayedMessage.finalGroupMessage == messageObject.getId()) {
                                    ArrayList<MessageObject> arrayList5 = delayedMessage.messageObjects;
                                    MessageObject messageObject3 = arrayList5.get(arrayList5.size() - 1);
                                    delayedMessage.finalGroupMessage = messageObject3.getId();
                                    messageObject3.messageOwner.params.put("final", "1");
                                    TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
                                    tLRPC$TL_messages_messages.messages.add(messageObject3.messageOwner);
                                    j = dialogId;
                                    getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, delayedMessage.peer, -2, 0, false, z3, 0);
                                } else {
                                    j = dialogId;
                                }
                                if (!arrayList3.contains(delayedMessage)) {
                                    arrayList3.add(delayedMessage);
                                }
                            }
                        }
                    } else {
                        j = dialogId;
                        if (delayedMessage.obj.getId() == messageObject.getId()) {
                            removeFromUploadingMessages(messageObject.getId(), messageObject.scheduled);
                            value.remove(i2);
                            delayedMessage.sendDelayedRequests();
                            MediaController.getInstance().cancelVideoConvert(delayedMessage.obj);
                            if (value.size() == 0) {
                                arrayList2.add(entry.getKey());
                                if (delayedMessage.sendEncryptedRequest != null) {
                                    z2 = true;
                                }
                            }
                        } else {
                            i2++;
                            z2 = z;
                            dialogId = j;
                        }
                    }
                }
                j = dialogId;
                z2 = z;
                dialogId = j;
            }
            i++;
            j2 = dialogId;
        }
        for (int i5 = 0; i5 < arrayList2.size(); i5++) {
            String str2 = (String) arrayList2.get(i5);
            if (str2.startsWith("http")) {
                ImageLoader.getInstance().cancelLoadHttpFile(str2);
            } else {
                getFileLoader().cancelFileUpload(str2, z2);
            }
            stopVideoService(str2);
            this.delayedMessages.remove(str2);
        }
        int size = arrayList3.size();
        for (int i6 = 0; i6 < size; i6++) {
            sendReadyToSendGroup((DelayedMessage) arrayList3.get(i6), false, true);
        }
        if (arrayList.size() == 1 && arrayList.get(0).isEditing() && arrayList.get(0).previousMedia != null) {
            revertEditingMessageObject(arrayList.get(0));
        } else {
            getMessagesController().deleteMessages(arrayList4, null, null, j2, false, z3);
        }
    }

    public boolean retrySendMessage(MessageObject messageObject, boolean z) {
        if (messageObject.getId() >= 0) {
            if (messageObject.isEditing()) {
                editMessage(messageObject, null, null, null, null, null, true, messageObject.hasMediaSpoilers(), messageObject);
            }
            return false;
        }
        TLRPC$MessageAction tLRPC$MessageAction = messageObject.messageOwner.action;
        if (tLRPC$MessageAction instanceof TLRPC$TL_messageEncryptedAction) {
            TLRPC$EncryptedChat encryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(messageObject.getDialogId())));
            if (encryptedChat == null) {
                getMessagesStorage().markMessageAsSendError(messageObject.messageOwner, messageObject.scheduled);
                messageObject.messageOwner.send_state = 2;
                getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(messageObject.getId()));
                processSentMessage(messageObject.getId());
                return false;
            }
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            if (tLRPC$Message.random_id == 0) {
                tLRPC$Message.random_id = getNextRandomId();
            }
            TLRPC$DecryptedMessageAction tLRPC$DecryptedMessageAction = messageObject.messageOwner.action.encryptedAction;
            if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionSetMessageTTL) {
                getSecretChatHelper().sendTTLMessage(encryptedChat, messageObject.messageOwner);
            } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionDeleteMessages) {
                getSecretChatHelper().sendMessagesDeleteMessage(encryptedChat, null, messageObject.messageOwner);
            } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionFlushHistory) {
                getSecretChatHelper().sendClearHistoryMessage(encryptedChat, messageObject.messageOwner);
            } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionNotifyLayer) {
                getSecretChatHelper().sendNotifyLayerMessage(encryptedChat, messageObject.messageOwner);
            } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionReadMessages) {
                getSecretChatHelper().sendMessagesReadMessage(encryptedChat, null, messageObject.messageOwner);
            } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionScreenshotMessages) {
                getSecretChatHelper().sendScreenshotMessage(encryptedChat, null, messageObject.messageOwner);
            } else if (!(tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionTyping)) {
                if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionResend) {
                    getSecretChatHelper().sendResendMessage(encryptedChat, 0, 0, messageObject.messageOwner);
                } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionCommitKey) {
                    getSecretChatHelper().sendCommitKeyMessage(encryptedChat, messageObject.messageOwner);
                } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionAbortKey) {
                    getSecretChatHelper().sendAbortKeyMessage(encryptedChat, messageObject.messageOwner, 0L);
                } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionRequestKey) {
                    getSecretChatHelper().sendRequestKeyMessage(encryptedChat, messageObject.messageOwner);
                } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionAcceptKey) {
                    getSecretChatHelper().sendAcceptKeyMessage(encryptedChat, messageObject.messageOwner);
                } else if (tLRPC$DecryptedMessageAction instanceof TLRPC$TL_decryptedMessageActionNoop) {
                    getSecretChatHelper().sendNoopMessage(encryptedChat, messageObject.messageOwner);
                }
            }
            return true;
        }
        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionScreenshotTaken) {
            sendScreenshotMessage(getMessagesController().getUser(Long.valueOf(messageObject.getDialogId())), messageObject.getReplyMsgId(), messageObject.messageOwner);
        }
        if (z) {
            this.unsentMessages.put(messageObject.getId(), messageObject);
        }
        sendMessage(messageObject);
        return true;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void processSentMessage(int i) {
        int size = this.unsentMessages.size();
        this.unsentMessages.remove(i);
        if (size == 0 || this.unsentMessages.size() != 0) {
            return;
        }
        checkUnsentMessages();
    }

    /* JADX WARN: Removed duplicated region for block: B:27:0x008d  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00af  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processForwardFromMyName(MessageObject messageObject, long j) {
        HashMap<String, String> hashMap;
        TLRPC$Photo tLRPC$Photo;
        if (messageObject == null) {
            return;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        ArrayList<TLRPC$MessageEntity> arrayList = null;
        if (tLRPC$MessageMedia != null && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaEmpty) && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame) && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaInvoice)) {
            if (DialogObject.isEncryptedDialog(j)) {
                TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
                if (tLRPC$Message2.peer_id != null) {
                    TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message2.media;
                    if ((tLRPC$MessageMedia2.photo instanceof TLRPC$TL_photo) || (tLRPC$MessageMedia2.document instanceof TLRPC$TL_document)) {
                        HashMap<String, String> hashMap2 = new HashMap<>();
                        hashMap2.put("parentObject", "sent_" + messageObject.messageOwner.peer_id.channel_id + "_" + messageObject.getId() + "_" + messageObject.getDialogId() + "_" + messageObject.type + "_" + messageObject.getSize());
                        hashMap = hashMap2;
                        TLRPC$Message tLRPC$Message3 = messageObject.messageOwner;
                        TLRPC$MessageMedia tLRPC$MessageMedia3 = tLRPC$Message3.media;
                        tLRPC$Photo = tLRPC$MessageMedia3.photo;
                        if (!(tLRPC$Photo instanceof TLRPC$TL_photo)) {
                            sendMessage((TLRPC$TL_photo) tLRPC$Photo, null, j, messageObject.replyMessageObject, null, tLRPC$Message3.message, tLRPC$Message3.entities, null, hashMap, true, 0, tLRPC$MessageMedia3.ttl_seconds, messageObject, false);
                            return;
                        }
                        TLRPC$Document tLRPC$Document = tLRPC$MessageMedia3.document;
                        if (tLRPC$Document instanceof TLRPC$TL_document) {
                            sendMessage((TLRPC$TL_document) tLRPC$Document, null, tLRPC$Message3.attachPath, j, messageObject.replyMessageObject, null, tLRPC$Message3.message, tLRPC$Message3.entities, null, hashMap, true, 0, tLRPC$MessageMedia3.ttl_seconds, messageObject, null, false);
                            return;
                        } else if ((tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaVenue) || (tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaGeo)) {
                            sendMessage(tLRPC$MessageMedia3, j, messageObject.replyMessageObject, (MessageObject) null, (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
                            return;
                        } else if (tLRPC$MessageMedia3.phone_number != null) {
                            TLRPC$TL_userContact_old2 tLRPC$TL_userContact_old2 = new TLRPC$TL_userContact_old2();
                            TLRPC$MessageMedia tLRPC$MessageMedia4 = messageObject.messageOwner.media;
                            tLRPC$TL_userContact_old2.phone = tLRPC$MessageMedia4.phone_number;
                            tLRPC$TL_userContact_old2.first_name = tLRPC$MessageMedia4.first_name;
                            tLRPC$TL_userContact_old2.last_name = tLRPC$MessageMedia4.last_name;
                            tLRPC$TL_userContact_old2.id = tLRPC$MessageMedia4.user_id;
                            sendMessage((TLRPC$User) tLRPC$TL_userContact_old2, j, messageObject.replyMessageObject, (MessageObject) null, (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
                            return;
                        } else if (DialogObject.isEncryptedDialog(j)) {
                            return;
                        } else {
                            ArrayList<MessageObject> arrayList2 = new ArrayList<>();
                            arrayList2.add(messageObject);
                            sendMessage(arrayList2, j, true, false, true, 0);
                            return;
                        }
                    }
                }
            }
            hashMap = null;
            TLRPC$Message tLRPC$Message32 = messageObject.messageOwner;
            TLRPC$MessageMedia tLRPC$MessageMedia32 = tLRPC$Message32.media;
            tLRPC$Photo = tLRPC$MessageMedia32.photo;
            if (!(tLRPC$Photo instanceof TLRPC$TL_photo)) {
            }
        } else if (tLRPC$Message.message != null) {
            TLRPC$WebPage tLRPC$WebPage = tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage ? tLRPC$MessageMedia.webpage : null;
            ArrayList<TLRPC$MessageEntity> arrayList3 = tLRPC$Message.entities;
            if (arrayList3 != null && !arrayList3.isEmpty()) {
                arrayList = new ArrayList<>();
                for (int i = 0; i < messageObject.messageOwner.entities.size(); i++) {
                    TLRPC$MessageEntity tLRPC$MessageEntity = messageObject.messageOwner.entities.get(i);
                    if ((tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityBold) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityItalic) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityPre) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCode) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityTextUrl) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntitySpoiler) || (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityCustomEmoji)) {
                        arrayList.add(tLRPC$MessageEntity);
                    }
                }
            }
            sendMessage(messageObject.messageOwner.message, j, messageObject.replyMessageObject, null, tLRPC$WebPage, true, arrayList, null, null, true, 0, null, false);
        } else if (DialogObject.isEncryptedDialog(j)) {
            ArrayList<MessageObject> arrayList4 = new ArrayList<>();
            arrayList4.add(messageObject);
            sendMessage(arrayList4, j, true, false, true, 0);
        }
    }

    public void sendScreenshotMessage(TLRPC$User tLRPC$User, int i, TLRPC$Message tLRPC$Message) {
        TLRPC$Message tLRPC$Message2 = tLRPC$Message;
        if (tLRPC$User == null || i == 0 || tLRPC$User.id == getUserConfig().getClientUserId()) {
            return;
        }
        TLRPC$TL_messages_sendScreenshotNotification tLRPC$TL_messages_sendScreenshotNotification = new TLRPC$TL_messages_sendScreenshotNotification();
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_messages_sendScreenshotNotification.peer = tLRPC$TL_inputPeerUser;
        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
        tLRPC$TL_inputPeerUser.user_id = tLRPC$User.id;
        if (tLRPC$Message2 != null) {
            tLRPC$TL_messages_sendScreenshotNotification.reply_to_msg_id = i;
            tLRPC$TL_messages_sendScreenshotNotification.random_id = tLRPC$Message2.random_id;
        } else {
            tLRPC$Message2 = new TLRPC$TL_messageService();
            tLRPC$Message2.random_id = getNextRandomId();
            tLRPC$Message2.dialog_id = tLRPC$User.id;
            tLRPC$Message2.unread = true;
            tLRPC$Message2.out = true;
            int newMessageId = getUserConfig().getNewMessageId();
            tLRPC$Message2.id = newMessageId;
            tLRPC$Message2.local_id = newMessageId;
            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
            tLRPC$Message2.from_id = tLRPC$TL_peerUser;
            tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
            int i2 = tLRPC$Message2.flags | LiteMode.FLAG_CHAT_BLUR;
            tLRPC$Message2.flags = i2;
            tLRPC$Message2.flags = i2 | 8;
            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = new TLRPC$TL_messageReplyHeader();
            tLRPC$Message2.reply_to = tLRPC$TL_messageReplyHeader;
            tLRPC$TL_messageReplyHeader.reply_to_msg_id = i;
            TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
            tLRPC$Message2.peer_id = tLRPC$TL_peerUser2;
            tLRPC$TL_peerUser2.user_id = tLRPC$User.id;
            tLRPC$Message2.date = getConnectionsManager().getCurrentTime();
            tLRPC$Message2.action = new TLRPC$TL_messageActionScreenshotTaken();
            getUserConfig().saveConfig(false);
        }
        tLRPC$TL_messages_sendScreenshotNotification.random_id = tLRPC$Message2.random_id;
        MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, false, true);
        messageObject.messageOwner.send_state = 1;
        messageObject.wasJustSent = true;
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(messageObject);
        getMessagesController().updateInterfaceWithMessages(tLRPC$Message2.dialog_id, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
        arrayList2.add(tLRPC$Message2);
        getMessagesStorage().putMessages(arrayList2, false, true, false, 0, false, 0);
        performSendMessageRequest(tLRPC$TL_messages_sendScreenshotNotification, messageObject, null, null, null, null, false);
    }

    public void sendSticker(TLRPC$Document tLRPC$Document, String str, final long j, final MessageObject messageObject, final MessageObject messageObject2, final Object obj, final MessageObject.SendAnimationData sendAnimationData, final boolean z, final int i, boolean z2) {
        final TLRPC$TL_document_layer82 tLRPC$TL_document_layer82;
        HashMap<String, String> hashMap;
        if (tLRPC$Document == null) {
            return;
        }
        if (DialogObject.isEncryptedDialog(j)) {
            if (getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j))) == null) {
                return;
            }
            TLRPC$TL_document_layer82 tLRPC$TL_document_layer822 = new TLRPC$TL_document_layer82();
            tLRPC$TL_document_layer822.id = tLRPC$Document.id;
            tLRPC$TL_document_layer822.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_document_layer822.date = tLRPC$Document.date;
            tLRPC$TL_document_layer822.mime_type = tLRPC$Document.mime_type;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_document_layer822.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_document_layer822.file_reference = new byte[0];
            }
            tLRPC$TL_document_layer822.size = tLRPC$Document.size;
            tLRPC$TL_document_layer822.dc_id = tLRPC$Document.dc_id;
            tLRPC$TL_document_layer822.attributes = new ArrayList<>(tLRPC$Document.attributes);
            if (tLRPC$TL_document_layer822.mime_type == null) {
                tLRPC$TL_document_layer822.mime_type = "";
            }
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 90);
            if ((closestPhotoSizeWithSize instanceof TLRPC$TL_photoSize) || (closestPhotoSizeWithSize instanceof TLRPC$TL_photoSizeProgressive)) {
                File pathToAttach = FileLoader.getInstance(this.currentAccount).getPathToAttach(closestPhotoSizeWithSize, true);
                if (pathToAttach.exists()) {
                    try {
                        pathToAttach.length();
                        byte[] bArr2 = new byte[(int) pathToAttach.length()];
                        new RandomAccessFile(pathToAttach, "r").readFully(bArr2);
                        TLRPC$TL_photoCachedSize tLRPC$TL_photoCachedSize = new TLRPC$TL_photoCachedSize();
                        TLRPC$TL_fileLocation_layer82 tLRPC$TL_fileLocation_layer82 = new TLRPC$TL_fileLocation_layer82();
                        TLRPC$FileLocation tLRPC$FileLocation = closestPhotoSizeWithSize.location;
                        tLRPC$TL_fileLocation_layer82.dc_id = tLRPC$FileLocation.dc_id;
                        tLRPC$TL_fileLocation_layer82.volume_id = tLRPC$FileLocation.volume_id;
                        tLRPC$TL_fileLocation_layer82.local_id = tLRPC$FileLocation.local_id;
                        tLRPC$TL_fileLocation_layer82.secret = tLRPC$FileLocation.secret;
                        tLRPC$TL_photoCachedSize.location = tLRPC$TL_fileLocation_layer82;
                        tLRPC$TL_photoCachedSize.size = closestPhotoSizeWithSize.size;
                        tLRPC$TL_photoCachedSize.w = closestPhotoSizeWithSize.w;
                        tLRPC$TL_photoCachedSize.h = closestPhotoSizeWithSize.h;
                        tLRPC$TL_photoCachedSize.type = closestPhotoSizeWithSize.type;
                        tLRPC$TL_photoCachedSize.bytes = bArr2;
                        tLRPC$TL_document_layer822.thumbs.add(tLRPC$TL_photoCachedSize);
                        tLRPC$TL_document_layer822.flags |= 1;
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
            }
            if (tLRPC$TL_document_layer822.thumbs.isEmpty()) {
                TLRPC$TL_photoSizeEmpty tLRPC$TL_photoSizeEmpty = new TLRPC$TL_photoSizeEmpty();
                tLRPC$TL_photoSizeEmpty.type = "s";
                tLRPC$TL_document_layer822.thumbs.add(tLRPC$TL_photoSizeEmpty);
            }
            tLRPC$TL_document_layer82 = tLRPC$TL_document_layer822;
        } else {
            tLRPC$TL_document_layer82 = tLRPC$Document;
        }
        if (MessageObject.isGifDocument(tLRPC$TL_document_layer82)) {
            mediaSendQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda44
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$sendSticker$6(tLRPC$TL_document_layer82, j, messageObject, messageObject2, z, i, obj, sendAnimationData);
                }
            });
            return;
        }
        if (TextUtils.isEmpty(str)) {
            hashMap = null;
        } else {
            hashMap = new HashMap<>();
            hashMap.put("query", str);
        }
        sendMessage((TLRPC$TL_document) tLRPC$TL_document_layer82, null, null, j, messageObject, messageObject2, null, null, null, hashMap, z, i, 0, obj, sendAnimationData, z2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSticker$6(final TLRPC$Document tLRPC$Document, final long j, final MessageObject messageObject, final MessageObject messageObject2, final boolean z, final int i, final Object obj, final MessageObject.SendAnimationData sendAnimationData) {
        String str;
        final Bitmap[] bitmapArr = new Bitmap[1];
        final String[] strArr = new String[1];
        String key = ImageLocation.getForDocument(tLRPC$Document).getKey(null, null, false);
        if ("video/mp4".equals(tLRPC$Document.mime_type)) {
            str = ".mp4";
        } else {
            str = "video/x-matroska".equals(tLRPC$Document.mime_type) ? ".mkv" : "";
        }
        File directory = FileLoader.getDirectory(3);
        File file = new File(directory, key + str);
        if (!file.exists()) {
            File directory2 = FileLoader.getDirectory(2);
            file = new File(directory2, key + str);
        }
        ensureMediaThumbExists(getAccountInstance(), false, tLRPC$Document, file.getAbsolutePath(), null, 0L);
        strArr[0] = getKeyForPhotoSize(getAccountInstance(), FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 320), bitmapArr, true, true);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendSticker$5(bitmapArr, strArr, tLRPC$Document, j, messageObject, messageObject2, z, i, obj, sendAnimationData);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendSticker$5(Bitmap[] bitmapArr, String[] strArr, TLRPC$Document tLRPC$Document, long j, MessageObject messageObject, MessageObject messageObject2, boolean z, int i, Object obj, MessageObject.SendAnimationData sendAnimationData) {
        if (bitmapArr[0] != null && strArr[0] != null) {
            ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmapArr[0]), strArr[0], false);
        }
        sendMessage((TLRPC$TL_document) tLRPC$Document, null, null, j, messageObject, messageObject2, null, null, null, null, z, i, 0, obj, sendAnimationData, false);
    }

    public int sendMessage(ArrayList<MessageObject> arrayList, long j, boolean z, boolean z2, boolean z3, int i) {
        return sendMessage(arrayList, j, z, z2, z3, i, null);
    }

    /* JADX WARN: Removed duplicated region for block: B:152:0x02ff  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x0389  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x0437  */
    /* JADX WARN: Removed duplicated region for block: B:206:0x0456  */
    /* JADX WARN: Removed duplicated region for block: B:270:0x05e0  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x05ea  */
    /* JADX WARN: Removed duplicated region for block: B:276:0x0605  */
    /* JADX WARN: Removed duplicated region for block: B:289:0x0665  */
    /* JADX WARN: Removed duplicated region for block: B:291:0x0677  */
    /* JADX WARN: Removed duplicated region for block: B:296:0x0694  */
    /* JADX WARN: Removed duplicated region for block: B:299:0x06bb  */
    /* JADX WARN: Removed duplicated region for block: B:300:0x06bd  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x0736  */
    /* JADX WARN: Removed duplicated region for block: B:327:0x0738  */
    /* JADX WARN: Removed duplicated region for block: B:330:0x0753  */
    /* JADX WARN: Removed duplicated region for block: B:338:0x0787  */
    /* JADX WARN: Removed duplicated region for block: B:340:0x078d  */
    /* JADX WARN: Removed duplicated region for block: B:341:0x078f  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x0797  */
    /* JADX WARN: Removed duplicated region for block: B:347:0x07cf  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x07f8  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x084a  */
    /* JADX WARN: Removed duplicated region for block: B:364:0x084d  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x085c  */
    /* JADX WARN: Removed duplicated region for block: B:368:0x085e  */
    /* JADX WARN: Removed duplicated region for block: B:371:0x087e  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x08a5  */
    /* JADX WARN: Removed duplicated region for block: B:380:0x08b3  */
    /* JADX WARN: Removed duplicated region for block: B:383:0x08c3  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x08ee  */
    /* JADX WARN: Removed duplicated region for block: B:389:0x090d  */
    /* JADX WARN: Removed duplicated region for block: B:395:0x092b  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x092e  */
    /* JADX WARN: Removed duplicated region for block: B:399:0x0980  */
    /* JADX WARN: Type inference failed for: r2v19 */
    /* JADX WARN: Type inference failed for: r2v22, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r2v26 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int sendMessage(ArrayList<MessageObject> arrayList, final long j, boolean z, boolean z2, boolean z3, final int i, MessageObject messageObject) {
        TLRPC$UserFull userFull;
        TLRPC$Peer tLRPC$Peer;
        long j2;
        boolean z4;
        boolean z5;
        long j3;
        boolean z6;
        String str;
        boolean canSendRoundVideo;
        boolean canSendVoice;
        boolean z7;
        boolean canSendMusic;
        boolean z8;
        boolean z9;
        boolean z10;
        boolean z11;
        TLRPC$Chat tLRPC$Chat;
        boolean z12;
        String str2;
        boolean z13;
        boolean z14;
        long j4;
        ArrayList<Long> arrayList2;
        LongSparseArray longSparseArray;
        long j5;
        final LongSparseArray longSparseArray2;
        long j6;
        String str3;
        int i2;
        final TLRPC$Peer tLRPC$Peer2;
        ArrayList<MessageObject> arrayList3;
        ArrayList<Integer> arrayList4;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$InputPeer tLRPC$InputPeer;
        int i3;
        ArrayList<Integer> arrayList5;
        int i4;
        boolean z15;
        ArrayList<Long> arrayList6;
        LongSparseArray longSparseArray3;
        String str4;
        TLRPC$Chat tLRPC$Chat3;
        long j7;
        TLRPC$Peer tLRPC$Peer3;
        long j8;
        TLRPC$Peer tLRPC$Peer4;
        TLRPC$Chat tLRPC$Chat4;
        long sendAsPeerId;
        String str5;
        boolean z16;
        LongSparseArray longSparseArray4;
        TLRPC$Message tLRPC$Message;
        ?? r2;
        ArrayList arrayList7;
        ArrayList<Integer> arrayList8;
        ArrayList<MessageObject> arrayList9;
        int i5;
        boolean z17;
        int i6;
        int i7;
        boolean z18;
        TLRPC$User user;
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader;
        TLRPC$Peer tLRPC$Peer5;
        int i8;
        boolean z19;
        boolean z20;
        ArrayList<MessageObject> arrayList10 = arrayList;
        long j9 = j;
        boolean z21 = z;
        boolean z22 = z2;
        if (arrayList10 == null || arrayList.isEmpty()) {
            return 0;
        }
        long clientUserId = getUserConfig().getClientUserId();
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$Peer peer = getMessagesController().getPeer(j9);
            if (DialogObject.isUserDialog(j)) {
                if (getMessagesController().getUser(Long.valueOf(j)) == null) {
                    return 0;
                }
                TLRPC$UserFull userFull2 = getMessagesController().getUserFull(j9);
                if (userFull2 != null) {
                    z19 = !userFull2.voice_messages_forbidden;
                    z20 = z19;
                } else {
                    z19 = true;
                    z20 = true;
                }
                canSendVoice = z19;
                canSendRoundVideo = z20;
                tLRPC$Peer = peer;
                j4 = 0;
                str2 = null;
                tLRPC$Chat = null;
                z14 = false;
                z13 = true;
                z12 = false;
                z10 = true;
                z11 = true;
                z8 = true;
                z9 = true;
                z7 = true;
                canSendMusic = true;
            } else {
                TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-j9));
                if (ChatObject.isChannel(chat)) {
                    z4 = chat.signatures;
                    z5 = !chat.megagroup;
                    if (z5 && chat.has_link) {
                        tLRPC$Peer = peer;
                        TLRPC$ChatFull chatFull = getMessagesController().getChatFull(chat.id);
                        if (chatFull != null) {
                            j2 = chatFull.linked_chat_id;
                        }
                    } else {
                        tLRPC$Peer = peer;
                    }
                    j2 = 0;
                } else {
                    tLRPC$Peer = peer;
                    j2 = 0;
                    z4 = false;
                    z5 = false;
                }
                if (chat != null) {
                    j3 = j2;
                    z6 = z4;
                    str = getMessagesController().getAdminRank(chat.id, clientUserId);
                } else {
                    j3 = j2;
                    z6 = z4;
                    str = null;
                }
                boolean canSendStickers = ChatObject.canSendStickers(chat);
                boolean canSendPhoto = ChatObject.canSendPhoto(chat);
                boolean canSendVideo = ChatObject.canSendVideo(chat);
                boolean canSendDocument = ChatObject.canSendDocument(chat);
                boolean canSendEmbed = ChatObject.canSendEmbed(chat);
                boolean canSendPolls = ChatObject.canSendPolls(chat);
                canSendRoundVideo = ChatObject.canSendRoundVideo(chat);
                canSendVoice = ChatObject.canSendVoice(chat);
                z7 = canSendPolls;
                canSendMusic = ChatObject.canSendMusic(chat);
                z8 = canSendDocument;
                z9 = canSendEmbed;
                z10 = canSendPhoto;
                z11 = canSendVideo;
                tLRPC$Chat = chat;
                z12 = z5;
                str2 = str;
                long j10 = j3;
                z13 = canSendStickers;
                z14 = z6;
                j4 = j10;
            }
            LongSparseArray longSparseArray5 = new LongSparseArray();
            ArrayList<MessageObject> arrayList11 = new ArrayList<>();
            ArrayList arrayList12 = new ArrayList();
            ArrayList<Long> arrayList13 = new ArrayList<>();
            ArrayList<Integer> arrayList14 = new ArrayList<>();
            LongSparseArray longSparseArray6 = new LongSparseArray();
            TLRPC$InputPeer inputPeer = getMessagesController().getInputPeer(j9);
            boolean z23 = j9 == clientUserId;
            ArrayList arrayList15 = arrayList12;
            int i9 = 0;
            ArrayList<MessageObject> arrayList16 = arrayList11;
            ArrayList<Long> arrayList17 = arrayList13;
            TLRPC$InputPeer tLRPC$InputPeer2 = inputPeer;
            LongSparseArray longSparseArray7 = longSparseArray6;
            ArrayList<Integer> arrayList18 = arrayList14;
            int i10 = 0;
            while (i9 < arrayList.size()) {
                final MessageObject messageObject2 = arrayList10.get(i9);
                if (messageObject2.getId() <= 0 || messageObject2.needDrawBluredPreview()) {
                    arrayList2 = arrayList17;
                    longSparseArray = longSparseArray5;
                    j5 = j4;
                    longSparseArray2 = longSparseArray7;
                    j6 = clientUserId;
                    str3 = str2;
                    i2 = i9;
                    tLRPC$Peer2 = tLRPC$Peer;
                    arrayList3 = arrayList16;
                    arrayList4 = arrayList18;
                    tLRPC$Chat2 = tLRPC$Chat;
                    tLRPC$InputPeer = tLRPC$InputPeer2;
                    if (messageObject2.type == 0 && !TextUtils.isEmpty(messageObject2.messageText)) {
                        TLRPC$MessageMedia tLRPC$MessageMedia = messageObject2.messageOwner.media;
                        TLRPC$WebPage tLRPC$WebPage = tLRPC$MessageMedia != null ? tLRPC$MessageMedia.webpage : null;
                        i3 = i2;
                        sendMessage(messageObject2.messageText.toString(), j, null, messageObject, tLRPC$WebPage, tLRPC$WebPage != null, messageObject2.messageOwner.entities, null, null, z3, i, null, false);
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    }
                    i3 = i2;
                    arrayList5 = arrayList4;
                    longSparseArray7 = longSparseArray2;
                    arrayList17 = arrayList2;
                } else {
                    if (messageObject2.isSticker() || messageObject2.isAnimatedSticker() || messageObject2.isGif() || messageObject2.isGame()) {
                        i4 = i9;
                        z15 = true;
                    } else {
                        i4 = i9;
                        z15 = false;
                    }
                    if (!z13 && z15) {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 8) ? 4 : 1;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!z10 && (messageObject2.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) && !messageObject2.isVideo() && !z15) {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 16) ? 10 : 12;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!canSendMusic && messageObject2.isMusic()) {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 18) ? 19 : 20;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!z11 && (messageObject2.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) && messageObject2.isVideo() && !z15) {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 17) ? 9 : 11;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!z7 && (messageObject2.messageOwner.media instanceof TLRPC$TL_messageMediaPoll)) {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 10) ? 6 : 3;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!canSendVoice && MessageObject.isVoiceMessage(messageObject2.messageOwner)) {
                        if (tLRPC$Chat != null) {
                            if (i10 == 0) {
                                i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 20) ? 13 : 14;
                                longSparseArray = longSparseArray5;
                                j5 = j4;
                                str3 = str2;
                                i10 = i8;
                                tLRPC$Peer2 = tLRPC$Peer;
                                arrayList3 = arrayList16;
                                arrayList5 = arrayList18;
                                i3 = i4;
                                j6 = clientUserId;
                                tLRPC$Chat2 = tLRPC$Chat;
                                tLRPC$InputPeer = tLRPC$InputPeer2;
                            }
                        } else if (i10 == 0) {
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            i10 = 7;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (!canSendRoundVideo && MessageObject.isRoundVideoMessage(messageObject2.messageOwner)) {
                        if (tLRPC$Chat != null) {
                            if (i10 == 0) {
                                i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 21) ? 15 : 16;
                                longSparseArray = longSparseArray5;
                                j5 = j4;
                                str3 = str2;
                                i10 = i8;
                                tLRPC$Peer2 = tLRPC$Peer;
                                arrayList3 = arrayList16;
                                arrayList5 = arrayList18;
                                i3 = i4;
                                j6 = clientUserId;
                                tLRPC$Chat2 = tLRPC$Chat;
                                tLRPC$InputPeer = tLRPC$InputPeer2;
                            }
                        } else if (i10 == 0) {
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            i10 = 8;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    } else if (z8 || !(messageObject2.messageOwner.media instanceof TLRPC$TL_messageMediaDocument) || z15) {
                        TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                        if (z21) {
                            arrayList6 = arrayList17;
                            longSparseArray3 = longSparseArray5;
                            str4 = str2;
                            tLRPC$Chat3 = tLRPC$Chat;
                        } else {
                            if (messageObject2.getDialogId() == clientUserId && messageObject2.isFromUser()) {
                                str4 = str2;
                                tLRPC$Chat3 = tLRPC$Chat;
                                if (messageObject2.messageOwner.from_id.user_id == clientUserId) {
                                    z18 = true;
                                    if (!messageObject2.isForwarded()) {
                                        TLRPC$TL_messageFwdHeader tLRPC$TL_messageFwdHeader = new TLRPC$TL_messageFwdHeader();
                                        tLRPC$TL_message.fwd_from = tLRPC$TL_messageFwdHeader;
                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader2 = messageObject2.messageOwner.fwd_from;
                                        if ((tLRPC$MessageFwdHeader2.flags & 1) != 0) {
                                            tLRPC$TL_messageFwdHeader.flags |= 1;
                                            tLRPC$TL_messageFwdHeader.from_id = tLRPC$MessageFwdHeader2.from_id;
                                        }
                                        if ((tLRPC$MessageFwdHeader2.flags & 32) != 0) {
                                            tLRPC$TL_messageFwdHeader.flags |= 32;
                                            tLRPC$TL_messageFwdHeader.from_name = tLRPC$MessageFwdHeader2.from_name;
                                        }
                                        if ((tLRPC$MessageFwdHeader2.flags & 4) != 0) {
                                            tLRPC$TL_messageFwdHeader.flags |= 4;
                                            tLRPC$TL_messageFwdHeader.channel_post = tLRPC$MessageFwdHeader2.channel_post;
                                        }
                                        if ((tLRPC$MessageFwdHeader2.flags & 8) != 0) {
                                            tLRPC$TL_messageFwdHeader.flags |= 8;
                                            tLRPC$TL_messageFwdHeader.post_author = tLRPC$MessageFwdHeader2.post_author;
                                        }
                                        if ((j9 == clientUserId || z12) && (tLRPC$MessageFwdHeader2.flags & 16) != 0 && !UserObject.isReplyUser(messageObject2.getDialogId())) {
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader3 = tLRPC$TL_message.fwd_from;
                                            tLRPC$MessageFwdHeader3.flags |= 16;
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader4 = messageObject2.messageOwner.fwd_from;
                                            tLRPC$MessageFwdHeader3.saved_from_peer = tLRPC$MessageFwdHeader4.saved_from_peer;
                                            tLRPC$MessageFwdHeader3.saved_from_msg_id = tLRPC$MessageFwdHeader4.saved_from_msg_id;
                                        }
                                        tLRPC$TL_message.fwd_from.date = messageObject2.messageOwner.fwd_from.date;
                                        tLRPC$TL_message.flags = 4;
                                    } else if (!z18) {
                                        long fromChatId = messageObject2.getFromChatId();
                                        TLRPC$TL_messageFwdHeader tLRPC$TL_messageFwdHeader2 = new TLRPC$TL_messageFwdHeader();
                                        tLRPC$TL_message.fwd_from = tLRPC$TL_messageFwdHeader2;
                                        tLRPC$TL_messageFwdHeader2.channel_post = messageObject2.getId();
                                        tLRPC$TL_message.fwd_from.flags |= 4;
                                        if (messageObject2.isFromUser()) {
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader5 = tLRPC$TL_message.fwd_from;
                                            tLRPC$MessageFwdHeader5.from_id = messageObject2.messageOwner.from_id;
                                            tLRPC$MessageFwdHeader5.flags |= 1;
                                            arrayList6 = arrayList17;
                                            longSparseArray3 = longSparseArray5;
                                        } else {
                                            tLRPC$TL_message.fwd_from.from_id = new TLRPC$TL_peerChannel();
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader6 = tLRPC$TL_message.fwd_from;
                                            TLRPC$Peer tLRPC$Peer6 = tLRPC$MessageFwdHeader6.from_id;
                                            TLRPC$Message tLRPC$Message2 = messageObject2.messageOwner;
                                            TLRPC$Peer tLRPC$Peer7 = tLRPC$Message2.peer_id;
                                            arrayList6 = arrayList17;
                                            longSparseArray3 = longSparseArray5;
                                            tLRPC$Peer6.channel_id = tLRPC$Peer7.channel_id;
                                            tLRPC$MessageFwdHeader6.flags |= 1;
                                            if (tLRPC$Message2.post && fromChatId > 0) {
                                                TLRPC$Peer tLRPC$Peer8 = tLRPC$Message2.from_id;
                                                if (tLRPC$Peer8 != null) {
                                                    tLRPC$Peer7 = tLRPC$Peer8;
                                                }
                                                tLRPC$MessageFwdHeader6.from_id = tLRPC$Peer7;
                                            }
                                        }
                                        if (messageObject2.messageOwner.post_author == null && !messageObject2.isOutOwner() && fromChatId > 0 && messageObject2.messageOwner.post && (user = getMessagesController().getUser(Long.valueOf(fromChatId))) != null) {
                                            tLRPC$TL_message.fwd_from.post_author = ContactsController.formatName(user.first_name, user.last_name);
                                            tLRPC$TL_message.fwd_from.flags |= 8;
                                        }
                                        tLRPC$TL_message.date = messageObject2.messageOwner.date;
                                        tLRPC$TL_message.flags = 4;
                                        if (j9 == clientUserId && (tLRPC$MessageFwdHeader = tLRPC$TL_message.fwd_from) != null) {
                                            tLRPC$MessageFwdHeader.flags |= 16;
                                            tLRPC$MessageFwdHeader.saved_from_msg_id = messageObject2.getId();
                                            TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader7 = tLRPC$TL_message.fwd_from;
                                            tLRPC$Peer5 = messageObject2.messageOwner.peer_id;
                                            tLRPC$MessageFwdHeader7.saved_from_peer = tLRPC$Peer5;
                                            if (tLRPC$Peer5.user_id == clientUserId) {
                                                tLRPC$Peer5.user_id = messageObject2.getDialogId();
                                            }
                                        }
                                    }
                                    arrayList6 = arrayList17;
                                    longSparseArray3 = longSparseArray5;
                                    if (j9 == clientUserId) {
                                        tLRPC$MessageFwdHeader.flags |= 16;
                                        tLRPC$MessageFwdHeader.saved_from_msg_id = messageObject2.getId();
                                        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader72 = tLRPC$TL_message.fwd_from;
                                        tLRPC$Peer5 = messageObject2.messageOwner.peer_id;
                                        tLRPC$MessageFwdHeader72.saved_from_peer = tLRPC$Peer5;
                                        if (tLRPC$Peer5.user_id == clientUserId) {
                                        }
                                    }
                                }
                            } else {
                                str4 = str2;
                                tLRPC$Chat3 = tLRPC$Chat;
                            }
                            z18 = false;
                            if (!messageObject2.isForwarded()) {
                            }
                            arrayList6 = arrayList17;
                            longSparseArray3 = longSparseArray5;
                            if (j9 == clientUserId) {
                            }
                        }
                        HashMap<String, String> hashMap = new HashMap<>();
                        tLRPC$TL_message.params = hashMap;
                        hashMap.put("fwd_id", "" + messageObject2.getId());
                        tLRPC$TL_message.params.put("fwd_peer", "" + messageObject2.getDialogId());
                        if (!messageObject2.messageOwner.restriction_reason.isEmpty()) {
                            tLRPC$TL_message.restriction_reason = messageObject2.messageOwner.restriction_reason;
                            tLRPC$TL_message.flags |= 4194304;
                        }
                        if (!z9 && (messageObject2.messageOwner.media instanceof TLRPC$TL_messageMediaWebPage)) {
                            tLRPC$TL_message.media = new TLRPC$TL_messageMediaEmpty();
                        } else {
                            tLRPC$TL_message.media = messageObject2.messageOwner.media;
                        }
                        if (tLRPC$TL_message.media != null) {
                            tLRPC$TL_message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                        }
                        long j11 = messageObject2.messageOwner.via_bot_id;
                        if (j11 != 0) {
                            tLRPC$TL_message.via_bot_id = j11;
                            tLRPC$TL_message.flags |= LiteMode.FLAG_AUTOPLAY_GIFS;
                        }
                        if (j4 != 0) {
                            TLRPC$TL_messageReplies tLRPC$TL_messageReplies = new TLRPC$TL_messageReplies();
                            tLRPC$TL_message.replies = tLRPC$TL_messageReplies;
                            tLRPC$TL_messageReplies.comments = true;
                            tLRPC$TL_messageReplies.channel_id = j4;
                            tLRPC$TL_messageReplies.flags |= 1;
                            tLRPC$TL_message.flags |= 8388608;
                        }
                        if (!z22 || tLRPC$TL_message.media == null) {
                            tLRPC$TL_message.message = messageObject2.messageOwner.message;
                        }
                        if (tLRPC$TL_message.message == null) {
                            tLRPC$TL_message.message = "";
                        }
                        tLRPC$TL_message.fwd_msg_id = messageObject2.getId();
                        TLRPC$Message tLRPC$Message3 = messageObject2.messageOwner;
                        tLRPC$TL_message.attachPath = tLRPC$Message3.attachPath;
                        tLRPC$TL_message.entities = tLRPC$Message3.entities;
                        if (tLRPC$Message3.reply_markup instanceof TLRPC$TL_replyInlineMarkup) {
                            tLRPC$TL_message.reply_markup = new TLRPC$TL_replyInlineMarkup();
                            int size = messageObject2.messageOwner.reply_markup.rows.size();
                            int i11 = 0;
                            boolean z24 = false;
                            while (true) {
                                if (i11 >= size) {
                                    j5 = j4;
                                    break;
                                }
                                TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow = messageObject2.messageOwner.reply_markup.rows.get(i11);
                                int size2 = tLRPC$TL_keyboardButtonRow.buttons.size();
                                int i12 = 0;
                                TLRPC$TL_keyboardButtonRow tLRPC$TL_keyboardButtonRow2 = null;
                                while (true) {
                                    i7 = size;
                                    if (i12 >= size2) {
                                        j5 = j4;
                                        break;
                                    }
                                    TLRPC$KeyboardButton tLRPC$KeyboardButton = tLRPC$TL_keyboardButtonRow.buttons.get(i12);
                                    j5 = j4;
                                    boolean z25 = tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth;
                                    if (!z25 && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrl) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonSwitchInline) && !(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy)) {
                                        z24 = true;
                                        break;
                                    }
                                    if (z25) {
                                        TLRPC$TL_keyboardButtonUrlAuth tLRPC$TL_keyboardButtonUrlAuth = new TLRPC$TL_keyboardButtonUrlAuth();
                                        tLRPC$TL_keyboardButtonUrlAuth.flags = tLRPC$KeyboardButton.flags;
                                        String str6 = tLRPC$KeyboardButton.fwd_text;
                                        if (str6 != null) {
                                            tLRPC$TL_keyboardButtonUrlAuth.fwd_text = str6;
                                            tLRPC$TL_keyboardButtonUrlAuth.text = str6;
                                        } else {
                                            tLRPC$TL_keyboardButtonUrlAuth.text = tLRPC$KeyboardButton.text;
                                        }
                                        tLRPC$TL_keyboardButtonUrlAuth.url = tLRPC$KeyboardButton.url;
                                        tLRPC$TL_keyboardButtonUrlAuth.button_id = tLRPC$KeyboardButton.button_id;
                                        tLRPC$KeyboardButton = tLRPC$TL_keyboardButtonUrlAuth;
                                    }
                                    if (tLRPC$TL_keyboardButtonRow2 == null) {
                                        tLRPC$TL_keyboardButtonRow2 = new TLRPC$TL_keyboardButtonRow();
                                        tLRPC$TL_message.reply_markup.rows.add(tLRPC$TL_keyboardButtonRow2);
                                    }
                                    tLRPC$TL_keyboardButtonRow2.buttons.add(tLRPC$KeyboardButton);
                                    i12++;
                                    size = i7;
                                    j4 = j5;
                                }
                                if (z24) {
                                    break;
                                }
                                i11++;
                                size = i7;
                                j4 = j5;
                            }
                            if (z24) {
                                messageObject2.messageOwner.reply_markup = null;
                                tLRPC$TL_message.flags &= -65;
                                if (!tLRPC$TL_message.entities.isEmpty()) {
                                    tLRPC$TL_message.flags |= 128;
                                }
                                if (tLRPC$TL_message.attachPath == null) {
                                    tLRPC$TL_message.attachPath = "";
                                }
                                int newMessageId = getUserConfig().getNewMessageId();
                                tLRPC$TL_message.id = newMessageId;
                                tLRPC$TL_message.local_id = newMessageId;
                                tLRPC$TL_message.out = true;
                                j7 = messageObject2.messageOwner.grouped_id;
                                LongSparseArray longSparseArray8 = longSparseArray3;
                                if (j7 != 0) {
                                    Long l = (Long) longSparseArray8.get(j7);
                                    if (l == null) {
                                        l = Long.valueOf(Utilities.random.nextLong());
                                        longSparseArray8.put(messageObject2.messageOwner.grouped_id, l);
                                    }
                                    tLRPC$TL_message.grouped_id = l.longValue();
                                    tLRPC$TL_message.flags |= 131072;
                                }
                                tLRPC$Peer3 = tLRPC$Peer;
                                if (tLRPC$Peer3.channel_id == 0 && z12) {
                                    if (z14) {
                                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                        tLRPC$TL_message.from_id = tLRPC$TL_peerUser;
                                        tLRPC$TL_peerUser.user_id = clientUserId;
                                    } else {
                                        tLRPC$TL_message.from_id = tLRPC$Peer3;
                                    }
                                    tLRPC$TL_message.post = true;
                                    j8 = j;
                                    tLRPC$Peer4 = tLRPC$Peer3;
                                    tLRPC$Chat4 = tLRPC$Chat3;
                                } else {
                                    j8 = j;
                                    tLRPC$Peer4 = tLRPC$Peer3;
                                    tLRPC$Chat4 = tLRPC$Chat3;
                                    sendAsPeerId = ChatObject.getSendAsPeerId(tLRPC$Chat4, getMessagesController().getChatFull(-j8), true);
                                    if (sendAsPeerId != clientUserId) {
                                        TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                        tLRPC$TL_message.from_id = tLRPC$TL_peerUser2;
                                        tLRPC$TL_peerUser2.user_id = clientUserId;
                                        tLRPC$TL_message.flags |= LiteMode.FLAG_CHAT_BLUR;
                                    } else {
                                        tLRPC$TL_message.from_id = getMessagesController().getPeer(sendAsPeerId);
                                        str5 = str4;
                                        if (str4 != null) {
                                            tLRPC$TL_message.post_author = str5;
                                            tLRPC$TL_message.flags |= CharacterCompat.MIN_SUPPLEMENTARY_CODE_POINT;
                                        }
                                        if (tLRPC$TL_message.random_id == 0) {
                                            tLRPC$TL_message.random_id = getNextRandomId();
                                        }
                                        ArrayList<Long> arrayList19 = arrayList6;
                                        arrayList19.add(Long.valueOf(tLRPC$TL_message.random_id));
                                        longSparseArray7.put(tLRPC$TL_message.random_id, tLRPC$TL_message);
                                        ArrayList<Integer> arrayList20 = arrayList18;
                                        arrayList20.add(Integer.valueOf(tLRPC$TL_message.fwd_msg_id));
                                        int i13 = i4;
                                        tLRPC$TL_message.date = i == 0 ? i : getConnectionsManager().getCurrentTime();
                                        TLRPC$InputPeer tLRPC$InputPeer3 = tLRPC$InputPeer2;
                                        z16 = tLRPC$InputPeer3 instanceof TLRPC$TL_inputPeerChannel;
                                        if (z16 || !z12) {
                                            longSparseArray4 = longSparseArray7;
                                            tLRPC$Message = messageObject2.messageOwner;
                                            j6 = clientUserId;
                                            if ((tLRPC$Message.flags & 1024) != 0 && i == 0) {
                                                tLRPC$TL_message.views = tLRPC$Message.views;
                                                tLRPC$TL_message.flags |= 1024;
                                            }
                                            tLRPC$TL_message.unread = true;
                                        } else {
                                            longSparseArray4 = longSparseArray7;
                                            if (i == 0) {
                                                tLRPC$TL_message.views = 1;
                                                tLRPC$TL_message.flags |= 1024;
                                            }
                                            j6 = clientUserId;
                                        }
                                        tLRPC$TL_message.dialog_id = j8;
                                        TLRPC$Peer tLRPC$Peer9 = tLRPC$Peer4;
                                        tLRPC$TL_message.peer_id = tLRPC$Peer9;
                                        if (!MessageObject.isVoiceMessage(tLRPC$TL_message) || MessageObject.isRoundVideoMessage(tLRPC$TL_message)) {
                                            if (!z16 && messageObject2.getChannelId() != 0) {
                                                tLRPC$TL_message.media_unread = messageObject2.isContentUnread();
                                            } else {
                                                r2 = 1;
                                                tLRPC$TL_message.media_unread = true;
                                                str3 = str5;
                                                ArrayList<Integer> arrayList21 = arrayList20;
                                                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$TL_message, r2, r2);
                                                messageObject3.scheduled = i != 0;
                                                messageObject3.messageOwner.send_state = r2;
                                                messageObject3.wasJustSent = r2;
                                                ArrayList<MessageObject> arrayList22 = arrayList16;
                                                arrayList22.add(messageObject3);
                                                arrayList7 = arrayList15;
                                                arrayList7.add(tLRPC$TL_message);
                                                tLRPC$Chat2 = tLRPC$Chat4;
                                                if (messageObject2.replyMessageObject != null) {
                                                    int i14 = 0;
                                                    while (true) {
                                                        if (i14 >= arrayList.size()) {
                                                            arrayList9 = arrayList;
                                                            arrayList8 = arrayList21;
                                                            break;
                                                        }
                                                        arrayList9 = arrayList;
                                                        arrayList8 = arrayList21;
                                                        if (arrayList9.get(i14).getId() == messageObject2.replyMessageObject.getId()) {
                                                            TLRPC$Message tLRPC$Message4 = messageObject3.messageOwner;
                                                            MessageObject messageObject4 = messageObject2.replyMessageObject;
                                                            tLRPC$Message4.replyMessage = messageObject4.messageOwner;
                                                            messageObject3.replyMessageObject = messageObject4;
                                                            break;
                                                        }
                                                        i14++;
                                                        arrayList21 = arrayList8;
                                                    }
                                                } else {
                                                    arrayList8 = arrayList21;
                                                    arrayList9 = arrayList;
                                                }
                                                putToSendingMessages(tLRPC$TL_message, i != 0);
                                                if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("forward message user_id = " + tLRPC$InputPeer3.user_id + " chat_id = " + tLRPC$InputPeer3.chat_id + " channel_id = " + tLRPC$InputPeer3.channel_id + " access_hash = " + tLRPC$InputPeer3.access_hash);
                                                }
                                                if (messageObject != null) {
                                                    TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = new TLRPC$TL_messageReplyHeader();
                                                    tLRPC$TL_message.reply_to = tLRPC$TL_messageReplyHeader;
                                                    tLRPC$TL_messageReplyHeader.reply_to_msg_id = messageObject.getId();
                                                    if (messageObject.isTopicMainMessage) {
                                                        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = tLRPC$TL_message.reply_to;
                                                        i5 = 1;
                                                        tLRPC$TL_messageReplyHeader2.forum_topic = true;
                                                        tLRPC$TL_messageReplyHeader2.flags |= 8;
                                                        if (arrayList7.size() == 100 && i13 != arrayList.size() - i5 && (i13 == arrayList.size() - i5 || arrayList9.get(i13 + 1).getDialogId() == messageObject2.getDialogId())) {
                                                            arrayList2 = arrayList19;
                                                            arrayList3 = arrayList22;
                                                            i3 = i13;
                                                            arrayList15 = arrayList7;
                                                            tLRPC$Peer2 = tLRPC$Peer9;
                                                            arrayList4 = arrayList8;
                                                            longSparseArray2 = longSparseArray4;
                                                            longSparseArray = longSparseArray8;
                                                            tLRPC$InputPeer = tLRPC$InputPeer3;
                                                            arrayList5 = arrayList4;
                                                            longSparseArray7 = longSparseArray2;
                                                            arrayList17 = arrayList2;
                                                        } else {
                                                            getMessagesStorage().putMessages(new ArrayList<>(arrayList7), false, true, false, 0, i == 0, 0);
                                                            getMessagesController().updateInterfaceWithMessages(j8, arrayList22, i == 0);
                                                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                                                            getUserConfig().saveConfig(false);
                                                            final TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages = new TLRPC$TL_messages_forwardMessages();
                                                            tLRPC$TL_messages_forwardMessages.to_peer = tLRPC$InputPeer3;
                                                            if (z3) {
                                                                if (!MessagesController.getNotificationsSettings(this.currentAccount).getBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + j8, false)) {
                                                                    z17 = false;
                                                                    tLRPC$TL_messages_forwardMessages.silent = z17;
                                                                    if (messageObject != null) {
                                                                        tLRPC$TL_messages_forwardMessages.top_msg_id = messageObject.getId();
                                                                        tLRPC$TL_messages_forwardMessages.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                    }
                                                                    if (i != 0) {
                                                                        tLRPC$TL_messages_forwardMessages.schedule_date = i;
                                                                        tLRPC$TL_messages_forwardMessages.flags |= 1024;
                                                                    }
                                                                    if (messageObject2.messageOwner.peer_id instanceof TLRPC$TL_peerChannel) {
                                                                        i6 = i13;
                                                                        arrayList15 = arrayList7;
                                                                        TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(messageObject2.messageOwner.peer_id.channel_id));
                                                                        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                                                                        tLRPC$TL_messages_forwardMessages.from_peer = tLRPC$TL_inputPeerChannel;
                                                                        tLRPC$TL_inputPeerChannel.channel_id = messageObject2.messageOwner.peer_id.channel_id;
                                                                        if (chat2 != null) {
                                                                            tLRPC$TL_inputPeerChannel.access_hash = chat2.access_hash;
                                                                        }
                                                                    } else {
                                                                        i6 = i13;
                                                                        arrayList15 = arrayList7;
                                                                        tLRPC$TL_messages_forwardMessages.from_peer = new TLRPC$TL_inputPeerEmpty();
                                                                    }
                                                                    tLRPC$TL_messages_forwardMessages.random_id = arrayList19;
                                                                    ArrayList<Integer> arrayList23 = arrayList8;
                                                                    tLRPC$TL_messages_forwardMessages.id = arrayList23;
                                                                    tLRPC$TL_messages_forwardMessages.drop_author = z;
                                                                    tLRPC$TL_messages_forwardMessages.drop_media_captions = z2;
                                                                    tLRPC$TL_messages_forwardMessages.with_my_score = arrayList.size() != 1 && arrayList9.get(0).messageOwner.with_my_score;
                                                                    final ArrayList arrayList24 = new ArrayList(arrayList22);
                                                                    arrayList2 = arrayList19;
                                                                    arrayList3 = arrayList22;
                                                                    longSparseArray = longSparseArray8;
                                                                    tLRPC$Peer2 = tLRPC$Peer9;
                                                                    longSparseArray2 = longSparseArray4;
                                                                    tLRPC$InputPeer = tLRPC$InputPeer3;
                                                                    final boolean z26 = i == 2147483646;
                                                                    final boolean z27 = z23;
                                                                    final ArrayList arrayList25 = arrayList15;
                                                                    arrayList4 = arrayList23;
                                                                    getConnectionsManager().sendRequest(tLRPC$TL_messages_forwardMessages, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda81
                                                                        @Override // org.telegram.tgnet.RequestDelegate
                                                                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                                            SendMessagesHelper.this.lambda$sendMessage$14(j, i, z26, z27, longSparseArray2, arrayList25, arrayList24, messageObject2, tLRPC$Peer2, tLRPC$TL_messages_forwardMessages, tLObject, tLRPC$TL_error);
                                                                        }
                                                                    }, 68);
                                                                    i2 = i6;
                                                                    if (i2 != arrayList.size() - 1) {
                                                                        ArrayList<MessageObject> arrayList26 = new ArrayList<>();
                                                                        ArrayList arrayList27 = new ArrayList();
                                                                        ArrayList<Long> arrayList28 = new ArrayList<>();
                                                                        arrayList5 = new ArrayList<>();
                                                                        longSparseArray7 = new LongSparseArray();
                                                                        arrayList3 = arrayList26;
                                                                        arrayList15 = arrayList27;
                                                                        arrayList17 = arrayList28;
                                                                        i3 = i2;
                                                                    }
                                                                    i3 = i2;
                                                                    arrayList5 = arrayList4;
                                                                    longSparseArray7 = longSparseArray2;
                                                                    arrayList17 = arrayList2;
                                                                }
                                                            }
                                                            z17 = true;
                                                            tLRPC$TL_messages_forwardMessages.silent = z17;
                                                            if (messageObject != null) {
                                                            }
                                                            if (i != 0) {
                                                            }
                                                            if (messageObject2.messageOwner.peer_id instanceof TLRPC$TL_peerChannel) {
                                                            }
                                                            tLRPC$TL_messages_forwardMessages.random_id = arrayList19;
                                                            ArrayList<Integer> arrayList232 = arrayList8;
                                                            tLRPC$TL_messages_forwardMessages.id = arrayList232;
                                                            tLRPC$TL_messages_forwardMessages.drop_author = z;
                                                            tLRPC$TL_messages_forwardMessages.drop_media_captions = z2;
                                                            tLRPC$TL_messages_forwardMessages.with_my_score = arrayList.size() != 1 && arrayList9.get(0).messageOwner.with_my_score;
                                                            final ArrayList arrayList242 = new ArrayList(arrayList22);
                                                            arrayList2 = arrayList19;
                                                            arrayList3 = arrayList22;
                                                            longSparseArray = longSparseArray8;
                                                            tLRPC$Peer2 = tLRPC$Peer9;
                                                            longSparseArray2 = longSparseArray4;
                                                            tLRPC$InputPeer = tLRPC$InputPeer3;
                                                            final boolean z262 = i == 2147483646;
                                                            final boolean z272 = z23;
                                                            final ArrayList arrayList252 = arrayList15;
                                                            arrayList4 = arrayList232;
                                                            getConnectionsManager().sendRequest(tLRPC$TL_messages_forwardMessages, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda81
                                                                @Override // org.telegram.tgnet.RequestDelegate
                                                                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                                    SendMessagesHelper.this.lambda$sendMessage$14(j, i, z262, z272, longSparseArray2, arrayList252, arrayList242, messageObject2, tLRPC$Peer2, tLRPC$TL_messages_forwardMessages, tLObject, tLRPC$TL_error);
                                                                }
                                                            }, 68);
                                                            i2 = i6;
                                                            if (i2 != arrayList.size() - 1) {
                                                            }
                                                            i3 = i2;
                                                            arrayList5 = arrayList4;
                                                            longSparseArray7 = longSparseArray2;
                                                            arrayList17 = arrayList2;
                                                        }
                                                    }
                                                }
                                                i5 = 1;
                                                if (arrayList7.size() == 100) {
                                                }
                                                getMessagesStorage().putMessages(new ArrayList<>(arrayList7), false, true, false, 0, i == 0, 0);
                                                getMessagesController().updateInterfaceWithMessages(j8, arrayList22, i == 0);
                                                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                                                getUserConfig().saveConfig(false);
                                                final TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages2 = new TLRPC$TL_messages_forwardMessages();
                                                tLRPC$TL_messages_forwardMessages2.to_peer = tLRPC$InputPeer3;
                                                if (z3) {
                                                }
                                                z17 = true;
                                                tLRPC$TL_messages_forwardMessages2.silent = z17;
                                                if (messageObject != null) {
                                                }
                                                if (i != 0) {
                                                }
                                                if (messageObject2.messageOwner.peer_id instanceof TLRPC$TL_peerChannel) {
                                                }
                                                tLRPC$TL_messages_forwardMessages2.random_id = arrayList19;
                                                ArrayList<Integer> arrayList2322 = arrayList8;
                                                tLRPC$TL_messages_forwardMessages2.id = arrayList2322;
                                                tLRPC$TL_messages_forwardMessages2.drop_author = z;
                                                tLRPC$TL_messages_forwardMessages2.drop_media_captions = z2;
                                                tLRPC$TL_messages_forwardMessages2.with_my_score = arrayList.size() != 1 && arrayList9.get(0).messageOwner.with_my_score;
                                                final ArrayList arrayList2422 = new ArrayList(arrayList22);
                                                arrayList2 = arrayList19;
                                                arrayList3 = arrayList22;
                                                longSparseArray = longSparseArray8;
                                                tLRPC$Peer2 = tLRPC$Peer9;
                                                longSparseArray2 = longSparseArray4;
                                                tLRPC$InputPeer = tLRPC$InputPeer3;
                                                final boolean z2622 = i == 2147483646;
                                                final boolean z2722 = z23;
                                                final ArrayList arrayList2522 = arrayList15;
                                                arrayList4 = arrayList2322;
                                                getConnectionsManager().sendRequest(tLRPC$TL_messages_forwardMessages2, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda81
                                                    @Override // org.telegram.tgnet.RequestDelegate
                                                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                        SendMessagesHelper.this.lambda$sendMessage$14(j, i, z2622, z2722, longSparseArray2, arrayList2522, arrayList2422, messageObject2, tLRPC$Peer2, tLRPC$TL_messages_forwardMessages2, tLObject, tLRPC$TL_error);
                                                    }
                                                }, 68);
                                                i2 = i6;
                                                if (i2 != arrayList.size() - 1) {
                                                }
                                                i3 = i2;
                                                arrayList5 = arrayList4;
                                                longSparseArray7 = longSparseArray2;
                                                arrayList17 = arrayList2;
                                            }
                                        }
                                        r2 = 1;
                                        str3 = str5;
                                        ArrayList<Integer> arrayList212 = arrayList20;
                                        MessageObject messageObject32 = new MessageObject(this.currentAccount, tLRPC$TL_message, r2, r2);
                                        messageObject32.scheduled = i != 0;
                                        messageObject32.messageOwner.send_state = r2;
                                        messageObject32.wasJustSent = r2;
                                        ArrayList<MessageObject> arrayList222 = arrayList16;
                                        arrayList222.add(messageObject32);
                                        arrayList7 = arrayList15;
                                        arrayList7.add(tLRPC$TL_message);
                                        tLRPC$Chat2 = tLRPC$Chat4;
                                        if (messageObject2.replyMessageObject != null) {
                                        }
                                        putToSendingMessages(tLRPC$TL_message, i != 0);
                                        if (BuildVars.LOGS_ENABLED) {
                                        }
                                        if (messageObject != null) {
                                        }
                                        i5 = 1;
                                        if (arrayList7.size() == 100) {
                                        }
                                        getMessagesStorage().putMessages(new ArrayList<>(arrayList7), false, true, false, 0, i == 0, 0);
                                        getMessagesController().updateInterfaceWithMessages(j8, arrayList222, i == 0);
                                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                                        getUserConfig().saveConfig(false);
                                        final TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages22 = new TLRPC$TL_messages_forwardMessages();
                                        tLRPC$TL_messages_forwardMessages22.to_peer = tLRPC$InputPeer3;
                                        if (z3) {
                                        }
                                        z17 = true;
                                        tLRPC$TL_messages_forwardMessages22.silent = z17;
                                        if (messageObject != null) {
                                        }
                                        if (i != 0) {
                                        }
                                        if (messageObject2.messageOwner.peer_id instanceof TLRPC$TL_peerChannel) {
                                        }
                                        tLRPC$TL_messages_forwardMessages22.random_id = arrayList19;
                                        ArrayList<Integer> arrayList23222 = arrayList8;
                                        tLRPC$TL_messages_forwardMessages22.id = arrayList23222;
                                        tLRPC$TL_messages_forwardMessages22.drop_author = z;
                                        tLRPC$TL_messages_forwardMessages22.drop_media_captions = z2;
                                        tLRPC$TL_messages_forwardMessages22.with_my_score = arrayList.size() != 1 && arrayList9.get(0).messageOwner.with_my_score;
                                        final ArrayList arrayList24222 = new ArrayList(arrayList222);
                                        arrayList2 = arrayList19;
                                        arrayList3 = arrayList222;
                                        longSparseArray = longSparseArray8;
                                        tLRPC$Peer2 = tLRPC$Peer9;
                                        longSparseArray2 = longSparseArray4;
                                        tLRPC$InputPeer = tLRPC$InputPeer3;
                                        final boolean z26222 = i == 2147483646;
                                        final boolean z27222 = z23;
                                        final ArrayList arrayList25222 = arrayList15;
                                        arrayList4 = arrayList23222;
                                        getConnectionsManager().sendRequest(tLRPC$TL_messages_forwardMessages22, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda81
                                            @Override // org.telegram.tgnet.RequestDelegate
                                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                SendMessagesHelper.this.lambda$sendMessage$14(j, i, z26222, z27222, longSparseArray2, arrayList25222, arrayList24222, messageObject2, tLRPC$Peer2, tLRPC$TL_messages_forwardMessages22, tLObject, tLRPC$TL_error);
                                            }
                                        }, 68);
                                        i2 = i6;
                                        if (i2 != arrayList.size() - 1) {
                                        }
                                        i3 = i2;
                                        arrayList5 = arrayList4;
                                        longSparseArray7 = longSparseArray2;
                                        arrayList17 = arrayList2;
                                    }
                                }
                                str5 = str4;
                                if (tLRPC$TL_message.random_id == 0) {
                                }
                                ArrayList<Long> arrayList192 = arrayList6;
                                arrayList192.add(Long.valueOf(tLRPC$TL_message.random_id));
                                longSparseArray7.put(tLRPC$TL_message.random_id, tLRPC$TL_message);
                                ArrayList<Integer> arrayList202 = arrayList18;
                                arrayList202.add(Integer.valueOf(tLRPC$TL_message.fwd_msg_id));
                                int i132 = i4;
                                tLRPC$TL_message.date = i == 0 ? i : getConnectionsManager().getCurrentTime();
                                TLRPC$InputPeer tLRPC$InputPeer32 = tLRPC$InputPeer2;
                                z16 = tLRPC$InputPeer32 instanceof TLRPC$TL_inputPeerChannel;
                                if (z16) {
                                }
                                longSparseArray4 = longSparseArray7;
                                tLRPC$Message = messageObject2.messageOwner;
                                j6 = clientUserId;
                                if ((tLRPC$Message.flags & 1024) != 0) {
                                    tLRPC$TL_message.views = tLRPC$Message.views;
                                    tLRPC$TL_message.flags |= 1024;
                                }
                                tLRPC$TL_message.unread = true;
                                tLRPC$TL_message.dialog_id = j8;
                                TLRPC$Peer tLRPC$Peer92 = tLRPC$Peer4;
                                tLRPC$TL_message.peer_id = tLRPC$Peer92;
                                if (!MessageObject.isVoiceMessage(tLRPC$TL_message)) {
                                }
                                if (!z16) {
                                }
                                r2 = 1;
                                tLRPC$TL_message.media_unread = true;
                                str3 = str5;
                                ArrayList<Integer> arrayList2122 = arrayList202;
                                MessageObject messageObject322 = new MessageObject(this.currentAccount, tLRPC$TL_message, r2, r2);
                                messageObject322.scheduled = i != 0;
                                messageObject322.messageOwner.send_state = r2;
                                messageObject322.wasJustSent = r2;
                                ArrayList<MessageObject> arrayList2222 = arrayList16;
                                arrayList2222.add(messageObject322);
                                arrayList7 = arrayList15;
                                arrayList7.add(tLRPC$TL_message);
                                tLRPC$Chat2 = tLRPC$Chat4;
                                if (messageObject2.replyMessageObject != null) {
                                }
                                putToSendingMessages(tLRPC$TL_message, i != 0);
                                if (BuildVars.LOGS_ENABLED) {
                                }
                                if (messageObject != null) {
                                }
                                i5 = 1;
                                if (arrayList7.size() == 100) {
                                }
                                getMessagesStorage().putMessages(new ArrayList<>(arrayList7), false, true, false, 0, i == 0, 0);
                                getMessagesController().updateInterfaceWithMessages(j8, arrayList2222, i == 0);
                                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                                getUserConfig().saveConfig(false);
                                final TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages222 = new TLRPC$TL_messages_forwardMessages();
                                tLRPC$TL_messages_forwardMessages222.to_peer = tLRPC$InputPeer32;
                                if (z3) {
                                }
                                z17 = true;
                                tLRPC$TL_messages_forwardMessages222.silent = z17;
                                if (messageObject != null) {
                                }
                                if (i != 0) {
                                }
                                if (messageObject2.messageOwner.peer_id instanceof TLRPC$TL_peerChannel) {
                                }
                                tLRPC$TL_messages_forwardMessages222.random_id = arrayList192;
                                ArrayList<Integer> arrayList232222 = arrayList8;
                                tLRPC$TL_messages_forwardMessages222.id = arrayList232222;
                                tLRPC$TL_messages_forwardMessages222.drop_author = z;
                                tLRPC$TL_messages_forwardMessages222.drop_media_captions = z2;
                                tLRPC$TL_messages_forwardMessages222.with_my_score = arrayList.size() != 1 && arrayList9.get(0).messageOwner.with_my_score;
                                final ArrayList arrayList242222 = new ArrayList(arrayList2222);
                                arrayList2 = arrayList192;
                                arrayList3 = arrayList2222;
                                longSparseArray = longSparseArray8;
                                tLRPC$Peer2 = tLRPC$Peer92;
                                longSparseArray2 = longSparseArray4;
                                tLRPC$InputPeer = tLRPC$InputPeer32;
                                final boolean z262222 = i == 2147483646;
                                final boolean z272222 = z23;
                                final ArrayList arrayList252222 = arrayList15;
                                arrayList4 = arrayList232222;
                                getConnectionsManager().sendRequest(tLRPC$TL_messages_forwardMessages222, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda81
                                    @Override // org.telegram.tgnet.RequestDelegate
                                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                        SendMessagesHelper.this.lambda$sendMessage$14(j, i, z262222, z272222, longSparseArray2, arrayList252222, arrayList242222, messageObject2, tLRPC$Peer2, tLRPC$TL_messages_forwardMessages222, tLObject, tLRPC$TL_error);
                                    }
                                }, 68);
                                i2 = i6;
                                if (i2 != arrayList.size() - 1) {
                                }
                                i3 = i2;
                                arrayList5 = arrayList4;
                                longSparseArray7 = longSparseArray2;
                                arrayList17 = arrayList2;
                            } else {
                                tLRPC$TL_message.flags |= 64;
                            }
                        } else {
                            j5 = j4;
                        }
                        if (!tLRPC$TL_message.entities.isEmpty()) {
                        }
                        if (tLRPC$TL_message.attachPath == null) {
                        }
                        int newMessageId2 = getUserConfig().getNewMessageId();
                        tLRPC$TL_message.id = newMessageId2;
                        tLRPC$TL_message.local_id = newMessageId2;
                        tLRPC$TL_message.out = true;
                        j7 = messageObject2.messageOwner.grouped_id;
                        LongSparseArray longSparseArray82 = longSparseArray3;
                        if (j7 != 0) {
                        }
                        tLRPC$Peer3 = tLRPC$Peer;
                        if (tLRPC$Peer3.channel_id == 0) {
                        }
                        j8 = j;
                        tLRPC$Peer4 = tLRPC$Peer3;
                        tLRPC$Chat4 = tLRPC$Chat3;
                        sendAsPeerId = ChatObject.getSendAsPeerId(tLRPC$Chat4, getMessagesController().getChatFull(-j8), true);
                        if (sendAsPeerId != clientUserId) {
                        }
                    } else {
                        if (i10 == 0) {
                            i8 = ChatObject.isActionBannedByDefault(tLRPC$Chat, 19) ? 17 : 18;
                            longSparseArray = longSparseArray5;
                            j5 = j4;
                            str3 = str2;
                            i10 = i8;
                            tLRPC$Peer2 = tLRPC$Peer;
                            arrayList3 = arrayList16;
                            arrayList5 = arrayList18;
                            i3 = i4;
                            j6 = clientUserId;
                            tLRPC$Chat2 = tLRPC$Chat;
                            tLRPC$InputPeer = tLRPC$InputPeer2;
                        }
                        arrayList2 = arrayList17;
                        longSparseArray = longSparseArray5;
                        j5 = j4;
                        longSparseArray2 = longSparseArray7;
                        str3 = str2;
                        tLRPC$Peer2 = tLRPC$Peer;
                        arrayList3 = arrayList16;
                        arrayList4 = arrayList18;
                        i3 = i4;
                        j6 = clientUserId;
                        tLRPC$Chat2 = tLRPC$Chat;
                        tLRPC$InputPeer = tLRPC$InputPeer2;
                        arrayList5 = arrayList4;
                        longSparseArray7 = longSparseArray2;
                        arrayList17 = arrayList2;
                    }
                }
                i9 = i3 + 1;
                arrayList10 = arrayList;
                j9 = j;
                z21 = z;
                z22 = z2;
                longSparseArray5 = longSparseArray;
                tLRPC$Peer = tLRPC$Peer2;
                tLRPC$Chat = tLRPC$Chat2;
                tLRPC$InputPeer2 = tLRPC$InputPeer;
                clientUserId = j6;
                str2 = str3;
                arrayList16 = arrayList3;
                arrayList18 = arrayList5;
                j4 = j5;
            }
            return i10;
        }
        long j12 = getMessagesController().getEncryptedChat(Integer.valueOf((int) j)).user_id;
        boolean z28 = (!DialogObject.isUserDialog(j12) || getMessagesController().getUser(Long.valueOf(j12)) == null || (userFull = getMessagesController().getUserFull(j12)) == null) ? true : !userFull.voice_messages_forbidden;
        int i15 = 0;
        for (int i16 = 0; i16 < arrayList.size(); i16++) {
            MessageObject messageObject5 = arrayList.get(i16);
            if (z28 || !MessageObject.isVoiceMessage(messageObject5.messageOwner)) {
                if (!z28 && MessageObject.isRoundVideoMessage(messageObject5.messageOwner) && i15 == 0) {
                    i15 = 8;
                }
            } else if (i15 == 0) {
                i15 = 7;
            }
        }
        if (i15 == 0) {
            for (int i17 = 0; i17 < arrayList.size(); i17++) {
                processForwardFromMyName(arrayList.get(i17), j);
            }
        }
        return i15;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00fc  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0104  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$sendMessage$14(final long j, final int i, boolean z, boolean z2, LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, final MessageObject messageObject, final TLRPC$Peer tLRPC$Peer, final TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        boolean z3;
        TLRPC$Message tLRPC$Message;
        boolean z4;
        long j2;
        TLRPC$Updates tLRPC$Updates;
        SparseLongArray sparseLongArray;
        int i2;
        final TLRPC$Message tLRPC$Message2;
        int indexOf;
        int i3 = i;
        ArrayList arrayList3 = arrayList;
        ArrayList arrayList4 = arrayList2;
        boolean z5 = true;
        if (tLRPC$TL_error == null) {
            SparseLongArray sparseLongArray2 = new SparseLongArray();
            TLRPC$Updates tLRPC$Updates2 = (TLRPC$Updates) tLObject;
            int i4 = 0;
            while (i4 < tLRPC$Updates2.updates.size()) {
                TLRPC$Update tLRPC$Update = tLRPC$Updates2.updates.get(i4);
                if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                    TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) tLRPC$Update;
                    sparseLongArray2.put(tLRPC$TL_updateMessageID.id, tLRPC$TL_updateMessageID.random_id);
                    tLRPC$Updates2.updates.remove(i4);
                    i4--;
                }
                i4++;
            }
            Integer num = getMessagesController().dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                getMessagesController().dialogs_read_outbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = num;
            int i5 = 0;
            int i6 = 0;
            while (i5 < tLRPC$Updates2.updates.size()) {
                TLRPC$Update tLRPC$Update2 = tLRPC$Updates2.updates.get(i5);
                boolean z6 = tLRPC$Update2 instanceof TLRPC$TL_updateNewMessage;
                if (z6 || (tLRPC$Update2 instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update2 instanceof TLRPC$TL_updateNewScheduledMessage)) {
                    boolean z7 = i3 != 0;
                    tLRPC$Updates2.updates.remove(i5);
                    int i7 = i5 - 1;
                    if (z6) {
                        TLRPC$TL_updateNewMessage tLRPC$TL_updateNewMessage = (TLRPC$TL_updateNewMessage) tLRPC$Update2;
                        TLRPC$Message tLRPC$Message3 = tLRPC$TL_updateNewMessage.message;
                        getMessagesController().processNewDifferenceParams(-1, tLRPC$TL_updateNewMessage.pts, -1, tLRPC$TL_updateNewMessage.pts_count);
                        tLRPC$Message = tLRPC$Message3;
                    } else if (tLRPC$Update2 instanceof TLRPC$TL_updateNewScheduledMessage) {
                        tLRPC$Message = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update2).message;
                    } else {
                        TLRPC$TL_updateNewChannelMessage tLRPC$TL_updateNewChannelMessage = (TLRPC$TL_updateNewChannelMessage) tLRPC$Update2;
                        TLRPC$Message tLRPC$Message4 = tLRPC$TL_updateNewChannelMessage.message;
                        z3 = z7;
                        getMessagesController().processNewChannelDifferenceParams(tLRPC$TL_updateNewChannelMessage.pts, tLRPC$TL_updateNewChannelMessage.pts_count, tLRPC$Message4.peer_id.channel_id);
                        tLRPC$Message = tLRPC$Message4;
                        z4 = (z || tLRPC$Message.date == 2147483646) ? z3 : false;
                        ImageLoader.saveMessageThumbs(tLRPC$Message);
                        if (!z4) {
                            tLRPC$Message.unread = num2.intValue() < tLRPC$Message.id;
                        }
                        if (!z2) {
                            tLRPC$Message.out = z5;
                            tLRPC$Message.unread = false;
                            tLRPC$Message.media_unread = false;
                        }
                        j2 = sparseLongArray2.get(tLRPC$Message.id);
                        if (j2 != 0 || (tLRPC$Message2 = (TLRPC$Message) longSparseArray.get(j2)) == null || (indexOf = arrayList3.indexOf(tLRPC$Message2)) == -1) {
                            tLRPC$Updates = tLRPC$Updates2;
                            sparseLongArray = sparseLongArray2;
                            i5 = i7;
                        } else {
                            MessageObject messageObject2 = (MessageObject) arrayList4.get(indexOf);
                            arrayList3.remove(indexOf);
                            arrayList4.remove(indexOf);
                            final int i8 = tLRPC$Message2.id;
                            final ArrayList arrayList5 = new ArrayList();
                            arrayList5.add(tLRPC$Message);
                            TLRPC$Message tLRPC$Message5 = messageObject2.messageOwner;
                            tLRPC$Message5.post_author = tLRPC$Message.post_author;
                            if ((tLRPC$Message.flags & ConnectionsManager.FileTypeVideo) != 0) {
                                tLRPC$Message5.ttl_period = tLRPC$Message.ttl_period;
                                tLRPC$Message5.flags |= ConnectionsManager.FileTypeVideo;
                            }
                            updateMediaPaths(messageObject2, tLRPC$Message, tLRPC$Message.id, null, true);
                            final int mediaExistanceFlags = messageObject2.getMediaExistanceFlags();
                            tLRPC$Message2.id = tLRPC$Message.id;
                            int i9 = i6 + 1;
                            if (i3 != 0 && !z4) {
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda23
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.this.lambda$sendMessage$9(i8, tLRPC$Message2, arrayList5, messageObject, i);
                                    }
                                });
                                tLRPC$Updates = tLRPC$Updates2;
                                sparseLongArray = sparseLongArray2;
                            } else {
                                tLRPC$Updates = tLRPC$Updates2;
                                sparseLongArray = sparseLongArray2;
                                final TLRPC$Message tLRPC$Message6 = tLRPC$Message;
                                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda52
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.this.lambda$sendMessage$11(tLRPC$Message2, tLRPC$Peer, i8, i, arrayList5, j, tLRPC$Message6, mediaExistanceFlags);
                                    }
                                });
                            }
                            i5 = i7;
                            i6 = i9;
                        }
                        i2 = 1;
                    }
                    z3 = z7;
                    if (z) {
                    }
                    ImageLoader.saveMessageThumbs(tLRPC$Message);
                    if (!z4) {
                    }
                    if (!z2) {
                    }
                    j2 = sparseLongArray2.get(tLRPC$Message.id);
                    if (j2 != 0) {
                    }
                    tLRPC$Updates = tLRPC$Updates2;
                    sparseLongArray = sparseLongArray2;
                    i5 = i7;
                    i2 = 1;
                } else {
                    tLRPC$Updates = tLRPC$Updates2;
                    sparseLongArray = sparseLongArray2;
                    i2 = 1;
                }
                i5 += i2;
                i3 = i;
                arrayList3 = arrayList;
                arrayList4 = arrayList2;
                tLRPC$Updates2 = tLRPC$Updates;
                sparseLongArray2 = sparseLongArray;
                z5 = true;
            }
            TLRPC$Updates tLRPC$Updates3 = tLRPC$Updates2;
            if (!tLRPC$Updates3.updates.isEmpty()) {
                getMessagesController().processUpdates(tLRPC$Updates3, false);
            }
            getStatsController().incrementSentItemsCount(ApplicationLoader.getCurrentNetworkType(), 1, i6);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda59
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$sendMessage$12(tLRPC$TL_error, tLRPC$TL_messages_forwardMessages);
                }
            });
        }
        for (int i10 = 0; i10 < arrayList.size(); i10++) {
            final TLRPC$Message tLRPC$Message7 = (TLRPC$Message) arrayList.get(i10);
            getMessagesStorage().markMessageAsSendError(tLRPC$Message7, i != 0);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda45
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$sendMessage$13(tLRPC$Message7, i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$9(final int i, final TLRPC$Message tLRPC$Message, final ArrayList arrayList, final MessageObject messageObject, final int i2) {
        ArrayList<Integer> arrayList2 = new ArrayList<>();
        arrayList2.add(Integer.valueOf(i));
        getMessagesController().deleteMessages(arrayList2, null, null, tLRPC$Message.dialog_id, false, true);
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendMessage$8(arrayList, messageObject, tLRPC$Message, i, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$8(ArrayList arrayList, final MessageObject messageObject, final TLRPC$Message tLRPC$Message, final int i, final int i2) {
        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList, true, false, false, 0, false, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda37
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendMessage$7(messageObject, tLRPC$Message, i, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$7(MessageObject messageObject, TLRPC$Message tLRPC$Message, int i, int i2) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, true));
        getMessagesController().updateInterfaceWithMessages(tLRPC$Message.dialog_id, arrayList, false);
        getMediaDataController().increasePeerRaiting(tLRPC$Message.dialog_id);
        processSentMessage(i);
        removeFromSendingMessages(i, i2 != 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$11(final TLRPC$Message tLRPC$Message, TLRPC$Peer tLRPC$Peer, final int i, final int i2, ArrayList arrayList, final long j, final TLRPC$Message tLRPC$Message2, final int i3) {
        getMessagesStorage().updateMessageStateAndId(tLRPC$Message.random_id, MessageObject.getPeerId(tLRPC$Peer), Integer.valueOf(i), tLRPC$Message.id, 0, false, i2 != 0 ? 1 : 0);
        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList, true, false, false, 0, i2 != 0, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda51
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendMessage$10(tLRPC$Message, j, i, tLRPC$Message2, i3, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$10(TLRPC$Message tLRPC$Message, long j, int i, TLRPC$Message tLRPC$Message2, int i2, int i3) {
        tLRPC$Message.send_state = 0;
        getMediaDataController().increasePeerRaiting(j);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i4 = NotificationCenter.messageReceivedByServer;
        Object[] objArr = new Object[7];
        objArr[0] = Integer.valueOf(i);
        objArr[1] = Integer.valueOf(tLRPC$Message2.id);
        objArr[2] = tLRPC$Message2;
        objArr[3] = Long.valueOf(j);
        objArr[4] = 0L;
        objArr[5] = Integer.valueOf(i2);
        objArr[6] = Boolean.valueOf(i3 != 0);
        notificationCenter.postNotificationName(i4, objArr);
        processSentMessage(i);
        removeFromSendingMessages(i, i3 != 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$12(TLRPC$TL_error tLRPC$TL_error, TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, null, tLRPC$TL_messages_forwardMessages, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendMessage$13(TLRPC$Message tLRPC$Message, int i) {
        tLRPC$Message.send_state = 2;
        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
        processSentMessage(tLRPC$Message.id);
        removeFromSendingMessages(tLRPC$Message.id, i != 0);
    }

    public static int canSendMessageToChat(TLRPC$Chat tLRPC$Chat, MessageObject messageObject) {
        boolean canSendStickers = ChatObject.canSendStickers(tLRPC$Chat);
        boolean canSendPhoto = ChatObject.canSendPhoto(tLRPC$Chat);
        boolean canSendVideo = ChatObject.canSendVideo(tLRPC$Chat);
        boolean canSendDocument = ChatObject.canSendDocument(tLRPC$Chat);
        ChatObject.canSendEmbed(tLRPC$Chat);
        boolean canSendPolls = ChatObject.canSendPolls(tLRPC$Chat);
        boolean canSendRoundVideo = ChatObject.canSendRoundVideo(tLRPC$Chat);
        boolean canSendVoice = ChatObject.canSendVoice(tLRPC$Chat);
        boolean canSendMusic = ChatObject.canSendMusic(tLRPC$Chat);
        boolean z = messageObject.isSticker() || messageObject.isAnimatedSticker() || messageObject.isGif() || messageObject.isGame();
        if (!canSendStickers && z) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 8) ? 4 : 1;
        } else if (!canSendPhoto && (messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPhoto) && !messageObject.isVideo() && !z) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 16) ? 10 : 12;
        } else if (!canSendMusic && messageObject.isMusic()) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 18) ? 19 : 20;
        } else if (!canSendVideo && messageObject.isVideo() && !z) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 17) ? 9 : 11;
        } else if (!canSendPolls && (messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaPoll)) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 10) ? 6 : 3;
        } else if (!canSendVoice && MessageObject.isVoiceMessage(messageObject.messageOwner)) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 20) ? 13 : 14;
        } else if (!canSendRoundVideo && MessageObject.isRoundVideoMessage(messageObject.messageOwner)) {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 21) ? 15 : 16;
        } else if (canSendDocument || !(messageObject.messageOwner.media instanceof TLRPC$TL_messageMediaDocument) || z) {
            return 0;
        } else {
            return ChatObject.isActionBannedByDefault(tLRPC$Chat, 19) ? 17 : 18;
        }
    }

    private void writePreviousMessageData(TLRPC$Message tLRPC$Message, SerializedData serializedData) {
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia == null) {
            new TLRPC$TL_messageMediaEmpty().serializeToStream(serializedData);
        } else {
            tLRPC$MessageMedia.serializeToStream(serializedData);
        }
        String str = tLRPC$Message.message;
        if (str == null) {
            str = "";
        }
        serializedData.writeString(str);
        String str2 = tLRPC$Message.attachPath;
        serializedData.writeString(str2 != null ? str2 : "");
        int size = tLRPC$Message.entities.size();
        serializedData.writeInt32(size);
        for (int i = 0; i < size; i++) {
            tLRPC$Message.entities.get(i).serializeToStream(serializedData);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:218:0x04bb A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /* JADX WARN: Removed duplicated region for block: B:221:0x04c7 A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /* JADX WARN: Removed duplicated region for block: B:224:0x04d9 A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /* JADX WARN: Removed duplicated region for block: B:239:0x0525 A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /* JADX WARN: Removed duplicated region for block: B:242:0x052a A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /* JADX WARN: Removed duplicated region for block: B:243:0x0542  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0154 A[Catch: Exception -> 0x05d8, TryCatch #0 {Exception -> 0x05d8, blocks: (B:9:0x0022, B:11:0x002c, B:13:0x003e, B:20:0x004f, B:23:0x0059, B:26:0x005e, B:28:0x0062, B:40:0x0088, B:43:0x008e, B:45:0x0094, B:47:0x009b, B:74:0x016e, B:76:0x0172, B:77:0x0176, B:85:0x0190, B:90:0x0199, B:92:0x019d, B:94:0x01ad, B:96:0x01b1, B:113:0x020a, B:115:0x0247, B:117:0x024f, B:120:0x0254, B:121:0x025b, B:122:0x025e, B:125:0x0289, B:127:0x0291, B:141:0x02b2, B:143:0x02bb, B:145:0x02c3, B:147:0x02d3, B:148:0x02f0, B:150:0x0302, B:157:0x032e, B:159:0x0342, B:161:0x0348, B:163:0x034e, B:216:0x04a4, B:218:0x04bb, B:219:0x04c3, B:221:0x04c7, B:222:0x04d5, B:224:0x04d9, B:228:0x04ec, B:230:0x04f2, B:237:0x051f, B:232:0x04fb, B:234:0x050f, B:236:0x0515, B:239:0x0525, B:242:0x052a, B:246:0x0547, B:247:0x054c, B:251:0x0564, B:252:0x0569, B:255:0x0583, B:259:0x059e, B:260:0x05a2, B:264:0x05be, B:265:0x05c2, B:164:0x0351, B:153:0x030b, B:155:0x0325, B:156:0x032a, B:168:0x0370, B:170:0x037b, B:172:0x0383, B:174:0x0394, B:175:0x03a5, B:176:0x03ae, B:179:0x03c0, B:183:0x03c9, B:185:0x03d0, B:187:0x03d8, B:194:0x0403, B:196:0x041d, B:198:0x042a, B:199:0x042e, B:190:0x03e1, B:192:0x03fb, B:193:0x0400, B:202:0x043b, B:209:0x0475, B:211:0x0489, B:213:0x0496, B:214:0x049a, B:205:0x0453, B:207:0x046d, B:208:0x0472, B:97:0x01ba, B:99:0x01c0, B:100:0x01c7, B:102:0x01cb, B:111:0x0204, B:103:0x01d4, B:105:0x01e7, B:107:0x01ed, B:108:0x01f6, B:110:0x01fe, B:82:0x0185, B:84:0x018d, B:29:0x006a, B:31:0x006e, B:37:0x007e, B:48:0x00ae, B:50:0x00c0, B:51:0x00c5, B:53:0x00ef, B:55:0x0102, B:57:0x0108, B:59:0x010e, B:73:0x0162, B:60:0x0111, B:63:0x0135, B:70:0x0154, B:71:0x015e), top: B:270:0x0022 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void editMessage(MessageObject messageObject, TLRPC$TL_photo tLRPC$TL_photo, VideoEditedInfo videoEditedInfo, TLRPC$TL_document tLRPC$TL_document, String str, HashMap<String, String> hashMap, boolean z, boolean z2, Object obj) {
        Object obj2;
        char c;
        Object obj3;
        String str2;
        char c2;
        HashMap<String, String> hashMap2;
        VideoEditedInfo videoEditedInfo2;
        VideoEditedInfo videoEditedInfo3;
        boolean z3;
        String str3;
        boolean z4;
        TLRPC$InputMedia tLRPC$InputMedia;
        DelayedMessage delayedMessage;
        CharSequence charSequence;
        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument;
        VideoEditedInfo videoEditedInfo4;
        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument2;
        String str4;
        char c3;
        HashMap<String, String> hashMap3;
        TLRPC$TL_inputMediaPhoto tLRPC$TL_inputMediaPhoto;
        boolean z5;
        String str5;
        TLRPC$EncryptedChat encryptedChat;
        TLRPC$TL_photo tLRPC$TL_photo2 = tLRPC$TL_photo;
        TLRPC$TL_document tLRPC$TL_document2 = tLRPC$TL_document;
        if (messageObject == null) {
            return;
        }
        HashMap<String, String> hashMap4 = hashMap == null ? new HashMap<>() : hashMap;
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        messageObject.cancelEditing = false;
        try {
            long dialogId = messageObject.getDialogId();
            boolean z6 = !DialogObject.isEncryptedDialog(dialogId) || ((encryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)))) != null && AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101);
            if (z) {
                TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                if (!(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) && tLRPC$MessageMedia != null && !(tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaEmpty)) {
                    if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) {
                        tLRPC$TL_photo2 = (TLRPC$TL_photo) tLRPC$MessageMedia.photo;
                        videoEditedInfo2 = videoEditedInfo;
                        c2 = 2;
                    } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument) {
                        tLRPC$TL_document2 = (TLRPC$TL_document) tLRPC$MessageMedia.document;
                        if (!MessageObject.isVideoDocument(tLRPC$TL_document2) && videoEditedInfo == null) {
                            c2 = 7;
                            videoEditedInfo2 = messageObject.videoEditedInfo;
                        }
                        c2 = 3;
                        videoEditedInfo2 = messageObject.videoEditedInfo;
                    } else {
                        videoEditedInfo2 = videoEditedInfo;
                        c2 = 65535;
                    }
                    HashMap<String, String> hashMap5 = tLRPC$Message.params;
                    Object obj4 = (obj == null || hashMap5 == null || !hashMap5.containsKey("parentObject")) ? obj : hashMap5.get("parentObject");
                    messageObject.editingMessage = tLRPC$Message.message;
                    messageObject.editingMessageEntities = tLRPC$Message.entities;
                    str2 = tLRPC$Message.attachPath;
                    obj2 = "originalPath";
                    obj3 = obj4;
                    hashMap2 = hashMap5;
                }
                videoEditedInfo2 = videoEditedInfo;
                c2 = 1;
                HashMap<String, String> hashMap52 = tLRPC$Message.params;
                if (obj == null) {
                }
                messageObject.editingMessage = tLRPC$Message.message;
                messageObject.editingMessageEntities = tLRPC$Message.entities;
                str2 = tLRPC$Message.attachPath;
                obj2 = "originalPath";
                obj3 = obj4;
                hashMap2 = hashMap52;
            } else {
                TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
                messageObject.previousMedia = tLRPC$MessageMedia2;
                messageObject.previousMessage = tLRPC$Message.message;
                messageObject.previousMessageEntities = tLRPC$Message.entities;
                messageObject.previousAttachPath = tLRPC$Message.attachPath;
                if (tLRPC$MessageMedia2 == null) {
                    new TLRPC$TL_messageMediaEmpty();
                }
                SerializedData serializedData = new SerializedData(true);
                writePreviousMessageData(tLRPC$Message, serializedData);
                SerializedData serializedData2 = new SerializedData(serializedData.length());
                writePreviousMessageData(tLRPC$Message, serializedData2);
                obj2 = "originalPath";
                hashMap4.put("prevMedia", Base64.encodeToString(serializedData2.toByteArray(), 0));
                serializedData2.cleanup();
                if (tLRPC$TL_photo2 != null) {
                    TLRPC$TL_messageMediaPhoto tLRPC$TL_messageMediaPhoto = new TLRPC$TL_messageMediaPhoto();
                    tLRPC$Message.media = tLRPC$TL_messageMediaPhoto;
                    tLRPC$TL_messageMediaPhoto.flags |= 3;
                    tLRPC$TL_messageMediaPhoto.photo = tLRPC$TL_photo2;
                    tLRPC$TL_messageMediaPhoto.spoiler = z2;
                    if (str != null && str.length() > 0 && str.startsWith("http")) {
                        tLRPC$Message.attachPath = str;
                    } else {
                        ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photo2.sizes;
                        tLRPC$Message.attachPath = FileLoader.getInstance(this.currentAccount).getPathToAttach(arrayList.get(arrayList.size() - 1).location, true).toString();
                    }
                    c = 2;
                } else if (tLRPC$TL_document2 != null) {
                    TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                    tLRPC$Message.media = tLRPC$TL_messageMediaDocument;
                    tLRPC$TL_messageMediaDocument.flags |= 3;
                    tLRPC$TL_messageMediaDocument.document = tLRPC$TL_document2;
                    tLRPC$TL_messageMediaDocument.spoiler = z2;
                    if (!MessageObject.isVideoDocument(tLRPC$TL_document) && videoEditedInfo == null) {
                        c = 7;
                        if (videoEditedInfo != null) {
                            hashMap4.put("ve", videoEditedInfo.getString());
                        }
                        tLRPC$Message.attachPath = str;
                    }
                    c = 3;
                    if (videoEditedInfo != null) {
                    }
                    tLRPC$Message.attachPath = str;
                } else {
                    c = 1;
                }
                tLRPC$Message.params = hashMap4;
                tLRPC$Message.send_state = 3;
                obj3 = obj;
                str2 = str;
                c2 = c;
                hashMap2 = hashMap4;
                videoEditedInfo2 = videoEditedInfo;
            }
            if (tLRPC$Message.attachPath == null) {
                tLRPC$Message.attachPath = "";
            }
            tLRPC$Message.local_id = 0;
            int i = messageObject.type;
            TLRPC$TL_document tLRPC$TL_document3 = tLRPC$TL_document2;
            if ((i == 3 || videoEditedInfo2 != null || i == 2) && !TextUtils.isEmpty(tLRPC$Message.attachPath)) {
                messageObject.attachPathExists = true;
            }
            VideoEditedInfo videoEditedInfo5 = messageObject.videoEditedInfo;
            if (videoEditedInfo5 != null && videoEditedInfo2 == null) {
                videoEditedInfo2 = videoEditedInfo5;
            }
            if (z) {
                videoEditedInfo3 = videoEditedInfo2;
                z3 = z6;
            } else {
                CharSequence charSequence2 = messageObject.editingMessage;
                if (charSequence2 != null) {
                    String str6 = tLRPC$Message.message;
                    String charSequence3 = charSequence2.toString();
                    tLRPC$Message.message = charSequence3;
                    videoEditedInfo3 = videoEditedInfo2;
                    messageObject.caption = null;
                    if (c2 == 1) {
                        ArrayList<TLRPC$MessageEntity> arrayList2 = messageObject.editingMessageEntities;
                        if (arrayList2 != null) {
                            tLRPC$Message.entities = arrayList2;
                            tLRPC$Message.flags |= 128;
                        } else if (!TextUtils.equals(str6, charSequence3)) {
                            tLRPC$Message.flags &= -129;
                        }
                    } else {
                        ArrayList<TLRPC$MessageEntity> arrayList3 = messageObject.editingMessageEntities;
                        if (arrayList3 != null) {
                            tLRPC$Message.entities = arrayList3;
                            tLRPC$Message.flags |= 128;
                        } else {
                            ArrayList<TLRPC$MessageEntity> entities = getMediaDataController().getEntities(new CharSequence[]{messageObject.editingMessage}, z6);
                            if (entities != null && !entities.isEmpty()) {
                                tLRPC$Message.entities = entities;
                                tLRPC$Message.flags |= 128;
                            } else if (!TextUtils.equals(str6, tLRPC$Message.message)) {
                                tLRPC$Message.flags &= -129;
                            }
                        }
                        messageObject.generateCaption();
                    }
                } else {
                    videoEditedInfo3 = videoEditedInfo2;
                }
                ArrayList<TLRPC$Message> arrayList4 = new ArrayList<>();
                arrayList4.add(tLRPC$Message);
                getMessagesStorage().putMessages(arrayList4, false, true, false, 0, messageObject.scheduled, MessageObject.getTopicId(tLRPC$Message, getMessagesController().isForum(tLRPC$Message)));
                getMessagesController().getTopicsController().processEditedMessage(tLRPC$Message);
                messageObject.type = -1;
                messageObject.setType();
                if (c2 == 1) {
                    TLRPC$MessageMedia tLRPC$MessageMedia3 = messageObject.messageOwner.media;
                    if (!(tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaPhoto) && !(tLRPC$MessageMedia3 instanceof TLRPC$TL_messageMediaDocument)) {
                        messageObject.resetLayout();
                        messageObject.checkLayout();
                    }
                    messageObject.generateCaption();
                }
                messageObject.createMessageSendInfo();
                ArrayList arrayList5 = new ArrayList();
                arrayList5.add(messageObject);
                z3 = z6;
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(dialogId), arrayList5);
            }
            if (hashMap2 != null) {
                Object obj5 = obj2;
                if (hashMap2.containsKey(obj5)) {
                    str3 = hashMap2.get(obj5);
                    if ((c2 >= 1 || c2 > 3) && (c2 < 5 || c2 > '\b')) {
                        return;
                    }
                    if (c2 != 1) {
                        if (c2 == 2) {
                            TLRPC$InputMedia tLRPC$TL_inputMediaUploadedPhoto = new TLRPC$TL_inputMediaUploadedPhoto();
                            tLRPC$TL_inputMediaUploadedPhoto.spoiler = z2;
                            if (hashMap2 == null || (str5 = hashMap2.get("masks")) == null) {
                                c3 = c2;
                                hashMap3 = hashMap2;
                            } else {
                                SerializedData serializedData3 = new SerializedData(Utilities.hexToBytes(str5));
                                int i2 = 0;
                                int readInt32 = serializedData3.readInt32(false);
                                while (i2 < readInt32) {
                                    tLRPC$TL_inputMediaUploadedPhoto.stickers.add(TLRPC$InputDocument.TLdeserialize(serializedData3, serializedData3.readInt32(false), false));
                                    i2++;
                                    readInt32 = readInt32;
                                    hashMap2 = hashMap2;
                                    c2 = c2;
                                }
                                c3 = c2;
                                hashMap3 = hashMap2;
                                tLRPC$TL_inputMediaUploadedPhoto.flags |= 1;
                                serializedData3.cleanup();
                            }
                            if (tLRPC$TL_photo2.access_hash == 0) {
                                tLRPC$TL_inputMediaPhoto = tLRPC$TL_inputMediaUploadedPhoto;
                                z5 = true;
                            } else {
                                TLRPC$TL_inputMediaPhoto tLRPC$TL_inputMediaPhoto2 = new TLRPC$TL_inputMediaPhoto();
                                TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                                tLRPC$TL_inputMediaPhoto2.id = tLRPC$TL_inputPhoto;
                                tLRPC$TL_inputPhoto.id = tLRPC$TL_photo2.id;
                                tLRPC$TL_inputPhoto.access_hash = tLRPC$TL_photo2.access_hash;
                                byte[] bArr = tLRPC$TL_photo2.file_reference;
                                tLRPC$TL_inputPhoto.file_reference = bArr;
                                if (bArr == null) {
                                    tLRPC$TL_inputPhoto.file_reference = new byte[0];
                                }
                                tLRPC$TL_inputMediaPhoto2.spoiler = z2;
                                tLRPC$TL_inputMediaPhoto = tLRPC$TL_inputMediaPhoto2;
                                z5 = false;
                            }
                            DelayedMessage delayedMessage2 = new DelayedMessage(dialogId);
                            delayedMessage2.type = 0;
                            delayedMessage2.obj = messageObject;
                            delayedMessage2.originalPath = str3;
                            delayedMessage2.parentObject = obj3;
                            delayedMessage2.inputUploadMedia = tLRPC$TL_inputMediaUploadedPhoto;
                            delayedMessage2.performMediaUpload = z5;
                            if (str2 != null && str2.length() > 0 && str2.startsWith("http")) {
                                delayedMessage2.httpLocation = str2;
                            } else {
                                ArrayList<TLRPC$PhotoSize> arrayList6 = tLRPC$TL_photo2.sizes;
                                delayedMessage2.photoSize = arrayList6.get(arrayList6.size() - 1);
                                delayedMessage2.locationParent = tLRPC$TL_photo2;
                            }
                            hashMap2 = hashMap3;
                            z4 = z5;
                            delayedMessage = delayedMessage2;
                            c2 = c3;
                            tLRPC$InputMedia = tLRPC$TL_inputMediaPhoto;
                        } else {
                            HashMap<String, String> hashMap6 = hashMap2;
                            if (c2 == 3) {
                                TLRPC$InputMedia tLRPC$TL_inputMediaUploadedDocument = new TLRPC$TL_inputMediaUploadedDocument();
                                tLRPC$TL_inputMediaUploadedDocument.spoiler = z2;
                                hashMap2 = hashMap6;
                                if (hashMap6 != null && (str4 = hashMap2.get("masks")) != null) {
                                    SerializedData serializedData4 = new SerializedData(Utilities.hexToBytes(str4));
                                    boolean z7 = false;
                                    int readInt322 = serializedData4.readInt32(false);
                                    int i3 = 0;
                                    while (i3 < readInt322) {
                                        tLRPC$TL_inputMediaUploadedDocument.stickers.add(TLRPC$InputDocument.TLdeserialize(serializedData4, serializedData4.readInt32(z7), z7));
                                        i3++;
                                        z7 = false;
                                    }
                                    tLRPC$TL_inputMediaUploadedDocument.flags |= 1;
                                    serializedData4.cleanup();
                                }
                                tLRPC$TL_inputMediaUploadedDocument.mime_type = tLRPC$TL_document3.mime_type;
                                tLRPC$TL_inputMediaUploadedDocument.attributes = tLRPC$TL_document3.attributes;
                                if (messageObject.isGif()) {
                                    videoEditedInfo4 = videoEditedInfo3;
                                } else {
                                    if (videoEditedInfo3 != null) {
                                        videoEditedInfo4 = videoEditedInfo3;
                                        if (!videoEditedInfo4.muted) {
                                        }
                                    } else {
                                        videoEditedInfo4 = videoEditedInfo3;
                                    }
                                    tLRPC$TL_inputMediaUploadedDocument.nosound_video = true;
                                    if (BuildVars.DEBUG_VERSION) {
                                        FileLog.d("nosound_video = true");
                                    }
                                }
                                if (tLRPC$TL_document3.access_hash == 0) {
                                    tLRPC$TL_inputMediaDocument2 = tLRPC$TL_inputMediaUploadedDocument;
                                    z4 = true;
                                } else {
                                    TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument3 = new TLRPC$TL_inputMediaDocument();
                                    TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
                                    tLRPC$TL_inputMediaDocument3.id = tLRPC$TL_inputDocument;
                                    tLRPC$TL_inputDocument.id = tLRPC$TL_document3.id;
                                    tLRPC$TL_inputDocument.access_hash = tLRPC$TL_document3.access_hash;
                                    byte[] bArr2 = tLRPC$TL_document3.file_reference;
                                    tLRPC$TL_inputDocument.file_reference = bArr2;
                                    if (bArr2 == null) {
                                        tLRPC$TL_inputDocument.file_reference = new byte[0];
                                    }
                                    tLRPC$TL_inputMediaDocument3.spoiler = z2;
                                    z4 = false;
                                    tLRPC$TL_inputMediaDocument2 = tLRPC$TL_inputMediaDocument3;
                                }
                                DelayedMessage delayedMessage3 = new DelayedMessage(dialogId);
                                delayedMessage3.type = 1;
                                delayedMessage3.obj = messageObject;
                                delayedMessage3.originalPath = str3;
                                delayedMessage3.parentObject = obj3;
                                delayedMessage3.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument;
                                delayedMessage3.performMediaUpload = z4;
                                if (!tLRPC$TL_document3.thumbs.isEmpty()) {
                                    TLRPC$PhotoSize tLRPC$PhotoSize = tLRPC$TL_document3.thumbs.get(0);
                                    if (!(tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize)) {
                                        delayedMessage3.photoSize = tLRPC$PhotoSize;
                                        delayedMessage3.locationParent = tLRPC$TL_document3;
                                    }
                                }
                                delayedMessage3.videoEditedInfo = videoEditedInfo4;
                                tLRPC$InputMedia = tLRPC$TL_inputMediaDocument2;
                                delayedMessage = delayedMessage3;
                            } else {
                                hashMap2 = hashMap6;
                                if (c2 == 7) {
                                    TLRPC$InputMedia tLRPC$TL_inputMediaUploadedDocument2 = new TLRPC$TL_inputMediaUploadedDocument();
                                    tLRPC$TL_inputMediaUploadedDocument2.mime_type = tLRPC$TL_document3.mime_type;
                                    tLRPC$TL_inputMediaUploadedDocument2.attributes = tLRPC$TL_document3.attributes;
                                    tLRPC$TL_inputMediaUploadedDocument2.spoiler = z2;
                                    if (tLRPC$TL_document3.access_hash == 0) {
                                        tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaUploadedDocument2;
                                        z4 = true;
                                    } else {
                                        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument4 = new TLRPC$TL_inputMediaDocument();
                                        TLRPC$TL_inputDocument tLRPC$TL_inputDocument2 = new TLRPC$TL_inputDocument();
                                        tLRPC$TL_inputMediaDocument4.id = tLRPC$TL_inputDocument2;
                                        tLRPC$TL_inputDocument2.id = tLRPC$TL_document3.id;
                                        tLRPC$TL_inputDocument2.access_hash = tLRPC$TL_document3.access_hash;
                                        byte[] bArr3 = tLRPC$TL_document3.file_reference;
                                        tLRPC$TL_inputDocument2.file_reference = bArr3;
                                        if (bArr3 == null) {
                                            tLRPC$TL_inputDocument2.file_reference = new byte[0];
                                        }
                                        tLRPC$TL_inputMediaDocument4.spoiler = z2;
                                        z4 = false;
                                        tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaDocument4;
                                    }
                                    delayedMessage = new DelayedMessage(dialogId);
                                    delayedMessage.originalPath = str3;
                                    delayedMessage.type = 2;
                                    delayedMessage.obj = messageObject;
                                    if (!tLRPC$TL_document3.thumbs.isEmpty()) {
                                        TLRPC$PhotoSize tLRPC$PhotoSize2 = tLRPC$TL_document3.thumbs.get(0);
                                        if (!(tLRPC$PhotoSize2 instanceof TLRPC$TL_photoStrippedSize)) {
                                            delayedMessage.photoSize = tLRPC$PhotoSize2;
                                            delayedMessage.locationParent = tLRPC$TL_document3;
                                        }
                                    }
                                    delayedMessage.parentObject = obj3;
                                    delayedMessage.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument2;
                                    delayedMessage.performMediaUpload = z4;
                                    tLRPC$InputMedia = tLRPC$TL_inputMediaDocument;
                                }
                            }
                        }
                        TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = new TLRPC$TL_messages_editMessage();
                        tLRPC$TL_messages_editMessage.id = messageObject.getId();
                        tLRPC$TL_messages_editMessage.peer = getMessagesController().getInputPeer(dialogId);
                        if (tLRPC$InputMedia != null) {
                            tLRPC$TL_messages_editMessage.flags |= 16384;
                            tLRPC$TL_messages_editMessage.media = tLRPC$InputMedia;
                        }
                        if (messageObject.scheduled) {
                            tLRPC$TL_messages_editMessage.schedule_date = messageObject.messageOwner.date;
                            tLRPC$TL_messages_editMessage.flags |= 32768;
                        }
                        charSequence = messageObject.editingMessage;
                        if (charSequence != null) {
                            tLRPC$TL_messages_editMessage.message = charSequence.toString();
                            int i4 = tLRPC$TL_messages_editMessage.flags | LiteMode.FLAG_AUTOPLAY_GIFS;
                            tLRPC$TL_messages_editMessage.flags = i4;
                            tLRPC$TL_messages_editMessage.no_webpage = !messageObject.editingMessageSearchWebPage;
                            ArrayList<TLRPC$MessageEntity> arrayList7 = messageObject.editingMessageEntities;
                            if (arrayList7 != null) {
                                tLRPC$TL_messages_editMessage.entities = arrayList7;
                                tLRPC$TL_messages_editMessage.flags = i4 | 8;
                            } else {
                                ArrayList<TLRPC$MessageEntity> entities2 = getMediaDataController().getEntities(new CharSequence[]{messageObject.editingMessage}, z3);
                                if (entities2 != null && !entities2.isEmpty()) {
                                    tLRPC$TL_messages_editMessage.entities = entities2;
                                    tLRPC$TL_messages_editMessage.flags |= 8;
                                }
                            }
                            messageObject.editingMessage = null;
                            messageObject.editingMessageEntities = null;
                        }
                        if (delayedMessage != null) {
                            delayedMessage.sendRequest = tLRPC$TL_messages_editMessage;
                        }
                        if (c2 != 1) {
                            performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, null, delayedMessage, obj3, hashMap2, messageObject.scheduled);
                            return;
                        } else if (c2 == 2) {
                            if (z4) {
                                performSendDelayedMessage(delayedMessage);
                                return;
                            } else {
                                performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, str3, null, true, delayedMessage, obj3, hashMap2, messageObject.scheduled);
                                return;
                            }
                        } else {
                            HashMap<String, String> hashMap7 = hashMap2;
                            if (c2 == 3) {
                                if (z4) {
                                    performSendDelayedMessage(delayedMessage);
                                    return;
                                } else {
                                    performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, str3, delayedMessage, obj3, hashMap7, messageObject.scheduled);
                                    return;
                                }
                            } else if (c2 == 6) {
                                performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, str3, delayedMessage, obj3, hashMap7, messageObject.scheduled);
                                return;
                            } else if (c2 == 7) {
                                if (z4) {
                                    performSendDelayedMessage(delayedMessage);
                                    return;
                                } else {
                                    performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, str3, delayedMessage, obj3, hashMap7, messageObject.scheduled);
                                    return;
                                }
                            } else if (c2 == '\b') {
                                if (z4) {
                                    performSendDelayedMessage(delayedMessage);
                                    return;
                                } else {
                                    performSendMessageRequest(tLRPC$TL_messages_editMessage, messageObject, str3, delayedMessage, obj3, hashMap7, messageObject.scheduled);
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                    }
                    z4 = false;
                    tLRPC$InputMedia = null;
                    delayedMessage = null;
                    TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage2 = new TLRPC$TL_messages_editMessage();
                    tLRPC$TL_messages_editMessage2.id = messageObject.getId();
                    tLRPC$TL_messages_editMessage2.peer = getMessagesController().getInputPeer(dialogId);
                    if (tLRPC$InputMedia != null) {
                    }
                    if (messageObject.scheduled) {
                    }
                    charSequence = messageObject.editingMessage;
                    if (charSequence != null) {
                    }
                    if (delayedMessage != null) {
                    }
                    if (c2 != 1) {
                    }
                }
            }
            str3 = null;
            if (c2 >= 1) {
            }
        } catch (Exception e) {
            FileLog.e(e);
            revertEditingMessageObject(messageObject);
        }
    }

    public int editMessage(MessageObject messageObject, String str, boolean z, final BaseFragment baseFragment, ArrayList<TLRPC$MessageEntity> arrayList, int i) {
        if (baseFragment == null || baseFragment.getParentActivity() == null) {
            return 0;
        }
        final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = new TLRPC$TL_messages_editMessage();
        tLRPC$TL_messages_editMessage.peer = getMessagesController().getInputPeer(messageObject.getDialogId());
        if (str != null) {
            tLRPC$TL_messages_editMessage.message = str;
            tLRPC$TL_messages_editMessage.flags |= LiteMode.FLAG_AUTOPLAY_GIFS;
            tLRPC$TL_messages_editMessage.no_webpage = !z;
        }
        tLRPC$TL_messages_editMessage.id = messageObject.getId();
        if (arrayList != null) {
            tLRPC$TL_messages_editMessage.entities = arrayList;
            tLRPC$TL_messages_editMessage.flags |= 8;
        }
        if (i != 0) {
            tLRPC$TL_messages_editMessage.schedule_date = i;
            tLRPC$TL_messages_editMessage.flags |= 32768;
        }
        return getConnectionsManager().sendRequest(tLRPC$TL_messages_editMessage, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda90
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$editMessage$16(baseFragment, tLRPC$TL_messages_editMessage, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$editMessage$16(final BaseFragment baseFragment, final TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda60
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$editMessage$15(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editMessage);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$editMessage$15(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editMessage, new Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendLocation(Location location) {
        TLRPC$TL_messageMediaGeo tLRPC$TL_messageMediaGeo = new TLRPC$TL_messageMediaGeo();
        TLRPC$TL_geoPoint tLRPC$TL_geoPoint = new TLRPC$TL_geoPoint();
        tLRPC$TL_messageMediaGeo.geo = tLRPC$TL_geoPoint;
        tLRPC$TL_geoPoint.lat = AndroidUtilities.fixLocationCoord(location.getLatitude());
        tLRPC$TL_messageMediaGeo.geo._long = AndroidUtilities.fixLocationCoord(location.getLongitude());
        for (Map.Entry<String, MessageObject> entry : this.waitingForLocation.entrySet()) {
            MessageObject value = entry.getValue();
            sendMessage((TLRPC$MessageMedia) tLRPC$TL_messageMediaGeo, value.getDialogId(), value, (MessageObject) null, (TLRPC$ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
        }
    }

    public void sendCurrentLocation(MessageObject messageObject, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        if (messageObject == null || tLRPC$KeyboardButton == null) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(messageObject.getDialogId());
        sb.append("_");
        sb.append(messageObject.getId());
        sb.append("_");
        sb.append(Utilities.bytesToHex(tLRPC$KeyboardButton.data));
        sb.append("_");
        sb.append(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame ? "1" : "0");
        this.waitingForLocation.put(sb.toString(), messageObject);
        this.locationProvider.start();
    }

    public boolean isSendingCurrentLocation(MessageObject messageObject, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        if (messageObject == null || tLRPC$KeyboardButton == null) {
            return false;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(messageObject.getDialogId());
        sb.append("_");
        sb.append(messageObject.getId());
        sb.append("_");
        sb.append(Utilities.bytesToHex(tLRPC$KeyboardButton.data));
        sb.append("_");
        sb.append(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame ? "1" : "0");
        return this.waitingForLocation.containsKey(sb.toString());
    }

    public void sendNotificationCallback(final long j, final int i, final byte[] bArr) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendNotificationCallback$19(j, i, bArr);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendNotificationCallback$19(long j, int i, byte[] bArr) {
        TLRPC$Chat chatSync;
        TLRPC$User userSync;
        final String str = j + "_" + i + "_" + Utilities.bytesToHex(bArr) + "_0";
        this.waitingForCallback.put(str, Boolean.TRUE);
        final List<String> list = this.waitingForCallbackMap.get(j + "_" + i);
        if (list == null) {
            ArrayList arrayList = new ArrayList();
            this.waitingForCallbackMap.put(j + "_" + i, arrayList);
            list = arrayList;
        }
        list.add(str);
        if (DialogObject.isUserDialog(j)) {
            if (getMessagesController().getUser(Long.valueOf(j)) == null && (userSync = getMessagesStorage().getUserSync(j)) != null) {
                getMessagesController().putUser(userSync, true);
            }
        } else {
            long j2 = -j;
            if (getMessagesController().getChat(Long.valueOf(j2)) == null && (chatSync = getMessagesStorage().getChatSync(j2)) != null) {
                getMessagesController().putChat(chatSync, true);
            }
        }
        TLRPC$TL_messages_getBotCallbackAnswer tLRPC$TL_messages_getBotCallbackAnswer = new TLRPC$TL_messages_getBotCallbackAnswer();
        tLRPC$TL_messages_getBotCallbackAnswer.peer = getMessagesController().getInputPeer(j);
        tLRPC$TL_messages_getBotCallbackAnswer.msg_id = i;
        tLRPC$TL_messages_getBotCallbackAnswer.game = false;
        if (bArr != null) {
            tLRPC$TL_messages_getBotCallbackAnswer.flags |= 1;
            tLRPC$TL_messages_getBotCallbackAnswer.data = bArr;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getBotCallbackAnswer, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda83
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$sendNotificationCallback$18(str, list, tLObject, tLRPC$TL_error);
            }
        }, 2);
        getMessagesController().markDialogAsRead(j, i, i, 0, false, 0, 0, true, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendNotificationCallback$18(final String str, final List list, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendNotificationCallback$17(str, list);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendNotificationCallback$17(String str, List list) {
        this.waitingForCallback.remove(str);
        list.remove(str);
    }

    public void onMessageEdited(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message == null || tLRPC$Message.reply_markup == null) {
            return;
        }
        HashMap<String, List<String>> hashMap = this.waitingForCallbackMap;
        List<String> remove = hashMap.remove(tLRPC$Message.dialog_id + "_" + tLRPC$Message.id);
        if (remove != null) {
            for (String str : remove) {
                this.waitingForCallback.remove(str);
            }
        }
    }

    public byte[] isSendingVote(MessageObject messageObject) {
        if (messageObject == null) {
            return null;
        }
        return this.waitingForVote.get("poll_" + messageObject.getPollId());
    }

    public int sendVote(final MessageObject messageObject, ArrayList<TLRPC$TL_pollAnswer> arrayList, final Runnable runnable) {
        byte[] bArr;
        if (messageObject == null) {
            return 0;
        }
        final String str = "poll_" + messageObject.getPollId();
        if (this.waitingForCallback.containsKey(str)) {
            return 0;
        }
        TLRPC$TL_messages_sendVote tLRPC$TL_messages_sendVote = new TLRPC$TL_messages_sendVote();
        tLRPC$TL_messages_sendVote.msg_id = messageObject.getId();
        tLRPC$TL_messages_sendVote.peer = getMessagesController().getInputPeer(messageObject.getDialogId());
        if (arrayList != null) {
            bArr = new byte[arrayList.size()];
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_pollAnswer tLRPC$TL_pollAnswer = arrayList.get(i);
                tLRPC$TL_messages_sendVote.options.add(tLRPC$TL_pollAnswer.option);
                bArr[i] = tLRPC$TL_pollAnswer.option[0];
            }
        } else {
            bArr = new byte[0];
        }
        this.waitingForVote.put(str, bArr);
        return getConnectionsManager().sendRequest(tLRPC$TL_messages_sendVote, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda86
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$sendVote$21(messageObject, str, runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendVote$21(MessageObject messageObject, final String str, final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.voteSendTime.put(messageObject.getPollId(), 0L);
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            this.voteSendTime.put(messageObject.getPollId(), Long.valueOf(SystemClock.elapsedRealtime()));
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda28
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendVote$20(str, runnable);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendVote$20(String str, Runnable runnable) {
        this.waitingForVote.remove(str);
        if (runnable != null) {
            runnable.run();
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public long getVoteSendTime(long j) {
        return this.voteSendTime.get(j, 0L).longValue();
    }

    public void sendReaction(MessageObject messageObject, ArrayList<ReactionsLayoutInBubble.VisibleReaction> arrayList, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2, ChatActivity chatActivity, final Runnable runnable) {
        if (messageObject == null || chatActivity == null) {
            return;
        }
        TLRPC$TL_messages_sendReaction tLRPC$TL_messages_sendReaction = new TLRPC$TL_messages_sendReaction();
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        if (tLRPC$Message.isThreadMessage && tLRPC$Message.fwd_from != null) {
            tLRPC$TL_messages_sendReaction.peer = getMessagesController().getInputPeer(messageObject.getFromChatId());
            tLRPC$TL_messages_sendReaction.msg_id = messageObject.messageOwner.fwd_from.saved_from_msg_id;
        } else {
            tLRPC$TL_messages_sendReaction.peer = getMessagesController().getInputPeer(messageObject.getDialogId());
            tLRPC$TL_messages_sendReaction.msg_id = messageObject.getId();
        }
        tLRPC$TL_messages_sendReaction.add_to_recent = z2;
        if (z2 && visibleReaction != null) {
            MediaDataController.getInstance(this.currentAccount).recentReactions.add(0, ReactionsUtils.toTLReaction(visibleReaction));
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            for (int i = 0; i < arrayList.size(); i++) {
                ReactionsLayoutInBubble.VisibleReaction visibleReaction2 = arrayList.get(i);
                if (visibleReaction2.documentId != 0) {
                    TLRPC$TL_reactionCustomEmoji tLRPC$TL_reactionCustomEmoji = new TLRPC$TL_reactionCustomEmoji();
                    tLRPC$TL_reactionCustomEmoji.document_id = visibleReaction2.documentId;
                    tLRPC$TL_messages_sendReaction.reaction.add(tLRPC$TL_reactionCustomEmoji);
                    tLRPC$TL_messages_sendReaction.flags |= 1;
                } else if (visibleReaction2.emojicon != null) {
                    TLRPC$TL_reactionEmoji tLRPC$TL_reactionEmoji = new TLRPC$TL_reactionEmoji();
                    tLRPC$TL_reactionEmoji.emoticon = visibleReaction2.emojicon;
                    tLRPC$TL_messages_sendReaction.reaction.add(tLRPC$TL_reactionEmoji);
                    tLRPC$TL_messages_sendReaction.flags |= 1;
                }
            }
        }
        if (z) {
            tLRPC$TL_messages_sendReaction.flags |= 2;
            tLRPC$TL_messages_sendReaction.big = true;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_sendReaction, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda82
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$sendReaction$22(runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendReaction$22(Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            if (runnable != null) {
                AndroidUtilities.runOnUIThread(runnable);
            }
        }
    }

    public void requestUrlAuth(final String str, final ChatActivity chatActivity, final boolean z) {
        final TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth = new TLRPC$TL_messages_requestUrlAuth();
        tLRPC$TL_messages_requestUrlAuth.url = str;
        tLRPC$TL_messages_requestUrlAuth.flags |= 4;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_requestUrlAuth, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda92
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.lambda$requestUrlAuth$23(ChatActivity.this, tLRPC$TL_messages_requestUrlAuth, str, z, tLObject, tLRPC$TL_error);
            }
        }, 2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$requestUrlAuth$23(ChatActivity chatActivity, TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth, String str, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            if (tLObject instanceof TLRPC$TL_urlAuthResultRequest) {
                chatActivity.showRequestUrlAlert((TLRPC$TL_urlAuthResultRequest) tLObject, tLRPC$TL_messages_requestUrlAuth, str, z);
                return;
            } else if (tLObject instanceof TLRPC$TL_urlAuthResultAccepted) {
                AlertsCreator.showOpenUrlAlert(chatActivity, ((TLRPC$TL_urlAuthResultAccepted) tLObject).url, false, false);
                return;
            } else if (tLObject instanceof TLRPC$TL_urlAuthResultDefault) {
                AlertsCreator.showOpenUrlAlert(chatActivity, str, false, z);
                return;
            } else {
                return;
            }
        }
        AlertsCreator.showOpenUrlAlert(chatActivity, str, false, z);
    }

    public void sendCallback(boolean z, MessageObject messageObject, TLRPC$KeyboardButton tLRPC$KeyboardButton, ChatActivity chatActivity) {
        lambda$sendCallback$24(z, messageObject, tLRPC$KeyboardButton, null, null, chatActivity);
    }

    /* JADX WARN: Removed duplicated region for block: B:20:0x0084  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00aa  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x00da  */
    /* renamed from: sendCallback */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void lambda$sendCallback$24(final boolean z, final MessageObject messageObject, final TLRPC$KeyboardButton tLRPC$KeyboardButton, final TLRPC$InputCheckPasswordSRP tLRPC$InputCheckPasswordSRP, final TwoStepVerificationActivity twoStepVerificationActivity, final ChatActivity chatActivity) {
        boolean z2;
        int i;
        List<String> list;
        final ArrayList arrayList;
        if (messageObject == null || tLRPC$KeyboardButton == null || chatActivity == null) {
            return;
        }
        boolean z3 = tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth;
        if (z3) {
            i = 3;
        } else if (!(tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame)) {
            if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) {
                z2 = z;
                i = 2;
            } else {
                z2 = z;
                i = 0;
            }
            final String str = messageObject.getDialogId() + "_" + messageObject.getId() + "_" + Utilities.bytesToHex(tLRPC$KeyboardButton.data) + "_" + i;
            this.waitingForCallback.put(str, Boolean.TRUE);
            list = this.waitingForCallbackMap.get(messageObject.getDialogId() + "_" + messageObject.getId());
            if (list != null) {
                ArrayList arrayList2 = new ArrayList();
                this.waitingForCallbackMap.put(messageObject.getDialogId() + "_" + messageObject.getId(), arrayList2);
                arrayList = arrayList2;
            } else {
                arrayList = list;
            }
            arrayList.add(str);
            final TLObject[] tLObjectArr = new TLObject[1];
            final boolean z4 = z2;
            RequestDelegate requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda84
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    SendMessagesHelper.this.lambda$sendCallback$30(str, arrayList, z4, messageObject, tLRPC$KeyboardButton, chatActivity, twoStepVerificationActivity, tLObjectArr, tLRPC$InputCheckPasswordSRP, z, tLObject, tLRPC$TL_error);
                }
            };
            if (!z2) {
                getMessagesStorage().getBotCache(str, requestDelegate);
                return;
            } else if (z3) {
                TLRPC$TL_messages_requestUrlAuth tLRPC$TL_messages_requestUrlAuth = new TLRPC$TL_messages_requestUrlAuth();
                tLRPC$TL_messages_requestUrlAuth.peer = getMessagesController().getInputPeer(messageObject.getDialogId());
                tLRPC$TL_messages_requestUrlAuth.msg_id = messageObject.getId();
                tLRPC$TL_messages_requestUrlAuth.button_id = tLRPC$KeyboardButton.button_id;
                tLRPC$TL_messages_requestUrlAuth.flags |= 2;
                tLObjectArr[0] = tLRPC$TL_messages_requestUrlAuth;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_requestUrlAuth, requestDelegate, 2);
                return;
            } else if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) {
                if ((messageObject.messageOwner.media.flags & 4) == 0) {
                    TLRPC$TL_payments_getPaymentForm tLRPC$TL_payments_getPaymentForm = new TLRPC$TL_payments_getPaymentForm();
                    TLRPC$TL_inputInvoiceMessage tLRPC$TL_inputInvoiceMessage = new TLRPC$TL_inputInvoiceMessage();
                    tLRPC$TL_inputInvoiceMessage.msg_id = messageObject.getId();
                    tLRPC$TL_inputInvoiceMessage.peer = getMessagesController().getInputPeer(messageObject.messageOwner.peer_id);
                    tLRPC$TL_payments_getPaymentForm.invoice = tLRPC$TL_inputInvoiceMessage;
                    try {
                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put("bg_color", Theme.getColor("windowBackgroundWhite"));
                        jSONObject.put("text_color", Theme.getColor("windowBackgroundWhiteBlackText"));
                        jSONObject.put("hint_color", Theme.getColor("windowBackgroundWhiteHintText"));
                        jSONObject.put("link_color", Theme.getColor("windowBackgroundWhiteLinkText"));
                        jSONObject.put("button_color", Theme.getColor("featuredStickers_addButton"));
                        jSONObject.put("button_text_color", Theme.getColor("featuredStickers_buttonText"));
                        TLRPC$TL_dataJSON tLRPC$TL_dataJSON = new TLRPC$TL_dataJSON();
                        tLRPC$TL_payments_getPaymentForm.theme_params = tLRPC$TL_dataJSON;
                        tLRPC$TL_dataJSON.data = jSONObject.toString();
                        tLRPC$TL_payments_getPaymentForm.flags |= 1;
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_payments_getPaymentForm, requestDelegate, 2);
                    return;
                }
                TLRPC$TL_payments_getPaymentReceipt tLRPC$TL_payments_getPaymentReceipt = new TLRPC$TL_payments_getPaymentReceipt();
                tLRPC$TL_payments_getPaymentReceipt.msg_id = messageObject.messageOwner.media.receipt_msg_id;
                tLRPC$TL_payments_getPaymentReceipt.peer = getMessagesController().getInputPeer(messageObject.messageOwner.peer_id);
                getConnectionsManager().sendRequest(tLRPC$TL_payments_getPaymentReceipt, requestDelegate, 2);
                return;
            } else {
                TLRPC$TL_messages_getBotCallbackAnswer tLRPC$TL_messages_getBotCallbackAnswer = new TLRPC$TL_messages_getBotCallbackAnswer();
                tLRPC$TL_messages_getBotCallbackAnswer.peer = getMessagesController().getInputPeer(messageObject.getDialogId());
                tLRPC$TL_messages_getBotCallbackAnswer.msg_id = messageObject.getId();
                tLRPC$TL_messages_getBotCallbackAnswer.game = tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame;
                if (tLRPC$KeyboardButton.requires_password) {
                    TLRPC$InputCheckPasswordSRP tLRPC$TL_inputCheckPasswordEmpty = tLRPC$InputCheckPasswordSRP != null ? tLRPC$InputCheckPasswordSRP : new TLRPC$TL_inputCheckPasswordEmpty();
                    tLRPC$TL_messages_getBotCallbackAnswer.password = tLRPC$TL_inputCheckPasswordEmpty;
                    tLRPC$TL_messages_getBotCallbackAnswer.password = tLRPC$TL_inputCheckPasswordEmpty;
                    tLRPC$TL_messages_getBotCallbackAnswer.flags |= 4;
                }
                byte[] bArr = tLRPC$KeyboardButton.data;
                if (bArr != null) {
                    tLRPC$TL_messages_getBotCallbackAnswer.flags |= 1;
                    tLRPC$TL_messages_getBotCallbackAnswer.data = bArr;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getBotCallbackAnswer, requestDelegate, 2);
                return;
            }
        } else {
            i = 1;
        }
        z2 = false;
        final String str2 = messageObject.getDialogId() + "_" + messageObject.getId() + "_" + Utilities.bytesToHex(tLRPC$KeyboardButton.data) + "_" + i;
        this.waitingForCallback.put(str2, Boolean.TRUE);
        list = this.waitingForCallbackMap.get(messageObject.getDialogId() + "_" + messageObject.getId());
        if (list != null) {
        }
        arrayList.add(str2);
        final TLObject[] tLObjectArr2 = new TLObject[1];
        final boolean z42 = z2;
        RequestDelegate requestDelegate2 = new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda84
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$sendCallback$30(str2, arrayList, z42, messageObject, tLRPC$KeyboardButton, chatActivity, twoStepVerificationActivity, tLObjectArr2, tLRPC$InputCheckPasswordSRP, z, tLObject, tLRPC$TL_error);
            }
        };
        if (!z2) {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendCallback$30(final String str, final List list, final boolean z, final MessageObject messageObject, final TLRPC$KeyboardButton tLRPC$KeyboardButton, final ChatActivity chatActivity, final TwoStepVerificationActivity twoStepVerificationActivity, final TLObject[] tLObjectArr, final TLRPC$InputCheckPasswordSRP tLRPC$InputCheckPasswordSRP, final boolean z2, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda31
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendCallback$29(str, list, z, tLObject, messageObject, tLRPC$KeyboardButton, chatActivity, twoStepVerificationActivity, tLObjectArr, tLRPC$TL_error, tLRPC$InputCheckPasswordSRP, z2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendCallback$29(String str, List list, boolean z, TLObject tLObject, final MessageObject messageObject, final TLRPC$KeyboardButton tLRPC$KeyboardButton, final ChatActivity chatActivity, final TwoStepVerificationActivity twoStepVerificationActivity, TLObject[] tLObjectArr, TLRPC$TL_error tLRPC$TL_error, TLRPC$InputCheckPasswordSRP tLRPC$InputCheckPasswordSRP, final boolean z2) {
        String str2;
        this.waitingForCallback.remove(str);
        list.remove(str);
        boolean z3 = false;
        if (z && tLObject == null) {
            sendCallback(false, messageObject, tLRPC$KeyboardButton, chatActivity);
            return;
        }
        if (tLObject != null) {
            if (twoStepVerificationActivity != null) {
                twoStepVerificationActivity.needHideProgress();
                twoStepVerificationActivity.finishFragment();
            }
            long fromChatId = messageObject.getFromChatId();
            long j = messageObject.messageOwner.via_bot_id;
            if (j != 0) {
                fromChatId = j;
            }
            if (fromChatId > 0) {
                TLRPC$User user = getMessagesController().getUser(Long.valueOf(fromChatId));
                if (user != null) {
                    str2 = ContactsController.formatName(user.first_name, user.last_name);
                }
                str2 = null;
            } else {
                TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(-fromChatId));
                if (chat != null) {
                    str2 = chat.title;
                }
                str2 = null;
            }
            if (str2 == null) {
                str2 = "bot";
            }
            if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) {
                if (tLObject instanceof TLRPC$TL_urlAuthResultRequest) {
                    chatActivity.showRequestUrlAlert((TLRPC$TL_urlAuthResultRequest) tLObject, (TLRPC$TL_messages_requestUrlAuth) tLObjectArr[0], tLRPC$KeyboardButton.url, false);
                } else if (tLObject instanceof TLRPC$TL_urlAuthResultAccepted) {
                    AlertsCreator.showOpenUrlAlert(chatActivity, ((TLRPC$TL_urlAuthResultAccepted) tLObject).url, false, false);
                } else if (tLObject instanceof TLRPC$TL_urlAuthResultDefault) {
                    TLRPC$TL_urlAuthResultDefault tLRPC$TL_urlAuthResultDefault = (TLRPC$TL_urlAuthResultDefault) tLObject;
                    AlertsCreator.showOpenUrlAlert(chatActivity, tLRPC$KeyboardButton.url, false, true);
                }
            } else if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) {
                if (tLObject instanceof TLRPC$TL_payments_paymentForm) {
                    TLRPC$TL_payments_paymentForm tLRPC$TL_payments_paymentForm = (TLRPC$TL_payments_paymentForm) tLObject;
                    getMessagesController().putUsers(tLRPC$TL_payments_paymentForm.users, false);
                    chatActivity.presentFragment(new PaymentFormActivity(tLRPC$TL_payments_paymentForm, messageObject, chatActivity));
                } else if (tLObject instanceof TLRPC$TL_payments_paymentReceipt) {
                    chatActivity.presentFragment(new PaymentFormActivity((TLRPC$TL_payments_paymentReceipt) tLObject));
                }
            } else {
                TLRPC$TL_messages_botCallbackAnswer tLRPC$TL_messages_botCallbackAnswer = (TLRPC$TL_messages_botCallbackAnswer) tLObject;
                if (!z && tLRPC$TL_messages_botCallbackAnswer.cache_time != 0 && !tLRPC$KeyboardButton.requires_password) {
                    getMessagesStorage().saveBotCache(str, tLRPC$TL_messages_botCallbackAnswer);
                }
                String str3 = tLRPC$TL_messages_botCallbackAnswer.message;
                if (str3 != null) {
                    if (tLRPC$TL_messages_botCallbackAnswer.alert) {
                        if (chatActivity.getParentActivity() == null) {
                            return;
                        }
                        AlertDialog.Builder builder = new AlertDialog.Builder(chatActivity.getParentActivity());
                        builder.setTitle(str2);
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                        builder.setMessage(tLRPC$TL_messages_botCallbackAnswer.message);
                        chatActivity.showDialog(builder.create());
                        return;
                    }
                    chatActivity.showAlert(str2, str3);
                } else if (tLRPC$TL_messages_botCallbackAnswer.url == null || chatActivity.getParentActivity() == null) {
                } else {
                    TLRPC$User user2 = getMessagesController().getUser(Long.valueOf(fromChatId));
                    boolean z4 = user2 != null && user2.verified;
                    if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) {
                        TLRPC$MessageMedia tLRPC$MessageMedia = messageObject.messageOwner.media;
                        TLRPC$TL_game tLRPC$TL_game = tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaGame ? tLRPC$MessageMedia.game : null;
                        if (tLRPC$TL_game == null) {
                            return;
                        }
                        String str4 = tLRPC$TL_messages_botCallbackAnswer.url;
                        if (!z4) {
                            if (MessagesController.getNotificationsSettings(this.currentAccount).getBoolean("askgame_" + fromChatId, true)) {
                                z3 = true;
                            }
                        }
                        chatActivity.showOpenGameAlert(tLRPC$TL_game, messageObject, str4, z3, fromChatId);
                        return;
                    }
                    AlertsCreator.showOpenUrlAlert(chatActivity, tLRPC$TL_messages_botCallbackAnswer.url, false, false);
                }
            }
        } else if (tLRPC$TL_error == null || chatActivity.getParentActivity() == null) {
        } else {
            if ("PASSWORD_HASH_INVALID".equals(tLRPC$TL_error.text)) {
                if (tLRPC$InputCheckPasswordSRP == null) {
                    AlertDialog.Builder builder2 = new AlertDialog.Builder(chatActivity.getParentActivity());
                    builder2.setTitle(LocaleController.getString("BotOwnershipTransfer", R.string.BotOwnershipTransfer));
                    builder2.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotOwnershipTransferReadyAlertText", R.string.BotOwnershipTransferReadyAlertText, new Object[0])));
                    builder2.setPositiveButton(LocaleController.getString("BotOwnershipTransferChangeOwner", R.string.BotOwnershipTransferChangeOwner), new DialogInterface.OnClickListener() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda0
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            SendMessagesHelper.this.lambda$sendCallback$25(z2, messageObject, tLRPC$KeyboardButton, chatActivity, dialogInterface, i);
                        }
                    });
                    builder2.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                    chatActivity.showDialog(builder2.create());
                }
            } else if ("PASSWORD_MISSING".equals(tLRPC$TL_error.text) || tLRPC$TL_error.text.startsWith("PASSWORD_TOO_FRESH_") || tLRPC$TL_error.text.startsWith("SESSION_TOO_FRESH_")) {
                if (twoStepVerificationActivity != null) {
                    twoStepVerificationActivity.needHideProgress();
                }
                AlertDialog.Builder builder3 = new AlertDialog.Builder(chatActivity.getParentActivity());
                builder3.setTitle(LocaleController.getString("EditAdminTransferAlertTitle", R.string.EditAdminTransferAlertTitle));
                LinearLayout linearLayout = new LinearLayout(chatActivity.getParentActivity());
                linearLayout.setPadding(AndroidUtilities.dp(24.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(24.0f), 0);
                linearLayout.setOrientation(1);
                builder3.setView(linearLayout);
                TextView textView = new TextView(chatActivity.getParentActivity());
                textView.setTextColor(Theme.getColor("dialogTextBlack"));
                textView.setTextSize(1, 16.0f);
                textView.setGravity((LocaleController.isRTL ? 5 : 3) | 48);
                textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("BotOwnershipTransferAlertText", R.string.BotOwnershipTransferAlertText, new Object[0])));
                linearLayout.addView(textView, LayoutHelper.createLinear(-1, -2));
                LinearLayout linearLayout2 = new LinearLayout(chatActivity.getParentActivity());
                linearLayout2.setOrientation(0);
                linearLayout.addView(linearLayout2, LayoutHelper.createLinear(-1, -2, 0.0f, 11.0f, 0.0f, 0.0f));
                ImageView imageView = new ImageView(chatActivity.getParentActivity());
                int i = R.drawable.list_circle;
                imageView.setImageResource(i);
                imageView.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(11.0f) : 0, AndroidUtilities.dp(9.0f), LocaleController.isRTL ? 0 : AndroidUtilities.dp(11.0f), 0);
                imageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor("dialogTextBlack"), PorterDuff.Mode.MULTIPLY));
                TextView textView2 = new TextView(chatActivity.getParentActivity());
                textView2.setTextColor(Theme.getColor("dialogTextBlack"));
                textView2.setTextSize(1, 16.0f);
                textView2.setGravity((LocaleController.isRTL ? 5 : 3) | 48);
                textView2.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText1", R.string.EditAdminTransferAlertText1)));
                if (LocaleController.isRTL) {
                    linearLayout2.addView(textView2, LayoutHelper.createLinear(-1, -2));
                    linearLayout2.addView(imageView, LayoutHelper.createLinear(-2, -2, 5));
                } else {
                    linearLayout2.addView(imageView, LayoutHelper.createLinear(-2, -2));
                    linearLayout2.addView(textView2, LayoutHelper.createLinear(-1, -2));
                }
                LinearLayout linearLayout3 = new LinearLayout(chatActivity.getParentActivity());
                linearLayout3.setOrientation(0);
                linearLayout.addView(linearLayout3, LayoutHelper.createLinear(-1, -2, 0.0f, 11.0f, 0.0f, 0.0f));
                ImageView imageView2 = new ImageView(chatActivity.getParentActivity());
                imageView2.setImageResource(i);
                imageView2.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(11.0f) : 0, AndroidUtilities.dp(9.0f), LocaleController.isRTL ? 0 : AndroidUtilities.dp(11.0f), 0);
                imageView2.setColorFilter(new PorterDuffColorFilter(Theme.getColor("dialogTextBlack"), PorterDuff.Mode.MULTIPLY));
                TextView textView3 = new TextView(chatActivity.getParentActivity());
                textView3.setTextColor(Theme.getColor("dialogTextBlack"));
                textView3.setTextSize(1, 16.0f);
                textView3.setGravity((LocaleController.isRTL ? 5 : 3) | 48);
                textView3.setText(AndroidUtilities.replaceTags(LocaleController.getString("EditAdminTransferAlertText2", R.string.EditAdminTransferAlertText2)));
                if (LocaleController.isRTL) {
                    linearLayout3.addView(textView3, LayoutHelper.createLinear(-1, -2));
                    linearLayout3.addView(imageView2, LayoutHelper.createLinear(-2, -2, 5));
                } else {
                    linearLayout3.addView(imageView2, LayoutHelper.createLinear(-2, -2));
                    linearLayout3.addView(textView3, LayoutHelper.createLinear(-1, -2));
                }
                if ("PASSWORD_MISSING".equals(tLRPC$TL_error.text)) {
                    builder3.setPositiveButton(LocaleController.getString("EditAdminTransferSetPassword", R.string.EditAdminTransferSetPassword), new DialogInterface.OnClickListener() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda1
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            SendMessagesHelper.lambda$sendCallback$26(ChatActivity.this, dialogInterface, i2);
                        }
                    });
                    builder3.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                } else {
                    TextView textView4 = new TextView(chatActivity.getParentActivity());
                    textView4.setTextColor(Theme.getColor("dialogTextBlack"));
                    textView4.setTextSize(1, 16.0f);
                    textView4.setGravity((LocaleController.isRTL ? 5 : 3) | 48);
                    textView4.setText(LocaleController.getString("EditAdminTransferAlertText3", R.string.EditAdminTransferAlertText3));
                    linearLayout.addView(textView4, LayoutHelper.createLinear(-1, -2, 0.0f, 11.0f, 0.0f, 0.0f));
                    builder3.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                }
                chatActivity.showDialog(builder3.create());
            } else if ("SRP_ID_INVALID".equals(tLRPC$TL_error.text)) {
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(new TLRPC$TL_account_getPassword(), new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda91
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                        SendMessagesHelper.this.lambda$sendCallback$28(twoStepVerificationActivity, z2, messageObject, tLRPC$KeyboardButton, chatActivity, tLObject2, tLRPC$TL_error2);
                    }
                }, 8);
            } else if (twoStepVerificationActivity != null) {
                twoStepVerificationActivity.needHideProgress();
                twoStepVerificationActivity.finishFragment();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendCallback$25(final boolean z, final MessageObject messageObject, final TLRPC$KeyboardButton tLRPC$KeyboardButton, final ChatActivity chatActivity, DialogInterface dialogInterface, int i) {
        final TwoStepVerificationActivity twoStepVerificationActivity = new TwoStepVerificationActivity();
        twoStepVerificationActivity.setDelegate(new TwoStepVerificationActivity.TwoStepVerificationActivityDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda93
            @Override // org.telegram.ui.TwoStepVerificationActivity.TwoStepVerificationActivityDelegate
            public final void didEnterPassword(TLRPC$InputCheckPasswordSRP tLRPC$InputCheckPasswordSRP) {
                SendMessagesHelper.this.lambda$sendCallback$24(z, messageObject, tLRPC$KeyboardButton, twoStepVerificationActivity, chatActivity, tLRPC$InputCheckPasswordSRP);
            }
        });
        chatActivity.presentFragment(twoStepVerificationActivity);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$sendCallback$26(ChatActivity chatActivity, DialogInterface dialogInterface, int i) {
        chatActivity.presentFragment(new TwoStepVerificationSetupActivity(6, null));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendCallback$28(final TwoStepVerificationActivity twoStepVerificationActivity, final boolean z, final MessageObject messageObject, final TLRPC$KeyboardButton tLRPC$KeyboardButton, final ChatActivity chatActivity, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda57
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$sendCallback$27(tLRPC$TL_error, tLObject, twoStepVerificationActivity, z, messageObject, tLRPC$KeyboardButton, chatActivity);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendCallback$27(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, TwoStepVerificationActivity twoStepVerificationActivity, boolean z, MessageObject messageObject, TLRPC$KeyboardButton tLRPC$KeyboardButton, ChatActivity chatActivity) {
        if (tLRPC$TL_error == null) {
            TLRPC$account_Password tLRPC$account_Password = (TLRPC$account_Password) tLObject;
            twoStepVerificationActivity.setCurrentPasswordInfo(null, tLRPC$account_Password);
            TwoStepVerificationActivity.initPasswordNewAlgo(tLRPC$account_Password);
            lambda$sendCallback$24(z, messageObject, tLRPC$KeyboardButton, twoStepVerificationActivity.getNewSrpPassword(), twoStepVerificationActivity, chatActivity);
        }
    }

    public boolean isSendingCallback(MessageObject messageObject, TLRPC$KeyboardButton tLRPC$KeyboardButton) {
        int i = 0;
        if (messageObject == null || tLRPC$KeyboardButton == null) {
            return false;
        }
        if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonUrlAuth) {
            i = 3;
        } else if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonGame) {
            i = 1;
        } else if (tLRPC$KeyboardButton instanceof TLRPC$TL_keyboardButtonBuy) {
            i = 2;
        }
        return this.waitingForCallback.containsKey(messageObject.getDialogId() + "_" + messageObject.getId() + "_" + Utilities.bytesToHex(tLRPC$KeyboardButton.data) + "_" + i);
    }

    public void sendGame(TLRPC$InputPeer tLRPC$InputPeer, TLRPC$TL_inputMediaGame tLRPC$TL_inputMediaGame, long j, final long j2) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer == null || tLRPC$TL_inputMediaGame == null) {
            return;
        }
        TLRPC$TL_messages_sendMedia tLRPC$TL_messages_sendMedia = new TLRPC$TL_messages_sendMedia();
        tLRPC$TL_messages_sendMedia.peer = tLRPC$InputPeer;
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerChannel) {
            SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
            tLRPC$TL_messages_sendMedia.silent = notificationsSettings.getBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + (-tLRPC$InputPeer.channel_id), false);
        } else if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerChat) {
            SharedPreferences notificationsSettings2 = MessagesController.getNotificationsSettings(this.currentAccount);
            tLRPC$TL_messages_sendMedia.silent = notificationsSettings2.getBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + (-tLRPC$InputPeer.chat_id), false);
        } else {
            SharedPreferences notificationsSettings3 = MessagesController.getNotificationsSettings(this.currentAccount);
            tLRPC$TL_messages_sendMedia.silent = notificationsSettings3.getBoolean(NotificationsSettingsFacade.PROPERTY_SILENT + tLRPC$InputPeer.user_id, false);
        }
        tLRPC$TL_messages_sendMedia.random_id = j != 0 ? j : getNextRandomId();
        tLRPC$TL_messages_sendMedia.message = "";
        tLRPC$TL_messages_sendMedia.media = tLRPC$TL_inputMediaGame;
        long sendAsPeerId = ChatObject.getSendAsPeerId(getMessagesController().getChat(Long.valueOf(tLRPC$InputPeer.chat_id)), getMessagesController().getChatFull(tLRPC$InputPeer.chat_id));
        if (sendAsPeerId != UserConfig.getInstance(this.currentAccount).getClientUserId()) {
            tLRPC$TL_messages_sendMedia.send_as = getMessagesController().getInputPeer(sendAsPeerId);
        }
        if (j2 == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + tLRPC$TL_inputMediaGame.getObjectSize() + 4 + 8);
            } catch (Exception e) {
                e = e;
            }
            try {
                nativeByteBuffer.writeInt32(3);
                nativeByteBuffer.writeInt64(j);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                tLRPC$TL_inputMediaGame.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_sendMedia, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda80
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        SendMessagesHelper.this.lambda$sendGame$31(j2, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_sendMedia, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda80
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$sendGame$31(j2, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendGame$31(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void sendMessage(MessageObject messageObject) {
        long dialogId = messageObject.getDialogId();
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        sendMessage(null, null, null, null, null, null, null, null, null, null, dialogId, tLRPC$Message.attachPath, null, null, null, true, messageObject, null, tLRPC$Message.reply_markup, tLRPC$Message.params, !tLRPC$Message.silent, messageObject.scheduled ? tLRPC$Message.date : 0, 0, null, null, false);
    }

    public void sendMessage(TLRPC$User tLRPC$User, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i) {
        sendMessage(null, null, null, null, null, tLRPC$User, null, null, null, null, j, null, messageObject, messageObject2, null, true, null, null, tLRPC$ReplyMarkup, hashMap, z, i, 0, null, null, false);
    }

    public void sendMessage(TLRPC$TL_messageMediaInvoice tLRPC$TL_messageMediaInvoice, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i) {
        sendMessage(null, null, null, null, null, null, null, null, null, tLRPC$TL_messageMediaInvoice, j, null, messageObject, messageObject2, null, true, null, null, tLRPC$ReplyMarkup, hashMap, z, i, 0, null, null, false);
    }

    public void sendMessage(TLRPC$TL_document tLRPC$TL_document, VideoEditedInfo videoEditedInfo, String str, long j, MessageObject messageObject, MessageObject messageObject2, String str2, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i, int i2, Object obj, MessageObject.SendAnimationData sendAnimationData, boolean z2) {
        sendMessage(null, str2, null, null, videoEditedInfo, null, tLRPC$TL_document, null, null, null, j, str, messageObject, messageObject2, null, true, null, arrayList, tLRPC$ReplyMarkup, hashMap, z, i, i2, obj, sendAnimationData, z2);
    }

    public void sendMessage(TLRPC$TL_document tLRPC$TL_document, VideoEditedInfo videoEditedInfo, String str, long j, MessageObject messageObject, MessageObject messageObject2, String str2, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i, int i2, Object obj, MessageObject.SendAnimationData sendAnimationData, boolean z2, boolean z3) {
        sendMessage(null, str2, null, null, videoEditedInfo, null, tLRPC$TL_document, null, null, null, j, str, messageObject, messageObject2, null, true, null, arrayList, tLRPC$ReplyMarkup, hashMap, z, i, i2, obj, sendAnimationData, z2, z3);
    }

    public void sendMessage(String str, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$WebPage tLRPC$WebPage, boolean z, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z2, int i, MessageObject.SendAnimationData sendAnimationData, boolean z3) {
        sendMessage(str, null, null, null, null, null, null, null, null, null, j, null, messageObject, messageObject2, tLRPC$WebPage, z, null, arrayList, tLRPC$ReplyMarkup, hashMap, z2, i, 0, null, sendAnimationData, z3);
    }

    public void sendMessage(TLRPC$MessageMedia tLRPC$MessageMedia, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i) {
        sendMessage(null, null, tLRPC$MessageMedia, null, null, null, null, null, null, null, j, null, messageObject, messageObject2, null, true, null, null, tLRPC$ReplyMarkup, hashMap, z, i, 0, null, null, false);
    }

    public void sendMessage(TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i) {
        sendMessage(null, null, null, null, null, null, null, null, tLRPC$TL_messageMediaPoll, null, j, null, messageObject, messageObject2, null, true, null, null, tLRPC$ReplyMarkup, hashMap, z, i, 0, null, null, false);
    }

    public void sendMessage(TLRPC$TL_game tLRPC$TL_game, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i) {
        sendMessage(null, null, null, null, null, null, null, tLRPC$TL_game, null, null, j, null, messageObject, messageObject2, null, true, null, null, tLRPC$ReplyMarkup, hashMap, z, i, 0, null, null, false);
    }

    public void sendMessage(TLRPC$TL_photo tLRPC$TL_photo, String str, long j, MessageObject messageObject, MessageObject messageObject2, String str2, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i, int i2, Object obj, boolean z2, boolean z3) {
        sendMessage(null, str2, null, tLRPC$TL_photo, null, null, null, null, null, null, j, str, messageObject, messageObject2, null, true, null, arrayList, tLRPC$ReplyMarkup, hashMap, z, i, i2, obj, null, z2, z3);
    }

    public void sendMessage(TLRPC$TL_photo tLRPC$TL_photo, String str, long j, MessageObject messageObject, MessageObject messageObject2, String str2, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z, int i, int i2, Object obj, boolean z2) {
        sendMessage(null, str2, null, tLRPC$TL_photo, null, null, null, null, null, null, j, str, messageObject, messageObject2, null, true, null, arrayList, tLRPC$ReplyMarkup, hashMap, z, i, i2, obj, null, z2);
    }

    private void sendMessage(String str, String str2, TLRPC$MessageMedia tLRPC$MessageMedia, TLRPC$TL_photo tLRPC$TL_photo, VideoEditedInfo videoEditedInfo, TLRPC$User tLRPC$User, TLRPC$TL_document tLRPC$TL_document, TLRPC$TL_game tLRPC$TL_game, TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, TLRPC$TL_messageMediaInvoice tLRPC$TL_messageMediaInvoice, long j, String str3, MessageObject messageObject, MessageObject messageObject2, TLRPC$WebPage tLRPC$WebPage, boolean z, MessageObject messageObject3, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z2, int i, int i2, Object obj, MessageObject.SendAnimationData sendAnimationData, boolean z3) {
        sendMessage(str, str2, tLRPC$MessageMedia, tLRPC$TL_photo, videoEditedInfo, tLRPC$User, tLRPC$TL_document, tLRPC$TL_game, tLRPC$TL_messageMediaPoll, tLRPC$TL_messageMediaInvoice, j, str3, messageObject, messageObject2, tLRPC$WebPage, z, messageObject3, arrayList, tLRPC$ReplyMarkup, hashMap, z2, i, i2, obj, sendAnimationData, z3, false);
    }

    /* JADX WARN: Can't wrap try/catch for region: R(70:10|(1:1543)(1:13)|(1:1542)(1:17)|18|(1:20)(1:1541)|21|(2:23|(1:(2:26|27)(1:28))(1:29))(2:1527|(66:1529|(1:1531)(1:1539)|(1:1538)(1:1536)|1537|31|32|(6:34|(3:37|38|(4:40|41|(7:(3:44|45|(1:47))(1:1248)|1170|(2:1172|1173)(7:1184|(5:1189|1190|(1:1192)(2:1195|(3:1197|(1:1199)|1200)(4:1201|(3:1208|(1:1210)(4:1211|(2:1222|(2:1224|(3:1226|1227|1228)(2:1229|1230))(2:1231|(2:1233|1228)(1:1234)))|1235|(3:1237|1227|1228)(2:1238|1230))|1194)|1239|(3:1241|1227|1228)(3:1242|1230|1194)))|1193|1194)|1243|(1:1245)(1:1247)|1246|1230|1194)|(1:1183)(1:1177)|1178|1179|(1:1181)(1:1182))(1:1249)|48))|1253|41|(0)(0)|48)(17:1254|1255|(1:1257)(1:1522)|1258|(8:(1:1261)(1:1329)|(1:1328)(2:1265|(1:1267)(1:1327))|(1:1326)(2:1275|(2:1279|1280))|(1:1317)(1:1325)|(1:1324)(1:1321)|1322|1323|1280)(4:1330|1331|(3:(1:1334)(1:1338)|1335|1336)(2:1339|(3:(1:1342)(1:1349)|1343|(1:1348)(1:1347))(4:1350|(8:(1:1353)(1:1377)|1354|(1:1356)|1357|(1:1359)|1360|(1:1376)(1:1364)|(3:1373|1374|1375)(1:1370))(3:1378|1379|(3:1381|1382|(1:1384))(2:1388|(5:1502|1503|1505|1506|(1:1508))(2:1390|(8:(2:1411|1412)(1:1393)|1394|(1:1410)(1:1398)|1399|(1:1401)|1402|(1:1404)|(1:1409)(2:1408|1387))(2:1416|(14:(1:1419)(1:1500)|1420|1421|(3:1424|(2:1426|(2:1429|1430)(1:1428))|1496)|1497|1431|(1:1433)|1434|(2:1484|(2:1492|(1:1494)(1:1495))(1:1491))(1:1438)|(3:1440|(1:1442)|1443)|(1:1483)(1:1451)|(3:1457|(3:1460|(3:1463|1464|(5:1466|(1:1468)(1:1478)|1469|(1:1471)(3:1473|(1:1475)(1:1477)|1476)|1472)(2:1479|1480))(1:1462)|1458)|1481)|1482|1480)(2:1501|1372)))))|1371|1372))|1337)|(1:1315)(1:1284)|(1:1286)(3:1311|1312|(1:1314))|1287|(1:1289)|1290|(2:1307|(1:1309)(6:1310|1295|1296|1297|1298|1299))(1:1293)|1294|1295|1296|1297|1298|1299)|(4:50|51|52|(57:54|55|56|57|(1:59)|60|(1:1163)(2:(3:65|(1:67)|68)(1:1162)|69)|70|71|(3:73|74|(44:76|77|78|(48:80|(2:83|84)|100|(2:102|(40:104|105|(2:1130|(1:1132))(2:110|(1:112))|113|(1:115)|116|(2:119|(1:121))|122|(3:124|(2:126|(2:128|129)(2:130|(1:132)))|133)(6:1084|1085|(1:1087)(1:1129)|(2:1089|1090)(3:1123|1124|(1:1128))|1091|(2:1095|(3:1097|(2:1098|(2:1100|(2:1103|1104)(1:1102))(2:1106|1107))|1105)(2:1108|(3:1112|(2:1113|(2:1115|(2:1118|1119)(1:1117))(2:1121|1122))|1120))))|134|(2:1082|1083)|138|(1:140)|141|142|(4:144|(1:146)(1:1080)|147|(21:149|(1:1078)(1:155)|156|157|158|159|160|(1:162)(1:1073)|163|164|(3:1060|1061|(1:1068))(1:166)|167|(1:1059)|170|(7:172|(1:174)(1:1042)|175|(1:177)(1:1041)|178|(1:180)(1:1040)|181)(7:1043|1044|(2:1046|1047)|(3:1049|(1:1051)(1:1057)|1052)(1:1058)|1053|1054|(1:1056))|182|(1:1038)(1:185)|186|(12:193|(10:195|(1:197)|198|(10:200|(4:202|(1:204)(2:324|(4:326|(1:328)|329|(1:331))(1:332))|205|206)(3:333|334|(14:547|548|549|(3:551|552|553)(1:599)|(1:598)(4:557|(1:559)|560|561)|562|563|564|(1:566)(4:586|(3:588|589|590)|594|595)|(4:568|(1:570)(1:584)|571|572)(1:585)|573|574|(1:582)(1:580)|581)(5:339|340|(16:481|482|(11:484|(1:(2:487|(1:489)))(1:539)|(1:497)|(3:525|526|(12:528|529|530|(1:532)|533|534|500|(1:502)(4:517|(1:519)|(1:523)|524)|(4:504|505|(1:507)(1:515)|508)(1:516)|509|(2:511|(1:513))|514))|499|500|(0)(0)|(0)(0)|509|(0)|514)|540|491|492|(1:494)|(0)|(0)|499|500|(0)(0)|(0)(0)|509|(0)|514)(4:342|(2:344|(1:351)(1:348))(15:352|(2:357|(8:359|(4:361|362|363|364)|365|(1:367)(6:375|376|377|(1:379)|(1:383)|384)|368|369|(1:371)(1:374)|372)(2:385|(4:387|(2:391|(4:393|(2:396|394)|397|398))|399|(2:401|(1:403)))(2:404|(1:406)(2:407|350))))|408|(1:480)(3:411|412|(1:414)(5:479|432|(1:434)(4:451|(1:453)|(1:457)|458)|(3:(4:437|438|(1:440)(1:448)|441)(1:449)|442|(2:444|(1:446)))(1:450)|447))|415|(5:471|472|473|474|475)(1:417)|(3:468|469|470)|(2:427|(7:429|430|431|432|(0)(0)|(0)(0)|447))|467|430|431|432|(0)(0)|(0)(0)|447)|349|350)|373|350))|207|208|(5:210|(1:212)(6:287|(1:289)|290|(1:294)|(1:296)|297)|213|(1:217)|218)(11:298|(1:300)|301|(1:305)|306|(1:308)|309|(1:313)|(1:315)|(1:319)|(1:321))|219|220|(2:222|223)(2:227|(3:229|(1:231)(1:233)|232)(2:234|(1:(1:237)(3:238|(1:240)(1:242)|241))(2:243|(1:(1:246)(2:(1:248)(1:250)|249))(2:251|(2:(1:254)(1:256)|255)(2:257|(1:(2:(1:263)(1:265)|264)(1:261))(2:266|(1:(1:269)(2:(1:271)(1:273)|272))(2:274|(2:(1:280)(1:282)|281)(1:278))))))))|224|225)(22:607|608|609|610|(3:877|878|(1:880))(1:612)|613|(1:617)|618|619|(2:621|(1:623))|624|(3:626|627|(1:629))(1:876)|630|631|632|(3:634|(1:636)(1:673)|637)(12:674|675|(2:677|(5:729|(12:731|(10:736|(1:775)(1:740)|741|(2:742|(2:744|(2:747|748)(1:746))(1:774))|749|(2:751|(1:753)(2:772|768))(1:773)|(7:755|(2:757|(5:759|760|761|(1:763)(1:769)|764))|770|760|761|(0)(0)|764)(1:771)|765|(1:767)|768)|776|(1:781)(1:780)|741|(3:742|(0)(0)|746)|749|(0)(0)|(0)(0)|765|(0)|768)(3:782|(1:784)(6:786|(2:792|(7:794|(1:796)(1:802)|797|(1:799)(1:801)|800|639|640))|803|804|805|(6:821|822|(1:824)(2:866|867)|825|(5:(8:832|(1:863)(1:836)|837|838|(1:840)(1:862)|841|842|843)(1:864)|844|(3:852|853|(1:857))|846|(1:848))(1:829)|830)(4:811|(1:813)(1:820)|(2:815|(1:817))(1:819)|818))|785)|641|(8:643|(1:645)(1:671)|646|647|648|649|(1:663)|653)(1:672)|(4:655|(1:657)(1:661)|658|660)(1:662))(1:680))(1:870)|681|682|683|684|685|686|(3:688|689|690)(2:722|723)|691|(9:(7:697|(2:699|(5:701|702|703|(1:705)(1:718)|706))|719|702|703|(0)(0)|706)(1:720)|707|708|(2:716|717)(1:712)|713|(1:715)|641|(0)(0)|(0)(0))(5:695|640|641|(0)(0)|(0)(0)))|638|639|640|641|(0)(0)|(0)(0))|91|(1:93)(1:99)|94|(1:96)|97|98)|886|(4:898|(10:900|(1:902)|(1:933)(3:906|(2:908|(1:910)(1:931))(1:932)|911)|912|(1:914)|915|(1:917)(2:925|(1:927)(2:928|(1:930)))|918|(1:920)(1:924)|921)(2:934|(15:936|(1:938)|939|(1:941)|942|(1:944)(1:965)|945|(1:949)|950|(1:952)|953|(3:955|(1:957)(1:959)|958)|960|(1:962)(1:964)|963))|922|923)|198|(0)(0)|91|(0)(0)|94|(0)|97|98)|966|(16:968|(1:970)(1:1007)|971|(1:973)|(1:977)|978|(1:980)|981|(1:985)|(1:987)|(1:991)|(1:993)|994|(1:996)(1:1006)|997|(4:999|(1:1001)(1:1004)|1002|1003)(1:1005))(9:1008|(1:1012)|1013|(2:1015|(1:1017))|(1:1021)|1022|(1:1036)(1:1026)|1027|(4:1029|(1:1031)(1:1034)|1032|1033)(1:1035))))(1:1081)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(12:188|193|(0)|886|(1:888)|890|893|895|898|(0)(0)|922|923)|966|(0)(0)))(1:1134)|1133|105|(0)|1130|(0)|113|(0)|116|(2:119|(0))|122|(0)(0)|134|(1:136)|1082|1083|138|(0)|141|142|(0)(0)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(0)|966|(0)(0))|1135|113|(0)|116|(0)|122|(0)(0)|134|(0)|1082|1083|138|(0)|141|142|(0)(0)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(0)|966|(0)(0)))(1:1161)|1139|(1:1141)(2:1159|1160)|1142|(3:(3:1146|1147|1148)|1149|(2:1151|(1:1153)(2:1154|(1:1156))))(2:1157|1158)|77|78|(0)|1135|113|(0)|116|(0)|122|(0)(0)|134|(0)|1082|1083|138|(0)|141|142|(0)(0)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(0)|966|(0)(0)))(1:1169)|1166|55|56|57|(0)|60|(1:62)|1163|70|71|(0)(0)|1139|(0)(0)|1142|(0)(0)|77|78|(0)|1135|113|(0)|116|(0)|122|(0)(0)|134|(0)|1082|1083|138|(0)|141|142|(0)(0)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(0)|966|(0)(0))(1:1540))|30|31|32|(0)(0)|(0)(0)|1166|55|56|57|(0)|60|(0)|1163|70|71|(0)(0)|1139|(0)(0)|1142|(0)(0)|77|78|(0)|1135|113|(0)|116|(0)|122|(0)(0)|134|(0)|1082|1083|138|(0)|141|142|(0)(0)|1079|(0)|1078|156|157|158|159|160|(0)(0)|163|164|(0)(0)|167|(0)|1059|170|(0)(0)|182|(0)|1038|186|(0)|966|(0)(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(7:674|675|(6:(2:677|(5:729|(12:731|(10:736|(1:775)(1:740)|741|(2:742|(2:744|(2:747|748)(1:746))(1:774))|749|(2:751|(1:753)(2:772|768))(1:773)|(7:755|(2:757|(5:759|760|761|(1:763)(1:769)|764))|770|760|761|(0)(0)|764)(1:771)|765|(1:767)|768)|776|(1:781)(1:780)|741|(3:742|(0)(0)|746)|749|(0)(0)|(0)(0)|765|(0)|768)(3:782|(1:784)(6:786|(2:792|(7:794|(1:796)(1:802)|797|(1:799)(1:801)|800|639|640))|803|804|805|(6:821|822|(1:824)(2:866|867)|825|(5:(8:832|(1:863)(1:836)|837|838|(1:840)(1:862)|841|842|843)(1:864)|844|(3:852|853|(1:857))|846|(1:848))(1:829)|830)(4:811|(1:813)(1:820)|(2:815|(1:817))(1:819)|818))|785)|641|(8:643|(1:645)(1:671)|646|647|648|649|(1:663)|653)(1:672)|(4:655|(1:657)(1:661)|658|660)(1:662))(1:680))(1:870)|685|686|(3:688|689|690)(2:722|723)|691|(9:(7:697|(2:699|(5:701|702|703|(1:705)(1:718)|706))|719|702|703|(0)(0)|706)(1:720)|707|708|(2:716|717)(1:712)|713|(1:715)|641|(0)(0)|(0)(0))(5:695|640|641|(0)(0)|(0)(0)))|681|682|683|684) */
    /* JADX WARN: Code restructure failed: missing block: B:1390:0x1b8b, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1391:0x1b8c, code lost:
        r5 = r77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1464:0x1cdf, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1466:0x1ce3, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1467:0x1ce4, code lost:
        r5 = r77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1468:0x1ce6, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1469:0x1ce7, code lost:
        r5 = r77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1470:0x1ce9, code lost:
        r7 = r12;
        r2 = r0;
        r5 = r5;
        r15 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1473:0x1cef, code lost:
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1474:0x1cf0, code lost:
        r5 = r77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:147:0x034c, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1481:0x1d06, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1482:0x1d07, code lost:
        r7 = r54;
        r5 = r77;
        r2 = r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:148:0x034d, code lost:
        r7 = r54;
        r5 = r77;
        r2 = r0;
        r4 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x0527, code lost:
        if (r6.containsKey("query_id") != false) goto L1386;
     */
    /* JADX WARN: Code restructure failed: missing block: B:260:0x054b, code lost:
        if (r6.containsKey("query_id") != false) goto L1386;
     */
    /* JADX WARN: Code restructure failed: missing block: B:261:0x054d, code lost:
        r15 = r60;
     */
    /* JADX WARN: Code restructure failed: missing block: B:472:0x0924, code lost:
        if (r69.getId() != 1) goto L100;
     */
    /* JADX WARN: Code restructure failed: missing block: B:774:0x0eec, code lost:
        if (r7.roundVideo == false) goto L491;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1131:0x15a3  */
    /* JADX WARN: Removed duplicated region for block: B:1197:0x1706 A[Catch: Exception -> 0x15dc, TryCatch #15 {Exception -> 0x15dc, blocks: (B:1135:0x15c8, B:1137:0x15d1, B:1144:0x15ec, B:1146:0x15f2, B:1150:0x1600, B:1152:0x1606, B:1156:0x161f, B:1158:0x1625, B:1164:0x163f, B:1166:0x1643, B:1168:0x1662, B:1167:0x165b, B:1177:0x16a3, B:1179:0x16b2, B:1182:0x16b9, B:1184:0x16c2, B:1186:0x16c6, B:1194:0x16f0, B:1195:0x16fe, B:1197:0x1706, B:1199:0x1712, B:1200:0x1721, B:1201:0x1724, B:1209:0x1777, B:1211:0x178d, B:1213:0x1795, B:1215:0x17a0, B:1214:0x179c, B:1206:0x1739, B:1187:0x16cb, B:1188:0x16d3, B:1190:0x16e0, B:1192:0x16e4, B:1193:0x16e9), top: B:1515:0x15c8 }] */
    /* JADX WARN: Removed duplicated region for block: B:1203:0x1732  */
    /* JADX WARN: Removed duplicated region for block: B:1207:0x1773  */
    /* JADX WARN: Removed duplicated region for block: B:1209:0x1777 A[Catch: Exception -> 0x15dc, TryCatch #15 {Exception -> 0x15dc, blocks: (B:1135:0x15c8, B:1137:0x15d1, B:1144:0x15ec, B:1146:0x15f2, B:1150:0x1600, B:1152:0x1606, B:1156:0x161f, B:1158:0x1625, B:1164:0x163f, B:1166:0x1643, B:1168:0x1662, B:1167:0x165b, B:1177:0x16a3, B:1179:0x16b2, B:1182:0x16b9, B:1184:0x16c2, B:1186:0x16c6, B:1194:0x16f0, B:1195:0x16fe, B:1197:0x1706, B:1199:0x1712, B:1200:0x1721, B:1201:0x1724, B:1209:0x1777, B:1211:0x178d, B:1213:0x1795, B:1215:0x17a0, B:1214:0x179c, B:1206:0x1739, B:1187:0x16cb, B:1188:0x16d3, B:1190:0x16e0, B:1192:0x16e4, B:1193:0x16e9), top: B:1515:0x15c8 }] */
    /* JADX WARN: Removed duplicated region for block: B:1218:0x17a9  */
    /* JADX WARN: Removed duplicated region for block: B:1219:0x17ab  */
    /* JADX WARN: Removed duplicated region for block: B:1221:0x17b1  */
    /* JADX WARN: Removed duplicated region for block: B:1224:0x17c3 A[Catch: Exception -> 0x1cdf, TRY_LEAVE, TryCatch #13 {Exception -> 0x1cdf, blocks: (B:1220:0x17ac, B:1222:0x17bd, B:1224:0x17c3, B:1398:0x1ba8, B:1402:0x1bb4, B:1404:0x1bc2, B:1406:0x1bd0, B:1408:0x1bd4, B:1409:0x1bd7, B:1411:0x1bdb, B:1412:0x1be7, B:1414:0x1beb, B:1416:0x1bef, B:1418:0x1bf9, B:1420:0x1bfe, B:1422:0x1c04, B:1424:0x1c0f, B:1429:0x1c1e, B:1431:0x1c33, B:1433:0x1c39, B:1435:0x1c3f, B:1436:0x1c45, B:1438:0x1c50, B:1440:0x1c56, B:1441:0x1c5e, B:1443:0x1c62, B:1445:0x1c68, B:1447:0x1c73, B:1449:0x1c79, B:1450:0x1c87, B:1452:0x1c95, B:1454:0x1c99, B:1456:0x1cb2, B:1458:0x1ccd, B:1460:0x1cd3, B:1462:0x1cd9, B:1455:0x1cab), top: B:1512:0x0c66 }] */
    /* JADX WARN: Removed duplicated region for block: B:1345:0x1aef  */
    /* JADX WARN: Removed duplicated region for block: B:1346:0x1af1  */
    /* JADX WARN: Removed duplicated region for block: B:1363:0x1b2a A[Catch: Exception -> 0x1b6d, TRY_ENTER, TRY_LEAVE, TryCatch #3 {Exception -> 0x1b6d, blocks: (B:1363:0x1b2a, B:1368:0x1b38, B:1367:0x1b31, B:1350:0x1af8, B:1357:0x1b0d), top: B:1497:0x1af8 }] */
    /* JADX WARN: Removed duplicated region for block: B:1378:0x1b6f  */
    /* JADX WARN: Removed duplicated region for block: B:1380:0x1b73 A[Catch: Exception -> 0x1b85, TryCatch #41 {Exception -> 0x1b85, blocks: (B:1370:0x1b41, B:1375:0x1b60, B:1380:0x1b73, B:1382:0x1b79, B:1384:0x1b7f), top: B:1557:0x1b41 }] */
    /* JADX WARN: Removed duplicated region for block: B:1398:0x1ba8 A[Catch: Exception -> 0x1cdf, TRY_ENTER, TryCatch #13 {Exception -> 0x1cdf, blocks: (B:1220:0x17ac, B:1222:0x17bd, B:1224:0x17c3, B:1398:0x1ba8, B:1402:0x1bb4, B:1404:0x1bc2, B:1406:0x1bd0, B:1408:0x1bd4, B:1409:0x1bd7, B:1411:0x1bdb, B:1412:0x1be7, B:1414:0x1beb, B:1416:0x1bef, B:1418:0x1bf9, B:1420:0x1bfe, B:1422:0x1c04, B:1424:0x1c0f, B:1429:0x1c1e, B:1431:0x1c33, B:1433:0x1c39, B:1435:0x1c3f, B:1436:0x1c45, B:1438:0x1c50, B:1440:0x1c56, B:1441:0x1c5e, B:1443:0x1c62, B:1445:0x1c68, B:1447:0x1c73, B:1449:0x1c79, B:1450:0x1c87, B:1452:0x1c95, B:1454:0x1c99, B:1456:0x1cb2, B:1458:0x1ccd, B:1460:0x1cd3, B:1462:0x1cd9, B:1455:0x1cab), top: B:1512:0x0c66 }] */
    /* JADX WARN: Removed duplicated region for block: B:1436:0x1c45 A[Catch: Exception -> 0x1cdf, TryCatch #13 {Exception -> 0x1cdf, blocks: (B:1220:0x17ac, B:1222:0x17bd, B:1224:0x17c3, B:1398:0x1ba8, B:1402:0x1bb4, B:1404:0x1bc2, B:1406:0x1bd0, B:1408:0x1bd4, B:1409:0x1bd7, B:1411:0x1bdb, B:1412:0x1be7, B:1414:0x1beb, B:1416:0x1bef, B:1418:0x1bf9, B:1420:0x1bfe, B:1422:0x1c04, B:1424:0x1c0f, B:1429:0x1c1e, B:1431:0x1c33, B:1433:0x1c39, B:1435:0x1c3f, B:1436:0x1c45, B:1438:0x1c50, B:1440:0x1c56, B:1441:0x1c5e, B:1443:0x1c62, B:1445:0x1c68, B:1447:0x1c73, B:1449:0x1c79, B:1450:0x1c87, B:1452:0x1c95, B:1454:0x1c99, B:1456:0x1cb2, B:1458:0x1ccd, B:1460:0x1cd3, B:1462:0x1cd9, B:1455:0x1cab), top: B:1512:0x0c66 }] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0320  */
    /* JADX WARN: Removed duplicated region for block: B:1486:0x1d17  */
    /* JADX WARN: Removed duplicated region for block: B:1487:0x1d19  */
    /* JADX WARN: Removed duplicated region for block: B:1490:0x1d1f  */
    /* JADX WARN: Removed duplicated region for block: B:1499:0x08b5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1517:0x0f16 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:151:0x0356  */
    /* JADX WARN: Removed duplicated region for block: B:1553:0x0b23 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1567:0x1724 A[EDGE_INSN: B:1567:0x1724->B:1201:0x1724 ?: BREAK  , SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:1580:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:404:0x081a  */
    /* JADX WARN: Removed duplicated region for block: B:413:0x0849  */
    /* JADX WARN: Removed duplicated region for block: B:418:0x085a A[Catch: Exception -> 0x0842, TRY_ENTER, TRY_LEAVE, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:421:0x0866 A[Catch: Exception -> 0x0842, TRY_ENTER, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:435:0x089f  */
    /* JADX WARN: Removed duplicated region for block: B:440:0x08ad  */
    /* JADX WARN: Removed duplicated region for block: B:443:0x08b3  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x08c5  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x0902  */
    /* JADX WARN: Removed duplicated region for block: B:467:0x0919  */
    /* JADX WARN: Removed duplicated region for block: B:490:0x097e A[Catch: Exception -> 0x0842, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:494:0x0991 A[Catch: Exception -> 0x0842, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:497:0x09b0 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0115 A[Catch: Exception -> 0x1d06, TRY_ENTER, TRY_LEAVE, TryCatch #40 {Exception -> 0x1d06, blocks: (B:49:0x0115, B:152:0x035c, B:154:0x0362, B:158:0x0379, B:159:0x037f, B:195:0x041c, B:196:0x0422, B:205:0x044b, B:206:0x0451, B:216:0x0484, B:217:0x048a), top: B:1534:0x0113 }] */
    /* JADX WARN: Removed duplicated region for block: B:500:0x09c2 A[Catch: Exception -> 0x0842, TRY_LEAVE, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:503:0x09ce A[Catch: Exception -> 0x0842, TRY_ENTER, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:513:0x09fd A[Catch: Exception -> 0x1cef, TRY_ENTER, TRY_LEAVE, TryCatch #2 {Exception -> 0x1cef, blocks: (B:415:0x0850, B:432:0x0895, B:501:0x09c8, B:557:0x0aa5, B:563:0x0ab4, B:567:0x0abd, B:585:0x0afc, B:562:0x0ab2, B:513:0x09fd, B:529:0x0a2c, B:524:0x0a1a, B:518:0x0a0f), top: B:1495:0x0850 }] */
    /* JADX WARN: Removed duplicated region for block: B:559:0x0aab A[Catch: Exception -> 0x0842, TRY_ENTER, TRY_LEAVE, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:565:0x0ab8 A[Catch: Exception -> 0x0842, TRY_ENTER, TRY_LEAVE, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:569:0x0ac1 A[Catch: Exception -> 0x0842, TRY_ENTER, TryCatch #43 {Exception -> 0x0842, blocks: (B:405:0x081c, B:418:0x085a, B:421:0x0866, B:424:0x086e, B:426:0x0878, B:429:0x088d, B:436:0x08a1, B:473:0x0926, B:475:0x092f, B:477:0x0939, B:480:0x094c, B:483:0x0956, B:485:0x095d, B:487:0x0971, B:494:0x0991, B:498:0x09b2, B:500:0x09c2, B:503:0x09ce, B:505:0x09de, B:507:0x09ec, B:509:0x09f2, B:511:0x09f6, B:559:0x0aab, B:565:0x0ab8, B:569:0x0ac1, B:571:0x0acb, B:573:0x0adf, B:580:0x0af0, B:516:0x0a0a, B:521:0x0a15, B:531:0x0a30, B:533:0x0a36, B:536:0x0a3d, B:538:0x0a49, B:540:0x0a59, B:543:0x0a60, B:541:0x0a5c, B:544:0x0a6b, B:546:0x0a71, B:549:0x0a78, B:551:0x0a84, B:553:0x0a94, B:556:0x0a9b, B:554:0x0a97, B:526:0x0a20, B:528:0x0a24, B:488:0x097a, B:490:0x097e, B:479:0x0945, B:428:0x087c), top: B:1560:0x081c }] */
    /* JADX WARN: Removed duplicated region for block: B:576:0x0ae9  */
    /* JADX WARN: Removed duplicated region for block: B:579:0x0aee A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:590:0x0b18  */
    /* JADX WARN: Removed duplicated region for block: B:591:0x0b1a  */
    /* JADX WARN: Removed duplicated region for block: B:606:0x0b41  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x0b47 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:614:0x0b50 A[Catch: Exception -> 0x0b3b, TRY_ENTER, TryCatch #37 {Exception -> 0x0b3b, blocks: (B:594:0x0b23, B:614:0x0b50, B:618:0x0b77, B:622:0x0b89, B:624:0x0b8e, B:648:0x0bf9, B:744:0x0e3e, B:746:0x0e44, B:756:0x0e8e, B:747:0x0e5e, B:749:0x0e62, B:751:0x0e75, B:752:0x0e7b, B:754:0x0e7f, B:755:0x0e89, B:768:0x0eda, B:771:0x0ee2, B:773:0x0eea, B:781:0x0eff, B:783:0x0f06, B:676:0x0c98, B:678:0x0ca9, B:680:0x0cb7, B:682:0x0cbf, B:684:0x0ce6, B:686:0x0cf9, B:689:0x0d18, B:691:0x0d29, B:693:0x0d2f, B:694:0x0d37, B:696:0x0d48, B:707:0x0d7c, B:697:0x0d56, B:699:0x0d5c, B:700:0x0d66, B:702:0x0d6a, B:687:0x0d09, B:688:0x0d11, B:690:0x0d22, B:710:0x0d97, B:712:0x0da4, B:713:0x0db0, B:715:0x0db4, B:716:0x0dc0, B:720:0x0dcb, B:722:0x0dd1, B:724:0x0dd5, B:725:0x0ddd, B:727:0x0de3, B:728:0x0deb, B:730:0x0e09, B:732:0x0e12, B:734:0x0e18, B:739:0x0e23, B:632:0x0bc5, B:634:0x0bcf, B:638:0x0bde, B:644:0x0bef, B:599:0x0b2f, B:601:0x0b37), top: B:1553:0x0b23 }] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0135  */
    /* JADX WARN: Removed duplicated region for block: B:628:0x0ba5  */
    /* JADX WARN: Removed duplicated region for block: B:647:0x0bf7 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:651:0x0c68  */
    /* JADX WARN: Removed duplicated region for block: B:658:0x0c77  */
    /* JADX WARN: Removed duplicated region for block: B:676:0x0c98 A[Catch: Exception -> 0x0b3b, TryCatch #37 {Exception -> 0x0b3b, blocks: (B:594:0x0b23, B:614:0x0b50, B:618:0x0b77, B:622:0x0b89, B:624:0x0b8e, B:648:0x0bf9, B:744:0x0e3e, B:746:0x0e44, B:756:0x0e8e, B:747:0x0e5e, B:749:0x0e62, B:751:0x0e75, B:752:0x0e7b, B:754:0x0e7f, B:755:0x0e89, B:768:0x0eda, B:771:0x0ee2, B:773:0x0eea, B:781:0x0eff, B:783:0x0f06, B:676:0x0c98, B:678:0x0ca9, B:680:0x0cb7, B:682:0x0cbf, B:684:0x0ce6, B:686:0x0cf9, B:689:0x0d18, B:691:0x0d29, B:693:0x0d2f, B:694:0x0d37, B:696:0x0d48, B:707:0x0d7c, B:697:0x0d56, B:699:0x0d5c, B:700:0x0d66, B:702:0x0d6a, B:687:0x0d09, B:688:0x0d11, B:690:0x0d22, B:710:0x0d97, B:712:0x0da4, B:713:0x0db0, B:715:0x0db4, B:716:0x0dc0, B:720:0x0dcb, B:722:0x0dd1, B:724:0x0dd5, B:725:0x0ddd, B:727:0x0de3, B:728:0x0deb, B:730:0x0e09, B:732:0x0e12, B:734:0x0e18, B:739:0x0e23, B:632:0x0bc5, B:634:0x0bcf, B:638:0x0bde, B:644:0x0bef, B:599:0x0b2f, B:601:0x0b37), top: B:1553:0x0b23 }] */
    /* JADX WARN: Removed duplicated region for block: B:708:0x0d91  */
    /* JADX WARN: Removed duplicated region for block: B:742:0x0e3b  */
    /* JADX WARN: Removed duplicated region for block: B:783:0x0f06 A[Catch: Exception -> 0x0b3b, TRY_LEAVE, TryCatch #37 {Exception -> 0x0b3b, blocks: (B:594:0x0b23, B:614:0x0b50, B:618:0x0b77, B:622:0x0b89, B:624:0x0b8e, B:648:0x0bf9, B:744:0x0e3e, B:746:0x0e44, B:756:0x0e8e, B:747:0x0e5e, B:749:0x0e62, B:751:0x0e75, B:752:0x0e7b, B:754:0x0e7f, B:755:0x0e89, B:768:0x0eda, B:771:0x0ee2, B:773:0x0eea, B:781:0x0eff, B:783:0x0f06, B:676:0x0c98, B:678:0x0ca9, B:680:0x0cb7, B:682:0x0cbf, B:684:0x0ce6, B:686:0x0cf9, B:689:0x0d18, B:691:0x0d29, B:693:0x0d2f, B:694:0x0d37, B:696:0x0d48, B:707:0x0d7c, B:697:0x0d56, B:699:0x0d5c, B:700:0x0d66, B:702:0x0d6a, B:687:0x0d09, B:688:0x0d11, B:690:0x0d22, B:710:0x0d97, B:712:0x0da4, B:713:0x0db0, B:715:0x0db4, B:716:0x0dc0, B:720:0x0dcb, B:722:0x0dd1, B:724:0x0dd5, B:725:0x0ddd, B:727:0x0de3, B:728:0x0deb, B:730:0x0e09, B:732:0x0e12, B:734:0x0e18, B:739:0x0e23, B:632:0x0bc5, B:634:0x0bcf, B:638:0x0bde, B:644:0x0bef, B:599:0x0b2f, B:601:0x0b37), top: B:1553:0x0b23 }] */
    /* JADX WARN: Removed duplicated region for block: B:798:0x0f6f  */
    /* JADX WARN: Removed duplicated region for block: B:799:0x0f72 A[Catch: Exception -> 0x1270, TryCatch #1 {Exception -> 0x1270, blocks: (B:789:0x0f2e, B:791:0x0f34, B:792:0x0f4f, B:796:0x0f69, B:808:0x0fac, B:799:0x0f72, B:801:0x0f8c, B:803:0x0f93, B:805:0x0f99, B:806:0x0fa7, B:860:0x10cb, B:852:0x109f, B:854:0x10ad, B:856:0x10b4, B:858:0x10ba, B:859:0x10c8, B:894:0x1174, B:899:0x1180, B:928:0x11e0, B:930:0x11e6, B:941:0x1227, B:931:0x11eb, B:933:0x1205, B:935:0x120c, B:937:0x1212, B:938:0x1220), top: B:1494:0x0ec2 }] */
    /* JADX WARN: Removed duplicated region for block: B:808:0x0fac A[Catch: Exception -> 0x1270, TRY_LEAVE, TryCatch #1 {Exception -> 0x1270, blocks: (B:789:0x0f2e, B:791:0x0f34, B:792:0x0f4f, B:796:0x0f69, B:808:0x0fac, B:799:0x0f72, B:801:0x0f8c, B:803:0x0f93, B:805:0x0f99, B:806:0x0fa7, B:860:0x10cb, B:852:0x109f, B:854:0x10ad, B:856:0x10b4, B:858:0x10ba, B:859:0x10c8, B:894:0x1174, B:899:0x1180, B:928:0x11e0, B:930:0x11e6, B:941:0x1227, B:931:0x11eb, B:933:0x1205, B:935:0x120c, B:937:0x1212, B:938:0x1220), top: B:1494:0x0ec2 }] */
    /* JADX WARN: Removed duplicated region for block: B:814:0x0fc8  */
    /* JADX WARN: Removed duplicated region for block: B:817:0x0fda A[Catch: Exception -> 0x1050, TryCatch #25 {Exception -> 0x1050, blocks: (B:813:0x0fc5, B:815:0x0fce, B:817:0x0fda, B:819:0x0fe7, B:820:0x0feb, B:825:0x100f, B:827:0x102a, B:829:0x103d, B:830:0x104c, B:841:0x1065, B:847:0x1086, B:865:0x10e2, B:850:0x1091, B:868:0x10ea, B:870:0x10f7, B:872:0x10ff, B:875:0x110f, B:877:0x1112, B:878:0x1122, B:879:0x1128, B:881:0x112c, B:883:0x1134, B:886:0x1149, B:946:0x123c, B:948:0x1243, B:950:0x124f, B:952:0x125c), top: B:1494:0x0ec2 }] */
    /* JADX WARN: Removed duplicated region for block: B:930:0x11e6 A[Catch: Exception -> 0x1270, TryCatch #1 {Exception -> 0x1270, blocks: (B:789:0x0f2e, B:791:0x0f34, B:792:0x0f4f, B:796:0x0f69, B:808:0x0fac, B:799:0x0f72, B:801:0x0f8c, B:803:0x0f93, B:805:0x0f99, B:806:0x0fa7, B:860:0x10cb, B:852:0x109f, B:854:0x10ad, B:856:0x10b4, B:858:0x10ba, B:859:0x10c8, B:894:0x1174, B:899:0x1180, B:928:0x11e0, B:930:0x11e6, B:941:0x1227, B:931:0x11eb, B:933:0x1205, B:935:0x120c, B:937:0x1212, B:938:0x1220), top: B:1494:0x0ec2 }] */
    /* JADX WARN: Removed duplicated region for block: B:931:0x11eb A[Catch: Exception -> 0x1270, TryCatch #1 {Exception -> 0x1270, blocks: (B:789:0x0f2e, B:791:0x0f34, B:792:0x0f4f, B:796:0x0f69, B:808:0x0fac, B:799:0x0f72, B:801:0x0f8c, B:803:0x0f93, B:805:0x0f99, B:806:0x0fa7, B:860:0x10cb, B:852:0x109f, B:854:0x10ad, B:856:0x10b4, B:858:0x10ba, B:859:0x10c8, B:894:0x1174, B:899:0x1180, B:928:0x11e0, B:930:0x11e6, B:941:0x1227, B:931:0x11eb, B:933:0x1205, B:935:0x120c, B:937:0x1212, B:938:0x1220), top: B:1494:0x0ec2 }] */
    /* JADX WARN: Removed duplicated region for block: B:940:0x1225  */
    /* JADX WARN: Removed duplicated region for block: B:954:0x1261  */
    /* JADX WARN: Type inference failed for: r12v1, types: [boolean] */
    /* JADX WARN: Type inference failed for: r12v2 */
    /* JADX WARN: Type inference failed for: r12v3, types: [org.telegram.messenger.SendMessagesHelper, org.telegram.messenger.BaseController] */
    /* JADX WARN: Type inference failed for: r15v21 */
    /* JADX WARN: Type inference failed for: r15v68 */
    /* JADX WARN: Type inference failed for: r15v71 */
    /* JADX WARN: Type inference failed for: r19v27 */
    /* JADX WARN: Type inference failed for: r19v35 */
    /* JADX WARN: Type inference failed for: r19v75 */
    /* JADX WARN: Type inference failed for: r19v76 */
    /* JADX WARN: Type inference failed for: r19v77 */
    /* JADX WARN: Type inference failed for: r19v78 */
    /* JADX WARN: Type inference failed for: r1v10 */
    /* JADX WARN: Type inference failed for: r1v11, types: [org.telegram.tgnet.TLRPC$Message, org.telegram.tgnet.TLRPC$TL_message] */
    /* JADX WARN: Type inference failed for: r1v12 */
    /* JADX WARN: Type inference failed for: r1v120 */
    /* JADX WARN: Type inference failed for: r1v30, types: [org.telegram.tgnet.TLRPC$TL_message] */
    /* JADX WARN: Type inference failed for: r1v31 */
    /* JADX WARN: Type inference failed for: r1v32 */
    /* JADX WARN: Type inference failed for: r1v33, types: [org.telegram.tgnet.TLRPC$Message, org.telegram.tgnet.TLRPC$TL_message] */
    /* JADX WARN: Type inference failed for: r1v34 */
    /* JADX WARN: Type inference failed for: r1v35 */
    /* JADX WARN: Type inference failed for: r1v36, types: [org.telegram.tgnet.TLRPC$TL_message] */
    /* JADX WARN: Type inference failed for: r1v37, types: [org.telegram.tgnet.TLRPC$Message] */
    /* JADX WARN: Type inference failed for: r1v38, types: [org.telegram.tgnet.TLRPC$TL_message_secret] */
    /* JADX WARN: Type inference failed for: r1v8 */
    /* JADX WARN: Type inference failed for: r1v9 */
    /* JADX WARN: Type inference failed for: r22v16 */
    /* JADX WARN: Type inference failed for: r22v17 */
    /* JADX WARN: Type inference failed for: r22v18 */
    /* JADX WARN: Type inference failed for: r22v19 */
    /* JADX WARN: Type inference failed for: r22v35 */
    /* JADX WARN: Type inference failed for: r22v36 */
    /* JADX WARN: Type inference failed for: r2v158, types: [org.telegram.tgnet.TLRPC$TL_inputMediaDocument, org.telegram.tgnet.TLRPC$InputMedia] */
    /* JADX WARN: Type inference failed for: r2v159 */
    /* JADX WARN: Type inference failed for: r2v161 */
    /* JADX WARN: Type inference failed for: r2v197, types: [org.telegram.tgnet.TLRPC$TL_messages_sendMedia, org.telegram.tgnet.TLObject] */
    /* JADX WARN: Type inference failed for: r2v198 */
    /* JADX WARN: Type inference failed for: r2v201, types: [org.telegram.tgnet.TLRPC$TL_messages_sendMultiMedia] */
    /* JADX WARN: Type inference failed for: r2v243 */
    /* JADX WARN: Type inference failed for: r2v244 */
    /* JADX WARN: Type inference failed for: r5v169 */
    /* JADX WARN: Type inference failed for: r5v170 */
    /* JADX WARN: Type inference failed for: r5v235 */
    /* JADX WARN: Type inference failed for: r5v243, types: [org.telegram.tgnet.TLRPC$TL_inputMediaPhoto, org.telegram.tgnet.TLRPC$InputMedia] */
    /* JADX WARN: Type inference failed for: r5v285, types: [org.telegram.tgnet.TLRPC$TL_inputMediaPoll, org.telegram.tgnet.TLRPC$InputMedia] */
    /* JADX WARN: Type inference failed for: r5v431 */
    /* JADX WARN: Type inference failed for: r5v432 */
    /* JADX WARN: Type inference failed for: r5v433 */
    /* JADX WARN: Type inference failed for: r79v0, types: [java.lang.Object] */
    /* JADX WARN: Type inference failed for: r7v54, types: [org.telegram.messenger.MessageObject] */
    /* JADX WARN: Type inference failed for: r7v57 */
    /* JADX WARN: Type inference failed for: r7v62, types: [org.telegram.messenger.SendMessagesHelper] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void sendMessage(String str, String str2, TLRPC$MessageMedia tLRPC$MessageMedia, TLRPC$TL_photo tLRPC$TL_photo, VideoEditedInfo videoEditedInfo, TLRPC$User tLRPC$User, TLRPC$TL_document tLRPC$TL_document, TLRPC$TL_game tLRPC$TL_game, TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll, TLRPC$TL_messageMediaInvoice tLRPC$TL_messageMediaInvoice, long j, String str3, MessageObject messageObject, MessageObject messageObject2, TLRPC$WebPage tLRPC$WebPage, boolean z, MessageObject messageObject3, ArrayList<TLRPC$MessageEntity> arrayList, TLRPC$ReplyMarkup tLRPC$ReplyMarkup, HashMap<String, String> hashMap, boolean z2, int i, int i2, Object obj, MessageObject.SendAnimationData sendAnimationData, boolean z3, boolean z4) {
        String str4;
        TLRPC$InputPeer tLRPC$InputPeer;
        long j2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat;
        boolean z5;
        TLRPC$Peer peer;
        int i3;
        Exception exc;
        MessageObject messageObject4;
        TLRPC$Message tLRPC$Message;
        TLRPC$Message tLRPC$Message2;
        SendMessagesHelper sendMessagesHelper;
        int i4;
        SendMessagesHelper sendMessagesHelper2;
        Object obj2;
        TLRPC$Message tLRPC$Message3;
        String str5;
        TLRPC$User tLRPC$User2;
        TLRPC$WebPage tLRPC$WebPage2;
        String str6;
        TLRPC$Message tLRPC$TL_message;
        boolean z6;
        char c;
        boolean z7;
        HashMap<String, String> hashMap2;
        long j3;
        boolean z8;
        DelayedMessage delayedMessage;
        HashMap<String, String> hashMap3;
        String stickerSetName;
        long j4;
        DelayedMessage delayedMessage2;
        char c2;
        SendMessagesHelper sendMessagesHelper3;
        SendMessagesHelper sendMessagesHelper4;
        String str7;
        char c3;
        ArrayList<TLRPC$PhotoSize> arrayList2;
        char c4;
        SendMessagesHelper sendMessagesHelper5;
        TLRPC$WebPage tLRPC$WebPage3;
        TLRPC$Message tLRPC$Message4;
        HashMap<String, String> hashMap4;
        String str8;
        TLRPC$InputPeer tLRPC$InputPeer2;
        long j5;
        String str9;
        TLRPC$MessageMedia tLRPC$MessageMedia2;
        TLRPC$TL_document tLRPC$TL_document2;
        TLRPC$WebPage tLRPC$WebPage4;
        String str10;
        int i5;
        String str11;
        DelayedMessage delayedMessage3;
        TLRPC$User tLRPC$User3;
        boolean z9;
        char c5;
        TLRPC$TL_photo tLRPC$TL_photo2;
        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll2;
        long j6;
        HashMap<String, String> hashMap5;
        boolean z10;
        TLRPC$Message tLRPC$TL_message2;
        char c6;
        SendMessagesHelper sendMessagesHelper6;
        SendMessagesHelper sendMessagesHelper7;
        TLRPC$MessageMedia tLRPC$MessageMedia3;
        TLRPC$TL_photo tLRPC$TL_photo3;
        Object obj3;
        boolean z11;
        Exception e;
        char c7;
        String str12;
        Object obj4;
        int currentTime;
        String str13;
        int i6;
        TLRPC$InputPeer tLRPC$InputPeer3;
        int i7;
        TLRPC$MessageMedia tLRPC$MessageMedia4;
        int i8;
        int i9;
        long j7;
        boolean z12;
        long j8;
        int i10;
        int i11;
        VideoEditedInfo videoEditedInfo2;
        VideoEditedInfo videoEditedInfo3;
        Object obj5;
        DelayedMessage delayedMessage4;
        TLRPC$Message tLRPC$Message5;
        long j9;
        TLRPC$InputPeer tLRPC$InputPeer4;
        String str14;
        TLRPC$Message tLRPC$Message6;
        int i12;
        int i13;
        TLRPC$Message tLRPC$Message7;
        TLRPC$TL_decryptedMessage tLRPC$TL_decryptedMessage;
        TLRPC$Message tLRPC$Message8;
        HashMap<String, String> hashMap6;
        TLRPC$Message tLRPC$Message9;
        int i14;
        long j10;
        char c8;
        String str15;
        Object obj6;
        DelayedMessage delayedMessage5;
        long j11;
        ArrayList<TLRPC$PhotoSize> arrayList3;
        String str16;
        Object obj7;
        DelayedMessage delayedMessage6;
        int i15;
        String str17;
        int i16;
        String str18;
        TLRPC$Message tLRPC$Message10;
        byte[] bArr;
        int i17;
        long j12;
        DelayedMessage delayedMessage7;
        int i18;
        int i19;
        VideoEditedInfo videoEditedInfo4;
        byte[] bArr2;
        TLRPC$TL_messages_sendEncryptedMultiMedia tLRPC$TL_messages_sendEncryptedMultiMedia;
        TLRPC$Message tLRPC$Message11;
        TLRPC$Message tLRPC$Message12;
        int i20;
        TLRPC$Message tLRPC$Message13;
        String str19;
        TLRPC$InputPeer tLRPC$InputPeer5;
        SendMessagesHelper sendMessagesHelper8;
        TLRPC$InputPeer tLRPC$InputPeer6;
        char c9;
        SendMessagesHelper sendMessagesHelper9;
        TLRPC$Message tLRPC$Message14;
        TLRPC$InputMedia tLRPC$TL_inputMediaUploadedPhoto;
        TLRPC$Message tLRPC$Message15;
        String str20;
        HashMap<String, String> hashMap7;
        TLRPC$TL_photo tLRPC$TL_photo4;
        TLRPC$InputMedia tLRPC$InputMedia;
        boolean z13;
        TLRPC$InputMedia tLRPC$InputMedia2;
        TLRPC$InputMedia tLRPC$InputMedia3;
        DelayedMessage delayedMessage8;
        long j13;
        DelayedMessage delayedMessage9;
        boolean z14;
        String str21;
        SendMessagesHelper sendMessagesHelper10;
        TLRPC$InputPeer tLRPC$InputPeer7;
        TLRPC$Message tLRPC$Message16;
        VideoEditedInfo videoEditedInfo5;
        char c10;
        TLRPC$Message tLRPC$Message17;
        VideoEditedInfo videoEditedInfo6;
        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument;
        String str22;
        int i21;
        String str23;
        TLRPC$InputMedia tLRPC$InputMedia4;
        int i22;
        String str24;
        int i23;
        String str25;
        TLRPC$TL_inputMediaDice tLRPC$TL_inputMediaDice;
        TLRPC$TL_inputMediaUploadedDocument tLRPC$TL_inputMediaUploadedDocument;
        ?? tLRPC$TL_inputMediaDocument2;
        int i24;
        int i25;
        TLRPC$Message tLRPC$Message18;
        boolean z15;
        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument3;
        TLRPC$TL_inputMediaDice tLRPC$TL_inputMediaDice2;
        TLRPC$Message tLRPC$Message19;
        int i26;
        int i27;
        int i28;
        SendMessagesHelper sendMessagesHelper11;
        TLRPC$InputMedia tLRPC$InputMedia5;
        String str26;
        ?? tLRPC$TL_messages_sendMedia;
        String str27;
        int i29;
        int i30;
        TLRPC$InputMedia tLRPC$TL_inputMediaGeoPoint;
        long j14;
        String str28;
        SharedPreferences notificationsSettings;
        StringBuilder sb;
        String str29;
        TLRPC$InputPeer tLRPC$InputPeer8;
        String str30;
        TLRPC$InputPeer tLRPC$InputPeer9;
        String str31;
        TLRPC$User tLRPC$User4;
        TLRPC$TL_document tLRPC$TL_document3;
        String str32;
        char c11;
        TLRPC$TL_photo tLRPC$TL_photo5;
        String str33;
        TLRPC$TL_userRequest_old2 tLRPC$TL_userRequest_old2;
        TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll3;
        String str34;
        String str35;
        String str36;
        String str37;
        TLRPC$TL_photo tLRPC$TL_photo6;
        String str38 = str;
        long j15 = j;
        HashMap<String, String> hashMap8 = hashMap;
        ?? r12 = z4;
        if (tLRPC$User != null && tLRPC$User.phone == null) {
            return;
        }
        long j16 = 0;
        if (j15 == 0) {
            return;
        }
        String str39 = (str38 == null && str2 == null) ? "" : str2;
        String str40 = (hashMap8 == null || !hashMap8.containsKey("originalPath")) ? null : hashMap8.get("originalPath");
        char c12 = 65535;
        TLRPC$Message tLRPC$Message20 = -1;
        c12 = 65535;
        c12 = 65535;
        char c13 = 65535;
        c12 = 65535;
        if (DialogObject.isEncryptedDialog(j)) {
            str4 = str40;
            tLRPC$InputPeer = null;
        } else {
            str4 = str40;
            tLRPC$InputPeer = getMessagesController().getInputPeer(j15);
        }
        long clientUserId = getUserConfig().getClientUserId();
        if (DialogObject.isEncryptedDialog(j)) {
            tLRPC$EncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
            if (tLRPC$EncryptedChat == null) {
                if (messageObject3 != null) {
                    getMessagesStorage().markMessageAsSendError(messageObject3.messageOwner, messageObject3.scheduled);
                    messageObject3.messageOwner.send_state = 2;
                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(messageObject3.getId()));
                    processSentMessage(messageObject3.getId());
                    return;
                }
                return;
            }
            j2 = 0;
        } else if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerChannel) {
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(tLRPC$InputPeer.channel_id));
            TLRPC$ChatFull chatFull = getMessagesController().getChatFull(chat.id);
            boolean z16 = !chat.megagroup;
            if (z16 && chat.has_link && chatFull != null) {
                z5 = z16;
                j2 = chatFull.linked_chat_id;
            } else {
                z5 = z16;
                j2 = 0;
            }
            peer = getMessagesController().getPeer(ChatObject.getSendAsPeerId(chat, chatFull, true));
            tLRPC$EncryptedChat = null;
            TLRPC$Peer tLRPC$Peer = peer;
            if (messageObject3 == null) {
                TLRPC$Message tLRPC$Message21 = messageObject3.messageOwner;
                if (obj == 0 && hashMap8 != null) {
                    try {
                        if (hashMap8.containsKey("parentObject")) {
                            str29 = hashMap8.get("parentObject");
                            if (messageObject3.isForwarded()) {
                                if (hashMap8 != null) {
                                    obj2 = "parentObject";
                                    if (hashMap8.containsKey("fwd_id")) {
                                        tLRPC$InputPeer8 = tLRPC$InputPeer;
                                        str30 = "";
                                    }
                                } else {
                                    obj2 = "parentObject";
                                }
                                if (messageObject3.isDice()) {
                                    str38 = messageObject3.getDiceEmoji();
                                    tLRPC$TL_photo5 = tLRPC$TL_photo;
                                    tLRPC$TL_document3 = tLRPC$TL_document;
                                    tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                    tLRPC$InputPeer9 = tLRPC$InputPeer;
                                    String str41 = "";
                                    str31 = str41;
                                    c11 = 11;
                                    tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                    tLRPC$TL_userRequest_old2 = tLRPC$User;
                                    str37 = str41;
                                } else {
                                    if (messageObject3.type != 0 && !messageObject3.isAnimatedEmoji()) {
                                        int i31 = messageObject3.type;
                                        tLRPC$InputPeer9 = tLRPC$InputPeer;
                                        if (i31 == 4) {
                                            tLRPC$MessageMedia2 = tLRPC$Message21.media;
                                            tLRPC$TL_photo5 = tLRPC$TL_photo;
                                            tLRPC$TL_document3 = tLRPC$TL_document;
                                            str31 = "";
                                            str36 = str39;
                                            c11 = 1;
                                        } else if (i31 == 1) {
                                            TLRPC$TL_photo tLRPC$TL_photo7 = (TLRPC$TL_photo) tLRPC$Message21.media.photo;
                                            String str42 = messageObject3.messageOwner.message;
                                            if (str42 != null) {
                                                str39 = str42;
                                            }
                                            tLRPC$TL_document3 = tLRPC$TL_document;
                                            tLRPC$TL_photo5 = tLRPC$TL_photo7;
                                            str31 = "";
                                            str36 = str39;
                                            c11 = 2;
                                            tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                        } else {
                                            if (i31 != 3 && i31 != 5 && messageObject3.videoEditedInfo == null) {
                                                if (i31 == 12) {
                                                    TLRPC$TL_userRequest_old2 tLRPC$TL_userRequest_old22 = new TLRPC$TL_userRequest_old2();
                                                    TLRPC$MessageMedia tLRPC$MessageMedia5 = tLRPC$Message21.media;
                                                    tLRPC$TL_userRequest_old22.phone = tLRPC$MessageMedia5.phone_number;
                                                    tLRPC$TL_userRequest_old22.first_name = tLRPC$MessageMedia5.first_name;
                                                    tLRPC$TL_userRequest_old22.last_name = tLRPC$MessageMedia5.last_name;
                                                    TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = new TLRPC$TL_restrictionReason();
                                                    tLRPC$TL_restrictionReason.platform = "";
                                                    tLRPC$TL_restrictionReason.reason = "";
                                                    tLRPC$TL_restrictionReason.text = tLRPC$Message21.media.vcard;
                                                    tLRPC$TL_userRequest_old22.restriction_reason.add(tLRPC$TL_restrictionReason);
                                                    str31 = "";
                                                    tLRPC$TL_userRequest_old22.id = tLRPC$Message21.media.user_id;
                                                    tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                    tLRPC$TL_document3 = tLRPC$TL_document;
                                                    tLRPC$TL_userRequest_old2 = tLRPC$TL_userRequest_old22;
                                                    str33 = str39;
                                                    c11 = 6;
                                                    tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                } else {
                                                    str31 = "";
                                                    if (i31 != 8 && i31 != 9 && i31 != 13 && i31 != 14 && i31 != 15) {
                                                        if (i31 == 2) {
                                                            TLRPC$TL_document tLRPC$TL_document4 = (TLRPC$TL_document) tLRPC$Message21.media.document;
                                                            String str43 = messageObject3.messageOwner.message;
                                                            if (str43 != null) {
                                                                tLRPC$TL_userRequest_old2 = tLRPC$User;
                                                                tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                                                tLRPC$TL_document3 = tLRPC$TL_document4;
                                                                str34 = str43;
                                                                c11 = '\b';
                                                                tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                                str35 = str34;
                                                                tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                                str37 = str35;
                                                            } else {
                                                                tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                                tLRPC$User4 = tLRPC$User;
                                                                tLRPC$TL_document3 = tLRPC$TL_document4;
                                                                str32 = str39;
                                                                c11 = '\b';
                                                                tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                                tLRPC$TL_userRequest_old2 = tLRPC$User4;
                                                                str33 = str32;
                                                            }
                                                        } else if (i31 == 17) {
                                                            tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                            tLRPC$TL_userRequest_old2 = tLRPC$User;
                                                            tLRPC$TL_document3 = tLRPC$TL_document;
                                                            str35 = str39;
                                                            c11 = '\n';
                                                            tLRPC$TL_messageMediaPoll3 = (TLRPC$TL_messageMediaPoll) tLRPC$Message21.media;
                                                            tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                            str37 = str35;
                                                        } else {
                                                            tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                            tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                            tLRPC$TL_userRequest_old2 = tLRPC$User;
                                                            tLRPC$TL_document3 = tLRPC$TL_document;
                                                            str33 = str39;
                                                            c11 = 65535;
                                                        }
                                                    }
                                                    TLRPC$TL_document tLRPC$TL_document5 = (TLRPC$TL_document) tLRPC$Message21.media.document;
                                                    String str44 = messageObject3.messageOwner.message;
                                                    if (str44 != null) {
                                                        tLRPC$TL_userRequest_old2 = tLRPC$User;
                                                        tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                                        tLRPC$TL_document3 = tLRPC$TL_document5;
                                                        str34 = str44;
                                                        c11 = 7;
                                                        tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                        str35 = str34;
                                                        tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                        str37 = str35;
                                                    } else {
                                                        tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                        tLRPC$User4 = tLRPC$User;
                                                        tLRPC$TL_document3 = tLRPC$TL_document5;
                                                        str32 = str39;
                                                        c11 = 7;
                                                        tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                        tLRPC$TL_userRequest_old2 = tLRPC$User4;
                                                        str33 = str32;
                                                    }
                                                }
                                                tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                                str37 = str33;
                                            }
                                            str31 = "";
                                            TLRPC$TL_document tLRPC$TL_document6 = (TLRPC$TL_document) tLRPC$Message21.media.document;
                                            String str45 = messageObject3.messageOwner.message;
                                            if (str45 != null) {
                                                tLRPC$TL_userRequest_old2 = tLRPC$User;
                                                tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                                tLRPC$TL_document3 = tLRPC$TL_document6;
                                                str34 = str45;
                                                c11 = 3;
                                                tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                str35 = str34;
                                                tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                str37 = str35;
                                            } else {
                                                tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                                tLRPC$User4 = tLRPC$User;
                                                tLRPC$TL_document3 = tLRPC$TL_document6;
                                                str32 = str39;
                                                c11 = 3;
                                                tLRPC$TL_photo5 = tLRPC$TL_photo;
                                                tLRPC$TL_userRequest_old2 = tLRPC$User4;
                                                str33 = str32;
                                                tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                                str37 = str33;
                                            }
                                        }
                                        tLRPC$TL_userRequest_old2 = tLRPC$User;
                                        str33 = str36;
                                        tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                        str37 = str33;
                                    }
                                    tLRPC$InputPeer9 = tLRPC$InputPeer;
                                    str31 = "";
                                    tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                                    tLRPC$User4 = tLRPC$User;
                                    tLRPC$TL_document3 = tLRPC$TL_document;
                                    str38 = messageObject3.messageOwner.media instanceof TLRPC$TL_messageMediaGame ? str38 : tLRPC$Message21.message;
                                    str32 = str39;
                                    c11 = 0;
                                    tLRPC$TL_photo5 = tLRPC$TL_photo;
                                    tLRPC$TL_userRequest_old2 = tLRPC$User4;
                                    str33 = str32;
                                    tLRPC$TL_messageMediaPoll3 = tLRPC$TL_messageMediaPoll;
                                    str37 = str33;
                                }
                                if (hashMap8 == null || !hashMap8.containsKey("query_id")) {
                                    tLRPC$TL_photo6 = tLRPC$TL_photo5;
                                } else {
                                    tLRPC$TL_photo6 = tLRPC$TL_photo5;
                                    c11 = '\t';
                                }
                                int i32 = tLRPC$Message21.media.ttl_seconds;
                                SendMessagesHelper sendMessagesHelper12 = this;
                                z10 = z2;
                                if (i32 > 0) {
                                    hashMap5 = hashMap8;
                                    tLRPC$WebPage4 = tLRPC$WebPage;
                                    str10 = str37;
                                    str11 = str29;
                                    tLRPC$InputPeer2 = tLRPC$InputPeer9;
                                    delayedMessage3 = null;
                                    z9 = false;
                                    tLRPC$Message3 = tLRPC$Message21;
                                    c5 = c11;
                                    TLRPC$User tLRPC$User5 = tLRPC$TL_userRequest_old2;
                                    tLRPC$TL_photo2 = tLRPC$TL_photo6;
                                    String str46 = str38;
                                    i5 = i32;
                                    str9 = str46;
                                    tLRPC$User3 = tLRPC$User5;
                                    tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll3;
                                    j6 = clientUserId;
                                    String str47 = str31;
                                    tLRPC$TL_document2 = tLRPC$TL_document3;
                                    str5 = str47;
                                    sendMessagesHelper7 = sendMessagesHelper12;
                                    tLRPC$Message20 = str37;
                                } else {
                                    str9 = str38;
                                    hashMap5 = hashMap8;
                                    tLRPC$WebPage4 = tLRPC$WebPage;
                                    str10 = str37;
                                    str11 = str29;
                                    tLRPC$InputPeer2 = tLRPC$InputPeer9;
                                    delayedMessage3 = null;
                                    z9 = false;
                                    i5 = i2;
                                    tLRPC$Message3 = tLRPC$Message21;
                                    c5 = c11;
                                    TLRPC$User tLRPC$User6 = tLRPC$TL_userRequest_old2;
                                    tLRPC$TL_photo2 = tLRPC$TL_photo6;
                                    tLRPC$User3 = tLRPC$User6;
                                    tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll3;
                                    j6 = clientUserId;
                                    String str48 = str31;
                                    tLRPC$TL_document2 = tLRPC$TL_document3;
                                    str5 = str48;
                                    sendMessagesHelper7 = sendMessagesHelper12;
                                    tLRPC$Message20 = str37;
                                }
                            } else {
                                tLRPC$InputPeer8 = tLRPC$InputPeer;
                                str30 = "";
                                obj2 = "parentObject";
                            }
                            sendMessagesHelper7 = this;
                            tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                            tLRPC$TL_photo2 = tLRPC$TL_photo;
                            z10 = z2;
                            str9 = str38;
                            hashMap5 = hashMap8;
                            tLRPC$WebPage4 = tLRPC$WebPage;
                            str10 = str39;
                            j6 = clientUserId;
                            str11 = str29;
                            tLRPC$InputPeer2 = tLRPC$InputPeer8;
                            str5 = str30;
                            delayedMessage3 = null;
                            z9 = false;
                            tLRPC$User3 = tLRPC$User;
                            tLRPC$TL_document2 = tLRPC$TL_document;
                            tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll;
                            i5 = i2;
                            tLRPC$Message3 = tLRPC$Message21;
                            c5 = 4;
                        }
                    } catch (Exception e2) {
                        i3 = i;
                        exc = e2;
                        SendMessagesHelper sendMessagesHelper13 = this;
                        TLRPC$Message tLRPC$Message22 = tLRPC$Message21;
                        tLRPC$Message2 = tLRPC$Message22;
                        sendMessagesHelper2 = sendMessagesHelper13;
                        messageObject4 = null;
                        i4 = i3;
                        sendMessagesHelper = sendMessagesHelper2;
                        tLRPC$Message = tLRPC$Message2;
                        FileLog.e(exc);
                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                        if (messageObject4 != null) {
                        }
                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                        return;
                    }
                }
                str29 = obj;
                if (messageObject3.isForwarded()) {
                }
                sendMessagesHelper7 = this;
                tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                tLRPC$TL_photo2 = tLRPC$TL_photo;
                z10 = z2;
                str9 = str38;
                hashMap5 = hashMap8;
                tLRPC$WebPage4 = tLRPC$WebPage;
                str10 = str39;
                j6 = clientUserId;
                str11 = str29;
                tLRPC$InputPeer2 = tLRPC$InputPeer8;
                str5 = str30;
                delayedMessage3 = null;
                z9 = false;
                tLRPC$User3 = tLRPC$User;
                tLRPC$TL_document2 = tLRPC$TL_document;
                tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll;
                i5 = i2;
                tLRPC$Message3 = tLRPC$Message21;
                c5 = 4;
            } else {
                TLRPC$InputPeer tLRPC$InputPeer10 = tLRPC$InputPeer;
                obj2 = "parentObject";
                TLRPC$Message canSendStickers = DialogObject.isChatDialog(j) ? ChatObject.canSendStickers(getMessagesController().getChat(Long.valueOf(-j15))) : 1;
                try {
                    if (str38 != null) {
                        if (tLRPC$EncryptedChat != null) {
                            tLRPC$TL_message2 = new TLRPC$TL_message_secret();
                        } else {
                            tLRPC$TL_message2 = new TLRPC$TL_message();
                        }
                        if (tLRPC$EncryptedChat == null || !(tLRPC$WebPage instanceof TLRPC$TL_webPagePending)) {
                            tLRPC$WebPage2 = tLRPC$WebPage;
                        } else if (tLRPC$WebPage.url != null) {
                            tLRPC$WebPage2 = new TLRPC$TL_webPageUrlPending();
                            tLRPC$WebPage2.url = tLRPC$WebPage.url;
                        } else {
                            tLRPC$WebPage2 = null;
                        }
                        if (canSendStickers == 0 || str.length() >= 30 || tLRPC$WebPage2 != null || !(arrayList == null || arrayList.isEmpty())) {
                            str5 = "";
                        } else {
                            str5 = "";
                            if (getMessagesController().diceEmojies.contains(str38.replace("️", str5)) && tLRPC$EncryptedChat == null && i == 0) {
                                TLRPC$TL_messageMediaDice tLRPC$TL_messageMediaDice = new TLRPC$TL_messageMediaDice();
                                tLRPC$TL_messageMediaDice.emoticon = str38;
                                tLRPC$TL_messageMediaDice.value = -1;
                                tLRPC$TL_message2.media = tLRPC$TL_messageMediaDice;
                                tLRPC$User2 = tLRPC$User;
                                canSendStickers = tLRPC$TL_message2;
                                str6 = str5;
                                delayedMessage = null;
                                z8 = false;
                                c6 = 11;
                                sendMessagesHelper5 = this;
                                c2 = c6;
                            }
                        }
                        if (tLRPC$WebPage2 == null) {
                            tLRPC$TL_message2.media = new TLRPC$TL_messageMediaEmpty();
                        } else {
                            TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = new TLRPC$TL_messageMediaWebPage();
                            tLRPC$TL_message2.media = tLRPC$TL_messageMediaWebPage;
                            tLRPC$TL_messageMediaWebPage.webpage = tLRPC$WebPage2;
                        }
                        char c14 = (hashMap8 == null || !hashMap8.containsKey("query_id")) ? (char) 0 : '\t';
                        tLRPC$TL_message2.message = str38;
                        tLRPC$User2 = tLRPC$User;
                        canSendStickers = tLRPC$TL_message2;
                        str6 = str39;
                        delayedMessage = null;
                        z8 = false;
                        c6 = c14;
                        sendMessagesHelper5 = this;
                        c2 = c6;
                    } else {
                        str5 = "";
                        try {
                            if (tLRPC$TL_messageMediaPoll != null) {
                                if (tLRPC$EncryptedChat != null) {
                                    canSendStickers = new TLRPC$TL_message_secret();
                                } else {
                                    canSendStickers = new TLRPC$TL_message();
                                }
                                canSendStickers.media = tLRPC$TL_messageMediaPoll;
                                tLRPC$WebPage2 = tLRPC$WebPage;
                                str6 = str39;
                                delayedMessage = null;
                                z8 = false;
                                c4 = '\n';
                            } else if (tLRPC$MessageMedia != null) {
                                if (tLRPC$EncryptedChat != null) {
                                    canSendStickers = new TLRPC$TL_message_secret();
                                } else {
                                    canSendStickers = new TLRPC$TL_message();
                                }
                                canSendStickers.media = tLRPC$MessageMedia;
                                if (hashMap8 == null || !hashMap8.containsKey("query_id")) {
                                    tLRPC$WebPage2 = tLRPC$WebPage;
                                    clientUserId = clientUserId;
                                    str6 = str39;
                                    delayedMessage = null;
                                    z8 = false;
                                    c4 = 1;
                                } else {
                                    tLRPC$WebPage2 = tLRPC$WebPage;
                                    clientUserId = clientUserId;
                                    str6 = str39;
                                    delayedMessage = null;
                                    z8 = false;
                                    c4 = '\t';
                                }
                            } else {
                                if (tLRPC$TL_photo != null) {
                                    if (tLRPC$EncryptedChat != null) {
                                        canSendStickers = new TLRPC$TL_message_secret();
                                    } else {
                                        canSendStickers = new TLRPC$TL_message();
                                    }
                                    TLRPC$TL_messageMediaPhoto tLRPC$TL_messageMediaPhoto = new TLRPC$TL_messageMediaPhoto();
                                    canSendStickers.media = tLRPC$TL_messageMediaPhoto;
                                    int i33 = tLRPC$TL_messageMediaPhoto.flags | 3;
                                    tLRPC$TL_messageMediaPhoto.flags = i33;
                                    tLRPC$TL_messageMediaPhoto.spoiler = r12;
                                    if (arrayList != null) {
                                        canSendStickers.entities = arrayList;
                                    }
                                    if (i2 != 0) {
                                        tLRPC$TL_messageMediaPhoto.ttl_seconds = i2;
                                        canSendStickers.ttl = i2;
                                        tLRPC$TL_messageMediaPhoto.flags = i33 | 4;
                                    }
                                    tLRPC$TL_messageMediaPhoto.photo = tLRPC$TL_photo;
                                    if (hashMap8 == null || !hashMap8.containsKey("query_id")) {
                                        str7 = str3;
                                        c3 = 2;
                                    } else {
                                        str7 = str3;
                                        c3 = '\t';
                                    }
                                    if (str7 != null && str3.length() > 0 && str7.startsWith("http")) {
                                        canSendStickers.attachPath = str7;
                                        sendMessagesHelper4 = this;
                                        clientUserId = clientUserId;
                                        c12 = c3;
                                    } else {
                                        TLRPC$FileLocation tLRPC$FileLocation = tLRPC$TL_photo.sizes.get(arrayList2.size() - 1).location;
                                        SendMessagesHelper sendMessagesHelper14 = this;
                                        clientUserId = clientUserId;
                                        canSendStickers.attachPath = FileLoader.getInstance(sendMessagesHelper14.currentAccount).getPathToAttach(tLRPC$FileLocation, true).toString();
                                        sendMessagesHelper4 = sendMessagesHelper14;
                                        c12 = c3;
                                    }
                                } else {
                                    clientUserId = clientUserId;
                                    r12 = this;
                                    try {
                                        if (tLRPC$TL_game != null) {
                                            canSendStickers = new TLRPC$TL_message();
                                            TLRPC$TL_messageMediaGame tLRPC$TL_messageMediaGame = new TLRPC$TL_messageMediaGame();
                                            canSendStickers.media = tLRPC$TL_messageMediaGame;
                                            tLRPC$TL_messageMediaGame.game = tLRPC$TL_game;
                                            sendMessagesHelper4 = r12;
                                            if (hashMap8 != null) {
                                                sendMessagesHelper4 = r12;
                                            }
                                        } else {
                                            i3 = i;
                                            if (tLRPC$TL_messageMediaInvoice != null) {
                                                try {
                                                    canSendStickers = new TLRPC$TL_message();
                                                } catch (Exception e3) {
                                                    e = e3;
                                                    exc = e;
                                                    SendMessagesHelper sendMessagesHelper15 = r12;
                                                    messageObject4 = null;
                                                    tLRPC$Message = null;
                                                    i4 = i3;
                                                    sendMessagesHelper = sendMessagesHelper15;
                                                    FileLog.e(exc);
                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                    if (messageObject4 != null) {
                                                    }
                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                    return;
                                                }
                                                try {
                                                    canSendStickers.media = tLRPC$TL_messageMediaInvoice;
                                                    sendMessagesHelper4 = r12;
                                                    if (hashMap8 != null) {
                                                        sendMessagesHelper4 = r12;
                                                    }
                                                } catch (Exception e4) {
                                                    e = e4;
                                                    exc = e;
                                                    tLRPC$Message3 = canSendStickers;
                                                    sendMessagesHelper6 = r12;
                                                    sendMessagesHelper2 = sendMessagesHelper6;
                                                    tLRPC$Message2 = tLRPC$Message3;
                                                    messageObject4 = null;
                                                    i4 = i3;
                                                    sendMessagesHelper = sendMessagesHelper2;
                                                    tLRPC$Message = tLRPC$Message2;
                                                    FileLog.e(exc);
                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                    if (messageObject4 != null) {
                                                    }
                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                    return;
                                                }
                                            } else {
                                                tLRPC$User2 = tLRPC$User;
                                                if (tLRPC$User2 != null) {
                                                    if (tLRPC$EncryptedChat != null) {
                                                        try {
                                                            canSendStickers = new TLRPC$TL_message_secret();
                                                        } catch (Exception e5) {
                                                            exc = e5;
                                                            sendMessagesHelper = r12;
                                                            messageObject4 = null;
                                                            tLRPC$Message = null;
                                                            i4 = i3;
                                                        }
                                                    } else {
                                                        canSendStickers = new TLRPC$TL_message();
                                                    }
                                                    TLRPC$TL_messageMediaContact tLRPC$TL_messageMediaContact = new TLRPC$TL_messageMediaContact();
                                                    canSendStickers.media = tLRPC$TL_messageMediaContact;
                                                    tLRPC$TL_messageMediaContact.phone_number = tLRPC$User2.phone;
                                                    tLRPC$TL_messageMediaContact.first_name = tLRPC$User2.first_name;
                                                    tLRPC$TL_messageMediaContact.last_name = tLRPC$User2.last_name;
                                                    tLRPC$TL_messageMediaContact.user_id = tLRPC$User2.id;
                                                    if (!tLRPC$User2.restriction_reason.isEmpty() && tLRPC$User2.restriction_reason.get(0).text.startsWith("BEGIN:VCARD")) {
                                                        canSendStickers.media.vcard = tLRPC$User2.restriction_reason.get(0).text;
                                                    } else {
                                                        canSendStickers.media.vcard = str5;
                                                    }
                                                    TLRPC$MessageMedia tLRPC$MessageMedia6 = canSendStickers.media;
                                                    if (tLRPC$MessageMedia6.first_name == null) {
                                                        tLRPC$MessageMedia6.first_name = str5;
                                                        tLRPC$User2.first_name = str5;
                                                    }
                                                    if (tLRPC$MessageMedia6.last_name == null) {
                                                        tLRPC$MessageMedia6.last_name = str5;
                                                        tLRPC$User2.last_name = str5;
                                                    }
                                                    if (hashMap8 == null || !hashMap8.containsKey("query_id")) {
                                                        j15 = j;
                                                        tLRPC$WebPage2 = tLRPC$WebPage;
                                                        str6 = str39;
                                                        delayedMessage = null;
                                                        z8 = false;
                                                        c2 = 6;
                                                        sendMessagesHelper5 = r12;
                                                    } else {
                                                        j15 = j;
                                                        tLRPC$WebPage2 = tLRPC$WebPage;
                                                        str6 = str39;
                                                        delayedMessage = null;
                                                        z8 = false;
                                                        c2 = '\t';
                                                        sendMessagesHelper5 = r12;
                                                    }
                                                } else {
                                                    TLRPC$TL_document tLRPC$TL_document7 = tLRPC$TL_document;
                                                    if (tLRPC$TL_document7 != null) {
                                                        if (tLRPC$EncryptedChat != null) {
                                                            tLRPC$TL_message = new TLRPC$TL_message_secret();
                                                        } else {
                                                            tLRPC$TL_message = new TLRPC$TL_message();
                                                        }
                                                        try {
                                                            if (DialogObject.isChatDialog(j) && canSendStickers == 0) {
                                                                int size = tLRPC$TL_document7.attributes.size();
                                                                for (int i34 = 0; i34 < size; i34++) {
                                                                    if (tLRPC$TL_document7.attributes.get(i34) instanceof TLRPC$TL_documentAttributeAnimated) {
                                                                        tLRPC$TL_document7.attributes.remove(i34);
                                                                        z6 = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            z6 = false;
                                                            TLRPC$TL_messageMediaDocument tLRPC$TL_messageMediaDocument = new TLRPC$TL_messageMediaDocument();
                                                            tLRPC$TL_message.media = tLRPC$TL_messageMediaDocument;
                                                            int i35 = tLRPC$TL_messageMediaDocument.flags | 3;
                                                            tLRPC$TL_messageMediaDocument.flags = i35;
                                                            tLRPC$TL_messageMediaDocument.spoiler = r12;
                                                            if (i2 != 0) {
                                                                tLRPC$TL_messageMediaDocument.ttl_seconds = i2;
                                                                tLRPC$TL_message.ttl = i2;
                                                                tLRPC$TL_messageMediaDocument.flags = i35 | 4;
                                                            }
                                                            tLRPC$TL_messageMediaDocument.document = tLRPC$TL_document7;
                                                            if (hashMap8 != null && hashMap8.containsKey("query_id")) {
                                                                c = '\t';
                                                            } else if (MessageObject.isVideoSticker(tLRPC$TL_document) || !(MessageObject.isVideoDocument(tLRPC$TL_document) || MessageObject.isRoundVideoDocument(tLRPC$TL_document) || videoEditedInfo != null)) {
                                                                c = MessageObject.isVoiceDocument(tLRPC$TL_document) ? '\b' : (char) 7;
                                                            } else {
                                                                c = 3;
                                                            }
                                                            if (videoEditedInfo != null) {
                                                                String string = videoEditedInfo.getString();
                                                                if (hashMap8 == null) {
                                                                    hashMap8 = new HashMap<>();
                                                                }
                                                                hashMap8.put("ve", string);
                                                            }
                                                            if (tLRPC$EncryptedChat != null && tLRPC$TL_document7.dc_id > 0 && !MessageObject.isStickerDocument(tLRPC$TL_document) && !MessageObject.isAnimatedStickerDocument(tLRPC$TL_document7, true)) {
                                                                tLRPC$TL_message.attachPath = FileLoader.getInstance(r12.currentAccount).getPathToAttach(tLRPC$TL_document7).toString();
                                                            } else {
                                                                tLRPC$TL_message.attachPath = str3;
                                                            }
                                                            if (tLRPC$EncryptedChat != null && (MessageObject.isStickerDocument(tLRPC$TL_document) || MessageObject.isAnimatedStickerDocument(tLRPC$TL_document7, true))) {
                                                                int i36 = 0;
                                                                while (i36 < tLRPC$TL_document7.attributes.size()) {
                                                                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute = tLRPC$TL_document7.attributes.get(i36);
                                                                    z7 = z6;
                                                                    if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeSticker) {
                                                                        tLRPC$TL_document7.attributes.remove(i36);
                                                                        TLRPC$TL_documentAttributeSticker_layer55 tLRPC$TL_documentAttributeSticker_layer55 = new TLRPC$TL_documentAttributeSticker_layer55();
                                                                        tLRPC$TL_document7.attributes.add(tLRPC$TL_documentAttributeSticker_layer55);
                                                                        tLRPC$TL_documentAttributeSticker_layer55.alt = tLRPC$DocumentAttribute.alt;
                                                                        TLRPC$InputStickerSet tLRPC$InputStickerSet = tLRPC$DocumentAttribute.stickerset;
                                                                        if (tLRPC$InputStickerSet != null) {
                                                                            if (tLRPC$InputStickerSet instanceof TLRPC$TL_inputStickerSetShortName) {
                                                                                stickerSetName = tLRPC$InputStickerSet.short_name;
                                                                                hashMap3 = hashMap8;
                                                                            } else {
                                                                                hashMap3 = hashMap8;
                                                                                stickerSetName = getMediaDataController().getStickerSetName(tLRPC$DocumentAttribute.stickerset.id);
                                                                            }
                                                                            if (!TextUtils.isEmpty(stickerSetName)) {
                                                                                TLRPC$TL_inputStickerSetShortName tLRPC$TL_inputStickerSetShortName = new TLRPC$TL_inputStickerSetShortName();
                                                                                tLRPC$TL_documentAttributeSticker_layer55.stickerset = tLRPC$TL_inputStickerSetShortName;
                                                                                tLRPC$TL_inputStickerSetShortName.short_name = stickerSetName;
                                                                                j4 = j;
                                                                                delayedMessage2 = null;
                                                                            } else {
                                                                                if (tLRPC$DocumentAttribute.stickerset instanceof TLRPC$TL_inputStickerSetID) {
                                                                                    j4 = j;
                                                                                    delayedMessage2 = new DelayedMessage(j4);
                                                                                    delayedMessage2.encryptedChat = tLRPC$EncryptedChat;
                                                                                    delayedMessage2.locationParent = tLRPC$TL_documentAttributeSticker_layer55;
                                                                                    delayedMessage2.type = 5;
                                                                                    delayedMessage2.parentObject = tLRPC$DocumentAttribute.stickerset;
                                                                                } else {
                                                                                    j4 = j;
                                                                                    delayedMessage2 = null;
                                                                                }
                                                                                tLRPC$TL_documentAttributeSticker_layer55.stickerset = new TLRPC$TL_inputStickerSetEmpty();
                                                                            }
                                                                            canSendStickers = tLRPC$TL_message;
                                                                            str6 = str39;
                                                                            z8 = z7;
                                                                            j15 = j4;
                                                                            hashMap8 = hashMap3;
                                                                            delayedMessage = delayedMessage2;
                                                                            tLRPC$WebPage2 = tLRPC$WebPage;
                                                                            sendMessagesHelper5 = r12;
                                                                            c2 = c;
                                                                        } else {
                                                                            hashMap2 = hashMap8;
                                                                            j3 = j;
                                                                            tLRPC$TL_documentAttributeSticker_layer55.stickerset = new TLRPC$TL_inputStickerSetEmpty();
                                                                            tLRPC$WebPage2 = tLRPC$WebPage;
                                                                            canSendStickers = tLRPC$TL_message;
                                                                            str6 = str39;
                                                                            z8 = z7;
                                                                            j15 = j3;
                                                                            delayedMessage = null;
                                                                            hashMap8 = hashMap2;
                                                                            sendMessagesHelper5 = r12;
                                                                            c2 = c;
                                                                        }
                                                                    } else {
                                                                        i36++;
                                                                        tLRPC$TL_document7 = tLRPC$TL_document;
                                                                        z6 = z7;
                                                                        hashMap8 = hashMap8;
                                                                    }
                                                                }
                                                            }
                                                            z7 = z6;
                                                            hashMap2 = hashMap8;
                                                            j3 = j;
                                                            tLRPC$WebPage2 = tLRPC$WebPage;
                                                            canSendStickers = tLRPC$TL_message;
                                                            str6 = str39;
                                                            z8 = z7;
                                                            j15 = j3;
                                                            delayedMessage = null;
                                                            hashMap8 = hashMap2;
                                                            sendMessagesHelper5 = r12;
                                                            c2 = c;
                                                        } catch (Exception e6) {
                                                            i3 = i;
                                                            exc = e6;
                                                            tLRPC$Message3 = tLRPC$TL_message;
                                                            sendMessagesHelper6 = r12;
                                                            sendMessagesHelper2 = sendMessagesHelper6;
                                                            tLRPC$Message2 = tLRPC$Message3;
                                                            messageObject4 = null;
                                                            i4 = i3;
                                                            sendMessagesHelper = sendMessagesHelper2;
                                                            tLRPC$Message = tLRPC$Message2;
                                                            FileLog.e(exc);
                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                            if (messageObject4 != null) {
                                                            }
                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                            return;
                                                        }
                                                    } else {
                                                        j15 = j;
                                                        tLRPC$WebPage2 = tLRPC$WebPage;
                                                        str6 = str39;
                                                        canSendStickers = null;
                                                        sendMessagesHelper3 = r12;
                                                        delayedMessage = null;
                                                        z8 = false;
                                                        sendMessagesHelper5 = sendMessagesHelper3;
                                                        c2 = c13;
                                                    }
                                                }
                                            }
                                        }
                                    } catch (Exception e7) {
                                        e = e7;
                                        i3 = i;
                                    }
                                }
                                tLRPC$User2 = tLRPC$User;
                                tLRPC$WebPage2 = tLRPC$WebPage;
                                str6 = str39;
                                sendMessagesHelper3 = sendMessagesHelper4;
                                c13 = c12;
                                delayedMessage = null;
                                z8 = false;
                                sendMessagesHelper5 = sendMessagesHelper3;
                                c2 = c13;
                            }
                            sendMessagesHelper5 = this;
                            tLRPC$User2 = tLRPC$User;
                            c2 = c4;
                        } catch (Exception e8) {
                            sendMessagesHelper2 = this;
                            i3 = i;
                            exc = e8;
                            tLRPC$Message2 = canSendStickers;
                            messageObject4 = null;
                            i4 = i3;
                            sendMessagesHelper = sendMessagesHelper2;
                            tLRPC$Message = tLRPC$Message2;
                            FileLog.e(exc);
                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                            if (messageObject4 != null) {
                            }
                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                            return;
                        }
                    }
                    if (arrayList == null || arrayList.isEmpty()) {
                        tLRPC$WebPage3 = tLRPC$WebPage2;
                    } else {
                        canSendStickers.entities = arrayList;
                        tLRPC$WebPage3 = tLRPC$WebPage2;
                        canSendStickers.flags |= 128;
                    }
                    if (str6 != null) {
                        canSendStickers.message = str6;
                    } else {
                        try {
                            if (canSendStickers.message == null) {
                                canSendStickers.message = str5;
                            }
                        } catch (Exception e9) {
                            e = e9;
                            i3 = i;
                            tLRPC$Message4 = canSendStickers;
                            sendMessagesHelper2 = sendMessagesHelper5;
                            exc = e;
                            tLRPC$Message2 = tLRPC$Message4;
                            messageObject4 = null;
                            i4 = i3;
                            sendMessagesHelper = sendMessagesHelper2;
                            tLRPC$Message = tLRPC$Message2;
                            FileLog.e(exc);
                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                            if (messageObject4 != null) {
                            }
                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                            return;
                        }
                    }
                    if (canSendStickers.attachPath == null) {
                        canSendStickers.attachPath = str5;
                    }
                    int newMessageId = getUserConfig().getNewMessageId();
                    canSendStickers.id = newMessageId;
                    canSendStickers.local_id = newMessageId;
                    canSendStickers.out = true;
                } catch (Exception e10) {
                    e = e10;
                    i3 = i;
                }
                try {
                    if (!z5 || tLRPC$InputPeer10 == null) {
                        hashMap4 = hashMap8;
                        str8 = str6;
                        tLRPC$InputPeer2 = tLRPC$InputPeer10;
                        if (tLRPC$Peer != null) {
                            canSendStickers.from_id = tLRPC$Peer;
                        } else {
                            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                            canSendStickers.from_id = tLRPC$TL_peerUser;
                            j5 = clientUserId;
                            tLRPC$TL_peerUser.user_id = j5;
                            canSendStickers.flags |= LiteMode.FLAG_CHAT_BLUR;
                            tLRPC$Message4 = canSendStickers;
                            getUserConfig().saveConfig(false);
                            str9 = str;
                            tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                            tLRPC$TL_document2 = tLRPC$TL_document;
                            tLRPC$WebPage4 = tLRPC$WebPage3;
                            str10 = str8;
                            i5 = i2;
                            str11 = obj;
                            delayedMessage3 = delayedMessage;
                            tLRPC$User3 = tLRPC$User2;
                            z9 = z8;
                            c5 = c2;
                            tLRPC$Message3 = tLRPC$Message4;
                            tLRPC$TL_photo2 = tLRPC$TL_photo;
                            tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll;
                            j6 = j5;
                            hashMap5 = hashMap4;
                            z10 = z2;
                            sendMessagesHelper7 = sendMessagesHelper5;
                            tLRPC$Message20 = c2;
                        }
                    } else {
                        TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                        canSendStickers.from_id = tLRPC$TL_peerChannel;
                        hashMap4 = hashMap8;
                        str8 = str6;
                        tLRPC$InputPeer2 = tLRPC$InputPeer10;
                        tLRPC$TL_peerChannel.channel_id = tLRPC$InputPeer2.channel_id;
                    }
                    getUserConfig().saveConfig(false);
                    str9 = str;
                    tLRPC$MessageMedia2 = tLRPC$MessageMedia;
                    tLRPC$TL_document2 = tLRPC$TL_document;
                    tLRPC$WebPage4 = tLRPC$WebPage3;
                    str10 = str8;
                    i5 = i2;
                    str11 = obj;
                    delayedMessage3 = delayedMessage;
                    tLRPC$User3 = tLRPC$User2;
                    z9 = z8;
                    c5 = c2;
                    tLRPC$Message3 = tLRPC$Message4;
                    tLRPC$TL_photo2 = tLRPC$TL_photo;
                    tLRPC$TL_messageMediaPoll2 = tLRPC$TL_messageMediaPoll;
                    j6 = j5;
                    hashMap5 = hashMap4;
                    z10 = z2;
                    sendMessagesHelper7 = sendMessagesHelper5;
                    tLRPC$Message20 = c2;
                } catch (Exception e11) {
                    e = e11;
                    i3 = i;
                    sendMessagesHelper2 = sendMessagesHelper5;
                    exc = e;
                    tLRPC$Message2 = tLRPC$Message4;
                    messageObject4 = null;
                    i4 = i3;
                    sendMessagesHelper = sendMessagesHelper2;
                    tLRPC$Message = tLRPC$Message2;
                    FileLog.e(exc);
                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                    if (messageObject4 != null) {
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                    return;
                }
                j5 = clientUserId;
                tLRPC$Message4 = canSendStickers;
            }
            if (z10) {
                tLRPC$MessageMedia3 = tLRPC$MessageMedia2;
                tLRPC$TL_photo3 = tLRPC$TL_photo2;
                obj3 = "query_id";
            } else {
                tLRPC$TL_photo3 = tLRPC$TL_photo2;
                try {
                    notificationsSettings = MessagesController.getNotificationsSettings(sendMessagesHelper7.currentAccount);
                    tLRPC$MessageMedia3 = tLRPC$MessageMedia2;
                    sb = new StringBuilder();
                    obj3 = "query_id";
                    sb.append(NotificationsSettingsFacade.PROPERTY_SILENT);
                    sb.append(j15);
                } catch (Exception e12) {
                    e = e12;
                    i3 = i;
                    exc = e;
                    sendMessagesHelper6 = sendMessagesHelper7;
                    sendMessagesHelper2 = sendMessagesHelper6;
                    tLRPC$Message2 = tLRPC$Message3;
                    messageObject4 = null;
                    i4 = i3;
                    sendMessagesHelper = sendMessagesHelper2;
                    tLRPC$Message = tLRPC$Message2;
                    FileLog.e(exc);
                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                    if (messageObject4 != null) {
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                    return;
                }
                if (!notificationsSettings.getBoolean(sb.toString(), false)) {
                    z11 = false;
                    tLRPC$Message3.silent = z11;
                    c7 = c5;
                    if (tLRPC$Message3.random_id == 0) {
                        tLRPC$Message3.random_id = getNextRandomId();
                    }
                    if (hashMap5 == null && hashMap5.containsKey("bot")) {
                        if (tLRPC$EncryptedChat != null) {
                            String str49 = hashMap5.get("bot_name");
                            tLRPC$Message3.via_bot_name = str49;
                            if (str49 == null) {
                                tLRPC$Message3.via_bot_name = str5;
                            }
                            str12 = str5;
                        } else {
                            str12 = str5;
                            tLRPC$Message3.via_bot_id = Utilities.parseLong(hashMap5.get("bot")).longValue();
                        }
                        tLRPC$Message3.flags |= LiteMode.FLAG_AUTOPLAY_GIFS;
                    } else {
                        str12 = str5;
                    }
                    tLRPC$Message3.params = hashMap5;
                    String str50 = str12;
                    long j17 = j6;
                    if (messageObject3 != null) {
                        obj4 = "bot_name";
                        if (messageObject3.resendAsIs) {
                            i3 = i;
                            str13 = str9;
                            i6 = i5;
                            tLRPC$Message3.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                            tLRPC$Message3.dialog_id = j15;
                            ?? r7 = messageObject2;
                            if (messageObject != null) {
                                if (r7 != 0 && messageObject == r7) {
                                }
                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = new TLRPC$TL_messageReplyHeader();
                                tLRPC$Message3.reply_to = tLRPC$TL_messageReplyHeader;
                                if (tLRPC$EncryptedChat != null) {
                                    tLRPC$InputPeer3 = tLRPC$InputPeer2;
                                    long j18 = messageObject.messageOwner.random_id;
                                    if (j18 != 0) {
                                        tLRPC$TL_messageReplyHeader.reply_to_random_id = j18;
                                        tLRPC$Message3.flags |= 8;
                                        tLRPC$TL_messageReplyHeader.reply_to_msg_id = messageObject.getId();
                                        if (r7 == 0 && r7 != messageObject && messageObject2.getId() != 1) {
                                            tLRPC$Message3.reply_to.reply_to_top_id = messageObject2.getId();
                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = tLRPC$Message3.reply_to;
                                            int i37 = tLRPC$TL_messageReplyHeader2.flags | 2;
                                            tLRPC$TL_messageReplyHeader2.flags = i37;
                                            if (r7.isTopicMainMessage) {
                                                tLRPC$TL_messageReplyHeader2.forum_topic = true;
                                                tLRPC$TL_messageReplyHeader2.flags = i37 | 8;
                                            }
                                        } else if (messageObject.isTopicMainMessage) {
                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader3 = tLRPC$Message3.reply_to;
                                            tLRPC$TL_messageReplyHeader3.forum_topic = true;
                                            tLRPC$TL_messageReplyHeader3.flags |= 8;
                                        }
                                        if (j2 != 0) {
                                            TLRPC$TL_messageReplies tLRPC$TL_messageReplies = new TLRPC$TL_messageReplies();
                                            tLRPC$Message3.replies = tLRPC$TL_messageReplies;
                                            tLRPC$TL_messageReplies.comments = true;
                                            tLRPC$TL_messageReplies.channel_id = j2;
                                            tLRPC$TL_messageReplies.flags |= 1;
                                            tLRPC$Message3.flags |= 8388608;
                                        }
                                        if (tLRPC$ReplyMarkup != null && tLRPC$EncryptedChat == null) {
                                            tLRPC$Message3.flags |= 64;
                                            tLRPC$Message3.reply_markup = tLRPC$ReplyMarkup;
                                            str28 = hashMap5.get("bot");
                                            if (str28 != null) {
                                                tLRPC$Message3.via_bot_id = Long.parseLong(str28);
                                            }
                                        }
                                        if (DialogObject.isEncryptedDialog(j)) {
                                            tLRPC$Message3.peer_id = getMessagesController().getPeer(j15);
                                            if (DialogObject.isUserDialog(j)) {
                                                TLRPC$User user = getMessagesController().getUser(Long.valueOf(j));
                                                if (user == null) {
                                                    sendMessagesHelper7.processSentMessage(tLRPC$Message3.id);
                                                    return;
                                                } else if (user.bot) {
                                                    tLRPC$Message3.unread = false;
                                                }
                                            }
                                            i7 = i6;
                                        } else {
                                            TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                            tLRPC$Message3.peer_id = tLRPC$TL_peerUser2;
                                            long j19 = tLRPC$EncryptedChat.participant_id;
                                            if (j19 == j17) {
                                                tLRPC$TL_peerUser2.user_id = tLRPC$EncryptedChat.admin_id;
                                            } else {
                                                tLRPC$TL_peerUser2.user_id = j19;
                                            }
                                            if (i6 != 0) {
                                                i7 = i6;
                                                tLRPC$Message3.ttl = i7;
                                            } else {
                                                i7 = i6;
                                                int i38 = tLRPC$EncryptedChat.ttl;
                                                tLRPC$Message3.ttl = i38;
                                                if (i38 != 0 && (tLRPC$MessageMedia4 = tLRPC$Message3.media) != null) {
                                                    tLRPC$MessageMedia4.ttl_seconds = i38;
                                                    tLRPC$MessageMedia4.flags |= 4;
                                                }
                                            }
                                            if (tLRPC$Message3.ttl != 0 && tLRPC$Message3.media.document != null) {
                                                if (MessageObject.isVoiceMessage(tLRPC$Message3)) {
                                                    int i39 = 0;
                                                    while (true) {
                                                        if (i39 >= tLRPC$Message3.media.document.attributes.size()) {
                                                            i9 = 0;
                                                            break;
                                                        }
                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = tLRPC$Message3.media.document.attributes.get(i39);
                                                        if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                                                            i9 = tLRPC$DocumentAttribute2.duration;
                                                            break;
                                                        }
                                                        i39++;
                                                    }
                                                    tLRPC$Message3.ttl = Math.max(tLRPC$Message3.ttl, i9 + 1);
                                                } else if (MessageObject.isVideoMessage(tLRPC$Message3) || MessageObject.isRoundVideoMessage(tLRPC$Message3)) {
                                                    int i40 = 0;
                                                    while (true) {
                                                        if (i40 >= tLRPC$Message3.media.document.attributes.size()) {
                                                            i8 = 0;
                                                            break;
                                                        }
                                                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute3 = tLRPC$Message3.media.document.attributes.get(i40);
                                                        if (tLRPC$DocumentAttribute3 instanceof TLRPC$TL_documentAttributeVideo) {
                                                            i8 = tLRPC$DocumentAttribute3.duration;
                                                            break;
                                                        }
                                                        i40++;
                                                    }
                                                    tLRPC$Message3.ttl = Math.max(tLRPC$Message3.ttl, i8 + 1);
                                                }
                                            }
                                        }
                                        if (!MessageObject.isVoiceMessage(tLRPC$Message3) || MessageObject.isRoundVideoMessage(tLRPC$Message3)) {
                                            tLRPC$Message3.media_unread = true;
                                        }
                                        if (tLRPC$Message3.from_id == null) {
                                            tLRPC$Message3.from_id = tLRPC$Message3.peer_id;
                                        }
                                        tLRPC$Message3.send_state = 1;
                                        if (hashMap5 == null) {
                                            String str51 = hashMap5.get("groupId");
                                            if (str51 != null) {
                                                long longValue = Utilities.parseLong(str51).longValue();
                                                tLRPC$Message3.grouped_id = longValue;
                                                tLRPC$Message3.flags |= 131072;
                                                j14 = longValue;
                                            } else {
                                                j14 = 0;
                                            }
                                            j7 = j14;
                                            if (hashMap5.get("final") != null) {
                                                z12 = true;
                                                j8 = j14;
                                                messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r7 == 0 && r7 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
                                                messageObject4.sendAnimationData = sendAnimationData;
                                                messageObject4.wasJustSent = true;
                                                messageObject4.scheduled = i != 0;
                                                if (messageObject4.isForwarded()) {
                                                    i10 = i7;
                                                } else {
                                                    try {
                                                        int i41 = messageObject4.type;
                                                        i10 = i7;
                                                        if ((i41 == 3 || videoEditedInfo != null || i41 == 2) && !TextUtils.isEmpty(tLRPC$Message3.attachPath)) {
                                                            messageObject4.attachPathExists = true;
                                                        }
                                                    } catch (Exception e13) {
                                                        e = e13;
                                                        exc = e;
                                                        i11 = i;
                                                        sendMessagesHelper = sendMessagesHelper7;
                                                        i4 = i11;
                                                        tLRPC$Message = tLRPC$Message3;
                                                        FileLog.e(exc);
                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                        if (messageObject4 != null) {
                                                        }
                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                        return;
                                                    }
                                                }
                                                videoEditedInfo2 = messageObject4.videoEditedInfo;
                                                if (videoEditedInfo2 != null || videoEditedInfo != null) {
                                                    videoEditedInfo2 = videoEditedInfo;
                                                }
                                                if (j8 == 0) {
                                                    ArrayList<MessageObject> arrayList4 = new ArrayList<>();
                                                    arrayList4.add(messageObject4);
                                                    ArrayList<TLRPC$Message> arrayList5 = new ArrayList<>();
                                                    arrayList5.add(tLRPC$Message3);
                                                    videoEditedInfo3 = videoEditedInfo2;
                                                    MessagesStorage.getInstance(sendMessagesHelper7.currentAccount).putMessages(arrayList5, false, true, false, 0, i != 0, 0);
                                                    MessagesController.getInstance(sendMessagesHelper7.currentAccount).updateInterfaceWithMessages(j15, arrayList4, i != 0);
                                                    if (i == 0) {
                                                        obj5 = "bot";
                                                        NotificationCenter.getInstance(sendMessagesHelper7.currentAccount).postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                                                    } else {
                                                        obj5 = "bot";
                                                    }
                                                    delayedMessage4 = delayedMessage3;
                                                    tLRPC$Message5 = null;
                                                } else {
                                                    videoEditedInfo3 = videoEditedInfo2;
                                                    obj5 = "bot";
                                                    ArrayList<DelayedMessage> arrayList6 = sendMessagesHelper7.delayedMessages.get("group_" + j8);
                                                    if (arrayList6 != null) {
                                                        delayedMessage3 = arrayList6.get(0);
                                                    }
                                                    if (delayedMessage3 == null) {
                                                        delayedMessage4 = new DelayedMessage(j15);
                                                        delayedMessage4.initForGroup(j8);
                                                        delayedMessage4.encryptedChat = tLRPC$EncryptedChat;
                                                        delayedMessage4.scheduled = i != 0;
                                                    } else {
                                                        delayedMessage4 = delayedMessage3;
                                                    }
                                                    delayedMessage4.performMediaUpload = false;
                                                    tLRPC$Message5 = null;
                                                    tLRPC$Message5 = null;
                                                    delayedMessage4.photoSize = null;
                                                    delayedMessage4.videoEditedInfo = null;
                                                    delayedMessage4.httpLocation = null;
                                                    if (z12) {
                                                        delayedMessage4.finalGroupMessage = tLRPC$Message3.id;
                                                    }
                                                }
                                                if (BuildVars.LOGS_ENABLED || tLRPC$InputPeer3 == null) {
                                                    j9 = j8;
                                                    tLRPC$InputPeer4 = tLRPC$InputPeer3;
                                                    tLRPC$Message6 = tLRPC$Message5;
                                                    str14 = j8;
                                                } else {
                                                    StringBuilder sb2 = new StringBuilder();
                                                    sb2.append("send message user_id = ");
                                                    j9 = j8;
                                                    tLRPC$InputPeer4 = tLRPC$InputPeer3;
                                                    sb2.append(tLRPC$InputPeer4.user_id);
                                                    sb2.append(" chat_id = ");
                                                    sb2.append(tLRPC$InputPeer4.chat_id);
                                                    sb2.append(" channel_id = ");
                                                    sb2.append(tLRPC$InputPeer4.channel_id);
                                                    sb2.append(" access_hash = ");
                                                    sb2.append(tLRPC$InputPeer4.access_hash);
                                                    sb2.append(" notify = ");
                                                    sb2.append(z2);
                                                    sb2.append(" silent = ");
                                                    String str52 = NotificationsSettingsFacade.PROPERTY_SILENT + j15;
                                                    sb2.append(MessagesController.getNotificationsSettings(sendMessagesHelper7.currentAccount).getBoolean(str52, false));
                                                    String sb3 = sb2.toString();
                                                    FileLog.d(sb3);
                                                    tLRPC$Message6 = sb3;
                                                    str14 = str52;
                                                }
                                                if (c7 != 0 && (c7 != '\t' || str13 == null || tLRPC$EncryptedChat == null)) {
                                                    if (c7 >= 1) {
                                                        if (c7 <= 3) {
                                                        }
                                                        if (tLRPC$EncryptedChat == null) {
                                                            TLRPC$TL_photo tLRPC$TL_photo8 = tLRPC$TL_photo3;
                                                            String str53 = str11;
                                                            DelayedMessage delayedMessage10 = delayedMessage4;
                                                            r7 = sendMessagesHelper7;
                                                            HashMap<String, String> hashMap9 = hashMap5;
                                                            tLRPC$Message6 = tLRPC$Message3;
                                                            String str54 = str4;
                                                            TLRPC$User tLRPC$User7 = tLRPC$User3;
                                                            TLRPC$TL_document tLRPC$TL_document8 = tLRPC$TL_document2;
                                                            int i42 = tLRPC$MessageMedia3;
                                                            String str55 = str10;
                                                            long j20 = j9;
                                                            try {
                                                                if (AndroidUtilities.getPeerLayerVersion(tLRPC$EncryptedChat.layer) >= 73) {
                                                                    try {
                                                                        tLRPC$TL_decryptedMessage = new TLRPC$TL_decryptedMessage();
                                                                        tLRPC$Message8 = tLRPC$TL_messageMediaPoll2;
                                                                        if (j20 != 0) {
                                                                            tLRPC$TL_decryptedMessage.grouped_id = j20;
                                                                            tLRPC$Message8 = 131072;
                                                                            tLRPC$TL_decryptedMessage.flags |= 131072;
                                                                        }
                                                                    } catch (Exception e14) {
                                                                        e = e14;
                                                                        str14 = i;
                                                                        exc = e;
                                                                        tLRPC$Message = tLRPC$Message6;
                                                                        i4 = str14;
                                                                        sendMessagesHelper = r7;
                                                                        FileLog.e(exc);
                                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                        if (messageObject4 != null) {
                                                                        }
                                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                        return;
                                                                    }
                                                                } else {
                                                                    tLRPC$TL_decryptedMessage = new TLRPC$TL_decryptedMessage_layer45();
                                                                    tLRPC$Message8 = tLRPC$TL_messageMediaPoll2;
                                                                }
                                                                tLRPC$TL_decryptedMessage.ttl = tLRPC$Message6.ttl;
                                                                if (arrayList != null && !arrayList.isEmpty()) {
                                                                    tLRPC$TL_decryptedMessage.entities = arrayList;
                                                                    tLRPC$TL_decryptedMessage.flags |= 128;
                                                                }
                                                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader4 = tLRPC$Message6.reply_to;
                                                                if (tLRPC$TL_messageReplyHeader4 != null) {
                                                                    long j21 = tLRPC$TL_messageReplyHeader4.reply_to_random_id;
                                                                    if (j21 != 0) {
                                                                        tLRPC$TL_decryptedMessage.reply_to_random_id = j21;
                                                                        tLRPC$TL_decryptedMessage.flags |= 8;
                                                                    }
                                                                }
                                                                tLRPC$TL_decryptedMessage.silent = tLRPC$Message6.silent;
                                                                tLRPC$TL_decryptedMessage.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                if (hashMap9 != null) {
                                                                    Object obj8 = obj4;
                                                                    hashMap6 = hashMap9;
                                                                    if (hashMap6.get(obj8) != null) {
                                                                        tLRPC$TL_decryptedMessage.via_bot_name = hashMap6.get(obj8);
                                                                        tLRPC$TL_decryptedMessage.flags |= LiteMode.FLAG_AUTOPLAY_GIFS;
                                                                    }
                                                                } else {
                                                                    hashMap6 = hashMap9;
                                                                }
                                                                tLRPC$TL_decryptedMessage.random_id = tLRPC$Message6.random_id;
                                                                tLRPC$TL_decryptedMessage.message = str50;
                                                                try {
                                                                    if (c7 == 1) {
                                                                        if (i42 instanceof TLRPC$TL_messageMediaVenue) {
                                                                            TLRPC$TL_decryptedMessageMediaVenue tLRPC$TL_decryptedMessageMediaVenue = new TLRPC$TL_decryptedMessageMediaVenue();
                                                                            tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaVenue;
                                                                            tLRPC$TL_decryptedMessageMediaVenue.address = i42.address;
                                                                            tLRPC$TL_decryptedMessageMediaVenue.title = i42.title;
                                                                            tLRPC$TL_decryptedMessageMediaVenue.provider = i42.provider;
                                                                            tLRPC$TL_decryptedMessageMediaVenue.venue_id = i42.venue_id;
                                                                        } else {
                                                                            tLRPC$TL_decryptedMessage.media = new TLRPC$TL_decryptedMessageMediaGeoPoint();
                                                                        }
                                                                        TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia = tLRPC$TL_decryptedMessage.media;
                                                                        TLRPC$GeoPoint tLRPC$GeoPoint = i42.geo;
                                                                        tLRPC$DecryptedMessageMedia.lat = tLRPC$GeoPoint.lat;
                                                                        tLRPC$DecryptedMessageMedia._long = tLRPC$GeoPoint._long;
                                                                        getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, null, null, messageObject4);
                                                                        j10 = j;
                                                                        tLRPC$Message13 = tLRPC$Message6;
                                                                        str15 = str54;
                                                                        delayedMessage5 = delayedMessage10;
                                                                        j11 = j20;
                                                                    } else {
                                                                        try {
                                                                        } catch (Exception e15) {
                                                                            e = e15;
                                                                            i42 = i;
                                                                            exc = e;
                                                                            i14 = i42;
                                                                            tLRPC$Message9 = tLRPC$Message8;
                                                                            tLRPC$Message = tLRPC$Message9;
                                                                            i4 = i14;
                                                                            sendMessagesHelper = r7;
                                                                            FileLog.e(exc);
                                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                            if (messageObject4 != null) {
                                                                            }
                                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                            return;
                                                                        }
                                                                        try {
                                                                            if (c7 == 2) {
                                                                                j10 = j;
                                                                            } else if (c7 != '\t' || tLRPC$TL_photo8 == null) {
                                                                                if (c7 == 3) {
                                                                                    TLRPC$PhotoSize thumbForSecretChat = r7.getThumbForSecretChat(tLRPC$TL_document8.thumbs);
                                                                                    ImageLoader.fillPhotoSizeWithBytes(thumbForSecretChat);
                                                                                    if (!MessageObject.isNewGifDocument(tLRPC$TL_document8) && !MessageObject.isRoundVideoDocument(tLRPC$TL_document8)) {
                                                                                        TLRPC$TL_decryptedMessageMediaVideo tLRPC$TL_decryptedMessageMediaVideo = new TLRPC$TL_decryptedMessageMediaVideo();
                                                                                        tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaVideo;
                                                                                        if (thumbForSecretChat != null && (bArr2 = thumbForSecretChat.bytes) != null) {
                                                                                            tLRPC$TL_decryptedMessageMediaVideo.thumb = bArr2;
                                                                                        } else {
                                                                                            tLRPC$TL_decryptedMessageMediaVideo.thumb = new byte[0];
                                                                                        }
                                                                                        TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia2 = tLRPC$TL_decryptedMessage.media;
                                                                                        tLRPC$DecryptedMessageMedia2.caption = str55;
                                                                                        tLRPC$DecryptedMessageMedia2.mime_type = "video/mp4";
                                                                                        tLRPC$DecryptedMessageMedia2.size = tLRPC$TL_document8.size;
                                                                                        i17 = 0;
                                                                                        while (true) {
                                                                                            if (i17 < tLRPC$TL_document8.attributes.size()) {
                                                                                                break;
                                                                                            }
                                                                                            TLRPC$DocumentAttribute tLRPC$DocumentAttribute4 = tLRPC$TL_document8.attributes.get(i17);
                                                                                            if (tLRPC$DocumentAttribute4 instanceof TLRPC$TL_documentAttributeVideo) {
                                                                                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia3 = tLRPC$TL_decryptedMessage.media;
                                                                                                tLRPC$DecryptedMessageMedia3.w = tLRPC$DocumentAttribute4.w;
                                                                                                tLRPC$DecryptedMessageMedia3.h = tLRPC$DocumentAttribute4.h;
                                                                                                tLRPC$DecryptedMessageMedia3.duration = tLRPC$DocumentAttribute4.duration;
                                                                                                break;
                                                                                            }
                                                                                            i17++;
                                                                                        }
                                                                                        TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia4 = tLRPC$TL_decryptedMessage.media;
                                                                                        tLRPC$DecryptedMessageMedia4.thumb_h = thumbForSecretChat.h;
                                                                                        tLRPC$DecryptedMessageMedia4.thumb_w = thumbForSecretChat.w;
                                                                                        if (tLRPC$TL_document8.key == null) {
                                                                                            j12 = j20;
                                                                                            if (j12 == 0) {
                                                                                                TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile = new TLRPC$InputEncryptedFile() { // from class: org.telegram.tgnet.TLRPC$TL_inputEncryptedFile
                                                                                                    public static int constructor = 1511503333;

                                                                                                    @Override // org.telegram.tgnet.TLObject
                                                                                                    public void readParams(AbstractSerializedData abstractSerializedData, boolean z17) {
                                                                                                        this.id = abstractSerializedData.readInt64(z17);
                                                                                                        this.access_hash = abstractSerializedData.readInt64(z17);
                                                                                                    }

                                                                                                    @Override // org.telegram.tgnet.TLObject
                                                                                                    public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                                                                                                        abstractSerializedData.writeInt32(constructor);
                                                                                                        abstractSerializedData.writeInt64(this.id);
                                                                                                        abstractSerializedData.writeInt64(this.access_hash);
                                                                                                    }
                                                                                                };
                                                                                                tLRPC$InputEncryptedFile.id = tLRPC$TL_document8.id;
                                                                                                tLRPC$InputEncryptedFile.access_hash = tLRPC$TL_document8.access_hash;
                                                                                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia5 = tLRPC$TL_decryptedMessage.media;
                                                                                                tLRPC$DecryptedMessageMedia5.key = tLRPC$TL_document8.key;
                                                                                                tLRPC$DecryptedMessageMedia5.iv = tLRPC$TL_document8.iv;
                                                                                                getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, tLRPC$InputEncryptedFile, null, messageObject4);
                                                                                                delayedMessage7 = delayedMessage10;
                                                                                                j10 = j;
                                                                                                str15 = str54;
                                                                                                j11 = j12;
                                                                                                i18 = i;
                                                                                                c8 = c7;
                                                                                                tLRPC$Message8 = tLRPC$Message6;
                                                                                                delayedMessage6 = delayedMessage7;
                                                                                                i42 = i18;
                                                                                            }
                                                                                        } else {
                                                                                            j12 = j20;
                                                                                        }
                                                                                        if (delayedMessage10 != null) {
                                                                                            j10 = j;
                                                                                            delayedMessage7 = new DelayedMessage(j10);
                                                                                            delayedMessage7.encryptedChat = tLRPC$EncryptedChat;
                                                                                            delayedMessage7.type = 1;
                                                                                            delayedMessage7.sendEncryptedRequest = tLRPC$TL_decryptedMessage;
                                                                                            str15 = str54;
                                                                                            delayedMessage7.originalPath = str15;
                                                                                            delayedMessage7.obj = messageObject4;
                                                                                            if (hashMap6 != null) {
                                                                                                Object obj9 = obj2;
                                                                                                if (hashMap6.containsKey(obj9)) {
                                                                                                    delayedMessage7.parentObject = hashMap6.get(obj9);
                                                                                                    delayedMessage7.performMediaUpload = true;
                                                                                                    j11 = j12;
                                                                                                    i19 = i;
                                                                                                    delayedMessage7.scheduled = i19 == 0;
                                                                                                    videoEditedInfo4 = videoEditedInfo3;
                                                                                                }
                                                                                            }
                                                                                            delayedMessage7.parentObject = str53;
                                                                                            delayedMessage7.performMediaUpload = true;
                                                                                            j11 = j12;
                                                                                            i19 = i;
                                                                                            delayedMessage7.scheduled = i19 == 0;
                                                                                            videoEditedInfo4 = videoEditedInfo3;
                                                                                        } else {
                                                                                            j10 = j;
                                                                                            str15 = str54;
                                                                                            j11 = j12;
                                                                                            i19 = i;
                                                                                            videoEditedInfo4 = videoEditedInfo3;
                                                                                            delayedMessage7 = delayedMessage10;
                                                                                        }
                                                                                        delayedMessage7.videoEditedInfo = videoEditedInfo4;
                                                                                        i18 = i19;
                                                                                        if (j11 == 0) {
                                                                                            r7.performSendDelayedMessage(delayedMessage7);
                                                                                            i18 = i19;
                                                                                        }
                                                                                        c8 = c7;
                                                                                        tLRPC$Message8 = tLRPC$Message6;
                                                                                        delayedMessage6 = delayedMessage7;
                                                                                        i42 = i18;
                                                                                    }
                                                                                    TLRPC$TL_decryptedMessageMediaDocument tLRPC$TL_decryptedMessageMediaDocument = new TLRPC$TL_decryptedMessageMediaDocument();
                                                                                    tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaDocument;
                                                                                    tLRPC$TL_decryptedMessageMediaDocument.attributes = tLRPC$TL_document8.attributes;
                                                                                    if (thumbForSecretChat != null && (bArr = thumbForSecretChat.bytes) != null) {
                                                                                        tLRPC$TL_decryptedMessageMediaDocument.thumb = bArr;
                                                                                    } else {
                                                                                        tLRPC$TL_decryptedMessageMediaDocument.thumb = new byte[0];
                                                                                    }
                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia22 = tLRPC$TL_decryptedMessage.media;
                                                                                    tLRPC$DecryptedMessageMedia22.caption = str55;
                                                                                    tLRPC$DecryptedMessageMedia22.mime_type = "video/mp4";
                                                                                    tLRPC$DecryptedMessageMedia22.size = tLRPC$TL_document8.size;
                                                                                    i17 = 0;
                                                                                    while (true) {
                                                                                        if (i17 < tLRPC$TL_document8.attributes.size()) {
                                                                                        }
                                                                                        i17++;
                                                                                    }
                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia42 = tLRPC$TL_decryptedMessage.media;
                                                                                    tLRPC$DecryptedMessageMedia42.thumb_h = thumbForSecretChat.h;
                                                                                    tLRPC$DecryptedMessageMedia42.thumb_w = thumbForSecretChat.w;
                                                                                    if (tLRPC$TL_document8.key == null) {
                                                                                    }
                                                                                    if (delayedMessage10 != null) {
                                                                                    }
                                                                                    delayedMessage7.videoEditedInfo = videoEditedInfo4;
                                                                                    i18 = i19;
                                                                                    if (j11 == 0) {
                                                                                    }
                                                                                    c8 = c7;
                                                                                    tLRPC$Message8 = tLRPC$Message6;
                                                                                    delayedMessage6 = delayedMessage7;
                                                                                    i42 = i18;
                                                                                } else {
                                                                                    j10 = j;
                                                                                    int i43 = i;
                                                                                    TLRPC$Message tLRPC$Message23 = tLRPC$Message6;
                                                                                    str15 = str54;
                                                                                    Object obj10 = obj2;
                                                                                    j11 = j20;
                                                                                    if (c7 == 6) {
                                                                                        TLRPC$TL_decryptedMessageMediaContact tLRPC$TL_decryptedMessageMediaContact = new TLRPC$TL_decryptedMessageMediaContact();
                                                                                        tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaContact;
                                                                                        tLRPC$TL_decryptedMessageMediaContact.phone_number = tLRPC$User7.phone;
                                                                                        tLRPC$TL_decryptedMessageMediaContact.first_name = tLRPC$User7.first_name;
                                                                                        tLRPC$TL_decryptedMessageMediaContact.last_name = tLRPC$User7.last_name;
                                                                                        tLRPC$TL_decryptedMessageMediaContact.user_id = tLRPC$User7.id;
                                                                                        getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, null, null, messageObject4);
                                                                                    } else {
                                                                                        try {
                                                                                            if (c7 != 7 && (c7 != '\t' || tLRPC$TL_document8 == null)) {
                                                                                                if (c7 == '\b') {
                                                                                                    delayedMessage5 = new DelayedMessage(j10);
                                                                                                    delayedMessage5.encryptedChat = tLRPC$EncryptedChat;
                                                                                                    delayedMessage5.sendEncryptedRequest = tLRPC$TL_decryptedMessage;
                                                                                                    delayedMessage5.obj = messageObject4;
                                                                                                    delayedMessage5.type = 3;
                                                                                                    delayedMessage5.parentObject = str53;
                                                                                                    delayedMessage5.performMediaUpload = true;
                                                                                                    delayedMessage5.scheduled = i43 != 0;
                                                                                                    TLRPC$TL_decryptedMessageMediaDocument tLRPC$TL_decryptedMessageMediaDocument2 = new TLRPC$TL_decryptedMessageMediaDocument();
                                                                                                    tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaDocument2;
                                                                                                    tLRPC$TL_decryptedMessageMediaDocument2.attributes = tLRPC$TL_document8.attributes;
                                                                                                    tLRPC$TL_decryptedMessageMediaDocument2.caption = str55;
                                                                                                    TLRPC$PhotoSize thumbForSecretChat2 = r7.getThumbForSecretChat(tLRPC$TL_document8.thumbs);
                                                                                                    if (thumbForSecretChat2 != null) {
                                                                                                        ImageLoader.fillPhotoSizeWithBytes(thumbForSecretChat2);
                                                                                                        TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia6 = tLRPC$TL_decryptedMessage.media;
                                                                                                        ((TLRPC$TL_decryptedMessageMediaDocument) tLRPC$DecryptedMessageMedia6).thumb = thumbForSecretChat2.bytes;
                                                                                                        tLRPC$DecryptedMessageMedia6.thumb_h = thumbForSecretChat2.h;
                                                                                                        tLRPC$DecryptedMessageMedia6.thumb_w = thumbForSecretChat2.w;
                                                                                                    } else {
                                                                                                        TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia7 = tLRPC$TL_decryptedMessage.media;
                                                                                                        ((TLRPC$TL_decryptedMessageMediaDocument) tLRPC$DecryptedMessageMedia7).thumb = new byte[0];
                                                                                                        tLRPC$DecryptedMessageMedia7.thumb_h = 0;
                                                                                                        tLRPC$DecryptedMessageMedia7.thumb_w = 0;
                                                                                                    }
                                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia8 = tLRPC$TL_decryptedMessage.media;
                                                                                                    tLRPC$DecryptedMessageMedia8.mime_type = tLRPC$TL_document8.mime_type;
                                                                                                    tLRPC$DecryptedMessageMedia8.size = tLRPC$TL_document8.size;
                                                                                                    delayedMessage5.originalPath = str15;
                                                                                                    r7.performSendDelayedMessage(delayedMessage5);
                                                                                                    i20 = i43;
                                                                                                    tLRPC$Message12 = tLRPC$Message23;
                                                                                                    c8 = c7;
                                                                                                    i15 = i20;
                                                                                                    tLRPC$Message11 = tLRPC$Message12;
                                                                                                    delayedMessage6 = delayedMessage5;
                                                                                                    i42 = i15;
                                                                                                    tLRPC$Message8 = tLRPC$Message11;
                                                                                                }
                                                                                            }
                                                                                            if (tLRPC$TL_document8.access_hash != 0 && (MessageObject.isStickerDocument(tLRPC$TL_document8) || MessageObject.isAnimatedStickerDocument(tLRPC$TL_document8, true))) {
                                                                                                TLRPC$TL_decryptedMessageMediaExternalDocument tLRPC$TL_decryptedMessageMediaExternalDocument = new TLRPC$TL_decryptedMessageMediaExternalDocument();
                                                                                                tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaExternalDocument;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.id = tLRPC$TL_document8.id;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.date = tLRPC$TL_document8.date;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.access_hash = tLRPC$TL_document8.access_hash;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.mime_type = tLRPC$TL_document8.mime_type;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.size = tLRPC$TL_document8.size;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.dc_id = tLRPC$TL_document8.dc_id;
                                                                                                tLRPC$TL_decryptedMessageMediaExternalDocument.attributes = tLRPC$TL_document8.attributes;
                                                                                                TLRPC$PhotoSize thumbForSecretChat3 = r7.getThumbForSecretChat(tLRPC$TL_document8.thumbs);
                                                                                                if (thumbForSecretChat3 != null) {
                                                                                                    ((TLRPC$TL_decryptedMessageMediaExternalDocument) tLRPC$TL_decryptedMessage.media).thumb = thumbForSecretChat3;
                                                                                                } else {
                                                                                                    ((TLRPC$TL_decryptedMessageMediaExternalDocument) tLRPC$TL_decryptedMessage.media).thumb = new TLRPC$TL_photoSizeEmpty();
                                                                                                    ((TLRPC$TL_decryptedMessageMediaExternalDocument) tLRPC$TL_decryptedMessage.media).thumb.type = "s";
                                                                                                }
                                                                                                if (delayedMessage10 != null) {
                                                                                                    delayedMessage5 = delayedMessage10;
                                                                                                    if (delayedMessage5.type == 5) {
                                                                                                        delayedMessage5.sendEncryptedRequest = tLRPC$TL_decryptedMessage;
                                                                                                        delayedMessage5.obj = messageObject4;
                                                                                                        r7.performSendDelayedMessage(delayedMessage5);
                                                                                                        tLRPC$Message13 = tLRPC$Message23;
                                                                                                    }
                                                                                                } else {
                                                                                                    delayedMessage5 = delayedMessage10;
                                                                                                }
                                                                                                getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, null, null, messageObject4);
                                                                                                tLRPC$Message13 = tLRPC$Message23;
                                                                                            } else {
                                                                                                TLRPC$TL_decryptedMessageMediaDocument tLRPC$TL_decryptedMessageMediaDocument3 = new TLRPC$TL_decryptedMessageMediaDocument();
                                                                                                tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaDocument3;
                                                                                                c8 = c7;
                                                                                                tLRPC$TL_decryptedMessageMediaDocument3.attributes = tLRPC$TL_document8.attributes;
                                                                                                tLRPC$TL_decryptedMessageMediaDocument3.caption = str55;
                                                                                                TLRPC$PhotoSize thumbForSecretChat4 = r7.getThumbForSecretChat(tLRPC$TL_document8.thumbs);
                                                                                                if (thumbForSecretChat4 != null) {
                                                                                                    ImageLoader.fillPhotoSizeWithBytes(thumbForSecretChat4);
                                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia9 = tLRPC$TL_decryptedMessage.media;
                                                                                                    str17 = str53;
                                                                                                    ((TLRPC$TL_decryptedMessageMediaDocument) tLRPC$DecryptedMessageMedia9).thumb = thumbForSecretChat4.bytes;
                                                                                                    tLRPC$DecryptedMessageMedia9.thumb_h = thumbForSecretChat4.h;
                                                                                                    tLRPC$DecryptedMessageMedia9.thumb_w = thumbForSecretChat4.w;
                                                                                                } else {
                                                                                                    str17 = str53;
                                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia10 = tLRPC$TL_decryptedMessage.media;
                                                                                                    ((TLRPC$TL_decryptedMessageMediaDocument) tLRPC$DecryptedMessageMedia10).thumb = new byte[0];
                                                                                                    tLRPC$DecryptedMessageMedia10.thumb_h = 0;
                                                                                                    tLRPC$DecryptedMessageMedia10.thumb_w = 0;
                                                                                                }
                                                                                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia11 = tLRPC$TL_decryptedMessage.media;
                                                                                                tLRPC$DecryptedMessageMedia11.size = tLRPC$TL_document8.size;
                                                                                                tLRPC$DecryptedMessageMedia11.mime_type = tLRPC$TL_document8.mime_type;
                                                                                                if (tLRPC$TL_document8.key == null || j11 != 0) {
                                                                                                    if (delayedMessage10 == null) {
                                                                                                        delayedMessage6 = new DelayedMessage(j10);
                                                                                                        delayedMessage6.encryptedChat = tLRPC$EncryptedChat;
                                                                                                        delayedMessage6.type = 2;
                                                                                                        delayedMessage6.sendEncryptedRequest = tLRPC$TL_decryptedMessage;
                                                                                                        delayedMessage6.originalPath = str15;
                                                                                                        delayedMessage6.obj = messageObject4;
                                                                                                        if (hashMap6 != null && hashMap6.containsKey(obj10)) {
                                                                                                            delayedMessage6.parentObject = hashMap6.get(obj10);
                                                                                                        } else {
                                                                                                            delayedMessage6.parentObject = str17;
                                                                                                        }
                                                                                                        delayedMessage6.performMediaUpload = true;
                                                                                                        i16 = i;
                                                                                                        try {
                                                                                                            delayedMessage6.scheduled = i16 != 0;
                                                                                                            str18 = str3;
                                                                                                        } catch (Exception e16) {
                                                                                                            exc = e16;
                                                                                                            i14 = i16;
                                                                                                            tLRPC$Message9 = tLRPC$Message23;
                                                                                                            tLRPC$Message = tLRPC$Message9;
                                                                                                            i4 = i14;
                                                                                                            sendMessagesHelper = r7;
                                                                                                            FileLog.e(exc);
                                                                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                                            if (messageObject4 != null) {
                                                                                                            }
                                                                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                                            return;
                                                                                                        }
                                                                                                    } else {
                                                                                                        i16 = i;
                                                                                                        str18 = str3;
                                                                                                        delayedMessage6 = delayedMessage10;
                                                                                                    }
                                                                                                    tLRPC$Message10 = tLRPC$Message23;
                                                                                                    if (str18 != null) {
                                                                                                        try {
                                                                                                            if (str3.length() > 0 && str18.startsWith("http")) {
                                                                                                                delayedMessage6.httpLocation = str18;
                                                                                                            }
                                                                                                        } catch (Exception e17) {
                                                                                                            exc = e17;
                                                                                                            tLRPC$Message = tLRPC$Message10;
                                                                                                            i4 = i16;
                                                                                                            sendMessagesHelper = r7;
                                                                                                        }
                                                                                                    }
                                                                                                    if (j11 == 0) {
                                                                                                        r7.performSendDelayedMessage(delayedMessage6);
                                                                                                    }
                                                                                                } else {
                                                                                                    TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile2 = new TLRPC$InputEncryptedFile() { // from class: org.telegram.tgnet.TLRPC$TL_inputEncryptedFile
                                                                                                        public static int constructor = 1511503333;

                                                                                                        @Override // org.telegram.tgnet.TLObject
                                                                                                        public void readParams(AbstractSerializedData abstractSerializedData, boolean z17) {
                                                                                                            this.id = abstractSerializedData.readInt64(z17);
                                                                                                            this.access_hash = abstractSerializedData.readInt64(z17);
                                                                                                        }

                                                                                                        @Override // org.telegram.tgnet.TLObject
                                                                                                        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                                                                                                            abstractSerializedData.writeInt32(constructor);
                                                                                                            abstractSerializedData.writeInt64(this.id);
                                                                                                            abstractSerializedData.writeInt64(this.access_hash);
                                                                                                        }
                                                                                                    };
                                                                                                    tLRPC$InputEncryptedFile2.id = tLRPC$TL_document8.id;
                                                                                                    tLRPC$InputEncryptedFile2.access_hash = tLRPC$TL_document8.access_hash;
                                                                                                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia12 = tLRPC$TL_decryptedMessage.media;
                                                                                                    tLRPC$DecryptedMessageMedia12.key = tLRPC$TL_document8.key;
                                                                                                    tLRPC$DecryptedMessageMedia12.iv = tLRPC$TL_document8.iv;
                                                                                                    getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, tLRPC$InputEncryptedFile2, null, messageObject4);
                                                                                                    i16 = i;
                                                                                                    delayedMessage6 = delayedMessage10;
                                                                                                    tLRPC$Message10 = tLRPC$Message23;
                                                                                                }
                                                                                                tLRPC$Message8 = tLRPC$Message10;
                                                                                                i42 = i16;
                                                                                            }
                                                                                        } catch (Exception e18) {
                                                                                            i4 = i;
                                                                                            exc = e18;
                                                                                            tLRPC$Message = tLRPC$Message23;
                                                                                            sendMessagesHelper = r7;
                                                                                        }
                                                                                    }
                                                                                    delayedMessage5 = delayedMessage10;
                                                                                    tLRPC$Message13 = tLRPC$Message23;
                                                                                }
                                                                                if (j11 == 0) {
                                                                                    TLObject tLObject = delayedMessage6.sendEncryptedRequest;
                                                                                    if (tLObject != null) {
                                                                                        tLRPC$TL_messages_sendEncryptedMultiMedia = (TLRPC$TL_messages_sendEncryptedMultiMedia) tLObject;
                                                                                    } else {
                                                                                        tLRPC$TL_messages_sendEncryptedMultiMedia = new TLRPC$TL_messages_sendEncryptedMultiMedia();
                                                                                        delayedMessage6.sendEncryptedRequest = tLRPC$TL_messages_sendEncryptedMultiMedia;
                                                                                    }
                                                                                    delayedMessage6.messageObjects.add(messageObject4);
                                                                                    tLRPC$Message7 = tLRPC$Message8;
                                                                                    try {
                                                                                        delayedMessage6.messages.add(tLRPC$Message7);
                                                                                        delayedMessage6.originalPaths.add(str15);
                                                                                        delayedMessage6.performMediaUpload = true;
                                                                                        tLRPC$TL_messages_sendEncryptedMultiMedia.messages.add(tLRPC$TL_decryptedMessage);
                                                                                        TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile3 = new TLRPC$InputEncryptedFile() { // from class: org.telegram.tgnet.TLRPC$TL_inputEncryptedFile
                                                                                            public static int constructor = 1511503333;

                                                                                            @Override // org.telegram.tgnet.TLObject
                                                                                            public void readParams(AbstractSerializedData abstractSerializedData, boolean z17) {
                                                                                                this.id = abstractSerializedData.readInt64(z17);
                                                                                                this.access_hash = abstractSerializedData.readInt64(z17);
                                                                                            }

                                                                                            @Override // org.telegram.tgnet.TLObject
                                                                                            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                                                                                                abstractSerializedData.writeInt32(constructor);
                                                                                                abstractSerializedData.writeInt64(this.id);
                                                                                                abstractSerializedData.writeInt64(this.access_hash);
                                                                                            }
                                                                                        };
                                                                                        char c15 = c8;
                                                                                        tLRPC$InputEncryptedFile3.id = (c15 == 3 || c15 == 7) ? 1L : 1L;
                                                                                        tLRPC$TL_messages_sendEncryptedMultiMedia.files.add(tLRPC$InputEncryptedFile3);
                                                                                        r7.performSendDelayedMessage(delayedMessage6);
                                                                                    } catch (Exception e19) {
                                                                                        e = e19;
                                                                                        exc = e;
                                                                                        tLRPC$Message = tLRPC$Message7;
                                                                                        i4 = i42;
                                                                                        sendMessagesHelper = r7;
                                                                                        FileLog.e(exc);
                                                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                        if (messageObject4 != null) {
                                                                                        }
                                                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                        return;
                                                                                    }
                                                                                } else {
                                                                                    tLRPC$Message7 = tLRPC$Message8;
                                                                                }
                                                                                if (messageObject3 != null) {
                                                                                    getMediaDataController().cleanDraft(j10, messageObject2 != null ? messageObject2.getId() : 0, false);
                                                                                    return;
                                                                                }
                                                                                return;
                                                                            } else {
                                                                                j10 = j;
                                                                            }
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize = tLRPC$TL_photo8.sizes.get(0);
                                                                            TLRPC$PhotoSize tLRPC$PhotoSize2 = tLRPC$TL_photo8.sizes.get(arrayList3.size() - 1);
                                                                            ImageLoader.fillPhotoSizeWithBytes(tLRPC$PhotoSize);
                                                                            TLRPC$TL_decryptedMessageMediaPhoto tLRPC$TL_decryptedMessageMediaPhoto = new TLRPC$TL_decryptedMessageMediaPhoto();
                                                                            tLRPC$TL_decryptedMessage.media = tLRPC$TL_decryptedMessageMediaPhoto;
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.caption = str55;
                                                                            byte[] bArr3 = tLRPC$PhotoSize.bytes;
                                                                            if (bArr3 != null) {
                                                                                str16 = str53;
                                                                                tLRPC$TL_decryptedMessageMediaPhoto.thumb = bArr3;
                                                                                obj7 = obj6;
                                                                            } else {
                                                                                str16 = str53;
                                                                                obj7 = obj6;
                                                                                tLRPC$TL_decryptedMessageMediaPhoto.thumb = new byte[0];
                                                                            }
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.thumb_h = tLRPC$PhotoSize.h;
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.thumb_w = tLRPC$PhotoSize.w;
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.w = tLRPC$PhotoSize2.w;
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.h = tLRPC$PhotoSize2.h;
                                                                            tLRPC$TL_decryptedMessageMediaPhoto.size = tLRPC$PhotoSize2.size;
                                                                            if (tLRPC$PhotoSize2.location.key == null || j11 != 0) {
                                                                                if (delayedMessage5 == null) {
                                                                                    delayedMessage6 = new DelayedMessage(j10);
                                                                                    delayedMessage6.encryptedChat = tLRPC$EncryptedChat;
                                                                                    delayedMessage6.type = 0;
                                                                                    delayedMessage6.originalPath = str15;
                                                                                    delayedMessage6.sendEncryptedRequest = tLRPC$TL_decryptedMessage;
                                                                                    delayedMessage6.obj = messageObject4;
                                                                                    if (hashMap6 != null) {
                                                                                        Object obj11 = obj7;
                                                                                        if (hashMap6.containsKey(obj11)) {
                                                                                            delayedMessage6.parentObject = hashMap6.get(obj11);
                                                                                            delayedMessage6.performMediaUpload = true;
                                                                                            i42 = i;
                                                                                            delayedMessage6.scheduled = i42 == 0;
                                                                                        }
                                                                                    }
                                                                                    delayedMessage6.parentObject = str16;
                                                                                    delayedMessage6.performMediaUpload = true;
                                                                                    i42 = i;
                                                                                    delayedMessage6.scheduled = i42 == 0;
                                                                                } else {
                                                                                    i42 = i;
                                                                                    delayedMessage6 = delayedMessage5;
                                                                                }
                                                                                try {
                                                                                    if (!TextUtils.isEmpty(str3) && str3.startsWith("http")) {
                                                                                        delayedMessage6.httpLocation = str3;
                                                                                    } else {
                                                                                        ArrayList<TLRPC$PhotoSize> arrayList7 = tLRPC$TL_photo8.sizes;
                                                                                        delayedMessage6.photoSize = arrayList7.get(arrayList7.size() - 1);
                                                                                        delayedMessage6.locationParent = tLRPC$TL_photo8;
                                                                                    }
                                                                                    i42 = i42;
                                                                                    tLRPC$Message8 = tLRPC$Message8;
                                                                                    if (j11 == 0) {
                                                                                        r7.performSendDelayedMessage(delayedMessage6);
                                                                                        i42 = i42;
                                                                                        tLRPC$Message8 = tLRPC$Message8;
                                                                                    }
                                                                                    if (j11 == 0) {
                                                                                    }
                                                                                    if (messageObject3 != null) {
                                                                                    }
                                                                                } catch (Exception e20) {
                                                                                    e = e20;
                                                                                    i42 = i42;
                                                                                    tLRPC$Message7 = tLRPC$Message8;
                                                                                    exc = e;
                                                                                    tLRPC$Message = tLRPC$Message7;
                                                                                    i4 = i42;
                                                                                    sendMessagesHelper = r7;
                                                                                    FileLog.e(exc);
                                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                    if (messageObject4 != null) {
                                                                                    }
                                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                    return;
                                                                                }
                                                                            } else {
                                                                                TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile4 = new TLRPC$InputEncryptedFile() { // from class: org.telegram.tgnet.TLRPC$TL_inputEncryptedFile
                                                                                    public static int constructor = 1511503333;

                                                                                    @Override // org.telegram.tgnet.TLObject
                                                                                    public void readParams(AbstractSerializedData abstractSerializedData, boolean z17) {
                                                                                        this.id = abstractSerializedData.readInt64(z17);
                                                                                        this.access_hash = abstractSerializedData.readInt64(z17);
                                                                                    }

                                                                                    @Override // org.telegram.tgnet.TLObject
                                                                                    public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                                                                                        abstractSerializedData.writeInt32(constructor);
                                                                                        abstractSerializedData.writeInt64(this.id);
                                                                                        abstractSerializedData.writeInt64(this.access_hash);
                                                                                    }
                                                                                };
                                                                                TLRPC$FileLocation tLRPC$FileLocation2 = tLRPC$PhotoSize2.location;
                                                                                tLRPC$InputEncryptedFile4.id = tLRPC$FileLocation2.volume_id;
                                                                                tLRPC$InputEncryptedFile4.access_hash = tLRPC$FileLocation2.secret;
                                                                                TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia13 = tLRPC$TL_decryptedMessage.media;
                                                                                tLRPC$DecryptedMessageMedia13.key = tLRPC$FileLocation2.key;
                                                                                tLRPC$DecryptedMessageMedia13.iv = tLRPC$FileLocation2.iv;
                                                                                getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject4.messageOwner, tLRPC$EncryptedChat, tLRPC$InputEncryptedFile4, null, messageObject4);
                                                                                i15 = i;
                                                                                tLRPC$Message11 = tLRPC$Message8;
                                                                                delayedMessage6 = delayedMessage5;
                                                                                i42 = i15;
                                                                                tLRPC$Message8 = tLRPC$Message11;
                                                                                if (j11 == 0) {
                                                                                }
                                                                                if (messageObject3 != null) {
                                                                                }
                                                                            }
                                                                        } catch (Exception e21) {
                                                                            e = e21;
                                                                            i42 = i;
                                                                            tLRPC$Message7 = tLRPC$Message8;
                                                                            exc = e;
                                                                            tLRPC$Message = tLRPC$Message7;
                                                                            i4 = i42;
                                                                            sendMessagesHelper = r7;
                                                                            FileLog.e(exc);
                                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                            if (messageObject4 != null) {
                                                                            }
                                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                            return;
                                                                        }
                                                                        c8 = c7;
                                                                        tLRPC$Message8 = tLRPC$Message6;
                                                                        str15 = str54;
                                                                        obj6 = obj2;
                                                                        delayedMessage5 = delayedMessage10;
                                                                        j11 = j20;
                                                                    }
                                                                    i20 = i;
                                                                    tLRPC$Message12 = tLRPC$Message13;
                                                                    c8 = c7;
                                                                    i15 = i20;
                                                                    tLRPC$Message11 = tLRPC$Message12;
                                                                    delayedMessage6 = delayedMessage5;
                                                                    i42 = i15;
                                                                    tLRPC$Message8 = tLRPC$Message11;
                                                                    if (j11 == 0) {
                                                                    }
                                                                    if (messageObject3 != null) {
                                                                    }
                                                                } catch (Exception e22) {
                                                                    e = e22;
                                                                }
                                                            } catch (Exception e23) {
                                                                e = e23;
                                                                i42 = i;
                                                                tLRPC$Message7 = tLRPC$Message6;
                                                            }
                                                        } else {
                                                            if (c7 == 1) {
                                                                TLRPC$MessageMedia tLRPC$MessageMedia7 = tLRPC$MessageMedia3;
                                                                if (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaVenue) {
                                                                    tLRPC$TL_inputMediaGeoPoint = new TLRPC$TL_inputMediaVenue();
                                                                    tLRPC$TL_inputMediaGeoPoint.address = tLRPC$MessageMedia7.address;
                                                                    tLRPC$TL_inputMediaGeoPoint.title = tLRPC$MessageMedia7.title;
                                                                    tLRPC$TL_inputMediaGeoPoint.provider = tLRPC$MessageMedia7.provider;
                                                                    tLRPC$TL_inputMediaGeoPoint.venue_id = tLRPC$MessageMedia7.venue_id;
                                                                    tLRPC$TL_inputMediaGeoPoint.venue_type = str50;
                                                                } else if (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaGeoLive) {
                                                                    tLRPC$TL_inputMediaGeoPoint = new TLRPC$TL_inputMediaGeoLive();
                                                                    tLRPC$TL_inputMediaGeoPoint.period = tLRPC$MessageMedia7.period;
                                                                    int i44 = tLRPC$TL_inputMediaGeoPoint.flags | 2;
                                                                    tLRPC$TL_inputMediaGeoPoint.flags = i44;
                                                                    int i45 = tLRPC$MessageMedia7.heading;
                                                                    if (i45 != 0) {
                                                                        tLRPC$TL_inputMediaGeoPoint.heading = i45;
                                                                        tLRPC$TL_inputMediaGeoPoint.flags = i44 | 4;
                                                                    }
                                                                    int i46 = tLRPC$MessageMedia7.proximity_notification_radius;
                                                                    if (i46 != 0) {
                                                                        tLRPC$TL_inputMediaGeoPoint.proximity_notification_radius = i46;
                                                                        tLRPC$TL_inputMediaGeoPoint.flags |= 8;
                                                                    }
                                                                } else {
                                                                    tLRPC$TL_inputMediaGeoPoint = new TLRPC$TL_inputMediaGeoPoint();
                                                                }
                                                                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                                                                tLRPC$TL_inputMediaGeoPoint.geo_point = tLRPC$TL_inputGeoPoint;
                                                                TLRPC$GeoPoint tLRPC$GeoPoint2 = tLRPC$MessageMedia7.geo;
                                                                tLRPC$TL_inputGeoPoint.lat = tLRPC$GeoPoint2.lat;
                                                                tLRPC$TL_inputGeoPoint._long = tLRPC$GeoPoint2._long;
                                                                str20 = str11;
                                                                tLRPC$InputMedia5 = tLRPC$TL_inputMediaGeoPoint;
                                                                hashMap7 = hashMap5;
                                                                tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                tLRPC$Message14 = tLRPC$Message3;
                                                                sendMessagesHelper11 = str4;
                                                                z14 = false;
                                                                c9 = c7;
                                                                i28 = i;
                                                                j13 = j9;
                                                                delayedMessage9 = delayedMessage4;
                                                            } else {
                                                                String str56 = str50;
                                                                try {
                                                                    try {
                                                                        if (c7 == 2 || (c7 == '\t' && tLRPC$TL_photo3 != null)) {
                                                                            int i47 = i10;
                                                                            DelayedMessage delayedMessage11 = delayedMessage4;
                                                                            tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                            TLRPC$Message tLRPC$Message24 = tLRPC$Message3;
                                                                            String str57 = str4;
                                                                            c9 = c7;
                                                                            int i48 = i;
                                                                            String str58 = str11;
                                                                            try {
                                                                                tLRPC$TL_inputMediaUploadedPhoto = new TLRPC$TL_inputMediaUploadedPhoto();
                                                                                tLRPC$TL_inputMediaUploadedPhoto.spoiler = z4;
                                                                                if (i47 != 0) {
                                                                                    tLRPC$TL_inputMediaUploadedPhoto.ttl_seconds = i47;
                                                                                    tLRPC$Message15 = tLRPC$Message24;
                                                                                    tLRPC$Message15.ttl = i47;
                                                                                    tLRPC$TL_inputMediaUploadedPhoto.flags |= 2;
                                                                                } else {
                                                                                    tLRPC$Message15 = tLRPC$Message24;
                                                                                }
                                                                                if (hashMap5 == null || (str21 = hashMap5.get("masks")) == null) {
                                                                                    str20 = str58;
                                                                                    hashMap7 = hashMap5;
                                                                                } else {
                                                                                    SerializedData serializedData = new SerializedData(Utilities.hexToBytes(str21));
                                                                                    int i49 = 0;
                                                                                    int readInt32 = serializedData.readInt32(false);
                                                                                    while (i49 < readInt32) {
                                                                                        tLRPC$TL_inputMediaUploadedPhoto.stickers.add(TLRPC$InputDocument.TLdeserialize(serializedData, serializedData.readInt32(false), false));
                                                                                        i49++;
                                                                                        readInt32 = readInt32;
                                                                                        hashMap5 = hashMap5;
                                                                                        str58 = str58;
                                                                                    }
                                                                                    str20 = str58;
                                                                                    hashMap7 = hashMap5;
                                                                                    tLRPC$TL_inputMediaUploadedPhoto.flags |= 1;
                                                                                    serializedData.cleanup();
                                                                                }
                                                                                tLRPC$TL_photo4 = tLRPC$TL_photo3;
                                                                                tLRPC$Message14 = tLRPC$Message15;
                                                                            } catch (Exception e24) {
                                                                                e = e24;
                                                                                sendMessagesHelper9 = sendMessagesHelper7;
                                                                                tLRPC$Message14 = tLRPC$Message24;
                                                                                i27 = i48;
                                                                            }
                                                                            try {
                                                                                if (tLRPC$TL_photo4.access_hash == 0) {
                                                                                    tLRPC$InputMedia = tLRPC$TL_inputMediaUploadedPhoto;
                                                                                    tLRPC$InputMedia2 = tLRPC$InputMedia;
                                                                                    z13 = true;
                                                                                } else {
                                                                                    ?? tLRPC$TL_inputMediaPhoto = new TLRPC$TL_inputMediaPhoto();
                                                                                    TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                                                                                    tLRPC$TL_inputMediaPhoto.id = tLRPC$TL_inputPhoto;
                                                                                    tLRPC$InputMedia = tLRPC$TL_inputMediaUploadedPhoto;
                                                                                    tLRPC$TL_inputPhoto.id = tLRPC$TL_photo4.id;
                                                                                    tLRPC$TL_inputPhoto.access_hash = tLRPC$TL_photo4.access_hash;
                                                                                    byte[] bArr4 = tLRPC$TL_photo4.file_reference;
                                                                                    tLRPC$TL_inputPhoto.file_reference = bArr4;
                                                                                    if (bArr4 == null) {
                                                                                        try {
                                                                                            tLRPC$TL_inputPhoto.file_reference = new byte[0];
                                                                                        } catch (Exception e25) {
                                                                                            exc = e25;
                                                                                            str19 = tLRPC$Message14;
                                                                                            tLRPC$InputPeer5 = i48;
                                                                                            sendMessagesHelper8 = sendMessagesHelper7;
                                                                                            i26 = tLRPC$InputPeer5;
                                                                                            tLRPC$Message19 = str19;
                                                                                            i4 = i26;
                                                                                            sendMessagesHelper = sendMessagesHelper8;
                                                                                            tLRPC$Message = tLRPC$Message19;
                                                                                            FileLog.e(exc);
                                                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                            if (messageObject4 != null) {
                                                                                            }
                                                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                            return;
                                                                                        }
                                                                                    }
                                                                                    tLRPC$TL_inputMediaPhoto.spoiler = z4;
                                                                                    z13 = false;
                                                                                    tLRPC$InputMedia2 = tLRPC$TL_inputMediaPhoto;
                                                                                }
                                                                                if (delayedMessage11 == null) {
                                                                                    delayedMessage8 = new DelayedMessage(j15);
                                                                                    delayedMessage8.type = 0;
                                                                                    delayedMessage8.obj = messageObject4;
                                                                                    delayedMessage8.originalPath = str57;
                                                                                    delayedMessage8.scheduled = i48 != 0;
                                                                                    tLRPC$InputMedia3 = tLRPC$InputMedia;
                                                                                } else {
                                                                                    tLRPC$InputMedia3 = tLRPC$InputMedia;
                                                                                    delayedMessage8 = delayedMessage11;
                                                                                }
                                                                                delayedMessage8.inputUploadMedia = tLRPC$InputMedia3;
                                                                                delayedMessage8.performMediaUpload = z13;
                                                                                if (str3 != null && str3.length() > 0 && str3.startsWith("http")) {
                                                                                    delayedMessage8.httpLocation = str3;
                                                                                } else {
                                                                                    ArrayList<TLRPC$PhotoSize> arrayList8 = tLRPC$TL_photo4.sizes;
                                                                                    delayedMessage8.photoSize = arrayList8.get(arrayList8.size() - 1);
                                                                                    delayedMessage8.locationParent = tLRPC$TL_photo4;
                                                                                }
                                                                                j13 = j9;
                                                                                delayedMessage9 = delayedMessage8;
                                                                                z14 = z13;
                                                                                tLRPC$InputMedia5 = tLRPC$InputMedia2;
                                                                                sendMessagesHelper11 = str57;
                                                                                i28 = i48;
                                                                            } catch (Exception e26) {
                                                                                e = e26;
                                                                                sendMessagesHelper9 = sendMessagesHelper7;
                                                                                i27 = i48;
                                                                                exc = e;
                                                                                tLRPC$Message19 = tLRPC$Message14;
                                                                                sendMessagesHelper8 = sendMessagesHelper9;
                                                                                i26 = i27;
                                                                                i4 = i26;
                                                                                sendMessagesHelper = sendMessagesHelper8;
                                                                                tLRPC$Message = tLRPC$Message19;
                                                                                FileLog.e(exc);
                                                                                getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                if (messageObject4 != null) {
                                                                                }
                                                                                getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                return;
                                                                            }
                                                                        } else {
                                                                            try {
                                                                                try {
                                                                                    if (c7 == 3) {
                                                                                        try {
                                                                                            TLRPC$InputMedia tLRPC$TL_inputMediaUploadedDocument2 = new TLRPC$TL_inputMediaUploadedDocument();
                                                                                            TLRPC$TL_document tLRPC$TL_document9 = tLRPC$TL_document2;
                                                                                            tLRPC$TL_inputMediaUploadedDocument2.mime_type = tLRPC$TL_document9.mime_type;
                                                                                            tLRPC$TL_inputMediaUploadedDocument2.attributes = tLRPC$TL_document9.attributes;
                                                                                            tLRPC$TL_inputMediaUploadedDocument2.spoiler = z4;
                                                                                            if (!z9) {
                                                                                                if (MessageObject.isRoundVideoDocument(tLRPC$TL_document9)) {
                                                                                                    videoEditedInfo5 = videoEditedInfo3;
                                                                                                    c10 = c7;
                                                                                                } else if (videoEditedInfo3 != null) {
                                                                                                    videoEditedInfo5 = videoEditedInfo3;
                                                                                                    c10 = c7;
                                                                                                    if (!videoEditedInfo5.muted) {
                                                                                                    }
                                                                                                }
                                                                                                if (i10 != 0) {
                                                                                                    int i50 = i10;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument2.ttl_seconds = i50;
                                                                                                    tLRPC$Message3.ttl = i50;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument2.flags |= 2;
                                                                                                }
                                                                                                if (hashMap5 != null) {
                                                                                                    try {
                                                                                                        String str59 = hashMap5.get("masks");
                                                                                                        if (str59 != null) {
                                                                                                            tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                                                            SerializedData serializedData2 = new SerializedData(Utilities.hexToBytes(str59));
                                                                                                            tLRPC$Message17 = tLRPC$Message3;
                                                                                                            int i51 = 0;
                                                                                                            int readInt322 = serializedData2.readInt32(false);
                                                                                                            while (i51 < readInt322) {
                                                                                                                tLRPC$TL_inputMediaUploadedDocument2.stickers.add(TLRPC$InputDocument.TLdeserialize(serializedData2, serializedData2.readInt32(false), false));
                                                                                                                i51++;
                                                                                                                readInt322 = readInt322;
                                                                                                                videoEditedInfo5 = videoEditedInfo5;
                                                                                                            }
                                                                                                            videoEditedInfo6 = videoEditedInfo5;
                                                                                                            tLRPC$TL_inputMediaUploadedDocument2.flags |= 1;
                                                                                                            serializedData2.cleanup();
                                                                                                            if (tLRPC$TL_document9.access_hash == 0) {
                                                                                                                tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaUploadedDocument2;
                                                                                                                z14 = true;
                                                                                                            } else {
                                                                                                                TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument4 = new TLRPC$TL_inputMediaDocument();
                                                                                                                TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
                                                                                                                tLRPC$TL_inputMediaDocument4.id = tLRPC$TL_inputDocument;
                                                                                                                tLRPC$TL_inputDocument.id = tLRPC$TL_document9.id;
                                                                                                                tLRPC$TL_inputDocument.access_hash = tLRPC$TL_document9.access_hash;
                                                                                                                byte[] bArr5 = tLRPC$TL_document9.file_reference;
                                                                                                                tLRPC$TL_inputDocument.file_reference = bArr5;
                                                                                                                if (bArr5 == null) {
                                                                                                                    tLRPC$TL_inputDocument.file_reference = new byte[0];
                                                                                                                }
                                                                                                                if (hashMap5 != null && hashMap5.containsKey("query")) {
                                                                                                                    tLRPC$TL_inputMediaDocument4.query = hashMap5.get("query");
                                                                                                                    tLRPC$TL_inputMediaDocument4.flags |= 2;
                                                                                                                }
                                                                                                                tLRPC$TL_inputMediaDocument4.spoiler = z4;
                                                                                                                z14 = false;
                                                                                                                tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaDocument4;
                                                                                                            }
                                                                                                            if (delayedMessage4 == null) {
                                                                                                                delayedMessage4 = new DelayedMessage(j15);
                                                                                                                delayedMessage4.type = 1;
                                                                                                                delayedMessage4.obj = messageObject4;
                                                                                                                str23 = str4;
                                                                                                                delayedMessage4.originalPath = str23;
                                                                                                                str22 = str11;
                                                                                                                delayedMessage4.parentObject = str22;
                                                                                                                i21 = i;
                                                                                                                delayedMessage4.scheduled = i21 != 0;
                                                                                                            } else {
                                                                                                                str22 = str11;
                                                                                                                i21 = i;
                                                                                                                str23 = str4;
                                                                                                            }
                                                                                                            delayedMessage4.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument2;
                                                                                                            delayedMessage4.performMediaUpload = z14;
                                                                                                            if (!tLRPC$TL_document9.thumbs.isEmpty()) {
                                                                                                                TLRPC$PhotoSize tLRPC$PhotoSize3 = tLRPC$TL_document9.thumbs.get(0);
                                                                                                                if (!(tLRPC$PhotoSize3 instanceof TLRPC$TL_photoStrippedSize)) {
                                                                                                                    delayedMessage4.photoSize = tLRPC$PhotoSize3;
                                                                                                                    delayedMessage4.locationParent = tLRPC$TL_document9;
                                                                                                                }
                                                                                                            }
                                                                                                            delayedMessage4.videoEditedInfo = videoEditedInfo6;
                                                                                                            c9 = c10;
                                                                                                            delayedMessage9 = delayedMessage4;
                                                                                                            tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument;
                                                                                                            str24 = str23;
                                                                                                            i22 = i21;
                                                                                                        }
                                                                                                    } catch (Exception e27) {
                                                                                                        i11 = i;
                                                                                                        exc = e27;
                                                                                                        sendMessagesHelper = sendMessagesHelper7;
                                                                                                        i4 = i11;
                                                                                                        tLRPC$Message = tLRPC$Message3;
                                                                                                        FileLog.e(exc);
                                                                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                                        if (messageObject4 != null) {
                                                                                                        }
                                                                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                                        return;
                                                                                                    }
                                                                                                }
                                                                                                videoEditedInfo6 = videoEditedInfo5;
                                                                                                tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                                                tLRPC$Message17 = tLRPC$Message3;
                                                                                                if (tLRPC$TL_document9.access_hash == 0) {
                                                                                                }
                                                                                                if (delayedMessage4 == null) {
                                                                                                }
                                                                                                delayedMessage4.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument2;
                                                                                                delayedMessage4.performMediaUpload = z14;
                                                                                                if (!tLRPC$TL_document9.thumbs.isEmpty()) {
                                                                                                }
                                                                                                delayedMessage4.videoEditedInfo = videoEditedInfo6;
                                                                                                c9 = c10;
                                                                                                delayedMessage9 = delayedMessage4;
                                                                                                tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument;
                                                                                                str24 = str23;
                                                                                                i22 = i21;
                                                                                            }
                                                                                            videoEditedInfo5 = videoEditedInfo3;
                                                                                            c10 = c7;
                                                                                            tLRPC$TL_inputMediaUploadedDocument2.nosound_video = true;
                                                                                            if (BuildVars.DEBUG_VERSION) {
                                                                                                FileLog.d("nosound_video = true");
                                                                                            }
                                                                                            if (i10 != 0) {
                                                                                            }
                                                                                            if (hashMap5 != null) {
                                                                                            }
                                                                                            videoEditedInfo6 = videoEditedInfo5;
                                                                                            tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                                            tLRPC$Message17 = tLRPC$Message3;
                                                                                            if (tLRPC$TL_document9.access_hash == 0) {
                                                                                            }
                                                                                            if (delayedMessage4 == null) {
                                                                                            }
                                                                                            delayedMessage4.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument2;
                                                                                            delayedMessage4.performMediaUpload = z14;
                                                                                            if (!tLRPC$TL_document9.thumbs.isEmpty()) {
                                                                                            }
                                                                                            delayedMessage4.videoEditedInfo = videoEditedInfo6;
                                                                                            c9 = c10;
                                                                                            delayedMessage9 = delayedMessage4;
                                                                                            tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument;
                                                                                            str24 = str23;
                                                                                            i22 = i21;
                                                                                        } catch (Exception e28) {
                                                                                            e = e28;
                                                                                            exc = e;
                                                                                            i11 = i;
                                                                                            sendMessagesHelper = sendMessagesHelper7;
                                                                                            i4 = i11;
                                                                                            tLRPC$Message = tLRPC$Message3;
                                                                                            FileLog.e(exc);
                                                                                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                            if (messageObject4 != null) {
                                                                                            }
                                                                                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                            return;
                                                                                        }
                                                                                    } else {
                                                                                        int i52 = i10;
                                                                                        DelayedMessage delayedMessage12 = delayedMessage4;
                                                                                        tLRPC$InputPeer6 = tLRPC$InputPeer4;
                                                                                        tLRPC$Message17 = tLRPC$Message3;
                                                                                        String str60 = str4;
                                                                                        TLRPC$TL_document tLRPC$TL_document10 = tLRPC$TL_document2;
                                                                                        int i53 = i;
                                                                                        str22 = str11;
                                                                                        if (c7 == 6) {
                                                                                            TLRPC$InputMedia tLRPC$TL_inputMediaContact = new TLRPC$TL_inputMediaContact();
                                                                                            TLRPC$User tLRPC$User8 = tLRPC$User3;
                                                                                            tLRPC$TL_inputMediaContact.phone_number = tLRPC$User8.phone;
                                                                                            tLRPC$TL_inputMediaContact.first_name = tLRPC$User8.first_name;
                                                                                            tLRPC$TL_inputMediaContact.last_name = tLRPC$User8.last_name;
                                                                                            if (!tLRPC$User8.restriction_reason.isEmpty() && tLRPC$User8.restriction_reason.get(0).text.startsWith("BEGIN:VCARD")) {
                                                                                                tLRPC$TL_inputMediaContact.vcard = tLRPC$User8.restriction_reason.get(0).text;
                                                                                                tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaContact;
                                                                                            } else {
                                                                                                tLRPC$TL_inputMediaContact.vcard = str56;
                                                                                                tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaContact;
                                                                                            }
                                                                                        } else {
                                                                                            if (c7 != 7 && c7 != '\t') {
                                                                                                if (c7 == '\b') {
                                                                                                    TLRPC$InputMedia tLRPC$TL_inputMediaUploadedDocument3 = new TLRPC$TL_inputMediaUploadedDocument();
                                                                                                    tLRPC$TL_inputMediaUploadedDocument3.mime_type = tLRPC$TL_document10.mime_type;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument3.attributes = tLRPC$TL_document10.attributes;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument3.spoiler = z4;
                                                                                                    if (i52 != 0) {
                                                                                                        tLRPC$TL_inputMediaUploadedDocument3.ttl_seconds = i52;
                                                                                                        tLRPC$Message17.ttl = i52;
                                                                                                        tLRPC$TL_inputMediaUploadedDocument3.flags |= 2;
                                                                                                        tLRPC$Message17 = tLRPC$Message17;
                                                                                                    }
                                                                                                    if (tLRPC$TL_document10.access_hash == 0) {
                                                                                                        tLRPC$TL_inputMediaDocument3 = tLRPC$TL_inputMediaUploadedDocument3;
                                                                                                        c9 = c7;
                                                                                                        z14 = true;
                                                                                                    } else {
                                                                                                        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument5 = new TLRPC$TL_inputMediaDocument();
                                                                                                        TLRPC$TL_inputDocument tLRPC$TL_inputDocument2 = new TLRPC$TL_inputDocument();
                                                                                                        tLRPC$TL_inputMediaDocument5.id = tLRPC$TL_inputDocument2;
                                                                                                        c9 = c7;
                                                                                                        tLRPC$TL_inputDocument2.id = tLRPC$TL_document10.id;
                                                                                                        tLRPC$TL_inputDocument2.access_hash = tLRPC$TL_document10.access_hash;
                                                                                                        byte[] bArr6 = tLRPC$TL_document10.file_reference;
                                                                                                        tLRPC$TL_inputDocument2.file_reference = bArr6;
                                                                                                        if (bArr6 == null) {
                                                                                                            tLRPC$TL_inputDocument2.file_reference = new byte[0];
                                                                                                        }
                                                                                                        if (hashMap5 != null && hashMap5.containsKey("query")) {
                                                                                                            tLRPC$TL_inputMediaDocument5.query = hashMap5.get("query");
                                                                                                            tLRPC$TL_inputMediaDocument5.flags |= 2;
                                                                                                        }
                                                                                                        tLRPC$TL_inputMediaDocument5.spoiler = z4;
                                                                                                        z14 = false;
                                                                                                        tLRPC$TL_inputMediaDocument3 = tLRPC$TL_inputMediaDocument5;
                                                                                                    }
                                                                                                    delayedMessage9 = new DelayedMessage(j15);
                                                                                                    delayedMessage9.type = 3;
                                                                                                    delayedMessage9.obj = messageObject4;
                                                                                                    delayedMessage9.parentObject = str22;
                                                                                                    delayedMessage9.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument3;
                                                                                                    delayedMessage9.performMediaUpload = z14;
                                                                                                    int i54 = i;
                                                                                                    delayedMessage9.scheduled = i54 != 0;
                                                                                                    tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument3;
                                                                                                    str24 = str60;
                                                                                                    i22 = i54;
                                                                                                } else if (c7 == '\n') {
                                                                                                    ?? tLRPC$TL_inputMediaPoll = new TLRPC$TL_inputMediaPoll();
                                                                                                    TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll4 = tLRPC$TL_messageMediaPoll2;
                                                                                                    tLRPC$TL_inputMediaPoll.poll = tLRPC$TL_messageMediaPoll4.poll;
                                                                                                    if (hashMap5 != null && hashMap5.containsKey("answers")) {
                                                                                                        byte[] hexToBytes = Utilities.hexToBytes(hashMap5.get("answers"));
                                                                                                        if (hexToBytes.length > 0) {
                                                                                                            for (int i55 = 0; i55 < hexToBytes.length; i55++) {
                                                                                                                tLRPC$TL_inputMediaPoll.correct_answers.add(new byte[]{hexToBytes[i55]});
                                                                                                            }
                                                                                                            tLRPC$TL_inputMediaPoll.flags |= 1;
                                                                                                        }
                                                                                                    }
                                                                                                    TLRPC$PollResults tLRPC$PollResults = tLRPC$TL_messageMediaPoll4.results;
                                                                                                    tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaPoll;
                                                                                                    if (tLRPC$PollResults != null) {
                                                                                                        tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaPoll;
                                                                                                        if (!TextUtils.isEmpty(tLRPC$PollResults.solution)) {
                                                                                                            TLRPC$PollResults tLRPC$PollResults2 = tLRPC$TL_messageMediaPoll4.results;
                                                                                                            tLRPC$TL_inputMediaPoll.solution = tLRPC$PollResults2.solution;
                                                                                                            tLRPC$TL_inputMediaPoll.solution_entities = tLRPC$PollResults2.solution_entities;
                                                                                                            tLRPC$TL_inputMediaPoll.flags |= 2;
                                                                                                            tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaPoll;
                                                                                                        }
                                                                                                    }
                                                                                                } else if (c7 == 11) {
                                                                                                    TLRPC$TL_inputMediaDice tLRPC$TL_inputMediaDice3 = new TLRPC$TL_inputMediaDice();
                                                                                                    tLRPC$TL_inputMediaDice3.emoticon = str13;
                                                                                                    tLRPC$TL_inputMediaDice2 = tLRPC$TL_inputMediaDice3;
                                                                                                } else {
                                                                                                    delayedMessage9 = delayedMessage12;
                                                                                                    hashMap7 = hashMap5;
                                                                                                    c9 = c7;
                                                                                                    tLRPC$Message14 = tLRPC$Message17;
                                                                                                    z14 = false;
                                                                                                    tLRPC$TL_inputMediaDice = null;
                                                                                                    str25 = str60;
                                                                                                    i23 = i53;
                                                                                                    str20 = str22;
                                                                                                    j13 = j9;
                                                                                                    tLRPC$InputMedia5 = tLRPC$TL_inputMediaDice;
                                                                                                    sendMessagesHelper11 = str25;
                                                                                                    i28 = i23;
                                                                                                }
                                                                                            }
                                                                                            if (str60 == null && str3 == null) {
                                                                                                c9 = c7;
                                                                                                if (tLRPC$TL_document10.access_hash != 0) {
                                                                                                    tLRPC$TL_inputMediaUploadedDocument = null;
                                                                                                    if (tLRPC$TL_document10.access_hash == 0) {
                                                                                                        z14 = tLRPC$TL_inputMediaUploadedDocument instanceof TLRPC$TL_inputMediaUploadedDocument;
                                                                                                        tLRPC$TL_inputMediaDocument2 = tLRPC$TL_inputMediaUploadedDocument;
                                                                                                    } else {
                                                                                                        tLRPC$TL_inputMediaDocument2 = new TLRPC$TL_inputMediaDocument();
                                                                                                        TLRPC$TL_inputDocument tLRPC$TL_inputDocument3 = new TLRPC$TL_inputDocument();
                                                                                                        tLRPC$TL_inputMediaDocument2.id = tLRPC$TL_inputDocument3;
                                                                                                        tLRPC$TL_inputDocument3.id = tLRPC$TL_document10.id;
                                                                                                        tLRPC$TL_inputDocument3.access_hash = tLRPC$TL_document10.access_hash;
                                                                                                        byte[] bArr7 = tLRPC$TL_document10.file_reference;
                                                                                                        tLRPC$TL_inputDocument3.file_reference = bArr7;
                                                                                                        if (bArr7 == null) {
                                                                                                            tLRPC$TL_inputDocument3.file_reference = new byte[0];
                                                                                                        }
                                                                                                        if (hashMap5 != null && hashMap5.containsKey("query")) {
                                                                                                            tLRPC$TL_inputMediaDocument2.query = hashMap5.get("query");
                                                                                                            tLRPC$TL_inputMediaDocument2.flags |= 2;
                                                                                                        }
                                                                                                        tLRPC$TL_inputMediaDocument2.spoiler = z4;
                                                                                                        z14 = false;
                                                                                                    }
                                                                                                    if (tLRPC$TL_inputMediaUploadedDocument != null) {
                                                                                                        if (delayedMessage12 == null) {
                                                                                                            delayedMessage9 = new DelayedMessage(j15);
                                                                                                            delayedMessage9.type = 2;
                                                                                                            delayedMessage9.obj = messageObject4;
                                                                                                            delayedMessage9.originalPath = str60;
                                                                                                            delayedMessage9.parentObject = str22;
                                                                                                            i25 = i;
                                                                                                            delayedMessage9.scheduled = i25 != 0;
                                                                                                        } else {
                                                                                                            i25 = i;
                                                                                                            delayedMessage9 = delayedMessage12;
                                                                                                        }
                                                                                                        delayedMessage9.inputUploadMedia = tLRPC$TL_inputMediaUploadedDocument;
                                                                                                        delayedMessage9.performMediaUpload = z14;
                                                                                                        i24 = i25;
                                                                                                        if (!tLRPC$TL_document10.thumbs.isEmpty()) {
                                                                                                            TLRPC$PhotoSize tLRPC$PhotoSize4 = tLRPC$TL_document10.thumbs.get(0);
                                                                                                            i24 = i25;
                                                                                                            if (!(tLRPC$PhotoSize4 instanceof TLRPC$TL_photoStrippedSize)) {
                                                                                                                delayedMessage9.photoSize = tLRPC$PhotoSize4;
                                                                                                                delayedMessage9.locationParent = tLRPC$TL_document10;
                                                                                                                i24 = i25;
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        i24 = i;
                                                                                                        delayedMessage9 = delayedMessage12;
                                                                                                    }
                                                                                                    tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument2;
                                                                                                    str24 = str60;
                                                                                                    i22 = i24;
                                                                                                }
                                                                                            } else {
                                                                                                c9 = c7;
                                                                                            }
                                                                                            TLRPC$TL_inputMediaUploadedDocument tLRPC$TL_inputMediaUploadedDocument4 = new TLRPC$TL_inputMediaUploadedDocument();
                                                                                            tLRPC$TL_inputMediaUploadedDocument4.spoiler = z4;
                                                                                            if (i52 != 0) {
                                                                                                try {
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.ttl_seconds = i52;
                                                                                                    tLRPC$Message18 = tLRPC$Message17;
                                                                                                } catch (Exception e29) {
                                                                                                    e = e29;
                                                                                                    tLRPC$Message18 = tLRPC$Message17;
                                                                                                    i4 = i;
                                                                                                    exc = e;
                                                                                                    sendMessagesHelper = sendMessagesHelper7;
                                                                                                    tLRPC$Message = tLRPC$Message18;
                                                                                                    FileLog.e(exc);
                                                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                                    if (messageObject4 != null) {
                                                                                                    }
                                                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                                    return;
                                                                                                }
                                                                                                try {
                                                                                                    tLRPC$Message18.ttl = i52;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.flags |= 2;
                                                                                                } catch (Exception e30) {
                                                                                                    e = e30;
                                                                                                    i4 = i;
                                                                                                    exc = e;
                                                                                                    sendMessagesHelper = sendMessagesHelper7;
                                                                                                    tLRPC$Message = tLRPC$Message18;
                                                                                                    FileLog.e(exc);
                                                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                                    if (messageObject4 != null) {
                                                                                                    }
                                                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                                    return;
                                                                                                }
                                                                                            } else {
                                                                                                tLRPC$Message18 = tLRPC$Message17;
                                                                                            }
                                                                                            if (z9 || (!TextUtils.isEmpty(str3) && str3.toLowerCase().endsWith("mp4") && (hashMap5 == null || hashMap5.containsKey("forceDocument")))) {
                                                                                                try {
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.nosound_video = true;
                                                                                                } catch (Exception e31) {
                                                                                                    e = e31;
                                                                                                    tLRPC$Message20 = tLRPC$Message18;
                                                                                                    tLRPC$InputPeer7 = i;
                                                                                                    exc = e;
                                                                                                    sendMessagesHelper10 = sendMessagesHelper7;
                                                                                                    tLRPC$Message16 = tLRPC$Message20;
                                                                                                    tLRPC$Message = tLRPC$Message16;
                                                                                                    i4 = tLRPC$InputPeer7;
                                                                                                    sendMessagesHelper = sendMessagesHelper10;
                                                                                                    FileLog.e(exc);
                                                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                                    if (messageObject4 != null) {
                                                                                                    }
                                                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                                    return;
                                                                                                }
                                                                                            }
                                                                                            if (hashMap5 != null) {
                                                                                                if (hashMap5.containsKey("forceDocument")) {
                                                                                                    z15 = true;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.force_file = z15;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.mime_type = tLRPC$TL_document10.mime_type;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument4.attributes = tLRPC$TL_document10.attributes;
                                                                                                    tLRPC$TL_inputMediaUploadedDocument = tLRPC$TL_inputMediaUploadedDocument4;
                                                                                                    tLRPC$Message17 = tLRPC$Message18;
                                                                                                    if (tLRPC$TL_document10.access_hash == 0) {
                                                                                                    }
                                                                                                    if (tLRPC$TL_inputMediaUploadedDocument != null) {
                                                                                                    }
                                                                                                    tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument2;
                                                                                                    str24 = str60;
                                                                                                    i22 = i24;
                                                                                                }
                                                                                            }
                                                                                            z15 = false;
                                                                                            tLRPC$TL_inputMediaUploadedDocument4.force_file = z15;
                                                                                            tLRPC$TL_inputMediaUploadedDocument4.mime_type = tLRPC$TL_document10.mime_type;
                                                                                            tLRPC$TL_inputMediaUploadedDocument4.attributes = tLRPC$TL_document10.attributes;
                                                                                            tLRPC$TL_inputMediaUploadedDocument = tLRPC$TL_inputMediaUploadedDocument4;
                                                                                            tLRPC$Message17 = tLRPC$Message18;
                                                                                            if (tLRPC$TL_document10.access_hash == 0) {
                                                                                            }
                                                                                            if (tLRPC$TL_inputMediaUploadedDocument != null) {
                                                                                            }
                                                                                            tLRPC$InputMedia4 = tLRPC$TL_inputMediaDocument2;
                                                                                            str24 = str60;
                                                                                            i22 = i24;
                                                                                        }
                                                                                        delayedMessage9 = delayedMessage12;
                                                                                        hashMap7 = hashMap5;
                                                                                        c9 = c7;
                                                                                        tLRPC$Message14 = tLRPC$Message17;
                                                                                        z14 = false;
                                                                                        tLRPC$TL_inputMediaDice = tLRPC$TL_inputMediaDice2;
                                                                                        str25 = str60;
                                                                                        i23 = i53;
                                                                                        str20 = str22;
                                                                                        j13 = j9;
                                                                                        tLRPC$InputMedia5 = tLRPC$TL_inputMediaDice;
                                                                                        sendMessagesHelper11 = str25;
                                                                                        i28 = i23;
                                                                                    }
                                                                                    hashMap7 = hashMap5;
                                                                                    tLRPC$Message14 = tLRPC$Message17;
                                                                                    tLRPC$TL_inputMediaDice = tLRPC$InputMedia4;
                                                                                    str25 = str24;
                                                                                    i23 = i22;
                                                                                    str20 = str22;
                                                                                    j13 = j9;
                                                                                    tLRPC$InputMedia5 = tLRPC$TL_inputMediaDice;
                                                                                    sendMessagesHelper11 = str25;
                                                                                    i28 = i23;
                                                                                } catch (Exception e32) {
                                                                                    e = e32;
                                                                                }
                                                                            } catch (Exception e33) {
                                                                                exc = e33;
                                                                                sendMessagesHelper10 = sendMessagesHelper7;
                                                                                tLRPC$InputPeer7 = tLRPC$InputPeer4;
                                                                                tLRPC$Message16 = tLRPC$Message20;
                                                                                tLRPC$Message = tLRPC$Message16;
                                                                                i4 = tLRPC$InputPeer7;
                                                                                sendMessagesHelper = sendMessagesHelper10;
                                                                                FileLog.e(exc);
                                                                                getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                                if (messageObject4 != null) {
                                                                                }
                                                                                getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                                sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                                return;
                                                                            }
                                                                        }
                                                                    } catch (Exception e34) {
                                                                        e = e34;
                                                                        exc = e;
                                                                        str19 = str56;
                                                                        tLRPC$InputPeer5 = tLRPC$InputPeer4;
                                                                        sendMessagesHelper8 = sendMessagesHelper7;
                                                                        i26 = tLRPC$InputPeer5;
                                                                        tLRPC$Message19 = str19;
                                                                        i4 = i26;
                                                                        sendMessagesHelper = sendMessagesHelper8;
                                                                        tLRPC$Message = tLRPC$Message19;
                                                                        FileLog.e(exc);
                                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                        if (messageObject4 != null) {
                                                                        }
                                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                        return;
                                                                    }
                                                                } catch (Exception e35) {
                                                                    e = e35;
                                                                    str56 = tLRPC$Message20;
                                                                    exc = e;
                                                                    str19 = str56;
                                                                    tLRPC$InputPeer5 = tLRPC$InputPeer4;
                                                                    sendMessagesHelper8 = sendMessagesHelper7;
                                                                    i26 = tLRPC$InputPeer5;
                                                                    tLRPC$Message19 = str19;
                                                                    i4 = i26;
                                                                    sendMessagesHelper = sendMessagesHelper8;
                                                                    tLRPC$Message = tLRPC$Message19;
                                                                    FileLog.e(exc);
                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                    if (messageObject4 != null) {
                                                                    }
                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                    return;
                                                                }
                                                            }
                                                            try {
                                                                if (j13 != 0) {
                                                                    TLObject tLObject2 = delayedMessage9.sendRequest;
                                                                    if (tLObject2 != null) {
                                                                        tLRPC$TL_messages_sendMedia = (TLRPC$TL_messages_sendMultiMedia) tLObject2;
                                                                    } else {
                                                                        TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia = new TLRPC$TL_messages_sendMultiMedia();
                                                                        tLRPC$TL_messages_sendMultiMedia.peer = tLRPC$InputPeer6;
                                                                        tLRPC$TL_messages_sendMultiMedia.silent = tLRPC$Message14.silent;
                                                                        if (messageObject2 != null) {
                                                                            tLRPC$TL_messages_sendMultiMedia.top_msg_id = messageObject2.getId();
                                                                            tLRPC$TL_messages_sendMultiMedia.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                        }
                                                                        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader5 = tLRPC$Message14.reply_to;
                                                                        if (tLRPC$TL_messageReplyHeader5 != null && (i30 = tLRPC$TL_messageReplyHeader5.reply_to_msg_id) != 0) {
                                                                            tLRPC$TL_messages_sendMultiMedia.flags |= 1;
                                                                            tLRPC$TL_messages_sendMultiMedia.reply_to_msg_id = i30;
                                                                        }
                                                                        if (i28 != 0) {
                                                                            tLRPC$TL_messages_sendMultiMedia.schedule_date = i28;
                                                                            tLRPC$TL_messages_sendMultiMedia.flags |= 1024;
                                                                        }
                                                                        delayedMessage9.sendRequest = tLRPC$TL_messages_sendMultiMedia;
                                                                        tLRPC$TL_messages_sendMedia = tLRPC$TL_messages_sendMultiMedia;
                                                                    }
                                                                    delayedMessage9.messageObjects.add(messageObject4);
                                                                    str26 = str20;
                                                                    delayedMessage9.parentObjects.add(str26);
                                                                    delayedMessage9.locations.add(delayedMessage9.photoSize);
                                                                    delayedMessage9.videoEditedInfos.add(delayedMessage9.videoEditedInfo);
                                                                    delayedMessage9.httpLocations.add(delayedMessage9.httpLocation);
                                                                    delayedMessage9.inputMedias.add(delayedMessage9.inputUploadMedia);
                                                                    delayedMessage9.messages.add(tLRPC$Message14);
                                                                    delayedMessage9.originalPaths.add(sendMessagesHelper11);
                                                                    TLRPC$TL_inputSingleMedia tLRPC$TL_inputSingleMedia = new TLRPC$TL_inputSingleMedia();
                                                                    tLRPC$TL_inputSingleMedia.random_id = tLRPC$Message14.random_id;
                                                                    tLRPC$TL_inputSingleMedia.media = tLRPC$InputMedia5;
                                                                    tLRPC$TL_inputSingleMedia.message = str10;
                                                                    if (arrayList != null && !arrayList.isEmpty()) {
                                                                        tLRPC$TL_inputSingleMedia.entities = arrayList;
                                                                        tLRPC$TL_inputSingleMedia.flags |= 1;
                                                                    }
                                                                    tLRPC$TL_messages_sendMedia.multi_media.add(tLRPC$TL_inputSingleMedia);
                                                                    str27 = sendMessagesHelper11;
                                                                } else {
                                                                    str26 = str20;
                                                                    String str61 = str10;
                                                                    tLRPC$TL_messages_sendMedia = new TLRPC$TL_messages_sendMedia();
                                                                    tLRPC$TL_messages_sendMedia.peer = tLRPC$InputPeer6;
                                                                    tLRPC$TL_messages_sendMedia.silent = tLRPC$Message14.silent;
                                                                    if (messageObject2 != null) {
                                                                        tLRPC$TL_messages_sendMedia.top_msg_id = messageObject2.getId();
                                                                        tLRPC$TL_messages_sendMedia.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                    }
                                                                    TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader6 = tLRPC$Message14.reply_to;
                                                                    if (tLRPC$TL_messageReplyHeader6 != null && (i29 = tLRPC$TL_messageReplyHeader6.reply_to_msg_id) != 0) {
                                                                        tLRPC$TL_messages_sendMedia.flags |= 1;
                                                                        tLRPC$TL_messages_sendMedia.reply_to_msg_id = i29;
                                                                    }
                                                                    str27 = sendMessagesHelper11;
                                                                    tLRPC$TL_messages_sendMedia.random_id = tLRPC$Message14.random_id;
                                                                    sendMessagesHelper11 = sendMessagesHelper11;
                                                                    if (tLRPC$Message14.from_id != null) {
                                                                        MessagesController messagesController = getMessagesController();
                                                                        TLRPC$Peer tLRPC$Peer2 = tLRPC$Message14.from_id;
                                                                        tLRPC$TL_messages_sendMedia.send_as = messagesController.getInputPeer(tLRPC$Peer2);
                                                                        sendMessagesHelper11 = tLRPC$Peer2;
                                                                    }
                                                                    tLRPC$TL_messages_sendMedia.media = tLRPC$InputMedia5;
                                                                    tLRPC$TL_messages_sendMedia.message = str61;
                                                                    if (arrayList != null && !arrayList.isEmpty()) {
                                                                        tLRPC$TL_messages_sendMedia.entities = arrayList;
                                                                        tLRPC$TL_messages_sendMedia.flags |= 8;
                                                                    }
                                                                    if (i28 != 0) {
                                                                        tLRPC$TL_messages_sendMedia.schedule_date = i28;
                                                                        tLRPC$TL_messages_sendMedia.flags |= 1024;
                                                                    }
                                                                    if (z3 && SharedConfig.updateStickersOrderOnSend) {
                                                                        tLRPC$TL_messages_sendMedia.update_stickersets_order = true;
                                                                    }
                                                                    if (delayedMessage9 != null) {
                                                                        delayedMessage9.sendRequest = tLRPC$TL_messages_sendMedia;
                                                                    }
                                                                }
                                                                try {
                                                                    if (j13 != 0) {
                                                                        SendMessagesHelper sendMessagesHelper16 = this;
                                                                        sendMessagesHelper16.performSendDelayedMessage(delayedMessage9);
                                                                        sendMessagesHelper11 = sendMessagesHelper16;
                                                                    } else {
                                                                        SendMessagesHelper sendMessagesHelper17 = this;
                                                                        char c16 = c9;
                                                                        if (c16 == 1) {
                                                                            performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, null, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                            sendMessagesHelper11 = sendMessagesHelper17;
                                                                        } else if (c16 == 2) {
                                                                            if (z14) {
                                                                                sendMessagesHelper17.performSendDelayedMessage(delayedMessage9);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            } else {
                                                                                performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, null, true, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            }
                                                                        } else if (c16 == 3) {
                                                                            if (z14) {
                                                                                sendMessagesHelper17.performSendDelayedMessage(delayedMessage9);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            } else {
                                                                                performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            }
                                                                        } else if (c16 == 6) {
                                                                            performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                            sendMessagesHelper11 = sendMessagesHelper17;
                                                                        } else if (c16 == 7) {
                                                                            if (z14 && delayedMessage9 != null) {
                                                                                sendMessagesHelper17.performSendDelayedMessage(delayedMessage9);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            } else {
                                                                                performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            }
                                                                        } else if (c16 == '\b') {
                                                                            if (z14) {
                                                                                sendMessagesHelper17.performSendDelayedMessage(delayedMessage9);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            } else {
                                                                                performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                                sendMessagesHelper11 = sendMessagesHelper17;
                                                                            }
                                                                        } else if (c16 != '\n' && c16 != 11) {
                                                                            return;
                                                                        } else {
                                                                            performSendMessageRequest(tLRPC$TL_messages_sendMedia, messageObject4, str27, delayedMessage9, str26, hashMap7, i28 != 0);
                                                                            sendMessagesHelper11 = sendMessagesHelper17;
                                                                        }
                                                                    }
                                                                    return;
                                                                } catch (Exception e36) {
                                                                    e = e36;
                                                                    sendMessagesHelper9 = sendMessagesHelper11;
                                                                    i27 = i28;
                                                                    exc = e;
                                                                    tLRPC$Message19 = tLRPC$Message14;
                                                                    sendMessagesHelper8 = sendMessagesHelper9;
                                                                    i26 = i27;
                                                                    i4 = i26;
                                                                    sendMessagesHelper = sendMessagesHelper8;
                                                                    tLRPC$Message = tLRPC$Message19;
                                                                    FileLog.e(exc);
                                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                                    if (messageObject4 != null) {
                                                                    }
                                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                                    return;
                                                                }
                                                            } catch (Exception e37) {
                                                                e = e37;
                                                                sendMessagesHelper9 = this;
                                                                i27 = i28;
                                                            }
                                                        }
                                                        FileLog.e(exc);
                                                        getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                        if (messageObject4 != null) {
                                                            messageObject4.messageOwner.send_state = 2;
                                                        }
                                                        getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                        sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                        return;
                                                    }
                                                    if ((c7 >= 5 || c7 > '\b') && ((c7 != '\t' || tLRPC$EncryptedChat == null) && c7 != '\n' && c7 != 11)) {
                                                        if (c7 != 4) {
                                                            TLRPC$TL_messages_forwardMessages tLRPC$TL_messages_forwardMessages = new TLRPC$TL_messages_forwardMessages();
                                                            tLRPC$TL_messages_forwardMessages.to_peer = tLRPC$InputPeer4;
                                                            tLRPC$TL_messages_forwardMessages.with_my_score = messageObject3.messageOwner.with_my_score;
                                                            if (r7 != 0) {
                                                                tLRPC$TL_messages_forwardMessages.top_msg_id = messageObject2.getId();
                                                                tLRPC$TL_messages_forwardMessages.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                            }
                                                            if (hashMap5 != null && hashMap5.containsKey("fwd_id")) {
                                                                int intValue = Utilities.parseInt((CharSequence) hashMap5.get("fwd_id")).intValue();
                                                                tLRPC$TL_messages_forwardMessages.drop_author = true;
                                                                long longValue2 = Utilities.parseLong(hashMap5.get("fwd_peer")).longValue();
                                                                if (longValue2 < 0) {
                                                                    TLRPC$Chat chat2 = getMessagesController().getChat(Long.valueOf(-longValue2));
                                                                    if (ChatObject.isChannel(chat2)) {
                                                                        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                                                                        tLRPC$TL_messages_forwardMessages.from_peer = tLRPC$TL_inputPeerChannel;
                                                                        tLRPC$TL_inputPeerChannel.channel_id = chat2.id;
                                                                        tLRPC$TL_inputPeerChannel.access_hash = chat2.access_hash;
                                                                    } else {
                                                                        tLRPC$TL_messages_forwardMessages.from_peer = new TLRPC$TL_inputPeerEmpty();
                                                                    }
                                                                } else {
                                                                    tLRPC$TL_messages_forwardMessages.from_peer = new TLRPC$TL_inputPeerEmpty();
                                                                }
                                                                tLRPC$TL_messages_forwardMessages.id.add(Integer.valueOf(intValue));
                                                            } else {
                                                                tLRPC$TL_messages_forwardMessages.from_peer = new TLRPC$TL_inputPeerEmpty();
                                                            }
                                                            tLRPC$TL_messages_forwardMessages.silent = tLRPC$Message3.silent;
                                                            if (i != 0) {
                                                                tLRPC$TL_messages_forwardMessages.schedule_date = i;
                                                                tLRPC$TL_messages_forwardMessages.flags |= 1024;
                                                            }
                                                            tLRPC$TL_messages_forwardMessages.random_id.add(Long.valueOf(tLRPC$Message3.random_id));
                                                            if (messageObject3.getId() >= 0) {
                                                                tLRPC$TL_messages_forwardMessages.id.add(Integer.valueOf(messageObject3.getId()));
                                                            } else {
                                                                TLRPC$Message tLRPC$Message25 = messageObject3.messageOwner;
                                                                int i56 = tLRPC$Message25.fwd_msg_id;
                                                                if (i56 != 0) {
                                                                    tLRPC$TL_messages_forwardMessages.id.add(Integer.valueOf(i56));
                                                                } else {
                                                                    TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message25.fwd_from;
                                                                    if (tLRPC$MessageFwdHeader != null) {
                                                                        tLRPC$TL_messages_forwardMessages.id.add(Integer.valueOf(tLRPC$MessageFwdHeader.channel_post));
                                                                    }
                                                                }
                                                            }
                                                            performSendMessageRequest(tLRPC$TL_messages_forwardMessages, messageObject4, null, null, str11, hashMap5, i != 0);
                                                        } else if (c7 == '\t') {
                                                            TLRPC$TL_messages_sendInlineBotResult tLRPC$TL_messages_sendInlineBotResult = new TLRPC$TL_messages_sendInlineBotResult();
                                                            tLRPC$TL_messages_sendInlineBotResult.peer = tLRPC$InputPeer4;
                                                            tLRPC$TL_messages_sendInlineBotResult.random_id = tLRPC$Message3.random_id;
                                                            if (r7 != 0) {
                                                                tLRPC$TL_messages_sendInlineBotResult.top_msg_id = messageObject2.getId();
                                                                tLRPC$TL_messages_sendInlineBotResult.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                            }
                                                            if (tLRPC$Message3.from_id != null) {
                                                                tLRPC$TL_messages_sendInlineBotResult.send_as = getMessagesController().getInputPeer(tLRPC$Message3.from_id);
                                                            }
                                                            tLRPC$TL_messages_sendInlineBotResult.hide_via = !hashMap5.containsKey(obj5);
                                                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader7 = tLRPC$Message3.reply_to;
                                                            if (tLRPC$TL_messageReplyHeader7 != null && (i13 = tLRPC$TL_messageReplyHeader7.reply_to_msg_id) != 0) {
                                                                tLRPC$TL_messages_sendInlineBotResult.flags |= 1;
                                                                tLRPC$TL_messages_sendInlineBotResult.reply_to_msg_id = i13;
                                                            }
                                                            tLRPC$TL_messages_sendInlineBotResult.silent = tLRPC$Message3.silent;
                                                            if (i != 0) {
                                                                tLRPC$TL_messages_sendInlineBotResult.schedule_date = i;
                                                                tLRPC$TL_messages_sendInlineBotResult.flags |= 1024;
                                                            }
                                                            tLRPC$TL_messages_sendInlineBotResult.query_id = Utilities.parseLong(hashMap5.get(obj3)).longValue();
                                                            tLRPC$TL_messages_sendInlineBotResult.id = hashMap5.get("id");
                                                            if (messageObject3 == null) {
                                                                tLRPC$TL_messages_sendInlineBotResult.clear_draft = true;
                                                                getMediaDataController().cleanDraft(j15, r7 != 0 ? messageObject2.getId() : 0, false);
                                                            }
                                                            performSendMessageRequest(tLRPC$TL_messages_sendInlineBotResult, messageObject4, null, null, str11, hashMap5, i != 0);
                                                        }
                                                        return;
                                                    }
                                                    if (tLRPC$EncryptedChat == null) {
                                                    }
                                                    FileLog.e(exc);
                                                    getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                                    if (messageObject4 != null) {
                                                    }
                                                    getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                                    sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                                    return;
                                                }
                                                String str62 = str13;
                                                String str63 = str11;
                                                long j22 = j15;
                                                HashMap<String, String> hashMap10 = hashMap5;
                                                TLRPC$InputPeer tLRPC$InputPeer11 = tLRPC$InputPeer4;
                                                TLRPC$Message tLRPC$Message26 = tLRPC$Message3;
                                                Object obj12 = obj4;
                                                if (tLRPC$EncryptedChat == null) {
                                                    TLRPC$TL_messages_sendMessage tLRPC$TL_messages_sendMessage = new TLRPC$TL_messages_sendMessage();
                                                    tLRPC$TL_messages_sendMessage.message = str62;
                                                    tLRPC$TL_messages_sendMessage.clear_draft = messageObject3 == null;
                                                    tLRPC$TL_messages_sendMessage.silent = tLRPC$Message26.silent;
                                                    tLRPC$TL_messages_sendMessage.peer = tLRPC$InputPeer11;
                                                    tLRPC$TL_messages_sendMessage.random_id = tLRPC$Message26.random_id;
                                                    if (messageObject2 != null) {
                                                        tLRPC$TL_messages_sendMessage.top_msg_id = messageObject2.getId();
                                                        tLRPC$TL_messages_sendMessage.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                    }
                                                    if (z3 && SharedConfig.updateStickersOrderOnSend) {
                                                        tLRPC$TL_messages_sendMessage.update_stickersets_order = true;
                                                    }
                                                    if (tLRPC$Message26.from_id != null) {
                                                        tLRPC$TL_messages_sendMessage.send_as = getMessagesController().getInputPeer(tLRPC$Message26.from_id);
                                                    }
                                                    TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader8 = tLRPC$Message26.reply_to;
                                                    if (tLRPC$TL_messageReplyHeader8 != null && (i12 = tLRPC$TL_messageReplyHeader8.reply_to_msg_id) != 0) {
                                                        tLRPC$TL_messages_sendMessage.flags |= 1;
                                                        tLRPC$TL_messages_sendMessage.reply_to_msg_id = i12;
                                                    }
                                                    if (!z) {
                                                        tLRPC$TL_messages_sendMessage.no_webpage = true;
                                                    }
                                                    if (arrayList != null && !arrayList.isEmpty()) {
                                                        tLRPC$TL_messages_sendMessage.entities = arrayList;
                                                        tLRPC$TL_messages_sendMessage.flags |= 8;
                                                    }
                                                    if (i != 0) {
                                                        tLRPC$TL_messages_sendMessage.schedule_date = i;
                                                        tLRPC$TL_messages_sendMessage.flags |= 1024;
                                                    }
                                                    performSendMessageRequest(tLRPC$TL_messages_sendMessage, messageObject4, null, null, str63, hashMap10, i != 0);
                                                    if (messageObject3 == null) {
                                                        getMediaDataController().cleanDraft(j22, messageObject2 != null ? messageObject2.getId() : 0, false);
                                                        return;
                                                    }
                                                    return;
                                                }
                                                TLRPC$TL_decryptedMessage tLRPC$TL_decryptedMessage2 = new TLRPC$TL_decryptedMessage();
                                                tLRPC$TL_decryptedMessage2.ttl = tLRPC$Message26.ttl;
                                                if (arrayList != null && !arrayList.isEmpty()) {
                                                    tLRPC$TL_decryptedMessage2.entities = arrayList;
                                                    tLRPC$TL_decryptedMessage2.flags |= 128;
                                                }
                                                TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader9 = tLRPC$Message26.reply_to;
                                                if (tLRPC$TL_messageReplyHeader9 != null) {
                                                    long j23 = tLRPC$TL_messageReplyHeader9.reply_to_random_id;
                                                    if (j23 != 0) {
                                                        tLRPC$TL_decryptedMessage2.reply_to_random_id = j23;
                                                        tLRPC$TL_decryptedMessage2.flags |= 8;
                                                    }
                                                }
                                                if (hashMap10 != null && hashMap10.get(obj12) != null) {
                                                    tLRPC$TL_decryptedMessage2.via_bot_name = hashMap10.get(obj12);
                                                    tLRPC$TL_decryptedMessage2.flags |= LiteMode.FLAG_AUTOPLAY_GIFS;
                                                }
                                                tLRPC$TL_decryptedMessage2.silent = tLRPC$Message26.silent;
                                                tLRPC$TL_decryptedMessage2.random_id = tLRPC$Message26.random_id;
                                                tLRPC$TL_decryptedMessage2.message = str62;
                                                TLRPC$WebPage tLRPC$WebPage5 = tLRPC$WebPage4;
                                                if (tLRPC$WebPage5 != null && tLRPC$WebPage5.url != null) {
                                                    TLRPC$TL_decryptedMessageMediaWebPage tLRPC$TL_decryptedMessageMediaWebPage = new TLRPC$TL_decryptedMessageMediaWebPage();
                                                    tLRPC$TL_decryptedMessage2.media = tLRPC$TL_decryptedMessageMediaWebPage;
                                                    tLRPC$TL_decryptedMessageMediaWebPage.url = tLRPC$WebPage5.url;
                                                    tLRPC$TL_decryptedMessage2.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                } else {
                                                    tLRPC$TL_decryptedMessage2.media = new TLRPC$TL_decryptedMessageMediaEmpty();
                                                }
                                                getSecretChatHelper().performSendEncryptedRequest(tLRPC$TL_decryptedMessage2, messageObject4.messageOwner, tLRPC$EncryptedChat, null, null, messageObject4);
                                                if (messageObject3 == null) {
                                                    getMediaDataController().cleanDraft(j22, messageObject2 != null ? messageObject2.getId() : 0, false);
                                                    return;
                                                }
                                                return;
                                            }
                                        } else {
                                            j7 = 0;
                                        }
                                        z12 = false;
                                        j8 = j7;
                                        messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r7 == 0 && r7 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
                                        messageObject4.sendAnimationData = sendAnimationData;
                                        messageObject4.wasJustSent = true;
                                        messageObject4.scheduled = i != 0;
                                        if (messageObject4.isForwarded()) {
                                        }
                                        videoEditedInfo2 = messageObject4.videoEditedInfo;
                                        if (videoEditedInfo2 != null) {
                                        }
                                        videoEditedInfo2 = videoEditedInfo;
                                        if (j8 == 0) {
                                        }
                                        if (BuildVars.LOGS_ENABLED) {
                                        }
                                        j9 = j8;
                                        tLRPC$InputPeer4 = tLRPC$InputPeer3;
                                        tLRPC$Message6 = tLRPC$Message5;
                                        str14 = j8;
                                        if (c7 != 0) {
                                            if (c7 >= 1) {
                                            }
                                            if (c7 >= 5) {
                                            }
                                            if (c7 != 4) {
                                            }
                                            return;
                                        }
                                        String str622 = str13;
                                        String str632 = str11;
                                        long j222 = j15;
                                        HashMap<String, String> hashMap102 = hashMap5;
                                        TLRPC$InputPeer tLRPC$InputPeer112 = tLRPC$InputPeer4;
                                        TLRPC$Message tLRPC$Message262 = tLRPC$Message3;
                                        Object obj122 = obj4;
                                        if (tLRPC$EncryptedChat == null) {
                                        }
                                    }
                                } else {
                                    tLRPC$InputPeer3 = tLRPC$InputPeer2;
                                }
                                tLRPC$Message3.flags |= 8;
                                tLRPC$TL_messageReplyHeader.reply_to_msg_id = messageObject.getId();
                                if (r7 == 0) {
                                }
                                if (messageObject.isTopicMainMessage) {
                                }
                                if (j2 != 0) {
                                }
                                if (tLRPC$ReplyMarkup != null) {
                                    tLRPC$Message3.flags |= 64;
                                    tLRPC$Message3.reply_markup = tLRPC$ReplyMarkup;
                                    str28 = hashMap5.get("bot");
                                    if (str28 != null) {
                                    }
                                }
                                if (DialogObject.isEncryptedDialog(j)) {
                                }
                                if (!MessageObject.isVoiceMessage(tLRPC$Message3)) {
                                }
                                tLRPC$Message3.media_unread = true;
                                if (tLRPC$Message3.from_id == null) {
                                }
                                tLRPC$Message3.send_state = 1;
                                if (hashMap5 == null) {
                                }
                                z12 = false;
                                j8 = j7;
                                messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r7 == 0 && r7 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
                                messageObject4.sendAnimationData = sendAnimationData;
                                messageObject4.wasJustSent = true;
                                messageObject4.scheduled = i != 0;
                                if (messageObject4.isForwarded()) {
                                }
                                videoEditedInfo2 = messageObject4.videoEditedInfo;
                                if (videoEditedInfo2 != null) {
                                }
                                videoEditedInfo2 = videoEditedInfo;
                                if (j8 == 0) {
                                }
                                if (BuildVars.LOGS_ENABLED) {
                                }
                                j9 = j8;
                                tLRPC$InputPeer4 = tLRPC$InputPeer3;
                                tLRPC$Message6 = tLRPC$Message5;
                                str14 = j8;
                                if (c7 != 0) {
                                }
                                String str6222 = str13;
                                String str6322 = str11;
                                long j2222 = j15;
                                HashMap<String, String> hashMap1022 = hashMap5;
                                TLRPC$InputPeer tLRPC$InputPeer1122 = tLRPC$InputPeer4;
                                TLRPC$Message tLRPC$Message2622 = tLRPC$Message3;
                                Object obj1222 = obj4;
                                if (tLRPC$EncryptedChat == null) {
                                }
                            }
                            tLRPC$InputPeer3 = tLRPC$InputPeer2;
                            if (j2 != 0) {
                            }
                            if (tLRPC$ReplyMarkup != null) {
                            }
                            if (DialogObject.isEncryptedDialog(j)) {
                            }
                            if (!MessageObject.isVoiceMessage(tLRPC$Message3)) {
                            }
                            tLRPC$Message3.media_unread = true;
                            if (tLRPC$Message3.from_id == null) {
                            }
                            tLRPC$Message3.send_state = 1;
                            if (hashMap5 == null) {
                            }
                            z12 = false;
                            j8 = j7;
                            messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r7 == 0 && r7 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
                            messageObject4.sendAnimationData = sendAnimationData;
                            messageObject4.wasJustSent = true;
                            messageObject4.scheduled = i != 0;
                            if (messageObject4.isForwarded()) {
                            }
                            videoEditedInfo2 = messageObject4.videoEditedInfo;
                            if (videoEditedInfo2 != null) {
                            }
                            videoEditedInfo2 = videoEditedInfo;
                            if (j8 == 0) {
                            }
                            if (BuildVars.LOGS_ENABLED) {
                            }
                            j9 = j8;
                            tLRPC$InputPeer4 = tLRPC$InputPeer3;
                            tLRPC$Message6 = tLRPC$Message5;
                            str14 = j8;
                            if (c7 != 0) {
                            }
                            String str62222 = str13;
                            String str63222 = str11;
                            long j22222 = j15;
                            HashMap<String, String> hashMap10222 = hashMap5;
                            TLRPC$InputPeer tLRPC$InputPeer11222 = tLRPC$InputPeer4;
                            TLRPC$Message tLRPC$Message26222 = tLRPC$Message3;
                            Object obj12222 = obj4;
                            if (tLRPC$EncryptedChat == null) {
                            }
                        }
                    } else {
                        obj4 = "bot_name";
                    }
                    i3 = i;
                    if (i3 != 0) {
                        currentTime = i3;
                    } else {
                        try {
                            currentTime = getConnectionsManager().getCurrentTime();
                        } catch (Exception e38) {
                            e = e38;
                            sendMessagesHelper2 = sendMessagesHelper7;
                            exc = e;
                            tLRPC$Message2 = tLRPC$Message3;
                            messageObject4 = null;
                            i4 = i3;
                            sendMessagesHelper = sendMessagesHelper2;
                            tLRPC$Message = tLRPC$Message2;
                            FileLog.e(exc);
                            getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                            if (messageObject4 != null) {
                            }
                            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                            sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                            return;
                        }
                    }
                    tLRPC$Message3.date = currentTime;
                    if (tLRPC$InputPeer2 instanceof TLRPC$TL_inputPeerChannel) {
                        if (i3 == 0 && z5) {
                            try {
                                tLRPC$Message3.views = 1;
                                tLRPC$Message3.flags |= 1024;
                            } catch (Exception e39) {
                                e = e39;
                                exc = e;
                                sendMessagesHelper6 = sendMessagesHelper7;
                                sendMessagesHelper2 = sendMessagesHelper6;
                                tLRPC$Message2 = tLRPC$Message3;
                                messageObject4 = null;
                                i4 = i3;
                                sendMessagesHelper = sendMessagesHelper2;
                                tLRPC$Message = tLRPC$Message2;
                                FileLog.e(exc);
                                getMessagesStorage().markMessageAsSendError(tLRPC$Message, i4 != 0);
                                if (messageObject4 != null) {
                                }
                                getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
                                sendMessagesHelper.processSentMessage(tLRPC$Message.id);
                                return;
                            }
                        }
                        str13 = str9;
                        i6 = i5;
                        TLRPC$Chat chat3 = getMessagesController().getChat(Long.valueOf(tLRPC$InputPeer2.channel_id));
                        if (chat3 != null) {
                            if (chat3.megagroup) {
                                tLRPC$Message3.unread = true;
                            } else {
                                tLRPC$Message3.post = true;
                                if (chat3.signatures) {
                                    TLRPC$TL_peerUser tLRPC$TL_peerUser3 = new TLRPC$TL_peerUser();
                                    tLRPC$Message3.from_id = tLRPC$TL_peerUser3;
                                    tLRPC$TL_peerUser3.user_id = j17;
                                }
                            }
                        }
                    } else {
                        str13 = str9;
                        i6 = i5;
                        tLRPC$Message3.unread = true;
                    }
                    tLRPC$Message3.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                    tLRPC$Message3.dialog_id = j15;
                    ?? r72 = messageObject2;
                    if (messageObject != null) {
                    }
                    tLRPC$InputPeer3 = tLRPC$InputPeer2;
                    if (j2 != 0) {
                    }
                    if (tLRPC$ReplyMarkup != null) {
                    }
                    if (DialogObject.isEncryptedDialog(j)) {
                    }
                    if (!MessageObject.isVoiceMessage(tLRPC$Message3)) {
                    }
                    tLRPC$Message3.media_unread = true;
                    if (tLRPC$Message3.from_id == null) {
                    }
                    tLRPC$Message3.send_state = 1;
                    if (hashMap5 == null) {
                    }
                    z12 = false;
                    j8 = j7;
                    messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r72 == 0 && r72 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
                    messageObject4.sendAnimationData = sendAnimationData;
                    messageObject4.wasJustSent = true;
                    messageObject4.scheduled = i != 0;
                    if (messageObject4.isForwarded()) {
                    }
                    videoEditedInfo2 = messageObject4.videoEditedInfo;
                    if (videoEditedInfo2 != null) {
                    }
                    videoEditedInfo2 = videoEditedInfo;
                    if (j8 == 0) {
                    }
                    if (BuildVars.LOGS_ENABLED) {
                    }
                    j9 = j8;
                    tLRPC$InputPeer4 = tLRPC$InputPeer3;
                    tLRPC$Message6 = tLRPC$Message5;
                    str14 = j8;
                    if (c7 != 0) {
                    }
                    String str622222 = str13;
                    String str632222 = str11;
                    long j222222 = j15;
                    HashMap<String, String> hashMap102222 = hashMap5;
                    TLRPC$InputPeer tLRPC$InputPeer112222 = tLRPC$InputPeer4;
                    TLRPC$Message tLRPC$Message262222 = tLRPC$Message3;
                    Object obj122222 = obj4;
                    if (tLRPC$EncryptedChat == null) {
                    }
                }
            }
            z11 = true;
            tLRPC$Message3.silent = z11;
            c7 = c5;
            if (tLRPC$Message3.random_id == 0) {
            }
            if (hashMap5 == null) {
            }
            str12 = str5;
            tLRPC$Message3.params = hashMap5;
            String str502 = str12;
            long j172 = j6;
            if (messageObject3 != null) {
            }
            i3 = i;
            if (i3 != 0) {
            }
            tLRPC$Message3.date = currentTime;
            if (tLRPC$InputPeer2 instanceof TLRPC$TL_inputPeerChannel) {
            }
            tLRPC$Message3.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
            tLRPC$Message3.dialog_id = j15;
            ?? r722 = messageObject2;
            if (messageObject != null) {
            }
            tLRPC$InputPeer3 = tLRPC$InputPeer2;
            if (j2 != 0) {
            }
            if (tLRPC$ReplyMarkup != null) {
            }
            if (DialogObject.isEncryptedDialog(j)) {
            }
            if (!MessageObject.isVoiceMessage(tLRPC$Message3)) {
            }
            tLRPC$Message3.media_unread = true;
            if (tLRPC$Message3.from_id == null) {
            }
            tLRPC$Message3.send_state = 1;
            if (hashMap5 == null) {
            }
            z12 = false;
            j8 = j7;
            messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r722 == 0 && r722 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
            messageObject4.sendAnimationData = sendAnimationData;
            messageObject4.wasJustSent = true;
            messageObject4.scheduled = i != 0;
            if (messageObject4.isForwarded()) {
            }
            videoEditedInfo2 = messageObject4.videoEditedInfo;
            if (videoEditedInfo2 != null) {
            }
            videoEditedInfo2 = videoEditedInfo;
            if (j8 == 0) {
            }
            if (BuildVars.LOGS_ENABLED) {
            }
            j9 = j8;
            tLRPC$InputPeer4 = tLRPC$InputPeer3;
            tLRPC$Message6 = tLRPC$Message5;
            str14 = j8;
            if (c7 != 0) {
            }
            String str6222222 = str13;
            String str6322222 = str11;
            long j2222222 = j15;
            HashMap<String, String> hashMap1022222 = hashMap5;
            TLRPC$InputPeer tLRPC$InputPeer1122222 = tLRPC$InputPeer4;
            TLRPC$Message tLRPC$Message2622222 = tLRPC$Message3;
            Object obj1222222 = obj4;
            if (tLRPC$EncryptedChat == null) {
            }
        } else {
            j2 = 0;
            tLRPC$EncryptedChat = null;
        }
        peer = null;
        z5 = false;
        TLRPC$Peer tLRPC$Peer3 = peer;
        if (messageObject3 == null) {
        }
        if (z10) {
        }
        z11 = true;
        tLRPC$Message3.silent = z11;
        c7 = c5;
        if (tLRPC$Message3.random_id == 0) {
        }
        if (hashMap5 == null) {
        }
        str12 = str5;
        tLRPC$Message3.params = hashMap5;
        String str5022 = str12;
        long j1722 = j6;
        if (messageObject3 != null) {
        }
        i3 = i;
        if (i3 != 0) {
        }
        tLRPC$Message3.date = currentTime;
        if (tLRPC$InputPeer2 instanceof TLRPC$TL_inputPeerChannel) {
        }
        tLRPC$Message3.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
        tLRPC$Message3.dialog_id = j15;
        ?? r7222 = messageObject2;
        if (messageObject != null) {
        }
        tLRPC$InputPeer3 = tLRPC$InputPeer2;
        if (j2 != 0) {
        }
        if (tLRPC$ReplyMarkup != null) {
        }
        if (DialogObject.isEncryptedDialog(j)) {
        }
        if (!MessageObject.isVoiceMessage(tLRPC$Message3)) {
        }
        tLRPC$Message3.media_unread = true;
        if (tLRPC$Message3.from_id == null) {
        }
        tLRPC$Message3.send_state = 1;
        if (hashMap5 == null) {
        }
        z12 = false;
        j8 = j7;
        messageObject4 = new MessageObject(sendMessagesHelper7.currentAccount, tLRPC$Message3, (r7222 == 0 && r7222 == messageObject && messageObject2.getId() == 1) ? null : messageObject, true, true);
        messageObject4.sendAnimationData = sendAnimationData;
        messageObject4.wasJustSent = true;
        messageObject4.scheduled = i != 0;
        if (messageObject4.isForwarded()) {
        }
        videoEditedInfo2 = messageObject4.videoEditedInfo;
        if (videoEditedInfo2 != null) {
        }
        videoEditedInfo2 = videoEditedInfo;
        if (j8 == 0) {
        }
        if (BuildVars.LOGS_ENABLED) {
        }
        j9 = j8;
        tLRPC$InputPeer4 = tLRPC$InputPeer3;
        tLRPC$Message6 = tLRPC$Message5;
        str14 = j8;
        if (c7 != 0) {
        }
        String str62222222 = str13;
        String str63222222 = str11;
        long j22222222 = j15;
        HashMap<String, String> hashMap10222222 = hashMap5;
        TLRPC$InputPeer tLRPC$InputPeer11222222 = tLRPC$InputPeer4;
        TLRPC$Message tLRPC$Message26222222 = tLRPC$Message3;
        Object obj12222222 = obj4;
        if (tLRPC$EncryptedChat == null) {
        }
    }

    private void performSendDelayedMessage(DelayedMessage delayedMessage) {
        performSendDelayedMessage(delayedMessage, -1);
    }

    private TLRPC$PhotoSize getThumbForSecretChat(ArrayList<TLRPC$PhotoSize> arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$PhotoSize tLRPC$PhotoSize = arrayList.get(i);
                if (tLRPC$PhotoSize != null && !(tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) && !(tLRPC$PhotoSize instanceof TLRPC$TL_photoPathSize) && !(tLRPC$PhotoSize instanceof TLRPC$TL_photoSizeEmpty) && tLRPC$PhotoSize.location != null) {
                    TLRPC$TL_photoSize_layer127 tLRPC$TL_photoSize_layer127 = new TLRPC$TL_photoSize_layer127();
                    tLRPC$TL_photoSize_layer127.type = tLRPC$PhotoSize.type;
                    tLRPC$TL_photoSize_layer127.w = tLRPC$PhotoSize.w;
                    tLRPC$TL_photoSize_layer127.h = tLRPC$PhotoSize.h;
                    tLRPC$TL_photoSize_layer127.size = tLRPC$PhotoSize.size;
                    byte[] bArr = tLRPC$PhotoSize.bytes;
                    tLRPC$TL_photoSize_layer127.bytes = bArr;
                    if (bArr == null) {
                        tLRPC$TL_photoSize_layer127.bytes = new byte[0];
                    }
                    TLRPC$TL_fileLocation_layer82 tLRPC$TL_fileLocation_layer82 = new TLRPC$TL_fileLocation_layer82();
                    tLRPC$TL_photoSize_layer127.location = tLRPC$TL_fileLocation_layer82;
                    TLRPC$FileLocation tLRPC$FileLocation = tLRPC$PhotoSize.location;
                    tLRPC$TL_fileLocation_layer82.dc_id = tLRPC$FileLocation.dc_id;
                    tLRPC$TL_fileLocation_layer82.volume_id = tLRPC$FileLocation.volume_id;
                    tLRPC$TL_fileLocation_layer82.local_id = tLRPC$FileLocation.local_id;
                    tLRPC$TL_fileLocation_layer82.secret = tLRPC$FileLocation.secret;
                    return tLRPC$TL_photoSize_layer127;
                }
            }
        }
        return null;
    }

    private void performSendDelayedMessage(final DelayedMessage delayedMessage, int i) {
        boolean z;
        TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile;
        boolean z2;
        MessageObject messageObject;
        TLRPC$InputMedia tLRPC$InputMedia;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLRPC$InputMedia tLRPC$InputMedia2;
        TLRPC$InputMedia tLRPC$InputMedia3;
        int i2 = delayedMessage.type;
        if (i2 == 0) {
            String str = delayedMessage.httpLocation;
            if (str != null) {
                putToDelayedMessages(str, delayedMessage);
                ImageLoader.getInstance().loadHttpFile(delayedMessage.httpLocation, "file", this.currentAccount);
            } else if (delayedMessage.sendRequest != null) {
                String file = FileLoader.getInstance(this.currentAccount).getPathToAttach(delayedMessage.photoSize).toString();
                putToDelayedMessages(file, delayedMessage);
                getFileLoader().uploadFile(file, false, true, ConnectionsManager.FileTypePhoto);
                putToUploadingMessages(delayedMessage.obj);
            } else {
                String file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(delayedMessage.photoSize).toString();
                if (delayedMessage.sendEncryptedRequest != null && delayedMessage.photoSize.location.dc_id != 0) {
                    File file3 = new File(file2);
                    if (!file3.exists()) {
                        file2 = FileLoader.getInstance(this.currentAccount).getPathToAttach(delayedMessage.photoSize, true).toString();
                        file3 = new File(file2);
                    }
                    if (!file3.exists()) {
                        putToDelayedMessages(FileLoader.getAttachFileName(delayedMessage.photoSize), delayedMessage);
                        getFileLoader().loadFile(ImageLocation.getForObject(delayedMessage.photoSize, delayedMessage.locationParent), delayedMessage.parentObject, "jpg", 3, 0);
                        return;
                    }
                }
                putToDelayedMessages(file2, delayedMessage);
                getFileLoader().uploadFile(file2, true, true, ConnectionsManager.FileTypePhoto);
                putToUploadingMessages(delayedMessage.obj);
            }
        } else if (i2 == 1) {
            VideoEditedInfo videoEditedInfo = delayedMessage.videoEditedInfo;
            if (videoEditedInfo != null && videoEditedInfo.needConvert()) {
                MessageObject messageObject2 = delayedMessage.obj;
                String str2 = messageObject2.messageOwner.attachPath;
                TLRPC$Document document = messageObject2.getDocument();
                if (str2 == null) {
                    str2 = FileLoader.getDirectory(4) + "/" + document.id + ".mp4";
                }
                putToDelayedMessages(str2, delayedMessage);
                MediaController.getInstance().scheduleVideoConvert(delayedMessage.obj);
                putToUploadingMessages(delayedMessage.obj);
                return;
            }
            VideoEditedInfo videoEditedInfo2 = delayedMessage.videoEditedInfo;
            if (videoEditedInfo2 != null) {
                TLRPC$InputFile tLRPC$InputFile = videoEditedInfo2.file;
                if (tLRPC$InputFile != null) {
                    TLObject tLObject = delayedMessage.sendRequest;
                    if (tLObject instanceof TLRPC$TL_messages_sendMedia) {
                        tLRPC$InputMedia3 = ((TLRPC$TL_messages_sendMedia) tLObject).media;
                    } else {
                        tLRPC$InputMedia3 = ((TLRPC$TL_messages_editMessage) tLObject).media;
                    }
                    tLRPC$InputMedia3.file = tLRPC$InputFile;
                    videoEditedInfo2.file = null;
                } else if (videoEditedInfo2.encryptedFile != null) {
                    TLRPC$TL_decryptedMessage tLRPC$TL_decryptedMessage = (TLRPC$TL_decryptedMessage) delayedMessage.sendEncryptedRequest;
                    TLRPC$DecryptedMessageMedia tLRPC$DecryptedMessageMedia = tLRPC$TL_decryptedMessage.media;
                    tLRPC$DecryptedMessageMedia.size = videoEditedInfo2.estimatedSize;
                    tLRPC$DecryptedMessageMedia.key = videoEditedInfo2.key;
                    tLRPC$DecryptedMessageMedia.iv = videoEditedInfo2.iv;
                    SecretChatHelper secretChatHelper = getSecretChatHelper();
                    MessageObject messageObject3 = delayedMessage.obj;
                    secretChatHelper.performSendEncryptedRequest(tLRPC$TL_decryptedMessage, messageObject3.messageOwner, delayedMessage.encryptedChat, delayedMessage.videoEditedInfo.encryptedFile, delayedMessage.originalPath, messageObject3);
                    delayedMessage.videoEditedInfo.encryptedFile = null;
                    return;
                }
            }
            TLObject tLObject2 = delayedMessage.sendRequest;
            if (tLObject2 != null) {
                if (tLObject2 instanceof TLRPC$TL_messages_sendMedia) {
                    tLRPC$InputMedia2 = ((TLRPC$TL_messages_sendMedia) tLObject2).media;
                } else {
                    tLRPC$InputMedia2 = ((TLRPC$TL_messages_editMessage) tLObject2).media;
                }
                if (tLRPC$InputMedia2.file == null) {
                    MessageObject messageObject4 = delayedMessage.obj;
                    String str3 = messageObject4.messageOwner.attachPath;
                    TLRPC$Document document2 = messageObject4.getDocument();
                    if (str3 == null) {
                        str3 = FileLoader.getDirectory(4) + "/" + document2.id + ".mp4";
                    }
                    String str4 = str3;
                    putToDelayedMessages(str4, delayedMessage);
                    VideoEditedInfo videoEditedInfo3 = delayedMessage.obj.videoEditedInfo;
                    if (videoEditedInfo3 != null && videoEditedInfo3.needConvert()) {
                        getFileLoader().uploadFile(str4, false, false, document2.size, ConnectionsManager.FileTypeVideo, false);
                    } else {
                        getFileLoader().uploadFile(str4, false, false, ConnectionsManager.FileTypeVideo);
                    }
                    putToUploadingMessages(delayedMessage.obj);
                    return;
                }
                String str5 = FileLoader.getDirectory(4) + "/" + delayedMessage.photoSize.location.volume_id + "_" + delayedMessage.photoSize.location.local_id + ".jpg";
                putToDelayedMessages(str5, delayedMessage);
                getFileLoader().uploadFile(str5, false, true, ConnectionsManager.FileTypePhoto);
                putToUploadingMessages(delayedMessage.obj);
                return;
            }
            MessageObject messageObject5 = delayedMessage.obj;
            String str6 = messageObject5.messageOwner.attachPath;
            TLRPC$Document document3 = messageObject5.getDocument();
            if (str6 == null) {
                str6 = FileLoader.getDirectory(4) + "/" + document3.id + ".mp4";
            }
            if (delayedMessage.sendEncryptedRequest != null && document3.dc_id != 0 && !new File(str6).exists()) {
                putToDelayedMessages(FileLoader.getAttachFileName(document3), delayedMessage);
                getFileLoader().loadFile(document3, delayedMessage.parentObject, 3, 0);
                return;
            }
            putToDelayedMessages(str6, delayedMessage);
            VideoEditedInfo videoEditedInfo4 = delayedMessage.obj.videoEditedInfo;
            if (videoEditedInfo4 != null && videoEditedInfo4.needConvert()) {
                getFileLoader().uploadFile(str6, true, false, document3.size, ConnectionsManager.FileTypeVideo, false);
            } else {
                getFileLoader().uploadFile(str6, true, false, ConnectionsManager.FileTypeVideo);
            }
            putToUploadingMessages(delayedMessage.obj);
        } else if (i2 == 2) {
            String str7 = delayedMessage.httpLocation;
            if (str7 != null) {
                putToDelayedMessages(str7, delayedMessage);
                ImageLoader.getInstance().loadHttpFile(delayedMessage.httpLocation, "gif", this.currentAccount);
                return;
            }
            TLObject tLObject3 = delayedMessage.sendRequest;
            if (tLObject3 != null) {
                if (tLObject3 instanceof TLRPC$TL_messages_sendMedia) {
                    tLRPC$InputMedia = ((TLRPC$TL_messages_sendMedia) tLObject3).media;
                } else {
                    tLRPC$InputMedia = ((TLRPC$TL_messages_editMessage) tLObject3).media;
                }
                if (tLRPC$InputMedia.file == null) {
                    String str8 = delayedMessage.obj.messageOwner.attachPath;
                    putToDelayedMessages(str8, delayedMessage);
                    getFileLoader().uploadFile(str8, delayedMessage.sendRequest == null, false, ConnectionsManager.FileTypeFile);
                    putToUploadingMessages(delayedMessage.obj);
                    return;
                } else if (tLRPC$InputMedia.thumb != null || (tLRPC$PhotoSize = delayedMessage.photoSize) == null || (tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize)) {
                    return;
                } else {
                    String str9 = FileLoader.getDirectory(4) + "/" + delayedMessage.photoSize.location.volume_id + "_" + delayedMessage.photoSize.location.local_id + ".jpg";
                    putToDelayedMessages(str9, delayedMessage);
                    getFileLoader().uploadFile(str9, false, true, ConnectionsManager.FileTypePhoto);
                    putToUploadingMessages(delayedMessage.obj);
                    return;
                }
            }
            MessageObject messageObject6 = delayedMessage.obj;
            String str10 = messageObject6.messageOwner.attachPath;
            TLRPC$Document document4 = messageObject6.getDocument();
            if (delayedMessage.sendEncryptedRequest != null && document4.dc_id != 0 && !new File(str10).exists()) {
                putToDelayedMessages(FileLoader.getAttachFileName(document4), delayedMessage);
                getFileLoader().loadFile(document4, delayedMessage.parentObject, 3, 0);
                return;
            }
            putToDelayedMessages(str10, delayedMessage);
            getFileLoader().uploadFile(str10, true, false, ConnectionsManager.FileTypeFile);
            putToUploadingMessages(delayedMessage.obj);
        } else if (i2 == 3) {
            String str11 = delayedMessage.obj.messageOwner.attachPath;
            putToDelayedMessages(str11, delayedMessage);
            getFileLoader().uploadFile(str11, delayedMessage.sendRequest == null, true, ConnectionsManager.FileTypeAudio);
            putToUploadingMessages(delayedMessage.obj);
        } else if (i2 != 4) {
            if (i2 == 5) {
                final String str12 = "stickerset_" + delayedMessage.obj.getId();
                TLRPC$TL_messages_getStickerSet tLRPC$TL_messages_getStickerSet = new TLRPC$TL_messages_getStickerSet();
                tLRPC$TL_messages_getStickerSet.stickerset = (TLRPC$InputStickerSet) delayedMessage.parentObject;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getStickerSet, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda87
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject4, TLRPC$TL_error tLRPC$TL_error) {
                        SendMessagesHelper.this.lambda$performSendDelayedMessage$33(delayedMessage, str12, tLObject4, tLRPC$TL_error);
                    }
                });
                putToDelayedMessages(str12, delayedMessage);
            }
        } else {
            boolean z3 = i < 0;
            if (delayedMessage.performMediaUpload) {
                int size = i < 0 ? delayedMessage.messageObjects.size() - 1 : i;
                MessageObject messageObject7 = delayedMessage.messageObjects.get(size);
                if (messageObject7.getDocument() != null) {
                    if (delayedMessage.videoEditedInfo != null) {
                        String str13 = messageObject7.messageOwner.attachPath;
                        TLRPC$Document document5 = messageObject7.getDocument();
                        if (str13 == null) {
                            str13 = FileLoader.getDirectory(4) + "/" + document5.id + ".mp4";
                        }
                        putToDelayedMessages(str13, delayedMessage);
                        delayedMessage.extraHashMap.put(messageObject7, str13);
                        delayedMessage.extraHashMap.put(str13 + "_i", messageObject7);
                        TLRPC$PhotoSize tLRPC$PhotoSize2 = delayedMessage.photoSize;
                        if (tLRPC$PhotoSize2 != null && tLRPC$PhotoSize2.location != null) {
                            delayedMessage.extraHashMap.put(str13 + "_t", delayedMessage.photoSize);
                        }
                        MediaController.getInstance().scheduleVideoConvert(messageObject7);
                        delayedMessage.obj = messageObject7;
                        putToUploadingMessages(messageObject7);
                    } else {
                        TLRPC$Document document6 = messageObject7.getDocument();
                        String str14 = messageObject7.messageOwner.attachPath;
                        if (str14 == null) {
                            StringBuilder sb = new StringBuilder();
                            sb.append(FileLoader.getDirectory(4));
                            sb.append("/");
                            messageObject = messageObject7;
                            sb.append(document6.id);
                            sb.append(".mp4");
                            str14 = sb.toString();
                        } else {
                            messageObject = messageObject7;
                        }
                        TLObject tLObject4 = delayedMessage.sendRequest;
                        if (tLObject4 != null) {
                            TLRPC$InputMedia tLRPC$InputMedia4 = ((TLRPC$TL_messages_sendMultiMedia) tLObject4).multi_media.get(size).media;
                            if (tLRPC$InputMedia4.file == null) {
                                putToDelayedMessages(str14, delayedMessage);
                                MessageObject messageObject8 = messageObject;
                                delayedMessage.extraHashMap.put(messageObject8, str14);
                                delayedMessage.extraHashMap.put(str14, tLRPC$InputMedia4);
                                delayedMessage.extraHashMap.put(str14 + "_i", messageObject8);
                                TLRPC$PhotoSize tLRPC$PhotoSize3 = delayedMessage.photoSize;
                                if (tLRPC$PhotoSize3 != null && tLRPC$PhotoSize3.location != null) {
                                    delayedMessage.extraHashMap.put(str14 + "_t", delayedMessage.photoSize);
                                }
                                VideoEditedInfo videoEditedInfo5 = messageObject8.videoEditedInfo;
                                if (videoEditedInfo5 != null && videoEditedInfo5.needConvert()) {
                                    getFileLoader().uploadFile(str14, false, false, document6.size, ConnectionsManager.FileTypeVideo, false);
                                } else {
                                    getFileLoader().uploadFile(str14, false, false, ConnectionsManager.FileTypeVideo);
                                }
                                putToUploadingMessages(messageObject8);
                            } else {
                                MessageObject messageObject9 = messageObject;
                                if (delayedMessage.photoSize != null) {
                                    String str15 = FileLoader.getDirectory(4) + "/" + delayedMessage.photoSize.location.volume_id + "_" + delayedMessage.photoSize.location.local_id + ".jpg";
                                    putToDelayedMessages(str15, delayedMessage);
                                    delayedMessage.extraHashMap.put(str15 + "_o", str14);
                                    delayedMessage.extraHashMap.put(messageObject9, str15);
                                    delayedMessage.extraHashMap.put(str15, tLRPC$InputMedia4);
                                    getFileLoader().uploadFile(str15, false, true, ConnectionsManager.FileTypePhoto);
                                    putToUploadingMessages(messageObject9);
                                }
                            }
                        } else {
                            MessageObject messageObject10 = messageObject;
                            putToDelayedMessages(str14, delayedMessage);
                            delayedMessage.extraHashMap.put(messageObject10, str14);
                            delayedMessage.extraHashMap.put(str14, ((TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest).files.get(size));
                            delayedMessage.extraHashMap.put(str14 + "_i", messageObject10);
                            TLRPC$PhotoSize tLRPC$PhotoSize4 = delayedMessage.photoSize;
                            if (tLRPC$PhotoSize4 != null && tLRPC$PhotoSize4.location != null) {
                                delayedMessage.extraHashMap.put(str14 + "_t", delayedMessage.photoSize);
                            }
                            VideoEditedInfo videoEditedInfo6 = messageObject10.videoEditedInfo;
                            if (videoEditedInfo6 != null && videoEditedInfo6.needConvert()) {
                                getFileLoader().uploadFile(str14, true, false, document6.size, ConnectionsManager.FileTypeVideo, false);
                            } else {
                                getFileLoader().uploadFile(str14, true, false, ConnectionsManager.FileTypeVideo);
                            }
                            putToUploadingMessages(messageObject10);
                        }
                    }
                    delayedMessage.videoEditedInfo = null;
                    delayedMessage.photoSize = null;
                } else {
                    String str16 = delayedMessage.httpLocation;
                    if (str16 != null) {
                        putToDelayedMessages(str16, delayedMessage);
                        delayedMessage.extraHashMap.put(messageObject7, delayedMessage.httpLocation);
                        delayedMessage.extraHashMap.put(delayedMessage.httpLocation, messageObject7);
                        ImageLoader.getInstance().loadHttpFile(delayedMessage.httpLocation, "file", this.currentAccount);
                        delayedMessage.httpLocation = null;
                    } else {
                        TLObject tLObject5 = delayedMessage.sendRequest;
                        if (tLObject5 != null) {
                            tLRPC$InputEncryptedFile = ((TLRPC$TL_messages_sendMultiMedia) tLObject5).multi_media.get(size).media;
                        } else {
                            tLRPC$InputEncryptedFile = ((TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest).files.get(size);
                        }
                        String file4 = FileLoader.getInstance(this.currentAccount).getPathToAttach(delayedMessage.photoSize).toString();
                        putToDelayedMessages(file4, delayedMessage);
                        delayedMessage.extraHashMap.put(file4, tLRPC$InputEncryptedFile);
                        delayedMessage.extraHashMap.put(messageObject7, file4);
                        z = true;
                        getFileLoader().uploadFile(file4, delayedMessage.sendEncryptedRequest != null, true, ConnectionsManager.FileTypePhoto);
                        putToUploadingMessages(messageObject7);
                        delayedMessage.photoSize = null;
                        z2 = false;
                        delayedMessage.performMediaUpload = z2;
                    }
                }
                z2 = false;
                z = true;
                delayedMessage.performMediaUpload = z2;
            } else {
                z = true;
                if (!delayedMessage.messageObjects.isEmpty()) {
                    ArrayList<MessageObject> arrayList = delayedMessage.messageObjects;
                    putToSendingMessages(arrayList.get(arrayList.size() - 1).messageOwner, delayedMessage.finalGroupMessage != 0);
                }
            }
            sendReadyToSendGroup(delayedMessage, z3, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendDelayedMessage$33(final DelayedMessage delayedMessage, final String str, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda42
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendDelayedMessage$32(tLObject, delayedMessage, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendDelayedMessage$32(TLObject tLObject, DelayedMessage delayedMessage, String str) {
        boolean z;
        if (tLObject != null) {
            TLRPC$TL_messages_stickerSet tLRPC$TL_messages_stickerSet = (TLRPC$TL_messages_stickerSet) tLObject;
            getMediaDataController().storeTempStickerSet(tLRPC$TL_messages_stickerSet);
            TLRPC$TL_inputStickerSetShortName tLRPC$TL_inputStickerSetShortName = new TLRPC$TL_inputStickerSetShortName();
            ((TLRPC$TL_documentAttributeSticker_layer55) delayedMessage.locationParent).stickerset = tLRPC$TL_inputStickerSetShortName;
            tLRPC$TL_inputStickerSetShortName.short_name = tLRPC$TL_messages_stickerSet.set.short_name;
            z = true;
        } else {
            z = false;
        }
        ArrayList<DelayedMessage> remove = this.delayedMessages.remove(str);
        if (remove == null || remove.isEmpty()) {
            return;
        }
        if (z) {
            getMessagesStorage().replaceMessageIfExists(remove.get(0).obj.messageOwner, null, null, false);
        }
        MessageObject messageObject = delayedMessage.obj;
        getSecretChatHelper().performSendEncryptedRequest((TLRPC$DecryptedMessage) delayedMessage.sendEncryptedRequest, messageObject.messageOwner, delayedMessage.encryptedChat, null, null, messageObject);
    }

    private void uploadMultiMedia(final DelayedMessage delayedMessage, final TLRPC$InputMedia tLRPC$InputMedia, TLRPC$InputEncryptedFile tLRPC$InputEncryptedFile, String str) {
        if (tLRPC$InputMedia == null) {
            if (tLRPC$InputEncryptedFile != null) {
                TLRPC$TL_messages_sendEncryptedMultiMedia tLRPC$TL_messages_sendEncryptedMultiMedia = (TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest;
                int i = 0;
                while (true) {
                    if (i >= tLRPC$TL_messages_sendEncryptedMultiMedia.files.size()) {
                        break;
                    } else if (tLRPC$TL_messages_sendEncryptedMultiMedia.files.get(i) == tLRPC$InputEncryptedFile) {
                        putToSendingMessages(delayedMessage.messages.get(i), delayedMessage.scheduled);
                        getNotificationCenter().postNotificationName(NotificationCenter.fileUploadProgressChanged, str, -1L, -1L, Boolean.FALSE);
                        break;
                    } else {
                        i++;
                    }
                }
                sendReadyToSendGroup(delayedMessage, false, true);
                return;
            }
            return;
        }
        TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia = (TLRPC$TL_messages_sendMultiMedia) delayedMessage.sendRequest;
        int i2 = 0;
        while (true) {
            if (i2 >= tLRPC$TL_messages_sendMultiMedia.multi_media.size()) {
                break;
            } else if (tLRPC$TL_messages_sendMultiMedia.multi_media.get(i2).media == tLRPC$InputMedia) {
                putToSendingMessages(delayedMessage.messages.get(i2), delayedMessage.scheduled);
                getNotificationCenter().postNotificationName(NotificationCenter.fileUploadProgressChanged, str, -1L, -1L, Boolean.FALSE);
                break;
            } else {
                i2++;
            }
        }
        TLRPC$TL_messages_uploadMedia tLRPC$TL_messages_uploadMedia = new TLRPC$TL_messages_uploadMedia();
        tLRPC$TL_messages_uploadMedia.media = tLRPC$InputMedia;
        tLRPC$TL_messages_uploadMedia.peer = ((TLRPC$TL_messages_sendMultiMedia) delayedMessage.sendRequest).peer;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_uploadMedia, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda89
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$uploadMultiMedia$35(tLRPC$InputMedia, delayedMessage, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$uploadMultiMedia$35(final TLRPC$InputMedia tLRPC$InputMedia, final DelayedMessage delayedMessage, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda43
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$uploadMultiMedia$34(tLObject, tLRPC$InputMedia, delayedMessage);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00a1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$uploadMultiMedia$34(TLObject tLObject, TLRPC$InputMedia tLRPC$InputMedia, DelayedMessage delayedMessage) {
        TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument;
        if (tLObject != null) {
            TLRPC$MessageMedia tLRPC$MessageMedia = (TLRPC$MessageMedia) tLObject;
            if ((tLRPC$InputMedia instanceof TLRPC$TL_inputMediaUploadedPhoto) && (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto)) {
                TLRPC$TL_inputMediaPhoto tLRPC$TL_inputMediaPhoto = new TLRPC$TL_inputMediaPhoto();
                TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
                tLRPC$TL_inputMediaPhoto.id = tLRPC$TL_inputPhoto;
                TLRPC$Photo tLRPC$Photo = tLRPC$MessageMedia.photo;
                tLRPC$TL_inputPhoto.id = tLRPC$Photo.id;
                tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
                tLRPC$TL_inputPhoto.file_reference = tLRPC$Photo.file_reference;
                tLRPC$TL_inputMediaPhoto.spoiler = tLRPC$InputMedia.spoiler;
                tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaPhoto;
                if (BuildVars.DEBUG_VERSION) {
                    FileLog.d("set uploaded photo");
                    tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaPhoto;
                }
            } else if ((tLRPC$InputMedia instanceof TLRPC$TL_inputMediaUploadedDocument) && (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) {
                TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument2 = new TLRPC$TL_inputMediaDocument();
                TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
                tLRPC$TL_inputMediaDocument2.id = tLRPC$TL_inputDocument;
                TLRPC$Document tLRPC$Document = tLRPC$MessageMedia.document;
                tLRPC$TL_inputDocument.id = tLRPC$Document.id;
                tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
                tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
                tLRPC$TL_inputMediaDocument2.spoiler = tLRPC$InputMedia.spoiler;
                tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaDocument2;
                if (BuildVars.DEBUG_VERSION) {
                    FileLog.d("set uploaded document");
                    tLRPC$TL_inputMediaDocument = tLRPC$TL_inputMediaDocument2;
                }
            }
            if (tLRPC$TL_inputMediaDocument == null) {
                int i = tLRPC$InputMedia.ttl_seconds;
                if (i != 0) {
                    tLRPC$TL_inputMediaDocument.ttl_seconds = i;
                    tLRPC$TL_inputMediaDocument.flags |= 1;
                }
                TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia = (TLRPC$TL_messages_sendMultiMedia) delayedMessage.sendRequest;
                int i2 = 0;
                while (true) {
                    if (i2 >= tLRPC$TL_messages_sendMultiMedia.multi_media.size()) {
                        break;
                    } else if (tLRPC$TL_messages_sendMultiMedia.multi_media.get(i2).media == tLRPC$InputMedia) {
                        tLRPC$TL_messages_sendMultiMedia.multi_media.get(i2).media = tLRPC$TL_inputMediaDocument;
                        break;
                    } else {
                        i2++;
                    }
                }
                sendReadyToSendGroup(delayedMessage, false, true);
                return;
            }
            delayedMessage.markAsError();
            return;
        }
        tLRPC$TL_inputMediaDocument = null;
        if (tLRPC$TL_inputMediaDocument == null) {
        }
    }

    private void sendReadyToSendGroup(DelayedMessage delayedMessage, boolean z, boolean z2) {
        ArrayList<MessageObject> arrayList;
        DelayedMessage findMaxDelayedMessageForMessageId;
        if (delayedMessage.messageObjects.isEmpty()) {
            delayedMessage.markAsError();
            return;
        }
        String str = "group_" + delayedMessage.groupId;
        if (delayedMessage.finalGroupMessage != delayedMessage.messageObjects.get(arrayList.size() - 1).getId()) {
            if (z) {
                if (BuildVars.DEBUG_VERSION) {
                    FileLog.d("final message not added, add");
                }
                putToDelayedMessages(str, delayedMessage);
                return;
            } else if (BuildVars.DEBUG_VERSION) {
                FileLog.d("final message not added");
                return;
            } else {
                return;
            }
        }
        int i = 0;
        if (z) {
            this.delayedMessages.remove(str);
            getMessagesStorage().putMessages(delayedMessage.messages, false, true, false, 0, delayedMessage.scheduled, 0);
            getMessagesController().updateInterfaceWithMessages(delayedMessage.peer, delayedMessage.messageObjects, delayedMessage.scheduled);
            if (!delayedMessage.scheduled) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            if (BuildVars.DEBUG_VERSION) {
                FileLog.d("add message");
            }
        }
        TLObject tLObject = delayedMessage.sendRequest;
        if (tLObject instanceof TLRPC$TL_messages_sendMultiMedia) {
            TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia = (TLRPC$TL_messages_sendMultiMedia) tLObject;
            while (i < tLRPC$TL_messages_sendMultiMedia.multi_media.size()) {
                TLRPC$InputMedia tLRPC$InputMedia = tLRPC$TL_messages_sendMultiMedia.multi_media.get(i).media;
                if ((tLRPC$InputMedia instanceof TLRPC$TL_inputMediaUploadedPhoto) || (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaUploadedDocument)) {
                    if (BuildVars.DEBUG_VERSION) {
                        FileLog.d("multi media not ready");
                        return;
                    }
                    return;
                }
                i++;
            }
            if (z2 && (findMaxDelayedMessageForMessageId = findMaxDelayedMessageForMessageId(delayedMessage.finalGroupMessage, delayedMessage.peer)) != null) {
                findMaxDelayedMessageForMessageId.addDelayedRequest(delayedMessage.sendRequest, delayedMessage.messageObjects, delayedMessage.originalPaths, delayedMessage.parentObjects, delayedMessage, delayedMessage.scheduled);
                ArrayList<DelayedMessageSendAfterRequest> arrayList2 = delayedMessage.requests;
                if (arrayList2 != null) {
                    findMaxDelayedMessageForMessageId.requests.addAll(arrayList2);
                }
                if (BuildVars.DEBUG_VERSION) {
                    FileLog.d("has maxDelayedMessage, delay");
                    return;
                }
                return;
            }
        } else {
            TLRPC$TL_messages_sendEncryptedMultiMedia tLRPC$TL_messages_sendEncryptedMultiMedia = (TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest;
            while (i < tLRPC$TL_messages_sendEncryptedMultiMedia.files.size()) {
                if (tLRPC$TL_messages_sendEncryptedMultiMedia.files.get(i) instanceof TLRPC$TL_inputEncryptedFile) {
                    return;
                }
                i++;
            }
        }
        TLObject tLObject2 = delayedMessage.sendRequest;
        if (tLObject2 instanceof TLRPC$TL_messages_sendMultiMedia) {
            performSendMessageRequestMulti((TLRPC$TL_messages_sendMultiMedia) tLObject2, delayedMessage.messageObjects, delayedMessage.originalPaths, delayedMessage.parentObjects, delayedMessage, delayedMessage.scheduled);
        } else {
            getSecretChatHelper().performSendEncryptedRequest((TLRPC$TL_messages_sendEncryptedMultiMedia) delayedMessage.sendEncryptedRequest, delayedMessage);
        }
        delayedMessage.sendDelayedRequests();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$stopVideoService$36(String str) {
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopEncodingService, str, Integer.valueOf(this.currentAccount));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$stopVideoService$37(final String str) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda27
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$stopVideoService$36(str);
            }
        });
    }

    public void stopVideoService(final String str) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda26
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$stopVideoService$37(str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void putToSendingMessages(final TLRPC$Message tLRPC$Message, final boolean z) {
        if (Thread.currentThread() != ApplicationLoader.applicationHandler.getLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda54
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$putToSendingMessages$38(tLRPC$Message, z);
                }
            });
        } else {
            putToSendingMessages(tLRPC$Message, z, true);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putToSendingMessages$38(TLRPC$Message tLRPC$Message, boolean z) {
        putToSendingMessages(tLRPC$Message, z, true);
    }

    protected void putToSendingMessages(TLRPC$Message tLRPC$Message, boolean z, boolean z2) {
        if (tLRPC$Message == null) {
            return;
        }
        int i = tLRPC$Message.id;
        if (i > 0) {
            this.editingMessages.put(i, tLRPC$Message);
            return;
        }
        boolean z3 = this.sendingMessages.indexOfKey(i) >= 0;
        removeFromUploadingMessages(tLRPC$Message.id, z);
        this.sendingMessages.put(tLRPC$Message.id, tLRPC$Message);
        if (z || z3) {
            return;
        }
        long dialogId = MessageObject.getDialogId(tLRPC$Message);
        LongSparseArray<Integer> longSparseArray = this.sendingMessagesIdDialogs;
        longSparseArray.put(dialogId, Integer.valueOf(longSparseArray.get(dialogId, 0).intValue() + 1));
        if (z2) {
            getNotificationCenter().postNotificationName(NotificationCenter.sendingMessagesChanged, new Object[0]);
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public TLRPC$Message removeFromSendingMessages(int i, boolean z) {
        long dialogId;
        Integer num;
        if (i > 0) {
            TLRPC$Message tLRPC$Message = this.editingMessages.get(i);
            if (tLRPC$Message != null) {
                this.editingMessages.remove(i);
                return tLRPC$Message;
            }
            return tLRPC$Message;
        }
        TLRPC$Message tLRPC$Message2 = this.sendingMessages.get(i);
        if (tLRPC$Message2 != null) {
            this.sendingMessages.remove(i);
            if (!z && (num = this.sendingMessagesIdDialogs.get((dialogId = MessageObject.getDialogId(tLRPC$Message2)))) != null) {
                int intValue = num.intValue() - 1;
                if (intValue <= 0) {
                    this.sendingMessagesIdDialogs.remove(dialogId);
                } else {
                    this.sendingMessagesIdDialogs.put(dialogId, Integer.valueOf(intValue));
                }
                getNotificationCenter().postNotificationName(NotificationCenter.sendingMessagesChanged, new Object[0]);
            }
        }
        return tLRPC$Message2;
    }

    public int getSendingMessageId(long j) {
        for (int i = 0; i < this.sendingMessages.size(); i++) {
            TLRPC$Message valueAt = this.sendingMessages.valueAt(i);
            if (valueAt.dialog_id == j) {
                return valueAt.id;
            }
        }
        for (int i2 = 0; i2 < this.uploadMessages.size(); i2++) {
            TLRPC$Message valueAt2 = this.uploadMessages.valueAt(i2);
            if (valueAt2.dialog_id == j) {
                return valueAt2.id;
            }
        }
        return 0;
    }

    protected void putToUploadingMessages(MessageObject messageObject) {
        if (messageObject == null || messageObject.getId() > 0 || messageObject.scheduled) {
            return;
        }
        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        boolean z = this.uploadMessages.indexOfKey(tLRPC$Message.id) >= 0;
        this.uploadMessages.put(tLRPC$Message.id, tLRPC$Message);
        if (z) {
            return;
        }
        long dialogId = MessageObject.getDialogId(tLRPC$Message);
        LongSparseArray<Integer> longSparseArray = this.uploadingMessagesIdDialogs;
        longSparseArray.put(dialogId, Integer.valueOf(longSparseArray.get(dialogId, 0).intValue() + 1));
        getNotificationCenter().postNotificationName(NotificationCenter.sendingMessagesChanged, new Object[0]);
    }

    protected void removeFromUploadingMessages(int i, boolean z) {
        TLRPC$Message tLRPC$Message;
        if (i > 0 || z || (tLRPC$Message = this.uploadMessages.get(i)) == null) {
            return;
        }
        this.uploadMessages.remove(i);
        long dialogId = MessageObject.getDialogId(tLRPC$Message);
        Integer num = this.uploadingMessagesIdDialogs.get(dialogId);
        if (num != null) {
            int intValue = num.intValue() - 1;
            if (intValue <= 0) {
                this.uploadingMessagesIdDialogs.remove(dialogId);
            } else {
                this.uploadingMessagesIdDialogs.put(dialogId, Integer.valueOf(intValue));
            }
            getNotificationCenter().postNotificationName(NotificationCenter.sendingMessagesChanged, new Object[0]);
        }
    }

    public boolean isSendingMessage(int i) {
        return this.sendingMessages.indexOfKey(i) >= 0 || this.editingMessages.indexOfKey(i) >= 0;
    }

    public boolean isSendingMessageIdDialog(long j) {
        return this.sendingMessagesIdDialogs.get(j, 0).intValue() > 0;
    }

    public boolean isUploadingMessageIdDialog(long j) {
        return this.uploadingMessagesIdDialogs.get(j, 0).intValue() > 0;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void performSendMessageRequestMulti(final TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia, final ArrayList<MessageObject> arrayList, final ArrayList<String> arrayList2, final ArrayList<Object> arrayList3, final DelayedMessage delayedMessage, final boolean z) {
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putToSendingMessages(arrayList.get(i).messageOwner, z);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_sendMultiMedia, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda85
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$performSendMessageRequestMulti$46(arrayList3, tLRPC$TL_messages_sendMultiMedia, arrayList, arrayList2, delayedMessage, z, tLObject, tLRPC$TL_error);
            }
        }, (QuickAckDelegate) null, 68);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$46(ArrayList arrayList, final TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia, final ArrayList arrayList2, final ArrayList arrayList3, final DelayedMessage delayedMessage, final boolean z, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            if (arrayList != null) {
                ArrayList arrayList4 = new ArrayList(arrayList);
                getFileRefController().requestReference(arrayList4, tLRPC$TL_messages_sendMultiMedia, arrayList2, arrayList3, arrayList4, delayedMessage, Boolean.valueOf(z));
                return;
            } else if (delayedMessage != null && !delayedMessage.retriedToSend) {
                delayedMessage.retriedToSend = true;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda61
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.this.lambda$performSendMessageRequestMulti$39(tLRPC$TL_messages_sendMultiMedia, delayedMessage, arrayList2, z);
                    }
                });
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequestMulti$45(tLRPC$TL_error, tLObject, arrayList2, arrayList3, z, tLRPC$TL_messages_sendMultiMedia);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$39(TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia, DelayedMessage delayedMessage, ArrayList arrayList, boolean z) {
        int size = tLRPC$TL_messages_sendMultiMedia.multi_media.size();
        boolean z2 = false;
        for (int i = 0; i < size; i++) {
            if (delayedMessage.parentObjects.get(i) != null) {
                removeFromSendingMessages(((MessageObject) arrayList.get(i)).getId(), z);
                TLRPC$TL_inputSingleMedia tLRPC$TL_inputSingleMedia = tLRPC$TL_messages_sendMultiMedia.multi_media.get(i);
                TLRPC$InputMedia tLRPC$InputMedia = tLRPC$TL_inputSingleMedia.media;
                if (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaPhoto) {
                    tLRPC$TL_inputSingleMedia.media = delayedMessage.inputMedias.get(i);
                } else if (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaDocument) {
                    tLRPC$TL_inputSingleMedia.media = delayedMessage.inputMedias.get(i);
                }
                delayedMessage.videoEditedInfo = delayedMessage.videoEditedInfos.get(i);
                delayedMessage.httpLocation = delayedMessage.httpLocations.get(i);
                TLRPC$PhotoSize tLRPC$PhotoSize = delayedMessage.locations.get(i);
                delayedMessage.photoSize = tLRPC$PhotoSize;
                delayedMessage.performMediaUpload = true;
                z2 = (tLRPC$TL_inputSingleMedia.media.file == null || tLRPC$PhotoSize != null) ? true : true;
                performSendDelayedMessage(delayedMessage, i);
            }
        }
        if (z2) {
            return;
        }
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            TLRPC$Message tLRPC$Message = ((MessageObject) arrayList.get(i2)).messageOwner;
            getMessagesStorage().markMessageAsSendError(tLRPC$Message, z);
            tLRPC$Message.send_state = 2;
            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
            processSentMessage(tLRPC$Message.id);
            removeFromSendingMessages(tLRPC$Message.id, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$45(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, ArrayList arrayList, ArrayList arrayList2, final boolean z, TLRPC$TL_messages_sendMultiMedia tLRPC$TL_messages_sendMultiMedia) {
        boolean z2;
        final TLRPC$Updates tLRPC$Updates;
        boolean z3;
        TLRPC$Message tLRPC$Message;
        TLRPC$Updates tLRPC$Updates2;
        int i;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        if (tLRPC$TL_error == null) {
            SparseArray sparseArray = new SparseArray();
            LongSparseArray longSparseArray = new LongSparseArray();
            TLRPC$Updates tLRPC$Updates3 = (TLRPC$Updates) tLObject;
            ArrayList<TLRPC$Update> arrayList3 = tLRPC$Updates3.updates;
            LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray2 = null;
            int i2 = 0;
            while (i2 < arrayList3.size()) {
                TLRPC$Update tLRPC$Update = arrayList3.get(i2);
                if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                    TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) tLRPC$Update;
                    longSparseArray.put(tLRPC$TL_updateMessageID.random_id, Integer.valueOf(tLRPC$TL_updateMessageID.id));
                    arrayList3.remove(i2);
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                    final TLRPC$TL_updateNewMessage tLRPC$TL_updateNewMessage = (TLRPC$TL_updateNewMessage) tLRPC$Update;
                    TLRPC$Message tLRPC$Message2 = tLRPC$TL_updateNewMessage.message;
                    sparseArray.put(tLRPC$Message2.id, tLRPC$Message2);
                    Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda66
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.this.lambda$performSendMessageRequestMulti$40(tLRPC$TL_updateNewMessage);
                        }
                    });
                    arrayList3.remove(i2);
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                    final TLRPC$TL_updateNewChannelMessage tLRPC$TL_updateNewChannelMessage = (TLRPC$TL_updateNewChannelMessage) tLRPC$Update;
                    TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(MessagesController.getUpdateChannelId(tLRPC$TL_updateNewChannelMessage)));
                    if ((chat == null || chat.megagroup) && (tLRPC$TL_messageReplyHeader = tLRPC$TL_updateNewChannelMessage.message.reply_to) != null && (tLRPC$TL_messageReplyHeader.reply_to_top_id != 0 || tLRPC$TL_messageReplyHeader.reply_to_msg_id != 0)) {
                        if (longSparseArray2 == null) {
                            longSparseArray2 = new LongSparseArray<>();
                        }
                        long dialogId = MessageObject.getDialogId(tLRPC$TL_updateNewChannelMessage.message);
                        SparseArray<TLRPC$MessageReplies> sparseArray2 = longSparseArray2.get(dialogId);
                        if (sparseArray2 == null) {
                            sparseArray2 = new SparseArray<>();
                            longSparseArray2.put(dialogId, sparseArray2);
                        }
                        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = tLRPC$TL_updateNewChannelMessage.message.reply_to;
                        int i3 = tLRPC$TL_messageReplyHeader2.reply_to_top_id;
                        if (i3 == 0) {
                            i3 = tLRPC$TL_messageReplyHeader2.reply_to_msg_id;
                        }
                        TLRPC$MessageReplies tLRPC$MessageReplies = sparseArray2.get(i3);
                        if (tLRPC$MessageReplies == null) {
                            tLRPC$MessageReplies = new TLRPC$TL_messageReplies();
                            sparseArray2.put(i3, tLRPC$MessageReplies);
                        }
                        TLRPC$Peer tLRPC$Peer = tLRPC$TL_updateNewChannelMessage.message.from_id;
                        if (tLRPC$Peer != null) {
                            tLRPC$MessageReplies.recent_repliers.add(0, tLRPC$Peer);
                        }
                        tLRPC$MessageReplies.replies++;
                    }
                    TLRPC$Message tLRPC$Message3 = tLRPC$TL_updateNewChannelMessage.message;
                    sparseArray.put(tLRPC$Message3.id, tLRPC$Message3);
                    Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda63
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.this.lambda$performSendMessageRequestMulti$41(tLRPC$TL_updateNewChannelMessage);
                        }
                    });
                    arrayList3.remove(i2);
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage) {
                    TLRPC$Message tLRPC$Message4 = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update).message;
                    sparseArray.put(tLRPC$Message4.id, tLRPC$Message4);
                    arrayList3.remove(i2);
                } else {
                    i2++;
                }
                i2--;
                i2++;
            }
            if (longSparseArray2 != null) {
                getMessagesStorage().putChannelViews(null, null, longSparseArray2, true);
                getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, null, null, longSparseArray2, Boolean.TRUE);
            }
            int i4 = 0;
            while (i4 < arrayList.size()) {
                MessageObject messageObject = (MessageObject) arrayList.get(i4);
                String str = (String) arrayList2.get(i4);
                final TLRPC$Message tLRPC$Message5 = messageObject.messageOwner;
                final int i5 = tLRPC$Message5.id;
                final ArrayList arrayList4 = new ArrayList();
                Integer num = (Integer) longSparseArray.get(tLRPC$Message5.random_id);
                if (num == null || (tLRPC$Message = (TLRPC$Message) sparseArray.get(num.intValue())) == null) {
                    tLRPC$Updates = tLRPC$Updates3;
                    z3 = true;
                    break;
                }
                MessageObject.getDialogId(tLRPC$Message);
                arrayList4.add(tLRPC$Message);
                if ((tLRPC$Message.flags & ConnectionsManager.FileTypeVideo) != 0) {
                    TLRPC$Message tLRPC$Message6 = messageObject.messageOwner;
                    tLRPC$Message6.ttl_period = tLRPC$Message.ttl_period;
                    tLRPC$Message6.flags = 33554432 | tLRPC$Message6.flags;
                }
                updateMediaPaths(messageObject, tLRPC$Message, tLRPC$Message.id, str, false);
                final int mediaExistanceFlags = messageObject.getMediaExistanceFlags();
                tLRPC$Message5.id = tLRPC$Message.id;
                final long j = tLRPC$Message.grouped_id;
                if (z) {
                    tLRPC$Updates2 = tLRPC$Updates3;
                    i = i4;
                } else {
                    tLRPC$Updates2 = tLRPC$Updates3;
                    i = i4;
                    Integer num2 = getMessagesController().dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Message.dialog_id));
                    if (num2 == null) {
                        num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                        getMessagesController().dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Message.dialog_id), num2);
                    }
                    tLRPC$Message.unread = num2.intValue() < tLRPC$Message.id;
                }
                getStatsController().incrementSentItemsCount(ApplicationLoader.getCurrentNetworkType(), 1, 1);
                tLRPC$Message5.send_state = 0;
                getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i5), Integer.valueOf(tLRPC$Message5.id), tLRPC$Message5, Long.valueOf(tLRPC$Message5.dialog_id), Long.valueOf(j), Integer.valueOf(mediaExistanceFlags), Boolean.valueOf(z));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda50
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.this.lambda$performSendMessageRequestMulti$43(tLRPC$Message5, i5, z, arrayList4, j, mediaExistanceFlags);
                    }
                });
                i4 = i + 1;
                sparseArray = sparseArray;
                tLRPC$Updates3 = tLRPC$Updates2;
                longSparseArray = longSparseArray;
            }
            tLRPC$Updates = tLRPC$Updates3;
            z3 = false;
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda68
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$performSendMessageRequestMulti$44(tLRPC$Updates);
                }
            });
            z2 = z3;
        } else {
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, null, tLRPC$TL_messages_sendMultiMedia, new Object[0]);
            z2 = true;
        }
        if (z2) {
            for (int i6 = 0; i6 < arrayList.size(); i6++) {
                TLRPC$Message tLRPC$Message7 = ((MessageObject) arrayList.get(i6)).messageOwner;
                getMessagesStorage().markMessageAsSendError(tLRPC$Message7, z);
                tLRPC$Message7.send_state = 2;
                getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message7.id));
                processSentMessage(tLRPC$Message7.id);
                removeFromSendingMessages(tLRPC$Message7.id, z);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$40(TLRPC$TL_updateNewMessage tLRPC$TL_updateNewMessage) {
        getMessagesController().processNewDifferenceParams(-1, tLRPC$TL_updateNewMessage.pts, -1, tLRPC$TL_updateNewMessage.pts_count);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$41(TLRPC$TL_updateNewChannelMessage tLRPC$TL_updateNewChannelMessage) {
        getMessagesController().processNewChannelDifferenceParams(tLRPC$TL_updateNewChannelMessage.pts, tLRPC$TL_updateNewChannelMessage.pts_count, tLRPC$TL_updateNewChannelMessage.message.peer_id.channel_id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$43(final TLRPC$Message tLRPC$Message, final int i, final boolean z, ArrayList arrayList, final long j, final int i2) {
        getMessagesStorage().updateMessageStateAndId(tLRPC$Message.random_id, MessageObject.getPeerId(tLRPC$Message.peer_id), Integer.valueOf(i), tLRPC$Message.id, 0, false, z ? 1 : 0);
        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList, true, false, false, 0, z, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda48
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequestMulti$42(tLRPC$Message, i, j, i2, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$42(TLRPC$Message tLRPC$Message, int i, long j, int i2, boolean z) {
        getMediaDataController().increasePeerRaiting(tLRPC$Message.dialog_id);
        getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i), Integer.valueOf(tLRPC$Message.id), tLRPC$Message, Long.valueOf(tLRPC$Message.dialog_id), Long.valueOf(j), Integer.valueOf(i2), Boolean.valueOf(z));
        processSentMessage(i);
        removeFromSendingMessages(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequestMulti$44(TLRPC$Updates tLRPC$Updates) {
        getMessagesController().processUpdates(tLRPC$Updates, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void performSendMessageRequest(TLObject tLObject, MessageObject messageObject, String str, DelayedMessage delayedMessage, Object obj, HashMap<String, String> hashMap, boolean z) {
        performSendMessageRequest(tLObject, messageObject, str, null, false, delayedMessage, obj, hashMap, z);
    }

    private DelayedMessage findMaxDelayedMessageForMessageId(int i, long j) {
        int i2;
        DelayedMessage delayedMessage = null;
        int i3 = Integer.MIN_VALUE;
        for (Map.Entry<String, ArrayList<DelayedMessage>> entry : this.delayedMessages.entrySet()) {
            ArrayList<DelayedMessage> value = entry.getValue();
            int size = value.size();
            for (int i4 = 0; i4 < size; i4++) {
                DelayedMessage delayedMessage2 = value.get(i4);
                int i5 = delayedMessage2.type;
                if ((i5 == 4 || i5 == 0) && delayedMessage2.peer == j) {
                    MessageObject messageObject = delayedMessage2.obj;
                    if (messageObject != null) {
                        i2 = messageObject.getId();
                    } else {
                        ArrayList<MessageObject> arrayList = delayedMessage2.messageObjects;
                        if (arrayList == null || arrayList.isEmpty()) {
                            i2 = 0;
                        } else {
                            ArrayList<MessageObject> arrayList2 = delayedMessage2.messageObjects;
                            i2 = arrayList2.get(arrayList2.size() - 1).getId();
                        }
                    }
                    if (i2 != 0 && i2 > i && delayedMessage == null && i3 < i2) {
                        delayedMessage = delayedMessage2;
                        i3 = i2;
                    }
                }
            }
        }
        return delayedMessage;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void performSendMessageRequest(final TLObject tLObject, final MessageObject messageObject, final String str, final DelayedMessage delayedMessage, final boolean z, final DelayedMessage delayedMessage2, final Object obj, HashMap<String, String> hashMap, final boolean z2) {
        DelayedMessage findMaxDelayedMessageForMessageId;
        ArrayList<DelayedMessageSendAfterRequest> arrayList;
        if (!(tLObject instanceof TLRPC$TL_messages_editMessage) && z && (findMaxDelayedMessageForMessageId = findMaxDelayedMessageForMessageId(messageObject.getId(), messageObject.getDialogId())) != null) {
            findMaxDelayedMessageForMessageId.addDelayedRequest(tLObject, messageObject, str, obj, delayedMessage2, delayedMessage != null ? delayedMessage.scheduled : false);
            if (delayedMessage == null || (arrayList = delayedMessage.requests) == null) {
                return;
            }
            findMaxDelayedMessageForMessageId.requests.addAll(arrayList);
            return;
        }
        final TLRPC$Message tLRPC$Message = messageObject.messageOwner;
        putToSendingMessages(tLRPC$Message, z2);
        tLRPC$Message.reqId = getConnectionsManager().sendRequest(tLObject, new RequestDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda88
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                SendMessagesHelper.this.lambda$performSendMessageRequest$60(tLObject, obj, messageObject, str, delayedMessage, z, delayedMessage2, z2, tLRPC$Message, tLObject2, tLRPC$TL_error);
            }
        }, new QuickAckDelegate() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda79
            @Override // org.telegram.tgnet.QuickAckDelegate
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequest$62(tLRPC$Message);
            }
        }, (tLObject instanceof TLRPC$TL_messages_sendMessage ? 128 : 0) | 68);
        if (delayedMessage != null) {
            delayedMessage.sendDelayedRequests();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$60(final TLObject tLObject, Object obj, final MessageObject messageObject, final String str, DelayedMessage delayedMessage, boolean z, final DelayedMessage delayedMessage2, final boolean z2, final TLRPC$Message tLRPC$Message, final TLObject tLObject2, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && (((tLObject instanceof TLRPC$TL_messages_sendMedia) || (tLObject instanceof TLRPC$TL_messages_editMessage)) && FileRefController.isFileRefError(tLRPC$TL_error.text))) {
            if (obj != null) {
                getFileRefController().requestReference(obj, tLObject, messageObject, str, delayedMessage, Boolean.valueOf(z), delayedMessage2, Boolean.valueOf(z2));
                return;
            } else if (delayedMessage2 != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda55
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.this.lambda$performSendMessageRequest$47(tLRPC$Message, z2, tLObject, delayedMessage2);
                    }
                });
                return;
            }
        }
        if (tLObject instanceof TLRPC$TL_messages_editMessage) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda58
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$performSendMessageRequest$50(tLRPC$TL_error, tLRPC$Message, tLObject2, messageObject, str, z2, tLObject);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda71
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$performSendMessageRequest$59(z2, tLRPC$TL_error, tLRPC$Message, tLObject2, messageObject, str, tLObject);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$47(TLRPC$Message tLRPC$Message, boolean z, TLObject tLObject, DelayedMessage delayedMessage) {
        removeFromSendingMessages(tLRPC$Message.id, z);
        if (tLObject instanceof TLRPC$TL_messages_sendMedia) {
            TLRPC$TL_messages_sendMedia tLRPC$TL_messages_sendMedia = (TLRPC$TL_messages_sendMedia) tLObject;
            TLRPC$InputMedia tLRPC$InputMedia = tLRPC$TL_messages_sendMedia.media;
            if (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaPhoto) {
                tLRPC$TL_messages_sendMedia.media = delayedMessage.inputUploadMedia;
            } else if (tLRPC$InputMedia instanceof TLRPC$TL_inputMediaDocument) {
                tLRPC$TL_messages_sendMedia.media = delayedMessage.inputUploadMedia;
            }
        } else if (tLObject instanceof TLRPC$TL_messages_editMessage) {
            TLRPC$TL_messages_editMessage tLRPC$TL_messages_editMessage = (TLRPC$TL_messages_editMessage) tLObject;
            TLRPC$InputMedia tLRPC$InputMedia2 = tLRPC$TL_messages_editMessage.media;
            if (tLRPC$InputMedia2 instanceof TLRPC$TL_inputMediaPhoto) {
                tLRPC$TL_messages_editMessage.media = delayedMessage.inputUploadMedia;
            } else if (tLRPC$InputMedia2 instanceof TLRPC$TL_inputMediaDocument) {
                tLRPC$TL_messages_editMessage.media = delayedMessage.inputUploadMedia;
            }
        }
        delayedMessage.performMediaUpload = true;
        performSendDelayedMessage(delayedMessage);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$50(TLRPC$TL_error tLRPC$TL_error, final TLRPC$Message tLRPC$Message, TLObject tLObject, MessageObject messageObject, String str, final boolean z, TLObject tLObject2) {
        int i = 0;
        TLRPC$Message tLRPC$Message2 = null;
        if (tLRPC$TL_error == null) {
            String str2 = tLRPC$Message.attachPath;
            final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            ArrayList<TLRPC$Update> arrayList = tLRPC$Updates.updates;
            while (true) {
                if (i >= arrayList.size()) {
                    break;
                }
                TLRPC$Update tLRPC$Update = arrayList.get(i);
                if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
                    tLRPC$Message2 = ((TLRPC$TL_updateEditMessage) tLRPC$Update).message;
                    break;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
                    tLRPC$Message2 = ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message;
                    break;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage) {
                    tLRPC$Message2 = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update).message;
                    break;
                } else {
                    i++;
                }
            }
            TLRPC$Message tLRPC$Message3 = tLRPC$Message2;
            if (tLRPC$Message3 != null) {
                ImageLoader.saveMessageThumbs(tLRPC$Message3);
                updateMediaPaths(messageObject, tLRPC$Message3, tLRPC$Message3.id, str, false);
            }
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda70
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$performSendMessageRequest$49(tLRPC$Updates, tLRPC$Message, z);
                }
            });
            if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isNewGifMessage(tLRPC$Message)) {
                stopVideoService(str2);
                return;
            }
            return;
        }
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, null, tLObject2, new Object[0]);
        if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isNewGifMessage(tLRPC$Message)) {
            stopVideoService(tLRPC$Message.attachPath);
        }
        removeFromSendingMessages(tLRPC$Message.id, z);
        revertEditingMessageObject(messageObject);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$49(TLRPC$Updates tLRPC$Updates, final TLRPC$Message tLRPC$Message, final boolean z) {
        getMessagesController().processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda53
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequest$48(tLRPC$Message, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$48(TLRPC$Message tLRPC$Message, boolean z) {
        processSentMessage(tLRPC$Message.id);
        removeFromSendingMessages(tLRPC$Message.id, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$59(final boolean z, TLRPC$TL_error tLRPC$TL_error, final TLRPC$Message tLRPC$Message, TLObject tLObject, final MessageObject messageObject, String str, TLObject tLObject2) {
        boolean z2;
        String str2;
        boolean z3;
        int i;
        LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray;
        TLRPC$Message tLRPC$Message2;
        boolean z4;
        int i2;
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader;
        if (tLRPC$TL_error == null) {
            final int i3 = tLRPC$Message.id;
            final ArrayList arrayList = new ArrayList();
            String str3 = tLRPC$Message.attachPath;
            boolean z5 = tLRPC$Message.date == 2147483646;
            if (tLObject instanceof TLRPC$TL_updateShortSentMessage) {
                final TLRPC$TL_updateShortSentMessage tLRPC$TL_updateShortSentMessage = (TLRPC$TL_updateShortSentMessage) tLObject;
                updateMediaPaths(messageObject, null, tLRPC$TL_updateShortSentMessage.id, null, false);
                int mediaExistanceFlags = messageObject.getMediaExistanceFlags();
                int i4 = tLRPC$TL_updateShortSentMessage.id;
                tLRPC$Message.id = i4;
                tLRPC$Message.local_id = i4;
                tLRPC$Message.date = tLRPC$TL_updateShortSentMessage.date;
                tLRPC$Message.entities = tLRPC$TL_updateShortSentMessage.entities;
                tLRPC$Message.out = tLRPC$TL_updateShortSentMessage.out;
                if ((tLRPC$TL_updateShortSentMessage.flags & ConnectionsManager.FileTypeVideo) != 0) {
                    tLRPC$Message.ttl_period = tLRPC$TL_updateShortSentMessage.ttl_period;
                    tLRPC$Message.flags |= ConnectionsManager.FileTypeVideo;
                }
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$TL_updateShortSentMessage.media;
                if (tLRPC$MessageMedia != null) {
                    tLRPC$Message.media = tLRPC$MessageMedia;
                    tLRPC$Message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                    ImageLoader.saveMessageThumbs(tLRPC$Message);
                }
                TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$TL_updateShortSentMessage.media;
                if (((tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaGame) || (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaInvoice)) && !TextUtils.isEmpty(tLRPC$TL_updateShortSentMessage.message)) {
                    tLRPC$Message.message = tLRPC$TL_updateShortSentMessage.message;
                }
                if (!tLRPC$Message.entities.isEmpty()) {
                    tLRPC$Message.flags |= 128;
                }
                Integer num = getMessagesController().dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Message.dialog_id));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                    getMessagesController().dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                }
                tLRPC$Message.unread = num.intValue() < tLRPC$Message.id;
                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda67
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.this.lambda$performSendMessageRequest$51(tLRPC$TL_updateShortSentMessage);
                    }
                });
                arrayList.add(tLRPC$Message);
                i = mediaExistanceFlags;
                str2 = str3;
                z3 = false;
                z2 = false;
            } else if (tLObject instanceof TLRPC$Updates) {
                final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
                ArrayList<TLRPC$Update> arrayList2 = tLRPC$Updates.updates;
                int i5 = 0;
                while (true) {
                    if (i5 >= arrayList2.size()) {
                        longSparseArray = null;
                        tLRPC$Message2 = null;
                        break;
                    }
                    TLRPC$Update tLRPC$Update = arrayList2.get(i5);
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                        final TLRPC$TL_updateNewMessage tLRPC$TL_updateNewMessage = (TLRPC$TL_updateNewMessage) tLRPC$Update;
                        TLRPC$Message tLRPC$Message3 = tLRPC$TL_updateNewMessage.message;
                        if (tLRPC$Message3.action == null) {
                            arrayList.add(tLRPC$Message3);
                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda65
                                @Override // java.lang.Runnable
                                public final void run() {
                                    SendMessagesHelper.this.lambda$performSendMessageRequest$52(tLRPC$TL_updateNewMessage);
                                }
                            });
                            arrayList2.remove(i5);
                            tLRPC$Message2 = tLRPC$Message3;
                            break;
                        }
                    }
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                        final TLRPC$TL_updateNewChannelMessage tLRPC$TL_updateNewChannelMessage = (TLRPC$TL_updateNewChannelMessage) tLRPC$Update;
                        TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(MessagesController.getUpdateChannelId(tLRPC$TL_updateNewChannelMessage)));
                        if (!(chat == null || chat.megagroup) || (tLRPC$TL_messageReplyHeader = tLRPC$TL_updateNewChannelMessage.message.reply_to) == null || (tLRPC$TL_messageReplyHeader.reply_to_top_id == 0 && tLRPC$TL_messageReplyHeader.reply_to_msg_id == 0)) {
                            longSparseArray = null;
                        } else {
                            longSparseArray = new LongSparseArray<>();
                            long dialogId = MessageObject.getDialogId(tLRPC$TL_updateNewChannelMessage.message);
                            SparseArray<TLRPC$MessageReplies> sparseArray = longSparseArray.get(dialogId);
                            if (sparseArray == null) {
                                sparseArray = new SparseArray<>();
                                longSparseArray.put(dialogId, sparseArray);
                            }
                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader2 = tLRPC$TL_updateNewChannelMessage.message.reply_to;
                            int i6 = tLRPC$TL_messageReplyHeader2.reply_to_top_id;
                            if (i6 == 0) {
                                i6 = tLRPC$TL_messageReplyHeader2.reply_to_msg_id;
                            }
                            TLRPC$MessageReplies tLRPC$MessageReplies = sparseArray.get(i6);
                            if (tLRPC$MessageReplies == null) {
                                tLRPC$MessageReplies = new TLRPC$TL_messageReplies();
                                sparseArray.put(i6, tLRPC$MessageReplies);
                            }
                            TLRPC$Peer tLRPC$Peer = tLRPC$TL_updateNewChannelMessage.message.from_id;
                            if (tLRPC$Peer != null) {
                                tLRPC$MessageReplies.recent_repliers.add(0, tLRPC$Peer);
                            }
                            tLRPC$MessageReplies.replies++;
                        }
                        TLRPC$Message tLRPC$Message4 = tLRPC$TL_updateNewChannelMessage.message;
                        arrayList.add(tLRPC$Message4);
                        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda64
                            @Override // java.lang.Runnable
                            public final void run() {
                                SendMessagesHelper.this.lambda$performSendMessageRequest$53(tLRPC$TL_updateNewChannelMessage);
                            }
                        });
                        arrayList2.remove(i5);
                        tLRPC$Message2 = tLRPC$Message4;
                    } else if (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage) {
                        TLRPC$Message tLRPC$Message5 = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update).message;
                        arrayList.add(tLRPC$Message5);
                        arrayList2.remove(i5);
                        tLRPC$Message2 = tLRPC$Message5;
                        break;
                    } else {
                        i5++;
                    }
                }
                longSparseArray = null;
                if (longSparseArray != null) {
                    getMessagesStorage().putChannelViews(null, null, longSparseArray, true);
                    str2 = str3;
                    getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, null, null, longSparseArray, Boolean.TRUE);
                } else {
                    str2 = str3;
                }
                if (tLRPC$Message2 != null) {
                    MessageObject.getDialogId(tLRPC$Message2);
                    z3 = (!z5 || tLRPC$Message2.date == 2147483646) ? z : false;
                    ImageLoader.saveMessageThumbs(tLRPC$Message2);
                    if (!z3) {
                        Integer num2 = getMessagesController().dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Message2.dialog_id));
                        if (num2 == null) {
                            num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message2.out, tLRPC$Message2.dialog_id));
                            getMessagesController().dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Message2.dialog_id), num2);
                        }
                        tLRPC$Message2.unread = num2.intValue() < tLRPC$Message2.id;
                    }
                    TLRPC$Message tLRPC$Message6 = messageObject.messageOwner;
                    tLRPC$Message6.post_author = tLRPC$Message2.post_author;
                    if ((tLRPC$Message2.flags & ConnectionsManager.FileTypeVideo) != 0) {
                        tLRPC$Message6.ttl_period = tLRPC$Message2.ttl_period;
                        tLRPC$Message6.flags |= ConnectionsManager.FileTypeVideo;
                    }
                    tLRPC$Message6.entities = tLRPC$Message2.entities;
                    updateMediaPaths(messageObject, tLRPC$Message2, tLRPC$Message2.id, str, false);
                    int mediaExistanceFlags2 = messageObject.getMediaExistanceFlags();
                    tLRPC$Message.id = tLRPC$Message2.id;
                    i2 = mediaExistanceFlags2;
                    z4 = false;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        StringBuilder sb = new StringBuilder();
                        for (int i7 = 0; i7 < arrayList2.size(); i7++) {
                            sb.append(arrayList2.get(i7).getClass().getSimpleName());
                            sb.append(", ");
                        }
                        FileLog.d("can't find message in updates " + ((Object) sb));
                    }
                    z3 = z;
                    z4 = true;
                    i2 = 0;
                }
                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda69
                    @Override // java.lang.Runnable
                    public final void run() {
                        SendMessagesHelper.this.lambda$performSendMessageRequest$54(tLRPC$Updates);
                    }
                });
                z2 = z4;
                i = i2;
            } else {
                str2 = str3;
                z3 = z;
                i = 0;
                z2 = false;
            }
            if (MessageObject.isLiveLocationMessage(tLRPC$Message) && tLRPC$Message.via_bot_id == 0 && TextUtils.isEmpty(tLRPC$Message.via_bot_name)) {
                getLocationController().addSharingLocation(tLRPC$Message);
            }
            if (!z2) {
                getStatsController().incrementSentItemsCount(ApplicationLoader.getCurrentNetworkType(), 1, 1);
                tLRPC$Message.send_state = 0;
                if (z && !z3) {
                    ArrayList<Integer> arrayList3 = new ArrayList<>();
                    arrayList3.add(Integer.valueOf(i3));
                    getMessagesController().deleteMessages(arrayList3, null, null, tLRPC$Message.dialog_id, false, true);
                    final String str4 = str2;
                    getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda35
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.this.lambda$performSendMessageRequest$56(arrayList, messageObject, tLRPC$Message, i3, z, str4);
                        }
                    });
                } else {
                    getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i3), Integer.valueOf(tLRPC$Message.id), tLRPC$Message, Long.valueOf(tLRPC$Message.dialog_id), 0L, Integer.valueOf(i), Boolean.valueOf(z));
                    final int i8 = i;
                    final String str5 = str2;
                    getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda49
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.this.lambda$performSendMessageRequest$58(tLRPC$Message, i3, z, arrayList, i8, str5);
                        }
                    });
                }
            }
        } else {
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, null, tLObject2, new Object[0]);
            z2 = true;
        }
        if (z2) {
            getMessagesStorage().markMessageAsSendError(tLRPC$Message, z);
            tLRPC$Message.send_state = 2;
            getNotificationCenter().postNotificationName(NotificationCenter.messageSendError, Integer.valueOf(tLRPC$Message.id));
            processSentMessage(tLRPC$Message.id);
            if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isNewGifMessage(tLRPC$Message)) {
                stopVideoService(tLRPC$Message.attachPath);
            }
            removeFromSendingMessages(tLRPC$Message.id, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$51(TLRPC$TL_updateShortSentMessage tLRPC$TL_updateShortSentMessage) {
        getMessagesController().processNewDifferenceParams(-1, tLRPC$TL_updateShortSentMessage.pts, tLRPC$TL_updateShortSentMessage.date, tLRPC$TL_updateShortSentMessage.pts_count);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$52(TLRPC$TL_updateNewMessage tLRPC$TL_updateNewMessage) {
        getMessagesController().processNewDifferenceParams(-1, tLRPC$TL_updateNewMessage.pts, -1, tLRPC$TL_updateNewMessage.pts_count);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$53(TLRPC$TL_updateNewChannelMessage tLRPC$TL_updateNewChannelMessage) {
        getMessagesController().processNewChannelDifferenceParams(tLRPC$TL_updateNewChannelMessage.pts, tLRPC$TL_updateNewChannelMessage.pts_count, tLRPC$TL_updateNewChannelMessage.message.peer_id.channel_id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$54(TLRPC$Updates tLRPC$Updates) {
        getMessagesController().processUpdates(tLRPC$Updates, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$56(ArrayList arrayList, final MessageObject messageObject, final TLRPC$Message tLRPC$Message, final int i, final boolean z, String str) {
        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList, true, false, false, 0, false, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequest$55(messageObject, tLRPC$Message, i, z);
            }
        });
        if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isNewGifMessage(tLRPC$Message)) {
            stopVideoService(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$55(MessageObject messageObject, TLRPC$Message tLRPC$Message, int i, boolean z) {
        ArrayList<MessageObject> arrayList = new ArrayList<>();
        arrayList.add(new MessageObject(messageObject.currentAccount, messageObject.messageOwner, true, true));
        getMessagesController().updateInterfaceWithMessages(tLRPC$Message.dialog_id, arrayList, false);
        getMediaDataController().increasePeerRaiting(tLRPC$Message.dialog_id);
        processSentMessage(i);
        removeFromSendingMessages(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$58(final TLRPC$Message tLRPC$Message, final int i, final boolean z, ArrayList arrayList, final int i2, String str) {
        getMessagesStorage().updateMessageStateAndId(tLRPC$Message.random_id, MessageObject.getPeerId(tLRPC$Message.peer_id), Integer.valueOf(i), tLRPC$Message.id, 0, false, z ? 1 : 0);
        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList, true, false, false, 0, z, 0);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda47
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequest$57(tLRPC$Message, i, i2, z);
            }
        });
        if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isNewGifMessage(tLRPC$Message)) {
            stopVideoService(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$57(TLRPC$Message tLRPC$Message, int i, int i2, boolean z) {
        getMediaDataController().increasePeerRaiting(tLRPC$Message.dialog_id);
        getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i), Integer.valueOf(tLRPC$Message.id), tLRPC$Message, Long.valueOf(tLRPC$Message.dialog_id), 0L, Integer.valueOf(i2), Boolean.valueOf(z));
        processSentMessage(i);
        removeFromSendingMessages(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$62(final TLRPC$Message tLRPC$Message) {
        final int i = tLRPC$Message.id;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda46
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$performSendMessageRequest$61(tLRPC$Message, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performSendMessageRequest$61(TLRPC$Message tLRPC$Message, int i) {
        tLRPC$Message.send_state = 0;
        getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByAck, Integer.valueOf(i));
    }

    /* JADX WARN: Removed duplicated region for block: B:141:0x02f5  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x00da  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x010a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateMediaPaths(MessageObject messageObject, TLRPC$Message tLRPC$Message, int i, String str, boolean z) {
        TLRPC$PhotoSize tLRPC$PhotoSize;
        TLRPC$FileLocation tLRPC$FileLocation;
        byte[] bArr;
        boolean z2;
        String str2;
        TLRPC$FileLocation tLRPC$FileLocation2;
        VideoEditedInfo videoEditedInfo;
        boolean z3;
        String str3;
        File file;
        TLRPC$PhotoSize closestPhotoSizeWithSize;
        TLObject tLObject;
        TLRPC$MessageMedia tLRPC$MessageMedia;
        TLRPC$WebPage tLRPC$WebPage;
        TLRPC$Document tLRPC$Document;
        TLRPC$MessageMedia tLRPC$MessageMedia2;
        TLRPC$WebPage tLRPC$WebPage2;
        TLRPC$Photo tLRPC$Photo;
        TLRPC$MessageMedia tLRPC$MessageMedia3;
        TLRPC$Document tLRPC$Document2;
        TLRPC$MessageMedia tLRPC$MessageMedia4;
        TLRPC$Photo tLRPC$Photo2;
        TLRPC$Message tLRPC$Message2 = messageObject.messageOwner;
        if (tLRPC$Message2.media != null) {
            if (messageObject.isLiveLocation()) {
                TLRPC$MessageMedia tLRPC$MessageMedia5 = tLRPC$Message.media;
                if (tLRPC$MessageMedia5 instanceof TLRPC$TL_messageMediaGeoLive) {
                    tLRPC$Message2.media.period = tLRPC$MessageMedia5.period;
                    closestPhotoSizeWithSize = null;
                    tLRPC$PhotoSize = null;
                    tLObject = null;
                    if ((tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) && (closestPhotoSizeWithSize instanceof TLRPC$TL_photoStrippedSize)) {
                        ImageLoader.getInstance().replaceImageInCache("stripped" + FileRefController.getKeyForParentObject(messageObject), tLRPC$Message == null ? "stripped" + FileRefController.getKeyForParentObject(tLRPC$Message) : "strippedmessage" + i + "_" + messageObject.getChannelId() + "_" + messageObject.scheduled, ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), z);
                    }
                }
            }
            if (messageObject.isDice()) {
                ((TLRPC$TL_messageMediaDice) tLRPC$Message2.media).value = ((TLRPC$TL_messageMediaDice) tLRPC$Message.media).value;
            } else {
                TLRPC$MessageMedia tLRPC$MessageMedia6 = tLRPC$Message2.media;
                TLRPC$Photo tLRPC$Photo3 = tLRPC$MessageMedia6.photo;
                if (tLRPC$Photo3 != null) {
                    closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo3.sizes, 40);
                    tLRPC$PhotoSize = (tLRPC$Message == null || (tLRPC$MessageMedia4 = tLRPC$Message.media) == null || (tLRPC$Photo2 = tLRPC$MessageMedia4.photo) == null) ? closestPhotoSizeWithSize : FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo2.sizes, 40);
                    tLObject = tLRPC$Message2.media.photo;
                } else {
                    TLRPC$Document tLRPC$Document3 = tLRPC$MessageMedia6.document;
                    if (tLRPC$Document3 != null) {
                        closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document3.thumbs, 40);
                        tLRPC$PhotoSize = (tLRPC$Message == null || (tLRPC$MessageMedia3 = tLRPC$Message.media) == null || (tLRPC$Document2 = tLRPC$MessageMedia3.document) == null) ? closestPhotoSizeWithSize : FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document2.thumbs, 40);
                        tLObject = tLRPC$Message2.media.document;
                    } else {
                        TLRPC$WebPage tLRPC$WebPage3 = tLRPC$MessageMedia6.webpage;
                        if (tLRPC$WebPage3 != null) {
                            TLRPC$Photo tLRPC$Photo4 = tLRPC$WebPage3.photo;
                            if (tLRPC$Photo4 != null) {
                                closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo4.sizes, 40);
                                tLRPC$PhotoSize = (tLRPC$Message == null || (tLRPC$MessageMedia2 = tLRPC$Message.media) == null || (tLRPC$WebPage2 = tLRPC$MessageMedia2.webpage) == null || (tLRPC$Photo = tLRPC$WebPage2.photo) == null) ? closestPhotoSizeWithSize : FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 40);
                                tLObject = tLRPC$Message2.media.webpage.photo;
                            } else {
                                TLRPC$Document tLRPC$Document4 = tLRPC$WebPage3.document;
                                if (tLRPC$Document4 != null) {
                                    closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document4.thumbs, 40);
                                    tLRPC$PhotoSize = (tLRPC$Message == null || (tLRPC$MessageMedia = tLRPC$Message.media) == null || (tLRPC$WebPage = tLRPC$MessageMedia.webpage) == null || (tLRPC$Document = tLRPC$WebPage.document) == null) ? closestPhotoSizeWithSize : FileLoader.getClosestPhotoSizeWithSize(tLRPC$Document.thumbs, 40);
                                    tLObject = tLRPC$Message2.media.webpage.document;
                                }
                            }
                        }
                    }
                }
                if (tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) {
                    if (tLRPC$Message == null) {
                    }
                    ImageLoader.getInstance().replaceImageInCache("stripped" + FileRefController.getKeyForParentObject(messageObject), tLRPC$Message == null ? "stripped" + FileRefController.getKeyForParentObject(tLRPC$Message) : "strippedmessage" + i + "_" + messageObject.getChannelId() + "_" + messageObject.scheduled, ImageLocation.getForObject(tLRPC$PhotoSize, tLObject), z);
                }
            }
            closestPhotoSizeWithSize = null;
            tLRPC$PhotoSize = null;
            tLObject = null;
            if (tLRPC$PhotoSize instanceof TLRPC$TL_photoStrippedSize) {
            }
        } else {
            tLRPC$PhotoSize = null;
        }
        if (tLRPC$Message == null) {
            return;
        }
        TLRPC$MessageMedia tLRPC$MessageMedia7 = tLRPC$Message.media;
        int i2 = 1;
        if ((tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaPhoto) && tLRPC$MessageMedia7.photo != null) {
            TLRPC$MessageMedia tLRPC$MessageMedia8 = tLRPC$Message2.media;
            if ((tLRPC$MessageMedia8 instanceof TLRPC$TL_messageMediaPhoto) && tLRPC$MessageMedia8.photo != null) {
                if (tLRPC$MessageMedia7.ttl_seconds == 0 && !messageObject.scheduled) {
                    getMessagesStorage().putSentFile(str, tLRPC$Message.media.photo, 0, "sent_" + tLRPC$Message.peer_id.channel_id + "_" + tLRPC$Message.id + "_" + DialogObject.getPeerDialogId(tLRPC$Message.peer_id) + "_1_" + messageObject.getSize());
                }
                if (tLRPC$Message2.media.photo.sizes.size() == 1 && (tLRPC$Message2.media.photo.sizes.get(0).location instanceof TLRPC$TL_fileLocationUnavailable)) {
                    tLRPC$Message2.media.photo.sizes = tLRPC$Message.media.photo.sizes;
                } else {
                    int i3 = 0;
                    while (i3 < tLRPC$Message2.media.photo.sizes.size()) {
                        TLRPC$PhotoSize tLRPC$PhotoSize2 = tLRPC$Message2.media.photo.sizes.get(i3);
                        if (tLRPC$PhotoSize2 != null && tLRPC$PhotoSize2.location != null && tLRPC$PhotoSize2.type != null) {
                            int i4 = 0;
                            while (i4 < tLRPC$Message.media.photo.sizes.size()) {
                                TLRPC$PhotoSize tLRPC$PhotoSize3 = tLRPC$Message.media.photo.sizes.get(i4);
                                if (tLRPC$PhotoSize3 == null || tLRPC$PhotoSize3.location == null || (tLRPC$PhotoSize3 instanceof TLRPC$TL_photoSizeEmpty) || (str3 = tLRPC$PhotoSize3.type) == null || !((tLRPC$PhotoSize2.location.volume_id == -2147483648L && str3.equals(tLRPC$PhotoSize2.type)) || (tLRPC$PhotoSize3.w == tLRPC$PhotoSize2.w && tLRPC$PhotoSize3.h == tLRPC$PhotoSize2.h))) {
                                    i4++;
                                    i2 = 1;
                                } else {
                                    String str4 = tLRPC$PhotoSize2.location.volume_id + "_" + tLRPC$PhotoSize2.location.local_id;
                                    String str5 = tLRPC$PhotoSize3.location.volume_id + "_" + tLRPC$PhotoSize3.location.local_id;
                                    if (!str4.equals(str5)) {
                                        File file2 = new File(FileLoader.getDirectory(4), str4 + ".jpg");
                                        TLRPC$MessageMedia tLRPC$MessageMedia9 = tLRPC$Message.media;
                                        if (tLRPC$MessageMedia9.ttl_seconds == 0 && (tLRPC$MessageMedia9.photo.sizes.size() == i2 || tLRPC$PhotoSize3.w > 90 || tLRPC$PhotoSize3.h > 90)) {
                                            file = FileLoader.getInstance(this.currentAccount).getPathToAttach(tLRPC$PhotoSize3);
                                        } else {
                                            file = new File(FileLoader.getDirectory(4), str5 + ".jpg");
                                        }
                                        file2.renameTo(file);
                                        ImageLoader.getInstance().replaceImageInCache(str4, str5, ImageLocation.getForPhoto(tLRPC$PhotoSize3, tLRPC$Message.media.photo), z);
                                        tLRPC$PhotoSize2.location = tLRPC$PhotoSize3.location;
                                        tLRPC$PhotoSize2.size = tLRPC$PhotoSize3.size;
                                    }
                                    z3 = true;
                                    if (!z3) {
                                        String str6 = tLRPC$PhotoSize2.location.volume_id + "_" + tLRPC$PhotoSize2.location.local_id;
                                        new File(FileLoader.getDirectory(4), str6 + ".jpg").delete();
                                        if ("s".equals(tLRPC$PhotoSize2.type) && tLRPC$PhotoSize != null) {
                                            tLRPC$Message2.media.photo.sizes.set(i3, tLRPC$PhotoSize);
                                            ImageLocation forPhoto = ImageLocation.getForPhoto(tLRPC$PhotoSize, tLRPC$Message.media.photo);
                                            ImageLoader.getInstance().replaceImageInCache(str6, forPhoto.getKey(tLRPC$Message, null, false), forPhoto, z);
                                            i3++;
                                            i2 = 1;
                                        }
                                    }
                                }
                            }
                            z3 = false;
                            if (!z3) {
                            }
                        }
                        i3++;
                        i2 = 1;
                    }
                }
                tLRPC$Message2.message = tLRPC$Message.message;
                tLRPC$Message.attachPath = tLRPC$Message2.attachPath;
                TLRPC$Photo tLRPC$Photo5 = tLRPC$Message2.media.photo;
                TLRPC$Photo tLRPC$Photo6 = tLRPC$Message.media.photo;
                tLRPC$Photo5.id = tLRPC$Photo6.id;
                tLRPC$Photo5.dc_id = tLRPC$Photo6.dc_id;
                tLRPC$Photo5.access_hash = tLRPC$Photo6.access_hash;
                return;
            }
        }
        if ((tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaDocument) && tLRPC$MessageMedia7.document != null) {
            TLRPC$MessageMedia tLRPC$MessageMedia10 = tLRPC$Message2.media;
            if ((tLRPC$MessageMedia10 instanceof TLRPC$TL_messageMediaDocument) && tLRPC$MessageMedia10.document != null) {
                if (tLRPC$MessageMedia7.ttl_seconds == 0 && ((videoEditedInfo = messageObject.videoEditedInfo) == null || (videoEditedInfo.mediaEntities == null && TextUtils.isEmpty(videoEditedInfo.paintPath) && messageObject.videoEditedInfo.cropState == null))) {
                    boolean isVideoMessage = MessageObject.isVideoMessage(tLRPC$Message);
                    if ((isVideoMessage || MessageObject.isGifMessage(tLRPC$Message)) && MessageObject.isGifDocument(tLRPC$Message.media.document) == MessageObject.isGifDocument(tLRPC$Message2.media.document)) {
                        if (!messageObject.scheduled) {
                            MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, false, false);
                            getMessagesStorage().putSentFile(str, tLRPC$Message.media.document, 2, "sent_" + tLRPC$Message.peer_id.channel_id + "_" + tLRPC$Message.id + "_" + DialogObject.getPeerDialogId(tLRPC$Message.peer_id) + "_" + messageObject2.type + "_" + messageObject2.getSize());
                        }
                        if (isVideoMessage) {
                            tLRPC$Message.attachPath = tLRPC$Message2.attachPath;
                        }
                    } else if (!MessageObject.isVoiceMessage(tLRPC$Message) && !MessageObject.isRoundVideoMessage(tLRPC$Message) && !messageObject.scheduled) {
                        MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, false, false);
                        getMessagesStorage().putSentFile(str, tLRPC$Message.media.document, 1, "sent_" + tLRPC$Message.peer_id.channel_id + "_" + tLRPC$Message.id + "_" + DialogObject.getPeerDialogId(tLRPC$Message.peer_id) + "_" + messageObject3.type + "_" + messageObject3.getSize());
                    }
                }
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Message2.media.document.thumbs, 320);
                TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Message.media.document.thumbs, 320);
                if (closestPhotoSizeWithSize2 != null && (tLRPC$FileLocation2 = closestPhotoSizeWithSize2.location) != null && tLRPC$FileLocation2.volume_id == -2147483648L && closestPhotoSizeWithSize3 != null && closestPhotoSizeWithSize3.location != null && !(closestPhotoSizeWithSize3 instanceof TLRPC$TL_photoSizeEmpty) && !(closestPhotoSizeWithSize2 instanceof TLRPC$TL_photoSizeEmpty)) {
                    String str7 = closestPhotoSizeWithSize2.location.volume_id + "_" + closestPhotoSizeWithSize2.location.local_id;
                    String str8 = closestPhotoSizeWithSize3.location.volume_id + "_" + closestPhotoSizeWithSize3.location.local_id;
                    if (!str7.equals(str8)) {
                        new File(FileLoader.getDirectory(4), str7 + ".jpg").renameTo(new File(FileLoader.getDirectory(4), str8 + ".jpg"));
                        ImageLoader.getInstance().replaceImageInCache(str7, str8, ImageLocation.getForDocument(closestPhotoSizeWithSize3, tLRPC$Message.media.document), z);
                        closestPhotoSizeWithSize2.location = closestPhotoSizeWithSize3.location;
                        closestPhotoSizeWithSize2.size = closestPhotoSizeWithSize3.size;
                    }
                } else if (closestPhotoSizeWithSize3 != null && closestPhotoSizeWithSize2 != null && MessageObject.isStickerMessage(tLRPC$Message) && (tLRPC$FileLocation = closestPhotoSizeWithSize2.location) != null) {
                    closestPhotoSizeWithSize3.location = tLRPC$FileLocation;
                } else if (closestPhotoSizeWithSize2 == null || (closestPhotoSizeWithSize2.location instanceof TLRPC$TL_fileLocationUnavailable) || (closestPhotoSizeWithSize2 instanceof TLRPC$TL_photoSizeEmpty)) {
                    tLRPC$Message2.media.document.thumbs = tLRPC$Message.media.document.thumbs;
                }
                TLRPC$Document tLRPC$Document5 = tLRPC$Message2.media.document;
                TLRPC$Document tLRPC$Document6 = tLRPC$Message.media.document;
                tLRPC$Document5.dc_id = tLRPC$Document6.dc_id;
                tLRPC$Document5.id = tLRPC$Document6.id;
                tLRPC$Document5.access_hash = tLRPC$Document6.access_hash;
                int i5 = 0;
                while (true) {
                    if (i5 >= tLRPC$Message2.media.document.attributes.size()) {
                        bArr = null;
                        break;
                    }
                    TLRPC$DocumentAttribute tLRPC$DocumentAttribute = tLRPC$Message2.media.document.attributes.get(i5);
                    if (tLRPC$DocumentAttribute instanceof TLRPC$TL_documentAttributeAudio) {
                        bArr = tLRPC$DocumentAttribute.waveform;
                        break;
                    }
                    i5++;
                }
                tLRPC$Message2.media.document.attributes = tLRPC$Message.media.document.attributes;
                if (bArr != null) {
                    for (int i6 = 0; i6 < tLRPC$Message2.media.document.attributes.size(); i6++) {
                        TLRPC$DocumentAttribute tLRPC$DocumentAttribute2 = tLRPC$Message2.media.document.attributes.get(i6);
                        if (tLRPC$DocumentAttribute2 instanceof TLRPC$TL_documentAttributeAudio) {
                            tLRPC$DocumentAttribute2.waveform = bArr;
                            tLRPC$DocumentAttribute2.flags |= 4;
                        }
                    }
                }
                TLRPC$Document tLRPC$Document7 = tLRPC$Message2.media.document;
                TLRPC$Document tLRPC$Document8 = tLRPC$Message.media.document;
                tLRPC$Document7.size = tLRPC$Document8.size;
                tLRPC$Document7.mime_type = tLRPC$Document8.mime_type;
                if ((tLRPC$Message.flags & 4) == 0 && MessageObject.isOut(tLRPC$Message)) {
                    if (MessageObject.isNewGifDocument(tLRPC$Message.media.document)) {
                        if (MessageObject.isDocumentHasAttachedStickers(tLRPC$Message.media.document) ? getMessagesController().saveGifsWithStickers : true) {
                            getMediaDataController().addRecentGif(tLRPC$Message.media.document, tLRPC$Message.date, true);
                        }
                    } else if (MessageObject.isStickerDocument(tLRPC$Message.media.document) || MessageObject.isAnimatedStickerDocument(tLRPC$Message.media.document, true)) {
                        z2 = true;
                        getMediaDataController().addRecentSticker(0, tLRPC$Message, tLRPC$Message.media.document, tLRPC$Message.date, false);
                        str2 = tLRPC$Message2.attachPath;
                        if (str2 == null && str2.startsWith(FileLoader.getDirectory(4).getAbsolutePath())) {
                            File file3 = new File(tLRPC$Message2.attachPath);
                            FileLoader fileLoader = FileLoader.getInstance(this.currentAccount);
                            TLRPC$MessageMedia tLRPC$MessageMedia11 = tLRPC$Message.media;
                            File pathToAttach = fileLoader.getPathToAttach(tLRPC$MessageMedia11.document, tLRPC$MessageMedia11.ttl_seconds != 0);
                            if (!file3.renameTo(pathToAttach)) {
                                if (file3.exists()) {
                                    tLRPC$Message.attachPath = tLRPC$Message2.attachPath;
                                } else {
                                    messageObject.attachPathExists = false;
                                }
                                messageObject.mediaExists = pathToAttach.exists();
                                tLRPC$Message.message = tLRPC$Message2.message;
                                return;
                            } else if (MessageObject.isVideoMessage(tLRPC$Message)) {
                                messageObject.attachPathExists = z2;
                                return;
                            } else {
                                messageObject.mediaExists = messageObject.attachPathExists;
                                messageObject.attachPathExists = false;
                                tLRPC$Message2.attachPath = "";
                                if (str == null || !str.startsWith("http")) {
                                    return;
                                }
                                getMessagesStorage().addRecentLocalFile(str, pathToAttach.toString(), tLRPC$Message2.media.document);
                                return;
                            }
                        }
                        tLRPC$Message.attachPath = tLRPC$Message2.attachPath;
                        tLRPC$Message.message = tLRPC$Message2.message;
                        return;
                    }
                }
                z2 = true;
                str2 = tLRPC$Message2.attachPath;
                if (str2 == null) {
                }
                tLRPC$Message.attachPath = tLRPC$Message2.attachPath;
                tLRPC$Message.message = tLRPC$Message2.message;
                return;
            }
        }
        if ((tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaContact) && (tLRPC$Message2.media instanceof TLRPC$TL_messageMediaContact)) {
            tLRPC$Message2.media = tLRPC$MessageMedia7;
        } else if (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaWebPage) {
            tLRPC$Message2.media = tLRPC$MessageMedia7;
        } else if (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaGeo) {
            TLRPC$GeoPoint tLRPC$GeoPoint = tLRPC$MessageMedia7.geo;
            TLRPC$GeoPoint tLRPC$GeoPoint2 = tLRPC$Message2.media.geo;
            tLRPC$GeoPoint.lat = tLRPC$GeoPoint2.lat;
            tLRPC$GeoPoint._long = tLRPC$GeoPoint2._long;
        } else if ((tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaGame) || (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaInvoice)) {
            tLRPC$Message2.media = tLRPC$MessageMedia7;
            if (!TextUtils.isEmpty(tLRPC$Message.message)) {
                tLRPC$Message2.entities = tLRPC$Message.entities;
                tLRPC$Message2.message = tLRPC$Message.message;
            }
            TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
            if (tLRPC$ReplyMarkup != null) {
                tLRPC$Message2.reply_markup = tLRPC$ReplyMarkup;
                tLRPC$Message2.flags |= 64;
            }
        } else if (tLRPC$MessageMedia7 instanceof TLRPC$TL_messageMediaPoll) {
            tLRPC$Message2.media = tLRPC$MessageMedia7;
        }
    }

    private void putToDelayedMessages(String str, DelayedMessage delayedMessage) {
        ArrayList<DelayedMessage> arrayList = this.delayedMessages.get(str);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.delayedMessages.put(str, arrayList);
        }
        arrayList.add(delayedMessage);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public ArrayList<DelayedMessage> getDelayedMessages(String str) {
        return this.delayedMessages.get(str);
    }

    public long getNextRandomId() {
        long j = 0;
        while (j == 0) {
            j = Utilities.random.nextLong();
        }
        return j;
    }

    public void checkUnsentMessages() {
        getMessagesStorage().getUnsentMessages(1000);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public void processUnsentMessages(final ArrayList<TLRPC$Message> arrayList, final ArrayList<TLRPC$Message> arrayList2, final ArrayList<TLRPC$User> arrayList3, final ArrayList<TLRPC$Chat> arrayList4, final ArrayList<TLRPC$EncryptedChat> arrayList5) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$processUnsentMessages$63(arrayList3, arrayList4, arrayList5, arrayList, arrayList2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$processUnsentMessages$63(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5) {
        HashMap<String, String> hashMap;
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        int size = arrayList4.size();
        for (int i = 0; i < size; i++) {
            MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC$Message) arrayList4.get(i), false, true);
            long groupId = messageObject.getGroupId();
            if (groupId != 0 && (hashMap = messageObject.messageOwner.params) != null && !hashMap.containsKey("final") && (i == size - 1 || ((TLRPC$Message) arrayList4.get(i + 1)).grouped_id != groupId)) {
                messageObject.messageOwner.params.put("final", "1");
            }
            retrySendMessage(messageObject, true);
        }
        if (arrayList5 != null) {
            for (int i2 = 0; i2 < arrayList5.size(); i2++) {
                MessageObject messageObject2 = new MessageObject(this.currentAccount, (TLRPC$Message) arrayList5.get(i2), false, true);
                messageObject2.scheduled = true;
                retrySendMessage(messageObject2, true);
            }
        }
    }

    public ImportingStickers getImportingStickers(String str) {
        return this.importingStickersMap.get(str);
    }

    public ImportingHistory getImportingHistory(long j) {
        return this.importingHistoryMap.get(j);
    }

    public boolean isImportingStickers() {
        return this.importingStickersMap.size() != 0;
    }

    public boolean isImportingHistory() {
        return this.importingHistoryMap.size() != 0;
    }

    public void prepareImportHistory(final long j, final Uri uri, final ArrayList<Uri> arrayList, final MessagesStorage.LongCallback longCallback) {
        if (this.importingHistoryMap.get(j) != null) {
            longCallback.run(0L);
            return;
        }
        if (DialogObject.isChatDialog(j)) {
            long j2 = -j;
            TLRPC$Chat chat = getMessagesController().getChat(Long.valueOf(j2));
            if (chat != null && !chat.megagroup) {
                getMessagesController().convertToMegaGroup(null, j2, null, new MessagesStorage.LongCallback() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda78
                    @Override // org.telegram.messenger.MessagesStorage.LongCallback
                    public final void run(long j3) {
                        SendMessagesHelper.this.lambda$prepareImportHistory$64(uri, arrayList, longCallback, j3);
                    }
                });
                return;
            }
        }
        new Thread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda32
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$prepareImportHistory$69(arrayList, j, uri, longCallback);
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$prepareImportHistory$64(Uri uri, ArrayList arrayList, MessagesStorage.LongCallback longCallback, long j) {
        if (j != 0) {
            prepareImportHistory(-j, uri, arrayList, longCallback);
        } else {
            longCallback.run(0L);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$prepareImportHistory$69(ArrayList arrayList, final long j, Uri uri, final MessagesStorage.LongCallback longCallback) {
        ArrayList arrayList2 = arrayList != null ? arrayList : new ArrayList();
        final ImportingHistory importingHistory = new ImportingHistory();
        importingHistory.mediaPaths = arrayList2;
        importingHistory.dialogId = j;
        importingHistory.peer = getMessagesController().getInputPeer(j);
        final HashMap hashMap = new HashMap();
        int i = 0;
        int size = arrayList2.size();
        while (i < size + 1) {
            Uri uri2 = i == 0 ? uri : (Uri) arrayList2.get(i - 1);
            if (uri2 != null && !AndroidUtilities.isInternalUri(uri2)) {
                String copyFileToCache = MediaController.copyFileToCache(uri2, "txt");
                if (copyFileToCache == null) {
                    continue;
                } else {
                    File file = new File(copyFileToCache);
                    if (file.exists()) {
                        long length = file.length();
                        if (length != 0) {
                            importingHistory.totalSize += length;
                            if (i != 0) {
                                importingHistory.uploadMedia.add(copyFileToCache);
                            } else if (length > 33554432) {
                                file.delete();
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda19
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareImportHistory$67(MessagesStorage.LongCallback.this);
                                    }
                                });
                                return;
                            } else {
                                importingHistory.historyPath = copyFileToCache;
                            }
                            importingHistory.uploadSet.add(copyFileToCache);
                            hashMap.put(copyFileToCache, importingHistory);
                        }
                    }
                    if (i == 0) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda18
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesStorage.LongCallback.this.run(0L);
                            }
                        });
                        return;
                    }
                }
            } else if (i == 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda17
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.LongCallback.this.run(0L);
                    }
                });
                return;
            }
            i++;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda36
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$prepareImportHistory$68(hashMap, j, importingHistory, longCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareImportHistory$67(MessagesStorage.LongCallback longCallback) {
        Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("ImportFileTooLarge", R.string.ImportFileTooLarge), 0).show();
        longCallback.run(0L);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$prepareImportHistory$68(HashMap hashMap, long j, ImportingHistory importingHistory, MessagesStorage.LongCallback longCallback) {
        this.importingHistoryFiles.putAll(hashMap);
        this.importingHistoryMap.put(j, importingHistory);
        getFileLoader().uploadFile(importingHistory.historyPath, false, true, 0L, ConnectionsManager.FileTypeFile, true);
        getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, Long.valueOf(j));
        longCallback.run(j);
        try {
            ApplicationLoader.applicationContext.startService(new Intent(ApplicationLoader.applicationContext, ImportingService.class));
        } catch (Throwable th) {
            FileLog.e(th);
        }
    }

    public void prepareImportStickers(final String str, final String str2, final String str3, final ArrayList<ImportingSticker> arrayList, final MessagesStorage.StringCallback stringCallback) {
        if (this.importingStickersMap.get(str2) != null) {
            stringCallback.run(null);
        } else {
            new Thread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda29
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.this.lambda$prepareImportStickers$72(str, str2, str3, arrayList, stringCallback);
                }
            }).start();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$prepareImportStickers$72(String str, final String str2, String str3, ArrayList arrayList, final MessagesStorage.StringCallback stringCallback) {
        final ImportingStickers importingStickers = new ImportingStickers();
        importingStickers.title = str;
        importingStickers.shortName = str2;
        importingStickers.software = str3;
        final HashMap hashMap = new HashMap();
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            ImportingSticker importingSticker = (ImportingSticker) arrayList.get(i);
            File file = new File(importingSticker.path);
            if (file.exists()) {
                long length = file.length();
                if (length != 0) {
                    importingStickers.totalSize += length;
                    importingStickers.uploadMedia.add(importingSticker);
                    importingStickers.uploadSet.put(importingSticker.path, importingSticker);
                    hashMap.put(importingSticker.path, importingStickers);
                }
            }
            if (i == 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda20
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesStorage.StringCallback.this.run(null);
                    }
                });
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda41
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.this.lambda$prepareImportStickers$71(importingStickers, hashMap, str2, stringCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$prepareImportStickers$71(ImportingStickers importingStickers, HashMap hashMap, String str, MessagesStorage.StringCallback stringCallback) {
        if (importingStickers.uploadMedia.get(0).item != null) {
            importingStickers.startImport();
        } else {
            this.importingStickersFiles.putAll(hashMap);
            this.importingStickersMap.put(str, importingStickers);
            importingStickers.initImport();
            getNotificationCenter().postNotificationName(NotificationCenter.historyImportProgressChanged, str);
            stringCallback.run(str);
        }
        try {
            ApplicationLoader.applicationContext.startService(new Intent(ApplicationLoader.applicationContext, ImportingService.class));
        } catch (Throwable th) {
            FileLog.e(th);
        }
    }

    public TLRPC$TL_photo generatePhotoSizes(String str, Uri uri) {
        return generatePhotoSizes(null, str, uri);
    }

    public TLRPC$TL_photo generatePhotoSizes(TLRPC$TL_photo tLRPC$TL_photo, String str, Uri uri) {
        Bitmap loadBitmap = ImageLoader.loadBitmap(str, uri, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), true);
        if (loadBitmap == null) {
            loadBitmap = ImageLoader.loadBitmap(str, uri, 800.0f, 800.0f, true);
        }
        ArrayList<TLRPC$PhotoSize> arrayList = new ArrayList<>();
        TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(loadBitmap, 90.0f, 90.0f, 55, true);
        if (scaleAndSaveImage != null) {
            arrayList.add(scaleAndSaveImage);
        }
        TLRPC$PhotoSize scaleAndSaveImage2 = ImageLoader.scaleAndSaveImage(loadBitmap, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), true, 80, false, (int) FileLoader.MEDIA_DIR_VIDEO_PUBLIC, (int) FileLoader.MEDIA_DIR_VIDEO_PUBLIC);
        if (scaleAndSaveImage2 != null) {
            arrayList.add(scaleAndSaveImage2);
        }
        if (loadBitmap != null) {
            loadBitmap.recycle();
        }
        if (arrayList.isEmpty()) {
            return null;
        }
        getUserConfig().saveConfig(false);
        if (tLRPC$TL_photo == null) {
            tLRPC$TL_photo = new TLRPC$TL_photo();
        }
        tLRPC$TL_photo.date = getConnectionsManager().getCurrentTime();
        tLRPC$TL_photo.sizes = arrayList;
        tLRPC$TL_photo.file_reference = new byte[0];
        return tLRPC$TL_photo;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Can't wrap try/catch for region: R(28:(5:242|243|244|245|(10:247|248|249|250|251|252|253|254|255|256)(1:295))|(3:266|267|(28:269|270|(25:272|260|261|262|(6:53|(1:55)|56|(1:58)|59|(1:61))(1:241)|(2:63|(18:65|66|(1:234)(7:69|(1:71)(1:233)|72|(1:232)(1:76)|(1:231)(4:81|(1:83)(1:230)|84|(2:88|89))|229|89)|90|(11:92|(1:94)|95|(3:97|98|100)(1:227)|(3:110|111|(10:113|114|115|116|(1:118)|119|120|(1:194)(8:123|124|125|126|127|128|129|(2:136|137))|187|137))|201|120|(0)|194|187|137)(1:228)|(1:139)(1:186)|140|(1:142)|143|(1:146)|(1:148)|149|(2:151|(2:171|(2:181|(1:183)(1:184))(1:177))(4:155|(1:170)(2:(1:169)(1:162)|(2:164|(1:166)))|167|168))(1:185)|178|(0)|170|167|168)(2:(1:236)(1:239)|237))(1:240)|238|66|(0)|234|90|(0)(0)|(0)(0)|140|(0)|143|(1:146)|(0)|149|(0)(0)|178|(0)|170|167|168)|259|260|261|262|(0)(0)|(0)(0)|238|66|(0)|234|90|(0)(0)|(0)(0)|140|(0)|143|(0)|(0)|149|(0)(0)|178|(0)|170|167|168))|258|259|260|261|262|(0)(0)|(0)(0)|238|66|(0)|234|90|(0)(0)|(0)(0)|140|(0)|143|(0)|(0)|149|(0)(0)|178|(0)|170|167|168) */
    /* JADX WARN: Code restructure failed: missing block: B:32:0x0059, code lost:
        if (r3 == false) goto L327;
     */
    /* JADX WARN: Code restructure failed: missing block: B:95:0x014a, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:96:0x014b, code lost:
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Removed duplicated region for block: B:124:0x01a0  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x01b8  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x01c4  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x01e6  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x01e9  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0227  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x022d A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:184:0x02eb  */
    /* JADX WARN: Removed duplicated region for block: B:251:0x03f8 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:273:0x046f  */
    /* JADX WARN: Removed duplicated region for block: B:275:0x0479  */
    /* JADX WARN: Removed duplicated region for block: B:276:0x047f  */
    /* JADX WARN: Removed duplicated region for block: B:279:0x0489  */
    /* JADX WARN: Removed duplicated region for block: B:282:0x0492 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:285:0x049b  */
    /* JADX WARN: Removed duplicated region for block: B:288:0x04a7  */
    /* JADX WARN: Removed duplicated region for block: B:306:0x0501  */
    /* JADX WARN: Removed duplicated region for block: B:309:0x0506 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:342:0x0176 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static int prepareSendingDocumentInternal(final AccountInstance accountInstance, String str, String str2, Uri uri, String str3, final long j, final MessageObject messageObject, final MessageObject messageObject2, CharSequence charSequence, final ArrayList<TLRPC$MessageEntity> arrayList, final MessageObject messageObject3, long[] jArr, boolean z, boolean z2, final boolean z3, final int i, Integer[] numArr) {
        String str4;
        String str5;
        String str6;
        String lowerCase;
        String str7;
        Object obj;
        Object obj2;
        AudioInfo audioInfo;
        String str8;
        int i2;
        String str9;
        String str10;
        boolean z4;
        TLRPC$TL_documentAttributeAudio tLRPC$TL_documentAttributeAudio;
        String str11;
        boolean z5;
        String str12;
        String str13;
        Object obj3;
        Object obj4;
        String str14;
        long j2;
        int i3;
        boolean z6;
        String str15;
        TLRPC$TL_documentAttributeAudio tLRPC$TL_documentAttributeAudio2;
        MimeTypeMap mimeTypeMap;
        Object obj5;
        final String str16;
        TLRPC$TL_document tLRPC$TL_document;
        boolean z7;
        String str17;
        String str18;
        TLRPC$TL_document tLRPC$TL_document2;
        final HashMap hashMap;
        String str19;
        char c;
        boolean z8;
        int i4;
        int i5;
        Bitmap loadBitmap;
        char c2;
        String str20;
        TLRPC$TL_document tLRPC$TL_document3;
        String str21;
        TLRPC$TL_document tLRPC$TL_document4;
        String str22;
        String str23;
        Throwable th;
        MediaMetadataRetriever mediaMetadataRetriever;
        MediaMetadataRetriever mediaMetadataRetriever2;
        int i6;
        String str24;
        String str25;
        String extractMetadata;
        String str26;
        String str27;
        boolean z9;
        boolean z10;
        if ((str == null || str.length() == 0) && uri == null) {
            return 1;
        }
        if (uri == null || !AndroidUtilities.isInternalUri(uri)) {
            if (str == null || !AndroidUtilities.isInternalUri(Uri.fromFile(new File(str)))) {
                MimeTypeMap singleton = MimeTypeMap.getSingleton();
                if (uri == null || str != null) {
                    str4 = str;
                } else if (checkFileSize(accountInstance, uri)) {
                    return 2;
                } else {
                    str5 = str3 != null ? singleton.getExtensionFromMimeType(str3) : null;
                    if (str5 == null) {
                        str5 = "txt";
                        z10 = false;
                    } else {
                        z10 = true;
                    }
                    String copyFileToCache = MediaController.copyFileToCache(uri, str5);
                    if (copyFileToCache == null) {
                        return 1;
                    }
                    str4 = copyFileToCache;
                }
                str5 = null;
                File file = new File(str4);
                if (!file.exists() || file.length() == 0) {
                    return 1;
                }
                if (FileLoader.checkUploadFileSize(accountInstance.getCurrentAccount(), file.length())) {
                    boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
                    String name = file.getName();
                    if (str5 == null) {
                        int lastIndexOf = str4.lastIndexOf(46);
                        if (lastIndexOf != -1) {
                            str5 = str4.substring(lastIndexOf + 1);
                        } else {
                            str6 = "";
                            lowerCase = str6.toLowerCase();
                            if (!lowerCase.equals("mp3") || lowerCase.equals("m4a")) {
                                str7 = name;
                                obj = "flac";
                                obj2 = "opus";
                                audioInfo = AudioInfo.getAudioInfo(file);
                                if (audioInfo == null) {
                                    long duration = audioInfo.getDuration();
                                    if (duration != 0) {
                                        str9 = audioInfo.getArtist();
                                        str8 = audioInfo.getTitle();
                                        i2 = (int) (duration / 1000);
                                        str10 = str9;
                                    }
                                }
                                str8 = null;
                                i2 = 0;
                                str9 = null;
                                str10 = str9;
                            } else if (lowerCase.equals("opus") || lowerCase.equals("ogg") || lowerCase.equals("flac")) {
                                try {
                                    mediaMetadataRetriever2 = new MediaMetadataRetriever();
                                    try {
                                        try {
                                            mediaMetadataRetriever2.setDataSource(file.getAbsolutePath());
                                            if (mediaMetadataRetriever2.extractMetadata(9) != null) {
                                                obj = "flac";
                                                obj2 = "opus";
                                                try {
                                                    i6 = (int) Math.ceil(((float) Long.parseLong(extractMetadata)) / 1000.0f);
                                                    try {
                                                        str24 = mediaMetadataRetriever2.extractMetadata(7);
                                                        str7 = name;
                                                    } catch (Exception e) {
                                                        e = e;
                                                        str7 = name;
                                                        str24 = null;
                                                        str25 = null;
                                                        FileLog.e(e);
                                                        if (mediaMetadataRetriever2 != null) {
                                                            try {
                                                                mediaMetadataRetriever2.release();
                                                            } catch (Exception e2) {
                                                                FileLog.e(e2);
                                                            }
                                                        }
                                                        i2 = i6;
                                                        str8 = str24;
                                                        str10 = str25;
                                                        z4 = false;
                                                        if (i2 != 0) {
                                                        }
                                                        if (str2 == null) {
                                                        }
                                                        z5 = false;
                                                        if (z5) {
                                                        }
                                                        str12 = "";
                                                        str13 = str11;
                                                        obj3 = "m4a";
                                                        obj4 = obj;
                                                        str14 = str7;
                                                        j2 = 0;
                                                        i3 = -1;
                                                        z6 = isEncryptedDialog;
                                                        str15 = str4;
                                                        tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                        Object obj6 = obj2;
                                                        mimeTypeMap = singleton;
                                                        obj5 = obj6;
                                                        str16 = null;
                                                        tLRPC$TL_document = null;
                                                        if (tLRPC$TL_document != null) {
                                                        }
                                                        if (charSequence != null) {
                                                        }
                                                        hashMap = new HashMap();
                                                        str19 = str13;
                                                        if (str19 != null) {
                                                        }
                                                        if (z2) {
                                                        }
                                                        if (str16 != null) {
                                                        }
                                                        int i7 = 0;
                                                        if (numArr != null) {
                                                        }
                                                        z8 = false;
                                                        if (z7) {
                                                        }
                                                        final TLRPC$TL_document tLRPC$TL_document5 = tLRPC$TL_document2;
                                                        final String str28 = str17;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document5, str28, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                            }
                                                        });
                                                        return 0;
                                                    }
                                                    try {
                                                        str26 = mediaMetadataRetriever2.extractMetadata(2);
                                                    } catch (Exception e3) {
                                                        e = e3;
                                                        str25 = null;
                                                        FileLog.e(e);
                                                        if (mediaMetadataRetriever2 != null) {
                                                        }
                                                        i2 = i6;
                                                        str8 = str24;
                                                        str10 = str25;
                                                        z4 = false;
                                                        if (i2 != 0) {
                                                        }
                                                        if (str2 == null) {
                                                        }
                                                        z5 = false;
                                                        if (z5) {
                                                        }
                                                        str12 = "";
                                                        str13 = str11;
                                                        obj3 = "m4a";
                                                        obj4 = obj;
                                                        str14 = str7;
                                                        j2 = 0;
                                                        i3 = -1;
                                                        z6 = isEncryptedDialog;
                                                        str15 = str4;
                                                        tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                        Object obj62 = obj2;
                                                        mimeTypeMap = singleton;
                                                        obj5 = obj62;
                                                        str16 = null;
                                                        tLRPC$TL_document = null;
                                                        if (tLRPC$TL_document != null) {
                                                        }
                                                        if (charSequence != null) {
                                                        }
                                                        hashMap = new HashMap();
                                                        str19 = str13;
                                                        if (str19 != null) {
                                                        }
                                                        if (z2) {
                                                        }
                                                        if (str16 != null) {
                                                        }
                                                        int i72 = 0;
                                                        if (numArr != null) {
                                                        }
                                                        z8 = false;
                                                        if (z7) {
                                                        }
                                                        final TLRPC$TL_document tLRPC$TL_document52 = tLRPC$TL_document2;
                                                        final String str282 = str17;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document52, str282, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                            }
                                                        });
                                                        return 0;
                                                    }
                                                } catch (Exception e4) {
                                                    e = e4;
                                                    str7 = name;
                                                    i6 = 0;
                                                    str24 = null;
                                                    str25 = null;
                                                    FileLog.e(e);
                                                    if (mediaMetadataRetriever2 != null) {
                                                    }
                                                    i2 = i6;
                                                    str8 = str24;
                                                    str10 = str25;
                                                    z4 = false;
                                                    if (i2 != 0) {
                                                    }
                                                    if (str2 == null) {
                                                    }
                                                    z5 = false;
                                                    if (z5) {
                                                    }
                                                    str12 = "";
                                                    str13 = str11;
                                                    obj3 = "m4a";
                                                    obj4 = obj;
                                                    str14 = str7;
                                                    j2 = 0;
                                                    i3 = -1;
                                                    z6 = isEncryptedDialog;
                                                    str15 = str4;
                                                    tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                    Object obj622 = obj2;
                                                    mimeTypeMap = singleton;
                                                    obj5 = obj622;
                                                    str16 = null;
                                                    tLRPC$TL_document = null;
                                                    if (tLRPC$TL_document != null) {
                                                    }
                                                    if (charSequence != null) {
                                                    }
                                                    hashMap = new HashMap();
                                                    str19 = str13;
                                                    if (str19 != null) {
                                                    }
                                                    if (z2) {
                                                    }
                                                    if (str16 != null) {
                                                    }
                                                    int i722 = 0;
                                                    if (numArr != null) {
                                                    }
                                                    z8 = false;
                                                    if (z7) {
                                                    }
                                                    final TLRPC$TL_document tLRPC$TL_document522 = tLRPC$TL_document2;
                                                    final String str2822 = str17;
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document522, str2822, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                        }
                                                    });
                                                    return 0;
                                                }
                                            } else {
                                                str7 = name;
                                                obj = "flac";
                                                obj2 = "opus";
                                                str26 = null;
                                                i6 = 0;
                                                str24 = null;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            mediaMetadataRetriever = mediaMetadataRetriever2;
                                            if (mediaMetadataRetriever != null) {
                                                try {
                                                    mediaMetadataRetriever.release();
                                                } catch (Exception e5) {
                                                    FileLog.e(e5);
                                                }
                                            }
                                            throw th;
                                        }
                                    } catch (Exception e6) {
                                        e = e6;
                                        str7 = name;
                                        obj = "flac";
                                        obj2 = "opus";
                                    }
                                } catch (Exception e7) {
                                    e = e7;
                                    str7 = name;
                                    obj = "flac";
                                    obj2 = "opus";
                                    mediaMetadataRetriever2 = null;
                                } catch (Throwable th3) {
                                    th = th3;
                                    mediaMetadataRetriever = null;
                                }
                                if (messageObject3 == null) {
                                    try {
                                    } catch (Exception e8) {
                                        e = e8;
                                        str25 = str26;
                                        FileLog.e(e);
                                        if (mediaMetadataRetriever2 != null) {
                                        }
                                        i2 = i6;
                                        str8 = str24;
                                        str10 = str25;
                                        z4 = false;
                                        if (i2 != 0) {
                                        }
                                        if (str2 == null) {
                                        }
                                        z5 = false;
                                        if (z5) {
                                        }
                                        str12 = "";
                                        str13 = str11;
                                        obj3 = "m4a";
                                        obj4 = obj;
                                        str14 = str7;
                                        j2 = 0;
                                        i3 = -1;
                                        z6 = isEncryptedDialog;
                                        str15 = str4;
                                        tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                        Object obj6222 = obj2;
                                        mimeTypeMap = singleton;
                                        obj5 = obj6222;
                                        str16 = null;
                                        tLRPC$TL_document = null;
                                        if (tLRPC$TL_document != null) {
                                        }
                                        if (charSequence != null) {
                                        }
                                        hashMap = new HashMap();
                                        str19 = str13;
                                        if (str19 != null) {
                                        }
                                        if (z2) {
                                        }
                                        if (str16 != null) {
                                        }
                                        int i7222 = 0;
                                        if (numArr != null) {
                                        }
                                        z8 = false;
                                        if (z7) {
                                        }
                                        final TLRPC$TL_document tLRPC$TL_document5222 = tLRPC$TL_document2;
                                        final String str28222 = str17;
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document5222, str28222, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                            }
                                        });
                                        return 0;
                                    }
                                    if (lowerCase.equals("ogg")) {
                                        str27 = str26;
                                        if (MediaController.isOpusFile(file.getAbsolutePath()) == 1) {
                                            z9 = true;
                                            mediaMetadataRetriever2.release();
                                            str8 = str24;
                                            str10 = str27;
                                            z4 = z9;
                                            i2 = i6;
                                            if (i2 != 0) {
                                                tLRPC$TL_documentAttributeAudio = new TLRPC$TL_documentAttributeAudio();
                                                tLRPC$TL_documentAttributeAudio.duration = i2;
                                                tLRPC$TL_documentAttributeAudio.title = str8;
                                                tLRPC$TL_documentAttributeAudio.performer = str10;
                                                if (str8 == null) {
                                                    tLRPC$TL_documentAttributeAudio.title = "";
                                                }
                                                int i8 = tLRPC$TL_documentAttributeAudio.flags | 1;
                                                tLRPC$TL_documentAttributeAudio.flags = i8;
                                                if (str10 == null) {
                                                    tLRPC$TL_documentAttributeAudio.performer = "";
                                                }
                                                tLRPC$TL_documentAttributeAudio.flags = i8 | 2;
                                                if (z4) {
                                                    tLRPC$TL_documentAttributeAudio.voice = true;
                                                }
                                            } else {
                                                tLRPC$TL_documentAttributeAudio = null;
                                            }
                                            if (str2 == null) {
                                                str11 = str2;
                                            } else if (str2.endsWith("attheme")) {
                                                str11 = str2;
                                                z5 = true;
                                                if (!z5 || isEncryptedDialog) {
                                                    str12 = "";
                                                    str13 = str11;
                                                    obj3 = "m4a";
                                                    obj4 = obj;
                                                    str14 = str7;
                                                    j2 = 0;
                                                    i3 = -1;
                                                    z6 = isEncryptedDialog;
                                                    str15 = str4;
                                                    tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                    Object obj62222 = obj2;
                                                    mimeTypeMap = singleton;
                                                    obj5 = obj62222;
                                                    str16 = null;
                                                    tLRPC$TL_document = null;
                                                } else {
                                                    Object[] sentFile = accountInstance.getMessagesStorage().getSentFile(str11, !isEncryptedDialog ? 1 : 4);
                                                    if (sentFile == null || !(sentFile[0] instanceof TLRPC$TL_document)) {
                                                        str20 = null;
                                                        tLRPC$TL_document3 = null;
                                                    } else {
                                                        tLRPC$TL_document3 = (TLRPC$TL_document) sentFile[0];
                                                        str20 = (String) sentFile[1];
                                                    }
                                                    if (tLRPC$TL_document3 != null || str4.equals(str11) || isEncryptedDialog) {
                                                        str21 = str20;
                                                        tLRPC$TL_document4 = tLRPC$TL_document3;
                                                    } else {
                                                        MessagesStorage messagesStorage = accountInstance.getMessagesStorage();
                                                        StringBuilder sb = new StringBuilder();
                                                        sb.append(str4);
                                                        str21 = str20;
                                                        tLRPC$TL_document4 = tLRPC$TL_document3;
                                                        sb.append(file.length());
                                                        Object[] sentFile2 = messagesStorage.getSentFile(sb.toString(), !isEncryptedDialog ? 1 : 4);
                                                        if (sentFile2 != null && (sentFile2[0] instanceof TLRPC$TL_document)) {
                                                            str22 = (String) sentFile2[1];
                                                            tLRPC$TL_document = (TLRPC$TL_document) sentFile2[0];
                                                            i3 = -1;
                                                            str12 = "";
                                                            str14 = str7;
                                                            String str29 = str4;
                                                            str13 = str11;
                                                            obj3 = "m4a";
                                                            str15 = str4;
                                                            obj4 = obj;
                                                            tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                            z6 = isEncryptedDialog;
                                                            j2 = 0;
                                                            Object obj7 = obj2;
                                                            mimeTypeMap = singleton;
                                                            obj5 = obj7;
                                                            ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_document, str29, null, 0L);
                                                            str16 = str22;
                                                        }
                                                    }
                                                    str22 = str21;
                                                    tLRPC$TL_document = tLRPC$TL_document4;
                                                    i3 = -1;
                                                    str12 = "";
                                                    str14 = str7;
                                                    String str292 = str4;
                                                    str13 = str11;
                                                    obj3 = "m4a";
                                                    str15 = str4;
                                                    obj4 = obj;
                                                    tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                                    z6 = isEncryptedDialog;
                                                    j2 = 0;
                                                    Object obj72 = obj2;
                                                    mimeTypeMap = singleton;
                                                    obj5 = obj72;
                                                    ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_document, str292, null, 0L);
                                                    str16 = str22;
                                                }
                                                if (tLRPC$TL_document != null) {
                                                    TLRPC$TL_document tLRPC$TL_document6 = new TLRPC$TL_document();
                                                    tLRPC$TL_document6.id = j2;
                                                    tLRPC$TL_document6.date = accountInstance.getConnectionsManager().getCurrentTime();
                                                    TLRPC$TL_documentAttributeFilename tLRPC$TL_documentAttributeFilename = new TLRPC$TL_documentAttributeFilename();
                                                    tLRPC$TL_documentAttributeFilename.file_name = str14;
                                                    tLRPC$TL_document6.file_reference = new byte[0];
                                                    tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeFilename);
                                                    tLRPC$TL_document6.size = file.length();
                                                    tLRPC$TL_document6.dc_id = 0;
                                                    if (tLRPC$TL_documentAttributeAudio2 != null) {
                                                        tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeAudio2);
                                                    }
                                                    if (str6.length() != 0) {
                                                        switch (lowerCase.hashCode()) {
                                                            case 106458:
                                                                if (lowerCase.equals(obj3)) {
                                                                    c2 = 0;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            case 108272:
                                                                if (lowerCase.equals("mp3")) {
                                                                    c2 = 1;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            case 109967:
                                                                if (lowerCase.equals("ogg")) {
                                                                    c2 = 2;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            case 3145576:
                                                                if (lowerCase.equals(obj4)) {
                                                                    c2 = 3;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            case 3418175:
                                                                if (lowerCase.equals(obj5)) {
                                                                    c2 = 4;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            case 3645340:
                                                                if (lowerCase.equals("webp")) {
                                                                    c2 = 5;
                                                                    break;
                                                                }
                                                                c2 = 65535;
                                                                break;
                                                            default:
                                                                c2 = 65535;
                                                                break;
                                                        }
                                                        switch (c2) {
                                                            case 0:
                                                                tLRPC$TL_document6.mime_type = "audio/m4a";
                                                                break;
                                                            case 1:
                                                                tLRPC$TL_document6.mime_type = "audio/mpeg";
                                                                break;
                                                            case 2:
                                                                tLRPC$TL_document6.mime_type = "audio/ogg";
                                                                break;
                                                            case 3:
                                                                tLRPC$TL_document6.mime_type = "audio/flac";
                                                                break;
                                                            case 4:
                                                                tLRPC$TL_document6.mime_type = "audio/opus";
                                                                break;
                                                            case 5:
                                                                tLRPC$TL_document6.mime_type = "image/webp";
                                                                break;
                                                            default:
                                                                String mimeTypeFromExtension = mimeTypeMap.getMimeTypeFromExtension(lowerCase);
                                                                if (mimeTypeFromExtension != null) {
                                                                    tLRPC$TL_document6.mime_type = mimeTypeFromExtension;
                                                                    break;
                                                                } else {
                                                                    tLRPC$TL_document6.mime_type = "application/octet-stream";
                                                                    break;
                                                                }
                                                        }
                                                    } else {
                                                        tLRPC$TL_document6.mime_type = "application/octet-stream";
                                                    }
                                                    if (!z2 && tLRPC$TL_document6.mime_type.equals("image/gif") && (messageObject3 == null || messageObject3.getGroupIdForUse() == j2)) {
                                                        try {
                                                            loadBitmap = ImageLoader.loadBitmap(file.getAbsolutePath(), null, 90.0f, 90.0f, true);
                                                        } catch (Exception e9) {
                                                            e = e9;
                                                            z7 = z6;
                                                        }
                                                        if (loadBitmap != null) {
                                                            tLRPC$TL_documentAttributeFilename.file_name = "animation.gif";
                                                            tLRPC$TL_document6.attributes.add(new TLRPC$TL_documentAttributeAnimated());
                                                            z7 = z6;
                                                            try {
                                                                TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(loadBitmap, 90.0f, 90.0f, 55, z7);
                                                                if (scaleAndSaveImage != null) {
                                                                    tLRPC$TL_document6.thumbs.add(scaleAndSaveImage);
                                                                    tLRPC$TL_document6.flags |= 1;
                                                                }
                                                                loadBitmap.recycle();
                                                            } catch (Exception e10) {
                                                                e = e10;
                                                                FileLog.e(e);
                                                                if (tLRPC$TL_document6.mime_type.equals("image/webp")) {
                                                                }
                                                                str17 = str15;
                                                                str18 = str12;
                                                                tLRPC$TL_document2 = tLRPC$TL_document6;
                                                                if (charSequence != null) {
                                                                }
                                                                hashMap = new HashMap();
                                                                str19 = str13;
                                                                if (str19 != null) {
                                                                }
                                                                if (z2) {
                                                                }
                                                                if (str16 != null) {
                                                                }
                                                                int i72222 = 0;
                                                                if (numArr != null) {
                                                                }
                                                                z8 = false;
                                                                if (z7) {
                                                                }
                                                                final TLRPC$TL_document tLRPC$TL_document52222 = tLRPC$TL_document2;
                                                                final String str282222 = str17;
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document52222, str282222, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                                    }
                                                                });
                                                                return 0;
                                                            }
                                                            if (tLRPC$TL_document6.mime_type.equals("image/webp") || messageObject3 != null) {
                                                                str17 = str15;
                                                            } else {
                                                                BitmapFactory.Options options = new BitmapFactory.Options();
                                                                try {
                                                                    options.inJustDecodeBounds = true;
                                                                    str17 = str15;
                                                                } catch (Exception e11) {
                                                                    e = e11;
                                                                    str17 = str15;
                                                                }
                                                                try {
                                                                    RandomAccessFile randomAccessFile = new RandomAccessFile(str17, "r");
                                                                    MappedByteBuffer map = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_ONLY, 0L, str17.length());
                                                                    Utilities.loadWebpImage(null, map, map.limit(), options, true);
                                                                    randomAccessFile.close();
                                                                } catch (Exception e12) {
                                                                    e = e12;
                                                                    FileLog.e(e);
                                                                    i4 = options.outWidth;
                                                                    if (i4 != 0) {
                                                                        TLRPC$TL_documentAttributeSticker tLRPC$TL_documentAttributeSticker = new TLRPC$TL_documentAttributeSticker();
                                                                        str18 = str12;
                                                                        tLRPC$TL_documentAttributeSticker.alt = str18;
                                                                        tLRPC$TL_documentAttributeSticker.stickerset = new TLRPC$TL_inputStickerSetEmpty();
                                                                        tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeSticker);
                                                                        TLRPC$TL_documentAttributeImageSize tLRPC$TL_documentAttributeImageSize = new TLRPC$TL_documentAttributeImageSize();
                                                                        tLRPC$TL_documentAttributeImageSize.w = options.outWidth;
                                                                        tLRPC$TL_documentAttributeImageSize.h = options.outHeight;
                                                                        tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeImageSize);
                                                                        tLRPC$TL_document2 = tLRPC$TL_document6;
                                                                        if (charSequence != null) {
                                                                        }
                                                                        hashMap = new HashMap();
                                                                        str19 = str13;
                                                                        if (str19 != null) {
                                                                        }
                                                                        if (z2) {
                                                                        }
                                                                        if (str16 != null) {
                                                                        }
                                                                        int i722222 = 0;
                                                                        if (numArr != null) {
                                                                        }
                                                                        z8 = false;
                                                                        if (z7) {
                                                                        }
                                                                        final TLRPC$TL_document tLRPC$TL_document522222 = tLRPC$TL_document2;
                                                                        final String str2822222 = str17;
                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                                            @Override // java.lang.Runnable
                                                                            public final void run() {
                                                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document522222, str2822222, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                                            }
                                                                        });
                                                                        return 0;
                                                                    }
                                                                    str18 = str12;
                                                                    tLRPC$TL_document2 = tLRPC$TL_document6;
                                                                    if (charSequence != null) {
                                                                    }
                                                                    hashMap = new HashMap();
                                                                    str19 = str13;
                                                                    if (str19 != null) {
                                                                    }
                                                                    if (z2) {
                                                                    }
                                                                    if (str16 != null) {
                                                                    }
                                                                    int i7222222 = 0;
                                                                    if (numArr != null) {
                                                                    }
                                                                    z8 = false;
                                                                    if (z7) {
                                                                    }
                                                                    final TLRPC$TL_document tLRPC$TL_document5222222 = tLRPC$TL_document2;
                                                                    final String str28222222 = str17;
                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document5222222, str28222222, hashMap, str16, j, messageObject, messageObject2, r11, arrayList, z3, i);
                                                                        }
                                                                    });
                                                                    return 0;
                                                                }
                                                                i4 = options.outWidth;
                                                                if (i4 != 0 && (i5 = options.outHeight) != 0 && i4 <= 800 && i5 <= 800) {
                                                                    TLRPC$TL_documentAttributeSticker tLRPC$TL_documentAttributeSticker2 = new TLRPC$TL_documentAttributeSticker();
                                                                    str18 = str12;
                                                                    tLRPC$TL_documentAttributeSticker2.alt = str18;
                                                                    tLRPC$TL_documentAttributeSticker2.stickerset = new TLRPC$TL_inputStickerSetEmpty();
                                                                    tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeSticker2);
                                                                    TLRPC$TL_documentAttributeImageSize tLRPC$TL_documentAttributeImageSize2 = new TLRPC$TL_documentAttributeImageSize();
                                                                    tLRPC$TL_documentAttributeImageSize2.w = options.outWidth;
                                                                    tLRPC$TL_documentAttributeImageSize2.h = options.outHeight;
                                                                    tLRPC$TL_document6.attributes.add(tLRPC$TL_documentAttributeImageSize2);
                                                                    tLRPC$TL_document2 = tLRPC$TL_document6;
                                                                }
                                                            }
                                                            str18 = str12;
                                                            tLRPC$TL_document2 = tLRPC$TL_document6;
                                                        }
                                                    }
                                                    z7 = z6;
                                                    if (tLRPC$TL_document6.mime_type.equals("image/webp")) {
                                                    }
                                                    str17 = str15;
                                                    str18 = str12;
                                                    tLRPC$TL_document2 = tLRPC$TL_document6;
                                                } else {
                                                    z7 = z6;
                                                    str17 = str15;
                                                    str18 = str12;
                                                    tLRPC$TL_document2 = tLRPC$TL_document;
                                                }
                                                final String charSequence2 = charSequence != null ? charSequence.toString() : str18;
                                                hashMap = new HashMap();
                                                str19 = str13;
                                                if (str19 != null) {
                                                    hashMap.put("originalPath", str19);
                                                }
                                                if (z2 && tLRPC$TL_documentAttributeAudio2 == null) {
                                                    hashMap.put("forceDocument", "1");
                                                }
                                                if (str16 != null) {
                                                    hashMap.put("parentObject", str16);
                                                }
                                                int i72222222 = 0;
                                                if (numArr != null) {
                                                    i72222222 = numArr[0];
                                                    String str30 = tLRPC$TL_document2.mime_type;
                                                    if (str30 != null && str30.toLowerCase().startsWith("image/webp")) {
                                                        numArr[0] = Integer.valueOf(i3);
                                                        c = 0;
                                                        z8 = true;
                                                        if (z7 && jArr != null) {
                                                            if (numArr != null && i72222222 != null && i72222222 != numArr[c]) {
                                                                finishGroup(accountInstance, jArr[c], i);
                                                                jArr[c] = Utilities.random.nextLong();
                                                            }
                                                            if (!z8) {
                                                                hashMap.put("groupId", str18 + jArr[c]);
                                                                if (z) {
                                                                    hashMap.put("final", "1");
                                                                }
                                                            }
                                                        }
                                                        final TLRPC$TL_document tLRPC$TL_document52222222 = tLRPC$TL_document2;
                                                        final String str282222222 = str17;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document52222222, str282222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                                            }
                                                        });
                                                        return 0;
                                                    }
                                                    String str31 = tLRPC$TL_document2.mime_type;
                                                    if ((str31 == null || !(str31.toLowerCase().startsWith("image/") || tLRPC$TL_document2.mime_type.toLowerCase().startsWith("video/mp4"))) && !MessageObject.canPreviewDocument(tLRPC$TL_document2)) {
                                                        c = 0;
                                                        if (tLRPC$TL_documentAttributeAudio2 != null) {
                                                            numArr[0] = 2;
                                                        } else {
                                                            numArr[0] = 0;
                                                        }
                                                    } else {
                                                        c = 0;
                                                        numArr[0] = 1;
                                                    }
                                                } else {
                                                    c = 0;
                                                }
                                                z8 = false;
                                                if (z7) {
                                                }
                                                final TLRPC$TL_document tLRPC$TL_document522222222 = tLRPC$TL_document2;
                                                final String str2822222222 = str17;
                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                    @Override // java.lang.Runnable
                                                    public final void run() {
                                                        SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document522222222, str2822222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                                    }
                                                });
                                                return 0;
                                            } else {
                                                if (tLRPC$TL_documentAttributeAudio != null) {
                                                    str23 = str2 + MediaStreamTrack.AUDIO_TRACK_KIND + file.length();
                                                } else {
                                                    str23 = str2 + "" + file.length();
                                                }
                                                str11 = str23;
                                            }
                                            z5 = false;
                                            if (z5) {
                                            }
                                            str12 = "";
                                            str13 = str11;
                                            obj3 = "m4a";
                                            obj4 = obj;
                                            str14 = str7;
                                            j2 = 0;
                                            i3 = -1;
                                            z6 = isEncryptedDialog;
                                            str15 = str4;
                                            tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                            Object obj622222 = obj2;
                                            mimeTypeMap = singleton;
                                            obj5 = obj622222;
                                            str16 = null;
                                            tLRPC$TL_document = null;
                                            if (tLRPC$TL_document != null) {
                                            }
                                            if (charSequence != null) {
                                            }
                                            hashMap = new HashMap();
                                            str19 = str13;
                                            if (str19 != null) {
                                            }
                                            if (z2) {
                                                hashMap.put("forceDocument", "1");
                                            }
                                            if (str16 != null) {
                                            }
                                            int i722222222 = 0;
                                            if (numArr != null) {
                                            }
                                            z8 = false;
                                            if (z7) {
                                            }
                                            final TLRPC$TL_document tLRPC$TL_document5222222222 = tLRPC$TL_document2;
                                            final String str28222222222 = str17;
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document5222222222, str28222222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                                }
                                            });
                                            return 0;
                                        }
                                        z9 = false;
                                        mediaMetadataRetriever2.release();
                                        str8 = str24;
                                        str10 = str27;
                                        z4 = z9;
                                        i2 = i6;
                                        if (i2 != 0) {
                                        }
                                        if (str2 == null) {
                                        }
                                        z5 = false;
                                        if (z5) {
                                        }
                                        str12 = "";
                                        str13 = str11;
                                        obj3 = "m4a";
                                        obj4 = obj;
                                        str14 = str7;
                                        j2 = 0;
                                        i3 = -1;
                                        z6 = isEncryptedDialog;
                                        str15 = str4;
                                        tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                        Object obj6222222 = obj2;
                                        mimeTypeMap = singleton;
                                        obj5 = obj6222222;
                                        str16 = null;
                                        tLRPC$TL_document = null;
                                        if (tLRPC$TL_document != null) {
                                        }
                                        if (charSequence != null) {
                                        }
                                        hashMap = new HashMap();
                                        str19 = str13;
                                        if (str19 != null) {
                                        }
                                        if (z2) {
                                        }
                                        if (str16 != null) {
                                        }
                                        int i7222222222 = 0;
                                        if (numArr != null) {
                                        }
                                        z8 = false;
                                        if (z7) {
                                        }
                                        final TLRPC$TL_document tLRPC$TL_document52222222222 = tLRPC$TL_document2;
                                        final String str282222222222 = str17;
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document52222222222, str282222222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                            }
                                        });
                                        return 0;
                                    }
                                }
                                str27 = str26;
                                z9 = false;
                                mediaMetadataRetriever2.release();
                                str8 = str24;
                                str10 = str27;
                                z4 = z9;
                                i2 = i6;
                                if (i2 != 0) {
                                }
                                if (str2 == null) {
                                }
                                z5 = false;
                                if (z5) {
                                }
                                str12 = "";
                                str13 = str11;
                                obj3 = "m4a";
                                obj4 = obj;
                                str14 = str7;
                                j2 = 0;
                                i3 = -1;
                                z6 = isEncryptedDialog;
                                str15 = str4;
                                tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                                Object obj62222222 = obj2;
                                mimeTypeMap = singleton;
                                obj5 = obj62222222;
                                str16 = null;
                                tLRPC$TL_document = null;
                                if (tLRPC$TL_document != null) {
                                }
                                if (charSequence != null) {
                                }
                                hashMap = new HashMap();
                                str19 = str13;
                                if (str19 != null) {
                                }
                                if (z2) {
                                }
                                if (str16 != null) {
                                }
                                int i72222222222 = 0;
                                if (numArr != null) {
                                }
                                z8 = false;
                                if (z7) {
                                }
                                final TLRPC$TL_document tLRPC$TL_document522222222222 = tLRPC$TL_document2;
                                final String str2822222222222 = str17;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document522222222222, str2822222222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                    }
                                });
                                return 0;
                            } else {
                                str7 = name;
                                obj = "flac";
                                obj2 = "opus";
                                str8 = null;
                                str10 = null;
                                i2 = 0;
                            }
                            z4 = false;
                            if (i2 != 0) {
                            }
                            if (str2 == null) {
                            }
                            z5 = false;
                            if (z5) {
                            }
                            str12 = "";
                            str13 = str11;
                            obj3 = "m4a";
                            obj4 = obj;
                            str14 = str7;
                            j2 = 0;
                            i3 = -1;
                            z6 = isEncryptedDialog;
                            str15 = str4;
                            tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                            Object obj622222222 = obj2;
                            mimeTypeMap = singleton;
                            obj5 = obj622222222;
                            str16 = null;
                            tLRPC$TL_document = null;
                            if (tLRPC$TL_document != null) {
                            }
                            if (charSequence != null) {
                            }
                            hashMap = new HashMap();
                            str19 = str13;
                            if (str19 != null) {
                            }
                            if (z2) {
                            }
                            if (str16 != null) {
                            }
                            int i722222222222 = 0;
                            if (numArr != null) {
                            }
                            z8 = false;
                            if (z7) {
                            }
                            final TLRPC$TL_document tLRPC$TL_document5222222222222 = tLRPC$TL_document2;
                            final String str28222222222222 = str17;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                                @Override // java.lang.Runnable
                                public final void run() {
                                    SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document5222222222222, str28222222222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                                }
                            });
                            return 0;
                        }
                    }
                    str6 = str5;
                    lowerCase = str6.toLowerCase();
                    if (!lowerCase.equals("mp3")) {
                    }
                    str7 = name;
                    obj = "flac";
                    obj2 = "opus";
                    audioInfo = AudioInfo.getAudioInfo(file);
                    if (audioInfo == null) {
                    }
                    str8 = null;
                    i2 = 0;
                    str9 = null;
                    str10 = str9;
                    z4 = false;
                    if (i2 != 0) {
                    }
                    if (str2 == null) {
                    }
                    z5 = false;
                    if (z5) {
                    }
                    str12 = "";
                    str13 = str11;
                    obj3 = "m4a";
                    obj4 = obj;
                    str14 = str7;
                    j2 = 0;
                    i3 = -1;
                    z6 = isEncryptedDialog;
                    str15 = str4;
                    tLRPC$TL_documentAttributeAudio2 = tLRPC$TL_documentAttributeAudio;
                    Object obj6222222222 = obj2;
                    mimeTypeMap = singleton;
                    obj5 = obj6222222222;
                    str16 = null;
                    tLRPC$TL_document = null;
                    if (tLRPC$TL_document != null) {
                    }
                    if (charSequence != null) {
                    }
                    hashMap = new HashMap();
                    str19 = str13;
                    if (str19 != null) {
                    }
                    if (z2) {
                    }
                    if (str16 != null) {
                    }
                    int i7222222222222 = 0;
                    if (numArr != null) {
                    }
                    z8 = false;
                    if (z7) {
                    }
                    final TLRPC$TL_document tLRPC$TL_document52222222222222 = tLRPC$TL_document2;
                    final String str282222222222222 = str17;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda13
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.lambda$prepareSendingDocumentInternal$73(MessageObject.this, accountInstance, tLRPC$TL_document52222222222222, str282222222222222, hashMap, str16, j, messageObject, messageObject2, charSequence2, arrayList, z3, i);
                        }
                    });
                    return 0;
                }
                return 2;
            }
            return 1;
        }
        return 1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingDocumentInternal$73(MessageObject messageObject, AccountInstance accountInstance, TLRPC$TL_document tLRPC$TL_document, String str, HashMap hashMap, String str2, long j, MessageObject messageObject2, MessageObject messageObject3, String str3, ArrayList arrayList, boolean z, int i) {
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, null, null, tLRPC$TL_document, str, hashMap, false, false, str2);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_document, null, str, j, messageObject2, messageObject3, str3, arrayList, null, hashMap, z, i, 0, str2, null, false);
        }
    }

    private static boolean checkFileSize(AccountInstance accountInstance, Uri uri) {
        long j = 0;
        if (Build.VERSION.SDK_INT >= 19) {
            try {
                AssetFileDescriptor openAssetFileDescriptor = ApplicationLoader.applicationContext.getContentResolver().openAssetFileDescriptor(uri, "r", null);
                if (openAssetFileDescriptor != null) {
                    openAssetFileDescriptor.getLength();
                }
                Cursor query = ApplicationLoader.applicationContext.getContentResolver().query(uri, new String[]{"_size"}, null, null, null);
                int columnIndex = query.getColumnIndex("_size");
                query.moveToFirst();
                j = query.getLong(columnIndex);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        return !FileLoader.checkUploadFileSize(accountInstance.getCurrentAccount(), j);
    }

    public static void prepareSendingDocument(AccountInstance accountInstance, String str, String str2, Uri uri, String str3, String str4, long j, MessageObject messageObject, MessageObject messageObject2, InputContentInfoCompat inputContentInfoCompat, MessageObject messageObject3, boolean z, int i) {
        if ((str == null || str2 == null) && uri == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        ArrayList arrayList3 = null;
        if (uri != null) {
            arrayList3 = new ArrayList();
            arrayList3.add(uri);
        }
        if (str != null) {
            arrayList.add(str);
            arrayList2.add(str2);
        }
        prepareSendingDocuments(accountInstance, arrayList, arrayList2, arrayList3, str3, str4, j, messageObject, messageObject2, inputContentInfoCompat, messageObject3, z, i);
    }

    public static void prepareSendingAudioDocuments(final AccountInstance accountInstance, final ArrayList<MessageObject> arrayList, final CharSequence charSequence, final long j, final MessageObject messageObject, final MessageObject messageObject2, final MessageObject messageObject3, final boolean z, final int i) {
        new Thread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda10
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingAudioDocuments$75(arrayList, j, accountInstance, charSequence, messageObject3, messageObject, messageObject2, z, i);
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0082  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x008b  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00a8  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00b7  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00c6  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x00cd  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$prepareSendingAudioDocuments$75(ArrayList arrayList, final long j, final AccountInstance accountInstance, CharSequence charSequence, final MessageObject messageObject, final MessageObject messageObject2, final MessageObject messageObject3, final boolean z, final int i) {
        final String str;
        TLRPC$TL_document tLRPC$TL_document;
        final TLRPC$TL_document tLRPC$TL_document2;
        final HashMap hashMap;
        int size = arrayList.size();
        long j2 = 0;
        int i2 = 0;
        int i3 = 0;
        while (i2 < size) {
            final MessageObject messageObject4 = (MessageObject) arrayList.get(i2);
            String str2 = messageObject4.messageOwner.attachPath;
            File file = new File(str2);
            boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
            if (!isEncryptedDialog && size > 1 && i3 % 10 == 0) {
                j2 = Utilities.random.nextLong();
                i3 = 0;
            }
            if (str2 != null) {
                str2 = str2 + MediaStreamTrack.AUDIO_TRACK_KIND + file.length();
            }
            if (!isEncryptedDialog) {
                Object[] sentFile = accountInstance.getMessagesStorage().getSentFile(str2, !isEncryptedDialog ? 1 : 4);
                if (sentFile != null && (sentFile[0] instanceof TLRPC$TL_document)) {
                    tLRPC$TL_document = (TLRPC$TL_document) sentFile[0];
                    ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_document, str2, null, 0L);
                    str = (String) sentFile[1];
                    tLRPC$TL_document2 = tLRPC$TL_document != null ? (TLRPC$TL_document) messageObject4.messageOwner.media.document : tLRPC$TL_document;
                    if (!isEncryptedDialog && accountInstance.getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j))) == null) {
                        return;
                    }
                    CharSequence[] charSequenceArr = {charSequence};
                    final ArrayList<TLRPC$MessageEntity> entities = i2 != 0 ? accountInstance.getMediaDataController().getEntities(charSequenceArr, true) : null;
                    final String charSequence2 = i2 == 0 ? charSequenceArr[0].toString() : null;
                    hashMap = new HashMap();
                    if (str2 != null) {
                        hashMap.put("originalPath", str2);
                    }
                    if (str != null) {
                        hashMap.put("parentObject", str);
                    }
                    i3++;
                    hashMap.put("groupId", "" + j2);
                    if (i3 != 10 || i2 == size - 1) {
                        hashMap.put("final", "1");
                    }
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda15
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.lambda$prepareSendingAudioDocuments$74(MessageObject.this, accountInstance, tLRPC$TL_document2, messageObject4, hashMap, str, j, messageObject2, messageObject3, charSequence2, entities, z, i);
                        }
                    });
                    i2++;
                }
            }
            str = null;
            tLRPC$TL_document = null;
            if (tLRPC$TL_document != null) {
            }
            if (!isEncryptedDialog) {
            }
            CharSequence[] charSequenceArr2 = {charSequence};
            if (i2 != 0) {
            }
            final String charSequence22 = i2 == 0 ? charSequenceArr2[0].toString() : null;
            hashMap = new HashMap();
            if (str2 != null) {
            }
            if (str != null) {
            }
            i3++;
            hashMap.put("groupId", "" + j2);
            if (i3 != 10) {
            }
            hashMap.put("final", "1");
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda15
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.lambda$prepareSendingAudioDocuments$74(MessageObject.this, accountInstance, tLRPC$TL_document2, messageObject4, hashMap, str, j, messageObject2, messageObject3, charSequence22, entities, z, i);
                }
            });
            i2++;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingAudioDocuments$74(MessageObject messageObject, AccountInstance accountInstance, TLRPC$TL_document tLRPC$TL_document, MessageObject messageObject2, HashMap hashMap, String str, long j, MessageObject messageObject3, MessageObject messageObject4, String str2, ArrayList arrayList, boolean z, int i) {
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, null, null, tLRPC$TL_document, messageObject2.messageOwner.attachPath, hashMap, false, false, str);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_document, null, messageObject2.messageOwner.attachPath, j, messageObject3, messageObject4, str2, arrayList, null, hashMap, z, i, 0, str, null, false, false);
        }
    }

    private static void finishGroup(final AccountInstance accountInstance, final long j, final int i) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda12
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$finishGroup$76(AccountInstance.this, j, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$finishGroup$76(AccountInstance accountInstance, long j, int i) {
        SendMessagesHelper sendMessagesHelper = accountInstance.getSendMessagesHelper();
        HashMap<String, ArrayList<DelayedMessage>> hashMap = sendMessagesHelper.delayedMessages;
        ArrayList<DelayedMessage> arrayList = hashMap.get("group_" + j);
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        DelayedMessage delayedMessage = arrayList.get(0);
        ArrayList<MessageObject> arrayList2 = delayedMessage.messageObjects;
        MessageObject messageObject = arrayList2.get(arrayList2.size() - 1);
        delayedMessage.finalGroupMessage = messageObject.getId();
        messageObject.messageOwner.params.put("final", "1");
        TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
        tLRPC$TL_messages_messages.messages.add(messageObject.messageOwner);
        accountInstance.getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, delayedMessage.peer, -2, 0, false, i != 0, 0);
        sendMessagesHelper.sendReadyToSendGroup(delayedMessage, true, true);
    }

    public static void prepareSendingDocuments(final AccountInstance accountInstance, final ArrayList<String> arrayList, final ArrayList<String> arrayList2, final ArrayList<Uri> arrayList3, final String str, final String str2, final long j, final MessageObject messageObject, final MessageObject messageObject2, final InputContentInfoCompat inputContentInfoCompat, final MessageObject messageObject3, final boolean z, final int i) {
        if (arrayList == null && arrayList2 == null && arrayList3 == null) {
            return;
        }
        if (arrayList == null || arrayList2 == null || arrayList.size() == arrayList2.size()) {
            Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.lambda$prepareSendingDocuments$77(j, arrayList, str, accountInstance, i, arrayList2, str2, messageObject, messageObject2, messageObject3, inputContentInfoCompat, z, arrayList3);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingDocuments$77(long j, ArrayList arrayList, String str, AccountInstance accountInstance, int i, ArrayList arrayList2, String str2, MessageObject messageObject, MessageObject messageObject2, MessageObject messageObject3, InputContentInfoCompat inputContentInfoCompat, boolean z, ArrayList arrayList3) {
        Integer[] numArr;
        long[] jArr;
        ArrayList arrayList4;
        int i2;
        AccountInstance accountInstance2 = accountInstance;
        int i3 = i;
        int i4 = 1;
        long[] jArr2 = new long[1];
        Integer[] numArr2 = new Integer[1];
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        int i5 = 10;
        if (arrayList != null) {
            int size = arrayList.size();
            i2 = 0;
            int i6 = 0;
            int i7 = 0;
            while (i7 < size) {
                String str3 = i7 == 0 ? str : null;
                if (!isEncryptedDialog && size > i4 && i6 % 10 == 0) {
                    if (jArr2[0] != 0) {
                        finishGroup(accountInstance2, jArr2[0], i3);
                    }
                    jArr2[0] = Utilities.random.nextLong();
                    i6 = 0;
                }
                int i8 = i6 + 1;
                long j2 = jArr2[0];
                int i9 = i7;
                int i10 = size;
                Integer[] numArr3 = numArr2;
                long[] jArr3 = jArr2;
                i2 = prepareSendingDocumentInternal(accountInstance, (String) arrayList.get(i7), (String) arrayList2.get(i7), null, str2, j, messageObject, messageObject2, str3, null, messageObject3, jArr3, i8 == i5 || i7 == size + (-1), inputContentInfoCompat == null, z, i, numArr3);
                i6 = (j2 != jArr3[0] || jArr3[0] == -1) ? 1 : i8;
                i7 = i9 + 1;
                accountInstance2 = accountInstance;
                i3 = i;
                size = i10;
                numArr2 = numArr3;
                jArr2 = jArr3;
                i5 = 10;
                i4 = 1;
            }
            numArr = numArr2;
            jArr = jArr2;
            arrayList4 = arrayList3;
        } else {
            numArr = numArr2;
            jArr = jArr2;
            arrayList4 = arrayList3;
            i2 = 0;
        }
        if (arrayList4 != null) {
            jArr[0] = 0;
            int size2 = arrayList3.size();
            int i11 = 0;
            int i12 = 0;
            while (i12 < arrayList3.size()) {
                String str4 = (i12 == 0 && (arrayList == null || arrayList.size() == 0)) ? str : null;
                if (!isEncryptedDialog) {
                    if (size2 > 1 && i11 % 10 == 0) {
                        if (jArr[0] != 0) {
                            finishGroup(accountInstance, jArr[0], i);
                        }
                        jArr[0] = Utilities.random.nextLong();
                        i11 = 0;
                    }
                }
                int i13 = i11 + 1;
                long j3 = jArr[0];
                int i14 = i12;
                int i15 = size2;
                i2 = prepareSendingDocumentInternal(accountInstance, null, null, (Uri) arrayList4.get(i12), str2, j, messageObject, messageObject2, str4, null, messageObject3, jArr, i13 == 10 || i12 == size2 + (-1), inputContentInfoCompat == null, z, i, numArr);
                i11 = (j3 != jArr[0] || jArr[0] == -1) ? 1 : i13;
                i12 = i14 + 1;
                arrayList4 = arrayList3;
                size2 = i15;
            }
        }
        if (inputContentInfoCompat != null) {
            inputContentInfoCompat.releasePermission();
        }
        handleError(i2, accountInstance);
    }

    private static void handleError(final int i, final AccountInstance accountInstance) {
        if (i != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.lambda$handleError$78(i, accountInstance);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$handleError$78(int i, AccountInstance accountInstance) {
        try {
            if (i == 1) {
                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.showBulletin, 1, LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment));
            } else if (i != 2) {
            } else {
                NotificationCenter.getInstance(accountInstance.getCurrentAccount()).postNotificationName(NotificationCenter.currentUserShowLimitReachedDialog, 6);
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public static void prepareSendingPhoto(AccountInstance accountInstance, String str, Uri uri, long j, MessageObject messageObject, MessageObject messageObject2, CharSequence charSequence, ArrayList<TLRPC$MessageEntity> arrayList, ArrayList<TLRPC$InputDocument> arrayList2, InputContentInfoCompat inputContentInfoCompat, int i, MessageObject messageObject3, boolean z, int i2) {
        prepareSendingPhoto(accountInstance, str, null, uri, j, messageObject, messageObject2, charSequence, arrayList, arrayList2, inputContentInfoCompat, i, messageObject3, null, z, i2, false);
    }

    public static void prepareSendingPhoto(AccountInstance accountInstance, String str, String str2, Uri uri, long j, MessageObject messageObject, MessageObject messageObject2, CharSequence charSequence, ArrayList<TLRPC$MessageEntity> arrayList, ArrayList<TLRPC$InputDocument> arrayList2, InputContentInfoCompat inputContentInfoCompat, int i, MessageObject messageObject3, VideoEditedInfo videoEditedInfo, boolean z, int i2, boolean z2) {
        SendingMediaInfo sendingMediaInfo = new SendingMediaInfo();
        sendingMediaInfo.path = str;
        sendingMediaInfo.thumbPath = str2;
        sendingMediaInfo.uri = uri;
        if (charSequence != null) {
            sendingMediaInfo.caption = charSequence.toString();
        }
        sendingMediaInfo.entities = arrayList;
        sendingMediaInfo.ttl = i;
        if (arrayList2 != null) {
            sendingMediaInfo.masks = new ArrayList<>(arrayList2);
        }
        sendingMediaInfo.videoEditedInfo = videoEditedInfo;
        ArrayList arrayList3 = new ArrayList();
        arrayList3.add(sendingMediaInfo);
        prepareSendingMedia(accountInstance, arrayList3, j, messageObject, messageObject2, inputContentInfoCompat, z2, false, messageObject3, z, i2, false);
    }

    public static void prepareSendingBotContextResult(final BaseFragment baseFragment, final AccountInstance accountInstance, final TLRPC$BotInlineResult tLRPC$BotInlineResult, final HashMap<String, String> hashMap, final long j, final MessageObject messageObject, final MessageObject messageObject2, final boolean z, final int i) {
        if (tLRPC$BotInlineResult == null) {
            return;
        }
        TLRPC$BotInlineMessage tLRPC$BotInlineMessage = tLRPC$BotInlineResult.send_message;
        if (tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageMediaAuto) {
            new Thread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.lambda$prepareSendingBotContextResult$82(j, tLRPC$BotInlineResult, accountInstance, hashMap, baseFragment, messageObject, messageObject2, z, i);
                }
            }).run();
        } else if (tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageText) {
            TLRPC$TL_webPagePending tLRPC$TL_webPagePending = null;
            if (DialogObject.isEncryptedDialog(j)) {
                int i2 = 0;
                while (true) {
                    if (i2 >= tLRPC$BotInlineResult.send_message.entities.size()) {
                        break;
                    }
                    TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$BotInlineResult.send_message.entities.get(i2);
                    if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityUrl) {
                        tLRPC$TL_webPagePending = new TLRPC$TL_webPagePending();
                        String str = tLRPC$BotInlineResult.send_message.message;
                        int i3 = tLRPC$MessageEntity.offset;
                        tLRPC$TL_webPagePending.url = str.substring(i3, tLRPC$MessageEntity.length + i3);
                        break;
                    }
                    i2++;
                }
            }
            TLRPC$TL_webPagePending tLRPC$TL_webPagePending2 = tLRPC$TL_webPagePending;
            SendMessagesHelper sendMessagesHelper = accountInstance.getSendMessagesHelper();
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage2 = tLRPC$BotInlineResult.send_message;
            sendMessagesHelper.sendMessage(tLRPC$BotInlineMessage2.message, j, messageObject, messageObject2, tLRPC$TL_webPagePending2, !tLRPC$BotInlineMessage2.no_webpage, tLRPC$BotInlineMessage2.entities, tLRPC$BotInlineMessage2.reply_markup, hashMap, z, i, null, false);
        } else if (tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageMediaVenue) {
            TLRPC$TL_messageMediaVenue tLRPC$TL_messageMediaVenue = new TLRPC$TL_messageMediaVenue();
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage3 = tLRPC$BotInlineResult.send_message;
            tLRPC$TL_messageMediaVenue.geo = tLRPC$BotInlineMessage3.geo;
            tLRPC$TL_messageMediaVenue.address = tLRPC$BotInlineMessage3.address;
            tLRPC$TL_messageMediaVenue.title = tLRPC$BotInlineMessage3.title;
            tLRPC$TL_messageMediaVenue.provider = tLRPC$BotInlineMessage3.provider;
            tLRPC$TL_messageMediaVenue.venue_id = tLRPC$BotInlineMessage3.venue_id;
            String str2 = tLRPC$BotInlineMessage3.venue_type;
            tLRPC$TL_messageMediaVenue.venue_id = str2;
            tLRPC$TL_messageMediaVenue.venue_type = str2;
            if (str2 == null) {
                tLRPC$TL_messageMediaVenue.venue_type = "";
            }
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaVenue, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
        } else if (tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageMediaGeo) {
            if (tLRPC$BotInlineMessage.period != 0 || tLRPC$BotInlineMessage.proximity_notification_radius != 0) {
                TLRPC$TL_messageMediaGeoLive tLRPC$TL_messageMediaGeoLive = new TLRPC$TL_messageMediaGeoLive();
                TLRPC$BotInlineMessage tLRPC$BotInlineMessage4 = tLRPC$BotInlineResult.send_message;
                int i4 = tLRPC$BotInlineMessage4.period;
                if (i4 == 0) {
                    i4 = 900;
                }
                tLRPC$TL_messageMediaGeoLive.period = i4;
                tLRPC$TL_messageMediaGeoLive.geo = tLRPC$BotInlineMessage4.geo;
                tLRPC$TL_messageMediaGeoLive.heading = tLRPC$BotInlineMessage4.heading;
                tLRPC$TL_messageMediaGeoLive.proximity_notification_radius = tLRPC$BotInlineMessage4.proximity_notification_radius;
                accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaGeoLive, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
                return;
            }
            TLRPC$TL_messageMediaGeo tLRPC$TL_messageMediaGeo = new TLRPC$TL_messageMediaGeo();
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage5 = tLRPC$BotInlineResult.send_message;
            tLRPC$TL_messageMediaGeo.geo = tLRPC$BotInlineMessage5.geo;
            tLRPC$TL_messageMediaGeo.heading = tLRPC$BotInlineMessage5.heading;
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaGeo, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
        } else if (tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageMediaContact) {
            TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage6 = tLRPC$BotInlineResult.send_message;
            tLRPC$TL_user.phone = tLRPC$BotInlineMessage6.phone_number;
            tLRPC$TL_user.first_name = tLRPC$BotInlineMessage6.first_name;
            tLRPC$TL_user.last_name = tLRPC$BotInlineMessage6.last_name;
            TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = new TLRPC$TL_restrictionReason();
            tLRPC$TL_restrictionReason.text = tLRPC$BotInlineResult.send_message.vcard;
            tLRPC$TL_restrictionReason.platform = "";
            tLRPC$TL_restrictionReason.reason = "";
            tLRPC$TL_user.restriction_reason.add(tLRPC$TL_restrictionReason);
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_user, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
        } else if (!(tLRPC$BotInlineMessage instanceof TLRPC$TL_botInlineMessageMediaInvoice) || DialogObject.isEncryptedDialog(j)) {
        } else {
            TLRPC$TL_botInlineMessageMediaInvoice tLRPC$TL_botInlineMessageMediaInvoice = (TLRPC$TL_botInlineMessageMediaInvoice) tLRPC$BotInlineResult.send_message;
            TLRPC$TL_messageMediaInvoice tLRPC$TL_messageMediaInvoice = new TLRPC$TL_messageMediaInvoice();
            tLRPC$TL_messageMediaInvoice.shipping_address_requested = tLRPC$TL_botInlineMessageMediaInvoice.shipping_address_requested;
            tLRPC$TL_messageMediaInvoice.test = tLRPC$TL_botInlineMessageMediaInvoice.test;
            tLRPC$TL_messageMediaInvoice.title = tLRPC$TL_botInlineMessageMediaInvoice.title;
            tLRPC$TL_messageMediaInvoice.description = tLRPC$TL_botInlineMessageMediaInvoice.description;
            TLRPC$WebDocument tLRPC$WebDocument = tLRPC$TL_botInlineMessageMediaInvoice.photo;
            if (tLRPC$WebDocument != null) {
                tLRPC$TL_messageMediaInvoice.webPhoto = tLRPC$WebDocument;
                tLRPC$TL_messageMediaInvoice.flags |= 1;
            }
            tLRPC$TL_messageMediaInvoice.currency = tLRPC$TL_botInlineMessageMediaInvoice.currency;
            tLRPC$TL_messageMediaInvoice.total_amount = tLRPC$TL_botInlineMessageMediaInvoice.total_amount;
            tLRPC$TL_messageMediaInvoice.start_param = "";
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_messageMediaInvoice, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:181:0x045c  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x0462  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x046e  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x04b8  */
    /* JADX WARN: Removed duplicated region for block: B:201:0x04fa  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x0502  */
    /* JADX WARN: Removed duplicated region for block: B:205:0x050d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$prepareSendingBotContextResult$82(final long j, final TLRPC$BotInlineResult tLRPC$BotInlineResult, final AccountInstance accountInstance, final HashMap hashMap, final BaseFragment baseFragment, final MessageObject messageObject, final MessageObject messageObject2, final boolean z, final int i) {
        String str;
        String str2;
        char c;
        String str3;
        TLRPC$TL_photo tLRPC$TL_photo;
        Bitmap loadBitmap;
        String str4;
        int lastIndexOf;
        String str5;
        final TLRPC$TL_photo tLRPC$TL_photo2;
        TLRPC$TL_photo tLRPC$TL_photo3;
        TLRPC$TL_photo tLRPC$TL_photo4;
        final Bitmap[] bitmapArr;
        final String[] strArr;
        TLRPC$InputPeer inputPeer;
        TLRPC$WebDocument tLRPC$WebDocument;
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        TLRPC$TL_document tLRPC$TL_document = null;
        if ("game".equals(tLRPC$BotInlineResult.type)) {
            if (isEncryptedDialog) {
                return;
            }
            TLRPC$TL_game tLRPC$TL_game = new TLRPC$TL_game();
            tLRPC$TL_game.title = tLRPC$BotInlineResult.title;
            tLRPC$TL_game.description = tLRPC$BotInlineResult.description;
            tLRPC$TL_game.short_name = tLRPC$BotInlineResult.id;
            TLRPC$Photo tLRPC$Photo = tLRPC$BotInlineResult.photo;
            tLRPC$TL_game.photo = tLRPC$Photo;
            if (tLRPC$Photo == null) {
                tLRPC$TL_game.photo = new TLRPC$TL_photoEmpty();
            }
            TLRPC$Document tLRPC$Document = tLRPC$BotInlineResult.document;
            if (tLRPC$Document instanceof TLRPC$TL_document) {
                tLRPC$TL_game.document = tLRPC$Document;
                tLRPC$TL_game.flags |= 1;
            }
            tLRPC$TL_photo4 = tLRPC$TL_game;
            str5 = null;
            tLRPC$TL_photo2 = null;
        } else if (tLRPC$BotInlineResult instanceof TLRPC$TL_botInlineMediaResult) {
            TLRPC$Document tLRPC$Document2 = tLRPC$BotInlineResult.document;
            if (tLRPC$Document2 != null) {
                if (tLRPC$Document2 instanceof TLRPC$TL_document) {
                    tLRPC$TL_photo2 = null;
                    tLRPC$TL_photo4 = null;
                    tLRPC$TL_document = (TLRPC$TL_document) tLRPC$Document2;
                    str5 = null;
                }
            } else {
                TLRPC$Photo tLRPC$Photo2 = tLRPC$BotInlineResult.photo;
                if (tLRPC$Photo2 != null && (tLRPC$Photo2 instanceof TLRPC$TL_photo)) {
                    tLRPC$TL_photo2 = (TLRPC$TL_photo) tLRPC$Photo2;
                    str5 = null;
                    tLRPC$TL_photo3 = null;
                    tLRPC$TL_photo4 = tLRPC$TL_photo3;
                }
            }
            str5 = null;
            tLRPC$TL_document = null;
            tLRPC$TL_photo2 = null;
            tLRPC$TL_photo4 = tLRPC$TL_photo2;
        } else {
            TLRPC$WebDocument tLRPC$WebDocument2 = tLRPC$BotInlineResult.content;
            if (tLRPC$WebDocument2 != null) {
                String httpUrlExtension = ImageLoader.getHttpUrlExtension(tLRPC$WebDocument2.url, null);
                if (TextUtils.isEmpty(httpUrlExtension)) {
                    str = FileLoader.getExtensionByMimeType(tLRPC$BotInlineResult.content.mime_type);
                } else {
                    str = "." + httpUrlExtension;
                }
                File file = new File(FileLoader.getDirectory(4), Utilities.MD5(tLRPC$BotInlineResult.content.url) + str);
                if (file.exists()) {
                    str2 = file.getAbsolutePath();
                } else {
                    str2 = tLRPC$BotInlineResult.content.url;
                }
                String str6 = str2;
                String str7 = tLRPC$BotInlineResult.type;
                str7.hashCode();
                char c2 = 5;
                switch (str7.hashCode()) {
                    case -1890252483:
                        if (str7.equals("sticker")) {
                            c = 0;
                            break;
                        }
                        c = 65535;
                        break;
                    case 102340:
                        if (str7.equals("gif")) {
                            c = 1;
                            break;
                        }
                        c = 65535;
                        break;
                    case 3143036:
                        if (str7.equals("file")) {
                            c = 2;
                            break;
                        }
                        c = 65535;
                        break;
                    case 93166550:
                        if (str7.equals(MediaStreamTrack.AUDIO_TRACK_KIND)) {
                            c = 3;
                            break;
                        }
                        c = 65535;
                        break;
                    case 106642994:
                        if (str7.equals("photo")) {
                            c = 4;
                            break;
                        }
                        c = 65535;
                        break;
                    case 112202875:
                        if (str7.equals(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                            c = 5;
                            break;
                        }
                        c = 65535;
                        break;
                    case 112386354:
                        if (str7.equals("voice")) {
                            c = 6;
                            break;
                        }
                        c = 65535;
                        break;
                    default:
                        c = 65535;
                        break;
                }
                switch (c) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 5:
                    case 6:
                        TLRPC$TL_document tLRPC$TL_document2 = new TLRPC$TL_document();
                        tLRPC$TL_document2.id = 0L;
                        tLRPC$TL_document2.size = 0L;
                        tLRPC$TL_document2.dc_id = 0;
                        tLRPC$TL_document2.mime_type = tLRPC$BotInlineResult.content.mime_type;
                        tLRPC$TL_document2.file_reference = new byte[0];
                        tLRPC$TL_document2.date = accountInstance.getConnectionsManager().getCurrentTime();
                        TLRPC$TL_documentAttributeFilename tLRPC$TL_documentAttributeFilename = new TLRPC$TL_documentAttributeFilename();
                        tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeFilename);
                        String str8 = tLRPC$BotInlineResult.type;
                        str8.hashCode();
                        switch (str8.hashCode()) {
                            case -1890252483:
                                str3 = "file";
                                if (str8.equals("sticker")) {
                                    c2 = 0;
                                    break;
                                }
                                c2 = 65535;
                                break;
                            case 102340:
                                str3 = "file";
                                if (str8.equals("gif")) {
                                    c2 = 1;
                                    break;
                                }
                                c2 = 65535;
                                break;
                            case 3143036:
                                str3 = "file";
                                if (str8.equals(str3)) {
                                    c2 = 2;
                                    break;
                                }
                                c2 = 65535;
                                break;
                            case 93166550:
                                if (str8.equals(MediaStreamTrack.AUDIO_TRACK_KIND)) {
                                    str3 = "file";
                                    c2 = 3;
                                    break;
                                }
                                str3 = "file";
                                c2 = 65535;
                                break;
                            case 112202875:
                                if (str8.equals(MediaStreamTrack.VIDEO_TRACK_KIND)) {
                                    str3 = "file";
                                    c2 = 4;
                                    break;
                                }
                                str3 = "file";
                                c2 = 65535;
                                break;
                            case 112386354:
                                if (str8.equals("voice")) {
                                    str3 = "file";
                                    break;
                                }
                                str3 = "file";
                                c2 = 65535;
                                break;
                            default:
                                str3 = "file";
                                c2 = 65535;
                                break;
                        }
                        switch (c2) {
                            case 0:
                                TLRPC$TL_documentAttributeSticker tLRPC$TL_documentAttributeSticker = new TLRPC$TL_documentAttributeSticker();
                                tLRPC$TL_documentAttributeSticker.alt = "";
                                tLRPC$TL_documentAttributeSticker.stickerset = new TLRPC$TL_inputStickerSetEmpty();
                                tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeSticker);
                                TLRPC$TL_documentAttributeImageSize tLRPC$TL_documentAttributeImageSize = new TLRPC$TL_documentAttributeImageSize();
                                int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                                tLRPC$TL_documentAttributeImageSize.w = inlineResultWidthAndHeight[0];
                                tLRPC$TL_documentAttributeImageSize.h = inlineResultWidthAndHeight[1];
                                tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeImageSize);
                                tLRPC$TL_documentAttributeFilename.file_name = "sticker.webp";
                                try {
                                    if (tLRPC$BotInlineResult.thumb != null) {
                                        tLRPC$TL_photo = null;
                                        try {
                                            Bitmap loadBitmap2 = ImageLoader.loadBitmap(new File(FileLoader.getDirectory(4), Utilities.MD5(tLRPC$BotInlineResult.thumb.url) + "." + ImageLoader.getHttpUrlExtension(tLRPC$BotInlineResult.thumb.url, "webp")).getAbsolutePath(), null, 90.0f, 90.0f, true);
                                            if (loadBitmap2 != null) {
                                                TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(loadBitmap2, 90.0f, 90.0f, 55, false);
                                                if (scaleAndSaveImage != null) {
                                                    tLRPC$TL_document2.thumbs.add(scaleAndSaveImage);
                                                    tLRPC$TL_document2.flags |= 1;
                                                }
                                                loadBitmap2.recycle();
                                            }
                                        } catch (Throwable th) {
                                            th = th;
                                            FileLog.e(th);
                                            if (tLRPC$TL_documentAttributeFilename.file_name == null) {
                                            }
                                            if (tLRPC$TL_document2.mime_type == null) {
                                            }
                                            if (tLRPC$TL_document2.thumbs.isEmpty()) {
                                            }
                                            str5 = str6;
                                            tLRPC$TL_document = tLRPC$TL_document2;
                                            tLRPC$TL_photo2 = tLRPC$TL_photo;
                                            tLRPC$TL_photo4 = tLRPC$TL_photo2;
                                            if (hashMap != null) {
                                                hashMap.put("originalPath", tLRPC$WebDocument.url);
                                                break;
                                            }
                                            bitmapArr = new Bitmap[1];
                                            strArr = new String[1];
                                            if (!MessageObject.isGifDocument(tLRPC$TL_document)) {
                                            }
                                            if (DialogObject.isEncryptedDialog(j)) {
                                            }
                                            if (inputPeer == null) {
                                                break;
                                            }
                                            final TLRPC$TL_document tLRPC$TL_document3 = tLRPC$TL_document;
                                            final String str9 = str5;
                                            final TLRPC$TL_game tLRPC$TL_game2 = tLRPC$TL_photo4;
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda74
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    SendMessagesHelper.lambda$prepareSendingBotContextResult$81(TLRPC$TL_document.this, bitmapArr, strArr, accountInstance, str9, j, messageObject, messageObject2, tLRPC$BotInlineResult, hashMap, z, i, tLRPC$TL_photo2, tLRPC$TL_game2);
                                                }
                                            });
                                        }
                                    }
                                    tLRPC$TL_photo = null;
                                } catch (Throwable th2) {
                                    th = th2;
                                    tLRPC$TL_photo = null;
                                }
                                break;
                            case 1:
                                tLRPC$TL_documentAttributeFilename.file_name = "animation.gif";
                                if (str6.endsWith("mp4")) {
                                    tLRPC$TL_document2.mime_type = "video/mp4";
                                    tLRPC$TL_document2.attributes.add(new TLRPC$TL_documentAttributeAnimated());
                                } else {
                                    tLRPC$TL_document2.mime_type = "image/gif";
                                }
                                int i2 = isEncryptedDialog ? 90 : 320;
                                try {
                                    if (str6.endsWith("mp4")) {
                                        loadBitmap = createVideoThumbnail(str6, 1);
                                        if (loadBitmap == null) {
                                            TLRPC$WebDocument tLRPC$WebDocument3 = tLRPC$BotInlineResult.thumb;
                                            if ((tLRPC$WebDocument3 instanceof TLRPC$TL_webDocument) && "video/mp4".equals(tLRPC$WebDocument3.mime_type)) {
                                                String httpUrlExtension2 = ImageLoader.getHttpUrlExtension(tLRPC$BotInlineResult.thumb.url, null);
                                                if (TextUtils.isEmpty(httpUrlExtension2)) {
                                                    str4 = FileLoader.getExtensionByMimeType(tLRPC$BotInlineResult.thumb.mime_type);
                                                } else {
                                                    str4 = "." + httpUrlExtension2;
                                                }
                                                loadBitmap = createVideoThumbnail(new File(FileLoader.getDirectory(4), Utilities.MD5(tLRPC$BotInlineResult.thumb.url) + str4).getAbsolutePath(), 1);
                                            }
                                        }
                                    } else {
                                        float f = i2;
                                        loadBitmap = ImageLoader.loadBitmap(str6, null, f, f, true);
                                    }
                                    if (loadBitmap != null) {
                                        float f2 = i2;
                                        TLRPC$PhotoSize scaleAndSaveImage2 = ImageLoader.scaleAndSaveImage(loadBitmap, f2, f2, i2 > 90 ? 80 : 55, false);
                                        if (scaleAndSaveImage2 != null) {
                                            tLRPC$TL_document2.thumbs.add(scaleAndSaveImage2);
                                            tLRPC$TL_document2.flags |= 1;
                                        }
                                        loadBitmap.recycle();
                                    }
                                } catch (Throwable th3) {
                                    FileLog.e(th3);
                                }
                                tLRPC$TL_photo = null;
                                break;
                            case 2:
                                if (tLRPC$BotInlineResult.content.mime_type.lastIndexOf(47) != -1) {
                                    tLRPC$TL_documentAttributeFilename.file_name = "file." + tLRPC$BotInlineResult.content.mime_type.substring(lastIndexOf + 1);
                                } else {
                                    tLRPC$TL_documentAttributeFilename.file_name = str3;
                                }
                                tLRPC$TL_photo = null;
                                break;
                            case 3:
                                TLRPC$TL_documentAttributeAudio tLRPC$TL_documentAttributeAudio = new TLRPC$TL_documentAttributeAudio();
                                tLRPC$TL_documentAttributeAudio.duration = MessageObject.getInlineResultDuration(tLRPC$BotInlineResult);
                                tLRPC$TL_documentAttributeAudio.title = tLRPC$BotInlineResult.title;
                                int i3 = tLRPC$TL_documentAttributeAudio.flags | 1;
                                tLRPC$TL_documentAttributeAudio.flags = i3;
                                String str10 = tLRPC$BotInlineResult.description;
                                if (str10 != null) {
                                    tLRPC$TL_documentAttributeAudio.performer = str10;
                                    tLRPC$TL_documentAttributeAudio.flags = i3 | 2;
                                }
                                tLRPC$TL_documentAttributeFilename.file_name = "audio.mp3";
                                tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeAudio);
                                tLRPC$TL_photo = null;
                                break;
                            case 4:
                                tLRPC$TL_documentAttributeFilename.file_name = "video.mp4";
                                TLRPC$TL_documentAttributeVideo tLRPC$TL_documentAttributeVideo = new TLRPC$TL_documentAttributeVideo();
                                int[] inlineResultWidthAndHeight2 = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                                tLRPC$TL_documentAttributeVideo.w = inlineResultWidthAndHeight2[0];
                                tLRPC$TL_documentAttributeVideo.h = inlineResultWidthAndHeight2[1];
                                tLRPC$TL_documentAttributeVideo.duration = MessageObject.getInlineResultDuration(tLRPC$BotInlineResult);
                                tLRPC$TL_documentAttributeVideo.supports_streaming = true;
                                tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeVideo);
                                try {
                                    if (tLRPC$BotInlineResult.thumb != null) {
                                        Bitmap loadBitmap3 = ImageLoader.loadBitmap(new File(FileLoader.getDirectory(4), Utilities.MD5(tLRPC$BotInlineResult.thumb.url) + "." + ImageLoader.getHttpUrlExtension(tLRPC$BotInlineResult.thumb.url, "jpg")).getAbsolutePath(), null, 90.0f, 90.0f, true);
                                        if (loadBitmap3 != null) {
                                            TLRPC$PhotoSize scaleAndSaveImage3 = ImageLoader.scaleAndSaveImage(loadBitmap3, 90.0f, 90.0f, 55, false);
                                            if (scaleAndSaveImage3 != null) {
                                                tLRPC$TL_document2.thumbs.add(scaleAndSaveImage3);
                                                tLRPC$TL_document2.flags |= 1;
                                            }
                                            loadBitmap3.recycle();
                                        }
                                    }
                                } catch (Throwable th4) {
                                    FileLog.e(th4);
                                }
                                tLRPC$TL_photo = null;
                                break;
                            case 5:
                                TLRPC$TL_documentAttributeAudio tLRPC$TL_documentAttributeAudio2 = new TLRPC$TL_documentAttributeAudio();
                                tLRPC$TL_documentAttributeAudio2.duration = MessageObject.getInlineResultDuration(tLRPC$BotInlineResult);
                                tLRPC$TL_documentAttributeAudio2.voice = true;
                                tLRPC$TL_documentAttributeFilename.file_name = "audio.ogg";
                                tLRPC$TL_document2.attributes.add(tLRPC$TL_documentAttributeAudio2);
                                tLRPC$TL_photo = null;
                                break;
                            default:
                                tLRPC$TL_photo = null;
                                break;
                        }
                        if (tLRPC$TL_documentAttributeFilename.file_name == null) {
                            tLRPC$TL_documentAttributeFilename.file_name = str3;
                        }
                        if (tLRPC$TL_document2.mime_type == null) {
                            tLRPC$TL_document2.mime_type = "application/octet-stream";
                        }
                        if (tLRPC$TL_document2.thumbs.isEmpty()) {
                            TLRPC$TL_photoSize tLRPC$TL_photoSize = new TLRPC$TL_photoSize();
                            int[] inlineResultWidthAndHeight3 = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                            tLRPC$TL_photoSize.w = inlineResultWidthAndHeight3[0];
                            tLRPC$TL_photoSize.h = inlineResultWidthAndHeight3[1];
                            tLRPC$TL_photoSize.size = 0;
                            tLRPC$TL_photoSize.location = new TLRPC$TL_fileLocationUnavailable();
                            tLRPC$TL_photoSize.type = "x";
                            tLRPC$TL_document2.thumbs.add(tLRPC$TL_photoSize);
                            tLRPC$TL_document2.flags |= 1;
                        }
                        str5 = str6;
                        tLRPC$TL_document = tLRPC$TL_document2;
                        tLRPC$TL_photo2 = tLRPC$TL_photo;
                        tLRPC$TL_photo4 = tLRPC$TL_photo2;
                        break;
                    case 4:
                        TLRPC$TL_photo generatePhotoSizes = file.exists() ? accountInstance.getSendMessagesHelper().generatePhotoSizes(str6, null) : null;
                        if (generatePhotoSizes == null) {
                            generatePhotoSizes = new TLRPC$TL_photo();
                            generatePhotoSizes.date = accountInstance.getConnectionsManager().getCurrentTime();
                            generatePhotoSizes.file_reference = new byte[0];
                            TLRPC$TL_photoSize tLRPC$TL_photoSize2 = new TLRPC$TL_photoSize();
                            int[] inlineResultWidthAndHeight4 = MessageObject.getInlineResultWidthAndHeight(tLRPC$BotInlineResult);
                            tLRPC$TL_photoSize2.w = inlineResultWidthAndHeight4[0];
                            tLRPC$TL_photoSize2.h = inlineResultWidthAndHeight4[1];
                            tLRPC$TL_photoSize2.size = 1;
                            tLRPC$TL_photoSize2.location = new TLRPC$TL_fileLocationUnavailable();
                            tLRPC$TL_photoSize2.type = "x";
                            generatePhotoSizes.sizes.add(tLRPC$TL_photoSize2);
                        }
                        tLRPC$TL_photo2 = generatePhotoSizes;
                        str5 = str6;
                        tLRPC$TL_photo3 = null;
                        tLRPC$TL_photo4 = tLRPC$TL_photo3;
                        break;
                    default:
                        str5 = str6;
                        tLRPC$TL_photo = null;
                        tLRPC$TL_photo2 = tLRPC$TL_photo;
                        tLRPC$TL_photo4 = tLRPC$TL_photo2;
                        break;
                }
            }
            str5 = null;
            tLRPC$TL_document = null;
            tLRPC$TL_photo2 = null;
            tLRPC$TL_photo4 = tLRPC$TL_photo2;
        }
        if (hashMap != null && (tLRPC$WebDocument = tLRPC$BotInlineResult.content) != null) {
            hashMap.put("originalPath", tLRPC$WebDocument.url);
        }
        bitmapArr = new Bitmap[1];
        strArr = new String[1];
        if (!MessageObject.isGifDocument(tLRPC$TL_document)) {
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_document.thumbs, 320);
            File pathToAttach = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(tLRPC$TL_document);
            if (!pathToAttach.exists()) {
                pathToAttach = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(tLRPC$TL_document, true);
            }
            ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_document, pathToAttach.getAbsolutePath(), null, 0L);
            strArr[0] = getKeyForPhotoSize(accountInstance, closestPhotoSizeWithSize, bitmapArr, true, true);
        }
        inputPeer = DialogObject.isEncryptedDialog(j) ? accountInstance.getMessagesController().getInputPeer(j) : null;
        if (inputPeer == null && inputPeer.user_id != 0 && accountInstance.getMessagesController().getUserFull(inputPeer.user_id) != null && accountInstance.getMessagesController().getUserFull(inputPeer.user_id).voice_messages_forbidden && tLRPC$TL_document != null) {
            if (MessageObject.isVoiceDocument(tLRPC$TL_document)) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda75
                    @Override // java.lang.Runnable
                    public final void run() {
                        AlertsCreator.showSendMediaAlert(7, BaseFragment.this, null);
                    }
                });
                return;
            } else if (MessageObject.isRoundVideoDocument(tLRPC$TL_document)) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda76
                    @Override // java.lang.Runnable
                    public final void run() {
                        AlertsCreator.showSendMediaAlert(8, BaseFragment.this, null);
                    }
                });
                return;
            } else {
                return;
            }
        }
        final TLRPC$TL_document tLRPC$TL_document32 = tLRPC$TL_document;
        final String str92 = str5;
        final TLRPC$TL_game tLRPC$TL_game22 = tLRPC$TL_photo4;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingBotContextResult$81(TLRPC$TL_document.this, bitmapArr, strArr, accountInstance, str92, j, messageObject, messageObject2, tLRPC$BotInlineResult, hashMap, z, i, tLRPC$TL_photo2, tLRPC$TL_game22);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingBotContextResult$81(TLRPC$TL_document tLRPC$TL_document, Bitmap[] bitmapArr, String[] strArr, AccountInstance accountInstance, String str, long j, MessageObject messageObject, MessageObject messageObject2, TLRPC$BotInlineResult tLRPC$BotInlineResult, HashMap hashMap, boolean z, int i, TLRPC$TL_photo tLRPC$TL_photo, TLRPC$TL_game tLRPC$TL_game) {
        if (tLRPC$TL_document != null) {
            if (bitmapArr[0] != null && strArr[0] != null) {
                ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmapArr[0]), strArr[0], false);
            }
            SendMessagesHelper sendMessagesHelper = accountInstance.getSendMessagesHelper();
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage = tLRPC$BotInlineResult.send_message;
            sendMessagesHelper.sendMessage(tLRPC$TL_document, null, str, j, messageObject, messageObject2, tLRPC$BotInlineMessage.message, tLRPC$BotInlineMessage.entities, tLRPC$BotInlineMessage.reply_markup, hashMap, z, i, 0, tLRPC$BotInlineResult, null, false);
        } else if (tLRPC$TL_photo == null) {
            if (tLRPC$TL_game != null) {
                accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_game, j, messageObject, messageObject2, tLRPC$BotInlineResult.send_message.reply_markup, hashMap, z, i);
            }
        } else {
            SendMessagesHelper sendMessagesHelper2 = accountInstance.getSendMessagesHelper();
            TLRPC$WebDocument tLRPC$WebDocument = tLRPC$BotInlineResult.content;
            String str2 = tLRPC$WebDocument != null ? tLRPC$WebDocument.url : null;
            TLRPC$BotInlineMessage tLRPC$BotInlineMessage2 = tLRPC$BotInlineResult.send_message;
            sendMessagesHelper2.sendMessage(tLRPC$TL_photo, str2, j, messageObject, messageObject2, tLRPC$BotInlineMessage2.message, tLRPC$BotInlineMessage2.entities, tLRPC$BotInlineMessage2.reply_markup, hashMap, z, i, 0, tLRPC$BotInlineResult, false);
        }
    }

    private static String getTrimmedString(String str) {
        String trim = str.trim();
        if (trim.length() == 0) {
            return trim;
        }
        while (str.startsWith("\n")) {
            str = str.substring(1);
        }
        while (str.endsWith("\n")) {
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    public static void prepareSendingText(AccountInstance accountInstance, String str, long j, boolean z, int i) {
        prepareSendingText(accountInstance, str, j, 0, z, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingText$84(final String str, final int i, final AccountInstance accountInstance, final long j, final boolean z, final int i2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda7
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingText$83(str, i, accountInstance, j, z, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingText$85(final String str, final int i, final AccountInstance accountInstance, final long j, final boolean z, final int i2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda8
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingText$84(str, i, accountInstance, j, z, i2);
            }
        });
    }

    public static void prepareSendingText(final AccountInstance accountInstance, final String str, final long j, final int i, final boolean z, final int i2) {
        accountInstance.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda9
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingText$85(str, i, accountInstance, j, z, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:12:0x0043  */
    /* JADX WARN: Removed duplicated region for block: B:15:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:13:0x0070 -> B:11:0x0041). Please submit an issue!!! */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$prepareSendingText$83(String str, int i, AccountInstance accountInstance, long j, boolean z, int i2) {
        String trimmedString = getTrimmedString(str);
        if (trimmedString.length() == 0) {
            return;
        }
        int ceil = (int) Math.ceil(trimmedString.length() / 4096.0f);
        MessageObject messageObject = null;
        int i3 = 0;
        if (i != 0) {
            TLRPC$TL_forumTopic findTopic = accountInstance.getMessagesController().getTopicsController().findTopic(-j, i);
            if (findTopic != null && findTopic.topicStartMessage != null) {
                messageObject = new MessageObject(accountInstance.getCurrentAccount(), findTopic.topicStartMessage, false, false);
                messageObject.isTopicMainMessage = true;
            }
            if (i3 < ceil) {
                return;
            }
            int i4 = i3 * 4096;
            i3++;
            accountInstance.getSendMessagesHelper().sendMessage(trimmedString.substring(i4, Math.min(i3 * 4096, trimmedString.length())), j, messageObject, messageObject, null, true, null, null, null, z, i2, null, false);
        }
        if (i3 < ceil) {
        }
    }

    public static void ensureMediaThumbExists(AccountInstance accountInstance, boolean z, TLObject tLObject, String str, Uri uri, long j) {
        TLRPC$PhotoSize scaleAndSaveImage;
        TLRPC$PhotoSize scaleAndSaveImage2;
        if (tLObject instanceof TLRPC$TL_photo) {
            TLRPC$TL_photo tLRPC$TL_photo = (TLRPC$TL_photo) tLObject;
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photo.sizes, 90);
            boolean exists = ((closestPhotoSizeWithSize instanceof TLRPC$TL_photoStrippedSize) || (closestPhotoSizeWithSize instanceof TLRPC$TL_photoPathSize)) ? true : FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(closestPhotoSizeWithSize, true).exists();
            TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photo.sizes, AndroidUtilities.getPhotoSize());
            boolean exists2 = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(closestPhotoSizeWithSize2, false).exists();
            if (exists && exists2) {
                return;
            }
            Bitmap loadBitmap = ImageLoader.loadBitmap(str, uri, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), true);
            if (loadBitmap == null) {
                loadBitmap = ImageLoader.loadBitmap(str, uri, 800.0f, 800.0f, true);
            }
            Bitmap bitmap = loadBitmap;
            if (!exists2 && (scaleAndSaveImage2 = ImageLoader.scaleAndSaveImage(closestPhotoSizeWithSize2, bitmap, Bitmap.CompressFormat.JPEG, true, AndroidUtilities.getPhotoSize(), AndroidUtilities.getPhotoSize(), 80, false, FileLoader.MEDIA_DIR_VIDEO_PUBLIC, FileLoader.MEDIA_DIR_VIDEO_PUBLIC, false)) != closestPhotoSizeWithSize2) {
                tLRPC$TL_photo.sizes.add(0, scaleAndSaveImage2);
            }
            if (!exists && (scaleAndSaveImage = ImageLoader.scaleAndSaveImage(closestPhotoSizeWithSize, bitmap, 90.0f, 90.0f, 55, true, false)) != closestPhotoSizeWithSize) {
                tLRPC$TL_photo.sizes.add(0, scaleAndSaveImage);
            }
            if (bitmap != null) {
                bitmap.recycle();
            }
        } else if (tLObject instanceof TLRPC$TL_document) {
            TLRPC$TL_document tLRPC$TL_document = (TLRPC$TL_document) tLObject;
            if ((MessageObject.isVideoDocument(tLRPC$TL_document) || MessageObject.isNewGifDocument(tLRPC$TL_document)) && MessageObject.isDocumentHasThumb(tLRPC$TL_document)) {
                TLRPC$PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_document.thumbs, 320);
                if ((closestPhotoSizeWithSize3 instanceof TLRPC$TL_photoStrippedSize) || (closestPhotoSizeWithSize3 instanceof TLRPC$TL_photoPathSize) || FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(closestPhotoSizeWithSize3, true).exists()) {
                    return;
                }
                Bitmap createVideoThumbnailAtTime = createVideoThumbnailAtTime(str, j);
                Bitmap createVideoThumbnail = createVideoThumbnailAtTime == null ? createVideoThumbnail(str, 1) : createVideoThumbnailAtTime;
                int i = z ? 90 : 320;
                float f = i;
                tLRPC$TL_document.thumbs.set(0, ImageLoader.scaleAndSaveImage(closestPhotoSizeWithSize3, createVideoThumbnail, f, f, i > 90 ? 80 : 55, false, true));
            }
        }
    }

    public static String getKeyForPhotoSize(AccountInstance accountInstance, TLRPC$PhotoSize tLRPC$PhotoSize, Bitmap[] bitmapArr, boolean z, boolean z2) {
        if (tLRPC$PhotoSize == null || tLRPC$PhotoSize.location == null) {
            return null;
        }
        Point messageSize = ChatMessageCell.getMessageSize(tLRPC$PhotoSize.w, tLRPC$PhotoSize.h);
        if (bitmapArr != null) {
            try {
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inJustDecodeBounds = true;
                File pathToAttach = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(tLRPC$PhotoSize, z2);
                FileInputStream fileInputStream = new FileInputStream(pathToAttach);
                BitmapFactory.decodeStream(fileInputStream, null, options);
                fileInputStream.close();
                float max = Math.max(options.outWidth / messageSize.x, options.outHeight / messageSize.y);
                if (max < 1.0f) {
                    max = 1.0f;
                }
                options.inJustDecodeBounds = false;
                options.inSampleSize = (int) max;
                options.inPreferredConfig = Bitmap.Config.RGB_565;
                if (Build.VERSION.SDK_INT >= 21) {
                    FileInputStream fileInputStream2 = new FileInputStream(pathToAttach);
                    bitmapArr[0] = BitmapFactory.decodeStream(fileInputStream2, null, options);
                    fileInputStream2.close();
                }
            } catch (Throwable unused) {
            }
        }
        return String.format(Locale.US, z ? "%d_%d@%d_%d_b" : "%d_%d@%d_%d", Long.valueOf(tLRPC$PhotoSize.location.volume_id), Integer.valueOf(tLRPC$PhotoSize.location.local_id), Integer.valueOf((int) (messageSize.x / AndroidUtilities.density)), Integer.valueOf((int) (messageSize.y / AndroidUtilities.density)));
    }

    public static boolean shouldSendWebPAsSticker(String str, Uri uri) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        if (str != null) {
            try {
                RandomAccessFile randomAccessFile = new RandomAccessFile(str, "r");
                MappedByteBuffer map = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_ONLY, 0L, str.length());
                Utilities.loadWebpImage(null, map, map.limit(), options, true);
                randomAccessFile.close();
            } catch (Exception e) {
                FileLog.e(e);
            }
        } else {
            try {
                InputStream openInputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
                BitmapFactory.decodeStream(openInputStream, null, options);
                if (openInputStream != null) {
                    openInputStream.close();
                }
            } catch (Exception unused) {
            }
        }
        return options.outWidth < 800 && options.outHeight < 800;
    }

    public static void prepareSendingMedia(final AccountInstance accountInstance, final ArrayList<SendingMediaInfo> arrayList, final long j, final MessageObject messageObject, final MessageObject messageObject2, final InputContentInfoCompat inputContentInfoCompat, final boolean z, boolean z2, final MessageObject messageObject3, final boolean z3, final int i, final boolean z4) {
        final boolean z5;
        if (arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        int i2 = 0;
        while (true) {
            if (i2 >= size) {
                z5 = z2;
                break;
            } else if (arrayList.get(i2).ttl > 0) {
                z5 = false;
                break;
            } else {
                i2++;
            }
        }
        mediaSendQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingMedia$91(arrayList, j, z, z5, accountInstance, messageObject3, messageObject, messageObject2, z3, i, inputContentInfoCompat, z4);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x0611, code lost:
        if (r5 != null) goto L239;
     */
    /* JADX WARN: Code restructure failed: missing block: B:25:0x005d, code lost:
        if (r4 != false) goto L79;
     */
    /* JADX WARN: Code restructure failed: missing block: B:388:0x08a1, code lost:
        if (r66.size() == 1) goto L295;
     */
    /* JADX WARN: Code restructure failed: missing block: B:572:0x0d24, code lost:
        if (r12 == (r9 - 1)) goto L579;
     */
    /* JADX WARN: Removed duplicated region for block: B:139:0x02dd A[Catch: Exception -> 0x02ce, TryCatch #2 {Exception -> 0x02ce, blocks: (B:130:0x02c6, B:137:0x02d3, B:139:0x02dd, B:140:0x02e8), top: B:632:0x02c6 }] */
    /* JADX WARN: Removed duplicated region for block: B:140:0x02e8 A[Catch: Exception -> 0x02ce, TRY_LEAVE, TryCatch #2 {Exception -> 0x02ce, blocks: (B:130:0x02c6, B:137:0x02d3, B:139:0x02dd, B:140:0x02e8), top: B:632:0x02c6 }] */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0322  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x034c  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x035b  */
    /* JADX WARN: Removed duplicated region for block: B:168:0x0366  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x0425  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x06a8  */
    /* JADX WARN: Removed duplicated region for block: B:312:0x0701  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x079b  */
    /* JADX WARN: Removed duplicated region for block: B:405:0x08cd  */
    /* JADX WARN: Removed duplicated region for block: B:413:0x08fb  */
    /* JADX WARN: Removed duplicated region for block: B:480:0x0b3d  */
    /* JADX WARN: Removed duplicated region for block: B:509:0x0bee  */
    /* JADX WARN: Removed duplicated region for block: B:512:0x0c05  */
    /* JADX WARN: Removed duplicated region for block: B:513:0x0c0b  */
    /* JADX WARN: Removed duplicated region for block: B:540:0x0c70  */
    /* JADX WARN: Removed duplicated region for block: B:543:0x0c84  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x0c8f  */
    /* JADX WARN: Removed duplicated region for block: B:549:0x0c9c  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00ac  */
    /* JADX WARN: Removed duplicated region for block: B:555:0x0caf  */
    /* JADX WARN: Removed duplicated region for block: B:557:0x0cbb  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:564:0x0cf8  */
    /* JADX WARN: Removed duplicated region for block: B:566:0x0cfd  */
    /* JADX WARN: Removed duplicated region for block: B:568:0x0d04 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:578:0x0d39  */
    /* JADX WARN: Removed duplicated region for block: B:585:0x0d6e A[LOOP:4: B:583:0x0d66->B:585:0x0d6e, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:628:0x060c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:638:0x02f5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:669:0x0cac A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x016b  */
    /* JADX WARN: Type inference failed for: r8v0 */
    /* JADX WARN: Type inference failed for: r8v19, types: [boolean] */
    /* JADX WARN: Type inference failed for: r8v21 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$prepareSendingMedia$91(ArrayList arrayList, final long j, boolean z, boolean z2, final AccountInstance accountInstance, final MessageObject messageObject, final MessageObject messageObject2, final MessageObject messageObject3, final boolean z3, final int i, InputContentInfoCompat inputContentInfoCompat, final boolean z4) {
        int i2;
        HashMap hashMap;
        int i3;
        int i4;
        long j2;
        int i5;
        String str;
        boolean z5;
        int i6;
        HashMap hashMap2;
        long j3;
        ArrayList arrayList2;
        String str2;
        String str3;
        ArrayList arrayList3;
        ArrayList arrayList4;
        HashMap hashMap3;
        String str4;
        String str5;
        VideoEditedInfo videoEditedInfo;
        int i7;
        boolean z6;
        String str6;
        long j4;
        int i8;
        ArrayList arrayList5;
        ArrayList arrayList6;
        String str7;
        long j5;
        boolean z7;
        String str8;
        File file;
        long j6;
        ArrayList arrayList7;
        String str9;
        String str10;
        Object obj;
        Object obj2;
        String str11;
        TLRPC$TL_document tLRPC$TL_document;
        boolean z8;
        String str12;
        final Bitmap bitmap;
        final String str13;
        TLRPC$TL_document tLRPC$TL_document2;
        final HashMap hashMap4;
        long j7;
        int i9;
        int i10;
        ArrayList<TLRPC$InputDocument> arrayList8;
        int i11;
        int size;
        int i12;
        boolean z9;
        Bitmap bitmap2;
        String str14;
        String str15;
        TLRPC$PhotoSize tLRPC$PhotoSize;
        String str16;
        TLRPC$TL_documentAttributeVideo tLRPC$TL_documentAttributeVideo;
        int i13;
        int i14;
        MediaController.SearchImage searchImage;
        String str17;
        String str18;
        String str19;
        String str20;
        String str21;
        boolean z10;
        HashMap hashMap5;
        String str22;
        boolean z11;
        String str23;
        ArrayList arrayList9;
        String str24;
        String str25;
        String str26;
        String str27;
        int i15;
        Object obj3;
        SendingMediaInfo sendingMediaInfo;
        TLRPC$TL_photo tLRPC$TL_photo;
        String str28;
        boolean z12;
        final TLRPC$TL_photo tLRPC$TL_photo2;
        String str29;
        Object obj4;
        String str30;
        TLRPC$TL_photo tLRPC$TL_photo3;
        int i16;
        long j8;
        String str31;
        ArrayList arrayList10;
        ArrayList arrayList11;
        ArrayList arrayList12;
        AccountInstance accountInstance2;
        long j9;
        int i17;
        TLRPC$PhotoSize closestPhotoSizeWithSize;
        ArrayList arrayList13;
        ArrayList arrayList14;
        ArrayList arrayList15;
        Uri uri;
        InputStream inputStream;
        FileOutputStream fileOutputStream;
        Uri uri2;
        final TLRPC$TL_photo tLRPC$TL_photo4;
        final boolean z13;
        long j10;
        int i18;
        int i19;
        Uri uri3;
        boolean z14;
        File file2;
        TLRPC$TL_document tLRPC$TL_document3;
        Object obj5;
        final TLRPC$TL_document tLRPC$TL_document4;
        String str32;
        File file3;
        int i20;
        Bitmap loadBitmap;
        int i21;
        String str33;
        boolean z15;
        String str34;
        SendingMediaInfo sendingMediaInfo2;
        int i22;
        String str35;
        TLRPC$TL_photo tLRPC$TL_photo5;
        String str36;
        TLRPC$TL_photo tLRPC$TL_photo6;
        String str37;
        TLRPC$TL_photo tLRPC$TL_photo7;
        Uri uri4;
        Uri uri5;
        ArrayList arrayList16 = arrayList;
        long currentTimeMillis = System.currentTimeMillis();
        int size2 = arrayList.size();
        final boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        String str38 = ".webp";
        String str39 = ".gif";
        String str40 = "_";
        Uri uri6 = null;
        ?? r8 = 1;
        if (z || !z2) {
            i2 = 1;
            hashMap = null;
        } else {
            HashMap hashMap6 = new HashMap();
            int i23 = 0;
            while (i23 < size2) {
                SendingMediaInfo sendingMediaInfo3 = (SendingMediaInfo) arrayList16.get(i23);
                if (sendingMediaInfo3.searchImage == null && !sendingMediaInfo3.isVideo && sendingMediaInfo3.videoEditedInfo == null) {
                    String str41 = sendingMediaInfo3.path;
                    if (str41 != null || (uri5 = sendingMediaInfo3.uri) == null) {
                        str33 = str41;
                    } else {
                        str41 = AndroidUtilities.getPath(uri5);
                        str33 = sendingMediaInfo3.uri.toString();
                    }
                    if (str41 == null || sendingMediaInfo3.ttl > 0) {
                        z15 = false;
                    } else {
                        if (str41.endsWith(".gif")) {
                            z15 = false;
                        } else {
                            z15 = str41.endsWith(".webp");
                        }
                        if (arrayList.size() > r8 || (z15 && !shouldSendWebPAsSticker(str41, uri6))) {
                            sendingMediaInfo3.forceImage = r8;
                            if (str41 == null) {
                                File file4 = new File(str41);
                                str34 = str33 + file4.length() + "_" + file4.lastModified();
                            } else {
                                str34 = null;
                            }
                            if (isEncryptedDialog && sendingMediaInfo3.ttl == 0) {
                                Object[] sentFile = accountInstance.getMessagesStorage().getSentFile(str34, !isEncryptedDialog ? 0 : 3);
                                if (sentFile == null || !(sentFile[0] instanceof TLRPC$TL_photo)) {
                                    str36 = null;
                                    tLRPC$TL_photo6 = null;
                                } else {
                                    tLRPC$TL_photo6 = (TLRPC$TL_photo) sentFile[0];
                                    str36 = (String) sentFile[1];
                                }
                                if (tLRPC$TL_photo6 == null && sendingMediaInfo3.uri != null) {
                                    Object[] sentFile2 = accountInstance.getMessagesStorage().getSentFile(AndroidUtilities.getPath(sendingMediaInfo3.uri), !isEncryptedDialog ? 0 : 3);
                                    if (sentFile2 != null) {
                                        if (sentFile2[0] instanceof TLRPC$TL_photo) {
                                            tLRPC$TL_photo7 = (TLRPC$TL_photo) sentFile2[0];
                                            str37 = (String) sentFile2[1];
                                            TLRPC$TL_photo tLRPC$TL_photo8 = tLRPC$TL_photo7;
                                            sendingMediaInfo2 = sendingMediaInfo3;
                                            i21 = i23;
                                            TLRPC$TL_photo tLRPC$TL_photo9 = tLRPC$TL_photo7;
                                            i22 = 1;
                                            ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_photo8, sendingMediaInfo3.path, sendingMediaInfo3.uri, 0L);
                                            str35 = str37;
                                            tLRPC$TL_photo5 = tLRPC$TL_photo9;
                                        } else {
                                            str37 = str36;
                                            tLRPC$TL_photo7 = tLRPC$TL_photo6;
                                            TLRPC$TL_photo tLRPC$TL_photo82 = tLRPC$TL_photo7;
                                            sendingMediaInfo2 = sendingMediaInfo3;
                                            i21 = i23;
                                            TLRPC$TL_photo tLRPC$TL_photo92 = tLRPC$TL_photo7;
                                            i22 = 1;
                                            ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_photo82, sendingMediaInfo3.path, sendingMediaInfo3.uri, 0L);
                                            str35 = str37;
                                            tLRPC$TL_photo5 = tLRPC$TL_photo92;
                                        }
                                    }
                                }
                                str37 = str36;
                                tLRPC$TL_photo7 = tLRPC$TL_photo6;
                                TLRPC$TL_photo tLRPC$TL_photo822 = tLRPC$TL_photo7;
                                sendingMediaInfo2 = sendingMediaInfo3;
                                i21 = i23;
                                TLRPC$TL_photo tLRPC$TL_photo922 = tLRPC$TL_photo7;
                                i22 = 1;
                                ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_photo822, sendingMediaInfo3.path, sendingMediaInfo3.uri, 0L);
                                str35 = str37;
                                tLRPC$TL_photo5 = tLRPC$TL_photo922;
                            } else {
                                sendingMediaInfo2 = sendingMediaInfo3;
                                i21 = i23;
                                i22 = 1;
                                str35 = null;
                                tLRPC$TL_photo5 = null;
                            }
                            final MediaSendPrepareWorker mediaSendPrepareWorker = new MediaSendPrepareWorker();
                            final SendingMediaInfo sendingMediaInfo4 = sendingMediaInfo2;
                            hashMap6.put(sendingMediaInfo4, mediaSendPrepareWorker);
                            if (tLRPC$TL_photo5 == null) {
                                mediaSendPrepareWorker.parentObject = str35;
                                mediaSendPrepareWorker.photo = tLRPC$TL_photo5;
                            } else {
                                mediaSendPrepareWorker.sync = new CountDownLatch(i22);
                                mediaSendThreadPool.execute(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda21
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingMedia$86(SendMessagesHelper.MediaSendPrepareWorker.this, accountInstance, sendingMediaInfo4, isEncryptedDialog);
                                    }
                                });
                            }
                            i23 = i21 + 1;
                            r8 = 1;
                            uri6 = null;
                        }
                    }
                    if (!ImageLoader.shouldSendImageAsDocument(sendingMediaInfo3.path, sendingMediaInfo3.uri)) {
                        if (str41 == null && (uri4 = sendingMediaInfo3.uri) != null && (MediaController.isGif(uri4) || (z15 = MediaController.isWebp(sendingMediaInfo3.uri)))) {
                            if (arrayList.size() > r8 || (z15 && !shouldSendWebPAsSticker(null, sendingMediaInfo3.uri))) {
                                sendingMediaInfo3.forceImage = r8;
                            }
                        }
                        if (str41 == null) {
                        }
                        if (isEncryptedDialog) {
                        }
                        sendingMediaInfo2 = sendingMediaInfo3;
                        i21 = i23;
                        i22 = 1;
                        str35 = null;
                        tLRPC$TL_photo5 = null;
                        final MediaSendPrepareWorker mediaSendPrepareWorker2 = new MediaSendPrepareWorker();
                        final SendingMediaInfo sendingMediaInfo42 = sendingMediaInfo2;
                        hashMap6.put(sendingMediaInfo42, mediaSendPrepareWorker2);
                        if (tLRPC$TL_photo5 == null) {
                        }
                        i23 = i21 + 1;
                        r8 = 1;
                        uri6 = null;
                    }
                }
                i21 = i23;
                i23 = i21 + 1;
                r8 = 1;
                uri6 = null;
            }
            i2 = 1;
            hashMap = hashMap6;
        }
        HashMap hashMap7 = hashMap;
        int i24 = 0;
        ArrayList arrayList17 = null;
        ArrayList arrayList18 = null;
        ArrayList arrayList19 = null;
        int i25 = 0;
        String str42 = null;
        long j11 = 0;
        ArrayList arrayList20 = null;
        ArrayList arrayList21 = null;
        long j12 = 0;
        while (i25 < size2) {
            final SendingMediaInfo sendingMediaInfo5 = (SendingMediaInfo) arrayList16.get(i25);
            if (z2 && size2 > i2 && i24 % 10 == 0) {
                j12 = Utilities.random.nextLong();
                j2 = j12;
                i4 = 0;
            } else {
                i4 = i24;
                j2 = j11;
            }
            MediaController.SearchImage searchImage2 = sendingMediaInfo5.searchImage;
            ArrayList arrayList22 = arrayList17;
            String str43 = str39;
            String str44 = str40;
            ArrayList arrayList23 = arrayList18;
            ArrayList arrayList24 = arrayList19;
            if (searchImage2 != null) {
                int i26 = i25;
                if (sendingMediaInfo5.videoEditedInfo == null) {
                    String str45 = str38;
                    if (searchImage2.type == 1) {
                        final HashMap hashMap8 = new HashMap();
                        TLRPC$Document tLRPC$Document = sendingMediaInfo5.searchImage.document;
                        if (tLRPC$Document instanceof TLRPC$TL_document) {
                            tLRPC$TL_document3 = (TLRPC$TL_document) tLRPC$Document;
                            file2 = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(tLRPC$TL_document3, true);
                        } else {
                            file2 = new File(FileLoader.getDirectory(4), Utilities.MD5(sendingMediaInfo5.searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(sendingMediaInfo5.searchImage.imageUrl, "jpg"));
                            tLRPC$TL_document3 = null;
                        }
                        if (tLRPC$TL_document3 == null) {
                            tLRPC$TL_document4 = new TLRPC$TL_document();
                            tLRPC$TL_document4.id = 0L;
                            tLRPC$TL_document4.file_reference = new byte[0];
                            tLRPC$TL_document4.date = accountInstance.getConnectionsManager().getCurrentTime();
                            TLRPC$TL_documentAttributeFilename tLRPC$TL_documentAttributeFilename = new TLRPC$TL_documentAttributeFilename();
                            tLRPC$TL_documentAttributeFilename.file_name = "animation.gif";
                            tLRPC$TL_document4.attributes.add(tLRPC$TL_documentAttributeFilename);
                            tLRPC$TL_document4.size = sendingMediaInfo5.searchImage.size;
                            tLRPC$TL_document4.dc_id = 0;
                            if (!z && file2.toString().endsWith("mp4")) {
                                tLRPC$TL_document4.mime_type = "video/mp4";
                                tLRPC$TL_document4.attributes.add(new TLRPC$TL_documentAttributeAnimated());
                            } else {
                                tLRPC$TL_document4.mime_type = "image/gif";
                            }
                            if (file2.exists()) {
                                file3 = file2;
                            } else {
                                file2 = null;
                                file3 = null;
                            }
                            if (file2 == null) {
                                file2 = new File(FileLoader.getDirectory(4), Utilities.MD5(sendingMediaInfo5.searchImage.thumbUrl) + "." + ImageLoader.getHttpUrlExtension(sendingMediaInfo5.searchImage.thumbUrl, "jpg"));
                                if (!file2.exists()) {
                                    file2 = null;
                                }
                            }
                            if (file2 != null) {
                                if (!isEncryptedDialog) {
                                    try {
                                        if (sendingMediaInfo5.ttl == 0) {
                                            i20 = 320;
                                            if (!file2.getAbsolutePath().endsWith("mp4")) {
                                                loadBitmap = createVideoThumbnail(file2.getAbsolutePath(), 1);
                                                obj5 = null;
                                            } else {
                                                float f = i20;
                                                obj5 = null;
                                                loadBitmap = ImageLoader.loadBitmap(file2.getAbsolutePath(), null, f, f, true);
                                            }
                                            if (loadBitmap != null) {
                                                try {
                                                    float f2 = i20;
                                                    TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(loadBitmap, f2, f2, i20 > 90 ? 80 : 55, isEncryptedDialog);
                                                    if (scaleAndSaveImage != null) {
                                                        tLRPC$TL_document4.thumbs.add(scaleAndSaveImage);
                                                        tLRPC$TL_document4.flags |= 1;
                                                    }
                                                    loadBitmap.recycle();
                                                } catch (Exception e) {
                                                    e = e;
                                                    FileLog.e(e);
                                                    if (tLRPC$TL_document4.thumbs.isEmpty()) {
                                                    }
                                                    file2 = file3;
                                                    String str46 = sendingMediaInfo5.searchImage.imageUrl;
                                                    if (file2 != null) {
                                                    }
                                                    final String str47 = str46;
                                                    str32 = sendingMediaInfo5.searchImage.imageUrl;
                                                    if (str32 != null) {
                                                    }
                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda14
                                                        @Override // java.lang.Runnable
                                                        public final void run() {
                                                            SendMessagesHelper.lambda$prepareSendingMedia$87(MessageObject.this, accountInstance, tLRPC$TL_document4, str47, hashMap8, sendingMediaInfo5, r7, j, messageObject2, messageObject3, z3, i);
                                                        }
                                                    });
                                                    arrayList17 = arrayList22;
                                                    i24 = i4;
                                                    j4 = j2;
                                                    arrayList19 = arrayList24;
                                                    arrayList18 = arrayList23;
                                                    i7 = i26;
                                                    hashMap3 = hashMap7;
                                                    str4 = str43;
                                                    str6 = str44;
                                                    str5 = str45;
                                                    z6 = isEncryptedDialog;
                                                    i8 = size2;
                                                    i25 = i7 + 1;
                                                    arrayList16 = arrayList;
                                                    str38 = str5;
                                                    str39 = str4;
                                                    str40 = str6;
                                                    hashMap7 = hashMap3;
                                                    isEncryptedDialog = z6;
                                                    j11 = j4;
                                                    size2 = i8;
                                                    i2 = 1;
                                                }
                                            }
                                        }
                                    } catch (Exception e2) {
                                        e = e2;
                                        obj5 = null;
                                        FileLog.e(e);
                                        if (tLRPC$TL_document4.thumbs.isEmpty()) {
                                        }
                                        file2 = file3;
                                        String str462 = sendingMediaInfo5.searchImage.imageUrl;
                                        if (file2 != null) {
                                        }
                                        final String str472 = str462;
                                        str32 = sendingMediaInfo5.searchImage.imageUrl;
                                        if (str32 != null) {
                                        }
                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda14
                                            @Override // java.lang.Runnable
                                            public final void run() {
                                                SendMessagesHelper.lambda$prepareSendingMedia$87(MessageObject.this, accountInstance, tLRPC$TL_document4, str472, hashMap8, sendingMediaInfo5, r7, j, messageObject2, messageObject3, z3, i);
                                            }
                                        });
                                        arrayList17 = arrayList22;
                                        i24 = i4;
                                        j4 = j2;
                                        arrayList19 = arrayList24;
                                        arrayList18 = arrayList23;
                                        i7 = i26;
                                        hashMap3 = hashMap7;
                                        str4 = str43;
                                        str6 = str44;
                                        str5 = str45;
                                        z6 = isEncryptedDialog;
                                        i8 = size2;
                                        i25 = i7 + 1;
                                        arrayList16 = arrayList;
                                        str38 = str5;
                                        str39 = str4;
                                        str40 = str6;
                                        hashMap7 = hashMap3;
                                        isEncryptedDialog = z6;
                                        j11 = j4;
                                        size2 = i8;
                                        i2 = 1;
                                    }
                                }
                                i20 = 90;
                                if (!file2.getAbsolutePath().endsWith("mp4")) {
                                }
                                if (loadBitmap != null) {
                                }
                            } else {
                                obj5 = null;
                            }
                            if (tLRPC$TL_document4.thumbs.isEmpty()) {
                                TLRPC$TL_photoSize tLRPC$TL_photoSize = new TLRPC$TL_photoSize();
                                MediaController.SearchImage searchImage3 = sendingMediaInfo5.searchImage;
                                tLRPC$TL_photoSize.w = searchImage3.width;
                                tLRPC$TL_photoSize.h = searchImage3.height;
                                tLRPC$TL_photoSize.size = 0;
                                tLRPC$TL_photoSize.location = new TLRPC$TL_fileLocationUnavailable();
                                tLRPC$TL_photoSize.type = "x";
                                tLRPC$TL_document4.thumbs.add(tLRPC$TL_photoSize);
                                tLRPC$TL_document4.flags |= 1;
                            }
                            file2 = file3;
                        } else {
                            obj5 = null;
                            tLRPC$TL_document4 = tLRPC$TL_document3;
                        }
                        String str4622 = sendingMediaInfo5.searchImage.imageUrl;
                        if (file2 != null) {
                            str4622 = file2.toString();
                        }
                        final String str4722 = str4622;
                        str32 = sendingMediaInfo5.searchImage.imageUrl;
                        if (str32 != null) {
                            hashMap8.put("originalPath", str32);
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda14
                            @Override // java.lang.Runnable
                            public final void run() {
                                SendMessagesHelper.lambda$prepareSendingMedia$87(MessageObject.this, accountInstance, tLRPC$TL_document4, str4722, hashMap8, sendingMediaInfo5, r7, j, messageObject2, messageObject3, z3, i);
                            }
                        });
                        arrayList17 = arrayList22;
                        i24 = i4;
                        j4 = j2;
                        arrayList19 = arrayList24;
                        arrayList18 = arrayList23;
                        i7 = i26;
                        hashMap3 = hashMap7;
                        str4 = str43;
                        str6 = str44;
                        str5 = str45;
                        z6 = isEncryptedDialog;
                        i8 = size2;
                    } else {
                        boolean z16 = isEncryptedDialog;
                        int i27 = size2;
                        HashMap hashMap9 = hashMap7;
                        TLRPC$Photo tLRPC$Photo = searchImage2.photo;
                        TLRPC$TL_photo tLRPC$TL_photo10 = tLRPC$Photo instanceof TLRPC$TL_photo ? (TLRPC$TL_photo) tLRPC$Photo : null;
                        if (tLRPC$TL_photo10 == null) {
                            File file5 = new File(FileLoader.getDirectory(4), Utilities.MD5(sendingMediaInfo5.searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(sendingMediaInfo5.searchImage.imageUrl, "jpg"));
                            if (!file5.exists() || file5.length() == 0) {
                                uri3 = null;
                            } else {
                                uri3 = null;
                                tLRPC$TL_photo10 = accountInstance.getSendMessagesHelper().generatePhotoSizes(file5.toString(), null);
                                if (tLRPC$TL_photo10 != null) {
                                    z14 = false;
                                    if (tLRPC$TL_photo10 == null) {
                                        File file6 = new File(FileLoader.getDirectory(4), Utilities.MD5(sendingMediaInfo5.searchImage.thumbUrl) + "." + ImageLoader.getHttpUrlExtension(sendingMediaInfo5.searchImage.thumbUrl, "jpg"));
                                        if (file6.exists()) {
                                            tLRPC$TL_photo10 = accountInstance.getSendMessagesHelper().generatePhotoSizes(file6.toString(), uri3);
                                        }
                                        if (tLRPC$TL_photo10 == null) {
                                            tLRPC$TL_photo10 = new TLRPC$TL_photo();
                                            tLRPC$TL_photo10.date = accountInstance.getConnectionsManager().getCurrentTime();
                                            tLRPC$TL_photo10.file_reference = new byte[0];
                                            TLRPC$TL_photoSize tLRPC$TL_photoSize2 = new TLRPC$TL_photoSize();
                                            MediaController.SearchImage searchImage4 = sendingMediaInfo5.searchImage;
                                            tLRPC$TL_photoSize2.w = searchImage4.width;
                                            tLRPC$TL_photoSize2.h = searchImage4.height;
                                            tLRPC$TL_photoSize2.size = 0;
                                            tLRPC$TL_photoSize2.location = new TLRPC$TL_fileLocationUnavailable();
                                            tLRPC$TL_photoSize2.type = "x";
                                            tLRPC$TL_photo10.sizes.add(tLRPC$TL_photoSize2);
                                            tLRPC$TL_photo4 = tLRPC$TL_photo10;
                                            z13 = z14;
                                        }
                                    }
                                    tLRPC$TL_photo4 = tLRPC$TL_photo10;
                                    z13 = z14;
                                }
                            }
                            z14 = true;
                            if (tLRPC$TL_photo10 == null) {
                            }
                            tLRPC$TL_photo4 = tLRPC$TL_photo10;
                            z13 = z14;
                        } else {
                            tLRPC$TL_photo4 = tLRPC$TL_photo10;
                            z13 = true;
                        }
                        final HashMap hashMap10 = new HashMap();
                        String str48 = sendingMediaInfo5.searchImage.imageUrl;
                        if (str48 != null) {
                            hashMap10.put("originalPath", str48);
                        }
                        if (z2) {
                            int i28 = i4 + 1;
                            StringBuilder sb = new StringBuilder();
                            sb.append("");
                            j10 = j2;
                            sb.append(j10);
                            hashMap10.put("groupId", sb.toString());
                            if (i28 != 10) {
                                i19 = i27;
                                i18 = i26;
                                if (i18 != i19 - 1) {
                                    i4 = i28;
                                }
                            } else {
                                i18 = i26;
                                i19 = i27;
                            }
                            hashMap10.put("final", "1");
                            i4 = i28;
                            j12 = 0;
                        } else {
                            j10 = j2;
                            i18 = i26;
                            i19 = i27;
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda16
                            @Override // java.lang.Runnable
                            public final void run() {
                                SendMessagesHelper.lambda$prepareSendingMedia$88(MessageObject.this, accountInstance, tLRPC$TL_photo4, z13, sendingMediaInfo5, hashMap10, r7, j, messageObject2, messageObject3, z3, i);
                            }
                        });
                        i8 = i19;
                        i24 = i4;
                        arrayList19 = arrayList24;
                        arrayList18 = arrayList23;
                        hashMap3 = hashMap9;
                        str4 = str43;
                        str6 = str44;
                        str5 = str45;
                        z6 = z16;
                        j4 = j10;
                        i7 = i18;
                        arrayList17 = arrayList22;
                    }
                    i25 = i7 + 1;
                    arrayList16 = arrayList;
                    str38 = str5;
                    str39 = str4;
                    str40 = str6;
                    hashMap7 = hashMap3;
                    isEncryptedDialog = z6;
                    j11 = j4;
                    size2 = i8;
                    i2 = 1;
                } else {
                    str = str38;
                    z5 = isEncryptedDialog;
                    i6 = size2;
                    hashMap2 = hashMap7;
                    j3 = j2;
                    arrayList2 = arrayList22;
                    str2 = str43;
                    str3 = str44;
                    arrayList3 = arrayList23;
                    arrayList4 = arrayList24;
                    i5 = i26;
                }
            } else {
                i5 = i25;
                str = str38;
                z5 = isEncryptedDialog;
                i6 = size2;
                hashMap2 = hashMap7;
                j3 = j2;
                arrayList2 = arrayList22;
                str2 = str43;
                str3 = str44;
                arrayList3 = arrayList23;
                arrayList4 = arrayList24;
            }
            if (sendingMediaInfo5.isVideo || sendingMediaInfo5.videoEditedInfo != null) {
                int i29 = i6;
                ArrayList arrayList25 = arrayList4;
                hashMap3 = hashMap2;
                str4 = str2;
                String str49 = str3;
                str5 = str;
                long j13 = j3;
                int i30 = i5;
                if (z) {
                    videoEditedInfo = null;
                } else {
                    videoEditedInfo = sendingMediaInfo5.videoEditedInfo;
                    if (videoEditedInfo == null) {
                        videoEditedInfo = createCompressionSettings(sendingMediaInfo5.path);
                    }
                }
                if (!z && (videoEditedInfo != null || sendingMediaInfo5.path.endsWith("mp4"))) {
                    if (sendingMediaInfo5.path == null && (searchImage = sendingMediaInfo5.searchImage) != null) {
                        if (searchImage.photo instanceof TLRPC$TL_photo) {
                            sendingMediaInfo5.path = FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(sendingMediaInfo5.searchImage.photo, true).getAbsolutePath();
                        } else {
                            sendingMediaInfo5.path = new File(FileLoader.getDirectory(4), Utilities.MD5(sendingMediaInfo5.searchImage.imageUrl) + "." + ImageLoader.getHttpUrlExtension(sendingMediaInfo5.searchImage.imageUrl, "jpg")).getAbsolutePath();
                        }
                    }
                    String str50 = sendingMediaInfo5.path;
                    File file7 = new File(str50);
                    String str51 = str50 + file7.length() + str49 + file7.lastModified();
                    if (videoEditedInfo != null) {
                        boolean z17 = videoEditedInfo.muted;
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(str51);
                        sb2.append(videoEditedInfo.estimatedDuration);
                        sb2.append(str49);
                        sb2.append(videoEditedInfo.startTime);
                        sb2.append(str49);
                        sb2.append(videoEditedInfo.endTime);
                        sb2.append(videoEditedInfo.muted ? "_m" : "");
                        String sb3 = sb2.toString();
                        if (videoEditedInfo.resultWidth != videoEditedInfo.originalWidth) {
                            sb3 = sb3 + str49 + videoEditedInfo.resultWidth;
                        }
                        String str52 = sb3;
                        long j14 = videoEditedInfo.startTime;
                        if (j14 < 0) {
                            j14 = 0;
                        }
                        z7 = z17;
                        j5 = j14;
                        str7 = str52;
                    } else {
                        str7 = str51;
                        j5 = 0;
                        z7 = false;
                    }
                    if (!z5 && sendingMediaInfo5.ttl == 0 && (videoEditedInfo == null || (videoEditedInfo.filterState == null && videoEditedInfo.paintPath == null && videoEditedInfo.mediaEntities == null && videoEditedInfo.cropState == null))) {
                        Object[] sentFile3 = accountInstance.getMessagesStorage().getSentFile(str7, !z5 ? 2 : 5);
                        if (sentFile3 != null) {
                            if (sentFile3[0] instanceof TLRPC$TL_document) {
                                tLRPC$TL_document = (TLRPC$TL_document) sentFile3[0];
                                str8 = str49;
                                file = file7;
                                j6 = j5;
                                str10 = str50;
                                arrayList7 = arrayList25;
                                str9 = "video/mp4";
                                obj = "final";
                                obj2 = "groupId";
                                ensureMediaThumbExists(accountInstance, z5, tLRPC$TL_document, sendingMediaInfo5.path, null, j6);
                                str11 = (String) sentFile3[1];
                                if (tLRPC$TL_document == null) {
                                    String str53 = sendingMediaInfo5.thumbPath;
                                    Bitmap decodeFile = str53 != null ? BitmapFactory.decodeFile(str53) : null;
                                    if (decodeFile == null && (decodeFile = createVideoThumbnailAtTime(sendingMediaInfo5.path, j6)) == null) {
                                        decodeFile = createVideoThumbnail(sendingMediaInfo5.path, 1);
                                    }
                                    if (decodeFile != null) {
                                        int max = (z5 || sendingMediaInfo5.ttl != 0) ? 90 : Math.max(decodeFile.getWidth(), decodeFile.getHeight());
                                        float f3 = max;
                                        z8 = z5;
                                        TLRPC$PhotoSize scaleAndSaveImage2 = ImageLoader.scaleAndSaveImage(decodeFile, f3, f3, max > 90 ? 80 : 55, z8);
                                        if (scaleAndSaveImage2 == null || scaleAndSaveImage2.location == null) {
                                            bitmap2 = decodeFile;
                                            str14 = str8;
                                            tLRPC$PhotoSize = scaleAndSaveImage2;
                                            str15 = null;
                                        } else {
                                            bitmap2 = decodeFile;
                                            str16 = getKeyForPhotoSize(accountInstance, scaleAndSaveImage2, null, true, false);
                                            StringBuilder sb4 = new StringBuilder();
                                            sb4.append(scaleAndSaveImage2.location.volume_id);
                                            str14 = str8;
                                            sb4.append(str14);
                                            sb4.append(scaleAndSaveImage2.location.local_id);
                                            sb4.append(".jpg");
                                            str15 = new File(FileLoader.getDirectory(4), sb4.toString()).getAbsolutePath();
                                            tLRPC$PhotoSize = scaleAndSaveImage2;
                                            TLRPC$TL_document tLRPC$TL_document5 = new TLRPC$TL_document();
                                            str12 = str14;
                                            tLRPC$TL_document5.file_reference = new byte[0];
                                            tLRPC$TL_document5.localPath = str15;
                                            if (tLRPC$PhotoSize != null) {
                                                tLRPC$TL_document5.thumbs.add(tLRPC$PhotoSize);
                                                tLRPC$TL_document5.flags |= 1;
                                            }
                                            tLRPC$TL_document5.mime_type = str9;
                                            accountInstance.getUserConfig().saveConfig(false);
                                            if (!z8) {
                                                tLRPC$TL_documentAttributeVideo = new TLRPC$TL_documentAttributeVideo();
                                            } else {
                                                tLRPC$TL_documentAttributeVideo = new TLRPC$TL_documentAttributeVideo();
                                                tLRPC$TL_documentAttributeVideo.supports_streaming = true;
                                            }
                                            tLRPC$TL_document5.attributes.add(tLRPC$TL_documentAttributeVideo);
                                            if (videoEditedInfo == null && (videoEditedInfo.needConvert() || !sendingMediaInfo5.isVideo)) {
                                                if (sendingMediaInfo5.isVideo && videoEditedInfo.muted) {
                                                    fillVideoAttribute(sendingMediaInfo5.path, tLRPC$TL_documentAttributeVideo, videoEditedInfo);
                                                    videoEditedInfo.originalWidth = tLRPC$TL_documentAttributeVideo.w;
                                                    videoEditedInfo.originalHeight = tLRPC$TL_documentAttributeVideo.h;
                                                } else {
                                                    tLRPC$TL_documentAttributeVideo.duration = (int) (videoEditedInfo.estimatedDuration / 1000);
                                                }
                                                int i31 = videoEditedInfo.rotationValue;
                                                MediaController.CropState cropState = videoEditedInfo.cropState;
                                                if (cropState != null) {
                                                    i13 = cropState.transformWidth;
                                                    i14 = cropState.transformHeight;
                                                } else {
                                                    i13 = videoEditedInfo.resultWidth;
                                                    i14 = videoEditedInfo.resultHeight;
                                                }
                                                if (i31 == 90 || i31 == 270) {
                                                    tLRPC$TL_documentAttributeVideo.w = i14;
                                                    tLRPC$TL_documentAttributeVideo.h = i13;
                                                } else {
                                                    tLRPC$TL_documentAttributeVideo.w = i13;
                                                    tLRPC$TL_documentAttributeVideo.h = i14;
                                                }
                                                tLRPC$TL_document5.size = videoEditedInfo.estimatedSize;
                                            } else {
                                                if (file.exists()) {
                                                    tLRPC$TL_document5.size = (int) file.length();
                                                }
                                                fillVideoAttribute(sendingMediaInfo5.path, tLRPC$TL_documentAttributeVideo, null);
                                            }
                                            tLRPC$TL_document2 = tLRPC$TL_document5;
                                            bitmap = bitmap2;
                                            str13 = str16;
                                        }
                                    } else {
                                        bitmap2 = decodeFile;
                                        z8 = z5;
                                        str14 = str8;
                                        str15 = null;
                                        tLRPC$PhotoSize = null;
                                    }
                                    str16 = null;
                                    TLRPC$TL_document tLRPC$TL_document52 = new TLRPC$TL_document();
                                    str12 = str14;
                                    tLRPC$TL_document52.file_reference = new byte[0];
                                    tLRPC$TL_document52.localPath = str15;
                                    if (tLRPC$PhotoSize != null) {
                                    }
                                    tLRPC$TL_document52.mime_type = str9;
                                    accountInstance.getUserConfig().saveConfig(false);
                                    if (!z8) {
                                    }
                                    tLRPC$TL_document52.attributes.add(tLRPC$TL_documentAttributeVideo);
                                    if (videoEditedInfo == null) {
                                    }
                                    if (file.exists()) {
                                    }
                                    fillVideoAttribute(sendingMediaInfo5.path, tLRPC$TL_documentAttributeVideo, null);
                                    tLRPC$TL_document2 = tLRPC$TL_document52;
                                    bitmap = bitmap2;
                                    str13 = str16;
                                } else {
                                    z8 = z5;
                                    str12 = str8;
                                    bitmap = null;
                                    str13 = null;
                                    tLRPC$TL_document2 = tLRPC$TL_document;
                                }
                                if (videoEditedInfo != null && videoEditedInfo.muted) {
                                    size = tLRPC$TL_document2.attributes.size();
                                    i12 = 0;
                                    while (true) {
                                        if (i12 < size) {
                                            z9 = false;
                                            break;
                                        } else if (tLRPC$TL_document2.attributes.get(i12) instanceof TLRPC$TL_documentAttributeAnimated) {
                                            z9 = true;
                                            break;
                                        } else {
                                            i12++;
                                        }
                                    }
                                    if (!z9) {
                                        tLRPC$TL_document2.attributes.add(new TLRPC$TL_documentAttributeAnimated());
                                    }
                                }
                                if (videoEditedInfo != null && (videoEditedInfo.needConvert() || !sendingMediaInfo5.isVideo)) {
                                    File file8 = new File(FileLoader.getDirectory(4), "-2147483648_" + SharedConfig.getLastLocalId() + ".mp4");
                                    SharedConfig.saveConfig();
                                    str10 = file8.getAbsolutePath();
                                }
                                hashMap4 = new HashMap();
                                if (str7 != null) {
                                    hashMap4.put("originalPath", str7);
                                }
                                if (str11 != null) {
                                    hashMap4.put("parentObject", str11);
                                }
                                if (z7 && z2) {
                                    i10 = i4 + 1;
                                    StringBuilder sb5 = new StringBuilder();
                                    sb5.append("");
                                    j7 = j13;
                                    sb5.append(j7);
                                    hashMap4.put(obj2, sb5.toString());
                                    if (i10 != 10) {
                                        i9 = i29;
                                    } else {
                                        i9 = i29;
                                    }
                                    hashMap4.put(obj, "1");
                                    j12 = 0;
                                } else {
                                    j7 = j13;
                                    i9 = i29;
                                    i10 = i4;
                                }
                                if (!z8 && (arrayList8 = sendingMediaInfo5.masks) != null && !arrayList8.isEmpty()) {
                                    tLRPC$TL_document2.attributes.add(new TLRPC$TL_documentAttributeHasStickers());
                                    SerializedData serializedData = new SerializedData((sendingMediaInfo5.masks.size() * 20) + 4);
                                    serializedData.writeInt32(sendingMediaInfo5.masks.size());
                                    for (i11 = 0; i11 < sendingMediaInfo5.masks.size(); i11++) {
                                        sendingMediaInfo5.masks.get(i11).serializeToStream(serializedData);
                                    }
                                    hashMap4.put("masks", Utilities.bytesToHex(serializedData.toByteArray()));
                                    serializedData.cleanup();
                                }
                                str6 = str12;
                                z6 = z8;
                                final VideoEditedInfo videoEditedInfo2 = videoEditedInfo;
                                final String str54 = str11;
                                final TLRPC$TL_document tLRPC$TL_document6 = tLRPC$TL_document2;
                                int i32 = i9;
                                final String str55 = str10;
                                j4 = j7;
                                i7 = i30;
                                i8 = i32;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda5
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingMedia$89(bitmap, str13, messageObject, accountInstance, videoEditedInfo2, tLRPC$TL_document6, str55, hashMap4, sendingMediaInfo5, str54, j, messageObject2, messageObject3, z3, i);
                                    }
                                });
                                i4 = i10;
                                arrayList19 = arrayList7;
                                arrayList18 = arrayList3;
                                arrayList17 = arrayList2;
                            } else {
                                file = file7;
                                j6 = j5;
                                arrayList7 = arrayList25;
                                str9 = "video/mp4";
                                str8 = str49;
                                str10 = str50;
                                obj = "final";
                                obj2 = "groupId";
                                str11 = null;
                                tLRPC$TL_document = null;
                                if (tLRPC$TL_document == null) {
                                }
                                if (videoEditedInfo != null) {
                                    size = tLRPC$TL_document2.attributes.size();
                                    i12 = 0;
                                    while (true) {
                                        if (i12 < size) {
                                        }
                                        i12++;
                                    }
                                    if (!z9) {
                                    }
                                }
                                if (videoEditedInfo != null) {
                                    File file82 = new File(FileLoader.getDirectory(4), "-2147483648_" + SharedConfig.getLastLocalId() + ".mp4");
                                    SharedConfig.saveConfig();
                                    str10 = file82.getAbsolutePath();
                                }
                                hashMap4 = new HashMap();
                                if (str7 != null) {
                                }
                                if (str11 != null) {
                                }
                                if (z7) {
                                }
                                j7 = j13;
                                i9 = i29;
                                i10 = i4;
                                if (!z8) {
                                    tLRPC$TL_document2.attributes.add(new TLRPC$TL_documentAttributeHasStickers());
                                    SerializedData serializedData2 = new SerializedData((sendingMediaInfo5.masks.size() * 20) + 4);
                                    serializedData2.writeInt32(sendingMediaInfo5.masks.size());
                                    while (i11 < sendingMediaInfo5.masks.size()) {
                                    }
                                    hashMap4.put("masks", Utilities.bytesToHex(serializedData2.toByteArray()));
                                    serializedData2.cleanup();
                                }
                                str6 = str12;
                                z6 = z8;
                                final VideoEditedInfo videoEditedInfo22 = videoEditedInfo;
                                final String str542 = str11;
                                final TLRPC$TL_document tLRPC$TL_document62 = tLRPC$TL_document2;
                                int i322 = i9;
                                final String str552 = str10;
                                j4 = j7;
                                i7 = i30;
                                i8 = i322;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda5
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingMedia$89(bitmap, str13, messageObject, accountInstance, videoEditedInfo22, tLRPC$TL_document62, str552, hashMap4, sendingMediaInfo5, str542, j, messageObject2, messageObject3, z3, i);
                                    }
                                });
                                i4 = i10;
                                arrayList19 = arrayList7;
                                arrayList18 = arrayList3;
                                arrayList17 = arrayList2;
                            }
                        }
                    }
                    str8 = str49;
                    file = file7;
                    j6 = j5;
                    arrayList7 = arrayList25;
                    str9 = "video/mp4";
                    str10 = str50;
                    obj = "final";
                    obj2 = "groupId";
                    str11 = null;
                    tLRPC$TL_document = null;
                    if (tLRPC$TL_document == null) {
                    }
                    if (videoEditedInfo != null) {
                    }
                    if (videoEditedInfo != null) {
                    }
                    hashMap4 = new HashMap();
                    if (str7 != null) {
                    }
                    if (str11 != null) {
                    }
                    if (z7) {
                    }
                    j7 = j13;
                    i9 = i29;
                    i10 = i4;
                    if (!z8) {
                    }
                    str6 = str12;
                    z6 = z8;
                    final VideoEditedInfo videoEditedInfo222 = videoEditedInfo;
                    final String str5422 = str11;
                    final TLRPC$TL_document tLRPC$TL_document622 = tLRPC$TL_document2;
                    int i3222 = i9;
                    final String str5522 = str10;
                    j4 = j7;
                    i7 = i30;
                    i8 = i3222;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda5
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.lambda$prepareSendingMedia$89(bitmap, str13, messageObject, accountInstance, videoEditedInfo222, tLRPC$TL_document622, str5522, hashMap4, sendingMediaInfo5, str5422, j, messageObject2, messageObject3, z3, i);
                        }
                    });
                    i4 = i10;
                    arrayList19 = arrayList7;
                    arrayList18 = arrayList3;
                    arrayList17 = arrayList2;
                } else {
                    i7 = i30;
                    z6 = z5;
                    str6 = str49;
                    j4 = j13;
                    i8 = i29;
                    if (arrayList25 == null) {
                        ArrayList arrayList26 = new ArrayList();
                        arrayList18 = new ArrayList();
                        ArrayList arrayList27 = new ArrayList();
                        ArrayList arrayList28 = new ArrayList();
                        arrayList17 = new ArrayList();
                        arrayList19 = arrayList26;
                        arrayList5 = arrayList27;
                        arrayList6 = arrayList28;
                    } else {
                        arrayList19 = arrayList25;
                        arrayList5 = arrayList20;
                        arrayList6 = arrayList21;
                        arrayList18 = arrayList3;
                        arrayList17 = arrayList2;
                    }
                    arrayList19.add(sendingMediaInfo5.path);
                    arrayList18.add(sendingMediaInfo5.path);
                    arrayList17.add(sendingMediaInfo5.uri);
                    arrayList5.add(sendingMediaInfo5.caption);
                    arrayList6.add(sendingMediaInfo5.entities);
                    arrayList20 = arrayList5;
                    arrayList21 = arrayList6;
                }
                i24 = i4;
                i25 = i7 + 1;
                arrayList16 = arrayList;
                str38 = str5;
                str39 = str4;
                str40 = str6;
                hashMap7 = hashMap3;
                isEncryptedDialog = z6;
                j11 = j4;
                size2 = i8;
                i2 = 1;
            } else {
                String str56 = sendingMediaInfo5.path;
                if (str56 != null || (uri2 = sendingMediaInfo5.uri) == null) {
                    str17 = str56;
                    str18 = str17;
                } else {
                    String path = (Build.VERSION.SDK_INT < 30 || !"content".equals(uri2.getScheme())) ? AndroidUtilities.getPath(sendingMediaInfo5.uri) : null;
                    str17 = sendingMediaInfo5.uri.toString();
                    str18 = path;
                }
                if (inputContentInfoCompat == null || sendingMediaInfo5.uri == null || !inputContentInfoCompat.getDescription().hasMimeType("image/png")) {
                    str19 = str;
                } else {
                    try {
                        BitmapFactory.Options options = new BitmapFactory.Options();
                        inputStream = ApplicationLoader.applicationContext.getContentResolver().openInputStream(sendingMediaInfo5.uri);
                        try {
                            Bitmap decodeStream = BitmapFactory.decodeStream(inputStream, null, options);
                            StringBuilder sb6 = new StringBuilder();
                            sb6.append("-2147483648_");
                            sb6.append(SharedConfig.getLastLocalId());
                            str19 = str;
                            try {
                                sb6.append(str19);
                                File file9 = new File(FileLoader.getDirectory(4), sb6.toString());
                                fileOutputStream = new FileOutputStream(file9);
                                try {
                                    decodeStream.compress(Bitmap.CompressFormat.WEBP, 100, fileOutputStream);
                                    SharedConfig.saveConfig();
                                    sendingMediaInfo5.uri = Uri.fromFile(file9);
                                    if (inputStream != null) {
                                        try {
                                            inputStream.close();
                                        } catch (Exception unused) {
                                        }
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    try {
                                        FileLog.e(th);
                                        if (inputStream != null) {
                                            try {
                                                inputStream.close();
                                            } catch (Exception unused2) {
                                            }
                                        }
                                    } catch (Throwable th2) {
                                        if (inputStream != null) {
                                            try {
                                                inputStream.close();
                                            } catch (Exception unused3) {
                                            }
                                        }
                                        if (fileOutputStream != null) {
                                            try {
                                                fileOutputStream.close();
                                            } catch (Exception unused4) {
                                            }
                                        }
                                        throw th2;
                                    }
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                fileOutputStream = null;
                                FileLog.e(th);
                                if (inputStream != null) {
                                }
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            str19 = str;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        str19 = str;
                        inputStream = null;
                    }
                    try {
                        fileOutputStream.close();
                    } catch (Exception unused5) {
                    }
                }
                String str57 = "webp";
                if (z || ImageLoader.shouldSendImageAsDocument(sendingMediaInfo5.path, sendingMediaInfo5.uri)) {
                    str20 = str2;
                    if (str18 != null) {
                        str57 = FileLoader.getFileExtension(new File(str18));
                        str42 = str57;
                        str21 = str18;
                    } else {
                        str42 = "";
                        str21 = str18;
                    }
                } else {
                    if (sendingMediaInfo5.forceImage || str18 == null) {
                        str20 = str2;
                    } else {
                        str20 = str2;
                        if ((str18.endsWith(str20) || str18.endsWith(str19)) && sendingMediaInfo5.ttl <= 0) {
                            if (str18.endsWith(str20)) {
                                str42 = "gif";
                                str21 = str18;
                            }
                            str42 = str57;
                            str21 = str18;
                        }
                    }
                    if (!sendingMediaInfo5.forceImage && str18 == null && (uri = sendingMediaInfo5.uri) != null) {
                        if (MediaController.isGif(uri)) {
                            str17 = sendingMediaInfo5.uri.toString();
                            str21 = MediaController.copyFileToCache(sendingMediaInfo5.uri, "gif");
                            str42 = "gif";
                        } else if (MediaController.isWebp(sendingMediaInfo5.uri)) {
                            str17 = sendingMediaInfo5.uri.toString();
                            str18 = MediaController.copyFileToCache(sendingMediaInfo5.uri, "webp");
                            str42 = str57;
                            str21 = str18;
                        }
                    }
                    str21 = str18;
                    z10 = false;
                    if (z10) {
                        ArrayList arrayList29 = arrayList4;
                        if (str21 != null) {
                            File file10 = new File(str21);
                            str22 = str17 + file10.length() + str3 + file10.lastModified();
                            hashMap5 = hashMap2;
                        } else {
                            hashMap5 = hashMap2;
                            str22 = null;
                        }
                        if (hashMap5 != null) {
                            MediaSendPrepareWorker mediaSendPrepareWorker3 = (MediaSendPrepareWorker) hashMap5.get(sendingMediaInfo5);
                            TLRPC$TL_photo tLRPC$TL_photo11 = mediaSendPrepareWorker3.photo;
                            String str58 = mediaSendPrepareWorker3.parentObject;
                            if (tLRPC$TL_photo11 == null) {
                                try {
                                    mediaSendPrepareWorker3.sync.await();
                                } catch (Exception e3) {
                                    FileLog.e(e3);
                                }
                                tLRPC$TL_photo11 = mediaSendPrepareWorker3.photo;
                                str58 = mediaSendPrepareWorker3.parentObject;
                            }
                            hashMap3 = hashMap5;
                            str23 = str22;
                            arrayList9 = arrayList29;
                            str24 = str21;
                            str25 = str19;
                            str26 = str20;
                            str27 = str3;
                            i15 = 1;
                            str29 = str58;
                            obj3 = "1";
                            sendingMediaInfo = sendingMediaInfo5;
                            z12 = z5;
                            tLRPC$TL_photo2 = tLRPC$TL_photo11;
                        } else {
                            boolean z18 = z5;
                            if (z18 || sendingMediaInfo5.ttl != 0) {
                                z11 = z18;
                                hashMap3 = hashMap5;
                                str23 = str22;
                                arrayList9 = arrayList29;
                                str24 = str21;
                                str25 = str19;
                                str26 = str20;
                                str27 = str3;
                                i15 = 1;
                                obj3 = "1";
                                sendingMediaInfo = sendingMediaInfo5;
                                tLRPC$TL_photo = null;
                                str28 = null;
                            } else {
                                Object[] sentFile4 = accountInstance.getMessagesStorage().getSentFile(str22, !z18 ? 0 : 3);
                                HashMap hashMap11 = hashMap5;
                                if (sentFile4 == null) {
                                    obj4 = "1";
                                } else if (sentFile4[0] instanceof TLRPC$TL_photo) {
                                    tLRPC$TL_photo3 = (TLRPC$TL_photo) sentFile4[0];
                                    obj4 = "1";
                                    str30 = (String) sentFile4[1];
                                    if (tLRPC$TL_photo3 == null) {
                                        if (sendingMediaInfo5.uri != null) {
                                            str28 = str30;
                                            Object[] sentFile5 = accountInstance.getMessagesStorage().getSentFile(AndroidUtilities.getPath(sendingMediaInfo5.uri), !z18 ? 0 : 3);
                                            if (sentFile5 != null && (sentFile5[0] instanceof TLRPC$TL_photo)) {
                                                tLRPC$TL_photo3 = (TLRPC$TL_photo) sentFile5[0];
                                                str30 = (String) sentFile5[1];
                                            }
                                        } else {
                                            str28 = str30;
                                        }
                                        tLRPC$TL_photo = tLRPC$TL_photo3;
                                        z11 = z18;
                                        hashMap3 = hashMap11;
                                        str23 = str22;
                                        str27 = str3;
                                        arrayList9 = arrayList29;
                                        str25 = str19;
                                        str26 = str20;
                                        obj3 = obj4;
                                        sendingMediaInfo = sendingMediaInfo5;
                                        str24 = str21;
                                        i15 = 1;
                                        ensureMediaThumbExists(accountInstance, z18, tLRPC$TL_photo, sendingMediaInfo5.path, sendingMediaInfo5.uri, 0L);
                                    }
                                    str28 = str30;
                                    tLRPC$TL_photo = tLRPC$TL_photo3;
                                    z11 = z18;
                                    hashMap3 = hashMap11;
                                    str23 = str22;
                                    str27 = str3;
                                    arrayList9 = arrayList29;
                                    str25 = str19;
                                    str26 = str20;
                                    obj3 = obj4;
                                    sendingMediaInfo = sendingMediaInfo5;
                                    str24 = str21;
                                    i15 = 1;
                                    ensureMediaThumbExists(accountInstance, z18, tLRPC$TL_photo, sendingMediaInfo5.path, sendingMediaInfo5.uri, 0L);
                                } else {
                                    obj4 = "1";
                                }
                                str30 = null;
                                tLRPC$TL_photo3 = null;
                                if (tLRPC$TL_photo3 == null) {
                                }
                                str28 = str30;
                                tLRPC$TL_photo = tLRPC$TL_photo3;
                                z11 = z18;
                                hashMap3 = hashMap11;
                                str23 = str22;
                                str27 = str3;
                                arrayList9 = arrayList29;
                                str25 = str19;
                                str26 = str20;
                                obj3 = obj4;
                                sendingMediaInfo = sendingMediaInfo5;
                                str24 = str21;
                                i15 = 1;
                                ensureMediaThumbExists(accountInstance, z18, tLRPC$TL_photo, sendingMediaInfo5.path, sendingMediaInfo5.uri, 0L);
                            }
                            if (tLRPC$TL_photo == null) {
                                tLRPC$TL_photo = accountInstance.getSendMessagesHelper().generatePhotoSizes(sendingMediaInfo.path, sendingMediaInfo.uri);
                                z12 = z11;
                                if (z12 && sendingMediaInfo.canDeleteAfter) {
                                    new File(sendingMediaInfo.path).delete();
                                }
                            } else {
                                z12 = z11;
                            }
                            tLRPC$TL_photo2 = tLRPC$TL_photo;
                            str29 = str28;
                        }
                        if (tLRPC$TL_photo2 != null) {
                            final HashMap hashMap12 = new HashMap();
                            final Bitmap[] bitmapArr = new Bitmap[i15];
                            final String[] strArr = new String[i15];
                            ArrayList<TLRPC$InputDocument> arrayList30 = sendingMediaInfo.masks;
                            boolean z19 = (arrayList30 == null || arrayList30.isEmpty()) ? false : true;
                            tLRPC$TL_photo2.has_stickers = z19;
                            if (z19) {
                                SerializedData serializedData3 = new SerializedData((sendingMediaInfo.masks.size() * 20) + 4);
                                serializedData3.writeInt32(sendingMediaInfo.masks.size());
                                for (int i33 = 0; i33 < sendingMediaInfo.masks.size(); i33++) {
                                    sendingMediaInfo.masks.get(i33).serializeToStream(serializedData3);
                                }
                                hashMap12.put("masks", Utilities.bytesToHex(serializedData3.toByteArray()));
                                serializedData3.cleanup();
                            }
                            String str59 = str23;
                            if (str59 != null) {
                                hashMap12.put("originalPath", str59);
                            }
                            if (str29 != null) {
                                hashMap12.put("parentObject", str29);
                            }
                            if (z2) {
                                try {
                                } catch (Exception e4) {
                                    e = e4;
                                    accountInstance2 = accountInstance;
                                    FileLog.e(e);
                                    if (z2) {
                                    }
                                    final String str60 = str29;
                                    final SendingMediaInfo sendingMediaInfo6 = sendingMediaInfo;
                                    j8 = j9;
                                    str5 = str25;
                                    str4 = str26;
                                    i16 = i6;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda77
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            SendMessagesHelper.lambda$prepareSendingMedia$90(bitmapArr, strArr, messageObject, accountInstance, tLRPC$TL_photo2, hashMap12, sendingMediaInfo6, str60, j, messageObject2, messageObject3, z3, i, z4);
                                        }
                                    });
                                    i24 = i4;
                                    arrayList18 = arrayList3;
                                    i7 = i17;
                                    z6 = z12;
                                    arrayList17 = arrayList2;
                                    str6 = str27;
                                    arrayList19 = arrayList9;
                                    j4 = j8;
                                    i8 = i16;
                                    i25 = i7 + 1;
                                    arrayList16 = arrayList;
                                    str38 = str5;
                                    str39 = str4;
                                    str40 = str6;
                                    hashMap7 = hashMap3;
                                    isEncryptedDialog = z6;
                                    j11 = j4;
                                    size2 = i8;
                                    i2 = 1;
                                }
                            }
                            try {
                                closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photo2.sizes, AndroidUtilities.getPhotoSize());
                            } catch (Exception e5) {
                                e = e5;
                                accountInstance2 = accountInstance;
                                FileLog.e(e);
                                if (z2) {
                                }
                                final String str602 = str29;
                                final SendingMediaInfo sendingMediaInfo62 = sendingMediaInfo;
                                j8 = j9;
                                str5 = str25;
                                str4 = str26;
                                i16 = i6;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda77
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingMedia$90(bitmapArr, strArr, messageObject, accountInstance, tLRPC$TL_photo2, hashMap12, sendingMediaInfo62, str602, j, messageObject2, messageObject3, z3, i, z4);
                                    }
                                });
                                i24 = i4;
                                arrayList18 = arrayList3;
                                i7 = i17;
                                z6 = z12;
                                arrayList17 = arrayList2;
                                str6 = str27;
                                arrayList19 = arrayList9;
                                j4 = j8;
                                i8 = i16;
                                i25 = i7 + 1;
                                arrayList16 = arrayList;
                                str38 = str5;
                                str39 = str4;
                                str40 = str6;
                                hashMap7 = hashMap3;
                                isEncryptedDialog = z6;
                                j11 = j4;
                                size2 = i8;
                                i2 = 1;
                            }
                            if (closestPhotoSizeWithSize != null) {
                                accountInstance2 = accountInstance;
                                try {
                                    strArr[0] = getKeyForPhotoSize(accountInstance2, closestPhotoSizeWithSize, bitmapArr, false, false);
                                } catch (Exception e6) {
                                    e = e6;
                                    FileLog.e(e);
                                    if (z2) {
                                    }
                                    final String str6022 = str29;
                                    final SendingMediaInfo sendingMediaInfo622 = sendingMediaInfo;
                                    j8 = j9;
                                    str5 = str25;
                                    str4 = str26;
                                    i16 = i6;
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda77
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            SendMessagesHelper.lambda$prepareSendingMedia$90(bitmapArr, strArr, messageObject, accountInstance, tLRPC$TL_photo2, hashMap12, sendingMediaInfo622, str6022, j, messageObject2, messageObject3, z3, i, z4);
                                        }
                                    });
                                    i24 = i4;
                                    arrayList18 = arrayList3;
                                    i7 = i17;
                                    z6 = z12;
                                    arrayList17 = arrayList2;
                                    str6 = str27;
                                    arrayList19 = arrayList9;
                                    j4 = j8;
                                    i8 = i16;
                                    i25 = i7 + 1;
                                    arrayList16 = arrayList;
                                    str38 = str5;
                                    str39 = str4;
                                    str40 = str6;
                                    hashMap7 = hashMap3;
                                    isEncryptedDialog = z6;
                                    j11 = j4;
                                    size2 = i8;
                                    i2 = 1;
                                }
                                if (z2) {
                                    int i34 = i4 + 1;
                                    StringBuilder sb7 = new StringBuilder();
                                    sb7.append("");
                                    j9 = j3;
                                    sb7.append(j9);
                                    hashMap12.put("groupId", sb7.toString());
                                    if (i34 != 10) {
                                        i17 = i5;
                                        if (i17 != i6 - 1) {
                                            i4 = i34;
                                        }
                                    } else {
                                        i17 = i5;
                                    }
                                    hashMap12.put("final", obj3);
                                    i4 = i34;
                                    j12 = 0;
                                } else {
                                    j9 = j3;
                                    i17 = i5;
                                }
                                final String str60222 = str29;
                                final SendingMediaInfo sendingMediaInfo6222 = sendingMediaInfo;
                                j8 = j9;
                                str5 = str25;
                                str4 = str26;
                                i16 = i6;
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda77
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        SendMessagesHelper.lambda$prepareSendingMedia$90(bitmapArr, strArr, messageObject, accountInstance, tLRPC$TL_photo2, hashMap12, sendingMediaInfo6222, str60222, j, messageObject2, messageObject3, z3, i, z4);
                                    }
                                });
                                i24 = i4;
                                arrayList18 = arrayList3;
                                i7 = i17;
                                z6 = z12;
                                arrayList17 = arrayList2;
                                str6 = str27;
                                arrayList19 = arrayList9;
                            }
                            accountInstance2 = accountInstance;
                            if (z2) {
                            }
                            final String str602222 = str29;
                            final SendingMediaInfo sendingMediaInfo62222 = sendingMediaInfo;
                            j8 = j9;
                            str5 = str25;
                            str4 = str26;
                            i16 = i6;
                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda77
                                @Override // java.lang.Runnable
                                public final void run() {
                                    SendMessagesHelper.lambda$prepareSendingMedia$90(bitmapArr, strArr, messageObject, accountInstance, tLRPC$TL_photo2, hashMap12, sendingMediaInfo62222, str602222, j, messageObject2, messageObject3, z3, i, z4);
                                }
                            });
                            i24 = i4;
                            arrayList18 = arrayList3;
                            i7 = i17;
                            z6 = z12;
                            arrayList17 = arrayList2;
                            str6 = str27;
                            arrayList19 = arrayList9;
                        } else {
                            boolean z20 = z12;
                            i16 = i6;
                            str4 = str26;
                            str5 = str25;
                            j8 = j3;
                            int i35 = i5;
                            String str61 = str23;
                            ArrayList arrayList31 = arrayList9;
                            if (arrayList31 == null) {
                                arrayList19 = new ArrayList();
                                arrayList18 = new ArrayList();
                                ArrayList arrayList32 = new ArrayList();
                                ArrayList arrayList33 = new ArrayList();
                                arrayList12 = new ArrayList();
                                str31 = str24;
                                arrayList10 = arrayList32;
                                arrayList11 = arrayList33;
                            } else {
                                arrayList19 = arrayList31;
                                str31 = str24;
                                arrayList10 = arrayList20;
                                arrayList11 = arrayList21;
                                arrayList18 = arrayList3;
                                arrayList12 = arrayList2;
                            }
                            arrayList19.add(str31);
                            arrayList18.add(str61);
                            arrayList12.add(sendingMediaInfo.uri);
                            arrayList10.add(sendingMediaInfo.caption);
                            arrayList11.add(sendingMediaInfo.entities);
                            arrayList17 = arrayList12;
                            arrayList20 = arrayList10;
                            arrayList21 = arrayList11;
                            i24 = i4;
                            i7 = i35;
                            z6 = z20;
                            str6 = str27;
                        }
                        j4 = j8;
                        i8 = i16;
                    } else {
                        ArrayList arrayList34 = arrayList4;
                        if (arrayList34 == null) {
                            arrayList19 = new ArrayList();
                            arrayList18 = new ArrayList();
                            ArrayList arrayList35 = new ArrayList();
                            ArrayList arrayList36 = new ArrayList();
                            arrayList15 = new ArrayList();
                            arrayList13 = arrayList35;
                            arrayList14 = arrayList36;
                        } else {
                            arrayList19 = arrayList34;
                            arrayList13 = arrayList20;
                            arrayList14 = arrayList21;
                            arrayList18 = arrayList3;
                            arrayList15 = arrayList2;
                        }
                        arrayList19.add(str21);
                        arrayList18.add(str17);
                        arrayList15.add(sendingMediaInfo5.uri);
                        arrayList13.add(sendingMediaInfo5.caption);
                        arrayList14.add(sendingMediaInfo5.entities);
                        arrayList17 = arrayList15;
                        arrayList20 = arrayList13;
                        arrayList21 = arrayList14;
                        str5 = str19;
                        str4 = str20;
                        i8 = i6;
                        i24 = i4;
                        hashMap3 = hashMap2;
                        str6 = str3;
                        z6 = z5;
                        j4 = j3;
                        i7 = i5;
                    }
                    i25 = i7 + 1;
                    arrayList16 = arrayList;
                    str38 = str5;
                    str39 = str4;
                    str40 = str6;
                    hashMap7 = hashMap3;
                    isEncryptedDialog = z6;
                    j11 = j4;
                    size2 = i8;
                    i2 = 1;
                }
                z10 = true;
                if (z10) {
                }
                i25 = i7 + 1;
                arrayList16 = arrayList;
                str38 = str5;
                str39 = str4;
                str40 = str6;
                hashMap7 = hashMap3;
                isEncryptedDialog = z6;
                j11 = j4;
                size2 = i8;
                i2 = 1;
            }
        }
        ArrayList arrayList37 = arrayList17;
        ArrayList arrayList38 = arrayList18;
        boolean z21 = isEncryptedDialog;
        int i36 = size2;
        long j15 = j12;
        ArrayList arrayList39 = arrayList19;
        AccountInstance accountInstance3 = accountInstance;
        if (j15 != 0) {
            finishGroup(accountInstance3, j15, i);
        }
        if (inputContentInfoCompat != null) {
            inputContentInfoCompat.releasePermission();
        }
        if (arrayList39 != null && !arrayList39.isEmpty()) {
            int i37 = 1;
            long[] jArr = new long[1];
            int size3 = arrayList39.size();
            int i38 = i24;
            int i39 = 0;
            while (i39 < size3) {
                if (!z || z21) {
                    i3 = i36;
                } else {
                    i3 = i36;
                    if (i3 > i37 && i38 % 10 == 0) {
                        jArr[0] = Utilities.random.nextLong();
                        i38 = 0;
                        int i40 = i38 + 1;
                        ArrayList arrayList40 = arrayList38;
                        ArrayList arrayList41 = arrayList37;
                        ArrayList arrayList42 = arrayList20;
                        ArrayList arrayList43 = arrayList21;
                        arrayList20 = arrayList42;
                        arrayList21 = arrayList43;
                        jArr = jArr;
                        handleError(prepareSendingDocumentInternal(accountInstance, (String) arrayList39.get(i39), (String) arrayList40.get(i39), (Uri) arrayList41.get(i39), str42, j, messageObject2, messageObject3, (CharSequence) arrayList42.get(i39), (ArrayList) arrayList43.get(i39), messageObject, jArr, i40 != 10 || i39 == size3 + (-1), z, z3, i, null), accountInstance);
                        i39++;
                        accountInstance3 = accountInstance;
                        arrayList37 = arrayList41;
                        arrayList38 = arrayList40;
                        i38 = i40;
                        i36 = i3;
                        size3 = size3;
                        arrayList39 = arrayList39;
                        i37 = 1;
                    }
                }
                int i402 = i38 + 1;
                ArrayList arrayList402 = arrayList38;
                ArrayList arrayList412 = arrayList37;
                ArrayList arrayList422 = arrayList20;
                ArrayList arrayList432 = arrayList21;
                arrayList20 = arrayList422;
                arrayList21 = arrayList432;
                jArr = jArr;
                handleError(prepareSendingDocumentInternal(accountInstance, (String) arrayList39.get(i39), (String) arrayList402.get(i39), (Uri) arrayList412.get(i39), str42, j, messageObject2, messageObject3, (CharSequence) arrayList422.get(i39), (ArrayList) arrayList432.get(i39), messageObject, jArr, i402 != 10 || i39 == size3 + (-1), z, z3, i, null), accountInstance);
                i39++;
                accountInstance3 = accountInstance;
                arrayList37 = arrayList412;
                arrayList38 = arrayList402;
                i38 = i402;
                i36 = i3;
                size3 = size3;
                arrayList39 = arrayList39;
                i37 = 1;
            }
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("total send time = " + (System.currentTimeMillis() - currentTimeMillis));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingMedia$86(MediaSendPrepareWorker mediaSendPrepareWorker, AccountInstance accountInstance, SendingMediaInfo sendingMediaInfo, boolean z) {
        mediaSendPrepareWorker.photo = accountInstance.getSendMessagesHelper().generatePhotoSizes(sendingMediaInfo.path, sendingMediaInfo.uri);
        if (z && sendingMediaInfo.canDeleteAfter) {
            new File(sendingMediaInfo.path).delete();
        }
        mediaSendPrepareWorker.sync.countDown();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingMedia$87(MessageObject messageObject, AccountInstance accountInstance, TLRPC$TL_document tLRPC$TL_document, String str, HashMap hashMap, SendingMediaInfo sendingMediaInfo, String str2, long j, MessageObject messageObject2, MessageObject messageObject3, boolean z, int i) {
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, null, null, tLRPC$TL_document, str, hashMap, false, sendingMediaInfo.hasMediaSpoilers, str2);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_document, null, str, j, messageObject2, messageObject3, sendingMediaInfo.caption, sendingMediaInfo.entities, null, hashMap, z, i, 0, str2, null, false, sendingMediaInfo.hasMediaSpoilers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingMedia$88(MessageObject messageObject, AccountInstance accountInstance, TLRPC$TL_photo tLRPC$TL_photo, boolean z, SendingMediaInfo sendingMediaInfo, HashMap hashMap, String str, long j, MessageObject messageObject2, MessageObject messageObject3, boolean z2, int i) {
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, tLRPC$TL_photo, null, null, z ? sendingMediaInfo.searchImage.imageUrl : null, hashMap, false, sendingMediaInfo.hasMediaSpoilers, str);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_photo, z ? sendingMediaInfo.searchImage.imageUrl : null, j, messageObject2, messageObject3, sendingMediaInfo.caption, sendingMediaInfo.entities, null, hashMap, z2, i, sendingMediaInfo.ttl, str, false, sendingMediaInfo.hasMediaSpoilers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingMedia$89(Bitmap bitmap, String str, MessageObject messageObject, AccountInstance accountInstance, VideoEditedInfo videoEditedInfo, TLRPC$TL_document tLRPC$TL_document, String str2, HashMap hashMap, SendingMediaInfo sendingMediaInfo, String str3, long j, MessageObject messageObject2, MessageObject messageObject3, boolean z, int i) {
        if (bitmap != null && str != null) {
            ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmap), str, false);
        }
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, null, videoEditedInfo, tLRPC$TL_document, str2, hashMap, false, sendingMediaInfo.hasMediaSpoilers, str3);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_document, videoEditedInfo, str2, j, messageObject2, messageObject3, sendingMediaInfo.caption, sendingMediaInfo.entities, null, hashMap, z, i, sendingMediaInfo.ttl, str3, null, false, sendingMediaInfo.hasMediaSpoilers);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingMedia$90(Bitmap[] bitmapArr, String[] strArr, MessageObject messageObject, AccountInstance accountInstance, TLRPC$TL_photo tLRPC$TL_photo, HashMap hashMap, SendingMediaInfo sendingMediaInfo, String str, long j, MessageObject messageObject2, MessageObject messageObject3, boolean z, int i, boolean z2) {
        if (bitmapArr[0] != null && strArr[0] != null) {
            ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmapArr[0]), strArr[0], false);
        }
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, tLRPC$TL_photo, null, null, null, hashMap, false, sendingMediaInfo.hasMediaSpoilers, str);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_photo, null, j, messageObject2, messageObject3, sendingMediaInfo.caption, sendingMediaInfo.entities, null, hashMap, z, i, sendingMediaInfo.ttl, str, z2, sendingMediaInfo.hasMediaSpoilers);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:60:0x008b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static void fillVideoAttribute(String str, TLRPC$TL_documentAttributeVideo tLRPC$TL_documentAttributeVideo, VideoEditedInfo videoEditedInfo) {
        boolean z;
        MediaMetadataRetriever mediaMetadataRetriever;
        String extractMetadata;
        MediaMetadataRetriever mediaMetadataRetriever2 = null;
        try {
            try {
                mediaMetadataRetriever = new MediaMetadataRetriever();
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th) {
            th = th;
        }
        try {
            mediaMetadataRetriever.setDataSource(str);
            String extractMetadata2 = mediaMetadataRetriever.extractMetadata(18);
            if (extractMetadata2 != null) {
                tLRPC$TL_documentAttributeVideo.w = Integer.parseInt(extractMetadata2);
            }
            String extractMetadata3 = mediaMetadataRetriever.extractMetadata(19);
            if (extractMetadata3 != null) {
                tLRPC$TL_documentAttributeVideo.h = Integer.parseInt(extractMetadata3);
            }
            String extractMetadata4 = mediaMetadataRetriever.extractMetadata(9);
            if (extractMetadata4 != null) {
                tLRPC$TL_documentAttributeVideo.duration = (int) Math.ceil(((float) Long.parseLong(extractMetadata4)) / 1000.0f);
            }
            if (Build.VERSION.SDK_INT >= 17 && (extractMetadata = mediaMetadataRetriever.extractMetadata(24)) != null) {
                int intValue = Utilities.parseInt((CharSequence) extractMetadata).intValue();
                if (videoEditedInfo != null) {
                    videoEditedInfo.rotationValue = intValue;
                } else if (intValue == 90 || intValue == 270) {
                    int i = tLRPC$TL_documentAttributeVideo.w;
                    tLRPC$TL_documentAttributeVideo.w = tLRPC$TL_documentAttributeVideo.h;
                    tLRPC$TL_documentAttributeVideo.h = i;
                }
            }
            z = true;
            try {
                mediaMetadataRetriever.release();
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        } catch (Exception e3) {
            e = e3;
            mediaMetadataRetriever2 = mediaMetadataRetriever;
            FileLog.e(e);
            if (mediaMetadataRetriever2 != null) {
                try {
                    mediaMetadataRetriever2.release();
                } catch (Exception e4) {
                    FileLog.e(e4);
                }
            }
            z = false;
            if (z) {
            }
        } catch (Throwable th2) {
            th = th2;
            mediaMetadataRetriever2 = mediaMetadataRetriever;
            if (mediaMetadataRetriever2 != null) {
                try {
                    mediaMetadataRetriever2.release();
                } catch (Exception e5) {
                    FileLog.e(e5);
                }
            }
            throw th;
        }
        if (z) {
            try {
                MediaPlayer create = MediaPlayer.create(ApplicationLoader.applicationContext, Uri.fromFile(new File(str)));
                if (create != null) {
                    tLRPC$TL_documentAttributeVideo.duration = (int) Math.ceil(create.getDuration() / 1000.0f);
                    tLRPC$TL_documentAttributeVideo.w = create.getVideoWidth();
                    tLRPC$TL_documentAttributeVideo.h = create.getVideoHeight();
                    create.release();
                }
            } catch (Exception e6) {
                FileLog.e(e6);
            }
        }
    }

    public static Bitmap createVideoThumbnail(String str, int i) {
        float f = i == 2 ? 1920.0f : i == 3 ? 96.0f : 512.0f;
        Bitmap createVideoThumbnailAtTime = createVideoThumbnailAtTime(str, 0L);
        if (createVideoThumbnailAtTime != null) {
            int width = createVideoThumbnailAtTime.getWidth();
            int height = createVideoThumbnailAtTime.getHeight();
            float f2 = width;
            if (f2 > f || height > f) {
                float max = Math.max(width, height) / f;
                return Bitmap.createScaledBitmap(createVideoThumbnailAtTime, (int) (f2 / max), (int) (height / max), true);
            }
            return createVideoThumbnailAtTime;
        }
        return createVideoThumbnailAtTime;
    }

    public static Bitmap createVideoThumbnailAtTime(String str, long j) {
        return createVideoThumbnailAtTime(str, j, null, false);
    }

    public static Bitmap createVideoThumbnailAtTime(String str, long j, int[] iArr, boolean z) {
        Bitmap bitmap;
        if (z) {
            AnimatedFileDrawable animatedFileDrawable = new AnimatedFileDrawable(new File(str), true, 0L, 0, null, null, null, 0L, 0, true, null);
            bitmap = animatedFileDrawable.getFrameAtTime(j, z);
            if (iArr != null) {
                iArr[0] = animatedFileDrawable.getOrientation();
            }
            animatedFileDrawable.recycle();
            if (bitmap == null) {
                return createVideoThumbnailAtTime(str, j, iArr, false);
            }
        } else {
            MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
            bitmap = null;
            try {
                try {
                    mediaMetadataRetriever.setDataSource(str);
                    Bitmap frameAtTime = mediaMetadataRetriever.getFrameAtTime(j, 1);
                    if (frameAtTime == null) {
                        try {
                            frameAtTime = mediaMetadataRetriever.getFrameAtTime(j, 3);
                        } catch (Exception unused) {
                        }
                    }
                    bitmap = frameAtTime;
                } finally {
                    try {
                        mediaMetadataRetriever.release();
                    } catch (Throwable unused2) {
                    }
                }
            } catch (Exception unused3) {
            }
        }
        return bitmap;
    }

    private static VideoEditedInfo createCompressionSettings(String str) {
        MediaCodecInfo selectCodec;
        boolean z;
        int[] iArr = new int[11];
        AnimatedFileDrawable.getVideoInfo(str, iArr);
        if (iArr[0] == 0) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("video hasn't avc1 atom");
            }
            return null;
        }
        int videoBitrate = MediaController.getVideoBitrate(str);
        if (videoBitrate == -1) {
            videoBitrate = iArr[3];
        }
        float f = iArr[4];
        int i = iArr[6];
        long j = iArr[5];
        int i2 = iArr[7];
        if (Build.VERSION.SDK_INT < 18) {
            try {
                selectCodec = MediaController.selectCodec(MediaController.VIDEO_MIME_TYPE);
            } catch (Exception unused) {
            }
            if (selectCodec == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("no codec info for video/avc");
                }
                return null;
            }
            String name = selectCodec.getName();
            if (!name.equals("OMX.google.h264.encoder") && !name.equals("OMX.ST.VFM.H264Enc") && !name.equals("OMX.Exynos.avc.enc") && !name.equals("OMX.MARVELL.VIDEO.HW.CODA7542ENCODER") && !name.equals("OMX.MARVELL.VIDEO.H264ENCODER") && !name.equals("OMX.k3.video.encoder.avc") && !name.equals("OMX.TI.DUCATI1.VIDEO.H264E")) {
                if (MediaController.selectColorFormat(selectCodec, MediaController.VIDEO_MIME_TYPE) == 0) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("no color format for video/avc");
                    }
                    return null;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("unsupported encoder = " + name);
            }
            return null;
        }
        VideoEditedInfo videoEditedInfo = new VideoEditedInfo();
        videoEditedInfo.startTime = -1L;
        videoEditedInfo.endTime = -1L;
        videoEditedInfo.bitrate = videoBitrate;
        videoEditedInfo.originalPath = str;
        videoEditedInfo.framerate = i2;
        videoEditedInfo.estimatedDuration = (long) Math.ceil(f);
        int i3 = iArr[1];
        videoEditedInfo.originalWidth = i3;
        videoEditedInfo.resultWidth = i3;
        int i4 = iArr[2];
        videoEditedInfo.originalHeight = i4;
        videoEditedInfo.resultHeight = i4;
        videoEditedInfo.rotationValue = iArr[8];
        videoEditedInfo.originalDuration = f * 1000.0f;
        float max = Math.max(i3, i4);
        float f2 = 640.0f;
        int i5 = max <= 1280.0f ? max > 854.0f ? 3 : max > 640.0f ? 2 : 1 : 4;
        int round = Math.round(DownloadController.getInstance(UserConfig.selectedAccount).getMaxVideoBitrate() / (100.0f / i5));
        if (round > i5) {
            round = i5;
        }
        if (new File(str).length() < 1048576000) {
            if (round != i5 || Math.max(videoEditedInfo.originalWidth, videoEditedInfo.originalHeight) > 1280) {
                if (round == 1) {
                    f2 = 432.0f;
                } else if (round != 2) {
                    f2 = round != 3 ? 1280.0f : 848.0f;
                }
                int i6 = videoEditedInfo.originalWidth;
                int i7 = videoEditedInfo.originalHeight;
                float f3 = f2 / (i6 > i7 ? i6 : i7);
                videoEditedInfo.resultWidth = Math.round((i6 * f3) / 2.0f) * 2;
                videoEditedInfo.resultHeight = Math.round((videoEditedInfo.originalHeight * f3) / 2.0f) * 2;
                z = true;
            } else {
                z = false;
            }
            videoBitrate = MediaController.makeVideoBitrate(videoEditedInfo.originalHeight, videoEditedInfo.originalWidth, videoBitrate, videoEditedInfo.resultHeight, videoEditedInfo.resultWidth);
        } else {
            z = false;
        }
        if (!z) {
            videoEditedInfo.resultWidth = videoEditedInfo.originalWidth;
            videoEditedInfo.resultHeight = videoEditedInfo.originalHeight;
            videoEditedInfo.bitrate = videoBitrate;
        } else {
            videoEditedInfo.bitrate = videoBitrate;
        }
        long j2 = ((float) j) + (((f / 1000.0f) * videoBitrate) / 8.0f);
        videoEditedInfo.estimatedSize = j2;
        if (j2 == 0) {
            videoEditedInfo.estimatedSize = 1L;
        }
        return videoEditedInfo;
    }

    public static void prepareSendingVideo(final AccountInstance accountInstance, final String str, final VideoEditedInfo videoEditedInfo, final long j, final MessageObject messageObject, final MessageObject messageObject2, final CharSequence charSequence, final ArrayList<TLRPC$MessageEntity> arrayList, final int i, final MessageObject messageObject3, final boolean z, final int i2, final boolean z2, final boolean z3) {
        if (str == null || str.length() == 0) {
            return;
        }
        new Thread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                SendMessagesHelper.lambda$prepareSendingVideo$93(VideoEditedInfo.this, str, j, i, accountInstance, charSequence, messageObject3, z3, messageObject, messageObject2, arrayList, z, i2, z2);
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0280  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x02e5  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x02f5  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0334  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x033d  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0344  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x0120  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x024a  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0267  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$prepareSendingVideo$93(VideoEditedInfo videoEditedInfo, String str, final long j, final int i, final AccountInstance accountInstance, CharSequence charSequence, final MessageObject messageObject, final boolean z, final MessageObject messageObject2, final MessageObject messageObject3, final ArrayList arrayList, final boolean z2, final int i2, boolean z3) {
        long j2;
        String str2;
        int i3;
        TLRPC$TL_document tLRPC$TL_document;
        String str3;
        final Bitmap bitmap;
        TLRPC$TL_document tLRPC$TL_document2;
        final String str4;
        String str5;
        String str6;
        TLRPC$TL_documentAttributeVideo tLRPC$TL_documentAttributeVideo;
        int i4;
        int i5;
        final String str7 = str;
        VideoEditedInfo createCompressionSettings = videoEditedInfo != null ? videoEditedInfo : createCompressionSettings(str);
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        boolean z4 = createCompressionSettings != null && createCompressionSettings.roundVideo;
        if (createCompressionSettings != null || str7.endsWith("mp4") || z4) {
            File file = new File(str7);
            String str8 = str7 + file.length() + "_" + file.lastModified();
            long j3 = 0;
            if (createCompressionSettings != null) {
                if (!z4) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(str8);
                    sb.append(createCompressionSettings.estimatedDuration);
                    sb.append("_");
                    sb.append(createCompressionSettings.startTime);
                    sb.append("_");
                    sb.append(createCompressionSettings.endTime);
                    sb.append(createCompressionSettings.muted ? "_m" : "");
                    str8 = sb.toString();
                    if (createCompressionSettings.resultWidth != createCompressionSettings.originalWidth) {
                        str8 = str8 + "_" + createCompressionSettings.resultWidth;
                    }
                }
                long j4 = createCompressionSettings.startTime;
                if (j4 >= 0) {
                    j3 = j4;
                }
            }
            String str9 = str8;
            long j5 = j3;
            if (!isEncryptedDialog && i == 0 && (createCompressionSettings == null || (createCompressionSettings.filterState == null && createCompressionSettings.paintPath == null && createCompressionSettings.mediaEntities == null && createCompressionSettings.cropState == null))) {
                Object[] sentFile = accountInstance.getMessagesStorage().getSentFile(str9, !isEncryptedDialog ? 2 : 5);
                if (sentFile != null && (sentFile[0] instanceof TLRPC$TL_document)) {
                    tLRPC$TL_document = (TLRPC$TL_document) sentFile[0];
                    j2 = j5;
                    str2 = str9;
                    i3 = 2;
                    ensureMediaThumbExists(accountInstance, isEncryptedDialog, tLRPC$TL_document, str, null, j2);
                    str3 = (String) sentFile[1];
                    if (tLRPC$TL_document != null) {
                        Bitmap createVideoThumbnailAtTime = createVideoThumbnailAtTime(str7, j2);
                        if (createVideoThumbnailAtTime == null) {
                            createVideoThumbnailAtTime = createVideoThumbnail(str7, 1);
                        }
                        Bitmap bitmap2 = createVideoThumbnailAtTime;
                        int i6 = (isEncryptedDialog || i != 0) ? 90 : 320;
                        float f = i6;
                        TLRPC$PhotoSize scaleAndSaveImage = ImageLoader.scaleAndSaveImage(bitmap2, f, f, i6 > 90 ? 80 : 55, isEncryptedDialog);
                        if (bitmap2 != null && scaleAndSaveImage != null) {
                            if (z4) {
                                if (isEncryptedDialog) {
                                    bitmap2 = Bitmap.createScaledBitmap(bitmap2, 90, 90, true);
                                    int i7 = Build.VERSION.SDK_INT;
                                    Utilities.blurBitmap(bitmap2, 7, i7 < 21 ? 0 : 1, bitmap2.getWidth(), bitmap2.getHeight(), bitmap2.getRowBytes());
                                    Utilities.blurBitmap(bitmap2, 7, i7 < 21 ? 0 : 1, bitmap2.getWidth(), bitmap2.getHeight(), bitmap2.getRowBytes());
                                    Utilities.blurBitmap(bitmap2, 7, i7 < 21 ? 0 : 1, bitmap2.getWidth(), bitmap2.getHeight(), bitmap2.getRowBytes());
                                    Object[] objArr = new Object[i3];
                                    objArr[0] = Integer.valueOf((int) (AndroidUtilities.roundMessageSize / AndroidUtilities.density));
                                    objArr[1] = Integer.valueOf((int) (AndroidUtilities.roundMessageSize / AndroidUtilities.density));
                                    str6 = String.format(scaleAndSaveImage.location.volume_id + "_" + scaleAndSaveImage.location.local_id + "@%d_%d_b2", objArr);
                                } else {
                                    Utilities.blurBitmap(bitmap2, 3, Build.VERSION.SDK_INT < 21 ? 0 : 1, bitmap2.getWidth(), bitmap2.getHeight(), bitmap2.getRowBytes());
                                    Object[] objArr2 = new Object[i3];
                                    objArr2[0] = Integer.valueOf((int) (AndroidUtilities.roundMessageSize / AndroidUtilities.density));
                                    objArr2[1] = Integer.valueOf((int) (AndroidUtilities.roundMessageSize / AndroidUtilities.density));
                                    str6 = String.format(scaleAndSaveImage.location.volume_id + "_" + scaleAndSaveImage.location.local_id + "@%d_%d_b", objArr2);
                                }
                                TLRPC$TL_document tLRPC$TL_document3 = new TLRPC$TL_document();
                                if (scaleAndSaveImage != null) {
                                    tLRPC$TL_document3.thumbs.add(scaleAndSaveImage);
                                    tLRPC$TL_document3.flags |= 1;
                                }
                                tLRPC$TL_document3.file_reference = new byte[0];
                                tLRPC$TL_document3.mime_type = "video/mp4";
                                accountInstance.getUserConfig().saveConfig(false);
                                if (!isEncryptedDialog) {
                                    if (accountInstance.getMessagesController().getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j))) == null) {
                                        return;
                                    }
                                    tLRPC$TL_documentAttributeVideo = new TLRPC$TL_documentAttributeVideo();
                                } else {
                                    tLRPC$TL_documentAttributeVideo = new TLRPC$TL_documentAttributeVideo();
                                    tLRPC$TL_documentAttributeVideo.supports_streaming = true;
                                }
                                tLRPC$TL_documentAttributeVideo.round_message = z4;
                                tLRPC$TL_document3.attributes.add(tLRPC$TL_documentAttributeVideo);
                                if (createCompressionSettings == null && createCompressionSettings.needConvert()) {
                                    if (createCompressionSettings.muted) {
                                        tLRPC$TL_document3.attributes.add(new TLRPC$TL_documentAttributeAnimated());
                                        fillVideoAttribute(str7, tLRPC$TL_documentAttributeVideo, createCompressionSettings);
                                        createCompressionSettings.originalWidth = tLRPC$TL_documentAttributeVideo.w;
                                        createCompressionSettings.originalHeight = tLRPC$TL_documentAttributeVideo.h;
                                    } else {
                                        tLRPC$TL_documentAttributeVideo.duration = (int) (createCompressionSettings.estimatedDuration / 1000);
                                    }
                                    int i8 = createCompressionSettings.rotationValue;
                                    MediaController.CropState cropState = createCompressionSettings.cropState;
                                    if (cropState != null) {
                                        i4 = cropState.transformWidth;
                                        i5 = cropState.transformHeight;
                                        i8 += cropState.transformRotation;
                                    } else {
                                        i4 = createCompressionSettings.resultWidth;
                                        i5 = createCompressionSettings.resultHeight;
                                    }
                                    if (i8 == 90 || i8 == 270) {
                                        tLRPC$TL_documentAttributeVideo.w = i5;
                                        tLRPC$TL_documentAttributeVideo.h = i4;
                                    } else {
                                        tLRPC$TL_documentAttributeVideo.w = i4;
                                        tLRPC$TL_documentAttributeVideo.h = i5;
                                    }
                                    tLRPC$TL_document3.size = createCompressionSettings.estimatedSize;
                                } else {
                                    if (file.exists()) {
                                        tLRPC$TL_document3.size = (int) file.length();
                                    }
                                    fillVideoAttribute(str7, tLRPC$TL_documentAttributeVideo, null);
                                }
                                bitmap = bitmap2;
                                str4 = str6;
                                tLRPC$TL_document2 = tLRPC$TL_document3;
                            } else {
                                bitmap2 = null;
                            }
                        }
                        str6 = null;
                        TLRPC$TL_document tLRPC$TL_document32 = new TLRPC$TL_document();
                        if (scaleAndSaveImage != null) {
                        }
                        tLRPC$TL_document32.file_reference = new byte[0];
                        tLRPC$TL_document32.mime_type = "video/mp4";
                        accountInstance.getUserConfig().saveConfig(false);
                        if (!isEncryptedDialog) {
                        }
                        tLRPC$TL_documentAttributeVideo.round_message = z4;
                        tLRPC$TL_document32.attributes.add(tLRPC$TL_documentAttributeVideo);
                        if (createCompressionSettings == null) {
                        }
                        if (file.exists()) {
                        }
                        fillVideoAttribute(str7, tLRPC$TL_documentAttributeVideo, null);
                        bitmap = bitmap2;
                        str4 = str6;
                        tLRPC$TL_document2 = tLRPC$TL_document32;
                    } else {
                        bitmap = null;
                        tLRPC$TL_document2 = tLRPC$TL_document;
                        str4 = null;
                    }
                    if (createCompressionSettings != null && createCompressionSettings.needConvert()) {
                        File file2 = new File(FileLoader.getDirectory(4), "-2147483648_" + SharedConfig.getLastLocalId() + ".mp4");
                        SharedConfig.saveConfig();
                        str7 = file2.getAbsolutePath();
                    }
                    final HashMap hashMap = new HashMap();
                    final String charSequence2 = charSequence != null ? charSequence.toString() : "";
                    str5 = str2;
                    if (str5 != null) {
                        hashMap.put("originalPath", str5);
                    }
                    if (str3 != null) {
                        hashMap.put("parentObject", str3);
                    }
                    final VideoEditedInfo videoEditedInfo2 = createCompressionSettings;
                    final String str10 = str3;
                    final TLRPC$TL_document tLRPC$TL_document4 = tLRPC$TL_document2;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda6
                        @Override // java.lang.Runnable
                        public final void run() {
                            SendMessagesHelper.lambda$prepareSendingVideo$92(bitmap, str4, messageObject, accountInstance, videoEditedInfo2, tLRPC$TL_document4, str7, hashMap, z, str10, j, messageObject2, messageObject3, charSequence2, arrayList, z2, i2, i);
                        }
                    });
                    return;
                }
            }
            j2 = j5;
            str2 = str9;
            i3 = 2;
            tLRPC$TL_document = null;
            str3 = null;
            if (tLRPC$TL_document != null) {
            }
            if (createCompressionSettings != null) {
                File file22 = new File(FileLoader.getDirectory(4), "-2147483648_" + SharedConfig.getLastLocalId() + ".mp4");
                SharedConfig.saveConfig();
                str7 = file22.getAbsolutePath();
            }
            final HashMap hashMap2 = new HashMap();
            if (charSequence != null) {
            }
            str5 = str2;
            if (str5 != null) {
            }
            if (str3 != null) {
            }
            final VideoEditedInfo videoEditedInfo22 = createCompressionSettings;
            final String str102 = str3;
            final TLRPC$TL_document tLRPC$TL_document42 = tLRPC$TL_document2;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.SendMessagesHelper$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    SendMessagesHelper.lambda$prepareSendingVideo$92(bitmap, str4, messageObject, accountInstance, videoEditedInfo22, tLRPC$TL_document42, str7, hashMap2, z, str102, j, messageObject2, messageObject3, charSequence2, arrayList, z2, i2, i);
                }
            });
            return;
        }
        prepareSendingDocumentInternal(accountInstance, str, str, null, null, j, messageObject2, messageObject3, charSequence, arrayList, messageObject, null, false, z3, z2, i2, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$prepareSendingVideo$92(Bitmap bitmap, String str, MessageObject messageObject, AccountInstance accountInstance, VideoEditedInfo videoEditedInfo, TLRPC$TL_document tLRPC$TL_document, String str2, HashMap hashMap, boolean z, String str3, long j, MessageObject messageObject2, MessageObject messageObject3, String str4, ArrayList arrayList, boolean z2, int i, int i2) {
        if (bitmap != null && str != null) {
            ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmap), str, false);
        }
        if (messageObject != null) {
            accountInstance.getSendMessagesHelper().editMessage(messageObject, null, videoEditedInfo, tLRPC$TL_document, str2, hashMap, false, z, str3);
        } else {
            accountInstance.getSendMessagesHelper().sendMessage(tLRPC$TL_document, videoEditedInfo, str2, j, messageObject2, messageObject3, str4, arrayList, null, hashMap, z2, i, i2, str3, null, false, z);
        }
    }
}

package org.telegram.messenger;

import android.app.Activity;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Paint;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.view.View;
import android.widget.FrameLayout;
import androidx.collection.LongSparseArray;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.ColorUtils;
import androidx.core.util.Consumer;
import j$.util.concurrent.ConcurrentHashMap;
import j$.util.function.Consumer;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SavedMessagesController;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.Timer;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.messenger.support.LongSparseLongArray;
import org.telegram.messenger.voip.VoIPService;
import org.telegram.tgnet.AbstractSerializedData;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelMessagesFilter;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogFilter;
import org.telegram.tgnet.TLRPC$DialogPeer;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EmojiStatus;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$GroupCall;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputChatPhoto;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputDocument;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputPhoto;
import org.telegram.tgnet.TLRPC$InputUser;
import org.telegram.tgnet.TLRPC$InputWallPaper;
import org.telegram.tgnet.TLRPC$JSONValue;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$MessageReplyHeader;
import org.telegram.tgnet.TLRPC$NotifyPeer;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PeerNotifySettings;
import org.telegram.tgnet.TLRPC$PeerSettings;
import org.telegram.tgnet.TLRPC$PhoneCall;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PrivacyKey;
import org.telegram.tgnet.TLRPC$Reaction;
import org.telegram.tgnet.TLRPC$ReactionNotificationsFrom;
import org.telegram.tgnet.TLRPC$RecentMeUrl;
import org.telegram.tgnet.TLRPC$ReportReason;
import org.telegram.tgnet.TLRPC$RestrictionReason;
import org.telegram.tgnet.TLRPC$SendMessageAction;
import org.telegram.tgnet.TLRPC$TL_account_createTheme;
import org.telegram.tgnet.TLRPC$TL_account_getNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_getReactionsNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_installTheme;
import org.telegram.tgnet.TLRPC$TL_account_installWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_registerDevice;
import org.telegram.tgnet.TLRPC$TL_account_reportPeer;
import org.telegram.tgnet.TLRPC$TL_account_saveTheme;
import org.telegram.tgnet.TLRPC$TL_account_saveWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_toggleSponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_account_unregisterDevice;
import org.telegram.tgnet.TLRPC$TL_account_updateEmojiStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadWallPaper;
import org.telegram.tgnet.TLRPC$TL_auth_loggedOut;
import org.telegram.tgnet.TLRPC$TL_availableEffect;
import org.telegram.tgnet.TLRPC$TL_boolFalse;
import org.telegram.tgnet.TLRPC$TL_boolTrue;
import org.telegram.tgnet.TLRPC$TL_channel;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channelParticipantSelf;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsAdmins;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsRecent;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_convertToGigagroup;
import org.telegram.tgnet.TLRPC$TL_channels_createChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteHistory;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_channels_deleteParticipantHistory;
import org.telegram.tgnet.TLRPC$TL_channels_editAdmin;
import org.telegram.tgnet.TLRPC$TL_channels_editBanned;
import org.telegram.tgnet.TLRPC$TL_channels_editPhoto;
import org.telegram.tgnet.TLRPC$TL_channels_editTitle;
import org.telegram.tgnet.TLRPC$TL_channels_getChannelRecommendations;
import org.telegram.tgnet.TLRPC$TL_channels_getChannels;
import org.telegram.tgnet.TLRPC$TL_channels_getForumTopicsByID;
import org.telegram.tgnet.TLRPC$TL_channels_getFullChannel;
import org.telegram.tgnet.TLRPC$TL_channels_getMessages;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_getSendAs;
import org.telegram.tgnet.TLRPC$TL_channels_getSponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel;
import org.telegram.tgnet.TLRPC$TL_channels_joinChannel;
import org.telegram.tgnet.TLRPC$TL_channels_leaveChannel;
import org.telegram.tgnet.TLRPC$TL_channels_readHistory;
import org.telegram.tgnet.TLRPC$TL_channels_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers;
import org.telegram.tgnet.TLRPC$TL_channels_setBoostsToUnblockRestrictions;
import org.telegram.tgnet.TLRPC$TL_channels_toggleForum;
import org.telegram.tgnet.TLRPC$TL_channels_toggleJoinRequest;
import org.telegram.tgnet.TLRPC$TL_channels_toggleJoinToSend;
import org.telegram.tgnet.TLRPC$TL_channels_togglePreHistoryHidden;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSignatures;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSlowMode;
import org.telegram.tgnet.TLRPC$TL_channels_updateUsername;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatForbidden;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_chatOnlines;
import org.telegram.tgnet.TLRPC$TL_chatReactionsAll;
import org.telegram.tgnet.TLRPC$TL_chatReactionsNone;
import org.telegram.tgnet.TLRPC$TL_chatReactionsSome;
import org.telegram.tgnet.TLRPC$TL_config;
import org.telegram.tgnet.TLRPC$TL_contacts_block;
import org.telegram.tgnet.TLRPC$TL_contacts_getBlocked;
import org.telegram.tgnet.TLRPC$TL_contacts_unblock;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterSuggested;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_dialogPeer;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_draftMessage;
import org.telegram.tgnet.TLRPC$TL_emojiStatusUntil;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_exportedContactToken;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders;
import org.telegram.tgnet.TLRPC$TL_forumTopic;
import org.telegram.tgnet.TLRPC$TL_groupCall;
import org.telegram.tgnet.TLRPC$TL_groupCallDiscarded;
import org.telegram.tgnet.TLRPC$TL_help_appConfig;
import org.telegram.tgnet.TLRPC$TL_help_appConfigNotModified;
import org.telegram.tgnet.TLRPC$TL_help_dismissSuggestion;
import org.telegram.tgnet.TLRPC$TL_help_getAppConfig;
import org.telegram.tgnet.TLRPC$TL_help_getPeerColors;
import org.telegram.tgnet.TLRPC$TL_help_getPeerProfileColors;
import org.telegram.tgnet.TLRPC$TL_help_getRecentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_hidePromoData;
import org.telegram.tgnet.TLRPC$TL_help_peerColorOption;
import org.telegram.tgnet.TLRPC$TL_help_peerColorProfileSet;
import org.telegram.tgnet.TLRPC$TL_help_peerColorSet;
import org.telegram.tgnet.TLRPC$TL_help_peerColors;
import org.telegram.tgnet.TLRPC$TL_help_promoData;
import org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty;
import org.telegram.tgnet.TLRPC$TL_help_recentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_saveAppLog;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdateEmpty;
import org.telegram.tgnet.TLRPC$TL_inputAppEvent;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputChannelEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChatPhoto;
import org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto;
import org.telegram.tgnet.TLRPC$TL_inputDialogPeer;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedChat;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputGroupCall;
import org.telegram.tgnet.TLRPC$TL_inputMediaDocument;
import org.telegram.tgnet.TLRPC$TL_inputMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_inputMessagesFilterChatPhotos;
import org.telegram.tgnet.TLRPC$TL_inputNotifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_inputNotifyChats;
import org.telegram.tgnet.TLRPC$TL_inputNotifyUsers;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhoneCall;
import org.telegram.tgnet.TLRPC$TL_inputPhoto;
import org.telegram.tgnet.TLRPC$TL_inputPhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_inputTheme;
import org.telegram.tgnet.TLRPC$TL_inputThemeSettings;
import org.telegram.tgnet.TLRPC$TL_inputUser;
import org.telegram.tgnet.TLRPC$TL_inputUserEmpty;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_inputWallPaper;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug;
import org.telegram.tgnet.TLRPC$TL_jsonArray;
import org.telegram.tgnet.TLRPC$TL_jsonBool;
import org.telegram.tgnet.TLRPC$TL_jsonNumber;
import org.telegram.tgnet.TLRPC$TL_jsonObject;
import org.telegram.tgnet.TLRPC$TL_jsonObjectValue;
import org.telegram.tgnet.TLRPC$TL_jsonString;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatJoinedByRequest;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGroupCall;
import org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageEmpty;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaEmpty;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_addChatUser;
import org.telegram.tgnet.TLRPC$TL_messages_affectedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_affectedMessages;
import org.telegram.tgnet.TLRPC$TL_messages_availableEffects;
import org.telegram.tgnet.TLRPC$TL_messages_availableEffectsNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_channelMessages;
import org.telegram.tgnet.TLRPC$TL_messages_chatFull;
import org.telegram.tgnet.TLRPC$TL_messages_chats;
import org.telegram.tgnet.TLRPC$TL_messages_chatsSlice;
import org.telegram.tgnet.TLRPC$TL_messages_createChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser;
import org.telegram.tgnet.TLRPC$TL_messages_deleteHistory;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteQuickReplyMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteSavedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAbout;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAdmin;
import org.telegram.tgnet.TLRPC$TL_messages_editChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto;
import org.telegram.tgnet.TLRPC$TL_messages_editChatTitle;
import org.telegram.tgnet.TLRPC$TL_messages_forumTopics;
import org.telegram.tgnet.TLRPC$TL_messages_getAvailableEffects;
import org.telegram.tgnet.TLRPC$TL_messages_getChats;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getFullChat;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessages;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesViews;
import org.telegram.tgnet.TLRPC$TL_messages_getOnlines;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPollResults;
import org.telegram.tgnet.TLRPC$TL_messages_getQuickReplyMessages;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getSavedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getSavedReactionTags;
import org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadReactions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_hidePeerSettingsBar;
import org.telegram.tgnet.TLRPC$TL_messages_invitedUsers;
import org.telegram.tgnet.TLRPC$TL_messages_markDialogUnread;
import org.telegram.tgnet.TLRPC$TL_messages_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_messagesNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_migrateChat;
import org.telegram.tgnet.TLRPC$TL_messages_peerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_peerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_readDiscussion;
import org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_readHistory;
import org.telegram.tgnet.TLRPC$TL_messages_readMentions;
import org.telegram.tgnet.TLRPC$TL_messages_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_messages_readReactions;
import org.telegram.tgnet.TLRPC$TL_messages_receivedQueue;
import org.telegram.tgnet.TLRPC$TL_messages_reorderPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_reportEncryptedSpam;
import org.telegram.tgnet.TLRPC$TL_messages_reportSpam;
import org.telegram.tgnet.TLRPC$TL_messages_saveDefaultSendAs;
import org.telegram.tgnet.TLRPC$TL_messages_saveGif;
import org.telegram.tgnet.TLRPC$TL_messages_saveRecentSticker;
import org.telegram.tgnet.TLRPC$TL_messages_savedReactionsTags;
import org.telegram.tgnet.TLRPC$TL_messages_savedReactionsTagsNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_search;
import org.telegram.tgnet.TLRPC$TL_messages_setChatAvailableReactions;
import org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping;
import org.telegram.tgnet.TLRPC$TL_messages_setHistoryTTL;
import org.telegram.tgnet.TLRPC$TL_messages_setTyping;
import org.telegram.tgnet.TLRPC$TL_messages_sponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_messages_startBot;
import org.telegram.tgnet.TLRPC$TL_messages_stickerSet;
import org.telegram.tgnet.TLRPC$TL_messages_toggleDialogPin;
import org.telegram.tgnet.TLRPC$TL_messages_toggleNoForwards;
import org.telegram.tgnet.TLRPC$TL_messages_unpinAllMessages;
import org.telegram.tgnet.TLRPC$TL_messages_updatePinnedMessage;
import org.telegram.tgnet.TLRPC$TL_messages_updateSavedReactionTag;
import org.telegram.tgnet.TLRPC$TL_missingInvitee;
import org.telegram.tgnet.TLRPC$TL_notifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_notifyChats;
import org.telegram.tgnet.TLRPC$TL_notifyForumTopic;
import org.telegram.tgnet.TLRPC$TL_notifyPeer;
import org.telegram.tgnet.TLRPC$TL_notifyUsers;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC$TL_phoneCallDiscarded;
import org.telegram.tgnet.TLRPC$TL_phoneCallRequested;
import org.telegram.tgnet.TLRPC$TL_phone_discardCall;
import org.telegram.tgnet.TLRPC$TL_phone_getGroupCall;
import org.telegram.tgnet.TLRPC$TL_phone_groupCall;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_deletePhotos;
import org.telegram.tgnet.TLRPC$TL_photos_getUserPhotos;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_photos_uploadProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_privacyKeyAbout;
import org.telegram.tgnet.TLRPC$TL_privacyKeyAddedByPhone;
import org.telegram.tgnet.TLRPC$TL_privacyKeyChatInvite;
import org.telegram.tgnet.TLRPC$TL_privacyKeyForwards;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneCall;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneNumber;
import org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneP2P;
import org.telegram.tgnet.TLRPC$TL_privacyKeyProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_privacyKeyStatusTimestamp;
import org.telegram.tgnet.TLRPC$TL_privacyKeyVoiceMessages;
import org.telegram.tgnet.TLRPC$TL_reactionCustomEmoji;
import org.telegram.tgnet.TLRPC$TL_reactionEmoji;
import org.telegram.tgnet.TLRPC$TL_reactionNotificationsFromContacts;
import org.telegram.tgnet.TLRPC$TL_reactionsNotifySettings;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardHide;
import org.telegram.tgnet.TLRPC$TL_savedReactionTag;
import org.telegram.tgnet.TLRPC$TL_sendAsPeer;
import org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseContactAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseStickerAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteraction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteractionSeen;
import org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageGeoLocationAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordVideoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction;
import org.telegram.tgnet.TLRPC$TL_speakingInGroupCallAction;
import org.telegram.tgnet.TLRPC$TL_sponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_theme;
import org.telegram.tgnet.TLRPC$TL_updateAttachMenuBots;
import org.telegram.tgnet.TLRPC$TL_updateBotCommands;
import org.telegram.tgnet.TLRPC$TL_updateBroadcastRevenueTransactions;
import org.telegram.tgnet.TLRPC$TL_updateChannel;
import org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews;
import org.telegram.tgnet.TLRPC$TL_updateChannelPinnedTopic;
import org.telegram.tgnet.TLRPC$TL_updateChannelPinnedTopics;
import org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateChannelTooLong;
import org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateChannelViewForumAsMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelWebPage;
import org.telegram.tgnet.TLRPC$TL_updateChat;
import org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete;
import org.telegram.tgnet.TLRPC$TL_updateChatParticipants;
import org.telegram.tgnet.TLRPC$TL_updateChatUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateConfig;
import org.telegram.tgnet.TLRPC$TL_updateContactsReset;
import org.telegram.tgnet.TLRPC$TL_updateDcOptions;
import org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteQuickReplyMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilter;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder;
import org.telegram.tgnet.TLRPC$TL_updateDialogFilters;
import org.telegram.tgnet.TLRPC$TL_updateDialogPinned;
import org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark;
import org.telegram.tgnet.TLRPC$TL_updateDraftMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping;
import org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead;
import org.telegram.tgnet.TLRPC$TL_updateEncryption;
import org.telegram.tgnet.TLRPC$TL_updateFavedStickers;
import org.telegram.tgnet.TLRPC$TL_updateFolderPeers;
import org.telegram.tgnet.TLRPC$TL_updateGeoLiveViewed;
import org.telegram.tgnet.TLRPC$TL_updateGroupCall;
import org.telegram.tgnet.TLRPC$TL_updateGroupCallConnection;
import org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants;
import org.telegram.tgnet.TLRPC$TL_updateLangPack;
import org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong;
import org.telegram.tgnet.TLRPC$TL_updateMessageExtendedMedia;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateMessagePoll;
import org.telegram.tgnet.TLRPC$TL_updateMessageReactions;
import org.telegram.tgnet.TLRPC$TL_updateMoveStickerSetToTop;
import org.telegram.tgnet.TLRPC$TL_updateNewAuthorization;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewStickerSet;
import org.telegram.tgnet.TLRPC$TL_updateNewStoryReaction;
import org.telegram.tgnet.TLRPC$TL_updateNotifySettings;
import org.telegram.tgnet.TLRPC$TL_updatePeerBlocked;
import org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL;
import org.telegram.tgnet.TLRPC$TL_updatePeerLocated;
import org.telegram.tgnet.TLRPC$TL_updatePeerSettings;
import org.telegram.tgnet.TLRPC$TL_updatePeerWallpaper;
import org.telegram.tgnet.TLRPC$TL_updatePendingJoinRequests;
import org.telegram.tgnet.TLRPC$TL_updatePhoneCall;
import org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData;
import org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_updatePinnedMessages;
import org.telegram.tgnet.TLRPC$TL_updatePinnedSavedDialogs;
import org.telegram.tgnet.TLRPC$TL_updatePrivacy;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadFeaturedEmojiStickers;
import org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateRecentEmojiStatuses;
import org.telegram.tgnet.TLRPC$TL_updateRecentReactions;
import org.telegram.tgnet.TLRPC$TL_updateRecentStickers;
import org.telegram.tgnet.TLRPC$TL_updateSavedDialogPinned;
import org.telegram.tgnet.TLRPC$TL_updateSavedGifs;
import org.telegram.tgnet.TLRPC$TL_updateSavedReactionTags;
import org.telegram.tgnet.TLRPC$TL_updateSavedRingtones;
import org.telegram.tgnet.TLRPC$TL_updateSentStoryReaction;
import org.telegram.tgnet.TLRPC$TL_updateServiceNotification;
import org.telegram.tgnet.TLRPC$TL_updateShort;
import org.telegram.tgnet.TLRPC$TL_updateShortChatMessage;
import org.telegram.tgnet.TLRPC$TL_updateShortMessage;
import org.telegram.tgnet.TLRPC$TL_updateStarsBalance;
import org.telegram.tgnet.TLRPC$TL_updateStarsRevenueStatus;
import org.telegram.tgnet.TLRPC$TL_updateStickerSets;
import org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder;
import org.telegram.tgnet.TLRPC$TL_updateTheme;
import org.telegram.tgnet.TLRPC$TL_updateTranscribeAudio;
import org.telegram.tgnet.TLRPC$TL_updateTranscribedAudio;
import org.telegram.tgnet.TLRPC$TL_updateUser;
import org.telegram.tgnet.TLRPC$TL_updateUserEmojiStatus;
import org.telegram.tgnet.TLRPC$TL_updateUserName;
import org.telegram.tgnet.TLRPC$TL_updateUserPhone;
import org.telegram.tgnet.TLRPC$TL_updateUserPhoto;
import org.telegram.tgnet.TLRPC$TL_updateUserStatus;
import org.telegram.tgnet.TLRPC$TL_updateUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateWebPage;
import org.telegram.tgnet.TLRPC$TL_updateWebViewResultSent;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updatesCombined;
import org.telegram.tgnet.TLRPC$TL_updatesTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifference;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_difference;
import org.telegram.tgnet.TLRPC$TL_updates_differenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_differenceSlice;
import org.telegram.tgnet.TLRPC$TL_updates_differenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference;
import org.telegram.tgnet.TLRPC$TL_updates_getDifference;
import org.telegram.tgnet.TLRPC$TL_updates_state;
import org.telegram.tgnet.TLRPC$TL_user;
import org.telegram.tgnet.TLRPC$TL_userForeign_old2;
import org.telegram.tgnet.TLRPC$TL_userProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_username;
import org.telegram.tgnet.TLRPC$TL_users_getFullUser;
import org.telegram.tgnet.TLRPC$TL_users_getIsPremiumRequiredToContact;
import org.telegram.tgnet.TLRPC$TL_users_getUsers;
import org.telegram.tgnet.TLRPC$TL_users_userFull;
import org.telegram.tgnet.TLRPC$TL_wallPaper;
import org.telegram.tgnet.TLRPC$TL_wallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_wallPaperSettings;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$TL_webPagePending;
import org.telegram.tgnet.TLRPC$TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WallPaperSettings;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$contacts_Blocked;
import org.telegram.tgnet.TLRPC$help_AppConfig;
import org.telegram.tgnet.TLRPC$help_PeerColorSet;
import org.telegram.tgnet.TLRPC$messages_AvailableEffects;
import org.telegram.tgnet.TLRPC$messages_Chats;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$messages_SavedReactionTags;
import org.telegram.tgnet.TLRPC$messages_SponsoredMessages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.tgnet.TLRPC$updates_ChannelDifference;
import org.telegram.tgnet.TLRPC$updates_Difference;
import org.telegram.tgnet.tl.TL_account$contentSettings;
import org.telegram.tgnet.tl.TL_account$setContentSettings;
import org.telegram.tgnet.tl.TL_bots$BotInfo;
import org.telegram.tgnet.tl.TL_bots$TL_botInfo;
import org.telegram.tgnet.tl.TL_bots$TL_botMenuButton;
import org.telegram.tgnet.tl.TL_bots$TL_updateBotMenuButton;
import org.telegram.tgnet.tl.TL_chatlists$TL_chatlists_chatlistUpdates;
import org.telegram.tgnet.tl.TL_chatlists$TL_chatlists_getChatlistUpdates;
import org.telegram.tgnet.tl.TL_chatlists$TL_exportedChatlistInvite;
import org.telegram.tgnet.tl.TL_chatlists$TL_inputChatlistDialogFilter;
import org.telegram.tgnet.tl.TL_stories$TL_updateReadStories;
import org.telegram.tgnet.tl.TL_stories$TL_updateStoriesStealthMode;
import org.telegram.tgnet.tl.TL_stories$TL_updateStory;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Business.QuickRepliesController;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.ChannelMonetizationLayout;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChatRightsEditActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ImageUpdater;
import org.telegram.ui.Components.JoinCallAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.Premium.LimitReachedBottomSheet;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.EmptyBaseFragment;
import org.telegram.ui.LaunchActivity;
import org.telegram.ui.PremiumPreviewFragment;
import org.telegram.ui.ProfileActivity;
import org.telegram.ui.SecretMediaViewer;
import org.telegram.ui.Stars.BotStarsController;
import org.telegram.ui.Stars.StarsController;
import org.telegram.ui.Stories.StoriesController;
import org.telegram.ui.ThemeActivity;
import org.telegram.ui.TopicsFragment;
import org.telegram.ui.bots.BotWebViewAttachedSheet;
import org.telegram.ui.bots.BotWebViewSheet;
import org.telegram.ui.bots.WebViewRequestProps;
/* loaded from: classes.dex */
public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CHATLIST = 512;
    public static int DIALOG_FILTER_FLAG_CHATLIST_ADMIN = 1024;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    public static final int LOAD_AROUND_DATE = 4;
    public static final int LOAD_AROUND_MESSAGE = 3;
    public static final int LOAD_BACKWARD = 0;
    public static final int LOAD_FORWARD = 1;
    public static final int LOAD_FROM_UNREAD = 2;
    public static int PROMO_TYPE_OTHER = 2;
    public static int PROMO_TYPE_PROXY = 0;
    public static int PROMO_TYPE_PSA = 1;
    public static int UPDATE_MASK_AVATAR = 2;
    public static int UPDATE_MASK_CHAT = 8192;
    public static int UPDATE_MASK_CHAT_AVATAR = 8;
    public static int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static int UPDATE_MASK_CHAT_NAME = 16;
    public static int UPDATE_MASK_CHECK = 65536;
    public static int UPDATE_MASK_EMOJI_INTERACTIONS = 262144;
    public static int UPDATE_MASK_EMOJI_STATUS = 524288;
    public static int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static int UPDATE_MASK_NAME = 1;
    public static int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static int UPDATE_MASK_PHONE = 1024;
    public static int UPDATE_MASK_REACTIONS_READ = 1048576;
    public static int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static int UPDATE_MASK_REORDER = 131072;
    public static int UPDATE_MASK_SELECT_DIALOG = 512;
    public static int UPDATE_MASK_SEND_STATE = 4096;
    public static int UPDATE_MASK_STATUS = 4;
    public static int UPDATE_MASK_USER_PHONE = 128;
    public static int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime = 0;
    private static volatile long lastThemeCheckTime = 0;
    public static int stableIdPointer = 100;
    private int DIALOGS_LOAD_TYPE_CACHE;
    private int DIALOGS_LOAD_TYPE_CHANNEL;
    private int DIALOGS_LOAD_TYPE_UNKNOWN;
    public int aboutLengthLimitDefault;
    public int aboutLengthLimitPremium;
    private final HashMap<Long, TLRPC$Chat> activeVoiceChatsMap;
    protected ArrayList<TLRPC$Dialog> allDialogs;
    public boolean androidDisableRoundCamera2;
    public float animatedEmojisZoom;
    private final CacheFetcher<Integer, TLRPC$TL_help_appConfig> appConfigFetcher;
    public Set<String> authDomains;
    public int authorizationAutoconfirmPeriod;
    public boolean autoarchiveAvailable;
    public Set<String> autologinDomains;
    public String autologinToken;
    private TLRPC$messages_AvailableEffects availableEffects;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public LongSparseIntArray blockePeers;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int boostsChannelLevelMax;
    public long boostsPerSentGift;
    public int botPreviewMediasMax;
    public int businessChatLinksLimit;
    public SparseIntArray businessFeaturesTypesToPosition;
    private CacheByChatsController cacheByChatsController;
    private HashMap<Long, ChannelRecommendations> cachedChannelRecommendations;
    private TLRPC$TL_exportedContactToken cachedContactToken;
    private LongSparseArray<Boolean> cachedIsUserPremiumBlocked;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canEditFactcheck;
    public boolean canRevokePmInbox;
    public int captionLengthLimitDefault;
    public int captionLengthLimitPremium;
    private LongSparseArray<LongSparseArray<TLRPC$ChannelParticipant>> channelAdmins;
    public int channelBgIconLevelMin;
    private ChannelBoostsController channelBoostsControler;
    public int channelCustomWallpaperLevelMin;
    public int channelEmojiStatusLevelMin;
    public int channelProfileIconLevelMin;
    public int channelRestrictSponsoredLevelMin;
    public boolean channelRevenueWithdrawalEnabled;
    private LongSparseArray<ArrayList<Integer>> channelViewsToSend;
    public int channelWallpaperLevelMin;
    public int channelsLimitDefault;
    public int channelsLimitPremium;
    private LongSparseIntArray channelsPts;
    public int chatReadMarkExpirePeriod;
    public int chatReadMarkSizeThreshold;
    private SparseArray<ChatlistUpdatesStat> chatlistFoldersUpdates;
    public int chatlistInvitesLimitDefault;
    public int chatlistInvitesLimitPremium;
    public int chatlistJoinedLimitDefault;
    public int chatlistJoinedLimitPremium;
    private int chatlistUpdatePeriod;
    private final ConcurrentHashMap<Long, TLRPC$Chat> chats;
    public int checkResetLangpack;
    private LongSparseArray<Boolean> checkingLastMessagesDialogs;
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC$Dialog> clearingHistoryDialogs;
    public boolean collectDeviceStats;
    private TL_account$contentSettings contentSettings;
    private ArrayList<Utilities.Callback<TL_account$contentSettings>> contentSettingsCallbacks;
    private long contentSettingsLoadedTime;
    private boolean contentSettingsLoading;
    private ArrayList<Long> createdDialogIds;
    private ArrayList<Long> createdDialogMainThreadIds;
    private ArrayList<Long> createdScheduledDialogIds;
    private Runnable currentDeleteTaskRunnable;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMediaMids;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseIntArray deletedHistory;
    private LongSparseArray<TLRPC$Dialog> deletingDialogs;
    private Comparator<TLRPC$Dialog> dialogComparator;
    private final Comparator<TLRPC$Dialog> dialogDateComparator;
    public ArrayList<DialogFilter> dialogFilters;
    public SparseArray<DialogFilter> dialogFiltersById;
    public int dialogFiltersChatsLimitDefault;
    public int dialogFiltersChatsLimitPremium;
    public int dialogFiltersLimitDefault;
    public int dialogFiltersLimitPremium;
    public boolean dialogFiltersLoaded;
    public int dialogFiltersPinnedLimitDefault;
    public int dialogFiltersPinnedLimitPremium;
    public LongSparseArray<ArrayList<MessageObject>> dialogMessage;
    public SparseArray<MessageObject> dialogMessagesByIds;
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds;
    private LongSparseArray<DialogPhotos> dialogPhotos;
    public SparseArray<ArrayList<TLRPC$Dialog>> dialogsByFolder;
    public ArrayList<TLRPC$Dialog> dialogsCanAddUsers;
    public ArrayList<TLRPC$Dialog> dialogsChannelsOnly;
    private SparseBooleanArray dialogsEndReached;
    public ArrayList<TLRPC$Dialog> dialogsForBlock;
    public ArrayList<TLRPC$Dialog> dialogsForward;
    public ArrayList<TLRPC$Dialog> dialogsGroupsOnly;
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate;
    public ArrayList<TLRPC$Dialog> dialogsMyChannels;
    public ArrayList<TLRPC$Dialog> dialogsMyGroups;
    public ArrayList<TLRPC$Dialog> dialogsServerOnly;
    public ArrayList<TLRPC$Dialog> dialogsUsersOnly;
    public LongSparseArray<TLRPC$Dialog> dialogs_dict;
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max;
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max;
    public HashSet<String> diceEmojies;
    public HashMap<String, DiceFrameSuccess> diceSuccess;
    public List<String> directPaymentsCurrency;
    public Set<String> dismissedSuggestions;
    private final CacheFetcher<Integer, TLRPC$messages_AvailableEffects> effectsFetcher;
    public HashMap<Long, ArrayList<TLRPC$TL_sendMessageEmojiInteraction>> emojiInteractions;
    private final SharedPreferences emojiPreferences;
    public HashMap<String, EmojiSound> emojiSounds;
    private LongSparseArray<Integer> emojiStatusUntilValues;
    public boolean enableJoined;
    private final ConcurrentHashMap<Integer, TLRPC$EncryptedChat> encryptedChats;
    public Set<String> exportGroupUri;
    public Set<String> exportPrivateUri;
    public Set<String> exportUri;
    private final LongSparseArray<TLRPC$TL_chatInviteExported> exportedChats;
    public int factcheckLengthLimit;
    public ArrayList<FaqSearchResult> faqSearchArray;
    public TLRPC$WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    public boolean folderTags;
    public int forumUpgradeParticipantsMin;
    public ArrayList<DialogFilter> frozenDialogFilters;
    private LongSparseArray<TLRPC$ChatFull> fullChats;
    private LongSparseArray<TLRPC$UserFull> fullUsers;
    private boolean getDifferenceFirstSync;
    public boolean getfileExperimentalParams;
    private LongSparseArray<Boolean> gettingChatInviters;
    public boolean gettingDifference;
    private LongSparseArray<Boolean> gettingDifferenceChannels;
    private boolean gettingNewDeleteTask;
    private LongSparseArray<Boolean> gettingUnknownChannels;
    private LongSparseArray<Boolean> gettingUnknownDialogs;
    public String gifSearchBot;
    public ArrayList<String> gifSearchEmojies;
    public boolean giftAttachMenuIcon;
    public boolean giftTextFieldIcon;
    public long giveawayAddPeersMax;
    public long giveawayBoostsPerPremium;
    public long giveawayCountriesMax;
    public boolean giveawayGiftsPurchaseAvailable;
    public long giveawayPeriodMax;
    public int groupCallVideoMaxParticipants;
    private LongSparseArray<ChatObject.Call> groupCalls;
    private LongSparseArray<ChatObject.Call> groupCallsByChatId;
    public int groupCustomWallpaperLevelMin;
    public int groupEmojiStatusLevelMin;
    public int groupEmojiStickersLevelMin;
    public int groupProfileBgIconLevelMin;
    public int groupTranscribeLevelMin;
    public int groupWallpaperLevelMin;
    private boolean hasArchivedChats;
    private boolean hasStories;
    public int hiddenMembersGroupSizeMin;
    public ArrayList<Long> hiddenUndoChats;
    public ArrayList<TLRPC$RecentMeUrl> hintDialogs;
    public Set<String> ignoreRestrictionReasons;
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    public int introDescriptionLengthLimit;
    public int introTitleLengthLimit;
    private boolean isLeftPromoChannel;
    private final ArrayList<Long> joiningToChannels;
    public boolean keepAliveService;
    public int largeQueueMaxActiveOperations;
    private int lastCheckPromoId;
    public int lastKnownSessionsCount;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastQuickReplyServerQueryTime;
    private LongSparseArray<Long> lastSavedServerQueryTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime;
    private LongSparseArray<Long> lastServerQueryTime;
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private Runnable loadAppConfigRunnable;
    public LongSparseLongArray loadedFullChats;
    private HashSet<Long> loadedFullParticipants;
    private LongSparseLongArray loadedFullUsers;
    private boolean loadingAvailableEffects;
    public boolean loadingBlockedPeers;
    private LongSparseIntArray loadingChannelAdmins;
    private SparseBooleanArray loadingDialogs;
    private HashSet<Long> loadingFullChats;
    private HashSet<Long> loadingFullParticipants;
    private HashSet<Long> loadingFullUsers;
    private HashSet<Long> loadingGroupCalls;
    private HashSet<Long> loadingIsUserPremiumBlocked;
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private boolean loadingPeerColors;
    private LongSparseArray<Boolean> loadingPeerSettings;
    private SparseIntArray loadingPinnedDialogs;
    private boolean loadingProfilePeerColors;
    private HashSet<Long> loadingReactionTags;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private boolean loggedDeviceStats;
    private final SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCountDefault;
    public int maxFolderPinnedDialogsCountPremium;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCountDefault;
    public int maxPinnedDialogsCountPremium;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats;
    private boolean migratingDialogs;
    public int minGroupConvertSize;
    private LongSparseArray<ArrayList<Integer>> needShortPollChannels;
    private LongSparseArray<ArrayList<Integer>> needShortPollOnlines;
    public NewMessageCallback newMessageCallback;
    public boolean newNoncontactPeersRequirePremiumWithoutOwnpremium;
    private SparseIntArray nextDialogsCacheOffset;
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private final SharedPreferences notificationsPreferences;
    private final Runnable notifyTranscriptionAudioCooldownUpdate;
    private final ConcurrentHashMap<String, TLObject> objectsByUsernames;
    private boolean offlineSent;
    private Utilities.Callback<Boolean> onLoadedRemoteFilters;
    public ConcurrentHashMap<Long, Integer> onlinePrivacy;
    private Runnable passwordCheckRunnable;
    public PeerColors peerColors;
    private final long peerDialogRequestTimeout;
    private final LongSparseArray<Long> peerDialogsRequested;
    public Set<String> pendingSuggestions;
    private LongSparseIntArray pendingUnreadCounter;
    public SparseArray<ImageUpdater> photoSuggestion;
    public int pmReadDateExpirePeriod;
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck;
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public String premiumBotUsername;
    public SparseIntArray premiumFeaturesTypesToPosition;
    public String premiumInvoiceSlug;
    public boolean premiumLocked;
    public String premiumManageSubscriptionUrl;
    public LongSparseArray<LongSparseArray<CharSequence>> printingStrings;
    public LongSparseArray<LongSparseArray<Integer>> printingStringsTypes;
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers;
    public PeerColors profilePeerColors;
    private TLRPC$Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public int publicLinksLimitDefault;
    public int publicLinksLimitPremium;
    public boolean qrLoginCamera;
    public int quickRepliesLimit;
    public int quickReplyMessagesLimit;
    public int quoteLengthMax;
    public int ratingDecay;
    private LongSparseArray<TLRPC$TL_messages_savedReactionsTags> reactionTags;
    public int reactionsInChatMax;
    public int reactionsUniqMax;
    public int reactionsUserMaxDefault;
    public int reactionsUserMaxPremium;
    private ArrayList<ReadTask> readTasks;
    private LongSparseArray<ReadTask> readTasksMap;
    private Runnable recentEmojiStatusUpdateRunnable;
    private long recentEmojiStatusUpdateRunnableTime;
    private long recentEmojiStatusUpdateRunnableTimeout;
    public int recommendedChannelsLimitDefault;
    public int recommendedChannelsLimitPremium;
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages;
    private HashMap<String, ArrayList<MessageObject>> reloadingSavedWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingSavedWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending;
    public boolean remoteConfigLoaded;
    private ArrayList<ReadTask> repliesReadTasks;
    private Runnable requestIsUserPremiumBlockedRunnable;
    private boolean requestingContactToken;
    private TLRPC$messages_Dialogs resetDialogsAll;
    private TLRPC$TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int ringtoneDurationMax;
    public int ringtoneSizeMax;
    public int roundAudioBitrate;
    public int roundVideoBitrate;
    public int roundVideoSize;
    public boolean saveGifsWithStickers;
    public int savedDialogsPinnedLimitDefault;
    public int savedDialogsPinnedLimitPremium;
    public int savedGifsLimitDefault;
    public int savedGifsLimitPremium;
    public SavedMessagesController savedMessagesController;
    public boolean savedViewAsChats;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter;
    private LongSparseArray<SendAsPeersInfo> sendAsPeers;
    public LongSparseArray<LongSparseArray<Boolean>>[] sendingTypings;
    private final HashSet<Long> sensitiveAgreed;
    private SparseBooleanArray serverDialogsEndReached;
    private LongSparseIntArray shortPollChannels;
    private LongSparseIntArray shortPollOnlines;
    public boolean showAnnualPerMonth;
    public boolean showFiltersTooltip;
    public int smallQueueMaxActiveOperations;
    public boolean smsjobsStickyNotificationEnabled;
    private DialogFilter sortingDialogFilter;
    private LongSparseArray<SponsoredMessagesInfo> sponsoredMessages;
    public boolean starsGiftsEnabled;
    public boolean starsLocked;
    public long starsPaidPostAmountMax;
    public long starsPaidReactionAmountMax;
    public long starsRevenueWithdrawalMin;
    public long starsSubscriptionAmountMax;
    public float starsUsdSellRate1000;
    public float starsUsdWithdrawRate1000;
    private int statusRequest;
    private int statusSettingState;
    public int stealthModeCooldown;
    public int stealthModeFuture;
    public int stealthModePast;
    public int stickersFavedLimitDefault;
    public int stickersFavedLimitPremium;
    public long storiesChangelogUserId;
    public StoriesController storiesController;
    public String storiesEntities;
    public boolean storiesExportNopublicLink;
    public int storiesPinnedToTopCountMax;
    public String storiesPosting;
    public int storiesSentMonthlyLimitDefault;
    public int storiesSentMonthlyLimitPremium;
    public int storiesSentWeeklyLimitDefault;
    public int storiesSentWeeklyLimitPremium;
    public int storiesSuggestedReactionsLimitDefault;
    public int storiesSuggestedReactionsLimitPremium;
    public int storyCaptionLengthLimitDefault;
    public int storyCaptionLengthLimitPremium;
    public int storyExpiringLimitDefault;
    public int storyExpiringLimitPremium;
    public boolean storyQualityFull;
    public String storyVenueSearchBot;
    public boolean storyWeatherPreload;
    public boolean suggestContacts;
    public boolean suggestStickersApiOnly;
    public ArrayList<TLRPC$TL_dialogFilterSuggested> suggestedFilters;
    public String suggestedLangCode;
    public int telegramAntispamGroupSizeMin;
    public long telegramAntispamUserId;
    private Runnable themeCheckRunnable;
    private HashMap<String, ReadTask> threadsReadTasksMap;
    public String tonProxyAddress;
    private TopicsController topicsController;
    public int topicsPinnedLimit;
    public int totalBlockedCount;
    public int transcribeAudioTrialCooldownUntil;
    public int transcribeAudioTrialCurrentNumber;
    public int transcribeAudioTrialDurationMax;
    public int transcribeAudioTrialWeeklyNumber;
    public int transcribeButtonPressed;
    private TranslateController translateController;
    public UnconfirmedAuthController unconfirmedAuthController;
    public int unreadUnmutedDialogs;
    public int updateCheckDelay;
    private Comparator<TLRPC$Update> updatesComparator;
    private final LongSparseArray<ArrayList<TLRPC$Updates>> updatesQueueChannels;
    private ArrayList<TLRPC$Updates> updatesQueuePts;
    private ArrayList<TLRPC$Updates> updatesQueueQts;
    private ArrayList<TLRPC$Updates> updatesQueueSeq;
    private LongSparseLongArray updatesStartWaitTimeChannels;
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    public boolean uploadMarkupVideo;
    public int uploadMaxFileParts;
    public int uploadMaxFilePartsPremium;
    public float uploadPremiumSpeedupDownload;
    public int uploadPremiumSpeedupNotifyPeriod;
    public float uploadPremiumSpeedupUpload;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes;
    public String uploadingWallpaper;
    public Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private UserNameResolver userNameResolver;
    private final ConcurrentHashMap<Long, TLRPC$User> users;
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds;
    private ArrayList<Long> visibleScheduledDialogMainThreadIds;
    public String weatherSearchUsername;
    public Set<String> webAppAllowedProtocols;
    public int webFileDatacenterId;
    public String youtubePipType;
    public static int UPDATE_MASK_ALL = (((((((((2 | 4) | 1) | 8) | 16) | 32) | 64) | 128) | LiteMode.FLAG_CHAT_BLUR) | 1024) | FileLoaderPriorityQueue.PRIORITY_VALUE_MAX;
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = (((1 | 2) | 4) | 8) | 16;
    private static volatile MessagesController[] Instance = new MessagesController[4];
    private static final Object[] lockObjects = new Object[4];

    /* loaded from: classes3.dex */
    public interface ErrorDelegate {
        boolean run(TLRPC$TL_error tLRPC$TL_error);
    }

    /* loaded from: classes3.dex */
    public interface IsInChatCheckedCallback {
        void run(boolean z, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str);
    }

    /* loaded from: classes3.dex */
    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    /* loaded from: classes3.dex */
    public interface NewMessageCallback {
        boolean onMessageReceived(TLRPC$Message tLRPC$Message);
    }

    /* loaded from: classes3.dex */
    public static class PrintingUser {
        public TLRPC$SendMessageAction action;
        public long lastTime;
        public long userId;
    }

    public static /* synthetic */ void lambda$blockPeer$83(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$completeReadTask$226(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$completeReadTask$228(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$deleteParticipantFromChat$289(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$deleteParticipantFromChat$292(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$deleteUserPhoto$111(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$hidePeerSettingsBar$69(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$hidePromoDialog$126(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$installTheme$113(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$installTheme$114(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$logDeviceStats$28(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMentionMessageAsRead$222(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMentionsAsRead$230(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markMessageContentAsRead$220(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$markReactionsAsRead$392(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$processUpdates$358(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$removeSuggestion$35(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$70(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$71(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$reportSpam$72(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$saveTheme$112(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public static /* synthetic */ void lambda$unregistedPush$298(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public void markSponsoredAsRead(long j, MessageObject messageObject) {
    }

    public static TLRPC$Peer getPeerFromInputPeer(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer.chat_id != 0) {
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = tLRPC$InputPeer.chat_id;
            return tLRPC$TL_peerChat;
        } else if (tLRPC$InputPeer.channel_id != 0) {
            TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
            tLRPC$TL_peerChannel.channel_id = tLRPC$InputPeer.channel_id;
            return tLRPC$TL_peerChannel;
        } else {
            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
            tLRPC$TL_peerUser.user_id = tLRPC$InputPeer.user_id;
            return tLRPC$TL_peerUser;
        }
    }

    public ChannelBoostsController getBoostsController() {
        ChannelBoostsController channelBoostsController = this.channelBoostsControler;
        if (channelBoostsController != null) {
            return channelBoostsController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            ChannelBoostsController channelBoostsController2 = this.channelBoostsControler;
            if (channelBoostsController2 != null) {
                return channelBoostsController2;
            }
            ChannelBoostsController channelBoostsController3 = new ChannelBoostsController(this.currentAccount);
            this.channelBoostsControler = channelBoostsController3;
            return channelBoostsController3;
        }
    }

    /* loaded from: classes3.dex */
    public class ChatlistUpdatesStat {
        long lastRequestTime;
        TL_chatlists$TL_chatlists_chatlistUpdates lastValue;
        boolean loading;

        public ChatlistUpdatesStat() {
            MessagesController.this = r1;
            this.loading = true;
        }

        public ChatlistUpdatesStat(TL_chatlists$TL_chatlists_chatlistUpdates tL_chatlists$TL_chatlists_chatlistUpdates) {
            MessagesController.this = r3;
            this.loading = false;
            this.lastRequestTime = System.currentTimeMillis();
            this.lastValue = tL_chatlists$TL_chatlists_chatlistUpdates;
        }
    }

    public /* synthetic */ void lambda$new$0() {
        getUserConfig().checkSavedPassword();
    }

    public ArrayList<DialogFilter> getDialogFilters() {
        ArrayList<DialogFilter> arrayList = this.frozenDialogFilters;
        return arrayList != null ? arrayList : this.dialogFilters;
    }

    /* loaded from: classes3.dex */
    public class 1 extends CacheFetcher<Integer, TLRPC$TL_help_appConfig> {
        @Override // org.telegram.messenger.CacheFetcher
        public boolean useCache(Integer num) {
            return false;
        }

        1() {
            MessagesController.this = r1;
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void getRemote(int i, Integer num, long j, final Utilities.Callback4<Boolean, TLRPC$TL_help_appConfig, Long, Boolean> callback4) {
            TLRPC$TL_help_getAppConfig tLRPC$TL_help_getAppConfig = new TLRPC$TL_help_getAppConfig();
            tLRPC$TL_help_getAppConfig.hash = (int) j;
            MessagesController.this.getConnectionsManager().sendRequest(tLRPC$TL_help_getAppConfig, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda0
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.1.lambda$getRemote$0(Utilities.Callback4.this, tLObject, tLRPC$TL_error);
                }
            });
        }

        public static /* synthetic */ void lambda$getRemote$0(Utilities.Callback4 callback4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            String str;
            int i;
            TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig;
            if (tLObject instanceof TLRPC$TL_help_appConfigNotModified) {
                Boolean bool = Boolean.TRUE;
                callback4.run(bool, null, 0L, bool);
            } else if (tLObject instanceof TLRPC$TL_help_appConfig) {
                callback4.run(Boolean.FALSE, (TLRPC$TL_help_appConfig) tLObject, Long.valueOf(tLRPC$TL_help_appConfig.hash), Boolean.TRUE);
            } else {
                StringBuilder sb = new StringBuilder();
                sb.append("getting appconfig error ");
                if (tLRPC$TL_error != null) {
                    str = tLRPC$TL_error.code + " " + tLRPC$TL_error.text;
                } else {
                    str = "";
                }
                sb.append(str);
                FileLog.e(sb.toString());
                callback4.run(Boolean.FALSE, null, 0L, Boolean.valueOf(tLRPC$TL_error == null || !((i = tLRPC$TL_error.code) == -2000 || i == -2001)));
            }
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void getLocal(final int i, Integer num, final Utilities.Callback2<Long, TLRPC$TL_help_appConfig> callback2) {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.1.lambda$getLocal$1(i, callback2);
                }
            });
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Removed duplicated region for block: B:72:0x006a  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public static /* synthetic */ void lambda$getLocal$1(int i, Utilities.Callback2 callback2) {
            SQLiteCursor sQLiteCursor;
            TLRPC$help_AppConfig tLRPC$help_AppConfig;
            TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig;
            NativeByteBuffer byteBufferValue;
            SQLiteCursor sQLiteCursor2 = null;
            try {
                try {
                    SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                    if (database != null) {
                        sQLiteCursor = database.queryFinalized("SELECT data FROM app_config", new Object[0]);
                        try {
                            if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                                tLRPC$help_AppConfig = null;
                            } else {
                                tLRPC$help_AppConfig = TLRPC$help_AppConfig.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), true);
                                byteBufferValue.reuse();
                            }
                            if (tLRPC$help_AppConfig instanceof TLRPC$TL_help_appConfig) {
                                callback2.run(Long.valueOf(tLRPC$TL_help_appConfig.hash), (TLRPC$TL_help_appConfig) tLRPC$help_AppConfig);
                            } else {
                                callback2.run(0L, null);
                            }
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e) {
                            e = e;
                            FileLog.e(e);
                            callback2.run(0L, null);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        }
                    }
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor2 = i;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void setLocal(final int i, Integer num, final TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig, long j) {
            MessagesStorage.getInstance(i).getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$1$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.1.lambda$setLocal$2(i, tLRPC$TL_help_appConfig);
                }
            });
        }

        public static /* synthetic */ void lambda$setLocal$2(int i, TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig) {
            try {
                SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                if (database != null) {
                    database.executeFast("DELETE FROM app_config").stepThis().dispose();
                    if (tLRPC$TL_help_appConfig != null) {
                        SQLitePreparedStatement executeFast = database.executeFast("INSERT INTO app_config VALUES(?)");
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_help_appConfig.getObjectSize());
                        tLRPC$TL_help_appConfig.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        executeFast.dispose();
                    }
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public boolean starsPurchaseAvailable() {
        return !this.starsLocked;
    }

    public boolean premiumFeaturesBlocked() {
        return this.premiumLocked && !getUserConfig().isPremium();
    }

    public boolean premiumPurchaseBlocked() {
        return this.premiumLocked;
    }

    public void getNextReactionMention(final long j, final long j2, final int i, final Consumer<Integer> consumer) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNextReactionMention$5(j2, j, consumer, i);
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:49:0x007e  */
    /* JADX WARN: Removed duplicated region for block: B:55:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getNextReactionMention$5(long j, long j2, final Consumer consumer, int i) {
        boolean z;
        SQLiteCursor queryFinalized;
        final int i2 = 0;
        try {
            if (j != 0) {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions_topics WHERE state = 1 AND dialog_id = %d AND topic_id = %d LIMIT 1", Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
            } else {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions WHERE state = 1 AND dialog_id = %d LIMIT 1", Long.valueOf(j2)), new Object[0]);
            }
            if (queryFinalized.next()) {
                i2 = queryFinalized.intValue(0);
                z = false;
            } else {
                z = true;
            }
            try {
                queryFinalized.dispose();
                if (i2 != 0) {
                    getMessagesStorage().markMessageReactionsAsRead(j2, j, i2, false);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda65
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.lambda$getNextReactionMention$1(Consumer.this, i2);
                        }
                    });
                }
            } catch (SQLiteException e) {
                e = e;
                e.printStackTrace();
                if (z) {
                }
            }
        } catch (SQLiteException e2) {
            e = e2;
            z = true;
        }
        if (z) {
            return;
        }
        TLRPC$TL_messages_getUnreadReactions tLRPC$TL_messages_getUnreadReactions = new TLRPC$TL_messages_getUnreadReactions();
        tLRPC$TL_messages_getUnreadReactions.peer = getMessagesController().getInputPeer(j2);
        tLRPC$TL_messages_getUnreadReactions.limit = 1;
        tLRPC$TL_messages_getUnreadReactions.add_offset = i - 1;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda66
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$getNextReactionMention$4(Consumer.this, tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$getNextReactionMention$1(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    public static /* synthetic */ void lambda$getNextReactionMention$4(final Consumer consumer, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda472
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$3(TLObject.this, tLRPC$TL_error, consumer);
            }
        });
    }

    public static /* synthetic */ void lambda$getNextReactionMention$3(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error, final Consumer consumer) {
        ArrayList<TLRPC$Message> arrayList;
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        final int i = 0;
        if (tLRPC$TL_error != null && tLRPC$messages_Messages != null && (arrayList = tLRPC$messages_Messages.messages) != null && !arrayList.isEmpty()) {
            i = tLRPC$messages_Messages.messages.get(0).id;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda78
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$getNextReactionMention$2(Consumer.this, i);
            }
        });
    }

    public static /* synthetic */ void lambda$getNextReactionMention$2(Consumer consumer, int i) {
        consumer.accept(Integer.valueOf(i));
    }

    public void updatePremium(boolean z) {
        if (this.dialogFilters.isEmpty()) {
            return;
        }
        if (!z) {
            if (!this.dialogFilters.get(0).isDefault()) {
                int i = 1;
                while (true) {
                    if (i >= this.dialogFilters.size()) {
                        break;
                    } else if (this.dialogFilters.get(i).isDefault()) {
                        this.dialogFilters.add(0, this.dialogFilters.remove(i));
                        break;
                    } else {
                        i++;
                    }
                }
            }
            lockFiltersInternal();
        } else {
            for (int i2 = 0; i2 < this.dialogFilters.size(); i2++) {
                this.dialogFilters.get(i2).locked = false;
            }
        }
        getMessagesStorage().saveDialogFiltersOrder();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getStoriesController().onPremiumChanged();
    }

    public void lockFiltersInternal() {
        boolean z;
        if (getUserConfig().isPremium() || this.dialogFilters.size() - 1 <= this.dialogFiltersLimitDefault) {
            z = false;
        } else {
            int size = (this.dialogFilters.size() - 1) - this.dialogFiltersLimitDefault;
            ArrayList arrayList = new ArrayList(this.dialogFilters);
            Collections.reverse(arrayList);
            z = false;
            for (int i = 0; i < arrayList.size(); i++) {
                if (i < size) {
                    if (!((DialogFilter) arrayList.get(i)).locked) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = true;
                } else {
                    if (((DialogFilter) arrayList.get(i)).locked) {
                        z = true;
                    }
                    ((DialogFilter) arrayList.get(i)).locked = false;
                }
            }
        }
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        }
    }

    public int getCaptionMaxLengthLimit() {
        return getUserConfig().isPremium() ? this.captionLengthLimitPremium : this.captionLengthLimitDefault;
    }

    public int getAboutLimit() {
        return getUserConfig().isPremium() ? this.aboutLengthLimitPremium : this.aboutLengthLimitDefault;
    }

    public int getMaxUserReactionsCount() {
        return getUserConfig().isPremium() ? this.reactionsUserMaxPremium : this.reactionsUserMaxDefault;
    }

    public int getChatReactionsCount() {
        if (getUserConfig().isPremium()) {
            return this.reactionsInChatMax;
        }
        return 1;
    }

    public int getChatMaxUniqReactions(long j) {
        TLRPC$ChatFull chatFull = getInstance(this.currentAccount).getChatFull(-j);
        if (chatFull != null && (!(chatFull instanceof TLRPC$TL_chatFull) ? (chatFull.flags2 & LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM) != 0 : (chatFull.flags & FileLoaderPriorityQueue.PRIORITY_VALUE_MAX) != 0)) {
            return chatFull.reactions_limit;
        }
        return this.reactionsUniqMax;
    }

    public boolean isPremiumUser(TLRPC$User tLRPC$User) {
        return !premiumFeaturesBlocked() && tLRPC$User.premium;
    }

    public boolean didPressTranscribeButtonEnough() {
        return this.transcribeButtonPressed >= 2;
    }

    public void pressTranscribeButton() {
        int i = this.transcribeButtonPressed;
        if (i < 2) {
            this.transcribeButtonPressed = i + 1;
            SharedPreferences sharedPreferences = this.mainPreferences;
            if (sharedPreferences != null) {
                sharedPreferences.edit().putInt("transcribeButtonPressed", this.transcribeButtonPressed).apply();
            }
        }
    }

    public ArrayList<TLRPC$TL_messages_stickerSet> filterPremiumStickers(ArrayList<TLRPC$TL_messages_stickerSet> arrayList) {
        if (premiumFeaturesBlocked()) {
            int i = 0;
            while (i < arrayList.size()) {
                TLRPC$TL_messages_stickerSet filterPremiumStickers = getInstance(this.currentAccount).filterPremiumStickers(arrayList.get(i));
                if (filterPremiumStickers == null) {
                    arrayList.remove(i);
                    i--;
                } else {
                    arrayList.set(i, filterPremiumStickers);
                }
                i++;
            }
            return arrayList;
        }
        return arrayList;
    }

    public TLRPC$TL_messages_stickerSet filterPremiumStickers(TLRPC$TL_messages_stickerSet tLRPC$TL_messages_stickerSet) {
        boolean z;
        if (!premiumFeaturesBlocked() || tLRPC$TL_messages_stickerSet == null) {
            return tLRPC$TL_messages_stickerSet;
        }
        int i = 0;
        int i2 = 0;
        while (true) {
            try {
                if (i2 >= tLRPC$TL_messages_stickerSet.documents.size()) {
                    z = false;
                    break;
                } else if (MessageObject.isPremiumSticker(tLRPC$TL_messages_stickerSet.documents.get(i2))) {
                    z = true;
                    break;
                } else {
                    i2++;
                }
            } catch (Exception e) {
                e = e;
            }
        }
        if (z) {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_stickerSet.getObjectSize());
            tLRPC$TL_messages_stickerSet.serializeToStream(nativeByteBuffer);
            nativeByteBuffer.position(0);
            TLRPC$TL_messages_stickerSet tLRPC$TL_messages_stickerSet2 = new TLRPC$TL_messages_stickerSet();
            nativeByteBuffer.readInt32(true);
            tLRPC$TL_messages_stickerSet2.readParams(nativeByteBuffer, true);
            nativeByteBuffer.reuse();
            while (i < tLRPC$TL_messages_stickerSet2.documents.size()) {
                try {
                    if (MessageObject.isPremiumSticker(tLRPC$TL_messages_stickerSet2.documents.get(i))) {
                        tLRPC$TL_messages_stickerSet2.documents.remove(i);
                        tLRPC$TL_messages_stickerSet2.packs.remove(i);
                        i--;
                        if (tLRPC$TL_messages_stickerSet2.documents.isEmpty()) {
                            return null;
                        }
                    }
                    i++;
                } catch (Exception e2) {
                    e = e2;
                    tLRPC$TL_messages_stickerSet = tLRPC$TL_messages_stickerSet2;
                    e.printStackTrace();
                    return tLRPC$TL_messages_stickerSet;
                }
            }
            return tLRPC$TL_messages_stickerSet2;
        }
        return tLRPC$TL_messages_stickerSet;
    }

    public TopicsController getTopicsController() {
        return this.topicsController;
    }

    public TranslateController getTranslateController() {
        return this.translateController;
    }

    public boolean isForum(long j) {
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        return chat != null && chat.forum;
    }

    public boolean isForum(MessageObject messageObject) {
        return messageObject != null && isForum(messageObject.getDialogId());
    }

    public boolean isForum(TLRPC$Message tLRPC$Message) {
        return tLRPC$Message != null && isForum(MessageObject.getDialogId(tLRPC$Message));
    }

    public void markAllTopicsAsRead(final long j) {
        getMessagesStorage().loadTopics(j, new j$.util.function.Consumer() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda17
            @Override // j$.util.function.Consumer
            public final void accept(Object obj) {
                MessagesController.this.lambda$markAllTopicsAsRead$9(j, (ArrayList) obj);
            }

            @Override // j$.util.function.Consumer
            public /* synthetic */ j$.util.function.Consumer andThen(j$.util.function.Consumer consumer) {
                return Consumer.-CC.$default$andThen(this, consumer);
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$9(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda161
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$8(arrayList, j);
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$8(ArrayList arrayList, long j) {
        if (arrayList != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_forumTopic tLRPC$TL_forumTopic = (TLRPC$TL_forumTopic) arrayList.get(i);
                MessagesController messagesController = getMessagesController();
                int i2 = tLRPC$TL_forumTopic.top_message;
                TLRPC$Message tLRPC$Message = tLRPC$TL_forumTopic.topMessage;
                messagesController.markDialogAsRead(j, i2, 0, tLRPC$Message != null ? tLRPC$Message.date : 0, false, tLRPC$TL_forumTopic.id, 0, true, 0);
                getMessagesStorage().updateRepliesMaxReadId(-j, tLRPC$TL_forumTopic.id, tLRPC$TL_forumTopic.top_message, 0, true);
            }
        }
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda247
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$7();
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$7() {
        getMessagesStorage().resetAllUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda471
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markAllTopicsAsRead$6();
            }
        });
    }

    public /* synthetic */ void lambda$markAllTopicsAsRead$6() {
        getMessagesController().sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public String getFullName(long j) {
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                return ContactsController.formatName(user.first_name, user.last_name);
            }
            return null;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        if (chat != null) {
            return chat.title;
        }
        return null;
    }

    public UserNameResolver getUserNameResolver() {
        if (this.userNameResolver == null) {
            this.userNameResolver = new UserNameResolver(this.currentAccount);
        }
        return this.userNameResolver;
    }

    /* loaded from: classes3.dex */
    public class SponsoredMessagesInfo {
        public long loadTime;
        public boolean loading;
        public ArrayList<MessageObject> messages;
        public Integer posts_between;

        public SponsoredMessagesInfo() {
            MessagesController.this = r1;
        }
    }

    /* loaded from: classes3.dex */
    public class SendAsPeersInfo {
        private long loadTime;
        private boolean loading;
        private TLRPC$TL_channels_sendAsPeers sendAsPeers;

        private SendAsPeersInfo() {
            MessagesController.this = r1;
        }

        /* synthetic */ SendAsPeersInfo(MessagesController messagesController, 1 r2) {
            this();
        }
    }

    /* loaded from: classes3.dex */
    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String str, String[] strArr, String str2) {
            this.title = str;
            this.path = strArr;
            this.url = str2;
        }

        public boolean equals(Object obj) {
            if (obj instanceof FaqSearchResult) {
                return this.title.equals(((FaqSearchResult) obj).title);
            }
            return false;
        }

        public String toString() {
            SerializedData serializedData = new SerializedData();
            serializedData.writeInt32(this.num);
            int i = 0;
            serializedData.writeInt32(0);
            serializedData.writeString(this.title);
            String[] strArr = this.path;
            serializedData.writeInt32(strArr != null ? strArr.length : 0);
            if (this.path != null) {
                while (true) {
                    String[] strArr2 = this.path;
                    if (i >= strArr2.length) {
                        break;
                    }
                    serializedData.writeString(strArr2[i]);
                    i++;
                }
            }
            serializedData.writeString(this.url);
            return Utilities.bytesToHex(serializedData.toByteArray());
        }
    }

    /* loaded from: classes3.dex */
    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long j, long j2, String str) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = Base64.decode(str, 8);
        }

        public EmojiSound(long j, long j2, byte[] bArr) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = bArr;
        }

        public boolean equals(Object obj) {
            if (obj instanceof EmojiSound) {
                EmojiSound emojiSound = (EmojiSound) obj;
                return this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference);
            }
            return false;
        }
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
        this.lastQuickReplyServerQueryTime.clear();
        this.lastSavedServerQueryTime.clear();
    }

    /* loaded from: classes3.dex */
    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int i, int i2) {
            this.frame = i;
            this.num = i2;
        }

        public boolean equals(Object obj) {
            if (obj instanceof DiceFrameSuccess) {
                DiceFrameSuccess diceFrameSuccess = (DiceFrameSuccess) obj;
                return this.frame == diceFrameSuccess.frame && this.num == diceFrameSuccess.num;
            }
            return false;
        }
    }

    /* loaded from: classes3.dex */
    public static class UserActionUpdatesSeq extends TLRPC$Updates {
        private UserActionUpdatesSeq() {
        }

        /* synthetic */ UserActionUpdatesSeq(1 r1) {
            this();
        }
    }

    /* loaded from: classes3.dex */
    public static class UserActionUpdatesPts extends TLRPC$Updates {
        private UserActionUpdatesPts() {
        }

        /* synthetic */ UserActionUpdatesPts(1 r1) {
            this();
        }
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
    }

    /* loaded from: classes3.dex */
    public static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }

        /* synthetic */ ReadTask(1 r1) {
            this();
        }
    }

    /* loaded from: classes3.dex */
    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public int color;
        public int flags;
        public int id;
        public int localId;
        public boolean locked;
        public String name;
        public int order;
        public volatile int pendingUnreadCount;
        public int unreadCount;
        public ArrayList<Long> alwaysShow = new ArrayList<>();
        public ArrayList<Long> neverShow = new ArrayList<>();
        public LongSparseIntArray pinnedDialogs = new LongSparseIntArray();
        public ArrayList<TLRPC$Dialog> dialogs = new ArrayList<>();
        public ArrayList<TLRPC$Dialog> dialogsForward = new ArrayList<>();
        public ArrayList<TL_chatlists$TL_exportedChatlistInvite> invites = null;

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean includesDialog(AccountInstance accountInstance, long j) {
            TLRPC$Dialog tLRPC$Dialog = accountInstance.getMessagesController().dialogs_dict.get(j);
            if (tLRPC$Dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, j, tLRPC$Dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, long j, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$Chat chat;
            if (this.neverShow.contains(Long.valueOf(j))) {
                return false;
            }
            if (this.alwaysShow.contains(Long.valueOf(j))) {
                return true;
            }
            if (tLRPC$Dialog.folder_id == 0 || (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) == 0) {
                MessagesController messagesController = accountInstance.getMessagesController();
                ContactsController contactsController = accountInstance.getContactsController();
                if (!((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(tLRPC$Dialog.id, 0L) && tLRPC$Dialog.unread_mentions_count == 0) && ((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) == 0 || messagesController.getDialogUnreadCount(tLRPC$Dialog) != 0 || tLRPC$Dialog.unread_mark || tLRPC$Dialog.unread_mentions_count != 0)) {
                    if (j > 0) {
                        TLRPC$User user = messagesController.getUser(Long.valueOf(j));
                        if (user != null) {
                            if (!user.bot) {
                                if (user.self || user.contact || contactsController.isContact(j)) {
                                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                                        return true;
                                    }
                                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                                    return true;
                                }
                            } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                                return true;
                            }
                        }
                    } else if (j < 0 && (chat = messagesController.getChat(Long.valueOf(-j))) != null) {
                        if (ChatObject.isChannel(chat) && !chat.megagroup) {
                            if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                                return true;
                            }
                        } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                            return true;
                        }
                    }
                    return false;
                }
                return false;
            }
            return false;
        }

        public boolean alwaysShow(int i, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$EncryptedChat encryptedChat;
            if (tLRPC$Dialog == null) {
                return false;
            }
            long j = tLRPC$Dialog.id;
            if (DialogObject.isEncryptedDialog(j) && (encryptedChat = MessagesController.getInstance(i).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                j = encryptedChat.user_id;
            }
            return this.alwaysShow.contains(Long.valueOf(j));
        }

        public boolean isDefault() {
            return this.id == 0;
        }

        public boolean isChatlist() {
            return (this.flags & MessagesController.DIALOG_FILTER_FLAG_CHATLIST) > 0;
        }

        public boolean isMyChatlist() {
            return isChatlist() && (this.flags & MessagesController.DIALOG_FILTER_FLAG_CHATLIST_ADMIN) > 0;
        }
    }

    public /* synthetic */ int lambda$new$10(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        DialogFilter dialogFilter = this.sortingDialogFilter;
        int i = dialogFilter == null ? Integer.MIN_VALUE : dialogFilter.pinnedDialogs.get(tLRPC$Dialog.id, Integer.MIN_VALUE);
        DialogFilter dialogFilter2 = this.sortingDialogFilter;
        int i2 = dialogFilter2 == null ? Integer.MIN_VALUE : dialogFilter2.pinnedDialogs.get(tLRPC$Dialog2.id, Integer.MIN_VALUE);
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (!z || (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            if (z || !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                if (i != Integer.MIN_VALUE || i2 == Integer.MIN_VALUE) {
                    if (i == Integer.MIN_VALUE || i2 != Integer.MIN_VALUE) {
                        if (i != Integer.MIN_VALUE) {
                            if (i > i2) {
                                return 1;
                            }
                            return i < i2 ? -1 : 0;
                        }
                        MediaDataController mediaDataController = getMediaDataController();
                        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0L));
                        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0L));
                        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                            return 1;
                        }
                        return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
                    }
                    return -1;
                }
                return 1;
            }
            return 1;
        }
        return -1;
    }

    public void sortDialogsList(ArrayList<TLRPC$Dialog> arrayList) {
        if (arrayList == null) {
            return;
        }
        Collections.sort(arrayList, this.dialogComparator);
    }

    public /* synthetic */ int lambda$new$11(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (!z || (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            if (z || !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                boolean z2 = tLRPC$Dialog.pinned;
                if (z2 || !tLRPC$Dialog2.pinned) {
                    if (!z2 || tLRPC$Dialog2.pinned) {
                        if (z2) {
                            int i = tLRPC$Dialog.pinnedNum;
                            int i2 = tLRPC$Dialog2.pinnedNum;
                            if (i < i2) {
                                return 1;
                            }
                            return i > i2 ? -1 : 0;
                        }
                        MediaDataController mediaDataController = getMediaDataController();
                        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0L));
                        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0L));
                        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                            return 1;
                        }
                        return lastMessageOrDraftDate > lastMessageOrDraftDate2 ? -1 : 0;
                    }
                    return -1;
                }
                return 1;
            }
            return 1;
        }
        return -1;
    }

    public /* synthetic */ int lambda$new$12(TLRPC$Update tLRPC$Update, TLRPC$Update tLRPC$Update2) {
        int updateType = getUpdateType(tLRPC$Update);
        int updateType2 = getUpdateType(tLRPC$Update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType == 0) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        if (updateType == 1) {
            return AndroidUtilities.compare(getUpdateQts(tLRPC$Update), getUpdateQts(tLRPC$Update2));
        }
        if (updateType == 2) {
            long updateChannelId = getUpdateChannelId(tLRPC$Update);
            long updateChannelId2 = getUpdateChannelId(tLRPC$Update2);
            if (updateChannelId == updateChannelId2) {
                return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
            }
            return AndroidUtilities.compare(updateChannelId, updateChannelId2);
        }
        return 0;
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (lockObjects[i]) {
                messagesController = Instance[i];
                if (messagesController == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController2 = new MessagesController(i);
                    messagesControllerArr[i] = messagesController2;
                    messagesController = messagesController2;
                }
            }
        }
        return messagesController;
    }

    public SharedPreferences getMainSettings() {
        return this.mainPreferences;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int i) {
        super(i);
        this.chats = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
        this.users = new ConcurrentHashMap<>(100, 1.0f, 3);
        this.objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.activeVoiceChatsMap = new HashMap<>();
        this.joiningToChannels = new ArrayList<>();
        this.exportedChats = new LongSparseArray<>();
        this.hintDialogs = new ArrayList<>();
        this.dialogsByFolder = new SparseArray<>();
        this.allDialogs = new ArrayList<>();
        this.dialogsForward = new ArrayList<>();
        this.dialogsServerOnly = new ArrayList<>();
        this.dialogsCanAddUsers = new ArrayList<>();
        this.dialogsMyChannels = new ArrayList<>();
        this.dialogsMyGroups = new ArrayList<>();
        this.dialogsChannelsOnly = new ArrayList<>();
        this.dialogsUsersOnly = new ArrayList<>();
        this.dialogsForBlock = new ArrayList<>();
        this.dialogsGroupsOnly = new ArrayList<>();
        this.selectedDialogFilter = new DialogFilter[2];
        this.dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
        this.dialogs_dict = new LongSparseArray<>();
        this.dialogMessage = new LongSparseArray<>();
        this.dialogMessagesByRandomIds = new LongSparseArray<>();
        this.deletedHistory = new LongSparseIntArray();
        this.dialogMessagesByIds = new SparseArray<>();
        this.printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
        this.printingStrings = new LongSparseArray<>();
        this.printingStringsTypes = new LongSparseArray<>();
        this.sendingTypings = new LongSparseArray[12];
        this.onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
        this.pendingUnreadCounter = new LongSparseIntArray();
        this.chatlistFoldersUpdates = new SparseArray<>();
        this.largeQueueMaxActiveOperations = 2;
        this.smallQueueMaxActiveOperations = 5;
        this.storiesChangelogUserId = 777000L;
        this.giveawayAddPeersMax = 10L;
        this.giveawayPeriodMax = 7L;
        this.giveawayCountriesMax = 10L;
        this.giveawayBoostsPerPremium = 4L;
        this.boostsPerSentGift = 3L;
        this.loadingPeerSettings = new LongSparseArray<>();
        this.createdDialogIds = new ArrayList<>();
        this.createdScheduledDialogIds = new ArrayList<>();
        this.createdDialogMainThreadIds = new ArrayList<>();
        this.visibleDialogMainThreadIds = new ArrayList<>();
        this.visibleScheduledDialogMainThreadIds = new ArrayList<>();
        this.shortPollChannels = new LongSparseIntArray();
        this.needShortPollChannels = new LongSparseArray<>();
        this.shortPollOnlines = new LongSparseIntArray();
        this.needShortPollOnlines = new LongSparseArray<>();
        this.deletingDialogs = new LongSparseArray<>();
        this.clearingHistoryDialogs = new LongSparseArray<>();
        this.loadingBlockedPeers = false;
        this.blockePeers = new LongSparseIntArray();
        this.totalBlockedCount = -1;
        this.channelViewsToSend = new LongSparseArray<>();
        this.pollsToCheck = new LongSparseArray<>();
        this.premiumFeaturesTypesToPosition = new SparseIntArray();
        this.businessFeaturesTypesToPosition = new SparseIntArray();
        this.dialogFilters = new ArrayList<>();
        this.frozenDialogFilters = null;
        this.hiddenUndoChats = new ArrayList<>();
        this.dialogFiltersById = new SparseArray<>();
        this.suggestedFilters = new ArrayList<>();
        this.updatesQueueChannels = new LongSparseArray<>();
        this.updatesStartWaitTimeChannels = new LongSparseLongArray();
        this.channelsPts = new LongSparseIntArray();
        this.gettingDifferenceChannels = new LongSparseArray<>();
        this.gettingChatInviters = new LongSparseArray<>();
        this.gettingUnknownChannels = new LongSparseArray<>();
        this.gettingUnknownDialogs = new LongSparseArray<>();
        this.checkingLastMessagesDialogs = new LongSparseArray<>();
        this.updatesQueueSeq = new ArrayList<>();
        this.updatesQueuePts = new ArrayList<>();
        this.updatesQueueQts = new ArrayList<>();
        this.fullUsers = new LongSparseArray<>();
        this.fullChats = new LongSparseArray<>();
        this.groupCalls = new LongSparseArray<>();
        this.groupCallsByChatId = new LongSparseArray<>();
        this.loadingFullUsers = new HashSet<>();
        this.loadedFullUsers = new LongSparseLongArray();
        this.loadingFullChats = new HashSet<>();
        this.loadingGroupCalls = new HashSet<>();
        this.loadingFullParticipants = new HashSet<>();
        this.loadedFullParticipants = new HashSet<>();
        this.loadedFullChats = new LongSparseLongArray();
        this.channelAdmins = new LongSparseArray<>();
        this.loadingChannelAdmins = new LongSparseIntArray();
        this.migratedChats = new SparseIntArray();
        this.sponsoredMessages = new LongSparseArray<>();
        this.sendAsPeers = new LongSparseArray<>();
        this.reloadingWebpages = new HashMap<>();
        this.reloadingWebpagesPending = new LongSparseArray<>();
        this.reloadingScheduledWebpages = new HashMap<>();
        this.reloadingScheduledWebpagesPending = new LongSparseArray<>();
        this.reloadingSavedWebpages = new HashMap<>();
        this.reloadingSavedWebpagesPending = new LongSparseArray<>();
        this.lastScheduledServerQueryTime = new LongSparseArray<>();
        this.lastQuickReplyServerQueryTime = new LongSparseArray<>();
        this.lastSavedServerQueryTime = new LongSparseArray<>();
        this.lastServerQueryTime = new LongSparseArray<>();
        this.reloadingMessages = new LongSparseArray<>();
        this.readTasks = new ArrayList<>();
        this.readTasksMap = new LongSparseArray<>();
        this.repliesReadTasks = new ArrayList<>();
        this.threadsReadTasksMap = new HashMap<>();
        this.nextDialogsCacheOffset = new SparseIntArray();
        this.loadingDialogs = new SparseBooleanArray();
        this.dialogsEndReached = new SparseBooleanArray();
        this.serverDialogsEndReached = new SparseBooleanArray();
        this.getDifferenceFirstSync = true;
        this.loadingPinnedDialogs = new SparseIntArray();
        this.faqSearchArray = new ArrayList<>();
        this.suggestContacts = true;
        this.themeCheckRunnable = new MessagesController$$ExternalSyntheticLambda446();
        this.passwordCheckRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda449
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$0();
            }
        };
        this.uploadingThemes = new HashMap<>();
        this.appConfigFetcher = new 1();
        this.maxBroadcastCount = 100;
        this.minGroupConvertSize = 200;
        this.gifSearchEmojies = new ArrayList<>();
        this.diceSuccess = new HashMap<>();
        this.emojiSounds = new HashMap<>();
        this.emojiInteractions = new HashMap<>();
        this.showAnnualPerMonth = false;
        this.directPaymentsCurrency = new ArrayList();
        this.emojiStatusUntilValues = new LongSparseArray<>();
        this.photoSuggestion = new SparseArray<>();
        this.dialogDateComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda450
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$10;
                lambda$new$10 = MessagesController.this.lambda$new$10((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
                return lambda$new$10;
            }
        };
        this.dialogComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda451
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$11;
                lambda$new$11 = MessagesController.this.lambda$new$11((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
                return lambda$new$11;
            }
        };
        this.updatesComparator = new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda452
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$new$12;
                lambda$new$12 = MessagesController.this.lambda$new$12((TLRPC$Update) obj, (TLRPC$Update) obj2);
                return lambda$new$12;
            }
        };
        this.loadAppConfigRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda453
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.loadAppConfig();
            }
        };
        this.notifyTranscriptionAudioCooldownUpdate = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda454
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$34();
            }
        };
        this.peerDialogsRequested = new LongSparseArray<>();
        this.peerDialogRequestTimeout = 240000L;
        this.dialogPhotos = new LongSparseArray<>();
        this.DIALOGS_LOAD_TYPE_CACHE = 1;
        this.DIALOGS_LOAD_TYPE_CHANNEL = 2;
        this.DIALOGS_LOAD_TYPE_UNKNOWN = 3;
        this.sensitiveAgreed = new HashSet<>();
        this.cachedIsUserPremiumBlocked = new LongSparseArray<>();
        this.loadingIsUserPremiumBlocked = new HashSet<>();
        this.requestIsUserPremiumBlockedRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda455
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.requestIsUserPremiumBlocked();
            }
        };
        this.effectsFetcher = new 4();
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda456
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$13();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        System.currentTimeMillis();
        this.remoteConfigLoaded = this.mainPreferences.getBoolean("remoteConfigLoaded", false);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.updateCheckDelay = this.mainPreferences.getInt("updateCheckDelay", 86400);
        this.maxFolderPinnedDialogsCountDefault = this.mainPreferences.getInt("maxFolderPinnedDialogsCountDefault", 100);
        this.maxFolderPinnedDialogsCountPremium = this.mainPreferences.getInt("maxFolderPinnedDialogsCountPremium", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", LiteMode.FLAG_ANIMATED_EMOJI_CHAT_NOT_PREMIUM);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", null);
        this.installReferer = this.mainPreferences.getString("installReferer", null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", ConnectionsManager.DEFAULT_DATACENTER_ID);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", ConnectionsManager.DEFAULT_DATACENTER_ID);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0L);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", null);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.storyVenueSearchBot = this.mainPreferences.getString("storyVenueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", true);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.getfileExperimentalParams = this.mainPreferences.getBoolean("getfileExperimentalParams", false);
        this.smsjobsStickyNotificationEnabled = this.mainPreferences.getBoolean("smsjobsStickyNotificationEnabled", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        this.groupCallVideoMaxParticipants = this.mainPreferences.getInt("groipCallVideoMaxParticipants", 30);
        this.chatReadMarkSizeThreshold = this.mainPreferences.getInt("chatReadMarkSizeThreshold", 100);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.ringtoneDurationMax = this.mainPreferences.getInt("ringtoneDurationMax", 5);
        this.ringtoneSizeMax = this.mainPreferences.getInt("ringtoneSizeMax", 102400);
        this.pmReadDateExpirePeriod = this.mainPreferences.getInt("pmReadDateExpirePeriod", 604800);
        this.suggestStickersApiOnly = this.mainPreferences.getBoolean("suggestStickersApiOnly", false);
        this.roundVideoSize = this.mainPreferences.getInt("roundVideoSize", 384);
        this.roundVideoBitrate = this.mainPreferences.getInt("roundVideoBitrate", 1000);
        this.roundAudioBitrate = this.mainPreferences.getInt("roundAudioBitrate", 64);
        this.pendingSuggestions = this.mainPreferences.getStringSet("pendingSuggestions", null);
        this.dismissedSuggestions = this.mainPreferences.getStringSet("dismissedSuggestions", null);
        int i2 = this.mainPreferences.getInt("channelsLimitDefault", 500);
        this.channelsLimitDefault = i2;
        this.channelsLimitPremium = this.mainPreferences.getInt("channelsLimitPremium", i2 * 2);
        this.savedGifsLimitDefault = this.mainPreferences.getInt("savedGifsLimitDefault", 200);
        this.savedGifsLimitPremium = this.mainPreferences.getInt("savedGifsLimitPremium", 400);
        this.stickersFavedLimitDefault = this.mainPreferences.getInt("stickersFavedLimitDefault", 5);
        this.stickersFavedLimitPremium = this.mainPreferences.getInt("stickersFavedLimitPremium", 200);
        this.maxPinnedDialogsCountDefault = this.mainPreferences.getInt("maxPinnedDialogsCountDefault", 5);
        this.maxPinnedDialogsCountPremium = this.mainPreferences.getInt("maxPinnedDialogsCountPremium", 5);
        this.maxPinnedDialogsCountDefault = this.mainPreferences.getInt("maxPinnedDialogsCountDefault", 5);
        this.maxPinnedDialogsCountPremium = this.mainPreferences.getInt("maxPinnedDialogsCountPremium", 5);
        this.dialogFiltersLimitDefault = this.mainPreferences.getInt("dialogFiltersLimitDefault", 10);
        this.dialogFiltersLimitPremium = this.mainPreferences.getInt("dialogFiltersLimitPremium", 20);
        this.dialogFiltersChatsLimitDefault = this.mainPreferences.getInt("dialogFiltersChatsLimitDefault", 100);
        this.dialogFiltersChatsLimitPremium = this.mainPreferences.getInt("dialogFiltersChatsLimitPremium", 200);
        this.dialogFiltersPinnedLimitDefault = this.mainPreferences.getInt("dialogFiltersPinnedLimitDefault", 5);
        this.dialogFiltersPinnedLimitPremium = this.mainPreferences.getInt("dialogFiltersPinnedLimitPremium", 10);
        this.publicLinksLimitDefault = this.mainPreferences.getInt("publicLinksLimitDefault", 10);
        this.publicLinksLimitPremium = this.mainPreferences.getInt("publicLinksLimitPremium", 20);
        this.captionLengthLimitDefault = this.mainPreferences.getInt("captionLengthLimitDefault", 1024);
        this.captionLengthLimitPremium = this.mainPreferences.getInt("captionLengthLimitPremium", LiteMode.FLAG_ANIMATED_EMOJI_CHAT_NOT_PREMIUM);
        this.storyCaptionLengthLimitDefault = this.mainPreferences.getInt("storyCaptionLengthLimit", 200);
        this.storyCaptionLengthLimitPremium = this.mainPreferences.getInt("storyCaptionLengthLimitPremium", 2048);
        this.aboutLengthLimitDefault = this.mainPreferences.getInt("aboutLengthLimitDefault", 70);
        this.aboutLengthLimitPremium = this.mainPreferences.getInt("aboutLengthLimitPremium", 140);
        this.reactionsUserMaxDefault = this.mainPreferences.getInt("reactionsUserMaxDefault", 1);
        this.reactionsUserMaxPremium = this.mainPreferences.getInt("reactionsUserMaxPremium", 3);
        this.reactionsInChatMax = this.mainPreferences.getInt("reactionsInChatMax", 3);
        int i3 = this.mainPreferences.getInt("uploadMaxFileParts", 4000);
        this.uploadMaxFileParts = i3;
        this.uploadMaxFilePartsPremium = this.mainPreferences.getInt("uploadMaxFilePartsPremium", i3 * 2);
        this.premiumInvoiceSlug = this.mainPreferences.getString("premiumInvoiceSlug", null);
        this.premiumBotUsername = this.mainPreferences.getString("premiumBotUsername", null);
        this.premiumLocked = this.mainPreferences.getBoolean("premiumLocked", false);
        this.starsLocked = this.mainPreferences.getBoolean("starsLocked", true);
        this.transcribeButtonPressed = this.mainPreferences.getInt("transcribeButtonPressed", 0);
        this.forumUpgradeParticipantsMin = this.mainPreferences.getInt("forumUpgradeParticipantsMin", 200);
        this.topicsPinnedLimit = this.mainPreferences.getInt("topicsPinnedLimit", 3);
        this.telegramAntispamUserId = this.mainPreferences.getLong("telegramAntispamUserId", -1L);
        this.telegramAntispamGroupSizeMin = this.mainPreferences.getInt("telegramAntispamGroupSizeMin", 100);
        this.hiddenMembersGroupSizeMin = this.mainPreferences.getInt("hiddenMembersGroupSizeMin", 100);
        this.chatlistUpdatePeriod = this.mainPreferences.getInt("chatlistUpdatePeriod", 3600);
        this.uploadMarkupVideo = this.mainPreferences.getBoolean("uploadMarkupVideo", true);
        this.giftAttachMenuIcon = this.mainPreferences.getBoolean("giftAttachMenuIcon", false);
        this.giftTextFieldIcon = this.mainPreferences.getBoolean("giftTextFieldIcon", false);
        this.checkResetLangpack = this.mainPreferences.getInt("checkResetLangpack", 0);
        this.smallQueueMaxActiveOperations = this.mainPreferences.getInt("smallQueueMaxActiveOperations", 5);
        this.largeQueueMaxActiveOperations = this.mainPreferences.getInt("largeQueueMaxActiveOperations", 2);
        this.stealthModeFuture = this.mainPreferences.getInt("stories_stealth_future_period", 1500);
        this.storiesChangelogUserId = this.mainPreferences.getLong("stories_changelog_user_id", 777000L);
        this.giveawayAddPeersMax = this.mainPreferences.getLong("giveaway_add_peers_max", 10L);
        this.giveawayCountriesMax = this.mainPreferences.getLong("giveaway_countries_max", 10L);
        this.giveawayBoostsPerPremium = this.mainPreferences.getLong("giveaway_boosts_per_premium", 4L);
        this.boostsPerSentGift = this.mainPreferences.getLong("boosts_per_sent_gift", 3L);
        this.giveawayPeriodMax = this.mainPreferences.getLong("giveaway_period_max", 7L);
        this.stealthModePast = this.mainPreferences.getInt("stories_stealth_past_period", 300);
        this.stealthModeCooldown = this.mainPreferences.getInt("stories_stealth_cooldown_period", 3600);
        boolean z = ConnectionsManager.native_isTestBackend(this.currentAccount) != 0;
        this.chatlistInvitesLimitDefault = this.mainPreferences.getInt("chatlistInvitesLimitDefault", 3);
        this.storyExpiringLimitDefault = this.mainPreferences.getInt("storyExpiringLimitDefault", 50);
        this.storyExpiringLimitPremium = this.mainPreferences.getInt("storyExpiringLimitPremium", 100);
        this.storiesSentWeeklyLimitDefault = this.mainPreferences.getInt("storiesSentWeeklyLimitDefault", 7);
        this.storiesSuggestedReactionsLimitDefault = this.mainPreferences.getInt("storiesSuggestedReactionsLimitDefault", 1);
        this.storiesSuggestedReactionsLimitPremium = this.mainPreferences.getInt("storiesSuggestedReactionsLimitPremium", 5);
        this.storiesSentWeeklyLimitPremium = this.mainPreferences.getInt("storiesSentWeeklyLimitPremium", 70);
        this.storiesSentMonthlyLimitDefault = this.mainPreferences.getInt("storiesSentMonthlyLimitDefault", 30);
        this.storiesSentMonthlyLimitPremium = this.mainPreferences.getInt("storiesSentMonthlyLimitPremium", 300);
        this.channelBgIconLevelMin = this.mainPreferences.getInt("channelBgIconLevelMin", 1);
        this.channelProfileIconLevelMin = this.mainPreferences.getInt("channelProfileIconLevelMin", 1);
        this.channelEmojiStatusLevelMin = this.mainPreferences.getInt("channelEmojiStatusLevelMin", 1);
        this.groupProfileBgIconLevelMin = this.mainPreferences.getInt("groupProfileBgIconLevelMin", 1);
        this.groupEmojiStatusLevelMin = this.mainPreferences.getInt("groupEmojiStatusLevelMin", 1);
        this.groupEmojiStickersLevelMin = this.mainPreferences.getInt("groupEmojiStickersLevelMin", 1);
        this.groupWallpaperLevelMin = this.mainPreferences.getInt("groupWallpaperLevelMin", 1);
        this.groupCustomWallpaperLevelMin = this.mainPreferences.getInt("groupCustomWallpaperLevelMin", 1);
        this.groupTranscribeLevelMin = this.mainPreferences.getInt("groupTranscribeLevelMin", 1);
        this.quickRepliesLimit = this.mainPreferences.getInt("quickRepliesLimit", 10);
        this.quickReplyMessagesLimit = this.mainPreferences.getInt("quickReplyMessagesLimit", 20);
        this.channelWallpaperLevelMin = this.mainPreferences.getInt("channelWallpaperLevelMin", 1);
        this.channelCustomWallpaperLevelMin = this.mainPreferences.getInt("channelCustomWallpaperLevelMin", 1);
        this.chatlistInvitesLimitPremium = this.mainPreferences.getInt("chatlistInvitesLimitPremium", z ? 5 : 20);
        this.chatlistJoinedLimitDefault = this.mainPreferences.getInt("chatlistJoinedLimitDefault", 2);
        this.chatlistJoinedLimitPremium = this.mainPreferences.getInt("chatlistJoinedLimitPremium", z ? 5 : 20);
        this.storiesPosting = this.mainPreferences.getString("storiesPosting", "enabled");
        this.storiesEntities = this.mainPreferences.getString("storiesEntities", "premium");
        this.storiesExportNopublicLink = this.mainPreferences.getBoolean("storiesExportNopublicLink", false);
        this.authorizationAutoconfirmPeriod = this.mainPreferences.getInt("authorization_autoconfirm_period", 604800);
        this.quoteLengthMax = this.mainPreferences.getInt("quoteLengthMax", 1024);
        this.giveawayGiftsPurchaseAvailable = this.mainPreferences.getBoolean("giveawayGiftsPurchaseAvailable", false);
        this.peerColors = PeerColors.fromString(0, this.mainPreferences.getString("peerColors", ""));
        this.profilePeerColors = PeerColors.fromString(1, this.mainPreferences.getString("profilePeerColors", ""));
        int i4 = this.mainPreferences.getInt("transcribeAudioTrialWeeklyNumber", BuildVars.DEBUG_PRIVATE_VERSION ? 2 : 0);
        this.transcribeAudioTrialWeeklyNumber = i4;
        this.transcribeAudioTrialCurrentNumber = this.mainPreferences.getInt("transcribeAudioTrialCurrentNumber", i4);
        this.transcribeAudioTrialDurationMax = this.mainPreferences.getInt("transcribeAudioTrialDurationMax", 300);
        this.transcribeAudioTrialCooldownUntil = this.mainPreferences.getInt("transcribeAudioTrialCooldownUntil", 0);
        this.recommendedChannelsLimitDefault = this.mainPreferences.getInt("recommendedChannelsLimitDefault", 10);
        this.recommendedChannelsLimitPremium = this.mainPreferences.getInt("recommendedChannelsLimitPremium", 100);
        this.boostsChannelLevelMax = this.mainPreferences.getInt("boostsChannelLevelMax", 100);
        this.channelRestrictSponsoredLevelMin = this.mainPreferences.getInt("channelRestrictSponsoredLevelMin", 30);
        this.savedDialogsPinnedLimitDefault = this.mainPreferences.getInt("savedDialogsPinnedLimitDefault", 4);
        this.savedDialogsPinnedLimitPremium = this.mainPreferences.getInt("savedDialogsPinnedLimitPremium", 6);
        this.storyQualityFull = this.mainPreferences.getBoolean("storyQualityFull", true);
        this.savedViewAsChats = this.mainPreferences.getBoolean("savedViewAsChats", false);
        this.folderTags = this.mainPreferences.getBoolean("folderTags", false);
        this.uploadPremiumSpeedupUpload = this.mainPreferences.getFloat("uploadPremiumSpeedupUpload", 10.0f);
        this.uploadPremiumSpeedupDownload = this.mainPreferences.getFloat("uploadPremiumSpeedupDownload", 10.0f);
        this.uploadPremiumSpeedupNotifyPeriod = this.mainPreferences.getInt("uploadPremiumSpeedupNotifyPeriod2", 3600);
        this.introTitleLengthLimit = this.mainPreferences.getInt("introTitleLengthLimit", 32);
        this.introDescriptionLengthLimit = this.mainPreferences.getInt("introDescriptionLengthLimit", 72);
        this.businessChatLinksLimit = this.mainPreferences.getInt("businessChatLinksLimit", 100);
        this.channelRevenueWithdrawalEnabled = this.mainPreferences.getBoolean("channelRevenueWithdrawalEnabled", false);
        this.newNoncontactPeersRequirePremiumWithoutOwnpremium = this.mainPreferences.getBoolean("newNoncontactPeersRequirePremiumWithoutOwnpremium", false);
        this.reactionsUniqMax = this.mainPreferences.getInt("reactionsUniqMax", 11);
        this.premiumManageSubscriptionUrl = this.mainPreferences.getString("premiumManageSubscriptionUrl", ApplicationLoader.isStandaloneBuild() ? "https://t.me/premiumbot?start=status" : "https://play.google.com/store/account/subscriptions?sku=telegram_premium&package=org.telegram.messenger");
        this.androidDisableRoundCamera2 = this.mainPreferences.getBoolean("androidDisableRoundCamera2", true);
        this.storiesPinnedToTopCountMax = this.mainPreferences.getInt("storiesPinnedToTopCountMax", 3);
        this.showAnnualPerMonth = this.mainPreferences.getBoolean("showAnnualPerMonth", false);
        this.canEditFactcheck = this.mainPreferences.getBoolean("canEditFactcheck", false);
        this.factcheckLengthLimit = this.mainPreferences.getInt("factcheckLengthLimit", 1024);
        this.starsRevenueWithdrawalMin = this.mainPreferences.getLong("starsRevenueWithdrawalMin", 1000L);
        this.starsPaidPostAmountMax = this.mainPreferences.getLong("starsPaidPostAmountMax", 10000L);
        this.botPreviewMediasMax = this.mainPreferences.getInt("botPreviewMediasMax", 10);
        this.webAppAllowedProtocols = this.mainPreferences.getStringSet("webAppAllowedProtocols", new HashSet(Arrays.asList("http", "https")));
        this.ignoreRestrictionReasons = this.mainPreferences.getStringSet("ignoreRestrictionReasons", new HashSet(Arrays.asList(new String[0])));
        this.tonProxyAddress = this.mainPreferences.getString("tonProxyAddress", "magic.org");
        this.weatherSearchUsername = this.mainPreferences.getString("weatherSearchUsername", "izweatherbot");
        this.storyWeatherPreload = this.mainPreferences.getBoolean("storyWeatherPreload", true);
        this.starsGiftsEnabled = this.mainPreferences.getBoolean("starsGiftsEnabled", true);
        this.starsPaidReactionAmountMax = this.mainPreferences.getLong("starsPaidReactionAmountMax", 10000L);
        this.starsSubscriptionAmountMax = this.mainPreferences.getLong("starsSubscriptionAmountMax", 2500L);
        this.starsUsdSellRate1000 = this.mainPreferences.getFloat("starsUsdSellRate1000", 2000.0f);
        this.starsUsdWithdrawRate1000 = this.mainPreferences.getFloat("starsUsdWithdrawRate1000", 1200.0f);
        scheduleTranscriptionUpdate();
        BuildVars.GOOGLE_AUTH_CLIENT_ID = this.mainPreferences.getString("googleAuthClientId", BuildVars.GOOGLE_AUTH_CLIENT_ID);
        if (this.mainPreferences.contains("dcDomainName2")) {
            this.dcDomainName = this.mainPreferences.getString("dcDomainName2", "apv3.stel.com");
        } else {
            this.dcDomainName = z ? "tapv3.stel.com" : "apv3.stel.com";
        }
        if (this.mainPreferences.contains("webFileDatacenterId")) {
            this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", 4);
        } else {
            this.webFileDatacenterId = z ? 2 : 4;
        }
        Set<String> stringSet = this.mainPreferences.getStringSet("directPaymentsCurrency", null);
        if (stringSet != null) {
            this.directPaymentsCurrency.clear();
            this.directPaymentsCurrency.addAll(stringSet);
        }
        loadPremiumFeaturesPreviewOrder(this.premiumFeaturesTypesToPosition, this.mainPreferences.getString("premiumFeaturesTypesToPosition", null));
        loadPremiumFeaturesPreviewOrder(this.businessFeaturesTypesToPosition, this.mainPreferences.getString("businessFeaturesTypesToPosition", null));
        if (this.pendingSuggestions != null) {
            this.pendingSuggestions = new HashSet(this.pendingSuggestions);
        } else {
            this.pendingSuggestions = new HashSet();
        }
        if (this.dismissedSuggestions != null) {
            this.dismissedSuggestions = new HashSet(this.dismissedSuggestions);
        } else {
            this.dismissedSuggestions = new HashSet();
        }
        Set<String> stringSet2 = this.mainPreferences.getStringSet("exportUri2", null);
        this.exportUri = stringSet2;
        if (stringSet2 != null) {
            this.exportUri = new HashSet(this.exportUri);
        } else {
            HashSet hashSet = new HashSet();
            this.exportUri = hashSet;
            hashSet.add("content://(\\d+@)?com\\.whatsapp\\.provider\\.media/export_chat/");
            this.exportUri.add("content://(\\d+@)?com\\.whatsapp\\.w4b\\.provider\\.media/export_chat/");
            this.exportUri.add("content://jp\\.naver\\.line\\.android\\.line\\.common\\.FileProvider/export-chat/");
            this.exportUri.add(".*WhatsApp.*\\.txt$");
            this.exportUri.add(".*WhatsApp.*\\.zip$");
        }
        Set<String> stringSet3 = this.mainPreferences.getStringSet("exportGroupUri", null);
        this.exportGroupUri = stringSet3;
        if (stringSet3 != null) {
            this.exportGroupUri = new HashSet(this.exportGroupUri);
        } else {
            HashSet hashSet2 = new HashSet();
            this.exportGroupUri = hashSet2;
            hashSet2.add("@g.us/");
        }
        Set<String> stringSet4 = this.mainPreferences.getStringSet("exportPrivateUri", null);
        this.exportPrivateUri = stringSet4;
        if (stringSet4 != null) {
            this.exportPrivateUri = new HashSet(this.exportPrivateUri);
        } else {
            HashSet hashSet3 = new HashSet();
            this.exportPrivateUri = hashSet3;
            hashSet3.add("@s.whatsapp.net/");
        }
        Set<String> stringSet5 = this.mainPreferences.getStringSet("autologinDomains", null);
        this.autologinDomains = stringSet5;
        if (stringSet5 != null) {
            this.autologinDomains = new HashSet(this.autologinDomains);
        } else {
            this.autologinDomains = new HashSet();
        }
        Set<String> stringSet6 = this.mainPreferences.getStringSet("authDomains", null);
        this.authDomains = stringSet6;
        if (stringSet6 != null) {
            this.authDomains = new HashSet(this.authDomains);
        } else {
            this.authDomains = new HashSet();
        }
        this.autologinToken = this.mainPreferences.getString("autologinToken", null);
        Set<String> stringSet7 = this.mainPreferences.getStringSet("diceEmojies", null);
        if (stringSet7 == null) {
            HashSet<String> hashSet4 = new HashSet<>();
            this.diceEmojies = hashSet4;
            hashSet4.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(stringSet7);
        }
        String string = this.mainPreferences.getString("diceSuccess", null);
        if (string == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] decode = Base64.decode(string, 0);
                if (decode != null) {
                    SerializedData serializedData = new SerializedData(decode);
                    int readInt32 = serializedData.readInt32(true);
                    for (int i5 = 0; i5 < readInt32; i5++) {
                        this.diceSuccess.put(serializedData.readString(true), new DiceFrameSuccess(serializedData.readInt32(true), serializedData.readInt32(true)));
                    }
                    serializedData.cleanup();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        String string2 = this.mainPreferences.getString("emojiSounds", null);
        if (string2 != null) {
            try {
                byte[] decode2 = Base64.decode(string2, 0);
                if (decode2 != null) {
                    SerializedData serializedData2 = new SerializedData(decode2);
                    int readInt322 = serializedData2.readInt32(true);
                    for (int i6 = 0; i6 < readInt322; i6++) {
                        this.emojiSounds.put(serializedData2.readString(true), new EmojiSound(serializedData2.readInt64(true), serializedData2.readInt64(true), serializedData2.readByteArray(true)));
                    }
                    serializedData2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
        String string3 = this.mainPreferences.getString("gifSearchEmojies", null);
        if (string3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("\u1f973");
            this.gifSearchEmojies.add("😎");
        } else {
            try {
                byte[] decode3 = Base64.decode(string3, 0);
                if (decode3 != null) {
                    SerializedData serializedData3 = new SerializedData(decode3);
                    int readInt323 = serializedData3.readInt32(true);
                    for (int i7 = 0; i7 < readInt323; i7++) {
                        this.gifSearchEmojies.add(serializedData3.readString(true));
                    }
                    serializedData3.cleanup();
                }
            } catch (Exception e3) {
                FileLog.e(e3);
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda453
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.loadAppConfig();
            }
        }, 2000L);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda447
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$14();
            }
        }, 400L);
        this.topicsController = new TopicsController(i);
        this.cacheByChatsController = new CacheByChatsController(i);
        this.translateController = new TranslateController(this);
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda448
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$new$15();
            }
        });
    }

    public /* synthetic */ void lambda$new$13() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadProgressChanged);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    public /* synthetic */ void lambda$new$14() {
        checkPeerColors(false);
    }

    public /* synthetic */ void lambda$new$15() {
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
    }

    private void sendLoadPeersRequest(final TLObject tLObject, final ArrayList<TLObject> arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final ArrayList<DialogFilter> arrayList4, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList5, final HashMap<Integer, HashSet<Long>> hashMap, final HashSet<Integer> hashSet, final Runnable runnable) {
        getConnectionsManager().sendRequest(tLObject, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda19
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendLoadPeersRequest$16(arrayList3, arrayList2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashSet, runnable, tLObject2, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$sendLoadPeersRequest$16(ArrayList arrayList, ArrayList arrayList2, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashSet hashSet, Runnable runnable, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject2 instanceof TLRPC$TL_messages_chats) {
            arrayList.addAll(((TLRPC$TL_messages_chats) tLObject2).chats);
        } else if (tLObject2 instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject2;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                arrayList2.add((TLRPC$User) tLRPC$Vector.objects.get(i));
            }
        } else if (tLObject2 instanceof TLRPC$TL_messages_peerDialogs) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject2;
            tLRPC$messages_Dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            tLRPC$messages_Dialogs2.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs2.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            arrayList2.addAll(tLRPC$TL_messages_peerDialogs.users);
            arrayList.addAll(tLRPC$TL_messages_peerDialogs.chats);
        }
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashSet, runnable);
        }
    }

    public void loadFilterPeers(final HashMap<Long, TLRPC$InputPeer> hashMap, final HashMap<Long, TLRPC$InputPeer> hashMap2, final HashMap<Long, TLRPC$InputPeer> hashMap3, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList, final ArrayList<TLRPC$Chat> arrayList2, final ArrayList<DialogFilter> arrayList3, final SparseArray<DialogFilter> sparseArray, final ArrayList<Integer> arrayList4, final HashMap<Integer, HashSet<Long>> hashMap4, final HashSet<Integer> hashSet, final Runnable runnable) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda311
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFilterPeers$17(hashMap2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashSet, runnable, hashMap3, hashMap);
            }
        });
    }

    public /* synthetic */ void lambda$loadFilterPeers$17(HashMap hashMap, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashSet hashSet, Runnable runnable, HashMap hashMap3, HashMap hashMap4) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers;
        int i;
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs;
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels;
        ArrayList<TLObject> arrayList5 = new ArrayList<>();
        loop0: while (true) {
            tLRPC$TL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tLRPC$TL_users_getUsers == null) {
                    tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
                    arrayList5.add(tLRPC$TL_users_getUsers);
                }
                tLRPC$TL_users_getUsers.id.add(getInputUser((TLRPC$InputPeer) entry.getValue()));
                if (tLRPC$TL_users_getUsers.id.size() == 100) {
                    break;
                }
            }
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tLRPC$TL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        } else {
            i = 100;
        }
        TLObject tLObject = null;
        TLObject tLObject2 = null;
        for (Map.Entry entry2 : hashMap3.entrySet()) {
            TLRPC$InputPeer tLRPC$InputPeer = (TLRPC$InputPeer) entry2.getValue();
            if (tLRPC$InputPeer.chat_id != 0) {
                if (tLObject == null) {
                    tLRPC$TL_messages_getChats = new TLRPC$TL_messages_getChats();
                    arrayList5.add(tLRPC$TL_messages_getChats);
                } else {
                    tLRPC$TL_messages_getChats = tLObject;
                }
                tLRPC$TL_messages_getChats.id.add((Long) entry2.getKey());
                if (tLRPC$TL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getChats, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
                    tLObject = null;
                } else {
                    tLObject = tLRPC$TL_messages_getChats;
                }
            } else if (tLRPC$InputPeer.channel_id != 0) {
                if (tLObject2 == null) {
                    TLObject tLRPC$TL_channels_getChannels2 = new TLRPC$TL_channels_getChannels();
                    arrayList5.add(tLRPC$TL_channels_getChannels2);
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels2;
                } else {
                    tLRPC$TL_channels_getChannels = tLObject2;
                }
                tLRPC$TL_channels_getChannels.id.add(getInputChannel(tLRPC$InputPeer));
                if (tLRPC$TL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_channels_getChannels, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
                    tLObject2 = null;
                } else {
                    tLObject2 = tLRPC$TL_channels_getChannels;
                }
            }
        }
        if (tLObject != null) {
            sendLoadPeersRequest(tLObject, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tLObject2 != null) {
            sendLoadPeersRequest(tLObject2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        loop3: while (true) {
            tLRPC$TL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap4.entrySet()) {
                if (tLRPC$TL_messages_getPeerDialogs == null) {
                    tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                    arrayList5.add(tLRPC$TL_messages_getPeerDialogs);
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = (TLRPC$InputPeer) entry3.getValue();
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (tLRPC$TL_messages_getPeerDialogs.peers.size() == i) {
                    break;
                }
            }
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
        if (tLRPC$TL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashSet, runnable);
        }
    }

    public void processLoadedDialogFilters(final ArrayList<DialogFilter> arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, final ArrayList<TLRPC$EncryptedChat> arrayList4, final int i, final Runnable runnable) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda63
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$20(tLRPC$messages_Dialogs, arrayList4, tLRPC$messages_Dialogs2, i, arrayList, arrayList2, arrayList3, runnable);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:188:0x00a7, code lost:
        if (r6 == (-r3.id)) goto L32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:195:0x00bb, code lost:
        if (r3.migrated_to != null) goto L29;
     */
    /* JADX WARN: Removed duplicated region for block: B:199:0x00dd  */
    /* JADX WARN: Removed duplicated region for block: B:200:0x00e7  */
    /* JADX WARN: Removed duplicated region for block: B:257:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:260:0x01f6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogFilters$20(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final ArrayList arrayList, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, final int i, final ArrayList arrayList2, final ArrayList arrayList3, final ArrayList arrayList4, final Runnable runnable) {
        SparseArray sparseArray;
        long j;
        LongSparseArray longSparseArray;
        TLRPC$Chat tLRPC$Chat;
        Integer num;
        Integer num2;
        ArrayList arrayList5;
        TLRPC$Message tLRPC$Message;
        int i2;
        int i3;
        long dialogId;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        final LongSparseArray longSparseArray3 = new LongSparseArray();
        LongSparseArray longSparseArray4 = new LongSparseArray();
        LongSparseArray longSparseArray5 = new LongSparseArray();
        for (int i4 = 0; i4 < tLRPC$messages_Dialogs3.users.size(); i4++) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs3.users.get(i4);
            longSparseArray4.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i5 = 0; i5 < tLRPC$messages_Dialogs3.chats.size(); i5++) {
            TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs3.chats.get(i5);
            longSparseArray5.put(tLRPC$Chat2.id, tLRPC$Chat2);
        }
        if (arrayList != null) {
            sparseArray = new SparseArray();
            int size = arrayList.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList.get(i6);
                sparseArray.put(tLRPC$EncryptedChat.id, tLRPC$EncryptedChat);
            }
        } else {
            sparseArray = null;
        }
        ArrayList arrayList6 = new ArrayList();
        int i7 = 0;
        while (true) {
            j = 0;
            if (i7 >= tLRPC$messages_Dialogs3.messages.size()) {
                break;
            }
            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Dialogs3.messages.get(i7);
            TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
            long j2 = tLRPC$Peer.channel_id;
            if (j2 != 0) {
                TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray5.get(j2);
                if (tLRPC$Chat3 != null && tLRPC$Chat3.left) {
                    long j3 = this.promoDialogId;
                    if (j3 != 0) {
                    }
                    i3 = i7;
                }
                i3 = i7;
                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray4, (LongSparseArray<TLRPC$Chat>) longSparseArray5, false, false);
                arrayList6.add(messageObject);
                dialogId = messageObject.getDialogId();
                if (!longSparseArray3.containsKey(dialogId)) {
                    ((ArrayList) longSparseArray3.get(dialogId)).add(messageObject);
                } else {
                    ArrayList arrayList7 = new ArrayList(1);
                    arrayList7.add(messageObject);
                    longSparseArray3.put(dialogId, arrayList7);
                }
            } else {
                long j4 = tLRPC$Peer.chat_id;
                if (j4 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray5.get(j4);
                    if (tLRPC$Chat4 != null) {
                    }
                }
                i3 = i7;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray4, (LongSparseArray<TLRPC$Chat>) longSparseArray5, false, false);
                arrayList6.add(messageObject2);
                dialogId = messageObject2.getDialogId();
                if (!longSparseArray3.containsKey(dialogId)) {
                }
            }
            i7 = i3 + 1;
        }
        int i8 = 0;
        while (i8 < tLRPC$messages_Dialogs3.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs3.dialogs.get(i8);
            DialogObject.initDialog(tLRPC$Dialog);
            LongSparseArray longSparseArray6 = longSparseArray4;
            long j5 = tLRPC$Dialog.id;
            if (j5 != j && (!DialogObject.isEncryptedDialog(j5) || sparseArray == null || sparseArray.get(DialogObject.getEncryptedChatId(tLRPC$Dialog.id)) != null)) {
                long j6 = this.promoDialogId;
                if (j6 != j && j6 == tLRPC$Dialog.id) {
                    this.promoDialog = tLRPC$Dialog;
                }
                if (tLRPC$Dialog.last_message_date == 0 && (arrayList5 = (ArrayList) longSparseArray3.get(tLRPC$Dialog.id)) != null) {
                    int i9 = Integer.MIN_VALUE;
                    for (int i10 = 0; i10 < arrayList5.size(); i10++) {
                        MessageObject messageObject3 = (MessageObject) arrayList5.get(i10);
                        if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && i9 < (i2 = tLRPC$Message.date)) {
                            i9 = i2;
                        }
                    }
                    if (i9 > Integer.MIN_VALUE) {
                        tLRPC$Dialog.last_message_date = i9;
                    }
                }
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray5.get(-tLRPC$Dialog.id);
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                        long j7 = this.promoDialogId;
                        if (j7 != 0) {
                            if (j7 != tLRPC$Dialog.id) {
                            }
                        }
                    }
                    this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                    longSparseArray2.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                } else {
                    long j8 = tLRPC$Dialog.id;
                    if (j8 < 0 && (tLRPC$Chat = (TLRPC$Chat) longSparseArray5.get(-j8)) != null && tLRPC$Chat.migrated_to != null) {
                    }
                    longSparseArray2.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                }
            }
            i8++;
            tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
            longSparseArray4 = longSparseArray6;
            j = 0;
        }
        LongSparseArray longSparseArray7 = longSparseArray4;
        if (tLRPC$messages_Dialogs2 != null && !tLRPC$messages_Dialogs2.dialogs.isEmpty()) {
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Dialogs2.messages);
            int i11 = 0;
            while (i11 < tLRPC$messages_Dialogs2.messages.size()) {
                TLRPC$Message tLRPC$Message3 = tLRPC$messages_Dialogs2.messages.get(i11);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message3.action;
                if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                    longSparseArray = longSparseArray7;
                    TLRPC$User tLRPC$User2 = (TLRPC$User) longSparseArray.get(tLRPC$MessageAction.user_id);
                    if (tLRPC$User2 != null && tLRPC$User2.bot) {
                        tLRPC$Message3.reply_markup = new TLRPC$TL_replyKeyboardHide();
                        tLRPC$Message3.flags |= 64;
                    }
                } else {
                    longSparseArray = longSparseArray7;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message3.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message3.unread = false;
                    tLRPC$Message3.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num3 = concurrentHashMap.get(Long.valueOf(tLRPC$Message3.dialog_id));
                    if (num3 == null) {
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message3.out, tLRPC$Message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message3.dialog_id), num3);
                    }
                    tLRPC$Message3.unread = num3.intValue() < tLRPC$Message3.id;
                }
                i11++;
                longSparseArray7 = longSparseArray;
            }
            getMessagesStorage().putDialogs(tLRPC$messages_Dialogs2, 0);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda340
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$19(i, arrayList2, arrayList3, arrayList4, tLRPC$messages_Dialogs2, arrayList, longSparseArray2, longSparseArray3, runnable);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1 */
    /* JADX WARN: Type inference failed for: r4v3 */
    public /* synthetic */ void lambda$processLoadedDialogFilters$19(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, Runnable runnable) {
        int i2;
        boolean z;
        ArrayList<MessageObject> arrayList5;
        ArrayList<MessageObject> arrayList6;
        if (i != 2) {
            this.dialogFilters = arrayList;
            this.dialogFiltersById.clear();
            int size = this.dialogFilters.size();
            for (int i3 = 0; i3 < size; i3++) {
                DialogFilter dialogFilter = this.dialogFilters.get(i3);
                this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
            }
            Collections.sort(this.dialogFilters, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda268
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processLoadedDialogFilters$18;
                    lambda$processLoadedDialogFilters$18 = MessagesController.lambda$processLoadedDialogFilters$18((MessagesController.DialogFilter) obj, (MessagesController.DialogFilter) obj2);
                    return lambda$processLoadedDialogFilters$18;
                }
            });
            putUsers(arrayList2, true);
            putChats(arrayList3, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i == 0) {
                loadRemoteFilters(false);
            }
            if (tLRPC$messages_Dialogs != null && !tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
            }
            if (arrayList4 != null) {
                for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                    TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList4.get(i4);
                    if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                        getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, null);
                    }
                    putEncryptedChat(tLRPC$EncryptedChat, true);
                }
            }
            for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                long keyAt = longSparseArray.keyAt(i5);
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray.valueAt(i5);
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
                if (tLRPC$messages_Dialogs != null && tLRPC$messages_Dialogs.dialogs.contains(tLRPC$Dialog)) {
                    if (tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage) {
                        getMediaDataController().saveDraft(tLRPC$Dialog.id, 0L, tLRPC$Dialog.draft, null, false);
                    }
                    if (tLRPC$Dialog2 != null) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                }
                ArrayList<MessageObject> arrayList7 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
                long j = 0;
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList7);
                    if (arrayList7 != null) {
                        for (int i6 = 0; i6 < arrayList7.size(); i6++) {
                            MessageObject messageObject = arrayList7.get(i6);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j2 = messageObject.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject);
                                }
                            }
                        }
                    }
                    getTranslateController().checkDialogMessage(keyAt);
                } else {
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    ArrayList<MessageObject> arrayList8 = this.dialogMessage.get(keyAt);
                    for (int i7 = 0; arrayList8 != null && i7 < arrayList8.size(); i7++) {
                        if (arrayList8.get(i7) != null && arrayList8.get(i7).deleted) {
                            z = true;
                            break;
                        }
                    }
                    z = false;
                    if (z || arrayList8 == null || tLRPC$Dialog2.top_message > 0) {
                        if (tLRPC$Dialog.top_message < tLRPC$Dialog2.top_message) {
                            if ((arrayList8 == null) == (arrayList7 == null)) {
                                if (arrayList8 != null) {
                                    if (arrayList7 != null) {
                                        if (arrayList8.size() == arrayList7.size()) {
                                        }
                                    }
                                }
                            }
                        }
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList7);
                        if (arrayList8 != null) {
                            for (int i8 = 0; i8 < arrayList8.size(); i8++) {
                                MessageObject messageObject2 = arrayList8.get(i8);
                                if (messageObject2 != null) {
                                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                        this.dialogMessagesByIds.remove(messageObject2.getId());
                                    }
                                    long j3 = messageObject2.messageOwner.random_id;
                                    if (j3 != 0) {
                                        this.dialogMessagesByRandomIds.remove(j3);
                                    }
                                }
                            }
                        }
                        if (arrayList7 != null) {
                            for (int i9 = 0; i9 < arrayList7.size(); i9++) {
                                MessageObject messageObject3 = arrayList7.get(i9);
                                if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                    int i10 = 0;
                                    while (true) {
                                        if (arrayList8 == null || i10 >= arrayList8.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = arrayList8.get(i10);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        }
                                        i10++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j4 = messageObject3.messageOwner.random_id;
                                    if (j4 != 0) {
                                        this.dialogMessagesByRandomIds.put(j4, messageObject3);
                                    }
                                }
                            }
                        }
                        getTranslateController().checkDialogMessage(keyAt);
                    } else {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList7);
                        int i11 = 0;
                        while (i11 < arrayList8.size()) {
                            MessageObject messageObject5 = arrayList8.get(i11);
                            if (messageObject5 == null) {
                                arrayList6 = arrayList8;
                            } else {
                                arrayList6 = arrayList8;
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j5 = messageObject5.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j5);
                                }
                            }
                            i11++;
                            arrayList8 = arrayList6;
                        }
                        ArrayList<MessageObject> arrayList9 = arrayList8;
                        if (arrayList7 != null) {
                            int i12 = 0;
                            while (i12 < arrayList7.size()) {
                                MessageObject messageObject6 = arrayList7.get(i12);
                                if (messageObject6 == null || messageObject6.messageOwner.peer_id.channel_id != j) {
                                    arrayList5 = arrayList9;
                                } else {
                                    int i13 = 0;
                                    while (true) {
                                        arrayList5 = arrayList9;
                                        if (i13 >= arrayList9.size()) {
                                            break;
                                        }
                                        MessageObject messageObject7 = arrayList5.get(i13);
                                        if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                            messageObject6.deleted = messageObject7.deleted;
                                            break;
                                        } else {
                                            i13++;
                                            arrayList9 = arrayList5;
                                        }
                                    }
                                    this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                    long j6 = messageObject6.messageOwner.random_id;
                                    if (j6 != 0) {
                                        this.dialogMessagesByRandomIds.put(j6, messageObject6);
                                    }
                                }
                                i12++;
                                arrayList9 = arrayList5;
                                j = 0;
                            }
                        }
                        getTranslateController().checkDialogMessage(keyAt);
                    }
                }
            }
            this.allDialogs.clear();
            int size2 = this.dialogs_dict.size();
            for (int i14 = 0; i14 < size2; i14++) {
                TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i14);
                if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                    this.allDialogs.add(valueAt);
                }
            }
            sortDialogs(null);
            i2 = 0;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            i2 = 0;
        }
        if (i != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(i2);
            this.loadingRemoteFilters = i2;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.filterSettingsUpdated, new Object[i2]);
        }
        lockFiltersInternal();
        if (runnable != null) {
            runnable.run();
        }
    }

    public static /* synthetic */ int lambda$processLoadedDialogFilters$18(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    public void loadSuggestedFilters() {
        if (this.loadingSuggestedFilters) {
            return;
        }
        this.loadingSuggestedFilters = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getSuggestedDialogFilters
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                int readInt32 = abstractSerializedData.readInt32(z);
                for (int i2 = 0; i2 < readInt32; i2++) {
                    TLRPC$TL_dialogFilterSuggested TLdeserialize = TLRPC$TL_dialogFilterSuggested.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize == null) {
                        return tLRPC$Vector;
                    }
                    tLRPC$Vector.objects.add(TLdeserialize);
                }
                return tLRPC$Vector;
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-1566780372);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda278
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadSuggestedFilters$22(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadSuggestedFilters$22(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda473
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSuggestedFilters$21(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadSuggestedFilters$21(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC$TL_dialogFilterSuggested) tLRPC$Vector.objects.get(i));
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean z) {
        loadRemoteFilters(z, null);
    }

    public void loadRemoteFilters(boolean z, Utilities.Callback<Boolean> callback) {
        if (callback != null) {
            this.onLoadedRemoteFilters = callback;
        }
        if (this.loadingRemoteFilters || !getUserConfig().isClientActivated()) {
            return;
        }
        if (z || !getUserConfig().filtersLoaded) {
            if (z) {
                getUserConfig().filtersLoaded = false;
                getUserConfig().saveConfig(false);
            }
            getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getDialogFilters
                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z2) {
                    if (i == 481674261) {
                        TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                        int readInt32 = abstractSerializedData.readInt32(z2);
                        for (int i2 = 0; i2 < readInt32; i2++) {
                            TLRPC$DialogFilter TLdeserialize = TLRPC$DialogFilter.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z2), z2);
                            if (TLdeserialize == null) {
                                return tLRPC$Vector;
                            }
                            tLRPC$Vector.objects.add(TLdeserialize);
                        }
                        return tLRPC$Vector;
                    }
                    return TLRPC$TL_messages_dialogFilters.TLdeserialize(abstractSerializedData, i, z2);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(-271283063);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda458
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadRemoteFilters$27(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$27(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            ArrayList<TLRPC$DialogFilter> arrayList = new ArrayList<>();
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            for (int i = 0; i < tLRPC$Vector.objects.size(); i++) {
                arrayList.add((TLRPC$DialogFilter) tLRPC$Vector.objects.get(i));
            }
            getMessagesStorage().checkLoadedRemoteFilters(arrayList, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda206
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$23();
                }
            });
        } else if (tLObject instanceof TLRPC$TL_messages_dialogFilters) {
            TLRPC$TL_messages_dialogFilters tLRPC$TL_messages_dialogFilters = (TLRPC$TL_messages_dialogFilters) tLObject;
            boolean z = this.folderTags;
            boolean z2 = tLRPC$TL_messages_dialogFilters.tags_enabled;
            if (z != z2) {
                setFolderTags(z2);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda207
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$loadRemoteFilters$24();
                    }
                });
            }
            getMessagesStorage().checkLoadedRemoteFilters(tLRPC$TL_messages_dialogFilters.filters, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda208
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$25();
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda209
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadRemoteFilters$26();
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$23() {
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.TRUE);
            this.onLoadedRemoteFilters = null;
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$24() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    public /* synthetic */ void lambda$loadRemoteFilters$25() {
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.TRUE);
            this.onLoadedRemoteFilters = null;
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$26() {
        this.loadingRemoteFilters = false;
        Utilities.Callback<Boolean> callback = this.onLoadedRemoteFilters;
        if (callback != null) {
            callback.run(Boolean.FALSE);
            this.onLoadedRemoteFilters = null;
        }
    }

    public void logDeviceStats() {
        if (!this.collectDeviceStats || this.loggedDeviceStats) {
            return;
        }
        ArrayList<File> rootDirs = AndroidUtilities.getRootDirs();
        if (!rootDirs.isEmpty()) {
            int i = 0;
            String absolutePath = rootDirs.get(0).getAbsolutePath();
            if (!TextUtils.isEmpty(SharedConfig.storageCacheDir)) {
                int size = rootDirs.size();
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    String absolutePath2 = rootDirs.get(i).getAbsolutePath();
                    if (absolutePath2.startsWith(SharedConfig.storageCacheDir)) {
                        absolutePath = absolutePath2;
                        break;
                    }
                    i++;
                }
            }
            boolean contains = absolutePath.contains("/storage/emulated/");
            TLRPC$TL_help_saveAppLog tLRPC$TL_help_saveAppLog = new TLRPC$TL_help_saveAppLog();
            TLRPC$TL_inputAppEvent tLRPC$TL_inputAppEvent = new TLRPC$TL_inputAppEvent();
            tLRPC$TL_inputAppEvent.time = getConnectionsManager().getCurrentTime();
            tLRPC$TL_inputAppEvent.type = "android_sdcard_exists";
            TLRPC$TL_jsonBool tLRPC$TL_jsonBool = new TLRPC$TL_jsonBool();
            tLRPC$TL_jsonBool.value = contains;
            tLRPC$TL_inputAppEvent.data = tLRPC$TL_jsonBool;
            tLRPC$TL_inputAppEvent.peer = contains ? 1L : 0L;
            tLRPC$TL_help_saveAppLog.events.add(tLRPC$TL_inputAppEvent);
            getConnectionsManager().sendRequest(tLRPC$TL_help_saveAppLog, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda205
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$logDeviceStats$28(tLObject, tLRPC$TL_error);
                }
            });
        }
        this.loggedDeviceStats = true;
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        DialogFilter dialogFilter2 = dialogFilterArr[i];
        if (dialogFilter2 == dialogFilter) {
            return;
        }
        dialogFilterArr[i] = dialogFilter;
        if (dialogFilterArr[i == 0 ? (char) 1 : (char) 0] == dialogFilter) {
            dialogFilterArr[i != 0 ? (char) 0 : (char) 1] = null;
        }
        if (dialogFilterArr[i] != null) {
            sortDialogs(null);
        } else if (dialogFilter2 != null) {
            dialogFilter2.dialogs.clear();
            dialogFilter2.dialogsForward.clear();
        }
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs(null);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                return;
            }
        }
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int size = this.dialogFilters.size();
            int i = 254;
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            if (this.dialogFilters.get(0).isDefault()) {
                this.dialogFilters.add(1, dialogFilter);
            } else {
                this.dialogFilters.add(0, dialogFilter);
            }
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
        if (this.dialogFilters.size() == 1 && SharedConfig.getChatSwipeAction(this.currentAccount) != 5) {
            SharedConfig.updateChatListSwipeSetting(5);
        }
        lockFiltersInternal();
    }

    public void updateEmojiStatus(TLRPC$EmojiStatus tLRPC$EmojiStatus) {
        TLRPC$TL_account_updateEmojiStatus tLRPC$TL_account_updateEmojiStatus = new TLRPC$TL_account_updateEmojiStatus();
        tLRPC$TL_account_updateEmojiStatus.emoji_status = tLRPC$EmojiStatus;
        TLRPC$User currentUser = getUserConfig().getCurrentUser();
        if (currentUser != null) {
            currentUser.emoji_status = tLRPC$TL_account_updateEmojiStatus.emoji_status;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userEmojiStatusUpdated, currentUser);
            getMessagesController().updateEmojiStatusUntilUpdate(currentUser.id, currentUser.emoji_status);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_updateEmojiStatus, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda184
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$updateEmojiStatus$29(tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$updateEmojiStatus$29(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        boolean z = tLObject instanceof TLRPC$TL_boolTrue;
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    public void loadAppConfig() {
        loadAppConfig(false);
    }

    public void loadAppConfig(boolean z) {
        AndroidUtilities.cancelRunOnUIThread(this.loadAppConfigRunnable);
        if (z) {
            this.appConfigFetcher.forceRequest(this.currentAccount, 0);
        }
        this.appConfigFetcher.fetch(this.currentAccount, 0, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda227
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                MessagesController.this.lambda$loadAppConfig$31((TLRPC$TL_help_appConfig) obj);
            }
        });
    }

    public /* synthetic */ void lambda$loadAppConfig$31(final TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda159
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadAppConfig$30(tLRPC$TL_help_appConfig);
            }
        });
    }

    public /* synthetic */ void lambda$loadAppConfig$30(TLRPC$TL_help_appConfig tLRPC$TL_help_appConfig) {
        if (tLRPC$TL_help_appConfig != null) {
            TLRPC$JSONValue tLRPC$JSONValue = tLRPC$TL_help_appConfig.config;
            if (tLRPC$JSONValue instanceof TLRPC$TL_jsonObject) {
                applyAppConfig((TLRPC$TL_jsonObject) tLRPC$JSONValue);
            }
        }
        AndroidUtilities.cancelRunOnUIThread(this.loadAppConfigRunnable);
        AndroidUtilities.runOnUIThread(this.loadAppConfigRunnable, 240010L);
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:3360:0x1fd0, code lost:
        if (getConnectionsManager().getCurrentTime() > r9) goto L1562;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void applyAppConfig(TLRPC$TL_jsonObject tLRPC$TL_jsonObject) {
        int i;
        boolean z;
        boolean z2;
        int i2;
        char c;
        HashMap<String, DiceFrameSuccess> hashMap;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject2;
        int i3;
        int i4;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject3;
        int i5;
        HashMap<String, EmojiSound> hashMap2;
        long parseLong;
        int i6;
        char c2;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        resetAppConfig();
        int size = tLRPC$TL_jsonObject4.value.size();
        int i7 = 0;
        int i8 = 0;
        int i9 = 0;
        boolean z3 = false;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject5 = null;
        boolean z4 = false;
        boolean z5 = false;
        while (i7 < size) {
            TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue = tLRPC$TL_jsonObject4.value.get(i7);
            String str = tLRPC$TL_jsonObjectValue.key;
            str.hashCode();
            int i10 = size;
            boolean z6 = z3;
            boolean z7 = z5;
            boolean z8 = z4;
            TLRPC$TL_jsonObject tLRPC$TL_jsonObject6 = tLRPC$TL_jsonObject5;
            switch (str.hashCode()) {
                case -2144614625:
                    i2 = i9;
                    if (str.equals("chatlists_joined_limit_premium")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case -2123640970:
                    i2 = i9;
                    if (str.equals("channel_revenue_withdrawal_enabled")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case -2086426873:
                    i2 = i9;
                    if (str.equals("dialog_filters_pinned_limit_premium")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case -2085529619:
                    i2 = i9;
                    if (str.equals("business_chat_links_limit")) {
                        c = 3;
                        break;
                    }
                    c = 65535;
                    break;
                case -2031587591:
                    i2 = i9;
                    if (str.equals("telegram_antispam_user_id")) {
                        c = 4;
                        break;
                    }
                    c = 65535;
                    break;
                case -2010078200:
                    i2 = i9;
                    if (str.equals("channel_custom_wallpaper_level_min")) {
                        c = 5;
                        break;
                    }
                    c = 65535;
                    break;
                case -1983931574:
                    i2 = i9;
                    if (str.equals("channel_restrict_sponsored_level_min")) {
                        c = 6;
                        break;
                    }
                    c = 65535;
                    break;
                case -1921306872:
                    i2 = i9;
                    if (str.equals("large_queue_max_active_operations_count")) {
                        c = 7;
                        break;
                    }
                    c = 65535;
                    break;
                case -1906216435:
                    i2 = i9;
                    if (str.equals("upload_max_fileparts_default")) {
                        c = '\b';
                        break;
                    }
                    c = 65535;
                    break;
                case -1905041797:
                    i2 = i9;
                    if (str.equals("pinned_dialogs_count_max_default")) {
                        c = '\t';
                        break;
                    }
                    c = 65535;
                    break;
                case -1899955653:
                    i2 = i9;
                    if (str.equals("android_collect_device_stats")) {
                        c = '\n';
                        break;
                    }
                    c = 65535;
                    break;
                case -1878957152:
                    i2 = i9;
                    if (str.equals("stories_suggested_reactions_limit_default")) {
                        c = 11;
                        break;
                    }
                    c = 65535;
                    break;
                case -1842555673:
                    i2 = i9;
                    if (str.equals("stars_gifts_enabled")) {
                        c = '\f';
                        break;
                    }
                    c = 65535;
                    break;
                case -1841535911:
                    i2 = i9;
                    if (str.equals("dismissed_suggestions")) {
                        c = '\r';
                        break;
                    }
                    c = 65535;
                    break;
                case -1802366185:
                    i2 = i9;
                    if (str.equals("pm_read_date_expire_period")) {
                        c = 14;
                        break;
                    }
                    c = 65535;
                    break;
                case -1741981325:
                    i2 = i9;
                    if (str.equals("smsjobs_sticky_notification_enabled")) {
                        c = 15;
                        break;
                    }
                    c = 65535;
                    break;
                case -1736722060:
                    i2 = i9;
                    if (str.equals("upload_premium_speedup_notify_period")) {
                        c = 16;
                        break;
                    }
                    c = 65535;
                    break;
                case -1730760944:
                    i2 = i9;
                    if (str.equals("stories_sent_monthly_limit_default")) {
                        c = 17;
                        break;
                    }
                    c = 65535;
                    break;
                case -1727638397:
                    i2 = i9;
                    if (str.equals("bot_preview_medias_max")) {
                        c = 18;
                        break;
                    }
                    c = 65535;
                    break;
                case -1688620344:
                    i2 = i9;
                    if (str.equals("dialog_filters_tooltip")) {
                        c = 19;
                        break;
                    }
                    c = 65535;
                    break;
                case -1683918311:
                    i2 = i9;
                    if (str.equals("qr_login_camera")) {
                        c = 20;
                        break;
                    }
                    c = 65535;
                    break;
                case -1631139636:
                    i2 = i9;
                    if (str.equals("stars_purchase_blocked")) {
                        c = 21;
                        break;
                    }
                    c = 65535;
                    break;
                case -1560863476:
                    i2 = i9;
                    if (str.equals("group_custom_wallpaper_level_min")) {
                        c = 22;
                        break;
                    }
                    c = 65535;
                    break;
                case -1557626216:
                    i2 = i9;
                    if (str.equals("giveaway_add_peers_max")) {
                        c = 23;
                        break;
                    }
                    c = 65535;
                    break;
                case -1547147298:
                    i2 = i9;
                    if (str.equals("channel_wallpaper_level_min")) {
                        c = 24;
                        break;
                    }
                    c = 65535;
                    break;
                case -1547044498:
                    i2 = i9;
                    if (str.equals("chatlist_update_period")) {
                        c = 25;
                        break;
                    }
                    c = 65535;
                    break;
                case -1512224895:
                    i2 = i9;
                    if (str.equals("stars_subscription_amount_max")) {
                        c = 26;
                        break;
                    }
                    c = 65535;
                    break;
                case -1489089702:
                    i2 = i9;
                    if (str.equals("group_wallpaper_level_min")) {
                        c = 27;
                        break;
                    }
                    c = 65535;
                    break;
                case -1391118177:
                    i2 = i9;
                    if (str.equals("channel_emoji_status_level_min")) {
                        c = 28;
                        break;
                    }
                    c = 65535;
                    break;
                case -1391086521:
                    i2 = i9;
                    if (str.equals("pending_suggestions")) {
                        c = 29;
                        break;
                    }
                    c = 65535;
                    break;
                case -1385240692:
                    i2 = i9;
                    if (str.equals("channels_public_limit_premium")) {
                        c = 30;
                        break;
                    }
                    c = 65535;
                    break;
                case -1379354758:
                    i2 = i9;
                    if (str.equals("story_expiring_limit_premium")) {
                        c = 31;
                        break;
                    }
                    c = 65535;
                    break;
                case -1351431371:
                    i2 = i9;
                    if (str.equals("group_profile_bg_icon_level_min")) {
                        c = ' ';
                        break;
                    }
                    c = 65535;
                    break;
                case -1340158869:
                    i2 = i9;
                    if (str.equals("upload_premium_speedup_download")) {
                        c = '!';
                        break;
                    }
                    c = 65535;
                    break;
                case -1318497457:
                    i2 = i9;
                    if (str.equals("ignore_restriction_reasons")) {
                        c = '\"';
                        break;
                    }
                    c = 65535;
                    break;
                case -1304621435:
                    i2 = i9;
                    if (str.equals("new_noncontact_peers_require_premium_without_ownpremium")) {
                        c = '#';
                        break;
                    }
                    c = 65535;
                    break;
                case -1289139185:
                    i2 = i9;
                    if (str.equals("quick_reply_messages_limit")) {
                        c = '$';
                        break;
                    }
                    c = 65535;
                    break;
                case -1287877531:
                    i2 = i9;
                    if (str.equals("stickers_faved_limit_premium")) {
                        c = '%';
                        break;
                    }
                    c = 65535;
                    break;
                case -1253023507:
                    i2 = i9;
                    if (str.equals("stories_stealth_cooldown_period")) {
                        c = '&';
                        break;
                    }
                    c = 65535;
                    break;
                case -1133154193:
                    i2 = i9;
                    if (str.equals("lite_app_options")) {
                        c = '\'';
                        break;
                    }
                    c = 65535;
                    break;
                case -1086302656:
                    i2 = i9;
                    if (str.equals("lite_device_class")) {
                        c = '(';
                        break;
                    }
                    c = 65535;
                    break;
                case -1071072567:
                    i2 = i9;
                    if (str.equals("premium_gift_text_field_icon")) {
                        c = ')';
                        break;
                    }
                    c = 65535;
                    break;
                case -1056002991:
                    i2 = i9;
                    if (str.equals("chat_read_mark_expire_period")) {
                        c = '*';
                        break;
                    }
                    c = 65535;
                    break;
                case -1049689381:
                    i2 = i9;
                    if (str.equals("reactions_uniq_max")) {
                        c = '+';
                        break;
                    }
                    c = 65535;
                    break;
                case -1032177933:
                    i2 = i9;
                    if (str.equals("emojies_send_dice")) {
                        c = ',';
                        break;
                    }
                    c = 65535;
                    break;
                case -980397720:
                    i2 = i9;
                    if (str.equals("url_auth_domains")) {
                        c = '-';
                        break;
                    }
                    c = 65535;
                    break;
                case -973235223:
                    i2 = i9;
                    if (str.equals("stars_revenue_withdrawal_min")) {
                        c = '.';
                        break;
                    }
                    c = 65535;
                    break;
                case -947423642:
                    i2 = i9;
                    if (str.equals("stories_stealth_past_period")) {
                        c = '/';
                        break;
                    }
                    c = 65535;
                    break;
                case -915535880:
                    i2 = i9;
                    if (str.equals("saved_dialogs_pinned_limit_premium")) {
                        c = '0';
                        break;
                    }
                    c = 65535;
                    break;
                case -896467099:
                    i2 = i9;
                    if (str.equals("saved_gifs_limit_default")) {
                        c = '1';
                        break;
                    }
                    c = 65535;
                    break;
                case -736509977:
                    i2 = i9;
                    if (str.equals("story_caption_length_limit_default")) {
                        c = '2';
                        break;
                    }
                    c = 65535;
                    break;
                case -728445056:
                    i2 = i9;
                    if (str.equals("show_annual_per_month")) {
                        c = '3';
                        break;
                    }
                    c = 65535;
                    break;
                case -581904190:
                    i2 = i9;
                    if (str.equals("dialog_filters_limit_default")) {
                        c = '4';
                        break;
                    }
                    c = 65535;
                    break;
                case -561040027:
                    i2 = i9;
                    if (str.equals("premium_invoice_slug")) {
                        c = '5';
                        break;
                    }
                    c = 65535;
                    break;
                case -542518288:
                    i2 = i9;
                    if (str.equals("stories_sent_weekly_limit_premium")) {
                        c = '6';
                        break;
                    }
                    c = 65535;
                    break;
                case -533076272:
                    i2 = i9;
                    if (str.equals("stories_export_nopublic_link")) {
                        c = '7';
                        break;
                    }
                    c = 65535;
                    break;
                case -515715076:
                    i2 = i9;
                    if (str.equals("export_regex")) {
                        c = '8';
                        break;
                    }
                    c = 65535;
                    break;
                case -507953835:
                    i2 = i9;
                    if (str.equals("chatlist_invites_limit_premium")) {
                        c = '9';
                        break;
                    }
                    c = 65535;
                    break;
                case -505523666:
                    i2 = i9;
                    if (str.equals("stars_usd_sell_rate_x1000")) {
                        c = ':';
                        break;
                    }
                    c = 65535;
                    break;
                case -488472170:
                    i2 = i9;
                    if (str.equals("about_length_limit_default")) {
                        c = ';';
                        break;
                    }
                    c = 65535;
                    break;
                case -473866179:
                    i2 = i9;
                    if (str.equals("reactions_user_max_premium")) {
                        c = '<';
                        break;
                    }
                    c = 65535;
                    break;
                case -416504589:
                    i2 = i9;
                    if (str.equals("caption_length_limit_premium")) {
                        c = '=';
                        break;
                    }
                    c = 65535;
                    break;
                case -413144568:
                    i2 = i9;
                    if (str.equals("recommended_channels_limit_premium")) {
                        c = '>';
                        break;
                    }
                    c = 65535;
                    break;
                case -404170231:
                    i2 = i9;
                    if (str.equals("keep_alive_service")) {
                        c = '?';
                        break;
                    }
                    c = 65535;
                    break;
                case -381432266:
                    i2 = i9;
                    if (str.equals("premium_promo_order")) {
                        c = '@';
                        break;
                    }
                    c = 65535;
                    break;
                case -377047005:
                    i2 = i9;
                    if (str.equals("ringtone_size_max")) {
                        c = 'A';
                        break;
                    }
                    c = 65535;
                    break;
                case -350971916:
                    i2 = i9;
                    if (str.equals("dialog_filters_chats_limit_premium")) {
                        c = 'B';
                        break;
                    }
                    c = 65535;
                    break;
                case -297801185:
                    i2 = i9;
                    if (str.equals("business_promo_order")) {
                        c = 'C';
                        break;
                    }
                    c = 65535;
                    break;
                case -281358583:
                    i2 = i9;
                    if (str.equals("chatlists_joined_limit_default")) {
                        c = 'D';
                        break;
                    }
                    c = 65535;
                    break;
                case -273604959:
                    i2 = i9;
                    if (str.equals("stories_pinned_to_top_count_max")) {
                        c = 'E';
                        break;
                    }
                    c = 65535;
                    break;
                case -256319580:
                    i2 = i9;
                    if (str.equals("channels_limit_premium")) {
                        c = 'F';
                        break;
                    }
                    c = 65535;
                    break;
                case -253815153:
                    i2 = i9;
                    if (str.equals("background_connection")) {
                        c = 'G';
                        break;
                    }
                    c = 65535;
                    break;
                case -253729626:
                    i2 = i9;
                    if (str.equals("giveaway_period_max")) {
                        c = 'H';
                        break;
                    }
                    c = 65535;
                    break;
                case -232883529:
                    i2 = i9;
                    if (str.equals("emojies_send_dice_success")) {
                        c = 'I';
                        break;
                    }
                    c = 65535;
                    break;
                case -223170831:
                    i2 = i9;
                    if (str.equals("dialog_filters_pinned_limit_default")) {
                        c = 'J';
                        break;
                    }
                    c = 65535;
                    break;
                case -191129361:
                    i2 = i9;
                    if (str.equals("hidden_members_group_size_min")) {
                        c = 'K';
                        break;
                    }
                    c = 65535;
                    break;
                case -111779186:
                    i2 = i9;
                    if (str.equals("autoarchive_setting_available")) {
                        c = 'L';
                        break;
                    }
                    c = 65535;
                    break;
                case -100192526:
                    i2 = i9;
                    if (str.equals("quick_replies_limit")) {
                        c = 'M';
                        break;
                    }
                    c = 65535;
                    break;
                case -76561797:
                    i2 = i9;
                    if (str.equals("youtube_pip")) {
                        c = 'N';
                        break;
                    }
                    c = 65535;
                    break;
                case -44956361:
                    i2 = i9;
                    if (str.equals("ton_proxy_address")) {
                        c = 'O';
                        break;
                    }
                    c = 65535;
                    break;
                case -24016028:
                    i2 = i9;
                    if (str.equals("emojies_animated_zoom")) {
                        c = 'P';
                        break;
                    }
                    c = 65535;
                    break;
                case -14783830:
                    i2 = i9;
                    if (str.equals("telegram_antispam_group_size_min")) {
                        c = 'Q';
                        break;
                    }
                    c = 65535;
                    break;
                case 81433671:
                    i2 = i9;
                    if (str.equals("giveaway_gifts_purchase_available")) {
                        c = 'R';
                        break;
                    }
                    c = 65535;
                    break;
                case 141709566:
                    i2 = i9;
                    if (str.equals("stars_paid_reaction_amount_max")) {
                        c = 'S';
                        break;
                    }
                    c = 65535;
                    break;
                case 169095108:
                    i2 = i9;
                    if (str.equals("stickers_emoji_suggest_only_api")) {
                        c = 'T';
                        break;
                    }
                    c = 65535;
                    break;
                case 222975416:
                    i2 = i9;
                    if (str.equals("gif_search_emojies")) {
                        c = 'U';
                        break;
                    }
                    c = 65535;
                    break;
                case 227342346:
                    i2 = i9;
                    if (str.equals("autologin_domains")) {
                        c = 'V';
                        break;
                    }
                    c = 65535;
                    break;
                case 246778895:
                    i2 = i9;
                    if (str.equals("export_group_urls")) {
                        c = 'W';
                        break;
                    }
                    c = 65535;
                    break;
                case 280936278:
                    i2 = i9;
                    if (str.equals("stories_posting")) {
                        c = 'X';
                        break;
                    }
                    c = 65535;
                    break;
                case 296645817:
                    i2 = i9;
                    if (str.equals("channel_profile_bg_icon_level_min")) {
                        c = 'Y';
                        break;
                    }
                    c = 65535;
                    break;
                case 357521218:
                    i2 = i9;
                    if (str.equals("weather_search_username")) {
                        c = 'Z';
                        break;
                    }
                    c = 65535;
                    break;
                case 396402384:
                    i2 = i9;
                    if (str.equals("getfile_experimental_params")) {
                        c = '[';
                        break;
                    }
                    c = 65535;
                    break;
                case 411331190:
                    i2 = i9;
                    if (str.equals("can_edit_factcheck")) {
                        c = '\\';
                        break;
                    }
                    c = 65535;
                    break;
                case 428604605:
                    i2 = i9;
                    if (str.equals("premium_playmarket_direct_currency_list")) {
                        c = ']';
                        break;
                    }
                    c = 65535;
                    break;
                case 450843102:
                    i2 = i9;
                    if (str.equals("android_check_reset_langpack")) {
                        c = '^';
                        break;
                    }
                    c = 65535;
                    break;
                case 478015350:
                    i2 = i9;
                    if (str.equals("channels_public_limit_default")) {
                        c = '_';
                        break;
                    }
                    c = 65535;
                    break;
                case 483901284:
                    i2 = i9;
                    if (str.equals("story_expiring_limit_default")) {
                        c = '`';
                        break;
                    }
                    c = 65535;
                    break;
                case 517315989:
                    i2 = i9;
                    if (str.equals("stories_stealth_future_period")) {
                        c = 'a';
                        break;
                    }
                    c = 65535;
                    break;
                case 525494819:
                    i2 = i9;
                    if (str.equals("upload_max_fileparts_premium")) {
                        c = 'b';
                        break;
                    }
                    c = 65535;
                    break;
                case 526669457:
                    i2 = i9;
                    if (str.equals("pinned_dialogs_count_max_premium")) {
                        c = 'c';
                        break;
                    }
                    c = 65535;
                    break;
                case 552754102:
                    i2 = i9;
                    if (str.equals("stories_suggested_reactions_limit_premium")) {
                        c = 'd';
                        break;
                    }
                    c = 65535;
                    break;
                case 575378511:
                    i2 = i9;
                    if (str.equals("stickers_faved_limit_default")) {
                        c = 'e';
                        break;
                    }
                    c = 65535;
                    break;
                case 670122854:
                    i2 = i9;
                    if (str.equals("giveaway_boosts_per_premium")) {
                        c = 'f';
                        break;
                    }
                    c = 65535;
                    break;
                case 676199595:
                    i2 = i9;
                    if (str.equals("groupcall_video_participants_max")) {
                        c = 'g';
                        break;
                    }
                    c = 65535;
                    break;
                case 684764449:
                    i2 = i9;
                    if (str.equals("save_gifs_with_stickers")) {
                        c = 'h';
                        break;
                    }
                    c = 65535;
                    break;
                case 700206086:
                    i2 = i9;
                    if (str.equals("boosts_per_sent_gift")) {
                        c = 'i';
                        break;
                    }
                    c = 65535;
                    break;
                case 700950310:
                    i2 = i9;
                    if (str.equals("stories_sent_monthly_limit_premium")) {
                        c = 'j';
                        break;
                    }
                    c = 65535;
                    break;
                case 805025045:
                    i2 = i9;
                    if (str.equals("android_disable_round_camera2")) {
                        c = 'k';
                        break;
                    }
                    c = 65535;
                    break;
                case 812427767:
                    i2 = i9;
                    if (str.equals("login_google_oauth_client_id")) {
                        c = 'l';
                        break;
                    }
                    c = 65535;
                    break;
                case 856667894:
                    i2 = i9;
                    if (str.equals("stars_usd_withdraw_rate_x1000")) {
                        c = 'm';
                        break;
                    }
                    c = 65535;
                    break;
                case 878681646:
                    i2 = i9;
                    if (str.equals("quote_length_max")) {
                        c = 'n';
                        break;
                    }
                    c = 65535;
                    break;
                case 917364150:
                    i2 = i9;
                    if (str.equals("ringtone_duration_max")) {
                        c = 'o';
                        break;
                    }
                    c = 65535;
                    break;
                case 947720162:
                    i2 = i9;
                    if (str.equals("saved_dialogs_pinned_limit_default")) {
                        c = 'p';
                        break;
                    }
                    c = 65535;
                    break;
                case 992898905:
                    i2 = i9;
                    if (str.equals("inapp_update_check_delay")) {
                        c = 'q';
                        break;
                    }
                    c = 65535;
                    break;
                case 1012863815:
                    i2 = i9;
                    if (str.equals("group_emoji_stickers_level_min")) {
                        c = 'r';
                        break;
                    }
                    c = 65535;
                    break;
                case 1021871313:
                    i2 = i9;
                    if (str.equals("stories_venue_search_username")) {
                        c = 's';
                        break;
                    }
                    c = 65535;
                    break;
                case 1022209700:
                    i2 = i9;
                    if (str.equals("upload_premium_speedup_upload")) {
                        c = 't';
                        break;
                    }
                    c = 65535;
                    break;
                case 1052355894:
                    i2 = i9;
                    if (str.equals("premium_bot_username")) {
                        c = 'u';
                        break;
                    }
                    c = 65535;
                    break;
                case 1085221270:
                    i2 = i9;
                    if (str.equals("premium_purchase_blocked")) {
                        c = 'v';
                        break;
                    }
                    c = 65535;
                    break;
                case 1143898023:
                    i2 = i9;
                    if (str.equals("stars_paid_post_amount_max")) {
                        c = 'w';
                        break;
                    }
                    c = 65535;
                    break;
                case 1155587444:
                    i2 = i9;
                    if (str.equals("story_weather_preload")) {
                        c = 'x';
                        break;
                    }
                    c = 65535;
                    break;
                case 1236470876:
                    i2 = i9;
                    if (str.equals("intro_title_length_limit")) {
                        c = 'y';
                        break;
                    }
                    c = 65535;
                    break;
                case 1262162175:
                    i2 = i9;
                    if (str.equals("premium_manage_subscription_url")) {
                        c = 'z';
                        break;
                    }
                    c = 65535;
                    break;
                case 1295838485:
                    i2 = i9;
                    if (str.equals("authorization_autoconfirm_period")) {
                        c = '{';
                        break;
                    }
                    c = 65535;
                    break;
                case 1316035878:
                    i2 = i9;
                    if (str.equals("premium_gift_attach_menu_icon")) {
                        c = '|';
                        break;
                    }
                    c = 65535;
                    break;
                case 1320737754:
                    i2 = i9;
                    if (str.equals("stories_sent_weekly_limit_default")) {
                        c = '}';
                        break;
                    }
                    c = 65535;
                    break;
                case 1322701672:
                    i2 = i9;
                    if (str.equals("round_video_encoding")) {
                        c = '~';
                        break;
                    }
                    c = 65535;
                    break;
                case 1355302207:
                    i2 = i9;
                    if (str.equals("chatlist_invites_limit_default")) {
                        c = 127;
                        break;
                    }
                    c = 65535;
                    break;
                case 1366527782:
                    i2 = i9;
                    if (str.equals("transcribe_audio_trial_cooldown_until")) {
                        c = 128;
                        break;
                    }
                    c = 65535;
                    break;
                case 1389389863:
                    i2 = i9;
                    if (str.equals("reactions_user_max_default")) {
                        c = 129;
                        break;
                    }
                    c = 65535;
                    break;
                case 1446751453:
                    i2 = i9;
                    if (str.equals("caption_length_limit_default")) {
                        c = 130;
                        break;
                    }
                    c = 65535;
                    break;
                case 1450111474:
                    i2 = i9;
                    if (str.equals("recommended_channels_limit_default")) {
                        c = 131;
                        break;
                    }
                    c = 65535;
                    break;
                case 1466044629:
                    i2 = i9;
                    if (str.equals("transcribe_audio_trial_duration_max")) {
                        c = 132;
                        break;
                    }
                    c = 65535;
                    break;
                case 1468149675:
                    i2 = i9;
                    if (str.equals("transcribe_audio_trial_weekly_number")) {
                        c = 133;
                        break;
                    }
                    c = 65535;
                    break;
                case 1477031202:
                    i2 = i9;
                    if (str.equals("upload_markup_video")) {
                        c = 134;
                        break;
                    }
                    c = 65535;
                    break;
                case 1508636733:
                    i2 = i9;
                    if (str.equals("chat_read_mark_size_threshold")) {
                        c = 135;
                        break;
                    }
                    c = 65535;
                    break;
                case 1512284126:
                    i2 = i9;
                    if (str.equals("dialog_filters_chats_limit_default")) {
                        c = 136;
                        break;
                    }
                    c = 65535;
                    break;
                case 1535244155:
                    i2 = i9;
                    if (str.equals("saved_gifs_limit_premium")) {
                        c = 137;
                        break;
                    }
                    c = 65535;
                    break;
                case 1554302509:
                    i2 = i9;
                    if (str.equals("stories_entities")) {
                        c = 138;
                        break;
                    }
                    c = 65535;
                    break;
                case 1556659663:
                    i2 = i9;
                    if (str.equals("channel_bg_icon_level_min")) {
                        c = 139;
                        break;
                    }
                    c = 65535;
                    break;
                case 1564023449:
                    i2 = i9;
                    if (str.equals("giveaway_countries_max")) {
                        c = 140;
                        break;
                    }
                    c = 65535;
                    break;
                case 1586523512:
                    i2 = i9;
                    if (str.equals("stories_changelog_user_id")) {
                        c = 141;
                        break;
                    }
                    c = 65535;
                    break;
                case 1597443023:
                    i2 = i9;
                    if (str.equals("topics_pinned_limit")) {
                        c = 142;
                        break;
                    }
                    c = 65535;
                    break;
                case 1606936462:
                    i2 = i9;
                    if (str.equals("channels_limit_default")) {
                        c = 143;
                        break;
                    }
                    c = 65535;
                    break;
                case 1625871267:
                    i2 = i9;
                    if (str.equals("group_emoji_status_level_min")) {
                        c = 144;
                        break;
                    }
                    c = 65535;
                    break;
                case 1637671355:
                    i2 = i9;
                    if (str.equals("web_app_allowed_protocols")) {
                        c = 145;
                        break;
                    }
                    c = 65535;
                    break;
                case 1667601876:
                    i2 = i9;
                    if (str.equals("small_queue_max_active_operations_count")) {
                        c = 146;
                        break;
                    }
                    c = 65535;
                    break;
                case 1695201277:
                    i2 = i9;
                    if (str.equals("story_caption_length_limit_premium")) {
                        c = 147;
                        break;
                    }
                    c = 65535;
                    break;
                case 1782655589:
                    i2 = i9;
                    if (str.equals("factcheck_length_limit")) {
                        c = 148;
                        break;
                    }
                    c = 65535;
                    break;
                case 1785205890:
                    i2 = i9;
                    if (str.equals("reactions_in_chat_max")) {
                        c = 149;
                        break;
                    }
                    c = 65535;
                    break;
                case 1849807064:
                    i2 = i9;
                    if (str.equals("dialog_filters_limit_premium")) {
                        c = 150;
                        break;
                    }
                    c = 65535;
                    break;
                case 1850325103:
                    i2 = i9;
                    if (str.equals("emojies_sounds")) {
                        c = 151;
                        break;
                    }
                    c = 65535;
                    break;
                case 1907641101:
                    i2 = i9;
                    if (str.equals("group_transcribe_level_min")) {
                        c = 152;
                        break;
                    }
                    c = 65535;
                    break;
                case 1943239084:
                    i2 = i9;
                    if (str.equals("about_length_limit_premium")) {
                        c = 153;
                        break;
                    }
                    c = 65535;
                    break;
                case 1956490398:
                    i2 = i9;
                    if (str.equals("boosts_channel_level_max")) {
                        c = 154;
                        break;
                    }
                    c = 65535;
                    break;
                case 2000413432:
                    i2 = i9;
                    if (str.equals("intro_description_length_limit")) {
                        c = 155;
                        break;
                    }
                    c = 65535;
                    break;
                case 2074702027:
                    i2 = i9;
                    if (str.equals("export_private_urls")) {
                        c = 156;
                        break;
                    }
                    c = 65535;
                    break;
                case 2130452052:
                    i2 = i9;
                    if (str.equals("forum_upgrade_participants_min")) {
                        c = 157;
                        break;
                    }
                    c = 65535;
                    break;
                case 2136829446:
                    i2 = i9;
                    if (str.equals("dialog_filters_enabled")) {
                        c = 158;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    i2 = i9;
                    c = 65535;
                    break;
            }
            int i11 = i8;
            switch (c) {
                case 0:
                    TLRPC$JSONValue tLRPC$JSONValue = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue instanceof TLRPC$TL_jsonNumber) {
                        double d = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue).value;
                        if (d != this.chatlistJoinedLimitPremium) {
                            int i12 = (int) d;
                            this.chatlistJoinedLimitPremium = i12;
                            edit.putInt("chatlistJoinedLimitPremium", i12);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 1:
                    TLRPC$JSONValue tLRPC$JSONValue2 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue2 instanceof TLRPC$TL_jsonBool) {
                        boolean z9 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue2).value;
                        if (z9 != this.channelRevenueWithdrawalEnabled) {
                            this.channelRevenueWithdrawalEnabled = z9;
                            edit.putBoolean("channelRevenueWithdrawalEnabled", z9);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 2:
                    TLRPC$JSONValue tLRPC$JSONValue3 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue3 instanceof TLRPC$TL_jsonNumber) {
                        double d2 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue3).value;
                        if (d2 != this.dialogFiltersPinnedLimitPremium) {
                            int i13 = (int) d2;
                            this.dialogFiltersPinnedLimitPremium = i13;
                            edit.putInt("dialogFiltersPinnedLimitPremium", i13);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 3:
                    TLRPC$JSONValue tLRPC$JSONValue4 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue4 instanceof TLRPC$TL_jsonNumber) {
                        double d3 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue4).value;
                        if (d3 != this.businessChatLinksLimit) {
                            int i14 = (int) d3;
                            this.businessChatLinksLimit = i14;
                            edit.putInt("businessChatLinksLimit", i14);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 4:
                    TLRPC$JSONValue tLRPC$JSONValue5 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue5 instanceof TLRPC$TL_jsonString) {
                        try {
                            parseLong = Long.parseLong(((TLRPC$TL_jsonString) tLRPC$JSONValue5).value);
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                        if (parseLong != this.telegramAntispamUserId) {
                            this.telegramAntispamUserId = parseLong;
                            edit.putLong("telegramAntispamUserId", parseLong);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 5:
                    TLRPC$JSONValue tLRPC$JSONValue6 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue6 instanceof TLRPC$TL_jsonNumber) {
                        double d4 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue6).value;
                        if (d4 != this.channelCustomWallpaperLevelMin) {
                            int i15 = (int) d4;
                            this.channelCustomWallpaperLevelMin = i15;
                            edit.putInt("channelCustomWallpaperLevelMin", i15);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 6:
                    TLRPC$JSONValue tLRPC$JSONValue7 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue7 instanceof TLRPC$TL_jsonNumber) {
                        double d5 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue7).value;
                        if (this.channelRestrictSponsoredLevelMin != d5) {
                            int i16 = (int) d5;
                            this.channelRestrictSponsoredLevelMin = i16;
                            edit.putInt("channelRestrictSponsoredLevelMin", i16);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 7:
                    TLRPC$JSONValue tLRPC$JSONValue8 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue8 instanceof TLRPC$TL_jsonNumber) {
                        int i17 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue8).value;
                        this.largeQueueMaxActiveOperations = i17;
                        edit.putInt("largeQueueMaxActiveOperations", i17);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '\b':
                    TLRPC$JSONValue tLRPC$JSONValue9 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue9 instanceof TLRPC$TL_jsonNumber) {
                        double d6 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue9).value;
                        if (d6 != this.uploadMaxFileParts) {
                            int i18 = (int) d6;
                            this.uploadMaxFileParts = i18;
                            edit.putInt("uploadMaxFileParts", i18);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '\t':
                    TLRPC$JSONValue tLRPC$JSONValue10 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue10 instanceof TLRPC$TL_jsonNumber) {
                        double d7 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue10).value;
                        if (d7 != this.maxPinnedDialogsCountDefault) {
                            int i19 = (int) d7;
                            this.maxPinnedDialogsCountDefault = i19;
                            edit.putInt("maxPinnedDialogsCountDefault", i19);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '\n':
                    TLRPC$JSONValue tLRPC$JSONValue11 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue11 instanceof TLRPC$TL_jsonBool) {
                        boolean z10 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue11).value;
                        if (z10 != this.collectDeviceStats) {
                            this.collectDeviceStats = z10;
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 11:
                    TLRPC$JSONValue tLRPC$JSONValue12 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue12 instanceof TLRPC$TL_jsonNumber) {
                        double d8 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue12).value;
                        if (d8 != this.storiesSuggestedReactionsLimitDefault) {
                            int i20 = (int) d8;
                            this.storiesSuggestedReactionsLimitDefault = i20;
                            edit.putInt("storiesSuggestedReactionsLimitDefault", i20);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '\f':
                    TLRPC$JSONValue tLRPC$JSONValue13 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue13 instanceof TLRPC$TL_jsonBool) {
                        boolean z11 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue13).value;
                        if (z11 != this.starsGiftsEnabled) {
                            this.starsGiftsEnabled = z11;
                            edit.putBoolean("starsGiftsEnabled", z11);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '\r':
                    HashSet hashSet = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue14 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue14 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray = (TLRPC$TL_jsonArray) tLRPC$JSONValue14;
                        int size2 = tLRPC$TL_jsonArray.value.size();
                        for (int i21 = 0; i21 < size2; i21++) {
                            TLRPC$JSONValue tLRPC$JSONValue15 = tLRPC$TL_jsonArray.value.get(i21);
                            if (tLRPC$JSONValue15 instanceof TLRPC$TL_jsonString) {
                                hashSet.add(((TLRPC$TL_jsonString) tLRPC$JSONValue15).value);
                            }
                        }
                    }
                    if (!this.dismissedSuggestions.equals(hashSet)) {
                        this.dismissedSuggestions = hashSet;
                        edit.putStringSet("dismissedSuggestions", hashSet);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 14:
                    TLRPC$JSONValue tLRPC$JSONValue16 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue16 instanceof TLRPC$TL_jsonNumber) {
                        double d9 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue16).value;
                        if (d9 != this.pmReadDateExpirePeriod) {
                            int i22 = (int) d9;
                            this.pmReadDateExpirePeriod = i22;
                            edit.putInt("pmReadDateExpirePeriod", i22);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 15:
                    TLRPC$JSONValue tLRPC$JSONValue17 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue17 instanceof TLRPC$TL_jsonBool) {
                        boolean z12 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue17).value;
                        if (z12 != this.smsjobsStickyNotificationEnabled) {
                            this.smsjobsStickyNotificationEnabled = z12;
                            edit.putBoolean("smsjobsStickyNotificationEnabled", z12);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 16:
                    TLRPC$JSONValue tLRPC$JSONValue18 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue18 instanceof TLRPC$TL_jsonNumber) {
                        double d10 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue18).value;
                        if (d10 != this.uploadPremiumSpeedupNotifyPeriod) {
                            int i23 = (int) d10;
                            this.uploadPremiumSpeedupNotifyPeriod = i23;
                            edit.putInt("uploadPremiumSpeedupNotifyPeriod2", i23);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 17:
                    TLRPC$JSONValue tLRPC$JSONValue19 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue19 instanceof TLRPC$TL_jsonNumber) {
                        double d11 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue19).value;
                        if (d11 != this.storiesSentMonthlyLimitDefault) {
                            int i24 = (int) d11;
                            this.storiesSentMonthlyLimitDefault = i24;
                            edit.putInt("storiesSentMonthlyLimitDefault", i24);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 18:
                    TLRPC$JSONValue tLRPC$JSONValue20 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue20 instanceof TLRPC$TL_jsonNumber) {
                        double d12 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue20).value;
                        if (((int) d12) != this.botPreviewMediasMax) {
                            int i25 = (int) d12;
                            this.botPreviewMediasMax = i25;
                            edit.putInt("botPreviewMediasMax", i25);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 19:
                    TLRPC$JSONValue tLRPC$JSONValue21 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue21 instanceof TLRPC$TL_jsonBool) {
                        boolean z13 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue21).value;
                        if (z13 != this.showFiltersTooltip) {
                            this.showFiltersTooltip = z13;
                            edit.putBoolean("showFiltersTooltip", z13);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.filterSettingsUpdated, new Object[0]);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 20:
                    TLRPC$JSONValue tLRPC$JSONValue22 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue22 instanceof TLRPC$TL_jsonBool) {
                        boolean z14 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue22).value;
                        if (z14 != this.qrLoginCamera) {
                            this.qrLoginCamera = z14;
                            edit.putBoolean("qrLoginCamera", z14);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 21:
                    TLRPC$JSONValue tLRPC$JSONValue23 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue23 instanceof TLRPC$TL_jsonBool) && this.starsLocked != ((TLRPC$TL_jsonBool) tLRPC$JSONValue23).value) {
                        boolean z15 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue23).value;
                        this.starsLocked = z15;
                        edit.putBoolean("starsLocked", z15);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case 22:
                    TLRPC$JSONValue tLRPC$JSONValue24 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue24 instanceof TLRPC$TL_jsonNumber) {
                        double d13 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue24).value;
                        if (d13 != this.groupCustomWallpaperLevelMin) {
                            int i26 = (int) d13;
                            this.groupCustomWallpaperLevelMin = i26;
                            edit.putInt("groupCustomWallpaperLevelMin", i26);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 23:
                    TLRPC$JSONValue tLRPC$JSONValue25 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue25 instanceof TLRPC$TL_jsonNumber) {
                        long j = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue25).value;
                        if (j != this.giveawayAddPeersMax) {
                            this.giveawayAddPeersMax = j;
                            edit.putLong("giveaway_add_peers_max", j);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 24:
                    TLRPC$JSONValue tLRPC$JSONValue26 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue26 instanceof TLRPC$TL_jsonNumber) {
                        double d14 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue26).value;
                        if (d14 != this.channelWallpaperLevelMin) {
                            int i27 = (int) d14;
                            this.channelWallpaperLevelMin = i27;
                            edit.putInt("channelWallpaperLevelMin", i27);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 25:
                    TLRPC$JSONValue tLRPC$JSONValue27 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue27 instanceof TLRPC$TL_jsonNumber) {
                        double d15 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue27).value;
                        if (d15 != this.chatlistUpdatePeriod) {
                            int i28 = (int) d15;
                            this.chatlistUpdatePeriod = i28;
                            edit.putInt("chatlistUpdatePeriod", i28);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 26:
                    TLRPC$JSONValue tLRPC$JSONValue28 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue28 instanceof TLRPC$TL_jsonNumber) {
                        double d16 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue28).value;
                        if (((long) d16) != this.starsSubscriptionAmountMax) {
                            long j2 = (long) d16;
                            this.starsSubscriptionAmountMax = j2;
                            edit.putLong("starsSubscriptionAmountMax", j2);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 27:
                    TLRPC$JSONValue tLRPC$JSONValue29 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue29 instanceof TLRPC$TL_jsonNumber) {
                        double d17 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue29).value;
                        if (d17 != this.groupWallpaperLevelMin) {
                            int i29 = (int) d17;
                            this.groupWallpaperLevelMin = i29;
                            edit.putInt("groupWallpaperLevelMin", i29);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 28:
                    TLRPC$JSONValue tLRPC$JSONValue30 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue30 instanceof TLRPC$TL_jsonNumber) {
                        double d18 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue30).value;
                        if (d18 != this.channelEmojiStatusLevelMin) {
                            int i30 = (int) d18;
                            this.channelEmojiStatusLevelMin = i30;
                            edit.putInt("channelEmojiStatusLevelMin", i30);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 29:
                    HashSet hashSet2 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue31 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue31 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray2 = (TLRPC$TL_jsonArray) tLRPC$JSONValue31;
                        int size3 = tLRPC$TL_jsonArray2.value.size();
                        for (int i31 = 0; i31 < size3; i31++) {
                            TLRPC$JSONValue tLRPC$JSONValue32 = tLRPC$TL_jsonArray2.value.get(i31);
                            if (tLRPC$JSONValue32 instanceof TLRPC$TL_jsonString) {
                                hashSet2.add(((TLRPC$TL_jsonString) tLRPC$JSONValue32).value);
                            }
                        }
                    }
                    if (!this.pendingSuggestions.equals(hashSet2)) {
                        this.pendingSuggestions = hashSet2;
                        edit.putStringSet("pendingSuggestions", hashSet2);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 30:
                    TLRPC$JSONValue tLRPC$JSONValue33 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue33 instanceof TLRPC$TL_jsonNumber) {
                        double d19 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue33).value;
                        if (d19 != this.publicLinksLimitPremium) {
                            int i32 = (int) d19;
                            this.publicLinksLimitPremium = i32;
                            edit.putInt("publicLinksLimitPremium", i32);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_actionModeWebSearchDrawable /* 31 */:
                    TLRPC$JSONValue tLRPC$JSONValue34 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue34 instanceof TLRPC$TL_jsonNumber) {
                        double d20 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue34).value;
                        if (d20 != this.storyExpiringLimitPremium) {
                            int i33 = (int) d20;
                            this.storyExpiringLimitPremium = i33;
                            edit.putInt("storyExpiringLimitPremium", i33);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case ' ':
                    TLRPC$JSONValue tLRPC$JSONValue35 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue35 instanceof TLRPC$TL_jsonNumber) {
                        double d21 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue35).value;
                        if (d21 != this.groupProfileBgIconLevelMin) {
                            int i34 = (int) d21;
                            this.groupProfileBgIconLevelMin = i34;
                            edit.putInt("groupProfileBgIconLevelMin", i34);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_actionOverflowMenuStyle /* 33 */:
                    TLRPC$JSONValue tLRPC$JSONValue36 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue36 instanceof TLRPC$TL_jsonNumber) {
                        TLRPC$TL_jsonNumber tLRPC$TL_jsonNumber = (TLRPC$TL_jsonNumber) tLRPC$JSONValue36;
                        double d22 = tLRPC$TL_jsonNumber.value;
                        double d23 = this.uploadPremiumSpeedupDownload;
                        Double.isNaN(d23);
                        if (Math.abs(d22 - d23) >= 0.009999999776482582d) {
                            float f = (float) tLRPC$TL_jsonNumber.value;
                            this.uploadPremiumSpeedupDownload = f;
                            edit.putFloat("uploadPremiumSpeedupDownload", f);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_activityChooserViewStyle /* 34 */:
                    HashSet hashSet3 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue37 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue37 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray3 = (TLRPC$TL_jsonArray) tLRPC$JSONValue37;
                        int size4 = tLRPC$TL_jsonArray3.value.size();
                        for (int i35 = 0; i35 < size4; i35++) {
                            TLRPC$JSONValue tLRPC$JSONValue38 = tLRPC$TL_jsonArray3.value.get(i35);
                            if (tLRPC$JSONValue38 instanceof TLRPC$TL_jsonString) {
                                hashSet3.add(((TLRPC$TL_jsonString) tLRPC$JSONValue38).value.toLowerCase());
                            }
                        }
                    }
                    if (!this.ignoreRestrictionReasons.equals(hashSet3)) {
                        this.ignoreRestrictionReasons = hashSet3;
                        edit.putStringSet("ignoreRestrictionReasons", hashSet3);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_alertDialogButtonGroupStyle /* 35 */:
                    TLRPC$JSONValue tLRPC$JSONValue39 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue39 instanceof TLRPC$TL_jsonBool) {
                        boolean z16 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue39).value;
                        if (z16 != this.newNoncontactPeersRequirePremiumWithoutOwnpremium) {
                            this.newNoncontactPeersRequirePremiumWithoutOwnpremium = z16;
                            edit.putBoolean("newNoncontactPeersRequirePremiumWithoutOwnpremium", z16);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_alertDialogCenterButtons /* 36 */:
                    TLRPC$JSONValue tLRPC$JSONValue40 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue40 instanceof TLRPC$TL_jsonNumber) {
                        double d24 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue40).value;
                        if (d24 != this.quickReplyMessagesLimit) {
                            int i36 = (int) d24;
                            this.quickReplyMessagesLimit = i36;
                            edit.putInt("quickReplyMessagesLimit", i36);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_alertDialogStyle /* 37 */:
                    TLRPC$JSONValue tLRPC$JSONValue41 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue41 instanceof TLRPC$TL_jsonNumber) {
                        double d25 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue41).value;
                        if (d25 != this.stickersFavedLimitPremium) {
                            int i37 = (int) d25;
                            this.stickersFavedLimitPremium = i37;
                            edit.putInt("stickersFavedLimitPremium", i37);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_alertDialogTheme /* 38 */:
                    TLRPC$JSONValue tLRPC$JSONValue42 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue42 instanceof TLRPC$TL_jsonNumber) {
                        int i38 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue42).value;
                        this.stealthModeCooldown = i38;
                        edit.putInt("stories_stealth_cooldown_period", i38);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_autoCompleteTextViewStyle /* 39 */:
                    TLRPC$JSONValue tLRPC$JSONValue43 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue43 instanceof TLRPC$TL_jsonObject) {
                        tLRPC$TL_jsonObject5 = (TLRPC$TL_jsonObject) tLRPC$JSONValue43;
                        i9 = i2;
                        z3 = z6;
                        z5 = z7;
                        z4 = z8;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_borderlessButtonStyle /* 40 */:
                    TLRPC$JSONValue tLRPC$JSONValue44 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue44 instanceof TLRPC$TL_jsonNumber) && (i6 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue44).value) > 0) {
                        SharedConfig.overrideDevicePerformanceClass(i6 - 1);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case R.styleable.AppCompatTheme_buttonBarButtonStyle /* 41 */:
                    TLRPC$JSONValue tLRPC$JSONValue45 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue45 instanceof TLRPC$TL_jsonBool) && this.giftTextFieldIcon != ((TLRPC$TL_jsonBool) tLRPC$JSONValue45).value) {
                        boolean z17 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue45).value;
                        this.giftTextFieldIcon = z17;
                        edit.putBoolean("giftTextFieldIcon", z17);
                        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdatePremiumGiftFieldIcon, new Object[0]);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case R.styleable.AppCompatTheme_buttonBarNegativeButtonStyle /* 42 */:
                    TLRPC$JSONValue tLRPC$JSONValue46 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue46 instanceof TLRPC$TL_jsonNumber) {
                        double d26 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue46).value;
                        if (d26 != this.chatReadMarkExpirePeriod) {
                            int i39 = (int) d26;
                            this.chatReadMarkExpirePeriod = i39;
                            edit.putInt("chatReadMarkExpirePeriod", i39);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_buttonBarNeutralButtonStyle /* 43 */:
                    TLRPC$JSONValue tLRPC$JSONValue47 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue47 instanceof TLRPC$TL_jsonBool) {
                        double d27 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue47).value;
                        if (d27 != this.reactionsUniqMax) {
                            int i40 = (int) d27;
                            this.reactionsUniqMax = i40;
                            edit.putInt("reactionsUniqMax", i40);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_buttonBarPositiveButtonStyle /* 44 */:
                    HashSet<String> hashSet4 = new HashSet<>();
                    TLRPC$JSONValue tLRPC$JSONValue48 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue48 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray4 = (TLRPC$TL_jsonArray) tLRPC$JSONValue48;
                        int size5 = tLRPC$TL_jsonArray4.value.size();
                        for (int i41 = 0; i41 < size5; i41++) {
                            TLRPC$JSONValue tLRPC$JSONValue49 = tLRPC$TL_jsonArray4.value.get(i41);
                            if (tLRPC$JSONValue49 instanceof TLRPC$TL_jsonString) {
                                hashSet4.add(((TLRPC$TL_jsonString) tLRPC$JSONValue49).value.replace("️", ""));
                            }
                        }
                    }
                    if (!this.diceEmojies.equals(hashSet4)) {
                        this.diceEmojies = hashSet4;
                        edit.putStringSet("diceEmojies", hashSet4);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_buttonBarStyle /* 45 */:
                    HashSet hashSet5 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue50 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue50 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray5 = (TLRPC$TL_jsonArray) tLRPC$JSONValue50;
                        int size6 = tLRPC$TL_jsonArray5.value.size();
                        for (int i42 = 0; i42 < size6; i42++) {
                            TLRPC$JSONValue tLRPC$JSONValue51 = tLRPC$TL_jsonArray5.value.get(i42);
                            if (tLRPC$JSONValue51 instanceof TLRPC$TL_jsonString) {
                                hashSet5.add(((TLRPC$TL_jsonString) tLRPC$JSONValue51).value);
                            }
                        }
                    }
                    if (!this.authDomains.equals(hashSet5)) {
                        this.authDomains = hashSet5;
                        edit.putStringSet("authDomains", hashSet5);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_buttonStyle /* 46 */:
                    TLRPC$JSONValue tLRPC$JSONValue52 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue52 instanceof TLRPC$TL_jsonNumber) {
                        double d28 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue52).value;
                        if (((long) d28) != this.starsRevenueWithdrawalMin) {
                            long j3 = (long) d28;
                            this.starsRevenueWithdrawalMin = j3;
                            edit.putLong("starsRevenueWithdrawalMin", j3);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_buttonStyleSmall /* 47 */:
                    TLRPC$JSONValue tLRPC$JSONValue53 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue53 instanceof TLRPC$TL_jsonNumber) {
                        int i43 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue53).value;
                        this.stealthModePast = i43;
                        edit.putInt("stories_stealth_past_period", i43);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_checkboxStyle /* 48 */:
                    TLRPC$JSONValue tLRPC$JSONValue54 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue54 instanceof TLRPC$TL_jsonNumber) {
                        double d29 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue54).value;
                        if (d29 != this.savedDialogsPinnedLimitPremium) {
                            int i44 = (int) d29;
                            this.savedDialogsPinnedLimitPremium = i44;
                            edit.putInt("savedDialogsPinnedLimitPremium", i44);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_checkedTextViewStyle /* 49 */:
                    TLRPC$JSONValue tLRPC$JSONValue55 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue55 instanceof TLRPC$TL_jsonNumber) {
                        double d30 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue55).value;
                        if (d30 != this.savedGifsLimitDefault) {
                            int i45 = (int) d30;
                            this.savedGifsLimitDefault = i45;
                            edit.putInt("savedGifsLimitDefault", i45);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorAccent /* 50 */:
                    TLRPC$JSONValue tLRPC$JSONValue56 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue56 instanceof TLRPC$TL_jsonNumber) {
                        double d31 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue56).value;
                        if (d31 != this.storyCaptionLengthLimitDefault) {
                            int i46 = (int) d31;
                            this.storyCaptionLengthLimitDefault = i46;
                            edit.putInt("storyCaptionLengthLimit", i46);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorBackgroundFloating /* 51 */:
                    TLRPC$JSONValue tLRPC$JSONValue57 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue57 instanceof TLRPC$TL_jsonBool) {
                        boolean z18 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue57).value;
                        if (z18 != this.showAnnualPerMonth) {
                            this.showAnnualPerMonth = z18;
                            edit.putBoolean("showAnnualPerMonth", z18);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorButtonNormal /* 52 */:
                    TLRPC$JSONValue tLRPC$JSONValue58 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue58 instanceof TLRPC$TL_jsonNumber) {
                        double d32 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue58).value;
                        if (d32 != this.dialogFiltersLimitDefault) {
                            int i47 = (int) d32;
                            this.dialogFiltersLimitDefault = i47;
                            edit.putInt("dialogFiltersLimitDefault", i47);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorControlActivated /* 53 */:
                    TLRPC$JSONValue tLRPC$JSONValue59 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue59 instanceof TLRPC$TL_jsonString) {
                        String str2 = ((TLRPC$TL_jsonString) tLRPC$JSONValue59).value;
                        if (!str2.equals(this.premiumInvoiceSlug)) {
                            this.premiumInvoiceSlug = str2;
                            edit.putString("premiumInvoiceSlug", str2);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorControlHighlight /* 54 */:
                    TLRPC$JSONValue tLRPC$JSONValue60 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue60 instanceof TLRPC$TL_jsonNumber) {
                        double d33 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue60).value;
                        if (d33 != this.storiesSentWeeklyLimitPremium) {
                            int i48 = (int) d33;
                            this.storiesSentWeeklyLimitPremium = i48;
                            edit.putInt("storiesSentWeeklyLimitPremium", i48);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorControlNormal /* 55 */:
                    TLRPC$JSONValue tLRPC$JSONValue61 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue61 instanceof TLRPC$TL_jsonBool) {
                        boolean z19 = this.storiesExportNopublicLink;
                        boolean z20 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue61).value;
                        if (z19 != z20) {
                            this.storiesExportNopublicLink = z20;
                            edit.putBoolean("storiesExportNopublicLink", z20);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorError /* 56 */:
                    HashSet hashSet6 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue62 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue62 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray6 = (TLRPC$TL_jsonArray) tLRPC$JSONValue62;
                        int size7 = tLRPC$TL_jsonArray6.value.size();
                        for (int i49 = 0; i49 < size7; i49++) {
                            TLRPC$JSONValue tLRPC$JSONValue63 = tLRPC$TL_jsonArray6.value.get(i49);
                            if (tLRPC$JSONValue63 instanceof TLRPC$TL_jsonString) {
                                hashSet6.add(((TLRPC$TL_jsonString) tLRPC$JSONValue63).value);
                            }
                        }
                    }
                    if (!this.exportUri.equals(hashSet6)) {
                        this.exportUri = hashSet6;
                        edit.putStringSet("exportUri2", hashSet6);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorPrimary /* 57 */:
                    TLRPC$JSONValue tLRPC$JSONValue64 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue64 instanceof TLRPC$TL_jsonNumber) {
                        double d34 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue64).value;
                        if (d34 != this.chatlistInvitesLimitPremium) {
                            int i50 = (int) d34;
                            this.chatlistInvitesLimitPremium = i50;
                            edit.putInt("chatlistInvitesLimitPremium", i50);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorPrimaryDark /* 58 */:
                    TLRPC$JSONValue tLRPC$JSONValue65 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue65 instanceof TLRPC$TL_jsonNumber) {
                        TLRPC$TL_jsonNumber tLRPC$TL_jsonNumber2 = (TLRPC$TL_jsonNumber) tLRPC$JSONValue65;
                        double d35 = tLRPC$TL_jsonNumber2.value;
                        double d36 = this.starsUsdSellRate1000;
                        Double.isNaN(d36);
                        if (Math.abs(d35 - d36) > 0.0010000000474974513d) {
                            float f2 = (float) tLRPC$TL_jsonNumber2.value;
                            this.starsUsdSellRate1000 = f2;
                            edit.putFloat("starsUsdSellRate1000", f2);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_colorSwitchThumbNormal /* 59 */:
                    TLRPC$JSONValue tLRPC$JSONValue66 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue66 instanceof TLRPC$TL_jsonNumber) {
                        double d37 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue66).value;
                        if (d37 != this.aboutLengthLimitDefault) {
                            int i51 = (int) d37;
                            this.aboutLengthLimitDefault = i51;
                            edit.putInt("aboutLengthLimitDefault", i51);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_controlBackground /* 60 */:
                    TLRPC$JSONValue tLRPC$JSONValue67 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue67 instanceof TLRPC$TL_jsonNumber) {
                        double d38 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue67).value;
                        if (d38 != this.reactionsUserMaxPremium) {
                            int i52 = (int) d38;
                            this.reactionsUserMaxPremium = i52;
                            edit.putInt("reactionsUserMaxPremium", i52);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_dialogCornerRadius /* 61 */:
                    TLRPC$JSONValue tLRPC$JSONValue68 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue68 instanceof TLRPC$TL_jsonNumber) {
                        double d39 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue68).value;
                        if (d39 != this.captionLengthLimitPremium) {
                            int i53 = (int) d39;
                            this.captionLengthLimitPremium = i53;
                            edit.putInt("captionLengthLimitPremium", i53);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_dialogPreferredPadding /* 62 */:
                    TLRPC$JSONValue tLRPC$JSONValue69 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue69 instanceof TLRPC$TL_jsonNumber) {
                        double d40 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue69).value;
                        if (this.recommendedChannelsLimitPremium != d40) {
                            int i54 = (int) d40;
                            this.recommendedChannelsLimitPremium = i54;
                            edit.putInt("recommendedChannelsLimitPremium", i54);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_dialogTheme /* 63 */:
                    TLRPC$JSONValue tLRPC$JSONValue70 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue70 instanceof TLRPC$TL_jsonBool) {
                        boolean z21 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue70).value;
                        if (z21 != this.keepAliveService) {
                            this.keepAliveService = z21;
                            edit.putBoolean("keepAliveService", z21);
                            z3 = true;
                            z4 = true;
                            i9 = i2;
                            z5 = z7;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        z4 = z8;
                        i9 = i2;
                        z5 = z7;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '@':
                    TLRPC$JSONValue tLRPC$JSONValue71 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue71 instanceof TLRPC$TL_jsonArray) {
                        z3 = savePremiumFeaturesPreviewOrder("premiumFeaturesTypesToPosition", this.premiumFeaturesTypesToPosition, edit, ((TLRPC$TL_jsonArray) tLRPC$JSONValue71).value);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'A':
                    TLRPC$JSONValue tLRPC$JSONValue72 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue72 instanceof TLRPC$TL_jsonNumber) {
                        double d41 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue72).value;
                        if (d41 != this.ringtoneSizeMax) {
                            int i55 = (int) d41;
                            this.ringtoneSizeMax = i55;
                            edit.putInt("ringtoneSizeMax", i55);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_dropDownListViewStyle /* 66 */:
                    TLRPC$JSONValue tLRPC$JSONValue73 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue73 instanceof TLRPC$TL_jsonNumber) {
                        double d42 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue73).value;
                        if (d42 != this.dialogFiltersChatsLimitPremium) {
                            int i56 = (int) d42;
                            this.dialogFiltersChatsLimitPremium = i56;
                            edit.putInt("dialogFiltersChatsLimitPremium", i56);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_dropdownListPreferredItemHeight /* 67 */:
                    TLRPC$JSONValue tLRPC$JSONValue74 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue74 instanceof TLRPC$TL_jsonArray) {
                        z3 = savePremiumFeaturesPreviewOrder("businessFeaturesTypesToPosition", this.businessFeaturesTypesToPosition, edit, ((TLRPC$TL_jsonArray) tLRPC$JSONValue74).value);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_editTextBackground /* 68 */:
                    TLRPC$JSONValue tLRPC$JSONValue75 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue75 instanceof TLRPC$TL_jsonNumber) {
                        double d43 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue75).value;
                        if (d43 != this.chatlistJoinedLimitDefault) {
                            int i57 = (int) d43;
                            this.chatlistJoinedLimitDefault = i57;
                            edit.putInt("chatlistJoinedLimitDefault", i57);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_editTextColor /* 69 */:
                    TLRPC$JSONValue tLRPC$JSONValue76 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue76 instanceof TLRPC$TL_jsonNumber) {
                        double d44 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue76).value;
                        if (d44 != this.storiesPinnedToTopCountMax) {
                            int i58 = (int) d44;
                            this.storiesPinnedToTopCountMax = i58;
                            edit.putInt("storiesPinnedToTopCountMax", i58);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_editTextStyle /* 70 */:
                    TLRPC$JSONValue tLRPC$JSONValue77 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue77 instanceof TLRPC$TL_jsonNumber) {
                        double d45 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue77).value;
                        if (d45 != this.channelsLimitPremium) {
                            int i59 = (int) d45;
                            this.channelsLimitPremium = i59;
                            edit.putInt("channelsLimitPremium", i59);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_homeAsUpIndicator /* 71 */:
                    TLRPC$JSONValue tLRPC$JSONValue78 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue78 instanceof TLRPC$TL_jsonBool) {
                        boolean z22 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue78).value;
                        if (z22 != this.backgroundConnection) {
                            this.backgroundConnection = z22;
                            edit.putBoolean("backgroundConnection", z22);
                            z3 = true;
                            z4 = true;
                            i9 = i2;
                            z5 = z7;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        z4 = z8;
                        i9 = i2;
                        z5 = z7;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_imageButtonStyle /* 72 */:
                    TLRPC$JSONValue tLRPC$JSONValue79 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue79 instanceof TLRPC$TL_jsonNumber) {
                        long j4 = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue79).value;
                        if (j4 != this.giveawayPeriodMax) {
                            this.giveawayPeriodMax = j4;
                            edit.putLong("giveaway_period_max", j4);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listChoiceBackgroundIndicator /* 73 */:
                    try {
                        hashMap = new HashMap<>();
                        TLRPC$JSONValue tLRPC$JSONValue80 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue80 instanceof TLRPC$TL_jsonObject) {
                            TLRPC$TL_jsonObject tLRPC$TL_jsonObject7 = (TLRPC$TL_jsonObject) tLRPC$JSONValue80;
                            int size8 = tLRPC$TL_jsonObject7.value.size();
                            int i60 = 0;
                            while (i60 < size8) {
                                TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue2 = tLRPC$TL_jsonObject7.value.get(i60);
                                TLRPC$JSONValue tLRPC$JSONValue81 = tLRPC$TL_jsonObjectValue2.value;
                                if (tLRPC$JSONValue81 instanceof TLRPC$TL_jsonObject) {
                                    TLRPC$TL_jsonObject tLRPC$TL_jsonObject8 = (TLRPC$TL_jsonObject) tLRPC$JSONValue81;
                                    int size9 = tLRPC$TL_jsonObject8.value.size();
                                    int i61 = 0;
                                    int i62 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    int i63 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    while (i61 < size9) {
                                        TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue3 = tLRPC$TL_jsonObject8.value.get(i61);
                                        TLRPC$TL_jsonObject tLRPC$TL_jsonObject9 = tLRPC$TL_jsonObject7;
                                        if (tLRPC$TL_jsonObjectValue3.value instanceof TLRPC$TL_jsonNumber) {
                                            i4 = size8;
                                            if ("value".equals(tLRPC$TL_jsonObjectValue3.key)) {
                                                tLRPC$TL_jsonObject3 = tLRPC$TL_jsonObject8;
                                                i5 = size9;
                                                i63 = (int) ((TLRPC$TL_jsonNumber) tLRPC$TL_jsonObjectValue3.value).value;
                                            } else {
                                                tLRPC$TL_jsonObject3 = tLRPC$TL_jsonObject8;
                                                i5 = size9;
                                                if ("frame_start".equals(tLRPC$TL_jsonObjectValue3.key)) {
                                                    i62 = (int) ((TLRPC$TL_jsonNumber) tLRPC$TL_jsonObjectValue3.value).value;
                                                }
                                            }
                                        } else {
                                            i4 = size8;
                                            tLRPC$TL_jsonObject3 = tLRPC$TL_jsonObject8;
                                            i5 = size9;
                                        }
                                        i61++;
                                        tLRPC$TL_jsonObject8 = tLRPC$TL_jsonObject3;
                                        tLRPC$TL_jsonObject7 = tLRPC$TL_jsonObject9;
                                        size8 = i4;
                                        size9 = i5;
                                    }
                                    tLRPC$TL_jsonObject2 = tLRPC$TL_jsonObject7;
                                    i3 = size8;
                                    if (i62 != Integer.MAX_VALUE && i63 != Integer.MAX_VALUE) {
                                        hashMap.put(tLRPC$TL_jsonObjectValue2.key.replace("️", ""), new DiceFrameSuccess(i62, i63));
                                    }
                                } else {
                                    tLRPC$TL_jsonObject2 = tLRPC$TL_jsonObject7;
                                    i3 = size8;
                                }
                                i60++;
                                tLRPC$TL_jsonObject7 = tLRPC$TL_jsonObject2;
                                size8 = i3;
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                        break;
                    }
                    if (!this.diceSuccess.equals(hashMap)) {
                        this.diceSuccess = hashMap;
                        SerializedData serializedData = new SerializedData();
                        serializedData.writeInt32(this.diceSuccess.size());
                        for (Map.Entry<String, DiceFrameSuccess> entry : this.diceSuccess.entrySet()) {
                            serializedData.writeString(entry.getKey());
                            DiceFrameSuccess value = entry.getValue();
                            serializedData.writeInt32(value.frame);
                            serializedData.writeInt32(value.num);
                        }
                        edit.putString("diceSuccess", Base64.encodeToString(serializedData.toByteArray(), 0));
                        serializedData.cleanup();
                        z3 = true;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    z3 = z6;
                    i9 = i2;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case R.styleable.AppCompatTheme_listChoiceIndicatorMultipleAnimated /* 74 */:
                    TLRPC$JSONValue tLRPC$JSONValue82 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue82 instanceof TLRPC$TL_jsonNumber) {
                        double d46 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue82).value;
                        if (d46 != this.dialogFiltersPinnedLimitDefault) {
                            int i64 = (int) d46;
                            this.dialogFiltersPinnedLimitDefault = i64;
                            edit.putInt("dialogFiltersPinnedLimitDefault", i64);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listChoiceIndicatorSingleAnimated /* 75 */:
                    TLRPC$JSONValue tLRPC$JSONValue83 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue83 instanceof TLRPC$TL_jsonNumber) {
                        double d47 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue83).value;
                        if (d47 != this.hiddenMembersGroupSizeMin) {
                            int i65 = (int) d47;
                            this.hiddenMembersGroupSizeMin = i65;
                            edit.putInt("hiddenMembersGroupSizeMin", i65);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listDividerAlertDialog /* 76 */:
                    TLRPC$JSONValue tLRPC$JSONValue84 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue84 instanceof TLRPC$TL_jsonBool) {
                        boolean z23 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue84).value;
                        if (z23 != this.autoarchiveAvailable) {
                            this.autoarchiveAvailable = z23;
                            edit.putBoolean("autoarchiveAvailable", z23);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listMenuViewStyle /* 77 */:
                    TLRPC$JSONValue tLRPC$JSONValue85 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue85 instanceof TLRPC$TL_jsonNumber) {
                        double d48 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue85).value;
                        if (d48 != this.quickRepliesLimit) {
                            int i66 = (int) d48;
                            this.quickRepliesLimit = i66;
                            edit.putInt("quickRepliesLimit", i66);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPopupWindowStyle /* 78 */:
                    TLRPC$JSONValue tLRPC$JSONValue86 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue86 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString = (TLRPC$TL_jsonString) tLRPC$JSONValue86;
                        if (!tLRPC$TL_jsonString.value.equals(this.youtubePipType)) {
                            String str3 = tLRPC$TL_jsonString.value;
                            this.youtubePipType = str3;
                            edit.putString("youtubePipType", str3);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPreferredItemHeight /* 79 */:
                    TLRPC$JSONValue tLRPC$JSONValue87 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue87 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString2 = (TLRPC$TL_jsonString) tLRPC$JSONValue87;
                        if (!TextUtils.equals(tLRPC$TL_jsonString2.value, this.tonProxyAddress)) {
                            String str4 = tLRPC$TL_jsonString2.value;
                            this.tonProxyAddress = str4;
                            edit.putString("tonProxyAddress", str4);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'P':
                    TLRPC$JSONValue tLRPC$JSONValue88 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue88 instanceof TLRPC$TL_jsonNumber) {
                        double d49 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue88).value;
                        if (this.animatedEmojisZoom != d49) {
                            float f3 = (float) d49;
                            this.animatedEmojisZoom = f3;
                            edit.putFloat("animatedEmojisZoom", f3);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPreferredItemHeightSmall /* 81 */:
                    TLRPC$JSONValue tLRPC$JSONValue89 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue89 instanceof TLRPC$TL_jsonNumber) {
                        double d50 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue89).value;
                        if (d50 != this.telegramAntispamGroupSizeMin) {
                            int i67 = (int) d50;
                            this.telegramAntispamGroupSizeMin = i67;
                            edit.putInt("telegramAntispamGroupSizeMin", i67);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPreferredItemPaddingEnd /* 82 */:
                    TLRPC$JSONValue tLRPC$JSONValue90 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue90 instanceof TLRPC$TL_jsonBool) && this.giveawayGiftsPurchaseAvailable != ((TLRPC$TL_jsonBool) tLRPC$JSONValue90).value) {
                        boolean z24 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue90).value;
                        this.giveawayGiftsPurchaseAvailable = z24;
                        edit.putBoolean("giveawayGiftsPurchaseAvailable", z24);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case R.styleable.AppCompatTheme_listPreferredItemPaddingLeft /* 83 */:
                    TLRPC$JSONValue tLRPC$JSONValue91 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue91 instanceof TLRPC$TL_jsonNumber) {
                        double d51 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue91).value;
                        if (((long) d51) != this.starsPaidReactionAmountMax) {
                            long j5 = (long) d51;
                            this.starsPaidReactionAmountMax = j5;
                            edit.putLong("starsPaidReactionAmountMax", j5);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPreferredItemPaddingRight /* 84 */:
                    TLRPC$JSONValue tLRPC$JSONValue92 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue92 instanceof TLRPC$TL_jsonBool) {
                        boolean z25 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue92).value;
                        if (z25 != this.suggestStickersApiOnly) {
                            this.suggestStickersApiOnly = z25;
                            edit.putBoolean("suggestStickersApiOnly", z25);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_listPreferredItemPaddingStart /* 85 */:
                    ArrayList<String> arrayList = new ArrayList<>();
                    TLRPC$JSONValue tLRPC$JSONValue93 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue93 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray7 = (TLRPC$TL_jsonArray) tLRPC$JSONValue93;
                        int size10 = tLRPC$TL_jsonArray7.value.size();
                        for (int i68 = 0; i68 < size10; i68++) {
                            TLRPC$JSONValue tLRPC$JSONValue94 = tLRPC$TL_jsonArray7.value.get(i68);
                            if (tLRPC$JSONValue94 instanceof TLRPC$TL_jsonString) {
                                arrayList.add(((TLRPC$TL_jsonString) tLRPC$JSONValue94).value.replace("️", ""));
                            }
                        }
                    }
                    if (!this.gifSearchEmojies.equals(arrayList)) {
                        this.gifSearchEmojies = arrayList;
                        SerializedData serializedData2 = new SerializedData();
                        serializedData2.writeInt32(this.gifSearchEmojies.size());
                        int size11 = this.gifSearchEmojies.size();
                        for (int i69 = 0; i69 < size11; i69++) {
                            serializedData2.writeString(this.gifSearchEmojies.get(i69));
                        }
                        edit.putString("gifSearchEmojies", Base64.encodeToString(serializedData2.toByteArray(), 0));
                        serializedData2.cleanup();
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'V':
                    HashSet hashSet7 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue95 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue95 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray8 = (TLRPC$TL_jsonArray) tLRPC$JSONValue95;
                        int size12 = tLRPC$TL_jsonArray8.value.size();
                        for (int i70 = 0; i70 < size12; i70++) {
                            TLRPC$JSONValue tLRPC$JSONValue96 = tLRPC$TL_jsonArray8.value.get(i70);
                            if (tLRPC$JSONValue96 instanceof TLRPC$TL_jsonString) {
                                hashSet7.add(((TLRPC$TL_jsonString) tLRPC$JSONValue96).value);
                            }
                        }
                    }
                    if (!this.autologinDomains.equals(hashSet7)) {
                        this.autologinDomains = hashSet7;
                        edit.putStringSet("autologinDomains", hashSet7);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_panelMenuListTheme /* 87 */:
                    HashSet hashSet8 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue97 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue97 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray9 = (TLRPC$TL_jsonArray) tLRPC$JSONValue97;
                        int size13 = tLRPC$TL_jsonArray9.value.size();
                        for (int i71 = 0; i71 < size13; i71++) {
                            TLRPC$JSONValue tLRPC$JSONValue98 = tLRPC$TL_jsonArray9.value.get(i71);
                            if (tLRPC$JSONValue98 instanceof TLRPC$TL_jsonString) {
                                hashSet8.add(((TLRPC$TL_jsonString) tLRPC$JSONValue98).value);
                            }
                        }
                    }
                    if (!this.exportGroupUri.equals(hashSet8)) {
                        this.exportGroupUri = hashSet8;
                        edit.putStringSet("exportGroupUri", hashSet8);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_panelMenuListWidth /* 88 */:
                    TLRPC$JSONValue tLRPC$JSONValue99 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue99 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString3 = (TLRPC$TL_jsonString) tLRPC$JSONValue99;
                        if (TextUtils.equals(tLRPC$TL_jsonString3.value, this.storiesPosting)) {
                            z3 = z6;
                            z5 = z7;
                        } else {
                            String str5 = tLRPC$TL_jsonString3.value;
                            this.storiesPosting = str5;
                            edit.putString("storiesPosting", str5);
                            z3 = true;
                            z5 = true;
                        }
                        i9 = i2;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_popupMenuStyle /* 89 */:
                    TLRPC$JSONValue tLRPC$JSONValue100 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue100 instanceof TLRPC$TL_jsonNumber) {
                        double d52 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue100).value;
                        if (d52 != this.channelProfileIconLevelMin) {
                            int i72 = (int) d52;
                            this.channelProfileIconLevelMin = i72;
                            edit.putInt("channelProfileIconLevelMin", i72);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_popupWindowStyle /* 90 */:
                    TLRPC$JSONValue tLRPC$JSONValue101 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue101 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString4 = (TLRPC$TL_jsonString) tLRPC$JSONValue101;
                        if (!TextUtils.equals(tLRPC$TL_jsonString4.value, this.weatherSearchUsername)) {
                            String str6 = tLRPC$TL_jsonString4.value;
                            this.weatherSearchUsername = str6;
                            edit.putString("weatherSearchUsername", str6);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_radioButtonStyle /* 91 */:
                    TLRPC$JSONValue tLRPC$JSONValue102 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue102 instanceof TLRPC$TL_jsonBool) {
                        boolean z26 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue102).value;
                        if (z26 != this.getfileExperimentalParams) {
                            this.getfileExperimentalParams = z26;
                            edit.putBoolean("getfileExperimentalParams", z26);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_ratingBarStyle /* 92 */:
                    TLRPC$JSONValue tLRPC$JSONValue103 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue103 instanceof TLRPC$TL_jsonBool) {
                        boolean z27 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue103).value;
                        if (z27 != this.canEditFactcheck) {
                            this.canEditFactcheck = z27;
                            edit.putBoolean("canEditFactcheck", z27);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_ratingBarStyleIndicator /* 93 */:
                    TLRPC$JSONValue tLRPC$JSONValue104 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue104 instanceof TLRPC$TL_jsonArray) {
                        HashSet hashSet9 = new HashSet();
                        Iterator<TLRPC$JSONValue> it = ((TLRPC$TL_jsonArray) tLRPC$JSONValue104).value.iterator();
                        while (it.hasNext()) {
                            TLRPC$JSONValue next = it.next();
                            if (next instanceof TLRPC$TL_jsonString) {
                                hashSet9.add(((TLRPC$TL_jsonString) next).value);
                            }
                        }
                        if (!this.directPaymentsCurrency.containsAll(hashSet9) || !hashSet9.containsAll(this.directPaymentsCurrency)) {
                            this.directPaymentsCurrency.clear();
                            this.directPaymentsCurrency.addAll(hashSet9);
                            edit.putStringSet("directPaymentsCurrency", hashSet9);
                            NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.billingProductDetailsUpdated, new Object[0]);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case R.styleable.AppCompatTheme_ratingBarStyleSmall /* 94 */:
                    TLRPC$JSONValue tLRPC$JSONValue105 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue105 instanceof TLRPC$TL_jsonNumber) {
                        double d53 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue105).value;
                        if (d53 != this.checkResetLangpack) {
                            int i73 = (int) d53;
                            this.checkResetLangpack = i73;
                            edit.putInt("checkResetLangpack", i73);
                            LocaleController.getInstance().checkPatchLangpack(this.currentAccount);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_searchViewStyle /* 95 */:
                    TLRPC$JSONValue tLRPC$JSONValue106 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue106 instanceof TLRPC$TL_jsonNumber) {
                        double d54 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue106).value;
                        if (d54 != this.publicLinksLimitDefault) {
                            int i74 = (int) d54;
                            this.publicLinksLimitDefault = i74;
                            edit.putInt("publicLinksLimit", i74);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_seekBarStyle /* 96 */:
                    TLRPC$JSONValue tLRPC$JSONValue107 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue107 instanceof TLRPC$TL_jsonNumber) {
                        double d55 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue107).value;
                        if (d55 != this.storyExpiringLimitDefault) {
                            int i75 = (int) d55;
                            this.storyExpiringLimitDefault = i75;
                            edit.putInt("storyExpiringLimitDefault", i75);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_selectableItemBackground /* 97 */:
                    TLRPC$JSONValue tLRPC$JSONValue108 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue108 instanceof TLRPC$TL_jsonNumber) {
                        int i76 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue108).value;
                        this.stealthModeFuture = i76;
                        edit.putInt("stories_stealth_future_period", i76);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_selectableItemBackgroundBorderless /* 98 */:
                    TLRPC$JSONValue tLRPC$JSONValue109 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue109 instanceof TLRPC$TL_jsonNumber) {
                        double d56 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue109).value;
                        if (d56 != this.uploadMaxFilePartsPremium) {
                            int i77 = (int) d56;
                            this.uploadMaxFilePartsPremium = i77;
                            edit.putInt("uploadMaxFilePartsPremium", i77);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_spinnerDropDownItemStyle /* 99 */:
                    TLRPC$JSONValue tLRPC$JSONValue110 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue110 instanceof TLRPC$TL_jsonNumber) {
                        double d57 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue110).value;
                        if (d57 != this.maxPinnedDialogsCountPremium) {
                            int i78 = (int) d57;
                            this.maxPinnedDialogsCountPremium = i78;
                            edit.putInt("maxPinnedDialogsCountPremium", i78);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'd':
                    TLRPC$JSONValue tLRPC$JSONValue111 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue111 instanceof TLRPC$TL_jsonNumber) {
                        double d58 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue111).value;
                        if (d58 != this.storiesSuggestedReactionsLimitPremium) {
                            int i79 = (int) d58;
                            this.storiesSuggestedReactionsLimitPremium = i79;
                            edit.putInt("storiesSuggestedReactionsLimitPremium", i79);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'e':
                    TLRPC$JSONValue tLRPC$JSONValue112 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue112 instanceof TLRPC$TL_jsonNumber) {
                        double d59 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue112).value;
                        if (d59 != this.stickersFavedLimitDefault) {
                            int i80 = (int) d59;
                            this.stickersFavedLimitDefault = i80;
                            edit.putInt("stickersFavedLimitDefault", i80);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceLargePopupMenu /* 102 */:
                    TLRPC$JSONValue tLRPC$JSONValue113 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue113 instanceof TLRPC$TL_jsonNumber) {
                        long j6 = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue113).value;
                        if (j6 != this.giveawayBoostsPerPremium) {
                            this.giveawayBoostsPerPremium = j6;
                            edit.putLong("giveaway_boosts_per_premium", j6);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceListItem /* 103 */:
                    TLRPC$JSONValue tLRPC$JSONValue114 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue114 instanceof TLRPC$TL_jsonNumber) {
                        double d60 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue114).value;
                        if (d60 != this.groupCallVideoMaxParticipants) {
                            int i81 = (int) d60;
                            this.groupCallVideoMaxParticipants = i81;
                            edit.putInt("groipCallVideoMaxParticipants", i81);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceListItemSecondary /* 104 */:
                    TLRPC$JSONValue tLRPC$JSONValue115 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue115 instanceof TLRPC$TL_jsonBool) {
                        boolean z28 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue115).value;
                        if (z28 != this.saveGifsWithStickers) {
                            this.saveGifsWithStickers = z28;
                            edit.putBoolean("saveGifsWithStickers", z28);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceListItemSmall /* 105 */:
                    TLRPC$JSONValue tLRPC$JSONValue116 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue116 instanceof TLRPC$TL_jsonNumber) {
                        long j7 = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue116).value;
                        if (j7 != this.boostsPerSentGift) {
                            this.boostsPerSentGift = j7;
                            edit.putLong("boosts_per_sent_gift", j7);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearancePopupMenuHeader /* 106 */:
                    TLRPC$JSONValue tLRPC$JSONValue117 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue117 instanceof TLRPC$TL_jsonNumber) {
                        double d61 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue117).value;
                        if (d61 != this.storiesSentMonthlyLimitPremium) {
                            int i82 = (int) d61;
                            this.storiesSentMonthlyLimitPremium = i82;
                            edit.putInt("storiesSentMonthlyLimitPremium", i82);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceSearchResultSubtitle /* 107 */:
                    TLRPC$JSONValue tLRPC$JSONValue118 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue118 instanceof TLRPC$TL_jsonBool) {
                        boolean z29 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue118).value;
                        if (z29 != this.androidDisableRoundCamera2) {
                            this.androidDisableRoundCamera2 = z29;
                            edit.putBoolean("androidDisableRoundCamera2", z29);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceSearchResultTitle /* 108 */:
                    TLRPC$JSONValue tLRPC$JSONValue119 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue119 instanceof TLRPC$TL_jsonString) {
                        String str7 = ((TLRPC$TL_jsonString) tLRPC$JSONValue119).value;
                        if (!Objects.equals(BuildVars.GOOGLE_AUTH_CLIENT_ID, str7)) {
                            BuildVars.GOOGLE_AUTH_CLIENT_ID = str7;
                            edit.putString("googleAuthClientId", str7);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textAppearanceSmallPopupMenu /* 109 */:
                    TLRPC$JSONValue tLRPC$JSONValue120 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue120 instanceof TLRPC$TL_jsonNumber) {
                        TLRPC$TL_jsonNumber tLRPC$TL_jsonNumber3 = (TLRPC$TL_jsonNumber) tLRPC$JSONValue120;
                        double d62 = tLRPC$TL_jsonNumber3.value;
                        double d63 = this.starsUsdWithdrawRate1000;
                        Double.isNaN(d63);
                        if (Math.abs(d62 - d63) > 0.0010000000474974513d) {
                            float f4 = (float) tLRPC$TL_jsonNumber3.value;
                            this.starsUsdWithdrawRate1000 = f4;
                            edit.putFloat("starsUsdWithdrawRate1000", f4);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textColorAlertDialogListItem /* 110 */:
                    TLRPC$JSONValue tLRPC$JSONValue121 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue121 instanceof TLRPC$TL_jsonNumber) {
                        double d64 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue121).value;
                        if (this.quoteLengthMax != d64) {
                            int i83 = (int) d64;
                            this.quoteLengthMax = i83;
                            edit.putInt("quoteLengthMax", i83);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_textColorSearchUrl /* 111 */:
                    TLRPC$JSONValue tLRPC$JSONValue122 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue122 instanceof TLRPC$TL_jsonNumber) {
                        double d65 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue122).value;
                        if (d65 != this.ringtoneDurationMax) {
                            int i84 = (int) d65;
                            this.ringtoneDurationMax = i84;
                            edit.putInt("ringtoneDurationMax", i84);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_toolbarNavigationButtonStyle /* 112 */:
                    TLRPC$JSONValue tLRPC$JSONValue123 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue123 instanceof TLRPC$TL_jsonNumber) {
                        double d66 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue123).value;
                        if (d66 != this.savedDialogsPinnedLimitDefault) {
                            int i85 = (int) d66;
                            this.savedDialogsPinnedLimitDefault = i85;
                            edit.putInt("savedDialogsPinnedLimitDefault", i85);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_toolbarStyle /* 113 */:
                    TLRPC$JSONValue tLRPC$JSONValue124 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue124 instanceof TLRPC$TL_jsonNumber) {
                        double d67 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue124).value;
                        if (d67 != this.updateCheckDelay) {
                            int i86 = (int) d67;
                            this.updateCheckDelay = i86;
                            edit.putInt("updateCheckDelay", i86);
                            z3 = true;
                        }
                        z3 = z6;
                    } else {
                        if (tLRPC$JSONValue124 instanceof TLRPC$TL_jsonString) {
                            int intValue = Utilities.parseInt((CharSequence) ((TLRPC$TL_jsonString) tLRPC$JSONValue124).value).intValue();
                            if (intValue != this.updateCheckDelay) {
                                this.updateCheckDelay = intValue;
                                edit.putInt("updateCheckDelay", intValue);
                                z3 = true;
                            }
                            z3 = z6;
                        }
                        i9 = i2;
                        z3 = z6;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_tooltipForegroundColor /* 114 */:
                    TLRPC$JSONValue tLRPC$JSONValue125 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue125 instanceof TLRPC$TL_jsonNumber) {
                        double d68 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue125).value;
                        if (d68 != this.groupEmojiStickersLevelMin) {
                            int i87 = (int) d68;
                            this.groupEmojiStickersLevelMin = i87;
                            edit.putInt("groupEmojiStickersLevelMin", i87);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case R.styleable.AppCompatTheme_tooltipFrameBackground /* 115 */:
                    TLRPC$JSONValue tLRPC$JSONValue126 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue126 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString5 = (TLRPC$TL_jsonString) tLRPC$JSONValue126;
                        if (!TextUtils.equals(this.storyVenueSearchBot, tLRPC$TL_jsonString5.value)) {
                            String str8 = tLRPC$TL_jsonString5.value;
                            this.storyVenueSearchBot = str8;
                            edit.putString("storyVenueSearchBot", str8);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 't':
                    TLRPC$JSONValue tLRPC$JSONValue127 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue127 instanceof TLRPC$TL_jsonNumber) {
                        TLRPC$TL_jsonNumber tLRPC$TL_jsonNumber4 = (TLRPC$TL_jsonNumber) tLRPC$JSONValue127;
                        double d69 = tLRPC$TL_jsonNumber4.value;
                        double d70 = this.uploadPremiumSpeedupUpload;
                        Double.isNaN(d70);
                        if (Math.abs(d69 - d70) >= 0.009999999776482582d) {
                            float f5 = (float) tLRPC$TL_jsonNumber4.value;
                            this.uploadPremiumSpeedupUpload = f5;
                            edit.putFloat("uploadPremiumSpeedupUpload", f5);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'u':
                    TLRPC$JSONValue tLRPC$JSONValue128 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue128 instanceof TLRPC$TL_jsonString) {
                        String str9 = ((TLRPC$TL_jsonString) tLRPC$JSONValue128).value;
                        if (!str9.equals(this.premiumBotUsername)) {
                            this.premiumBotUsername = str9;
                            edit.putString("premiumBotUsername", str9);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'v':
                    TLRPC$JSONValue tLRPC$JSONValue129 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue129 instanceof TLRPC$TL_jsonBool) && this.premiumLocked != ((TLRPC$TL_jsonBool) tLRPC$JSONValue129).value) {
                        boolean z30 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue129).value;
                        this.premiumLocked = z30;
                        edit.putBoolean("premiumLocked", z30);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case 'w':
                    TLRPC$JSONValue tLRPC$JSONValue130 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue130 instanceof TLRPC$TL_jsonNumber) {
                        double d71 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue130).value;
                        if (((long) d71) != this.starsPaidPostAmountMax) {
                            long j8 = (long) d71;
                            this.starsPaidPostAmountMax = j8;
                            edit.putLong("starsPaidPostAmountMax", j8);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'x':
                    TLRPC$JSONValue tLRPC$JSONValue131 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue131 instanceof TLRPC$TL_jsonBool) {
                        boolean z31 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue131).value;
                        if (z31 != this.storyWeatherPreload) {
                            this.storyWeatherPreload = z31;
                            edit.putBoolean("storyWeatherPreload", z31);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'y':
                    TLRPC$JSONValue tLRPC$JSONValue132 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue132 instanceof TLRPC$TL_jsonNumber) {
                        double d72 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue132).value;
                        if (d72 != this.introTitleLengthLimit) {
                            int i88 = (int) d72;
                            this.introTitleLengthLimit = i88;
                            edit.putInt("introTitleLengthLimit", i88);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 'z':
                    TLRPC$JSONValue tLRPC$JSONValue133 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue133 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString6 = (TLRPC$TL_jsonString) tLRPC$JSONValue133;
                        if (!TextUtils.equals(tLRPC$TL_jsonString6.value, this.premiumManageSubscriptionUrl)) {
                            String str10 = tLRPC$TL_jsonString6.value;
                            this.premiumManageSubscriptionUrl = str10;
                            edit.putString("premiumManageSubscriptionUrl", str10);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '{':
                    TLRPC$JSONValue tLRPC$JSONValue134 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue134 instanceof TLRPC$TL_jsonNumber) {
                        double d73 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue134).value;
                        if (this.authorizationAutoconfirmPeriod != d73) {
                            int i89 = (int) d73;
                            this.authorizationAutoconfirmPeriod = i89;
                            edit.putInt("authorizationAutoconfirmPeriod", i89);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '|':
                    TLRPC$JSONValue tLRPC$JSONValue135 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue135 instanceof TLRPC$TL_jsonBool) && this.giftAttachMenuIcon != ((TLRPC$TL_jsonBool) tLRPC$JSONValue135).value) {
                        boolean z32 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue135).value;
                        this.giftAttachMenuIcon = z32;
                        edit.putBoolean("giftAttachMenuIcon", z32);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case '}':
                    TLRPC$JSONValue tLRPC$JSONValue136 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue136 instanceof TLRPC$TL_jsonNumber) {
                        double d74 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue136).value;
                        if (d74 != this.storiesSentWeeklyLimitDefault) {
                            int i90 = (int) d74;
                            this.storiesSentWeeklyLimitDefault = i90;
                            edit.putInt("storiesSentWeeklyLimitDefault", i90);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case '~':
                    TLRPC$JSONValue tLRPC$JSONValue137 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue137 instanceof TLRPC$TL_jsonObject) {
                        TLRPC$TL_jsonObject tLRPC$TL_jsonObject10 = (TLRPC$TL_jsonObject) tLRPC$JSONValue137;
                        int size14 = tLRPC$TL_jsonObject10.value.size();
                        z3 = z6;
                        for (int i91 = 0; i91 < size14; i91++) {
                            TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue4 = tLRPC$TL_jsonObject10.value.get(i91);
                            String str11 = tLRPC$TL_jsonObjectValue4.key;
                            str11.hashCode();
                            switch (str11.hashCode()) {
                                case -233204595:
                                    if (str11.equals("diameter")) {
                                        c2 = 0;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                case 258902020:
                                    if (str11.equals("audio_bitrate")) {
                                        c2 = 1;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                case 1924434857:
                                    if (str11.equals("video_bitrate")) {
                                        c2 = 2;
                                        break;
                                    }
                                    c2 = 65535;
                                    break;
                                default:
                                    c2 = 65535;
                                    break;
                            }
                            switch (c2) {
                                case 0:
                                    TLRPC$JSONValue tLRPC$JSONValue138 = tLRPC$TL_jsonObjectValue4.value;
                                    if (tLRPC$JSONValue138 instanceof TLRPC$TL_jsonNumber) {
                                        double d75 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue138).value;
                                        if (d75 != this.roundVideoSize) {
                                            int i92 = (int) d75;
                                            this.roundVideoSize = i92;
                                            edit.putInt("roundVideoSize", i92);
                                            z3 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                case 1:
                                    TLRPC$JSONValue tLRPC$JSONValue139 = tLRPC$TL_jsonObjectValue4.value;
                                    if (tLRPC$JSONValue139 instanceof TLRPC$TL_jsonNumber) {
                                        double d76 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue139).value;
                                        if (d76 != this.roundAudioBitrate) {
                                            int i93 = (int) d76;
                                            this.roundAudioBitrate = i93;
                                            edit.putInt("roundAudioBitrate", i93);
                                            z3 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                case 2:
                                    TLRPC$JSONValue tLRPC$JSONValue140 = tLRPC$TL_jsonObjectValue4.value;
                                    if (tLRPC$JSONValue140 instanceof TLRPC$TL_jsonNumber) {
                                        double d77 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue140).value;
                                        if (d77 != this.roundVideoBitrate) {
                                            int i94 = (int) d77;
                                            this.roundVideoBitrate = i94;
                                            edit.putInt("roundVideoBitrate", i94);
                                            z3 = true;
                                            break;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                            }
                        }
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case 127:
                    TLRPC$JSONValue tLRPC$JSONValue141 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue141 instanceof TLRPC$TL_jsonNumber) {
                        double d78 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue141).value;
                        if (d78 != this.chatlistInvitesLimitDefault) {
                            int i95 = (int) d78;
                            this.chatlistInvitesLimitDefault = i95;
                            edit.putInt("chatlistInvitesLimitDefault", i95);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 128:
                    TLRPC$JSONValue tLRPC$JSONValue142 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue142 instanceof TLRPC$TL_jsonNumber) {
                        i9 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue142).value;
                        z3 = z6;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 129:
                    TLRPC$JSONValue tLRPC$JSONValue143 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue143 instanceof TLRPC$TL_jsonNumber) {
                        double d79 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue143).value;
                        if (d79 != this.reactionsUserMaxDefault) {
                            int i96 = (int) d79;
                            this.reactionsUserMaxDefault = i96;
                            edit.putInt("reactionsUserMaxDefault", i96);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 130:
                    TLRPC$JSONValue tLRPC$JSONValue144 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue144 instanceof TLRPC$TL_jsonNumber) {
                        double d80 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue144).value;
                        if (d80 != this.captionLengthLimitDefault) {
                            int i97 = (int) d80;
                            this.captionLengthLimitDefault = i97;
                            edit.putInt("captionLengthLimitDefault", i97);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 131:
                    TLRPC$JSONValue tLRPC$JSONValue145 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue145 instanceof TLRPC$TL_jsonNumber) {
                        double d81 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue145).value;
                        if (this.recommendedChannelsLimitDefault != d81) {
                            int i98 = (int) d81;
                            this.recommendedChannelsLimitDefault = i98;
                            edit.putInt("recommendedChannelsLimitDefault", i98);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 132:
                    TLRPC$JSONValue tLRPC$JSONValue146 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue146 instanceof TLRPC$TL_jsonNumber) {
                        double d82 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue146).value;
                        if (this.transcribeAudioTrialDurationMax != d82) {
                            int i99 = (int) d82;
                            this.transcribeAudioTrialDurationMax = i99;
                            edit.putInt("transcribeAudioTrialDurationMax", i99);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 133:
                    TLRPC$JSONValue tLRPC$JSONValue147 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue147 instanceof TLRPC$TL_jsonNumber) {
                        i8 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue147).value;
                        i9 = i2;
                        z3 = z6;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 134:
                    TLRPC$JSONValue tLRPC$JSONValue148 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue148 instanceof TLRPC$TL_jsonBool) && this.uploadMarkupVideo != ((TLRPC$TL_jsonBool) tLRPC$JSONValue148).value) {
                        boolean z33 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue148).value;
                        this.uploadMarkupVideo = z33;
                        edit.putBoolean("uploadMarkupVideo", z33);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case 135:
                    TLRPC$JSONValue tLRPC$JSONValue149 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue149 instanceof TLRPC$TL_jsonNumber) {
                        double d83 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue149).value;
                        if (d83 != this.chatReadMarkSizeThreshold) {
                            int i100 = (int) d83;
                            this.chatReadMarkSizeThreshold = i100;
                            edit.putInt("chatReadMarkSizeThreshold", i100);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 136:
                    TLRPC$JSONValue tLRPC$JSONValue150 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue150 instanceof TLRPC$TL_jsonNumber) {
                        double d84 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue150).value;
                        if (d84 != this.dialogFiltersChatsLimitDefault) {
                            int i101 = (int) d84;
                            this.dialogFiltersChatsLimitDefault = i101;
                            edit.putInt("dialogFiltersChatsLimitDefault", i101);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 137:
                    TLRPC$JSONValue tLRPC$JSONValue151 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue151 instanceof TLRPC$TL_jsonNumber) {
                        double d85 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue151).value;
                        if (d85 != this.savedGifsLimitPremium) {
                            int i102 = (int) d85;
                            this.savedGifsLimitPremium = i102;
                            edit.putInt("savedGifsLimitPremium", i102);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 138:
                    TLRPC$JSONValue tLRPC$JSONValue152 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue152 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString7 = (TLRPC$TL_jsonString) tLRPC$JSONValue152;
                        if (!TextUtils.equals(tLRPC$TL_jsonString7.value, this.storiesEntities)) {
                            String str12 = tLRPC$TL_jsonString7.value;
                            this.storiesEntities = str12;
                            edit.putString("storiesEntities", str12);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 139:
                    TLRPC$JSONValue tLRPC$JSONValue153 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue153 instanceof TLRPC$TL_jsonNumber) {
                        double d86 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue153).value;
                        if (d86 != this.channelBgIconLevelMin) {
                            int i103 = (int) d86;
                            this.channelBgIconLevelMin = i103;
                            edit.putInt("channelBgIconLevelMin", i103);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 140:
                    TLRPC$JSONValue tLRPC$JSONValue154 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue154 instanceof TLRPC$TL_jsonNumber) {
                        long j9 = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue154).value;
                        if (j9 != this.giveawayCountriesMax) {
                            this.giveawayCountriesMax = j9;
                            edit.putLong("giveaway_countries_max", j9);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 141:
                    TLRPC$JSONValue tLRPC$JSONValue155 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue155 instanceof TLRPC$TL_jsonNumber) {
                        long j10 = (long) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue155).value;
                        this.storiesChangelogUserId = j10;
                        edit.putLong("stories_changelog_user_id", j10);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 142:
                    TLRPC$JSONValue tLRPC$JSONValue156 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue156 instanceof TLRPC$TL_jsonNumber) {
                        double d87 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue156).value;
                        if (d87 != this.topicsPinnedLimit) {
                            int i104 = (int) d87;
                            this.topicsPinnedLimit = i104;
                            edit.putInt("topicsPinnedLimit", i104);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 143:
                    TLRPC$JSONValue tLRPC$JSONValue157 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue157 instanceof TLRPC$TL_jsonNumber) {
                        double d88 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue157).value;
                        if (d88 != this.channelsLimitDefault) {
                            int i105 = (int) d88;
                            this.channelsLimitDefault = i105;
                            edit.putInt("channelsLimitDefault", i105);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 144:
                    TLRPC$JSONValue tLRPC$JSONValue158 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue158 instanceof TLRPC$TL_jsonNumber) {
                        double d89 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue158).value;
                        if (d89 != this.groupEmojiStatusLevelMin) {
                            int i106 = (int) d89;
                            this.groupEmojiStatusLevelMin = i106;
                            edit.putInt("groupEmojiStatusLevelMin", i106);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 145:
                    HashSet hashSet10 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue159 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue159 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray10 = (TLRPC$TL_jsonArray) tLRPC$JSONValue159;
                        int size15 = tLRPC$TL_jsonArray10.value.size();
                        for (int i107 = 0; i107 < size15; i107++) {
                            TLRPC$JSONValue tLRPC$JSONValue160 = tLRPC$TL_jsonArray10.value.get(i107);
                            if (tLRPC$JSONValue160 instanceof TLRPC$TL_jsonString) {
                                hashSet10.add(((TLRPC$TL_jsonString) tLRPC$JSONValue160).value.toLowerCase());
                            }
                        }
                    }
                    if (!this.webAppAllowedProtocols.equals(hashSet10)) {
                        this.webAppAllowedProtocols = hashSet10;
                        edit.putStringSet("webAppAllowedProtocols", hashSet10);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 146:
                    TLRPC$JSONValue tLRPC$JSONValue161 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue161 instanceof TLRPC$TL_jsonNumber) {
                        int i108 = (int) ((TLRPC$TL_jsonNumber) tLRPC$JSONValue161).value;
                        this.smallQueueMaxActiveOperations = i108;
                        edit.putInt("smallQueueMaxActiveOperations", i108);
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 147:
                    TLRPC$JSONValue tLRPC$JSONValue162 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue162 instanceof TLRPC$TL_jsonNumber) {
                        double d90 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue162).value;
                        if (d90 != this.storyCaptionLengthLimitPremium) {
                            int i109 = (int) d90;
                            this.storyCaptionLengthLimitPremium = i109;
                            edit.putInt("storyCaptionLengthLimitPremium", i109);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 148:
                    TLRPC$JSONValue tLRPC$JSONValue163 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue163 instanceof TLRPC$TL_jsonNumber) {
                        double d91 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue163).value;
                        if (((int) d91) != this.factcheckLengthLimit) {
                            int i110 = (int) d91;
                            this.factcheckLengthLimit = i110;
                            edit.putInt("factcheckLengthLimit", i110);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 149:
                    TLRPC$JSONValue tLRPC$JSONValue164 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue164 instanceof TLRPC$TL_jsonNumber) {
                        double d92 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue164).value;
                        if (d92 != this.reactionsInChatMax) {
                            int i111 = (int) d92;
                            this.reactionsInChatMax = i111;
                            edit.putInt("reactionsInChatMax", i111);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case ImageReceiver.DEFAULT_CROSSFADE_DURATION /* 150 */:
                    TLRPC$JSONValue tLRPC$JSONValue165 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue165 instanceof TLRPC$TL_jsonNumber) {
                        double d93 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue165).value;
                        if (d93 != this.dialogFiltersLimitPremium) {
                            int i112 = (int) d93;
                            this.dialogFiltersLimitPremium = i112;
                            edit.putInt("dialogFiltersLimitPremium", i112);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 151:
                    try {
                        hashMap2 = new HashMap<>();
                        TLRPC$JSONValue tLRPC$JSONValue166 = tLRPC$TL_jsonObjectValue.value;
                        if (tLRPC$JSONValue166 instanceof TLRPC$TL_jsonObject) {
                            TLRPC$TL_jsonObject tLRPC$TL_jsonObject11 = (TLRPC$TL_jsonObject) tLRPC$JSONValue166;
                            int size16 = tLRPC$TL_jsonObject11.value.size();
                            for (int i113 = 0; i113 < size16; i113++) {
                                TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue5 = tLRPC$TL_jsonObject11.value.get(i113);
                                TLRPC$JSONValue tLRPC$JSONValue167 = tLRPC$TL_jsonObjectValue5.value;
                                if (tLRPC$JSONValue167 instanceof TLRPC$TL_jsonObject) {
                                    TLRPC$TL_jsonObject tLRPC$TL_jsonObject12 = (TLRPC$TL_jsonObject) tLRPC$JSONValue167;
                                    int size17 = tLRPC$TL_jsonObject12.value.size();
                                    long j11 = 0;
                                    long j12 = 0;
                                    String str13 = null;
                                    for (int i114 = 0; i114 < size17; i114++) {
                                        TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue6 = tLRPC$TL_jsonObject12.value.get(i114);
                                        if (tLRPC$TL_jsonObjectValue6.value instanceof TLRPC$TL_jsonString) {
                                            if ("id".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                j11 = Utilities.parseLong(((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value).longValue();
                                            } else if ("access_hash".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                j12 = Utilities.parseLong(((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value).longValue();
                                            } else if ("file_reference_base64".equals(tLRPC$TL_jsonObjectValue6.key)) {
                                                str13 = ((TLRPC$TL_jsonString) tLRPC$TL_jsonObjectValue6.value).value;
                                            }
                                        }
                                    }
                                    if (j11 != 0 && j12 != 0 && str13 != null) {
                                        hashMap2.put(tLRPC$TL_jsonObjectValue5.key.replace("️", ""), new EmojiSound(j11, j12, str13));
                                    }
                                }
                            }
                        }
                    } catch (Exception e3) {
                        FileLog.e(e3);
                        break;
                    }
                    if (!this.emojiSounds.equals(hashMap2)) {
                        this.emojiSounds = hashMap2;
                        SerializedData serializedData3 = new SerializedData();
                        serializedData3.writeInt32(this.emojiSounds.size());
                        for (Map.Entry<String, EmojiSound> entry2 : this.emojiSounds.entrySet()) {
                            serializedData3.writeString(entry2.getKey());
                            EmojiSound value2 = entry2.getValue();
                            serializedData3.writeInt64(value2.id);
                            serializedData3.writeInt64(value2.accessHash);
                            serializedData3.writeByteArray(value2.fileReference);
                        }
                        edit.putString("emojiSounds", Base64.encodeToString(serializedData3.toByteArray(), 0));
                        serializedData3.cleanup();
                        z3 = true;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    z3 = z6;
                    i9 = i2;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                    break;
                case 152:
                    TLRPC$JSONValue tLRPC$JSONValue168 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue168 instanceof TLRPC$TL_jsonNumber) {
                        double d94 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue168).value;
                        if (d94 != this.groupTranscribeLevelMin) {
                            int i115 = (int) d94;
                            this.groupTranscribeLevelMin = i115;
                            edit.putInt("groupTranscribeLevelMin", i115);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 153:
                    TLRPC$JSONValue tLRPC$JSONValue169 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue169 instanceof TLRPC$TL_jsonNumber) {
                        double d95 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue169).value;
                        if (d95 != this.aboutLengthLimitPremium) {
                            int i116 = (int) d95;
                            this.aboutLengthLimitPremium = i116;
                            edit.putInt("aboutLengthLimitPremium", i116);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 154:
                    TLRPC$JSONValue tLRPC$JSONValue170 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue170 instanceof TLRPC$TL_jsonNumber) {
                        double d96 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue170).value;
                        if (this.boostsChannelLevelMax != d96) {
                            int i117 = (int) d96;
                            this.boostsChannelLevelMax = i117;
                            edit.putInt("boostsChannelLevelMax", i117);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case MessagesStorage.LAST_DB_VERSION /* 155 */:
                    TLRPC$JSONValue tLRPC$JSONValue171 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue171 instanceof TLRPC$TL_jsonNumber) {
                        double d97 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue171).value;
                        if (d97 != this.introDescriptionLengthLimit) {
                            int i118 = (int) d97;
                            this.introDescriptionLengthLimit = i118;
                            edit.putInt("introDescriptionLengthLimit", i118);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 156:
                    HashSet hashSet11 = new HashSet();
                    TLRPC$JSONValue tLRPC$JSONValue172 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue172 instanceof TLRPC$TL_jsonArray) {
                        TLRPC$TL_jsonArray tLRPC$TL_jsonArray11 = (TLRPC$TL_jsonArray) tLRPC$JSONValue172;
                        int size18 = tLRPC$TL_jsonArray11.value.size();
                        for (int i119 = 0; i119 < size18; i119++) {
                            TLRPC$JSONValue tLRPC$JSONValue173 = tLRPC$TL_jsonArray11.value.get(i119);
                            if (tLRPC$JSONValue173 instanceof TLRPC$TL_jsonString) {
                                hashSet11.add(((TLRPC$TL_jsonString) tLRPC$JSONValue173).value);
                            }
                        }
                    }
                    if (!this.exportPrivateUri.equals(hashSet11)) {
                        this.exportPrivateUri = hashSet11;
                        edit.putStringSet("exportPrivateUri", hashSet11);
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        z3 = true;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 157:
                    TLRPC$JSONValue tLRPC$JSONValue174 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue174 instanceof TLRPC$TL_jsonNumber) {
                        double d98 = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue174).value;
                        if (d98 != this.forumUpgradeParticipantsMin) {
                            int i120 = (int) d98;
                            this.forumUpgradeParticipantsMin = i120;
                            edit.putInt("forumUpgradeParticipantsMin", i120);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                case 158:
                    TLRPC$JSONValue tLRPC$JSONValue175 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue175 instanceof TLRPC$TL_jsonBool) {
                        boolean z34 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue175).value;
                        if (z34 != this.filtersEnabled) {
                            this.filtersEnabled = z34;
                            edit.putBoolean("filtersEnabled", z34);
                            z3 = true;
                            i9 = i2;
                            z5 = z7;
                            z4 = z8;
                            tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                            i8 = i11;
                            i7++;
                            tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                            size = i10;
                        }
                        z3 = z6;
                        i9 = i2;
                        z5 = z7;
                        z4 = z8;
                        tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                        i8 = i11;
                        i7++;
                        tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                        size = i10;
                    }
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
                default:
                    i9 = i2;
                    z3 = z6;
                    z5 = z7;
                    z4 = z8;
                    tLRPC$TL_jsonObject5 = tLRPC$TL_jsonObject6;
                    i8 = i11;
                    i7++;
                    tLRPC$TL_jsonObject4 = tLRPC$TL_jsonObject;
                    size = i10;
            }
        }
        int i121 = i8;
        int i122 = i9;
        boolean z35 = z3;
        TLRPC$TL_jsonObject tLRPC$TL_jsonObject13 = tLRPC$TL_jsonObject5;
        boolean z36 = z4;
        boolean z37 = z5;
        if (i121 != this.transcribeAudioTrialWeeklyNumber) {
            this.transcribeAudioTrialWeeklyNumber = i121;
            edit.putInt("transcribeAudioTrialWeeklyNumber", i121);
            if (this.transcribeAudioTrialCurrentNumber <= 0) {
                if (i122 != 0) {
                    i = i122;
                } else {
                    i = i122;
                }
                this.transcribeAudioTrialCurrentNumber = i121;
                edit.putInt("transcribeAudioTrialCurrentNumber", i121);
                z = true;
            } else {
                i = i122;
            }
            if (this.transcribeAudioTrialCurrentNumber > i121) {
                this.transcribeAudioTrialCurrentNumber = i121;
                edit.putInt("transcribeAudioTrialCurrentNumber", i121);
            }
            z = true;
        } else {
            i = i122;
            z = z35;
        }
        if (i != this.transcribeAudioTrialCooldownUntil) {
            this.transcribeAudioTrialCooldownUntil = i;
            edit.putInt("transcribeAudioTrialCooldownUntil", i);
            scheduleTranscriptionUpdate();
            z2 = true;
        } else {
            z2 = z;
        }
        if (z2) {
            edit.apply();
        }
        if (tLRPC$TL_jsonObject13 != null) {
            LiteMode.updatePresets(tLRPC$TL_jsonObject13);
        }
        if (z36) {
            ApplicationLoader.startPushService();
            ConnectionsManager connectionsManager = getConnectionsManager();
            connectionsManager.setPushConnectionEnabled(connectionsManager.isPushConnectionEnabled());
        }
        if (z37) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda233
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$applyAppConfig$32();
                }
            });
        }
        logDeviceStats();
    }

    public /* synthetic */ void lambda$applyAppConfig$32() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storiesEnabledUpdate, new Object[0]);
    }

    public void updateTranscribeAudioTrialCurrentNumber(int i) {
        if (i != this.transcribeAudioTrialCurrentNumber) {
            this.transcribeAudioTrialCurrentNumber = i;
            this.mainPreferences.edit().putInt("transcribeAudioTrialCurrentNumber", this.transcribeAudioTrialCurrentNumber).apply();
        }
    }

    public void updateTranscribeAudioTrialCooldownUntil(int i) {
        if (i != this.transcribeAudioTrialCooldownUntil) {
            this.transcribeAudioTrialCooldownUntil = i;
            this.mainPreferences.edit().putInt("transcribeAudioTrialCooldownUntil", this.transcribeAudioTrialCooldownUntil).apply();
            scheduleTranscriptionUpdate();
        }
    }

    private void scheduleTranscriptionUpdate() {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda264
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$scheduleTranscriptionUpdate$33();
            }
        });
    }

    public /* synthetic */ void lambda$scheduleTranscriptionUpdate$33() {
        AndroidUtilities.cancelRunOnUIThread(this.notifyTranscriptionAudioCooldownUpdate);
        long currentTime = this.transcribeAudioTrialCooldownUntil - getConnectionsManager().getCurrentTime();
        if (currentTime > 0) {
            AndroidUtilities.runOnUIThread(this.notifyTranscriptionAudioCooldownUpdate, currentTime);
        }
    }

    public /* synthetic */ void lambda$new$34() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateTranscriptionLock, new Object[0]);
    }

    /* loaded from: classes3.dex */
    public static class PeerColors {
        public static final int TYPE_NAME = 0;
        public static final int TYPE_PROFILE = 1;
        public final ArrayList<PeerColor> colors = new ArrayList<>();
        private final LongSparseArray<PeerColor> colorsById = new LongSparseArray<>();
        public final int hash;
        public final int type;

        public boolean needUpdate() {
            boolean z = true;
            boolean z2 = false;
            for (int i = 0; i < this.colors.size(); i++) {
                if (this.colors.get(i).channelLvl > 0) {
                    z = false;
                }
                if (this.colors.get(i).id < 7) {
                    z2 = true;
                }
            }
            if (this.type == 1 && !z) {
                Iterator<PeerColor> it = this.colors.iterator();
                while (true) {
                    if (it.hasNext()) {
                        if (it.next().groupLvl > 0) {
                            z = false;
                            break;
                        }
                    } else {
                        z = true;
                        break;
                    }
                }
            }
            if (z) {
                return true;
            }
            return this.type == 0 && !z2;
        }

        public int colorsAvailable(int i, boolean z) {
            int i2 = 0;
            for (int i3 = 0; i3 < this.colors.size(); i3++) {
                PeerColor peerColor = this.colors.get(i3);
                if (!peerColor.hidden && i >= peerColor.getLvl(z)) {
                    i2++;
                }
            }
            return i2;
        }

        public int maxLevel() {
            return maxLevel(false);
        }

        public int maxLevel(boolean z) {
            int i = 0;
            for (int i2 = 0; i2 < this.colors.size(); i2++) {
                PeerColor peerColor = this.colors.get(i2);
                if (!peerColor.hidden) {
                    i = Math.max(i, peerColor.getLvl(z));
                }
            }
            return i;
        }

        public int minLevel() {
            return minLevel(false);
        }

        public int minLevel(boolean z) {
            int maxLevel = maxLevel(z);
            for (int i = 0; i < this.colors.size(); i++) {
                PeerColor peerColor = this.colors.get(i);
                if (!peerColor.hidden) {
                    maxLevel = Math.min(maxLevel, peerColor.getLvl(z));
                }
            }
            return maxLevel;
        }

        private PeerColors(int i, int i2) {
            this.type = i;
            this.hash = i2;
        }

        public PeerColor getColor(int i) {
            return this.colorsById.get(i);
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            if (this.hash != 0) {
                sb.append("@");
                sb.append(this.hash);
                sb.append("^");
            }
            for (int i = 0; i < this.colors.size(); i++) {
                PeerColor peerColor = this.colors.get(i);
                if (i > 0) {
                    sb.append(";");
                }
                peerColor.appendString(sb);
            }
            return sb.toString();
        }

        public static PeerColors fromString(int i, String str) {
            int i2;
            int indexOf;
            if (str == null) {
                return null;
            }
            if (!str.startsWith("@") || (indexOf = str.indexOf("^")) < 0) {
                i2 = 0;
            } else {
                i2 = Utilities.parseInt((CharSequence) str.substring(1, indexOf)).intValue();
                str = str.substring(indexOf + 1);
            }
            PeerColors peerColors = new PeerColors(i, i2);
            for (String str2 : str.split(";")) {
                PeerColor fromString = PeerColor.fromString(str2);
                if (fromString != null) {
                    fromString.isDefaultName = fromString.id < 7 && i == 0;
                    if (!fromString.hidden) {
                        peerColors.colors.add(fromString);
                    }
                    peerColors.colorsById.put(fromString.id, fromString);
                }
            }
            return peerColors;
        }

        private static int color(String str) {
            return MessagesController$PeerColors$$ExternalSyntheticBackport0.m("ff" + str, 16);
        }

        public static PeerColors fromTL(int i, TLRPC$TL_help_peerColors tLRPC$TL_help_peerColors) {
            if (tLRPC$TL_help_peerColors == null) {
                return null;
            }
            try {
                PeerColors peerColors = new PeerColors(i, tLRPC$TL_help_peerColors.hash);
                for (int i2 = 0; i2 < tLRPC$TL_help_peerColors.colors.size(); i2++) {
                    PeerColor fromTL = PeerColor.fromTL(tLRPC$TL_help_peerColors.colors.get(i2));
                    if (fromTL != null) {
                        fromTL.isDefaultName = fromTL.id < 7 && i == 0;
                        if (!fromTL.hidden) {
                            peerColors.colors.add(fromTL);
                        }
                        peerColors.colorsById.put(fromTL.id, fromTL);
                    }
                }
                return peerColors;
            } catch (Exception e) {
                FileLog.e(e);
                return null;
            }
        }

        public static PeerColors fromJSON(int i, TLRPC$TL_jsonObject tLRPC$TL_jsonObject, TLRPC$TL_jsonObject tLRPC$TL_jsonObject2, TLRPC$TL_jsonArray tLRPC$TL_jsonArray) {
            PeerColor peerColor;
            long j;
            PeerColor peerColor2;
            try {
                PeerColors peerColors = new PeerColors(i, 0);
                if (tLRPC$TL_jsonObject != null) {
                    Iterator<TLRPC$TL_jsonObjectValue> it = tLRPC$TL_jsonObject.value.iterator();
                    while (it.hasNext()) {
                        TLRPC$TL_jsonObjectValue next = it.next();
                        int intValue = Utilities.parseInt((CharSequence) next.key).intValue();
                        TLRPC$JSONValue tLRPC$JSONValue = next.value;
                        if (tLRPC$JSONValue instanceof TLRPC$TL_jsonArray) {
                            ArrayList<TLRPC$JSONValue> arrayList = ((TLRPC$TL_jsonArray) tLRPC$JSONValue).value;
                            if (!arrayList.isEmpty()) {
                                PeerColor peerColor3 = new PeerColor();
                                try {
                                    peerColor3.id = intValue;
                                    int i2 = 0;
                                    while (i2 < 6) {
                                        int[] iArr = peerColor3.colors;
                                        int[] iArr2 = peerColor3.darkColors;
                                        int color = arrayList.size() > i2 ? color(((TLRPC$TL_jsonString) arrayList.get(i2)).value) : peerColor3.colors[0];
                                        iArr2[i2] = color;
                                        iArr[i2] = color;
                                        i2++;
                                    }
                                    peerColor3.isDefaultName = peerColor3.id < 7 && i == 0;
                                    peerColors.colorsById.put(intValue, peerColor3);
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                            }
                        }
                    }
                }
                if (tLRPC$TL_jsonObject2 != null) {
                    Iterator<TLRPC$TL_jsonObjectValue> it2 = tLRPC$TL_jsonObject2.value.iterator();
                    while (it2.hasNext()) {
                        TLRPC$TL_jsonObjectValue next2 = it2.next();
                        int intValue2 = Utilities.parseInt((CharSequence) next2.key).intValue();
                        TLRPC$JSONValue tLRPC$JSONValue2 = next2.value;
                        if (tLRPC$JSONValue2 instanceof TLRPC$TL_jsonArray) {
                            ArrayList<TLRPC$JSONValue> arrayList2 = ((TLRPC$TL_jsonArray) tLRPC$JSONValue2).value;
                            if (!arrayList2.isEmpty() && (peerColor2 = peerColors.colorsById.get(intValue2)) != null) {
                                try {
                                    peerColor2.id = intValue2;
                                    int i3 = 0;
                                    while (i3 < 6) {
                                        peerColor2.darkColors[i3] = arrayList2.size() > i3 ? color(((TLRPC$TL_jsonString) arrayList2.get(i3)).value) : peerColor2.darkColors[0];
                                        i3++;
                                    }
                                    peerColors.colorsById.put(j, peerColor2);
                                } catch (Exception e2) {
                                    FileLog.e(e2);
                                }
                            }
                        }
                    }
                }
                peerColors.colors.clear();
                if (tLRPC$TL_jsonArray != null) {
                    Iterator<TLRPC$JSONValue> it3 = tLRPC$TL_jsonArray.value.iterator();
                    while (it3.hasNext()) {
                        TLRPC$JSONValue next3 = it3.next();
                        if ((next3 instanceof TLRPC$TL_jsonNumber) && (peerColor = peerColors.colorsById.get((int) ((TLRPC$TL_jsonNumber) next3).value)) != null) {
                            peerColors.colors.add(peerColor);
                        }
                    }
                }
                return peerColors;
            } catch (Exception e3) {
                FileLog.e(e3);
                return null;
            }
        }
    }

    /* loaded from: classes3.dex */
    public static class PeerColor {
        public int channelLvl;
        private final int[] colors = new int[6];
        private final int[] darkColors = new int[6];
        public int groupLvl;
        public boolean hidden;
        public int id;
        public boolean isDefaultName;

        public int getColor(int i, Theme.ResourcesProvider resourcesProvider) {
            int i2;
            if (i < 0 || i > 5) {
                return 0;
            }
            if (!this.isDefaultName || (i2 = this.id) < 0 || i2 >= 7) {
                return (resourcesProvider != null ? resourcesProvider.isDark() : Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[i];
            }
            return Theme.getColor(Theme.keys_avatar_nameInMessage[i2], resourcesProvider);
        }

        public int getLvl(boolean z) {
            return z ? this.groupLvl : this.channelLvl;
        }

        public int getColor1(boolean z) {
            return (z ? this.darkColors : this.colors)[0];
        }

        public int getColor2(boolean z) {
            return (z ? this.darkColors : this.colors)[1];
        }

        public int getColor3(boolean z) {
            return (z ? this.darkColors : this.colors)[2];
        }

        public int getColor4(boolean z) {
            return (z ? this.darkColors : this.colors)[3];
        }

        public int getColor5(boolean z) {
            return (z ? this.darkColors : this.colors)[4];
        }

        public int getColor6(boolean z) {
            return (z ? this.darkColors : this.colors)[5];
        }

        public int getColor1() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[0];
        }

        public int getColor2() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[1];
        }

        public int getColor3() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[2];
        }

        public int getColor4() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[3];
        }

        public int getColor5() {
            return (Theme.isCurrentThemeDark() ? this.darkColors : this.colors)[4];
        }

        public boolean hasColor2() {
            return getColor2() != getColor1();
        }

        public boolean hasColor3() {
            return getColor3() != getColor1();
        }

        public boolean hasColor2(boolean z) {
            return getColor2(z) != getColor1(z);
        }

        public boolean hasColor3(boolean z) {
            return getColor3(z) != getColor1(z);
        }

        public boolean hasColor6(boolean z) {
            return getColor6(z) != getColor1(z);
        }

        public int getBgColor1(boolean z) {
            return hasColor6(z) ? getColor3(z) : getColor2(z);
        }

        public int getBgColor2(boolean z) {
            return hasColor6(z) ? getColor4(z) : getColor2(z);
        }

        public int getStoryColor1(boolean z) {
            return hasColor6(z) ? getColor5(z) : getColor3(z);
        }

        public int getStoryColor2(boolean z) {
            return hasColor6(z) ? getColor6(z) : getColor4(z);
        }

        public int getAvatarColor1() {
            return ColorUtils.blendARGB(getBgColor2(false), getStoryColor2(false), 0.5f);
        }

        public int getAvatarColor2() {
            return ColorUtils.blendARGB(getBgColor1(false), getStoryColor1(false), 0.5f);
        }

        public void appendString(StringBuilder sb) {
            sb.append("#");
            if (this.hidden) {
                sb.append("H");
            }
            if (this.channelLvl != 0 || this.groupLvl != 0) {
                sb.append("[");
                sb.append(this.channelLvl);
                sb.append(",");
                sb.append(this.groupLvl);
                sb.append("]");
            }
            sb.append(this.id);
            sb.append("{");
            sb.append(this.colors[0]);
            int[] iArr = this.colors;
            if (iArr[1] != iArr[0]) {
                sb.append(",");
                sb.append(this.colors[1]);
                int[] iArr2 = this.colors;
                int i = iArr2[2];
                int i2 = iArr2[0];
                if (i != i2 || iArr2[3] != i2) {
                    sb.append(",");
                    sb.append(this.colors[2]);
                    sb.append(",");
                    sb.append(this.colors[3]);
                    int[] iArr3 = this.colors;
                    int i3 = iArr3[4];
                    int i4 = iArr3[0];
                    if (i3 != i4 || iArr3[5] != i4) {
                        sb.append(",");
                        sb.append(this.colors[4]);
                        sb.append(",");
                        sb.append(this.colors[5]);
                    }
                }
            }
            int[] iArr4 = this.darkColors;
            int i5 = iArr4[0];
            int[] iArr5 = this.colors;
            if (i5 != iArr5[0] || iArr4[1] != iArr5[1] || iArr4[2] != iArr5[2]) {
                sb.append("@");
                sb.append(this.darkColors[0]);
                int[] iArr6 = this.darkColors;
                if (iArr6[1] != iArr6[0]) {
                    sb.append(",");
                    sb.append(this.darkColors[1]);
                    int[] iArr7 = this.darkColors;
                    int i6 = iArr7[2];
                    int i7 = iArr7[0];
                    if (i6 != i7 || iArr7[3] != i7) {
                        sb.append(",");
                        sb.append(this.darkColors[2]);
                        sb.append(",");
                        sb.append(this.darkColors[3]);
                        int[] iArr8 = this.darkColors;
                        int i8 = iArr8[4];
                        int i9 = iArr8[0];
                        if (i8 != i9 || iArr8[5] != i9) {
                            sb.append(",");
                            sb.append(this.darkColors[4]);
                            sb.append(",");
                            sb.append(this.darkColors[5]);
                        }
                    }
                }
            }
            sb.append("}");
        }

        public static PeerColor fromTL(TLRPC$TL_help_peerColorOption tLRPC$TL_help_peerColorOption) {
            if (tLRPC$TL_help_peerColorOption == null) {
                return null;
            }
            PeerColor peerColor = new PeerColor();
            peerColor.id = tLRPC$TL_help_peerColorOption.color_id;
            peerColor.hidden = tLRPC$TL_help_peerColorOption.hidden;
            int i = tLRPC$TL_help_peerColorOption.flags;
            if ((i & 8) != 0) {
                peerColor.channelLvl = tLRPC$TL_help_peerColorOption.channel_min_level;
            }
            if ((i & 16) != 0) {
                peerColor.groupLvl = tLRPC$TL_help_peerColorOption.group_min_level;
            }
            System.arraycopy(optionToColors(tLRPC$TL_help_peerColorOption.colors), 0, peerColor.colors, 0, 6);
            System.arraycopy(optionToColors(tLRPC$TL_help_peerColorOption.dark_colors), 0, peerColor.darkColors, 0, 6);
            return peerColor;
        }

        public static int[] optionToColors(TLRPC$help_PeerColorSet tLRPC$help_PeerColorSet) {
            ArrayList<Integer> arrayList;
            int[] iArr = {0, 0, 0, 0, 0, 0};
            if (tLRPC$help_PeerColorSet instanceof TLRPC$TL_help_peerColorSet) {
                arrayList = ((TLRPC$TL_help_peerColorSet) tLRPC$help_PeerColorSet).colors;
            } else if (tLRPC$help_PeerColorSet instanceof TLRPC$TL_help_peerColorProfileSet) {
                TLRPC$TL_help_peerColorProfileSet tLRPC$TL_help_peerColorProfileSet = (TLRPC$TL_help_peerColorProfileSet) tLRPC$help_PeerColorSet;
                ArrayList<Integer> arrayList2 = tLRPC$TL_help_peerColorProfileSet.palette_colors;
                ArrayList<Integer> arrayList3 = tLRPC$TL_help_peerColorProfileSet.bg_colors;
                ArrayList<Integer> arrayList4 = tLRPC$TL_help_peerColorProfileSet.story_colors;
                ArrayList<Integer> arrayList5 = new ArrayList<>();
                if (arrayList2 != null) {
                    for (int i = 0; i < Math.min(2, arrayList2.size()); i++) {
                        arrayList5.add(arrayList2.get(i));
                    }
                }
                if (arrayList3 != null) {
                    for (int i2 = 0; i2 < Math.min(2, arrayList3.size()); i2++) {
                        arrayList5.add(arrayList3.get(i2));
                    }
                }
                if (arrayList4 != null) {
                    for (int i3 = 0; i3 < Math.min(2, arrayList4.size()); i3++) {
                        arrayList5.add(arrayList4.get(i3));
                    }
                }
                arrayList = arrayList5;
            } else {
                arrayList = null;
            }
            if (arrayList != null) {
                if (arrayList.size() > 0) {
                    Arrays.fill(iArr, arrayList.get(0).intValue() | (-16777216));
                }
                for (int i4 = 0; i4 < Math.min(6, arrayList.size()); i4++) {
                    iArr[i4] = arrayList.get(i4).intValue() | (-16777216);
                }
            }
            return iArr;
        }

        public static PeerColor fromString(String str) {
            int i;
            int i2;
            int indexOf;
            int i3;
            if (str != null && !str.isEmpty()) {
                if (str.charAt(0) == '#') {
                    boolean z = str.length() > 1 && str.charAt(1) == 'H';
                    int i4 = z ? 2 : 1;
                    if (str.length() <= i4 || str.charAt(i4) != '[' || (indexOf = str.indexOf(93)) <= i4) {
                        i = 0;
                        i2 = 0;
                    } else {
                        String substring = str.substring(i4 + 1, indexOf);
                        if (substring.contains(",")) {
                            String[] split = substring.split(",");
                            i2 = Utilities.parseInt((CharSequence) split[0]).intValue();
                            i3 = Utilities.parseInt((CharSequence) split[1]).intValue();
                        } else {
                            i2 = Utilities.parseInt((CharSequence) substring).intValue();
                            i3 = 0;
                        }
                        int i5 = indexOf + 1;
                        i = i3;
                        i4 = i5;
                    }
                    int indexOf2 = str.indexOf(123);
                    if (indexOf2 < 0) {
                        return null;
                    }
                    try {
                        PeerColor peerColor = new PeerColor();
                        peerColor.id = Utilities.parseInt((CharSequence) str.substring(i4, indexOf2)).intValue();
                        peerColor.hidden = z;
                        peerColor.channelLvl = i2;
                        peerColor.groupLvl = i;
                        String[] split2 = str.substring(indexOf2 + 1, str.length() - 1).split("@");
                        String[] split3 = split2[0].split(",");
                        int i6 = 0;
                        while (i6 < 6) {
                            int[] iArr = peerColor.colors;
                            int i7 = i6 + 1;
                            iArr[i6] = split3.length >= i7 ? Utilities.parseInt((CharSequence) split3[i6]).intValue() : iArr[0];
                            i6 = i7;
                        }
                        if (split2.length >= 2) {
                            String[] split4 = split2[1].split(",");
                            int i8 = 0;
                            while (i8 < 6) {
                                int[] iArr2 = peerColor.darkColors;
                                int i9 = i8 + 1;
                                iArr2[i8] = split4.length >= i9 ? Utilities.parseInt((CharSequence) split4[i8]).intValue() : iArr2[0];
                                i8 = i9;
                            }
                        } else {
                            for (int i10 = 0; i10 < 6; i10++) {
                                peerColor.darkColors[i10] = peerColor.colors[i10];
                            }
                        }
                        return peerColor;
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                }
            }
            return null;
        }
    }

    private void resetAppConfig() {
        this.getfileExperimentalParams = false;
        this.channelRevenueWithdrawalEnabled = false;
        this.collectDeviceStats = false;
        this.smsjobsStickyNotificationEnabled = false;
        this.showAnnualPerMonth = false;
        this.canEditFactcheck = false;
        this.starsLocked = true;
        this.factcheckLengthLimit = 1024;
        this.mainPreferences.edit().remove("starsLocked").remove("getfileExperimentalParams").remove("smsjobsStickyNotificationEnabled").remove("channelRevenueWithdrawalEnabled").remove("showAnnualPerMonth").remove("canEditFactcheck").remove("factcheckLengthLimit").apply();
    }

    private boolean savePremiumFeaturesPreviewOrder(String str, SparseIntArray sparseIntArray, SharedPreferences.Editor editor, ArrayList<TLRPC$JSONValue> arrayList) {
        int serverStringToFeatureType;
        StringBuilder sb = new StringBuilder();
        sparseIntArray.clear();
        int i = 0;
        while (true) {
            if (i >= arrayList.size()) {
                break;
            }
            String str2 = arrayList.get(i) instanceof TLRPC$TL_jsonString ? ((TLRPC$TL_jsonString) arrayList.get(i)).value : null;
            if (str2 != null && (serverStringToFeatureType = PremiumPreviewFragment.serverStringToFeatureType(str2)) >= 0) {
                sparseIntArray.put(serverStringToFeatureType, i);
                if (sb.length() > 0) {
                    sb.append('_');
                }
                sb.append(serverStringToFeatureType);
            }
            i++;
        }
        if (sb.length() > 0) {
            String sb2 = sb.toString();
            boolean equals = true ^ sb2.equals(this.mainPreferences.getString(str, null));
            editor.putString(str, sb2);
            return equals;
        }
        editor.remove(str);
        return this.mainPreferences.getString(str, null) != null;
    }

    private void loadPremiumFeaturesPreviewOrder(SparseIntArray sparseIntArray, String str) {
        sparseIntArray.clear();
        if (str != null) {
            String[] split = str.split("_");
            for (int i = 0; i < split.length; i++) {
                sparseIntArray.put(Integer.parseInt(split[i]), i);
            }
        }
    }

    public void removeSuggestion(long j, String str) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        if (j == 0) {
            if (!this.pendingSuggestions.remove(str) && this.dismissedSuggestions.contains(str)) {
                return;
            }
            this.dismissedSuggestions.add(str);
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            edit.putStringSet("pendingSuggestions", this.pendingSuggestions);
            edit.putStringSet("dismissedSuggestions", this.dismissedSuggestions);
            edit.commit();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newSuggestionsAvailable, new Object[0]);
        }
        TLRPC$TL_help_dismissSuggestion tLRPC$TL_help_dismissSuggestion = new TLRPC$TL_help_dismissSuggestion();
        tLRPC$TL_help_dismissSuggestion.suggestion = str;
        if (j == 0) {
            tLRPC$TL_help_dismissSuggestion.peer = new TLRPC$TL_inputPeerEmpty();
        } else {
            tLRPC$TL_help_dismissSuggestion.peer = getInputPeer(j);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_help_dismissSuggestion, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda127
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$removeSuggestion$35(tLObject, tLRPC$TL_error);
            }
        });
    }

    public void updateConfig(final TLRPC$TL_config tLRPC$TL_config) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda440
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateConfig$36(tLRPC$TL_config);
            }
        });
    }

    public /* synthetic */ void lambda$updateConfig$36(TLRPC$TL_config tLRPC$TL_config) {
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig(true);
        checkPeerColors(true);
        this.remoteConfigLoaded = true;
        this.maxMegagroupCount = tLRPC$TL_config.megagroup_size_max;
        this.maxGroupCount = tLRPC$TL_config.chat_size_max;
        this.maxEditTime = tLRPC$TL_config.edit_time_limit;
        this.ratingDecay = tLRPC$TL_config.rating_e_decay;
        this.maxRecentStickersCount = tLRPC$TL_config.stickers_recent_limit;
        this.revokeTimeLimit = tLRPC$TL_config.revoke_time_limit;
        this.revokeTimePmLimit = tLRPC$TL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tLRPC$TL_config.revoke_pm_inbox;
        String str = tLRPC$TL_config.me_url_prefix;
        this.linkPrefix = str;
        boolean z = tLRPC$TL_config.force_try_ipv6;
        if (str.endsWith("/")) {
            String str2 = this.linkPrefix;
            this.linkPrefix = str2.substring(0, str2.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = tLRPC$TL_config.call_receive_timeout_ms;
        this.callRingTimeout = tLRPC$TL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tLRPC$TL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tLRPC$TL_config.call_packet_timeout_ms;
        this.maxMessageLength = tLRPC$TL_config.message_length_max;
        this.maxCaptionLength = tLRPC$TL_config.caption_length_max;
        this.preloadFeaturedStickers = tLRPC$TL_config.preload_featured_stickers;
        String str3 = tLRPC$TL_config.venue_search_username;
        if (str3 != null) {
            this.venueSearchBot = str3;
        }
        String str4 = tLRPC$TL_config.gif_search_username;
        if (str4 != null) {
            this.gifSearchBot = str4;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = tLRPC$TL_config.img_search_username;
        }
        this.blockedCountry = tLRPC$TL_config.blocked_mode;
        this.dcDomainName = tLRPC$TL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tLRPC$TL_config.webfile_dc_id;
        String str5 = tLRPC$TL_config.suggested_lang_code;
        if (str5 != null) {
            String str6 = this.suggestedLangCode;
            boolean z2 = str6 == null || !str6.equals(str5);
            this.suggestedLangCode = tLRPC$TL_config.suggested_lang_code;
            if (z2) {
                LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
            }
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tLRPC$TL_config.static_maps_provider == null) {
            tLRPC$TL_config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tLRPC$TL_config.static_maps_provider);
        String[] split = tLRPC$TL_config.static_maps_provider.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split2 = split[i].split("\\+");
            if (split2.length > 0) {
                String[] split3 = split2[0].split(":");
                if (split3.length > 0) {
                    if ("yandex".equals(split3[0])) {
                        if (i == 0) {
                            if (split2.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(split3[0])) {
                        if (i == 0 && split2.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(split3[0])) {
                        if (i == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (split3.length > 1) {
                        this.mapKey = split3[1];
                    }
                }
            }
        }
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putBoolean("remoteConfigLoaded", this.remoteConfigLoaded);
        edit.putInt("maxGroupCount", this.maxGroupCount);
        edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit.putInt("maxEditTime", this.maxEditTime);
        edit.putInt("ratingDecay", this.ratingDecay);
        edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit.putInt("callRingTimeout", this.callRingTimeout);
        edit.putInt("callConnectTimeout", this.callConnectTimeout);
        edit.putInt("callPacketTimeout", this.callPacketTimeout);
        edit.putString("linkPrefix", this.linkPrefix);
        edit.putInt("maxFolderPinnedDialogsCountDefault", this.maxFolderPinnedDialogsCountDefault);
        edit.putInt("maxFolderPinnedDialogsCountPremium", this.maxFolderPinnedDialogsCountPremium);
        edit.putInt("maxMessageLength", this.maxMessageLength);
        edit.putInt("maxCaptionLength", this.maxCaptionLength);
        edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit.putInt("mapProvider", this.mapProvider);
        String str7 = this.mapKey;
        if (str7 != null) {
            edit.putString("pk", str7);
        } else {
            edit.remove("pk");
        }
        edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit.putBoolean("blockedCountry", this.blockedCountry);
        edit.putString("venueSearchBot", this.venueSearchBot);
        edit.putString("gifSearchBot", this.gifSearchBot);
        edit.putString("imageSearchBot", this.imageSearchBot);
        edit.putString("dcDomainName2", this.dcDomainName);
        edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit.putString("suggestedLangCode", this.suggestedLangCode);
        edit.putBoolean("forceTryIpV6", z);
        String str8 = tLRPC$TL_config.autologin_token;
        this.autologinToken = str8;
        edit.putString("autologinToken", str8);
        edit.commit();
        getConnectionsManager().setForceTryIpV6(z);
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tLRPC$TL_config.lang_pack_version, tLRPC$TL_config.base_lang_pack_version);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old2 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old2.phone = "333";
        tLRPC$TL_userForeign_old2.id = 333000L;
        tLRPC$TL_userForeign_old2.first_name = "Telegram";
        tLRPC$TL_userForeign_old2.last_name = "";
        tLRPC$TL_userForeign_old2.status = null;
        tLRPC$TL_userForeign_old2.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old2, true);
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old22 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old22.phone = "42777";
        tLRPC$TL_userForeign_old22.id = 777000L;
        tLRPC$TL_userForeign_old22.verified = true;
        tLRPC$TL_userForeign_old22.first_name = "Telegram";
        tLRPC$TL_userForeign_old22.last_name = "Notifications";
        tLRPC$TL_userForeign_old22.status = null;
        tLRPC$TL_userForeign_old22.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old22, true);
    }

    public TLRPC$InputUser getInputUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$User.id == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerSelf) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$InputPeer.user_id;
        tLRPC$TL_inputUser.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(long j) {
        return getInputUser(getUser(Long.valueOf(j)));
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$Chat tLRPC$Chat) {
        if ((tLRPC$Chat instanceof TLRPC$TL_channel) || (tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
            TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
            tLRPC$TL_inputChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputChannel;
        }
        return new TLRPC$TL_inputChannelEmpty();
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$InputPeer tLRPC$InputPeer) {
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$InputPeer.channel_id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public TLRPC$InputChannel getInputChannel(long j) {
        return getInputChannel(getChat(Long.valueOf(j)));
    }

    public TLRPC$InputPeer getInputPeer(TLRPC$Peer tLRPC$Peer) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = tLRPC$Peer.chat_id;
            return tLRPC$TL_inputPeerChat;
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            long j = tLRPC$Peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j;
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (chat != null) {
                tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
                return tLRPC$TL_inputPeerChannel;
            }
            return tLRPC$TL_inputPeerChannel;
        } else {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            long j2 = tLRPC$Peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User user = getUser(Long.valueOf(j2));
            if (user != null) {
                tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
                return tLRPC$TL_inputPeerUser;
            }
            return tLRPC$TL_inputPeerUser;
        }
    }

    public TLRPC$InputPeer getInputPeer(long j) {
        TLRPC$InputPeer tLRPC$TL_inputPeerUser;
        if (j == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputPeerSelf();
        }
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if (ChatObject.isChannel(chat)) {
                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_inputPeerUser.channel_id = j2;
                tLRPC$TL_inputPeerUser.access_hash = chat.access_hash;
            } else {
                TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                tLRPC$TL_inputPeerChat.chat_id = j2;
                return tLRPC$TL_inputPeerChat;
            }
        } else {
            TLRPC$User user = getUser(Long.valueOf(j));
            tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputPeerUser.user_id = j;
            if (user != null) {
                tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
            }
        }
        return tLRPC$TL_inputPeerUser;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$Chat tLRPC$Chat) {
        if (ChatObject.isChannel(tLRPC$Chat)) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputPeerChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        }
        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
        tLRPC$TL_inputPeerChat.chat_id = tLRPC$Chat.id;
        return tLRPC$TL_inputPeerChat;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$User tLRPC$User) {
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public static TLRPC$InputPeer getInputPeer(TLObject tLObject) {
        if (tLObject instanceof TLRPC$User) {
            return getInputPeer((TLRPC$User) tLObject);
        }
        if (tLObject instanceof TLRPC$Chat) {
            return getInputPeer((TLRPC$Chat) tLObject);
        }
        return null;
    }

    public TLRPC$Peer getPeer(long j) {
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if ((chat instanceof TLRPC$TL_channel) || (chat instanceof TLRPC$TL_channelForbidden)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_peerChannel.channel_id = j2;
                return tLRPC$TL_peerChannel;
            }
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = j2;
            return tLRPC$TL_peerChat;
        }
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_peerUser.user_id = j;
        return tLRPC$TL_peerUser;
    }

    public TLRPC$InputDocument getInputDocument(TLRPC$Document tLRPC$Document) {
        if (tLRPC$Document == null) {
            return null;
        }
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        byte[] bArr = tLRPC$Document.file_reference;
        tLRPC$TL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tLRPC$TL_inputDocument.file_reference = new byte[0];
        }
        return tLRPC$TL_inputDocument;
    }

    public String getPeerName(long j) {
        return getPeerName(j, false);
    }

    public String getPeerName(long j, boolean z) {
        if (j >= 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (z) {
                return AndroidUtilities.removeDiacritics(UserObject.getFirstName(user, true));
            }
            return AndroidUtilities.removeDiacritics(UserObject.getUserName(user));
        }
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        return AndroidUtilities.removeDiacritics(chat == null ? "" : chat.title);
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        TLRPC$InputFile tLRPC$InputFile;
        final Theme.ThemeInfo themeInfo;
        TLRPC$InputFile tLRPC$InputFile2;
        final Theme.ThemeAccent themeAccent;
        TLRPC$TL_theme tLRPC$TL_theme;
        TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings = null;
        if (i == NotificationCenter.fileUploaded) {
            String str = (String) objArr[0];
            TLRPC$InputFile tLRPC$InputFile3 = (TLRPC$InputFile) objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 != null && str2.equals(str)) {
                TLRPC$TL_photos_uploadProfilePhoto tLRPC$TL_photos_uploadProfilePhoto = new TLRPC$TL_photos_uploadProfilePhoto();
                tLRPC$TL_photos_uploadProfilePhoto.file = tLRPC$InputFile3;
                tLRPC$TL_photos_uploadProfilePhoto.flags |= 1;
                getConnectionsManager().sendRequest(tLRPC$TL_photos_uploadProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda194
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$didReceivedNotification$38(tLObject, tLRPC$TL_error);
                    }
                });
            } else {
                String str3 = this.uploadingWallpaper;
                if (str3 != null && str3.equals(str)) {
                    TLRPC$TL_account_uploadWallPaper tLRPC$TL_account_uploadWallPaper = new TLRPC$TL_account_uploadWallPaper();
                    tLRPC$TL_account_uploadWallPaper.file = tLRPC$InputFile3;
                    tLRPC$TL_account_uploadWallPaper.mime_type = "image/jpeg";
                    final Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                    final String str4 = this.uploadingWallpaper;
                    final TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                    tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                    tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                    tLRPC$TL_account_uploadWallPaper.settings = tLRPC$TL_wallPaperSettings;
                    Theme.OverrideWallpaperInfo overrideWallpaperInfo2 = this.uploadingWallpaperInfo;
                    overrideWallpaperInfo2.uploadingProgress = 1.0f;
                    overrideWallpaperInfo2.requestIds = new ArrayList<>();
                    this.uploadingWallpaperInfo.requestIds.add(Integer.valueOf(getConnectionsManager().sendRequest(tLRPC$TL_account_uploadWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda195
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$didReceivedNotification$40(overrideWallpaperInfo, tLRPC$TL_wallPaperSettings, str4, tLObject, tLRPC$TL_error);
                        }
                    })));
                } else {
                    Object obj = this.uploadingThemes.get(str);
                    if (obj instanceof Theme.ThemeInfo) {
                        themeInfo = (Theme.ThemeInfo) obj;
                        if (str.equals(themeInfo.uploadingThumb)) {
                            themeInfo.uploadedThumb = tLRPC$InputFile3;
                            themeInfo.uploadingThumb = null;
                        } else if (str.equals(themeInfo.uploadingFile)) {
                            themeInfo.uploadedFile = tLRPC$InputFile3;
                            themeInfo.uploadingFile = null;
                        }
                        tLRPC$InputFile = themeInfo.uploadedThumb;
                        tLRPC$InputFile2 = themeInfo.uploadedFile;
                        themeAccent = null;
                    } else if (obj instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                        if (str.equals(themeAccent2.uploadingThumb)) {
                            themeAccent2.uploadedThumb = tLRPC$InputFile3;
                            themeAccent2.uploadingThumb = null;
                        } else if (str.equals(themeAccent2.uploadingFile)) {
                            themeAccent2.uploadedFile = tLRPC$InputFile3;
                            themeAccent2.uploadingFile = null;
                        }
                        Theme.ThemeInfo themeInfo2 = themeAccent2.parentTheme;
                        TLRPC$InputFile tLRPC$InputFile4 = themeAccent2.uploadedThumb;
                        TLRPC$InputFile tLRPC$InputFile5 = themeAccent2.uploadedFile;
                        themeInfo = themeInfo2;
                        tLRPC$InputFile = tLRPC$InputFile4;
                        tLRPC$InputFile2 = tLRPC$InputFile5;
                        themeAccent = themeAccent2;
                    } else {
                        tLRPC$InputFile = null;
                        themeInfo = null;
                        tLRPC$InputFile2 = null;
                        themeAccent = null;
                    }
                    this.uploadingThemes.remove(str);
                    if (tLRPC$InputFile2 != null && tLRPC$InputFile != null) {
                        new File(str);
                        TLRPC$TL_account_uploadTheme tLRPC$TL_account_uploadTheme = new TLRPC$TL_account_uploadTheme();
                        tLRPC$TL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
                        tLRPC$TL_account_uploadTheme.file_name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.file = tLRPC$InputFile2;
                        tLRPC$InputFile2.name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.thumb = tLRPC$InputFile;
                        tLRPC$InputFile.name = "theme-preview.jpg";
                        tLRPC$TL_account_uploadTheme.flags |= 1;
                        if (themeAccent != null) {
                            themeAccent.uploadedFile = null;
                            themeAccent.uploadedThumb = null;
                            tLRPC$TL_theme = themeAccent.info;
                            tLRPC$TL_inputThemeSettings = new TLRPC$TL_inputThemeSettings();
                            tLRPC$TL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                            tLRPC$TL_inputThemeSettings.accent_color = themeAccent.accentColor;
                            int i3 = themeAccent.accentColor2;
                            if (i3 != 0) {
                                tLRPC$TL_inputThemeSettings.flags |= 8;
                                tLRPC$TL_inputThemeSettings.outbox_accent_color = i3;
                            }
                            int i4 = themeAccent.myMessagesAccentColor;
                            if (i4 != 0) {
                                tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i4));
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                                int i5 = themeAccent.myMessagesGradientAccentColor1;
                                if (i5 != 0) {
                                    tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i5));
                                    int i6 = themeAccent.myMessagesGradientAccentColor2;
                                    if (i6 != 0) {
                                        tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i6));
                                        int i7 = themeAccent.myMessagesGradientAccentColor3;
                                        if (i7 != 0) {
                                            tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i7));
                                        }
                                    }
                                }
                                tLRPC$TL_inputThemeSettings.message_colors_animated = themeAccent.myMessagesAnimated;
                            }
                            tLRPC$TL_inputThemeSettings.flags |= 2;
                            tLRPC$TL_inputThemeSettings.wallpaper_settings = new TLRPC$TL_wallPaperSettings();
                            if (!TextUtils.isEmpty(themeAccent.patternSlug)) {
                                TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
                                tLRPC$TL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperSlug;
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                                tLRPC$WallPaperSettings.flags |= 8;
                            } else {
                                TLRPC$TL_inputWallPaperNoFile tLRPC$TL_inputWallPaperNoFile = new TLRPC$TL_inputWallPaperNoFile();
                                tLRPC$TL_inputWallPaperNoFile.id = 0L;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperNoFile;
                            }
                            TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                            tLRPC$WallPaperSettings2.motion = themeAccent.patternMotion;
                            long j = themeAccent.backgroundOverrideColor;
                            if (j != 0) {
                                tLRPC$WallPaperSettings2.background_color = (int) j;
                                tLRPC$WallPaperSettings2.flags |= 1;
                            }
                            long j2 = themeAccent.backgroundGradientOverrideColor1;
                            if (j2 != 0) {
                                tLRPC$WallPaperSettings2.second_background_color = (int) j2;
                                tLRPC$WallPaperSettings2.flags |= 16;
                                tLRPC$WallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                            }
                            long j3 = themeAccent.backgroundGradientOverrideColor2;
                            if (j3 != 0) {
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings3 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings3.third_background_color = (int) j3;
                                tLRPC$WallPaperSettings3.flags |= 32;
                            }
                            long j4 = themeAccent.backgroundGradientOverrideColor3;
                            if (j4 != 0) {
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings4 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings4.fourth_background_color = (int) j4;
                                tLRPC$WallPaperSettings4.flags |= 64;
                            }
                        } else {
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            tLRPC$TL_theme = themeInfo.info;
                        }
                        final TLRPC$TL_theme tLRPC$TL_theme2 = tLRPC$TL_theme;
                        final TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings2 = tLRPC$TL_inputThemeSettings;
                        getConnectionsManager().sendRequest(tLRPC$TL_account_uploadTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda196
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$didReceivedNotification$46(tLRPC$TL_theme2, themeInfo, tLRPC$TL_inputThemeSettings2, themeAccent, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                }
            }
        } else if (i == NotificationCenter.fileUploadFailed) {
            String str5 = (String) objArr[0];
            String str6 = this.uploadingAvatar;
            if (str6 != null && str6.equals(str5)) {
                this.uploadingAvatar = null;
            } else {
                String str7 = this.uploadingWallpaper;
                if (str7 != null && str7.equals(str5)) {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                } else {
                    Object remove = this.uploadingThemes.remove(str5);
                    if (remove instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                        themeInfo3.uploadedFile = null;
                        themeInfo3.uploadedThumb = null;
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo3, 0);
                    } else if (remove instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                        themeAccent3.uploadingThumb = null;
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
                    }
                }
            }
        }
        if (i == NotificationCenter.fileUploadProgressChanged) {
            String str8 = (String) objArr[0];
            String str9 = this.uploadingWallpaper;
            if (str9 == null || !str9.equals(str8)) {
                return;
            }
            this.uploadingWallpaperInfo.uploadingProgress = ((float) ((Long) objArr[1]).longValue()) / ((float) ((Long) objArr[2]).longValue());
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (((Boolean) objArr[6]).booleanValue()) {
                return;
            }
            Integer num = (Integer) objArr[0];
            Integer num2 = (Integer) objArr[1];
            Long l = (Long) objArr[3];
            ArrayList<MessageObject> arrayList = this.dialogMessage.get(l.longValue());
            for (int i8 = 0; arrayList != null && i8 < arrayList.size(); i8++) {
                MessageObject messageObject2 = arrayList.get(i8);
                if (messageObject2 != null && (messageObject2.getId() == num.intValue() || messageObject2.messageOwner.local_id == num.intValue())) {
                    messageObject2.messageOwner.id = num2.intValue();
                    messageObject2.messageOwner.send_state = 0;
                }
                MessageObject messageObject3 = this.dialogMessagesByIds.get(num.intValue());
                if (messageObject3 != null) {
                    this.dialogMessagesByIds.remove(num.intValue());
                    this.dialogMessagesByIds.put(num2.intValue(), messageObject3);
                }
            }
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(l.longValue());
            if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == num.intValue()) {
                tLRPC$Dialog.top_message = num2.intValue();
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            if (DialogObject.isChatDialog(l.longValue())) {
                TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(-l.longValue());
                TLRPC$Chat chat = getChat(Long.valueOf(-l.longValue()));
                if (chat == null || ChatObject.hasAdminRights(chat) || tLRPC$ChatFull == null || tLRPC$ChatFull.slowmode_seconds == 0) {
                    return;
                }
                tLRPC$ChatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + tLRPC$ChatFull.slowmode_seconds;
                tLRPC$ChatFull.flags |= 262144;
                getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
            }
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC$Message tLRPC$Message = (TLRPC$Message) objArr[0];
            if (tLRPC$Message.peer_id.channel_id != 0 || (messageObject = this.dialogMessagesByIds.get(tLRPC$Message.id)) == null) {
                return;
            }
            messageObject.messageOwner.media = MessageObject.getMedia(tLRPC$Message);
            if (MessageObject.getMedia(tLRPC$Message).ttl_seconds != 0) {
                if ((MessageObject.getMedia(tLRPC$Message).photo instanceof TLRPC$TL_photoEmpty) || (MessageObject.getMedia(tLRPC$Message).document instanceof TLRPC$TL_documentEmpty)) {
                    messageObject.setType();
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        } else if (i == NotificationCenter.currentUserPremiumStatusChanged) {
            loadAppConfig(false);
            getContactsController().reloadContactsStatusesMaybe(true);
            if ((!this.storyQualityFull || getUserConfig().isPremium()) && !getUserConfig().isPremium()) {
                return;
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storyQualityUpdate, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$38(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user == null) {
                return;
            }
            TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
            ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photos_photo.photo.sizes;
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
            TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
            TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
            user.photo = tLRPC$TL_userProfilePhoto;
            tLRPC$TL_userProfilePhoto.photo_id = tLRPC$TL_photos_photo.photo.id;
            if (closestPhotoSizeWithSize != null) {
                tLRPC$TL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
            }
            if (closestPhotoSizeWithSize2 != null) {
                tLRPC$TL_userProfilePhoto.photo_big = closestPhotoSizeWithSize2.location;
            }
            getDialogPhotos(user.id).reset();
            getDialogPhotos(user.id).load(0, 80);
            ArrayList arrayList2 = new ArrayList();
            arrayList2.add(user);
            getMessagesStorage().putUsersAndChats(arrayList2, null, false, true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda385
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didReceivedNotification$37();
                }
            });
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$37() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    public /* synthetic */ void lambda$didReceivedNotification$40(final Theme.OverrideWallpaperInfo overrideWallpaperInfo, final TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, final String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) tLObject;
        final File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (tLRPC$WallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, getFileLoader().getPathToAttach(tLRPC$WallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda272
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$39(tLRPC$WallPaper, tLRPC$TL_wallPaperSettings, overrideWallpaperInfo, file, str);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$39(TLRPC$WallPaper tLRPC$WallPaper, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file, String str) {
        if (this.uploadingWallpaper == null || this.uploadingWallpaperInfo.requestIds == null || tLRPC$WallPaper == null) {
            return;
        }
        tLRPC$WallPaper.settings = tLRPC$TL_wallPaperSettings;
        tLRPC$WallPaper.flags |= 4;
        overrideWallpaperInfo.slug = tLRPC$WallPaper.slug;
        overrideWallpaperInfo.saveOverrideWallpaper();
        ArrayList<TLRPC$WallPaper> arrayList = new ArrayList<>();
        arrayList.add(tLRPC$WallPaper);
        getMessagesStorage().putWallpapers(arrayList, 2);
        TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$WallPaper.document.thumbs, 320);
        if (closestPhotoSizeWithSize != null) {
            ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$WallPaper.document), false);
        }
        NotificationCenter.getGlobalInstance().lambda$postNotificationNameOnUIThread$1(NotificationCenter.wallpapersNeedReload, tLRPC$WallPaper.slug);
        ArrayList<Integer> arrayList2 = this.uploadingWallpaperInfo.requestIds;
        if (arrayList2 == null || overrideWallpaperInfo.dialogId == 0) {
            return;
        }
        arrayList2.add(Integer.valueOf(ChatThemeController.getInstance(this.currentAccount).setWallpaperToPeer(overrideWallpaperInfo.dialogId, str, overrideWallpaperInfo, null, null)));
    }

    public /* synthetic */ void lambda$didReceivedNotification$46(TLRPC$TL_theme tLRPC$TL_theme, final Theme.ThemeInfo themeInfo, TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings, final Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        String name = tLRPC$TL_theme != null ? tLRPC$TL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject != null) {
            TLRPC$Document tLRPC$Document = (TLRPC$Document) tLObject;
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            if (tLRPC$TL_theme == null || !tLRPC$TL_theme.creator) {
                TLRPC$TL_account_createTheme tLRPC$TL_account_createTheme = new TLRPC$TL_account_createTheme();
                tLRPC$TL_account_createTheme.document = tLRPC$TL_inputDocument;
                tLRPC$TL_account_createTheme.flags |= 4;
                tLRPC$TL_account_createTheme.slug = (tLRPC$TL_theme == null || TextUtils.isEmpty(tLRPC$TL_theme.slug)) ? "" : tLRPC$TL_theme.slug;
                tLRPC$TL_account_createTheme.title = name;
                if (tLRPC$TL_inputThemeSettings != null) {
                    tLRPC$TL_account_createTheme.settings = tLRPC$TL_inputThemeSettings;
                    tLRPC$TL_account_createTheme.flags |= 8;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_createTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda291
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                        MessagesController.this.lambda$didReceivedNotification$42(themeInfo, themeAccent, tLObject2, tLRPC$TL_error2);
                    }
                });
                return;
            }
            TLRPC$TL_account_updateTheme tLRPC$TL_account_updateTheme = new TLRPC$TL_account_updateTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_updateTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_updateTheme.slug = tLRPC$TL_theme.slug;
            tLRPC$TL_account_updateTheme.title = name;
            tLRPC$TL_account_updateTheme.document = tLRPC$TL_inputDocument;
            int i = tLRPC$TL_account_updateTheme.flags | 1 | 2 | 4;
            tLRPC$TL_account_updateTheme.flags = i;
            if (tLRPC$TL_inputThemeSettings != null) {
                tLRPC$TL_account_updateTheme.settings = tLRPC$TL_inputThemeSettings;
                tLRPC$TL_account_updateTheme.flags = i | 8;
            }
            tLRPC$TL_account_updateTheme.format = "android";
            getConnectionsManager().sendRequest(tLRPC$TL_account_updateTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda292
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error2) {
                    MessagesController.this.lambda$didReceivedNotification$44(themeInfo, themeAccent, tLObject2, tLRPC$TL_error2);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda293
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$45(themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$42(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda75
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$41(tLObject, themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$41(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$didReceivedNotification$44(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda371
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didReceivedNotification$43(tLObject, themeInfo, themeAccent);
            }
        });
    }

    public /* synthetic */ void lambda$didReceivedNotification$43(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$didReceivedNotification$45(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        getColorPalette().cleanup();
        getTranslateController().cleanup();
        getSavedMessagesController().cleanup();
        StoriesController storiesController = this.storiesController;
        if (storiesController != null) {
            storiesController.cleanup();
        }
        UnconfirmedAuthController unconfirmedAuthController = this.unconfirmedAuthController;
        if (unconfirmedAuthController != null) {
            unconfirmedAuthController.cleanup();
        }
        this.showFiltersTooltip = false;
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0L).putLong("lastStickersLoadTime", 0L).putLong("lastStickersLoadTimeMask", 0L).putLong("lastStickersLoadTimeFavs", 0L).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("reminderhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").remove("showFiltersTooltip").remove("transcribeButtonPressed").commit();
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("shortcut_widget", 0);
        SharedPreferences.Editor editor = null;
        ArrayList arrayList = null;
        ArrayList arrayList2 = null;
        AppWidgetManager appWidgetManager = null;
        for (Map.Entry<String, ?> entry : sharedPreferences.getAll().entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("account") && ((Integer) entry.getValue()).intValue() == this.currentAccount) {
                int intValue = Utilities.parseInt((CharSequence) key).intValue();
                if (editor == null) {
                    editor = sharedPreferences.edit();
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                editor.putBoolean("deleted" + intValue, true);
                if (sharedPreferences.getInt("type" + intValue, 0) == 0) {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(Integer.valueOf(intValue));
                } else {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(intValue));
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                ChatsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList.get(i)).intValue());
            }
        }
        if (arrayList2 != null) {
            int size2 = arrayList2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                ContactsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList2.get(i2)).intValue());
            }
        }
        this.lastScheduledServerQueryTime.clear();
        this.lastQuickReplyServerQueryTime.clear();
        this.lastSavedServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.reloadingSavedWebpages.clear();
        this.reloadingSavedWebpagesPending.clear();
        this.sponsoredMessages.clear();
        this.sendAsPeers.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.activeVoiceChatsMap.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
        this.dialogsCanAddUsers.clear();
        this.dialogsMyChannels.clear();
        this.dialogsMyGroups.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda351
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$47();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int i3 = 0;
        while (true) {
            LongSparseArray<LongSparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i3 >= longSparseArrayArr.length) {
                break;
            }
            LongSparseArray<LongSparseArray<Boolean>> longSparseArray = longSparseArrayArr[i3];
            if (longSparseArray != null) {
                longSparseArray.clear();
            }
            i3++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0L;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda352
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$48();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda353
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$cleanup$49();
            }
        });
    }

    public /* synthetic */ void lambda$cleanup$47() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0L;
        this.updatesStartWaitTimePts = 0L;
        this.updatesStartWaitTimeQts = 0L;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    public /* synthetic */ void lambda$cleanup$48() {
        FileLog.d("cleanup: isUpdating = false");
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public /* synthetic */ void lambda$cleanup$49() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public boolean isChatNoForwards(TLRPC$Chat tLRPC$Chat) {
        TLRPC$Chat chat;
        if (tLRPC$Chat == null) {
            return false;
        }
        TLRPC$InputChannel tLRPC$InputChannel = tLRPC$Chat.migrated_to;
        if (tLRPC$InputChannel != null && (chat = getChat(Long.valueOf(tLRPC$InputChannel.channel_id))) != null) {
            return chat.noforwards;
        }
        return tLRPC$Chat.noforwards;
    }

    public boolean isChatNoForwards(long j) {
        return isChatNoForwards(getChat(Long.valueOf(j)));
    }

    public TLRPC$User getUser(Long l) {
        if (l.longValue() == 0) {
            return UserConfig.getInstance(this.currentAccount).getCurrentUser();
        }
        return this.users.get(l);
    }

    public TLObject getUserOrChat(long j) {
        if (this.users.containsKey(Long.valueOf(j))) {
            return this.users.get(Long.valueOf(j));
        }
        long j2 = -j;
        if (this.chats.containsKey(Long.valueOf(j2))) {
            return this.chats.get(Long.valueOf(j2));
        }
        return null;
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(str.toLowerCase());
    }

    public TLRPC$User getUser(String str) {
        TLObject userOrChat = getUserOrChat(str);
        if (userOrChat instanceof TLRPC$User) {
            return (TLRPC$User) userOrChat;
        }
        return null;
    }

    public ConcurrentHashMap<Long, TLRPC$User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Long, TLRPC$Chat> getChats() {
        return this.chats;
    }

    public TLRPC$Chat getChat(Long l) {
        return this.chats.get(l);
    }

    public TLRPC$EncryptedChat getEncryptedChat(Integer num) {
        return this.encryptedChats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.encryptedChats.get(Integer.valueOf(i));
        if (tLRPC$EncryptedChat != null) {
            if (!z) {
                return tLRPC$EncryptedChat;
            }
            if (!(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested)) {
                return tLRPC$EncryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList<TLObject> arrayList = new ArrayList<>();
        getMessagesStorage().getEncryptedChat(i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (arrayList.size() == 2) {
            TLRPC$EncryptedChat tLRPC$EncryptedChat2 = (TLRPC$EncryptedChat) arrayList.get(0);
            putEncryptedChat(tLRPC$EncryptedChat2, false);
            putUser((TLRPC$User) arrayList.get(1), true);
            return tLRPC$EncryptedChat2;
        }
        return tLRPC$EncryptedChat;
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (z2) {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
            return;
        }
        arrayList.remove(Long.valueOf(j));
    }

    public void setLastCreatedDialogId(final long j, final boolean z, final boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (z2) {
                if (arrayList.contains(Long.valueOf(j))) {
                    return;
                }
                arrayList.add(Long.valueOf(j));
            } else {
                arrayList.remove(Long.valueOf(j));
                SparseArray<MessageObject> sparseArray = this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        sparseArray.valueAt(i).pollVisibleOnScreen = false;
                    }
                }
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda380
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$50(z, z2, j);
            }
        });
    }

    public /* synthetic */ void lambda$setLastCreatedDialogId$50(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (z2) {
            if (arrayList.contains(Long.valueOf(j))) {
                return;
            }
            arrayList.add(Long.valueOf(j));
            return;
        }
        arrayList.remove(Long.valueOf(j));
    }

    public TLRPC$TL_chatInviteExported getExportedInvite(long j) {
        return this.exportedChats.get(j);
    }

    public boolean putUser(TLRPC$User tLRPC$User, boolean z) {
        return putUser(tLRPC$User, z, false);
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x0054  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:144:0x0085  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x00b8  */
    /* JADX WARN: Removed duplicated region for block: B:172:0x0105  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean putUser(TLRPC$User tLRPC$User, boolean z, boolean z2) {
        boolean z3;
        TLRPC$User tLRPC$User2;
        TLRPC$UserStatus tLRPC$UserStatus;
        TLRPC$UserStatus tLRPC$UserStatus2;
        String str;
        int i;
        String str2;
        if (tLRPC$User == null) {
            return false;
        }
        if (z) {
            long j = tLRPC$User.id;
            if (j / 1000 != 333 && j != 777000) {
                z3 = true;
                tLRPC$User2 = this.users.get(Long.valueOf(tLRPC$User.id));
                if (tLRPC$User2 == tLRPC$User || z2) {
                    if (tLRPC$User2 != null && !TextUtils.isEmpty(tLRPC$User2.username)) {
                        this.objectsByUsernames.remove(tLRPC$User2.username.toLowerCase());
                    }
                    if (tLRPC$User2 != null && tLRPC$User2.usernames != null) {
                        for (i = 0; i < tLRPC$User2.usernames.size(); i++) {
                            TLRPC$TL_username tLRPC$TL_username = tLRPC$User2.usernames.get(i);
                            if (tLRPC$TL_username != null && (str2 = tLRPC$TL_username.username) != null) {
                                this.objectsByUsernames.remove(str2.toLowerCase());
                            }
                        }
                    }
                    if (!TextUtils.isEmpty(tLRPC$User.username)) {
                        this.objectsByUsernames.put(tLRPC$User.username.toLowerCase(), tLRPC$User);
                    }
                    if (tLRPC$User.usernames != null) {
                        for (int i2 = 0; i2 < tLRPC$User.usernames.size(); i2++) {
                            TLRPC$TL_username tLRPC$TL_username2 = tLRPC$User.usernames.get(i2);
                            if (tLRPC$TL_username2 != null && (str = tLRPC$TL_username2.username) != null && tLRPC$TL_username2.active) {
                                this.objectsByUsernames.put(str.toLowerCase(), tLRPC$User);
                            }
                        }
                    }
                    updateEmojiStatusUntilUpdate(tLRPC$User.id, tLRPC$User.emoji_status);
                    if (tLRPC$User.min) {
                        if (!z3) {
                            this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                            if (tLRPC$User.id == getUserConfig().getClientUserId()) {
                                getUserConfig().setCurrentUser(tLRPC$User);
                                getUserConfig().saveConfig(true);
                            }
                            getUserNameResolver().update(tLRPC$User2, tLRPC$User);
                            if (tLRPC$User2 != null && (tLRPC$UserStatus = tLRPC$User.status) != null && (tLRPC$UserStatus2 = tLRPC$User2.status) != null && tLRPC$UserStatus.expires != tLRPC$UserStatus2.expires) {
                                return true;
                            }
                        } else if (tLRPC$User2 == null) {
                            this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                        } else if (tLRPC$User2.min) {
                            if (tLRPC$User2.bot) {
                                String str3 = tLRPC$User2.username;
                                if (str3 != null) {
                                    tLRPC$User.username = str3;
                                    tLRPC$User.flags |= 8;
                                } else {
                                    tLRPC$User.flags &= -9;
                                    tLRPC$User.username = null;
                                }
                            }
                            if (tLRPC$User2.apply_min_photo) {
                                TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User2.photo;
                                if (tLRPC$UserProfilePhoto != null) {
                                    tLRPC$User.photo = tLRPC$UserProfilePhoto;
                                    tLRPC$User.flags |= 32;
                                } else {
                                    tLRPC$User.flags &= -33;
                                    tLRPC$User.photo = null;
                                }
                            }
                            this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                        }
                    } else if (tLRPC$User2 == null) {
                        this.users.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                    } else if (!z3) {
                        getUserNameResolver().update(tLRPC$User2, tLRPC$User);
                        if (tLRPC$User.bot) {
                            String str4 = tLRPC$User.username;
                            if (str4 != null) {
                                tLRPC$User2.username = str4;
                                tLRPC$User2.flags |= 8;
                            } else {
                                tLRPC$User2.flags &= -9;
                                tLRPC$User2.username = null;
                            }
                        }
                        if (tLRPC$User.apply_min_photo) {
                            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto2 = tLRPC$User.photo;
                            if (tLRPC$UserProfilePhoto2 != null) {
                                tLRPC$User2.photo = tLRPC$UserProfilePhoto2;
                                tLRPC$User2.flags |= 32;
                            } else {
                                tLRPC$User2.flags &= -33;
                                tLRPC$User2.photo = null;
                            }
                        }
                    }
                    return false;
                }
                return false;
            }
        }
        z3 = false;
        tLRPC$User2 = this.users.get(Long.valueOf(tLRPC$User.id));
        if (tLRPC$User2 == tLRPC$User) {
        }
        if (tLRPC$User2 != null) {
            this.objectsByUsernames.remove(tLRPC$User2.username.toLowerCase());
        }
        if (tLRPC$User2 != null) {
            while (i < tLRPC$User2.usernames.size()) {
            }
        }
        if (!TextUtils.isEmpty(tLRPC$User.username)) {
        }
        if (tLRPC$User.usernames != null) {
        }
        updateEmojiStatusUntilUpdate(tLRPC$User.id, tLRPC$User.emoji_status);
        if (tLRPC$User.min) {
        }
        return false;
    }

    public void reloadUser(long j) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
        TLRPC$InputUser inputUser = getInputUser(j);
        if (inputUser == null) {
            return;
        }
        tLRPC$TL_users_getUsers.id.add(inputUser);
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_users_getUsers, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda57
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadUser$51(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadUser$51(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            ArrayList<Object> arrayList = ((TLRPC$Vector) tLObject).objects;
            ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i) instanceof TLRPC$User) {
                    arrayList2.add((TLRPC$User) arrayList.get(i));
                }
            }
            getMessagesController().putUsers(arrayList2, false);
        }
    }

    public void putUsers(ArrayList<TLRPC$User> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        boolean z2 = false;
        for (int i = 0; i < size; i++) {
            if (putUser(arrayList.get(i), z)) {
                z2 = true;
            }
        }
        if (z2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda289
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$putUsers$52();
                }
            });
        }
    }

    public /* synthetic */ void lambda$putUsers$52() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public void putChat(final TLRPC$Chat tLRPC$Chat, boolean z) {
        TLRPC$Chat tLRPC$Chat2;
        if (tLRPC$Chat == null || (tLRPC$Chat2 = this.chats.get(Long.valueOf(tLRPC$Chat.id))) == tLRPC$Chat) {
            return;
        }
        if (tLRPC$Chat2 != null && !TextUtils.isEmpty(tLRPC$Chat2.username)) {
            this.objectsByUsernames.remove(tLRPC$Chat2.username.toLowerCase());
        }
        if (tLRPC$Chat2 != null && tLRPC$Chat2.usernames != null) {
            for (int i = 0; i < tLRPC$Chat2.usernames.size(); i++) {
                TLRPC$TL_username tLRPC$TL_username = tLRPC$Chat2.usernames.get(i);
                if (tLRPC$TL_username != null && !TextUtils.isEmpty(tLRPC$TL_username.username)) {
                    this.objectsByUsernames.remove(tLRPC$TL_username.username.toLowerCase());
                }
            }
        }
        if (!TextUtils.isEmpty(tLRPC$Chat.username)) {
            this.objectsByUsernames.put(tLRPC$Chat.username.toLowerCase(), tLRPC$Chat);
        }
        if (tLRPC$Chat.usernames != null) {
            for (int i2 = 0; i2 < tLRPC$Chat.usernames.size(); i2++) {
                TLRPC$TL_username tLRPC$TL_username2 = tLRPC$Chat.usernames.get(i2);
                if (tLRPC$TL_username2 != null && !TextUtils.isEmpty(tLRPC$TL_username2.username) && tLRPC$TL_username2.active) {
                    this.objectsByUsernames.put(tLRPC$TL_username2.username.toLowerCase(), tLRPC$Chat);
                }
            }
        }
        updateEmojiStatusUntilUpdate(-tLRPC$Chat.id, tLRPC$Chat.emoji_status);
        if (!tLRPC$Chat.min) {
            if (!z) {
                if (tLRPC$Chat2 != null) {
                    if (tLRPC$Chat.version != tLRPC$Chat2.version) {
                        this.loadedFullChats.delete(tLRPC$Chat.id);
                    }
                    int i3 = tLRPC$Chat2.participants_count;
                    if (i3 != 0 && tLRPC$Chat.participants_count == 0) {
                        tLRPC$Chat.participants_count = i3;
                        tLRPC$Chat.flags |= 131072;
                    }
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat2.banned_rights;
                    int i4 = tLRPC$TL_chatBannedRights != null ? tLRPC$TL_chatBannedRights.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                    int i5 = tLRPC$TL_chatBannedRights2 != null ? tLRPC$TL_chatBannedRights2.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights3 = tLRPC$Chat2.default_banned_rights;
                    int i6 = tLRPC$TL_chatBannedRights3 != null ? tLRPC$TL_chatBannedRights3.flags : 0;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights4 = tLRPC$Chat.default_banned_rights;
                    int i7 = tLRPC$TL_chatBannedRights4 != null ? tLRPC$TL_chatBannedRights4.flags : 0;
                    tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights4;
                    if (tLRPC$TL_chatBannedRights4 == null) {
                        tLRPC$Chat2.flags &= -262145;
                    } else {
                        tLRPC$Chat2.flags = 262144 | tLRPC$Chat2.flags;
                    }
                    tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights2;
                    if (tLRPC$TL_chatBannedRights2 == null) {
                        tLRPC$Chat2.flags &= -32769;
                    } else {
                        tLRPC$Chat2.flags |= LiteMode.FLAG_CHAT_SCALE;
                    }
                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                    tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights;
                    if (tLRPC$TL_chatAdminRights == null) {
                        tLRPC$Chat2.flags &= -16385;
                    } else {
                        tLRPC$Chat2.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                    }
                    if (tLRPC$Chat.stories_hidden_min) {
                        tLRPC$Chat.stories_hidden = tLRPC$Chat2.stories_hidden;
                    }
                    if (i4 != i5 || i6 != i7) {
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda255
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$putChat$53(tLRPC$Chat);
                            }
                        });
                    }
                }
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (tLRPC$Chat2 == null) {
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (tLRPC$Chat2.min) {
                tLRPC$Chat.title = tLRPC$Chat2.title;
                tLRPC$Chat.photo = tLRPC$Chat2.photo;
                tLRPC$Chat.broadcast = tLRPC$Chat2.broadcast;
                tLRPC$Chat.verified = tLRPC$Chat2.verified;
                tLRPC$Chat.megagroup = tLRPC$Chat2.megagroup;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights5 = tLRPC$Chat2.default_banned_rights;
                if (tLRPC$TL_chatBannedRights5 != null) {
                    tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights5;
                    tLRPC$Chat.flags |= 262144;
                }
                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$Chat2.admin_rights;
                if (tLRPC$TL_chatAdminRights2 != null) {
                    tLRPC$Chat.admin_rights = tLRPC$TL_chatAdminRights2;
                    tLRPC$Chat.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                }
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights6 = tLRPC$Chat2.banned_rights;
                if (tLRPC$TL_chatBannedRights6 != null) {
                    tLRPC$Chat.banned_rights = tLRPC$TL_chatBannedRights6;
                    tLRPC$Chat.flags |= LiteMode.FLAG_CHAT_SCALE;
                }
                String str = tLRPC$Chat2.username;
                if (str != null) {
                    tLRPC$Chat.username = str;
                    tLRPC$Chat.flags |= 64;
                } else {
                    tLRPC$Chat.flags &= -65;
                    tLRPC$Chat.username = null;
                }
                int i8 = tLRPC$Chat2.participants_count;
                if (i8 != 0 && tLRPC$Chat.participants_count == 0) {
                    tLRPC$Chat.participants_count = i8;
                    tLRPC$Chat.flags |= 131072;
                }
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            }
            addOrRemoveActiveVoiceChat(tLRPC$Chat);
        } else if (tLRPC$Chat2 == null) {
            this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            addOrRemoveActiveVoiceChat(tLRPC$Chat);
        } else if (!z) {
            getUserNameResolver().update(tLRPC$Chat2, tLRPC$Chat);
            tLRPC$Chat2.title = tLRPC$Chat.title;
            tLRPC$Chat2.photo = tLRPC$Chat.photo;
            tLRPC$Chat2.broadcast = tLRPC$Chat.broadcast;
            tLRPC$Chat2.verified = tLRPC$Chat.verified;
            tLRPC$Chat2.megagroup = tLRPC$Chat.megagroup;
            tLRPC$Chat2.call_not_empty = tLRPC$Chat.call_not_empty;
            tLRPC$Chat2.call_active = tLRPC$Chat.call_active;
            TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights7 = tLRPC$Chat.default_banned_rights;
            if (tLRPC$TL_chatBannedRights7 != null) {
                tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights7;
                tLRPC$Chat2.flags |= 262144;
            }
            TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3 = tLRPC$Chat.admin_rights;
            if (tLRPC$TL_chatAdminRights3 != null) {
                tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights3;
                tLRPC$Chat2.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
            }
            TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights8 = tLRPC$Chat.banned_rights;
            if (tLRPC$TL_chatBannedRights8 != null) {
                tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights8;
                tLRPC$Chat2.flags |= LiteMode.FLAG_CHAT_SCALE;
            }
            String str2 = tLRPC$Chat.username;
            if (str2 != null) {
                tLRPC$Chat2.username = str2;
                tLRPC$Chat2.flags |= 64;
            } else {
                tLRPC$Chat2.flags &= -65;
                tLRPC$Chat2.username = null;
            }
            int i9 = tLRPC$Chat.participants_count;
            if (i9 != 0) {
                tLRPC$Chat2.participants_count = i9;
            }
            addOrRemoveActiveVoiceChat(tLRPC$Chat2);
            boolean z2 = tLRPC$Chat2.forum;
            boolean z3 = tLRPC$Chat.forum;
            if (z2 != z3) {
                tLRPC$Chat2.forum = z3;
                if (z3) {
                    tLRPC$Chat2.flags |= 1073741824;
                } else {
                    tLRPC$Chat2.flags &= -1073741825;
                }
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatSwithcedToForum, Long.valueOf(tLRPC$Chat.id));
            }
        }
        if (tLRPC$Chat2 == null || tLRPC$Chat2.forum == tLRPC$Chat.forum) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$putChat$54(tLRPC$Chat);
            }
        });
    }

    public /* synthetic */ void lambda$putChat$53(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public /* synthetic */ void lambda$putChat$54(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatSwithcedToForum, Long.valueOf(tLRPC$Chat.id));
    }

    public void putChats(ArrayList<TLRPC$Chat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putChat(arrayList.get(i), z);
        }
    }

    private void addOrRemoveActiveVoiceChat(final TLRPC$Chat tLRPC$Chat) {
        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda234
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addOrRemoveActiveVoiceChat$55(tLRPC$Chat);
                }
            });
        } else {
            lambda$addOrRemoveActiveVoiceChat$55(tLRPC$Chat);
        }
    }

    /* renamed from: addOrRemoveActiveVoiceChatInternal */
    public void lambda$addOrRemoveActiveVoiceChat$55(TLRPC$Chat tLRPC$Chat) {
        TLRPC$Chat tLRPC$Chat2 = this.activeVoiceChatsMap.get(Long.valueOf(tLRPC$Chat.id));
        if (tLRPC$Chat.call_active && tLRPC$Chat.call_not_empty && tLRPC$Chat.migrated_to == null && !ChatObject.isNotInChat(tLRPC$Chat)) {
            if (tLRPC$Chat2 != null) {
                return;
            }
            this.activeVoiceChatsMap.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        } else if (tLRPC$Chat2 == null) {
        } else {
            this.activeVoiceChatsMap.remove(Long.valueOf(tLRPC$Chat.id));
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        }
    }

    public ArrayList<Long> getActiveGroupCalls() {
        return new ArrayList<>(this.activeVoiceChatsMap.keySet());
    }

    public void setReferer(String str) {
        if (str == null) {
            return;
        }
        this.installReferer = str;
        this.mainPreferences.edit().putString("installReferer", str).commit();
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat == null) {
            return;
        }
        if (z) {
            this.encryptedChats.putIfAbsent(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
        } else {
            this.encryptedChats.put(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            putEncryptedChat(arrayList.get(i), z);
        }
    }

    public TLRPC$UserFull getUserFull(long j) {
        return this.fullUsers.get(j);
    }

    public TLRPC$ChatFull getChatFull(long j) {
        return this.fullChats.get(j);
    }

    public void putGroupCall(long j, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(j, call);
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(call.call.id), Boolean.FALSE);
        loadFullChat(j, 0, true);
    }

    public ChatObject.Call getGroupCall(long j, boolean z) {
        return getGroupCall(j, z, null);
    }

    public ChatObject.Call getGroupCall(final long j, boolean z, final Runnable runnable) {
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull == null || (tLRPC$TL_inputGroupCall = chatFull.call) == null) {
            return null;
        }
        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_inputGroupCall.id);
        if (call == null && z && !this.loadingGroupCalls.contains(Long.valueOf(j))) {
            this.loadingGroupCalls.add(Long.valueOf(j));
            if (chatFull.call != null) {
                TLRPC$TL_phone_getGroupCall tLRPC$TL_phone_getGroupCall = new TLRPC$TL_phone_getGroupCall();
                tLRPC$TL_phone_getGroupCall.call = chatFull.call;
                tLRPC$TL_phone_getGroupCall.limit = 20;
                getConnectionsManager().sendRequest(tLRPC$TL_phone_getGroupCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda263
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$getGroupCall$57(j, runnable, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        if (call == null || !(call.call instanceof TLRPC$TL_groupCallDiscarded)) {
            return call;
        }
        return null;
    }

    public /* synthetic */ void lambda$getGroupCall$57(final long j, final Runnable runnable, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getGroupCall$56(tLObject, j, runnable);
            }
        });
    }

    public /* synthetic */ void lambda$getGroupCall$56(TLObject tLObject, long j, Runnable runnable) {
        if (tLObject != null) {
            TLRPC$TL_phone_groupCall tLRPC$TL_phone_groupCall = (TLRPC$TL_phone_groupCall) tLObject;
            putUsers(tLRPC$TL_phone_groupCall.users, false);
            putChats(tLRPC$TL_phone_groupCall.chats, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), j, tLRPC$TL_phone_groupCall);
            this.groupCalls.put(tLRPC$TL_phone_groupCall.call.id, call);
            this.groupCallsByChatId.put(j, call);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(tLRPC$TL_phone_groupCall.call.id), Boolean.FALSE);
            if (runnable != null) {
                runnable.run();
            }
        }
        this.loadingGroupCalls.remove(Long.valueOf(j));
    }

    public void cancelLoadFullUser(long j) {
        this.loadingFullUsers.remove(Long.valueOf(j));
    }

    public void cancelLoadFullChat(long j) {
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC$Dialog> arrayList, long j) {
        if (j == 0 && (arrayList == null || arrayList.isEmpty())) {
            return;
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        if (arrayList != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$InputPeer inputPeer = getInputPeer(arrayList.get(i).id);
                if (!(inputPeer instanceof TLRPC$TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                    TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                    tLRPC$TL_inputDialogPeer.peer = inputPeer;
                    long peerDialogId = DialogObject.getPeerDialogId(inputPeer);
                    Long l = this.peerDialogsRequested.get(peerDialogId);
                    if (l == null || System.currentTimeMillis() - l.longValue() > 240000) {
                        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                        this.peerDialogsRequested.put(peerDialogId, Long.valueOf(System.currentTimeMillis()));
                    }
                }
            }
        } else {
            TLRPC$InputPeer inputPeer2 = getInputPeer(j);
            if ((inputPeer2 instanceof TLRPC$TL_inputPeerChannel) && inputPeer2.access_hash == 0) {
                return;
            }
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer2 = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer2.peer = inputPeer2;
            long peerDialogId2 = DialogObject.getPeerDialogId(inputPeer2);
            Long l2 = this.peerDialogsRequested.get(peerDialogId2);
            if (l2 == null || System.currentTimeMillis() - l2.longValue() > 240000) {
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer2);
                this.peerDialogsRequested.put(peerDialogId2, Long.valueOf(System.currentTimeMillis()));
            }
        }
        if (tLRPC$TL_messages_getPeerDialogs.peers.isEmpty()) {
            return;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda461
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadDialogsReadValue$58(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadDialogsReadValue$58(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList<TLRPC$Update> arrayList = new ArrayList<>();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i);
                DialogObject.initDialog(tLRPC$Dialog);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                        tLRPC$TL_updateReadChannelInbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        tLRPC$TL_updateReadChannelInbox.still_unread_count = tLRPC$Dialog.unread_count;
                        arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    } else {
                        TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = new TLRPC$TL_updateReadHistoryInbox();
                        tLRPC$TL_updateReadHistoryInbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryInbox);
                    }
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_outbox_max_id, num2.intValue())));
                if (tLRPC$Dialog.read_outbox_max_id > num2.intValue()) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                        tLRPC$TL_updateReadChannelOutbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelOutbox);
                    } else {
                        TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = new TLRPC$TL_updateReadHistoryOutbox();
                        tLRPC$TL_updateReadHistoryOutbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryOutbox);
                    }
                }
            }
            if (arrayList.isEmpty()) {
                return;
            }
            processUpdateArray(arrayList, null, null, false, 0);
        }
    }

    public TLRPC$ChannelParticipant getAdminInChannel(long j, long j2) {
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = this.channelAdmins.get(j2);
        if (longSparseArray == null) {
            return null;
        }
        return longSparseArray.get(j);
    }

    public String getAdminRank(long j, long j2) {
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        if (j == j2) {
            return "";
        }
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = this.channelAdmins.get(j);
        if (longSparseArray == null || (tLRPC$ChannelParticipant = longSparseArray.get(j2)) == null) {
            return null;
        }
        String str = tLRPC$ChannelParticipant.rank;
        return str != null ? str : "";
    }

    public boolean isChannelAdminsLoaded(long j) {
        return this.channelAdmins.get(j) != null;
    }

    public void loadChannelAdmins(final long j, boolean z) {
        if ((SystemClock.elapsedRealtime() / 1000) - this.loadingChannelAdmins.get(j) < 60) {
            return;
        }
        this.loadingChannelAdmins.put(j, (int) (SystemClock.elapsedRealtime() / 1000));
        if (z) {
            getMessagesStorage().loadChannelAdmins(j);
            return;
        }
        TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
        tLRPC$TL_channels_getParticipants.channel = getInputChannel(j);
        tLRPC$TL_channels_getParticipants.limit = 100;
        tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsAdmins();
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda433
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadChannelAdmins$59(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelAdmins$59(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_channels_channelParticipants) {
            processLoadedAdminsResponse(j, (TLRPC$TL_channels_channelParticipants) tLObject);
        }
    }

    public void processLoadedAdminsResponse(long j, TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants) {
        LongSparseArray<TLRPC$ChannelParticipant> longSparseArray = new LongSparseArray<>(tLRPC$TL_channels_channelParticipants.participants.size());
        for (int i = 0; i < tLRPC$TL_channels_channelParticipants.participants.size(); i++) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipants.participants.get(i);
            longSparseArray.put(MessageObject.getPeerId(tLRPC$ChannelParticipant.peer), tLRPC$ChannelParticipant);
        }
        processLoadedChannelAdmins(longSparseArray, j, false);
    }

    public void processLoadedChannelAdmins(final LongSparseArray<TLRPC$ChannelParticipant> longSparseArray, final long j, final boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(j, longSparseArray);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda62
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$60(j, longSparseArray, z);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedChannelAdmins$60(long j, LongSparseArray longSparseArray, boolean z) {
        this.channelAdmins.put(j, longSparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(j);
            loadChannelAdmins(j, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadChatAdmins, Long.valueOf(j));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:43:0x0066, code lost:
        if (r11.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r5)) == null) goto L22;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void loadFullChat(final long j, final int i, boolean z) {
        TLRPC$TL_messages_getFullChat tLRPC$TL_messages_getFullChat;
        boolean z2 = this.loadedFullChats.get(j, 0L) > 0;
        if (this.loadingFullChats.contains(Long.valueOf(j))) {
            return;
        }
        if (z || !z2) {
            this.loadingFullChats.add(Long.valueOf(j));
            final long j2 = -j;
            final TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_channels_getFullChannel tLRPC$TL_channels_getFullChannel = new TLRPC$TL_channels_getFullChannel();
                tLRPC$TL_channels_getFullChannel.channel = getInputChannel(chat);
                loadChannelAdmins(j, true ^ z2);
                tLRPC$TL_messages_getFullChat = tLRPC$TL_channels_getFullChannel;
            } else {
                TLRPC$TL_messages_getFullChat tLRPC$TL_messages_getFullChat2 = new TLRPC$TL_messages_getFullChat();
                tLRPC$TL_messages_getFullChat2.chat_id = j;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(j2)) != null) {
                    tLRPC$TL_messages_getFullChat = tLRPC$TL_messages_getFullChat2;
                }
                reloadDialogsReadValue(null, j2);
                tLRPC$TL_messages_getFullChat = tLRPC$TL_messages_getFullChat2;
            }
            int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_getFullChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda303
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadFullChat$63(j2, j, chat, i, tLObject, tLRPC$TL_error);
                }
            });
            if (i != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i);
            }
        }
    }

    public /* synthetic */ void lambda$loadFullChat$63(final long j, final long j2, TLRPC$Chat tLRPC$Chat, final int i, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            final TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull = (TLRPC$TL_messages_chatFull) tLObject;
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_chatFull.users, tLRPC$TL_messages_chatFull.chats, true, true);
            getMessagesStorage().updateChatInfo(tLRPC$TL_messages_chatFull.full_chat, false);
            getStoriesController().updateStoriesFromFullPeer(j, tLRPC$TL_messages_chatFull.full_chat.stories);
            ChatThemeController.getInstance(this.currentAccount).saveChatWallpaper(-j2, tLRPC$TL_messages_chatFull.full_chat.wallpaper);
            if (ChatObject.isChannel(tLRPC$Chat)) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id > num.intValue()) {
                    ArrayList<TLRPC$Update> arrayList = new ArrayList<>();
                    TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                    tLRPC$TL_updateReadChannelInbox.channel_id = j2;
                    TLRPC$ChatFull tLRPC$ChatFull = tLRPC$TL_messages_chatFull.full_chat;
                    tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$ChatFull.read_inbox_max_id;
                    tLRPC$TL_updateReadChannelInbox.still_unread_count = tLRPC$ChatFull.unread_count;
                    arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    processUpdateArray(arrayList, null, null, false, 0);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id > num2.intValue()) {
                    ArrayList<TLRPC$Update> arrayList2 = new ArrayList<>();
                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                    tLRPC$TL_updateReadChannelOutbox.channel_id = j2;
                    tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id;
                    arrayList2.add(tLRPC$TL_updateReadChannelOutbox);
                    processUpdateArray(arrayList2, null, null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda51
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullChat$61(j2, tLRPC$TL_messages_chatFull, i, j);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda52
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFullChat$62(tLRPC$TL_error, j2);
            }
        });
    }

    public /* synthetic */ void lambda$loadFullChat$61(long j, TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull, int i, long j2) {
        TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(j);
        if (tLRPC$ChatFull != null) {
            tLRPC$TL_messages_chatFull.full_chat.inviterId = tLRPC$ChatFull.inviterId;
        }
        this.fullChats.put(j, tLRPC$TL_messages_chatFull.full_chat);
        long j3 = -j;
        getTranslateController().updateDialogFull(j3);
        applyDialogNotificationsSettings(j3, 0L, tLRPC$TL_messages_chatFull.full_chat.notify_settings);
        for (int i2 = 0; i2 < tLRPC$TL_messages_chatFull.full_chat.bot_info.size(); i2++) {
            getMediaDataController().putBotInfo(j3, tLRPC$TL_messages_chatFull.full_chat.bot_info.get(i2));
        }
        int indexOfKey = this.blockePeers.indexOfKey(j3);
        if (tLRPC$TL_messages_chatFull.full_chat.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(j3, 1);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(j, tLRPC$TL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Long.valueOf(j));
        this.loadedFullChats.put(j, System.currentTimeMillis());
        putUsers(tLRPC$TL_messages_chatFull.users, false);
        putChats(tLRPC$TL_messages_chatFull.chats, false);
        if (tLRPC$TL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.stickerset);
        }
        if (tLRPC$TL_messages_chatFull.full_chat.emojiset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.emojiset);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoDidLoad, tLRPC$TL_messages_chatFull.full_chat, Integer.valueOf(i), Boolean.FALSE, Boolean.TRUE);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j3);
        if (tLRPC$Dialog != null) {
            TLRPC$ChatFull tLRPC$ChatFull2 = tLRPC$TL_messages_chatFull.full_chat;
            if ((tLRPC$ChatFull2.flags & 2048) != 0) {
                int i3 = tLRPC$Dialog.folder_id;
                int i4 = tLRPC$ChatFull2.folder_id;
                if (i3 != i4) {
                    tLRPC$Dialog.folder_id = i4;
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
            int i5 = tLRPC$Dialog.ttl_period;
            int i6 = tLRPC$TL_messages_chatFull.full_chat.ttl_period;
            if (i5 != i6) {
                tLRPC$Dialog.ttl_period = i6;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
            boolean z = tLRPC$Dialog.view_forum_as_messages;
            boolean z2 = tLRPC$TL_messages_chatFull.full_chat.view_forum_as_messages;
            if (z != z2) {
                tLRPC$Dialog.view_forum_as_messages = z2;
                getMessagesStorage().setDialogViewThreadAsMessages(j2, tLRPC$TL_messages_chatFull.full_chat.view_forum_as_messages);
            }
        }
    }

    public /* synthetic */ void lambda$loadFullChat$62(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void loadFullUser(TLRPC$User tLRPC$User, int i, boolean z) {
        loadFullUser(tLRPC$User, i, z, null);
    }

    public void loadFullUser(final TLRPC$User tLRPC$User, final int i, boolean z, final Utilities.Callback<TLRPC$UserFull> callback) {
        if (tLRPC$User != null) {
            if (callback == null) {
                if (this.loadingFullUsers.contains(Long.valueOf(tLRPC$User.id))) {
                    return;
                }
                if (!z && this.loadedFullUsers.get(tLRPC$User.id) > 0) {
                    return;
                }
            }
            this.loadingFullUsers.add(Long.valueOf(tLRPC$User.id));
            TLRPC$TL_users_getFullUser tLRPC$TL_users_getFullUser = new TLRPC$TL_users_getFullUser();
            tLRPC$TL_users_getFullUser.id = getInputUser(tLRPC$User);
            final long j = tLRPC$User.id;
            if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
                reloadDialogsReadValue(null, j);
            }
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_users_getFullUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda238
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadFullUser$66(j, callback, tLRPC$User, i, tLObject, tLRPC$TL_error);
                }
            }), i);
        }
    }

    public /* synthetic */ void lambda$loadFullUser$66(long j, Utilities.Callback callback, final TLRPC$User tLRPC$User, final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_users_userFull tLRPC$TL_users_userFull = (TLRPC$TL_users_userFull) tLObject;
            final TLRPC$UserFull tLRPC$UserFull = tLRPC$TL_users_userFull.full_user;
            putUsers(tLRPC$TL_users_userFull.users, false);
            putChats(tLRPC$TL_users_userFull.chats, false);
            TLRPC$UserFull tLRPC$UserFull2 = tLRPC$TL_users_userFull.full_user;
            tLRPC$UserFull2.user = getUser(Long.valueOf(tLRPC$UserFull2.id));
            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
            getStoriesController().updateStoriesFromFullPeer(j, tLRPC$UserFull.stories);
            ChatThemeController chatThemeController = ChatThemeController.getInstance(this.currentAccount);
            TLRPC$UserFull tLRPC$UserFull3 = tLRPC$TL_users_userFull.full_user;
            chatThemeController.saveChatWallpaper(tLRPC$UserFull3.id, tLRPC$UserFull3.wallpaper);
            if (callback != null) {
                callback.run(tLRPC$UserFull);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda337
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadFullUser$64(tLRPC$UserFull, tLRPC$User, i);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda338
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadFullUser$65(tLRPC$User);
            }
        });
    }

    public /* synthetic */ void lambda$loadFullUser$64(TLRPC$UserFull tLRPC$UserFull, TLRPC$User tLRPC$User, int i) {
        savePeerSettings(tLRPC$UserFull.user.id, tLRPC$UserFull.settings, false);
        applyDialogNotificationsSettings(tLRPC$User.id, 0L, tLRPC$UserFull.notify_settings);
        TL_bots$BotInfo tL_bots$BotInfo = tLRPC$UserFull.bot_info;
        if (tL_bots$BotInfo instanceof TL_bots$TL_botInfo) {
            tL_bots$BotInfo.user_id = tLRPC$User.id;
            getMediaDataController().putBotInfo(tLRPC$User.id, tLRPC$UserFull.bot_info);
        }
        int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
        if (tLRPC$UserFull.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(tLRPC$User.id, 1);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
        getTranslateController().updateDialogFull(tLRPC$User.id);
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
        this.loadedFullUsers.put(tLRPC$User.id, System.currentTimeMillis());
        String str = tLRPC$User.first_name + tLRPC$User.last_name + UserObject.getPublicUsername(tLRPC$User);
        ArrayList<TLRPC$User> arrayList = new ArrayList<>();
        arrayList.add(tLRPC$UserFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
        if (!str.equals(tLRPC$UserFull.user.first_name + tLRPC$UserFull.user.last_name + UserObject.getPublicUsername(tLRPC$UserFull.user))) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_NAME));
        }
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$UserFull.user.photo;
        if (tLRPC$UserProfilePhoto != null && tLRPC$UserProfilePhoto.has_video) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        }
        TL_bots$BotInfo tL_bots$BotInfo2 = tLRPC$UserFull.bot_info;
        if (tL_bots$BotInfo2 instanceof TL_bots$TL_botInfo) {
            tL_bots$BotInfo2.user_id = tLRPC$UserFull.id;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.botInfoDidLoad, tLRPC$UserFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(tLRPC$User.id);
        if (tLRPC$Dialog != null) {
            if ((tLRPC$UserFull.flags & 2048) != 0) {
                int i2 = tLRPC$Dialog.folder_id;
                int i3 = tLRPC$UserFull.folder_id;
                if (i2 != i3) {
                    tLRPC$Dialog.folder_id = i3;
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
            if ((tLRPC$UserFull.flags & LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM) != 0) {
                int i4 = tLRPC$Dialog.ttl_period;
                int i5 = tLRPC$UserFull.ttl_period;
                if (i4 != i5) {
                    tLRPC$Dialog.ttl_period = i5;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
        }
    }

    public /* synthetic */ void lambda$loadFullUser$65(TLRPC$User tLRPC$User) {
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void reloadMessages(ArrayList<Integer> arrayList, final long j, final int i) {
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages;
        if (arrayList.isEmpty()) {
            return;
        }
        final boolean z = i == 1;
        final ArrayList<Integer> arrayList2 = new ArrayList<>();
        TLRPC$Chat chat = DialogObject.isChatDialog(j) ? getChat(Long.valueOf(-j)) : null;
        if (ChatObject.isChannel(chat)) {
            TLRPC$TL_channels_getMessages tLRPC$TL_channels_getMessages = new TLRPC$TL_channels_getMessages();
            tLRPC$TL_channels_getMessages.channel = getInputChannel(chat);
            tLRPC$TL_channels_getMessages.id = arrayList2;
            tLRPC$TL_messages_getMessages = tLRPC$TL_channels_getMessages;
        } else {
            TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages2 = new TLRPC$TL_messages_getMessages();
            tLRPC$TL_messages_getMessages2.id = arrayList2;
            tLRPC$TL_messages_getMessages = tLRPC$TL_messages_getMessages2;
        }
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages3 = tLRPC$TL_messages_getMessages;
        ArrayList<Integer> arrayList3 = this.reloadingMessages.get(j);
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            Integer num = arrayList.get(i2);
            if (arrayList3 == null || !arrayList3.contains(num)) {
                arrayList2.add(num);
            }
        }
        if (arrayList2.isEmpty()) {
            return;
        }
        if (arrayList3 == null) {
            arrayList3 = new ArrayList<>();
            this.reloadingMessages.put(j, arrayList3);
        }
        arrayList3.addAll(arrayList2);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessages3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda16
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadMessages$68(j, z, i, arrayList2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMessages$68(final long j, boolean z, int i, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$messages_Messages.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i2);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i3 = 0; i3 < tLRPC$messages_Messages.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages.chats.get(i3);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            ArrayList arrayList2 = new ArrayList();
            int i4 = 0;
            while (i4 < tLRPC$messages_Messages.messages.size()) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i4);
                tLRPC$Message.dialog_id = j;
                if (!z) {
                    tLRPC$Message.unread = (tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id;
                }
                Integer num3 = num;
                ArrayList arrayList3 = arrayList2;
                arrayList3.add(new MessageObject(this.currentAccount, tLRPC$Message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true));
                i4++;
                arrayList2 = arrayList3;
                num = num3;
            }
            final ArrayList arrayList4 = arrayList2;
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
            getMessagesStorage().putMessages(tLRPC$messages_Messages, j, -1, 0, false, i, 0L);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda202
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$reloadMessages$67(j, arrayList, arrayList4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadMessages$67(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList<Integer> arrayList3 = this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        ArrayList<MessageObject> arrayList4 = this.dialogMessage.get(j);
        if (arrayList4 != null) {
            for (int i = 0; i < arrayList4.size(); i++) {
                MessageObject messageObject = arrayList4.get(i);
                int i2 = 0;
                while (true) {
                    if (i2 < arrayList2.size()) {
                        MessageObject messageObject2 = (MessageObject) arrayList2.get(i2);
                        if (messageObject.getId() == messageObject2.getId()) {
                            arrayList4.set(i, messageObject2);
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                                if (messageObject3 != null) {
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                }
                            }
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                        } else {
                            i2++;
                        }
                    }
                }
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    public void hidePeerSettingsBar(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.remove("dialog_bar_invite" + j);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        TLRPC$TL_messages_hidePeerSettingsBar tLRPC$TL_messages_hidePeerSettingsBar = new TLRPC$TL_messages_hidePeerSettingsBar();
        if (tLRPC$User != null) {
            tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(tLRPC$User.id);
        } else {
            tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(-tLRPC$Chat.id);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_hidePeerSettingsBar, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda350
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$hidePeerSettingsBar$69(tLObject, tLRPC$TL_error);
            }
        });
    }

    public void reportSpam(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$User == null && tLRPC$Chat == null && tLRPC$EncryptedChat == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        edit.putInt("dialog_bar_vis3" + j, 3);
        edit.commit();
        if (DialogObject.isEncryptedDialog(j)) {
            if (tLRPC$EncryptedChat == null || tLRPC$EncryptedChat.access_hash == 0) {
                return;
            }
            TLRPC$TL_messages_reportEncryptedSpam tLRPC$TL_messages_reportEncryptedSpam = new TLRPC$TL_messages_reportEncryptedSpam();
            TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
            tLRPC$TL_messages_reportEncryptedSpam.peer = tLRPC$TL_inputEncryptedChat;
            tLRPC$TL_inputEncryptedChat.chat_id = tLRPC$EncryptedChat.id;
            tLRPC$TL_inputEncryptedChat.access_hash = tLRPC$EncryptedChat.access_hash;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_reportEncryptedSpam, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda82
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$reportSpam$70(tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else if (z) {
            TLRPC$TL_account_reportPeer tLRPC$TL_account_reportPeer = new TLRPC$TL_account_reportPeer();
            if (tLRPC$Chat != null) {
                tLRPC$TL_account_reportPeer.peer = getInputPeer(-tLRPC$Chat.id);
            } else if (tLRPC$User != null) {
                tLRPC$TL_account_reportPeer.peer = getInputPeer(tLRPC$User.id);
            }
            tLRPC$TL_account_reportPeer.message = "";
            tLRPC$TL_account_reportPeer.reason = new TLRPC$ReportReason() { // from class: org.telegram.tgnet.TLRPC$TL_inputReportReasonGeoIrrelevant
                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(-606798099);
                }
            };
            getConnectionsManager().sendRequest(tLRPC$TL_account_reportPeer, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda83
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$reportSpam$71(tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else {
            TLRPC$TL_messages_reportSpam tLRPC$TL_messages_reportSpam = new TLRPC$TL_messages_reportSpam();
            if (tLRPC$Chat != null) {
                tLRPC$TL_messages_reportSpam.peer = getInputPeer(-tLRPC$Chat.id);
            } else if (tLRPC$User != null) {
                tLRPC$TL_messages_reportSpam.peer = getInputPeer(tLRPC$User.id);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_reportSpam, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda84
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$reportSpam$72(tLObject, tLRPC$TL_error);
                }
            }, 2);
        }
    }

    private void savePeerSettings(long j, TLRPC$PeerSettings tLRPC$PeerSettings, boolean z) {
        if (tLRPC$PeerSettings == null) {
            return;
        }
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        if (tLRPC$PeerSettings.business_bot_id != 0) {
            edit.putLong("dialog_botid" + j, tLRPC$PeerSettings.business_bot_id);
            edit.putString("dialog_boturl" + j, tLRPC$PeerSettings.business_bot_manage_url);
            edit.putInt("dialog_botflags" + j, (tLRPC$PeerSettings.business_bot_paused ? 1 : 0) + (tLRPC$PeerSettings.business_bot_can_reply ? 2 : 0));
        } else {
            SharedPreferences.Editor remove = edit.remove("dialog_botid" + j);
            SharedPreferences.Editor remove2 = remove.remove("dialog_boturl" + j);
            remove2.remove("dialog_botflags" + j);
        }
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        if (sharedPreferences.getInt("dialog_bar_vis3" + j, 0) == 3) {
            edit.apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
            return;
        }
        boolean z2 = tLRPC$PeerSettings.flags == 0;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("peer settings loaded for " + j + " add = " + tLRPC$PeerSettings.add_contact + " block = " + tLRPC$PeerSettings.block_contact + " spam = " + tLRPC$PeerSettings.report_spam + " share = " + tLRPC$PeerSettings.share_contact + " geo = " + tLRPC$PeerSettings.report_geo + " hide = " + z2 + " distance = " + tLRPC$PeerSettings.geo_distance + " invite = " + tLRPC$PeerSettings.invite_members);
        }
        edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
        edit.putBoolean("dialog_bar_share" + j, tLRPC$PeerSettings.share_contact);
        edit.putBoolean("dialog_bar_report" + j, tLRPC$PeerSettings.report_spam);
        edit.putBoolean("dialog_bar_add" + j, tLRPC$PeerSettings.add_contact);
        edit.putBoolean("dialog_bar_block" + j, tLRPC$PeerSettings.block_contact);
        edit.putBoolean("dialog_bar_exception" + j, tLRPC$PeerSettings.need_contacts_exception);
        edit.putBoolean("dialog_bar_location" + j, tLRPC$PeerSettings.report_geo);
        edit.putBoolean("dialog_bar_archived" + j, tLRPC$PeerSettings.autoarchived);
        edit.putBoolean("dialog_bar_invite" + j, tLRPC$PeerSettings.invite_members);
        edit.putString("dialog_bar_chat_with_admin_title" + j, tLRPC$PeerSettings.request_chat_title);
        edit.putBoolean("dialog_bar_chat_with_channel" + j, tLRPC$PeerSettings.request_chat_broadcast);
        edit.putInt("dialog_bar_chat_with_date" + j, tLRPC$PeerSettings.request_chat_date);
        SharedPreferences sharedPreferences2 = this.notificationsPreferences;
        if (sharedPreferences2.getInt("dialog_bar_distance" + j, -1) != -2) {
            if ((tLRPC$PeerSettings.flags & 64) != 0) {
                edit.putInt("dialog_bar_distance" + j, tLRPC$PeerSettings.geo_distance);
            } else {
                edit.remove("dialog_bar_distance" + j);
            }
        }
        if (j == getUserConfig().getClientUserId()) {
            tLRPC$PeerSettings.business_bot_id = UserObject.REPLY_BOT;
            tLRPC$PeerSettings.business_bot_manage_url = "https://telegram.org/";
        }
        edit.apply();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
    }

    public void loadPeerSettings(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        final long j;
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            j = tLRPC$User.id;
        } else {
            j = -tLRPC$Chat.id;
        }
        if (this.loadingPeerSettings.indexOfKey(j) >= 0) {
            return;
        }
        this.loadingPeerSettings.put(j, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("request spam button for " + j);
        }
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt("dialog_bar_vis3" + j, 0);
        if (i == 1 || i == 3) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("dialog bar already hidden for " + j);
                return;
            }
            return;
        }
        TLRPC$TL_messages_getPeerSettings tLRPC$TL_messages_getPeerSettings = new TLRPC$TL_messages_getPeerSettings();
        if (tLRPC$User != null) {
            tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(tLRPC$User.id);
        } else {
            tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(-tLRPC$Chat.id);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerSettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda459
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadPeerSettings$74(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadPeerSettings$74(final long j, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda162
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPeerSettings$73(j, tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadPeerSettings$73(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            TLRPC$TL_messages_peerSettings tLRPC$TL_messages_peerSettings = (TLRPC$TL_messages_peerSettings) tLObject;
            TLRPC$PeerSettings tLRPC$PeerSettings = tLRPC$TL_messages_peerSettings.settings;
            putUsers(tLRPC$TL_messages_peerSettings.users, false);
            putChats(tLRPC$TL_messages_peerSettings.chats, false);
            savePeerSettings(j, tLRPC$PeerSettings, false);
        }
    }

    public void processNewChannelDifferenceParams(int i, int i2, long j) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + j);
        }
        int i3 = this.channelsPts.get(j);
        if (i3 == 0) {
            i3 = getMessagesStorage().getChannelPtsSync(j);
            if (i3 == 0) {
                i3 = 1;
            }
            this.channelsPts.put(j, i3);
        }
        if (i3 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(j, i);
            getMessagesStorage().saveChannelPts(j, i);
        } else if (i3 != i) {
            long j2 = this.updatesStartWaitTimeChannels.get(j);
            if (this.gettingDifferenceChannels.get(j, Boolean.FALSE).booleanValue() || j2 == 0 || Math.abs(System.currentTimeMillis() - j2) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (j2 == 0) {
                    this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                }
                UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts(null);
                userActionUpdatesPts.pts = i;
                userActionUpdatesPts.pts_count = i2;
                userActionUpdatesPts.chat_id = j;
                ArrayList<TLRPC$Updates> arrayList = this.updatesQueueChannels.get(j);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    this.updatesQueueChannels.put(j, arrayList);
                }
                arrayList.add(userActionUpdatesPts);
                return;
            }
            getChannelDifference(j);
        }
    }

    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts(null);
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i != -1) {
            if (getMessagesStorage().getLastSeqValue() + 1 == i) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY SEQ");
                }
                getMessagesStorage().setLastSeqValue(i);
                if (i3 != -1) {
                    getMessagesStorage().setLastDateValue(i3);
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastSeqValue() != i) {
                if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                    }
                    if (this.updatesStartWaitTimeSeq == 0) {
                        this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                    }
                    UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq(null);
                    userActionUpdatesSeq.seq = i;
                    this.updatesQueueSeq.add(userActionUpdatesSeq);
                    return;
                }
                getDifference();
            }
        }
    }

    public void didAddedNewTask(final int i, final long j, final SparseArray<ArrayList<Integer>> sparseArray) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda219
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$75(i);
            }
        });
        if (sparseArray != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda220
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$didAddedNewTask$76(j, sparseArray);
                }
            });
        }
    }

    public /* synthetic */ void lambda$didAddedNewTask$75(int i) {
        int i2;
        if (!(this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null && !this.gettingNewDeleteTask) && ((i2 = this.currentDeletingTaskTime) == 0 || i >= i2)) {
            return;
        }
        getNewDeleteTask(null, null);
    }

    public /* synthetic */ void lambda$didAddedNewTask$76(long j, SparseArray sparseArray) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didCreatedNewDeleteTask, Long.valueOf(j), sparseArray);
    }

    public void getNewDeleteTask(final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda460
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$77(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$getNewDeleteTask$77(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(longSparseArray, longSparseArray2);
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if (!(this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null) && (z || ((i = this.currentDeletingTaskTime) != 0 && i <= currentTime))) {
            this.currentDeletingTaskTime = 0;
            if (this.currentDeleteTaskRunnable != null && !z) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            }
            this.currentDeleteTaskRunnable = null;
            LongSparseArray<ArrayList<Integer>> longSparseArray = this.currentDeletingTaskMids;
            final LongSparseArray<ArrayList<Integer>> clone = longSparseArray != null ? longSparseArray.clone() : null;
            LongSparseArray<ArrayList<Integer>> longSparseArray2 = this.currentDeletingTaskMediaMids;
            final LongSparseArray<ArrayList<Integer>> clone2 = longSparseArray2 != null ? longSparseArray2.clone() : null;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda381
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkDeletingTask$80(clone, clone2);
                }
            });
            return true;
        }
        return false;
    }

    public /* synthetic */ void lambda$checkDeletingTask$80(final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        long j;
        ArrayList<Integer> arrayList;
        boolean z = true;
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                ArrayList<Integer> arrayList2 = (ArrayList) longSparseArray.valueAt(i);
                deleteMessages(arrayList2, null, null, longSparseArray.keyAt(i), 0, true, 0, !arrayList2.isEmpty() && arrayList2.get(0).intValue() > 0);
            }
        }
        if (longSparseArray2 != null) {
            boolean z2 = SecretMediaViewer.hasInstance() && SecretMediaViewer.getInstance().isVisible();
            MessageObject currentMessageObject = z2 ? SecretMediaViewer.getInstance().getCurrentMessageObject() : null;
            int size2 = longSparseArray2.size();
            int i2 = 0;
            while (i2 < size2) {
                final long keyAt = longSparseArray2.keyAt(i2);
                ArrayList<Integer> arrayList3 = (ArrayList) longSparseArray2.valueAt(i2);
                if (z2 && currentMessageObject != null && currentMessageObject.currentAccount == this.currentAccount && currentMessageObject.getDialogId() == keyAt && arrayList3.contains(Integer.valueOf(currentMessageObject.getId()))) {
                    final int id = currentMessageObject.getId();
                    arrayList3.remove(Integer.valueOf(id));
                    currentMessageObject.forceExpired = z;
                    final long createDeleteShowOnceTask = createDeleteShowOnceTask(keyAt, id);
                    j = keyAt;
                    arrayList = arrayList3;
                    SecretMediaViewer.getInstance().setOnClose(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda151
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$checkDeletingTask$78(createDeleteShowOnceTask, keyAt, id);
                        }
                    });
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMessageMedia, currentMessageObject.messageOwner);
                } else {
                    j = keyAt;
                    arrayList = arrayList3;
                }
                if (!arrayList.isEmpty()) {
                    getMessagesStorage().emptyMessagesMedia(j, arrayList);
                }
                i2++;
                z = true;
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda152
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$79(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$checkDeletingTask$79(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        getNewDeleteTask(longSparseArray, longSparseArray2);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public void processLoadedDeleteTask(final int i, final LongSparseArray<ArrayList<Integer>> longSparseArray, final LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda265
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$82(longSparseArray, longSparseArray2, i);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$82(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, int i) {
        this.gettingNewDeleteTask = false;
        if (longSparseArray != null || longSparseArray2 != null) {
            this.currentDeletingTaskTime = i;
            this.currentDeletingTaskMids = longSparseArray;
            this.currentDeletingTaskMediaMids = longSparseArray2;
            if (this.currentDeleteTaskRunnable != null) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
                this.currentDeleteTaskRunnable = null;
            }
            if (checkDeletingTask(false)) {
                return;
            }
            this.currentDeleteTaskRunnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda237
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDeleteTask$81();
                }
            };
            Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime) * 1000);
            return;
        }
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$81() {
        checkDeletingTask(true);
    }

    public DialogPhotos getDialogPhotos(long j) {
        DialogPhotos dialogPhotos = this.dialogPhotos.get(j);
        if (dialogPhotos == null) {
            LongSparseArray<DialogPhotos> longSparseArray = this.dialogPhotos;
            DialogPhotos dialogPhotos2 = new DialogPhotos(j);
            longSparseArray.put(j, dialogPhotos2);
            return dialogPhotos2;
        }
        return dialogPhotos;
    }

    /* loaded from: classes3.dex */
    public class DialogPhotos {
        public static final int STEP = 80;
        public final long dialogId;
        private boolean loading;
        public final ArrayList<TLRPC$Photo> photos = new ArrayList<>();
        public boolean fromCache = true;
        public boolean loaded = false;

        public void addPhotoAtStart(TLRPC$Photo tLRPC$Photo) {
        }

        public DialogPhotos(long j) {
            MessagesController.this = r1;
            this.dialogId = j;
        }

        public void loadAfter(int i, boolean z) {
            boolean z2;
            int i2 = 0;
            if (this.photos.isEmpty()) {
                load(0, 80);
                return;
            }
            if (i < 0) {
                i += this.photos.size();
            }
            if (i >= this.photos.size()) {
                i -= this.photos.size();
            }
            if (i < 0 || i >= this.photos.size()) {
                return;
            }
            int i3 = 0;
            while (true) {
                if (i3 >= this.photos.size()) {
                    z2 = false;
                    break;
                } else if (this.photos.get(i3) == null) {
                    z2 = true;
                    break;
                } else {
                    i3++;
                }
            }
            if (z2) {
                if (z) {
                    while (this.photos.get(i) != null) {
                        i++;
                        if (i >= this.photos.size()) {
                            i = 0;
                        }
                    }
                    while (i2 <= 80) {
                        int i4 = i + i2;
                        if (i4 >= this.photos.size() || this.photos.get(i4) != null) {
                            break;
                        }
                        i2++;
                    }
                    if (i2 > 0) {
                        load(i, i2);
                        return;
                    }
                    return;
                }
                while (this.photos.get(i) != null) {
                    i--;
                    if (i < 0) {
                        i = this.photos.size() - 1;
                    }
                }
                while (i2 <= 80) {
                    int i5 = i - i2;
                    if (i5 < 0 || this.photos.get(i5) != null) {
                        break;
                    }
                    i2++;
                }
                if (i2 > 0) {
                    load(i - i2, i2);
                }
            }
        }

        public void load(final int i, final int i2) {
            if (this.loading || i2 <= 0 || i < 0) {
                return;
            }
            this.loading = true;
            long j = this.dialogId;
            if (j >= 0) {
                TLRPC$User user = MessagesController.this.getUser(Long.valueOf(j));
                if (user == null) {
                    this.loading = false;
                    return;
                }
                TLRPC$TL_photos_getUserPhotos tLRPC$TL_photos_getUserPhotos = new TLRPC$TL_photos_getUserPhotos();
                tLRPC$TL_photos_getUserPhotos.offset = i;
                tLRPC$TL_photos_getUserPhotos.limit = i2;
                tLRPC$TL_photos_getUserPhotos.max_id = 0L;
                tLRPC$TL_photos_getUserPhotos.user_id = MessagesController.this.getInputUser(user);
                MessagesController.this.getConnectionsManager().sendRequest(tLRPC$TL_photos_getUserPhotos, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda3
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.DialogPhotos.this.lambda$load$1(i, i2, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_messages_search tLRPC$TL_messages_search = new TLRPC$TL_messages_search();
            tLRPC$TL_messages_search.filter = new TLRPC$TL_inputMessagesFilterChatPhotos();
            tLRPC$TL_messages_search.add_offset = i;
            tLRPC$TL_messages_search.limit = i2;
            tLRPC$TL_messages_search.offset_id = 0;
            tLRPC$TL_messages_search.q = "";
            tLRPC$TL_messages_search.peer = MessagesController.this.getInputPeer(this.dialogId);
            MessagesController.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_search, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda4
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.DialogPhotos.this.lambda$load$3(i, i2, tLObject, tLRPC$TL_error);
                }
            });
        }

        public /* synthetic */ void lambda$load$1(final int i, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            if (tLRPC$TL_error == null) {
                final TLRPC$photos_Photos tLRPC$photos_Photos = (TLRPC$photos_Photos) tLObject;
                MessagesController.this.getMessagesStorage().putUsersAndChats(tLRPC$photos_Photos.users, null, true, true);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.DialogPhotos.this.lambda$load$0(tLRPC$photos_Photos, i, i2);
                    }
                });
            }
        }

        public /* synthetic */ void lambda$load$0(TLRPC$photos_Photos tLRPC$photos_Photos, int i, int i2) {
            MessagesController.this.putUsers(tLRPC$photos_Photos.users, false);
            onLoaded(i, i2, tLRPC$photos_Photos);
        }

        public /* synthetic */ void lambda$load$3(final int i, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            if (tLRPC$TL_error == null) {
                final TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
                MessagesController.this.getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.DialogPhotos.this.lambda$load$2(tLRPC$messages_Messages, i, i2);
                    }
                });
            }
        }

        public /* synthetic */ void lambda$load$2(TLRPC$messages_Messages tLRPC$messages_Messages, int i, int i2) {
            TLRPC$Photo tLRPC$Photo;
            MessagesController.this.putUsers(tLRPC$messages_Messages.users, false);
            MessagesController.this.putChats(tLRPC$messages_Messages.chats, false);
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            tLRPC$TL_photos_photos.count = tLRPC$messages_Messages.count;
            for (int i3 = 0; i3 < tLRPC$messages_Messages.messages.size(); i3++) {
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$messages_Messages.messages.get(i3).action;
                if (tLRPC$MessageAction != null && (tLRPC$Photo = tLRPC$MessageAction.photo) != null) {
                    tLRPC$TL_photos_photos.photos.add(tLRPC$Photo);
                }
            }
            onLoaded(i, i2, tLRPC$TL_photos_photos);
        }

        private void onLoaded(int i, int i2, TLRPC$photos_Photos tLRPC$photos_Photos) {
            boolean z = this.loaded;
            this.loading = false;
            this.loaded = true;
            this.fromCache = false;
            int max = Math.max(tLRPC$photos_Photos.count, tLRPC$photos_Photos.photos.size());
            tLRPC$photos_Photos.count = max;
            boolean z2 = max != this.photos.size() || i + i2 > this.photos.size();
            if (!z2) {
                int i3 = 0;
                while (true) {
                    if (i3 >= tLRPC$photos_Photos.photos.size()) {
                        break;
                    }
                    int i4 = i + i3;
                    if (this.photos.get(i4) != null && this.photos.get(i4).id != tLRPC$photos_Photos.photos.get(i3).id) {
                        z2 = true;
                        break;
                    }
                    i3++;
                }
            }
            if (z2) {
                this.photos.clear();
                for (int i5 = 0; i5 < tLRPC$photos_Photos.count; i5++) {
                    int i6 = i5 - i;
                    this.photos.add((i6 < 0 || i6 >= tLRPC$photos_Photos.photos.size()) ? null : tLRPC$photos_Photos.photos.get(i6));
                }
            } else {
                for (int i7 = 0; i7 < tLRPC$photos_Photos.photos.size(); i7++) {
                    this.photos.set(i + i7, tLRPC$photos_Photos.photos.get(i7));
                }
            }
            saveCache();
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            if (z || i != 0 || i2 >= this.photos.size() || this.photos.size() - i2 <= 80) {
                return;
            }
            load(this.photos.size() - 80, 80);
        }

        public void removePhoto(long j) {
            if (removePhotoInternal(j)) {
                saveCache();
                MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            }
        }

        public void moveToStart(int i) {
            if (i < 0 || i >= this.photos.size()) {
                return;
            }
            ArrayList<TLRPC$Photo> arrayList = this.photos;
            arrayList.add(0, arrayList.remove(i));
            saveCache();
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
        }

        private boolean removePhotoInternal(long j) {
            int i = 0;
            boolean z = false;
            while (i < this.photos.size()) {
                TLRPC$Photo tLRPC$Photo = this.photos.get(i);
                if (tLRPC$Photo != null && tLRPC$Photo.id == j) {
                    this.photos.remove(i);
                    i--;
                    z = true;
                }
                i++;
            }
            return z;
        }

        public int getCount() {
            return this.photos.size();
        }

        public void loadCache() {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.DialogPhotos.this.lambda$loadCache$5();
                }
            });
        }

        /* JADX WARN: Removed duplicated region for block: B:112:0x0071 A[SYNTHETIC] */
        /* JADX WARN: Removed duplicated region for block: B:114:0x004f A[SYNTHETIC] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public /* synthetic */ void lambda$loadCache$5() {
            int i;
            TLRPC$Photo tLRPC$Photo;
            int readInt32;
            SQLiteDatabase database = MessagesController.this.getMessagesStorage().getDatabase();
            final HashMap hashMap = new HashMap();
            SQLiteCursor sQLiteCursor = null;
            int i2 = 0;
            try {
                try {
                    Locale locale = Locale.US;
                    SQLiteCursor queryFinalized = database.queryFinalized(String.format(locale, "SELECT count FROM dialog_photos_count WHERE uid = %d", Long.valueOf(this.dialogId)), new Object[0]);
                    try {
                        try {
                            i = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                            try {
                                queryFinalized.dispose();
                                try {
                                    SQLiteCursor queryFinalized2 = database.queryFinalized(String.format(locale, "SELECT num, data FROM dialog_photos WHERE uid = %d", Long.valueOf(this.dialogId)), new Object[0]);
                                    while (queryFinalized2.next()) {
                                        try {
                                            int intValue = queryFinalized2.intValue(0);
                                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                                            if (byteBufferValue != null && (readInt32 = byteBufferValue.readInt32(false)) != 1450380236) {
                                                tLRPC$Photo = TLRPC$Photo.TLdeserialize(byteBufferValue, readInt32, false);
                                                if (tLRPC$Photo == null) {
                                                    i = Math.max(intValue + 1, i);
                                                    hashMap.put(Integer.valueOf(intValue), tLRPC$Photo);
                                                }
                                            }
                                            tLRPC$Photo = null;
                                            if (tLRPC$Photo == null) {
                                            }
                                        } catch (Exception unused) {
                                            sQLiteCursor = queryFinalized2;
                                            i2 = i;
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            i = i2;
                                            final int max = Math.max(i, hashMap.size());
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda2
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.DialogPhotos.this.lambda$loadCache$4(max, hashMap);
                                                }
                                            });
                                        } catch (Throwable th) {
                                            sQLiteCursor = queryFinalized2;
                                            th = th;
                                            if (sQLiteCursor != null) {
                                                sQLiteCursor.dispose();
                                            }
                                            throw th;
                                        }
                                    }
                                    queryFinalized2.dispose();
                                } catch (Exception unused2) {
                                }
                            } catch (Exception unused3) {
                                sQLiteCursor = queryFinalized;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteCursor = queryFinalized;
                        }
                    } catch (Exception unused4) {
                        sQLiteCursor = queryFinalized;
                    }
                } catch (Exception unused5) {
                }
                final int max2 = Math.max(i, hashMap.size());
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.DialogPhotos.this.lambda$loadCache$4(max2, hashMap);
                    }
                });
            } catch (Throwable th3) {
                th = th3;
            }
        }

        public /* synthetic */ void lambda$loadCache$4(int i, HashMap hashMap) {
            this.photos.clear();
            for (int i2 = 0; i2 < i; i2++) {
                this.photos.add(null);
            }
            for (Map.Entry entry : hashMap.entrySet()) {
                this.photos.set(((Integer) entry.getKey()).intValue(), (TLRPC$Photo) entry.getValue());
            }
            MessagesController.this.getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogPhotosUpdate, this);
            load(0, 80);
        }

        private void saveCache() {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$DialogPhotos$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.DialogPhotos.this.lambda$saveCache$6();
                }
            });
        }

        public /* synthetic */ void lambda$saveCache$6() {
            SQLiteDatabase database = MessagesController.this.getMessagesStorage().getDatabase();
            SQLitePreparedStatement sQLitePreparedStatement = null;
            try {
                database.executeFast("DELETE FROM dialog_photos WHERE uid = " + this.dialogId).stepThis().dispose();
                database.executeFast("DELETE FROM dialog_photos_count WHERE uid = " + this.dialogId).stepThis().dispose();
                database.executeFast("REPLACE INTO dialog_photos_count VALUES(" + this.dialogId + ", " + this.photos.size() + ")").stepThis().dispose();
                sQLitePreparedStatement = database.executeFast("REPLACE INTO dialog_photos VALUES(?, ?, ?, ?)");
                for (int i = 0; i < this.photos.size(); i++) {
                    TLRPC$Photo tLRPC$Photo = this.photos.get(i);
                    if (tLRPC$Photo != null) {
                        if (tLRPC$Photo.file_reference == null) {
                            tLRPC$Photo.file_reference = new byte[0];
                        }
                        sQLitePreparedStatement.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Photo.getObjectSize());
                        tLRPC$Photo.serializeToStream(nativeByteBuffer);
                        sQLitePreparedStatement.bindLong(1, this.dialogId);
                        sQLitePreparedStatement.bindLong(2, tLRPC$Photo.id);
                        sQLitePreparedStatement.bindInteger(3, i);
                        sQLitePreparedStatement.bindByteBuffer(4, nativeByteBuffer);
                        sQLitePreparedStatement.step();
                        nativeByteBuffer.reuse();
                    }
                }
                sQLitePreparedStatement.dispose();
            } catch (Exception unused) {
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
            } catch (Throwable th) {
                if (sQLitePreparedStatement != null) {
                    sQLitePreparedStatement.dispose();
                }
                throw th;
            }
        }

        public void reset() {
            this.photos.clear();
            this.fromCache = true;
            saveCache();
        }
    }

    public void blockPeer(long j) {
        TLRPC$Chat chat;
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user == null) {
                return;
            }
            tLRPC$User = user;
            chat = null;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(j) >= 0) {
            return;
        }
        this.blockePeers.put(j, 1);
        if (tLRPC$User != null) {
            if (tLRPC$User.bot) {
                getMediaDataController().removeInline(j);
            } else {
                getMediaDataController().removePeer(j);
            }
        }
        int i = this.totalBlockedCount;
        if (i >= 0) {
            this.totalBlockedCount = i + 1;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        TLRPC$TL_contacts_block tLRPC$TL_contacts_block = new TLRPC$TL_contacts_block();
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_block.id = getInputPeer(chat);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_block, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda122
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$blockPeer$83(tLObject, tLRPC$TL_error);
            }
        });
    }

    public void setParticipantBannedRole(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        setParticipantBannedRole(j, tLRPC$User, tLRPC$Chat, tLRPC$TL_chatBannedRights, z, baseFragment, null);
    }

    public void setParticipantBannedRole(final long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final boolean z, final BaseFragment baseFragment, final Runnable runnable) {
        if ((tLRPC$User == null && tLRPC$Chat == null) || tLRPC$TL_chatBannedRights == null) {
            return;
        }
        final TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
        tLRPC$TL_channels_editBanned.channel = getInputChannel(j);
        if (tLRPC$User != null) {
            tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$Chat);
        }
        tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_editBanned, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda383
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setParticipantBannedRole$86(j, runnable, baseFragment, tLRPC$TL_channels_editBanned, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$86(final long j, Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, final boolean z, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda273
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setParticipantBannedRole$84(j);
                }
            }, 1000L);
            if (runnable != null) {
                AndroidUtilities.runOnUIThread(runnable);
                return;
            }
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda274
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setParticipantBannedRole$85(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, z);
            }
        });
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$84(long j) {
        loadFullChat(j, 0, true);
    }

    public /* synthetic */ void lambda$setParticipantBannedRole$85(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, Boolean.valueOf(z));
    }

    public void setChannelSlowMode(final long j, int i) {
        TLRPC$TL_channels_toggleSlowMode tLRPC$TL_channels_toggleSlowMode = new TLRPC$TL_channels_toggleSlowMode();
        tLRPC$TL_channels_toggleSlowMode.seconds = i;
        tLRPC$TL_channels_toggleSlowMode.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSlowMode, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda358
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChannelSlowMode$88(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChannelSlowMode$88(final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda23
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChannelSlowMode$87(j);
                }
            }, 1000L);
        }
    }

    public /* synthetic */ void lambda$setChannelSlowMode$87(long j) {
        loadFullChat(j, 0, true);
    }

    public void setBoostsToUnblockRestrictions(final long j, int i) {
        TLRPC$TL_channels_setBoostsToUnblockRestrictions tLRPC$TL_channels_setBoostsToUnblockRestrictions = new TLRPC$TL_channels_setBoostsToUnblockRestrictions();
        tLRPC$TL_channels_setBoostsToUnblockRestrictions.boosts = i;
        tLRPC$TL_channels_setBoostsToUnblockRestrictions.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_setBoostsToUnblockRestrictions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda31
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setBoostsToUnblockRestrictions$90(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setBoostsToUnblockRestrictions$90(final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda427
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setBoostsToUnblockRestrictions$89(j);
                }
            }, 1000L);
        }
    }

    public /* synthetic */ void lambda$setBoostsToUnblockRestrictions$89(long j) {
        loadFullChat(j, 0, true);
    }

    public void setDefaultBannedRole(final long j, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, final boolean z, final BaseFragment baseFragment) {
        if (tLRPC$TL_chatBannedRights == null) {
            return;
        }
        final TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights = new TLRPC$TL_messages_editChatDefaultBannedRights();
        tLRPC$TL_messages_editChatDefaultBannedRights.peer = getInputPeer(-j);
        tLRPC$TL_messages_editChatDefaultBannedRights.banned_rights = tLRPC$TL_chatBannedRights;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatDefaultBannedRights, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda18
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDefaultBannedRole$93(j, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$93(final long j, final BaseFragment baseFragment, final TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, final boolean z, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda147
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setDefaultBannedRole$91(j);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda148
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setDefaultBannedRole$92(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z);
            }
        });
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$91(long j) {
        loadFullChat(j, 0, true);
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$92(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    public void setUserAdminRole(long j, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2, boolean z3, String str2, Runnable runnable) {
        setUserAdminRole(j, tLRPC$User, tLRPC$TL_chatAdminRights, str, z, baseFragment, z2, z3, str2, runnable, null);
    }

    public void setUserAdminRole(final long j, final TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, final boolean z, final BaseFragment baseFragment, boolean z2, boolean z3, String str2, final Runnable runnable, final ErrorDelegate errorDelegate) {
        if (tLRPC$User == null || tLRPC$TL_chatAdminRights == null) {
            return;
        }
        final TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (ChatObject.isChannel(chat)) {
            final TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin = new TLRPC$TL_channels_editAdmin();
            tLRPC$TL_channels_editAdmin.channel = getInputChannel(chat);
            tLRPC$TL_channels_editAdmin.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_channels_editAdmin.admin_rights = tLRPC$TL_chatAdminRights;
            tLRPC$TL_channels_editAdmin.rank = str;
            final RequestDelegate requestDelegate = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda95
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserAdminRole$98(j, runnable, chat, tLRPC$User, errorDelegate, baseFragment, tLRPC$TL_channels_editAdmin, z, tLObject, tLRPC$TL_error);
                }
            };
            if (!tLRPC$User.bot && z2) {
                addUserToChat(j, tLRPC$User, 0, str2, baseFragment, true, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$99(tLRPC$TL_channels_editAdmin, requestDelegate);
                    }
                }, errorDelegate);
                return;
            } else {
                getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, requestDelegate);
                return;
            }
        }
        final TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin = new TLRPC$TL_messages_editChatAdmin();
        tLRPC$TL_messages_editChatAdmin.chat_id = j;
        tLRPC$TL_messages_editChatAdmin.user_id = getInputUser(tLRPC$User);
        tLRPC$TL_messages_editChatAdmin.is_admin = z3 || tLRPC$TL_chatAdminRights.change_info || tLRPC$TL_chatAdminRights.delete_messages || tLRPC$TL_chatAdminRights.ban_users || tLRPC$TL_chatAdminRights.invite_users || tLRPC$TL_chatAdminRights.pin_messages || tLRPC$TL_chatAdminRights.add_admins || tLRPC$TL_chatAdminRights.manage_call;
        final RequestDelegate requestDelegate2 = new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda97
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setUserAdminRole$103(j, runnable, baseFragment, tLRPC$TL_messages_editChatAdmin, errorDelegate, tLObject, tLRPC$TL_error);
            }
        };
        if (tLRPC$TL_messages_editChatAdmin.is_admin || z2 || !TextUtils.isEmpty(str2)) {
            addUserToChat(j, tLRPC$User, 0, str2, baseFragment, true, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda98
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$104(tLRPC$TL_messages_editChatAdmin, requestDelegate2);
                }
            }, errorDelegate);
        } else {
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate2);
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$98(final long j, final Runnable runnable, final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User, final ErrorDelegate errorDelegate, final BaseFragment baseFragment, final TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, final boolean z, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda258
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$94(j, runnable);
                }
            }, 1000L);
        } else if ("USER_PRIVACY_RESTRICTED".equals(tLRPC$TL_error.text) && ChatObject.canUserDoAdminAction(tLRPC$Chat, 3)) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda259
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$95(tLRPC$User, tLRPC$Chat, errorDelegate, tLRPC$TL_error);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda260
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$96(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, z);
                }
            });
            if (errorDelegate != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda261
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.ErrorDelegate.this.run(tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$94(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$95(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, ErrorDelegate errorDelegate, TLRPC$TL_error tLRPC$TL_error) {
        BaseFragment lastFragment = LaunchActivity.getLastFragment();
        if (lastFragment != null && lastFragment.getParentActivity() != null) {
            LimitReachedBottomSheet limitReachedBottomSheet = new LimitReachedBottomSheet(lastFragment, lastFragment.getParentActivity(), 11, this.currentAccount, null);
            ArrayList<TLRPC$User> arrayList = new ArrayList<>();
            arrayList.add(tLRPC$User);
            limitReachedBottomSheet.setRestrictedUsers(tLRPC$Chat, arrayList, null, null);
            limitReachedBottomSheet.show();
        }
        errorDelegate.run(tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$setUserAdminRole$96(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, Boolean.valueOf(z));
    }

    public /* synthetic */ void lambda$setUserAdminRole$99(TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, requestDelegate);
    }

    public /* synthetic */ void lambda$setUserAdminRole$103(final long j, final Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, final ErrorDelegate errorDelegate, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda435
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setUserAdminRole$100(j, runnable);
                }
            }, 1000L);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda436
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$setUserAdminRole$101(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin);
            }
        });
        if (errorDelegate != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda437
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.ErrorDelegate.this.run(tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$100(long j, Runnable runnable) {
        loadFullChat(j, 0, true);
        if (runnable != null) {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$101(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$setUserAdminRole$104(TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate);
    }

    public void unblockPeer(long j) {
        unblockPeer(j, null);
    }

    public void unblockPeer(long j, final Runnable runnable) {
        TLRPC$Chat chat;
        TLRPC$TL_contacts_unblock tLRPC$TL_contacts_unblock = new TLRPC$TL_contacts_unblock();
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user == null) {
                return;
            }
            tLRPC$User = user;
            chat = null;
        } else {
            chat = getChat(Long.valueOf(-j));
            if (chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(j);
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_unblock.id = getInputPeer(chat);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_unblock, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda283
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$unblockPeer$106(runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$unblockPeer$106(final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda212
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$unblockPeer$105(runnable);
            }
        });
    }

    public static /* synthetic */ void lambda$unblockPeer$105(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
    }

    public void getBlockedPeers(final boolean z) {
        if (!getUserConfig().isClientActivated() || this.loadingBlockedPeers) {
            return;
        }
        this.loadingBlockedPeers = true;
        final TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked = new TLRPC$TL_contacts_getBlocked();
        tLRPC$TL_contacts_getBlocked.offset = z ? 0 : this.blockePeers.size();
        tLRPC$TL_contacts_getBlocked.limit = z ? 20 : 100;
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_getBlocked, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda245
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getBlockedPeers$108(z, tLRPC$TL_contacts_getBlocked, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getBlockedPeers$108(final boolean z, final TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda328
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getBlockedPeers$107(tLObject, z, tLRPC$TL_contacts_getBlocked);
            }
        });
    }

    public /* synthetic */ void lambda$getBlockedPeers$107(TLObject tLObject, boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC$contacts_Blocked tLRPC$contacts_Blocked = (TLRPC$contacts_Blocked) tLObject;
            putUsers(tLRPC$contacts_Blocked.users, false);
            putChats(tLRPC$contacts_Blocked.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$contacts_Blocked.users, tLRPC$contacts_Blocked.chats, true, true);
            if (z) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(tLRPC$contacts_Blocked.count, tLRPC$contacts_Blocked.blocked.size());
            this.blockedEndReached = tLRPC$contacts_Blocked.blocked.size() < tLRPC$TL_contacts_getBlocked.limit;
            int size = tLRPC$contacts_Blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockePeers.put(MessageObject.getPeerId(tLRPC$contacts_Blocked.blocked.get(i).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC$InputPhoto tLRPC$InputPhoto) {
        TLRPC$Photo tLRPC$Photo;
        final long clientUserId = getUserConfig().getClientUserId();
        if (tLRPC$InputPhoto == null) {
            DialogPhotos dialogPhotos = getDialogPhotos(clientUserId);
            if (dialogPhotos != null && dialogPhotos.photos.size() > 0 && (tLRPC$Photo = dialogPhotos.photos.get(0)) != null) {
                dialogPhotos.removePhoto(tLRPC$Photo.id);
            }
            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
            tLRPC$TL_photos_updateProfilePhoto.id = new TLRPC$TL_inputPhotoEmpty();
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user == null) {
                return;
            }
            if (user.photo != null) {
                getMessagesStorage().clearUserPhoto(user.id, user.photo.photo_id);
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
            getConnectionsManager().sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteUserPhoto$110(clientUserId, tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        TLRPC$TL_photos_deletePhotos tLRPC$TL_photos_deletePhotos = new TLRPC$TL_photos_deletePhotos();
        tLRPC$TL_photos_deletePhotos.id.add(tLRPC$InputPhoto);
        getDialogPhotos(clientUserId).removePhoto(tLRPC$InputPhoto.id);
        getConnectionsManager().sendRequest(tLRPC$TL_photos_deletePhotos, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda305
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$deleteUserPhoto$111(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserPhoto$110(final long j, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda390
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteUserPhoto$109(tLObject, j);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteUserPhoto$109(TLObject tLObject, long j) {
        TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
        TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
        if (user == null) {
            user = getUserConfig().getCurrentUser();
            putUser(user, false);
        } else {
            getUserConfig().setCurrentUser(user);
        }
        if (user == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        arrayList.add(user);
        getMessagesStorage().putUsersAndChats(arrayList, null, false, true);
        if (tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) {
            TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
            user.photo = tLRPC$TL_userProfilePhoto;
            tLRPC$TL_userProfilePhoto.has_video = !tLRPC$TL_photos_photo.photo.video_sizes.isEmpty();
            TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = user.photo;
            TLRPC$Photo tLRPC$Photo = tLRPC$TL_photos_photo.photo;
            tLRPC$UserProfilePhoto.photo_id = tLRPC$Photo.id;
            tLRPC$UserProfilePhoto.photo_small = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, ImageReceiver.DEFAULT_CROSSFADE_DURATION).location;
            user.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photos_photo.photo.sizes, 800).location;
            user.photo.dc_id = tLRPC$TL_photos_photo.photo.dc_id;
        } else {
            user.photo = new TLRPC$TL_userProfilePhotoEmpty();
        }
        TLRPC$UserFull userFull = getUserFull(j);
        userFull.profile_photo = tLRPC$TL_photos_photo.photo;
        getMessagesStorage().updateUserInfo(userFull, false);
        getUserConfig().getCurrentUser().photo = user.photo;
        putUser(user, false);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.updateInterfaces;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, Integer.valueOf(UPDATE_MASK_ALL));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    public void uploadAndApplyUserAvatar(TLRPC$FileLocation tLRPC$FileLocation) {
        if (tLRPC$FileLocation == null) {
            return;
        }
        this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + ".jpg";
        getFileLoader().uploadFile(this.uploadingAvatar, false, true, ConnectionsManager.FileTypePhoto);
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tLRPC$TL_theme != null) {
            TLRPC$TL_account_saveTheme tLRPC$TL_account_saveTheme = new TLRPC$TL_account_saveTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_saveTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda21
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$saveTheme$112(tLObject, tLRPC$TL_error);
                }
            });
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (z2) {
            return;
        }
        installTheme(themeInfo, themeAccent, z);
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC$TL_account_installTheme tLRPC$TL_account_installTheme = new TLRPC$TL_account_installTheme();
        tLRPC$TL_account_installTheme.dark = z;
        if (tLRPC$TL_theme != null) {
            tLRPC$TL_account_installTheme.format = "android";
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_installTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_installTheme, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda462
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$installTheme$113(tLObject, tLRPC$TL_error);
            }
        });
        if (TextUtils.isEmpty(str)) {
            return;
        }
        TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
        TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
        tLRPC$TL_inputWallPaperSlug.slug = str;
        tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
        TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
        tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
        tLRPC$TL_wallPaperSettings.blur = z2;
        tLRPC$TL_wallPaperSettings.motion = z3;
        getConnectionsManager().sendRequest(tLRPC$TL_account_installWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda463
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$installTheme$114(tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void saveThemeToServer(final Theme.ThemeInfo themeInfo, final Theme.ThemeAccent themeAccent) {
        String str;
        File file;
        if (themeInfo == null) {
            return;
        }
        if (themeAccent != 0) {
            str = themeAccent.saveToFile().getAbsolutePath();
            file = themeAccent.getPathToWallpaper();
        } else {
            str = themeInfo.pathToFile;
            file = null;
        }
        final String str2 = str;
        final File file2 = file;
        if (str2 == null || this.uploadingThemes.containsKey(str2)) {
            return;
        }
        this.uploadingThemes.put(str2, themeAccent != 0 ? themeAccent : themeInfo);
        Utilities.globalQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda347
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$116(str2, file2, themeAccent, themeInfo);
            }
        });
    }

    public /* synthetic */ void lambda$saveThemeToServer$116(final String str, File file, final Theme.ThemeAccent themeAccent, final Theme.ThemeInfo themeInfo) {
        final String createThemePreviewImage = Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null, themeAccent);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda88
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveThemeToServer$115(createThemePreviewImage, str, themeAccent, themeInfo);
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    public /* synthetic */ void lambda$saveThemeToServer$115(String str, String str2, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        if (str == null) {
            this.uploadingThemes.remove(str2);
            return;
        }
        this.uploadingThemes.put(str, themeAccent != null ? themeAccent : themeInfo);
        if (themeAccent == null) {
            themeInfo.uploadingFile = str2;
            themeInfo.uploadingThumb = str;
        } else {
            themeAccent.uploadingFile = str2;
            themeAccent.uploadingThumb = str;
        }
        getFileLoader().uploadFile(str2, false, true, ConnectionsManager.FileTypeFile);
        getFileLoader().uploadFile(str, false, true, ConnectionsManager.FileTypePhoto);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:126:0x00fb  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0101  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0117  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0127  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0150  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0166  */
    /* JADX WARN: Removed duplicated region for block: B:142:0x017c  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x018a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void saveWallpaperToServer(File file, Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, final long j) {
        TLRPC$TL_account_saveWallPaper tLRPC$TL_account_saveWallPaper;
        NativeByteBuffer nativeByteBuffer;
        TLRPC$WallPaper tLRPC$TL_wallPaper;
        long j2;
        int i;
        int i2;
        int i3;
        int i4;
        NativeByteBuffer nativeByteBuffer2 = null;
        if (this.uploadingWallpaper != null) {
            File file2 = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
            if (file != null && (file.getAbsolutePath().equals(this.uploadingWallpaper) || file.equals(file2))) {
                this.uploadingWallpaperInfo = overrideWallpaperInfo;
                return;
            }
            getFileLoader().cancelFileUpload(this.uploadingWallpaper, false);
            this.uploadingWallpaper = null;
            this.uploadingWallpaperInfo = null;
        }
        if (file != null) {
            this.uploadingWallpaper = file.getAbsolutePath();
            this.uploadingWallpaperInfo = overrideWallpaperInfo;
            getFileLoader().uploadFile(this.uploadingWallpaper, false, true, ConnectionsManager.FileTypePhoto);
        } else if (!overrideWallpaperInfo.isDefault() && !overrideWallpaperInfo.isColor() && overrideWallpaperInfo.wallpaperId > 0 && !overrideWallpaperInfo.isTheme()) {
            TLRPC$InputWallPaper inputWallpaper = getInputWallpaper(overrideWallpaperInfo);
            TLRPC$TL_wallPaperSettings wallpaperSetting = getWallpaperSetting(overrideWallpaperInfo);
            if (z) {
                TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
                tLRPC$TL_account_installWallPaper.wallpaper = inputWallpaper;
                tLRPC$TL_account_installWallPaper.settings = wallpaperSetting;
                tLRPC$TL_account_saveWallPaper = tLRPC$TL_account_installWallPaper;
            } else {
                TLRPC$TL_account_saveWallPaper tLRPC$TL_account_saveWallPaper2 = new TLRPC$TL_account_saveWallPaper();
                tLRPC$TL_account_saveWallPaper2.wallpaper = inputWallpaper;
                tLRPC$TL_account_saveWallPaper2.settings = wallpaperSetting;
                tLRPC$TL_account_saveWallPaper = tLRPC$TL_account_saveWallPaper2;
            }
            if (j == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(1024);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(21);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isBlurred);
                    nativeByteBuffer.writeBool(overrideWallpaperInfo.isMotion);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.color);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.gradientColor1);
                    nativeByteBuffer.writeInt32(overrideWallpaperInfo.rotation);
                    nativeByteBuffer.writeDouble(overrideWallpaperInfo.intensity);
                    nativeByteBuffer.writeBool(z);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.slug);
                    nativeByteBuffer.writeString(overrideWallpaperInfo.originalFileName);
                    nativeByteBuffer.limit(nativeByteBuffer.position());
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda323
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$saveWallpaperToServer$117(j, tLObject, tLRPC$TL_error);
                        }
                    });
                    if (overrideWallpaperInfo.isColor()) {
                    }
                    if (!overrideWallpaperInfo.isColor()) {
                    }
                    j2 = overrideWallpaperInfo.wallpaperId;
                    if (j2 != 0) {
                    }
                    tLRPC$TL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
                    tLRPC$TL_wallPaper.flags |= 4;
                    TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                    tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings;
                    tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                    tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                    i = overrideWallpaperInfo.color;
                    if (i != 0) {
                    }
                    i2 = overrideWallpaperInfo.gradientColor1;
                    if (i2 != 0) {
                    }
                    i3 = overrideWallpaperInfo.gradientColor2;
                    if (i3 != 0) {
                    }
                    i4 = overrideWallpaperInfo.gradientColor3;
                    if (i4 != 0) {
                    }
                    ArrayList<TLRPC$WallPaper> arrayList = new ArrayList<>();
                    arrayList.add(tLRPC$TL_wallPaper);
                    getMessagesStorage().putWallpapers(arrayList, -3);
                    getMessagesStorage().getWallpapers();
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveWallPaper, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda323
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveWallpaperToServer$117(j, tLObject, tLRPC$TL_error);
                }
            });
        }
        if (!(overrideWallpaperInfo.isColor() && overrideWallpaperInfo.gradientColor2 == 0) && overrideWallpaperInfo.wallpaperId <= 0) {
            if (!overrideWallpaperInfo.isColor()) {
                tLRPC$TL_wallPaper = new TLRPC$TL_wallPaperNoFile();
            } else {
                tLRPC$TL_wallPaper = new TLRPC$TL_wallPaper();
                tLRPC$TL_wallPaper.slug = overrideWallpaperInfo.slug;
                tLRPC$TL_wallPaper.document = new TLRPC$TL_documentEmpty();
            }
            j2 = overrideWallpaperInfo.wallpaperId;
            if (j2 != 0) {
                long nextLong = Utilities.random.nextLong();
                tLRPC$TL_wallPaper.id = nextLong;
                if (nextLong > 0) {
                    tLRPC$TL_wallPaper.id = -nextLong;
                }
            } else {
                tLRPC$TL_wallPaper.id = j2;
            }
            tLRPC$TL_wallPaper.dark = MotionBackgroundDrawable.isDark(overrideWallpaperInfo.color, overrideWallpaperInfo.gradientColor1, overrideWallpaperInfo.gradientColor2, overrideWallpaperInfo.gradientColor3);
            tLRPC$TL_wallPaper.flags |= 4;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings2 = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings2;
            tLRPC$TL_wallPaperSettings2.blur = overrideWallpaperInfo.isBlurred;
            tLRPC$TL_wallPaperSettings2.motion = overrideWallpaperInfo.isMotion;
            i = overrideWallpaperInfo.color;
            if (i != 0) {
                tLRPC$TL_wallPaperSettings2.background_color = i;
                tLRPC$TL_wallPaperSettings2.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
                tLRPC$TL_wallPaperSettings2.flags = tLRPC$TL_wallPaperSettings2.flags | 1 | 8;
            }
            i2 = overrideWallpaperInfo.gradientColor1;
            if (i2 != 0) {
                tLRPC$TL_wallPaperSettings2.second_background_color = i2;
                tLRPC$TL_wallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
                tLRPC$TL_wallPaper.settings.flags |= 16;
            }
            i3 = overrideWallpaperInfo.gradientColor2;
            if (i3 != 0) {
                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_wallPaper.settings;
                tLRPC$WallPaperSettings.third_background_color = i3;
                tLRPC$WallPaperSettings.flags |= 32;
            }
            i4 = overrideWallpaperInfo.gradientColor3;
            if (i4 != 0) {
                TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_wallPaper.settings;
                tLRPC$WallPaperSettings2.fourth_background_color = i4;
                tLRPC$WallPaperSettings2.flags |= 64;
            }
            ArrayList<TLRPC$WallPaper> arrayList2 = new ArrayList<>();
            arrayList2.add(tLRPC$TL_wallPaper);
            getMessagesStorage().putWallpapers(arrayList2, -3);
            getMessagesStorage().getWallpapers();
        }
    }

    public /* synthetic */ void lambda$saveWallpaperToServer$117(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    public static TLRPC$TL_wallPaperSettings getWallpaperSetting(Theme.OverrideWallpaperInfo overrideWallpaperInfo) {
        TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
        tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
        tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
        int i = overrideWallpaperInfo.color;
        if (i != 0) {
            tLRPC$TL_wallPaperSettings.background_color = i & 16777215;
            tLRPC$TL_wallPaperSettings.intensity = (int) (overrideWallpaperInfo.intensity * 100.0f);
            tLRPC$TL_wallPaperSettings.flags = tLRPC$TL_wallPaperSettings.flags | 1 | 8;
        } else {
            float f = overrideWallpaperInfo.intensity;
            if (f > 0.0f) {
                tLRPC$TL_wallPaperSettings.intensity = (int) (f * 100.0f);
                tLRPC$TL_wallPaperSettings.flags |= 8;
            }
        }
        int i2 = overrideWallpaperInfo.gradientColor1;
        if (i2 != 0) {
            tLRPC$TL_wallPaperSettings.second_background_color = i2 & 16777215;
            tLRPC$TL_wallPaperSettings.rotation = AndroidUtilities.getWallpaperRotation(overrideWallpaperInfo.rotation, true);
            tLRPC$TL_wallPaperSettings.flags |= 16;
        }
        int i3 = overrideWallpaperInfo.gradientColor2;
        if (i3 != 0) {
            tLRPC$TL_wallPaperSettings.third_background_color = i3 & 16777215;
            tLRPC$TL_wallPaperSettings.flags |= 32;
        }
        int i4 = overrideWallpaperInfo.gradientColor3;
        if (i4 != 0) {
            tLRPC$TL_wallPaperSettings.fourth_background_color = i4 & 16777215;
            tLRPC$TL_wallPaperSettings.flags |= 64;
        }
        return tLRPC$TL_wallPaperSettings;
    }

    public static TLRPC$InputWallPaper getInputWallpaper(Theme.OverrideWallpaperInfo overrideWallpaperInfo) {
        if (overrideWallpaperInfo.wallpaperId > 0) {
            TLRPC$TL_inputWallPaper tLRPC$TL_inputWallPaper = new TLRPC$TL_inputWallPaper();
            tLRPC$TL_inputWallPaper.id = overrideWallpaperInfo.wallpaperId;
            tLRPC$TL_inputWallPaper.access_hash = overrideWallpaperInfo.accessHash;
            return tLRPC$TL_inputWallPaper;
        }
        TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
        tLRPC$TL_inputWallPaperSlug.slug = overrideWallpaperInfo.slug;
        return tLRPC$TL_inputWallPaperSlug;
    }

    public void markDialogMessageAsDeleted(long j, ArrayList<Integer> arrayList) {
        ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(j);
        if (arrayList2 != null) {
            for (int i = 0; i < arrayList2.size(); i++) {
                MessageObject messageObject = arrayList2.get(i);
                if (messageObject != null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= arrayList.size()) {
                            break;
                        } else if (messageObject.getId() == arrayList.get(i2).intValue()) {
                            messageObject.deleted = true;
                            break;
                        } else {
                            i2++;
                        }
                    }
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, int i2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, i2, false, 0L, null, i);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, int i2, boolean z2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, i2, z2, 0L, null, i);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, int i, boolean z2, long j2, TLObject tLObject, int i2) {
        long j3;
        ArrayList<Integer> arrayList3;
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2;
        final long createPendingTask;
        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages;
        NativeByteBuffer nativeByteBuffer3;
        long createPendingTask2;
        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer4;
        final long createPendingTask3;
        TLRPC$TL_messages_deleteQuickReplyMessages tLRPC$TL_messages_deleteQuickReplyMessages;
        NativeByteBuffer nativeByteBuffer5;
        final long createPendingTask4;
        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages;
        long j4;
        ArrayList<Integer> arrayList4;
        char c;
        boolean z3 = i == 1;
        boolean z4 = i == 5;
        if ((arrayList == null || arrayList.isEmpty()) && j2 == 0) {
            return;
        }
        if (j2 == 0) {
            if (j == 0 || !DialogObject.isChatDialog(j)) {
                j4 = 0;
            } else {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                j4 = ChatObject.isChannel(chat) ? chat.id : 0L;
            }
            if (z2) {
                arrayList4 = null;
            } else {
                ArrayList<Integer> arrayList5 = new ArrayList<>();
                int size = arrayList.size();
                for (int i3 = 0; i3 < size; i3++) {
                    Integer num = arrayList.get(i3);
                    if (num.intValue() > 0) {
                        arrayList5.add(num);
                    }
                }
                arrayList4 = arrayList5;
            }
            if (z3) {
                c = 1;
                getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, false, 1, 0);
            } else {
                c = 1;
                if (z4) {
                    if (i == 5) {
                        QuickRepliesController.getInstance(this.currentAccount).deleteLocalMessages(arrayList);
                    }
                    getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, false, 5, i2);
                } else {
                    if (j4 == 0) {
                        for (int i4 = 0; i4 < arrayList.size(); i4++) {
                            MessageObject messageObject = this.dialogMessagesByIds.get(arrayList.get(i4).intValue());
                            if (messageObject != null) {
                                messageObject.deleted = true;
                            }
                        }
                    } else {
                        markDialogMessageAsDeleted(j, arrayList);
                    }
                    getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, z, 0, i2);
                    getMessagesStorage().updateDialogsWithDeletedMessages(j, j4, arrayList, null, true);
                }
            }
            NotificationCenter notificationCenter = getNotificationCenter();
            int i5 = NotificationCenter.messagesDeleted;
            Object[] objArr = new Object[3];
            objArr[0] = arrayList;
            objArr[c] = Long.valueOf(j4);
            objArr[2] = Boolean.valueOf(z3);
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i5, objArr);
            j3 = j4;
            arrayList3 = arrayList4;
        } else {
            j3 = tLObject instanceof TLRPC$TL_channels_deleteMessages ? ((TLRPC$TL_channels_deleteMessages) tLObject).channel.channel_id : 0L;
            arrayList3 = null;
        }
        if (z2) {
            return;
        }
        if (z3) {
            if (tLObject instanceof TLRPC$TL_messages_deleteScheduledMessages) {
                tLRPC$TL_messages_deleteScheduledMessages = (TLRPC$TL_messages_deleteScheduledMessages) tLObject;
                createPendingTask4 = j2;
            } else {
                TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages2 = new TLRPC$TL_messages_deleteScheduledMessages();
                tLRPC$TL_messages_deleteScheduledMessages2.id = arrayList3;
                tLRPC$TL_messages_deleteScheduledMessages2.peer = getInputPeer(j);
                try {
                    nativeByteBuffer5 = new NativeByteBuffer(tLRPC$TL_messages_deleteScheduledMessages2.getObjectSize() + 12);
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer5 = null;
                }
                try {
                    nativeByteBuffer5.writeInt32(24);
                    nativeByteBuffer5.writeInt64(j);
                    tLRPC$TL_messages_deleteScheduledMessages2.serializeToStream(nativeByteBuffer5);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    createPendingTask4 = getMessagesStorage().createPendingTask(nativeByteBuffer5);
                    tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$118(createPendingTask4, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask4 = getMessagesStorage().createPendingTask(nativeByteBuffer5);
                tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$118(createPendingTask4, tLObject2, tLRPC$TL_error);
                }
            });
        } else if (z4) {
            if (tLObject instanceof TLRPC$TL_messages_deleteQuickReplyMessages) {
                tLRPC$TL_messages_deleteQuickReplyMessages = (TLRPC$TL_messages_deleteQuickReplyMessages) tLObject;
                createPendingTask3 = j2;
            } else {
                TLRPC$TL_messages_deleteQuickReplyMessages tLRPC$TL_messages_deleteQuickReplyMessages2 = new TLRPC$TL_messages_deleteQuickReplyMessages();
                tLRPC$TL_messages_deleteQuickReplyMessages2.id = arrayList3;
                tLRPC$TL_messages_deleteQuickReplyMessages2.shortcut_id = i2;
                try {
                    nativeByteBuffer4 = new NativeByteBuffer(tLRPC$TL_messages_deleteQuickReplyMessages2.getObjectSize() + 16);
                } catch (Exception e3) {
                    e = e3;
                    nativeByteBuffer4 = null;
                }
                try {
                    nativeByteBuffer4.writeInt32(R.styleable.AppCompatTheme_textAppearanceListItem);
                    nativeByteBuffer4.writeInt64(j);
                    nativeByteBuffer4.writeInt32(i2);
                    tLRPC$TL_messages_deleteQuickReplyMessages2.serializeToStream(nativeByteBuffer4);
                } catch (Exception e4) {
                    e = e4;
                    FileLog.e(e);
                    createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                    tLRPC$TL_messages_deleteQuickReplyMessages = tLRPC$TL_messages_deleteQuickReplyMessages2;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteQuickReplyMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda325
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$119(createPendingTask3, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask3 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                tLRPC$TL_messages_deleteQuickReplyMessages = tLRPC$TL_messages_deleteQuickReplyMessages2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteQuickReplyMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda325
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$119(createPendingTask3, tLObject2, tLRPC$TL_error);
                }
            });
        } else if (j3 != 0) {
            if (tLObject != null) {
                tLRPC$TL_channels_deleteMessages = (TLRPC$TL_channels_deleteMessages) tLObject;
                createPendingTask2 = j2;
            } else {
                TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages2 = new TLRPC$TL_channels_deleteMessages();
                tLRPC$TL_channels_deleteMessages2.id = arrayList3;
                tLRPC$TL_channels_deleteMessages2.channel = getInputChannel(j3);
                try {
                    nativeByteBuffer3 = new NativeByteBuffer(tLRPC$TL_channels_deleteMessages2.getObjectSize() + 12);
                } catch (Exception e5) {
                    e = e5;
                    nativeByteBuffer3 = null;
                }
                try {
                    nativeByteBuffer3.writeInt32(24);
                    nativeByteBuffer3.writeInt64(j);
                    tLRPC$TL_channels_deleteMessages2.serializeToStream(nativeByteBuffer3);
                } catch (Exception e6) {
                    e = e6;
                    FileLog.e(e);
                    createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                    tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                    final long j5 = j3;
                    final long j6 = createPendingTask2;
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda326
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$120(j5, j6, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask2 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
            }
            final long j52 = j3;
            final long j62 = createPendingTask2;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda326
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$120(j52, j62, tLObject2, tLRPC$TL_error);
                }
            });
        } else {
            if (arrayList2 == null || tLRPC$EncryptedChat == null || arrayList2.isEmpty()) {
                nativeByteBuffer = null;
            } else {
                nativeByteBuffer = null;
                getSecretChatHelper().sendMessagesDeleteMessage(tLRPC$EncryptedChat, arrayList2, null);
            }
            if (tLObject instanceof TLRPC$TL_messages_deleteMessages) {
                tLRPC$TL_messages_deleteMessages = (TLRPC$TL_messages_deleteMessages) tLObject;
                createPendingTask = j2;
            } else {
                TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages2 = new TLRPC$TL_messages_deleteMessages();
                tLRPC$TL_messages_deleteMessages2.id = arrayList3;
                tLRPC$TL_messages_deleteMessages2.revoke = z;
                try {
                    nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_messages_deleteMessages2.getObjectSize() + 12);
                } catch (Exception e7) {
                    e = e7;
                    nativeByteBuffer2 = nativeByteBuffer;
                }
                try {
                    nativeByteBuffer2.writeInt32(24);
                    nativeByteBuffer2.writeInt64(j);
                    tLRPC$TL_messages_deleteMessages2.serializeToStream(nativeByteBuffer2);
                } catch (Exception e8) {
                    e = e8;
                    FileLog.e(e);
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda327
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$deleteMessages$121(createPendingTask, tLObject2, tLRPC$TL_error);
                        }
                    });
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda327
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$deleteMessages$121(createPendingTask, tLObject2, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteMessages$118(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$119(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$120(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedMessages.pts, tLRPC$TL_messages_affectedMessages.pts_count, j);
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$121(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void unpinAllMessages(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User) {
        if (tLRPC$Chat == null && tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_unpinAllMessages tLRPC$TL_messages_unpinAllMessages = new TLRPC$TL_messages_unpinAllMessages();
        tLRPC$TL_messages_unpinAllMessages.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_unpinAllMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda224
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$unpinAllMessages$122(tLRPC$Chat, tLRPC$User, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$unpinAllMessages$122(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (ChatObject.isChannel(tLRPC$Chat)) {
                processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
            } else {
                processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, null, false, 0, 0, false, null);
        }
    }

    public void pinMessage(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User, final int i, final boolean z, boolean z2, boolean z3) {
        if (tLRPC$Chat == null && tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_updatePinnedMessage tLRPC$TL_messages_updatePinnedMessage = new TLRPC$TL_messages_updatePinnedMessage();
        tLRPC$TL_messages_updatePinnedMessage.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
        tLRPC$TL_messages_updatePinnedMessage.id = i;
        tLRPC$TL_messages_updatePinnedMessage.unpin = z;
        tLRPC$TL_messages_updatePinnedMessage.silent = !z3;
        tLRPC$TL_messages_updatePinnedMessage.pm_oneside = z2;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_updatePinnedMessage, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda25
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$pinMessage$123(i, tLRPC$Chat, tLRPC$User, z, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$pinMessage$123(int i, TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            ArrayList<Integer> arrayList = new ArrayList<>();
            arrayList.add(Integer.valueOf(i));
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, arrayList, !z, -1, 0, false, null);
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void deleteUserChannelHistory(final TLRPC$Chat tLRPC$Chat, final TLRPC$User tLRPC$User, final TLRPC$Chat tLRPC$Chat2, int i) {
        long j;
        if (tLRPC$User != null) {
            j = tLRPC$User.id;
        } else {
            j = tLRPC$Chat2 != null ? tLRPC$Chat2.id : 0L;
        }
        if (i == 0) {
            getMessagesStorage().deleteUserChatHistory(-tLRPC$Chat.id, j);
        }
        TLRPC$TL_channels_deleteParticipantHistory tLRPC$TL_channels_deleteParticipantHistory = new TLRPC$TL_channels_deleteParticipantHistory();
        tLRPC$TL_channels_deleteParticipantHistory.channel = getInputChannel(tLRPC$Chat);
        tLRPC$TL_channels_deleteParticipantHistory.participant = tLRPC$User != null ? getInputPeer(tLRPC$User) : getInputPeer(tLRPC$Chat2);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteParticipantHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda192
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$124(tLRPC$Chat, tLRPC$User, tLRPC$Chat2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserChannelHistory$124(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            int i = tLRPC$TL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(tLRPC$Chat, tLRPC$User, tLRPC$Chat2, i);
            }
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
        }
    }

    public ArrayList<TLRPC$Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public void putDialogsEndReachedAfterRegistration() {
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, true);
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC$Dialog> getDialogs(int i) {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public int getAllFoldersDialogsCount() {
        int i = 0;
        for (int i2 = 0; i2 < this.dialogsByFolder.size(); i2++) {
            SparseArray<ArrayList<TLRPC$Dialog>> sparseArray = this.dialogsByFolder;
            ArrayList<TLRPC$Dialog> arrayList = sparseArray.get(sparseArray.keyAt(i2));
            if (arrayList != null) {
                i += arrayList.size();
            }
        }
        return i;
    }

    public int getTotalDialogsCount() {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(0);
        if (arrayList != null) {
            return 0 + arrayList.size();
        }
        return 0;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<LongSparseArray<TLRPC$DraftMessage>> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC$DraftMessage tLRPC$DraftMessage = drafts.valueAt(i).get(0L);
            if (tLRPC$DraftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), tLRPC$DraftMessage);
            }
        }
    }

    public void putDraftDialogIfNeed(long j, TLRPC$DraftMessage tLRPC$DraftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            int i = 1;
            if (size > 0) {
                TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(size - 1);
                if (tLRPC$DraftMessage.date < DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0L))) {
                    return;
                }
            }
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = j;
            tLRPC$TL_dialog.draft = tLRPC$DraftMessage;
            tLRPC$TL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            tLRPC$TL_dialog.flags = (j >= 0 || !ChatObject.isChannel(getChat(Long.valueOf(-j)))) ? 0 : 0;
            this.dialogs_dict.put(j, tLRPC$TL_dialog);
            this.allDialogs.add(tLRPC$TL_dialog);
            sortDialogs(null);
        }
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null || tLRPC$Dialog.top_message != 0) {
            return;
        }
        this.dialogs_dict.remove(tLRPC$Dialog.id);
        this.allDialogs.remove(tLRPC$Dialog);
    }

    private void removeDialog(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return;
        }
        final long j = tLRPC$Dialog.id;
        if (this.dialogsServerOnly.remove(tLRPC$Dialog) && DialogObject.isChannel(tLRPC$Dialog)) {
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda364
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$removeDialog$125(j);
                }
            });
        }
        this.allDialogs.remove(tLRPC$Dialog);
        this.dialogsMyChannels.remove(tLRPC$Dialog);
        this.dialogsMyGroups.remove(tLRPC$Dialog);
        this.dialogsCanAddUsers.remove(tLRPC$Dialog);
        this.dialogsChannelsOnly.remove(tLRPC$Dialog);
        this.dialogsGroupsOnly.remove(tLRPC$Dialog);
        this.dialogsUsersOnly.remove(tLRPC$Dialog);
        this.dialogsForBlock.remove(tLRPC$Dialog);
        this.dialogsForward.remove(tLRPC$Dialog);
        int i = 0;
        while (true) {
            DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
            if (i >= dialogFilterArr.length) {
                break;
            }
            DialogFilter dialogFilter = dialogFilterArr[i];
            if (dialogFilter != null) {
                dialogFilter.dialogs.remove(tLRPC$Dialog);
                this.selectedDialogFilter[i].dialogsForward.remove(tLRPC$Dialog);
            }
            i++;
        }
        this.dialogs_dict.remove(j);
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(tLRPC$Dialog.folder_id);
        if (arrayList != null) {
            arrayList.remove(tLRPC$Dialog);
        }
    }

    public /* synthetic */ void lambda$removeDialog$125(long j) {
        long j2 = -j;
        this.channelsPts.delete(j2);
        this.shortPollChannels.delete(j2);
        this.needShortPollChannels.delete(j2);
        this.shortPollOnlines.delete(j2);
        this.needShortPollOnlines.delete(j2);
    }

    public void hidePromoDialog() {
        if (this.promoDialog == null) {
            return;
        }
        TLRPC$TL_help_hidePromoData tLRPC$TL_help_hidePromoData = new TLRPC$TL_help_hidePromoData();
        tLRPC$TL_help_hidePromoData.peer = getInputPeer(this.promoDialog.id);
        getConnectionsManager().sendRequest(tLRPC$TL_help_hidePromoData, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda275
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$hidePromoDialog$126(tLObject, tLRPC$TL_error);
            }
        });
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda276
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$hidePromoDialog$127();
            }
        });
        removePromoDialog();
    }

    public /* synthetic */ void lambda$hidePromoDialog$127() {
        this.promoDialogId = 0L;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, 1, i, 0, z, null, 0L);
    }

    public void setDialogHistoryTTL(long j, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$TL_messages_setHistoryTTL tLRPC$TL_messages_setHistoryTTL = new TLRPC$TL_messages_setHistoryTTL();
        tLRPC$TL_messages_setHistoryTTL.peer = getInputPeer(j);
        tLRPC$TL_messages_setHistoryTTL.period = i;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setHistoryTTL, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda421
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDialogHistoryTTL$128(tLObject, tLRPC$TL_error);
            }
        });
        TLRPC$Dialog tLRPC$Dialog = getMessagesController().dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.ttl_period = i;
        }
        getMessagesStorage().setDialogTtl(j, i);
        TLRPC$ChatFull tLRPC$ChatFull = null;
        if (j > 0) {
            tLRPC$UserFull = getUserFull(j);
            if (tLRPC$UserFull != null) {
                tLRPC$UserFull.ttl_period = i;
                tLRPC$UserFull.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
            }
        } else {
            TLRPC$ChatFull chatFull = getChatFull(-j);
            if (chatFull != null) {
                chatFull.ttl_period = i;
                if (chatFull instanceof TLRPC$TL_channelFull) {
                    chatFull.flags |= ConnectionsManager.FileTypePhoto;
                } else {
                    chatFull.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                }
            }
            tLRPC$ChatFull = chatFull;
            tLRPC$UserFull = null;
        }
        if (tLRPC$ChatFull == null) {
            if (tLRPC$UserFull != null) {
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(j), tLRPC$UserFull);
                return;
            }
            return;
        }
        NotificationCenter notificationCenter = getNotificationCenter();
        int i2 = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, tLRPC$ChatFull, 0, bool, bool);
    }

    public /* synthetic */ void lambda$setDialogHistoryTTL$128(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (z) {
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* JADX WARN: Removed duplicated region for block: B:406:0x03ff  */
    /* JADX WARN: Removed duplicated region for block: B:416:0x0438  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void deleteDialog(final long j, int i, final int i2, int i3, final boolean z, final TLRPC$InputPeer tLRPC$InputPeer, final long j2) {
        long j3;
        final int i4;
        boolean z2;
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        TLRPC$Dialog tLRPC$Dialog;
        int i5;
        int i6;
        boolean z3;
        boolean z4;
        TLRPC$Chat chat;
        boolean z5;
        int i7;
        if (i2 == 2) {
            if (j == getUserConfig().getClientUserId()) {
                getSavedMessagesController().deleteAllDialogs();
            }
            getMessagesStorage().deleteDialog(j, i2);
            return;
        }
        for (int i8 = 0; i8 < this.sendAsPeers.size(); i8++) {
            SendAsPeersInfo valueAt = this.sendAsPeers.valueAt(i8);
            if (valueAt.sendAsPeers != null) {
                int i9 = 0;
                while (true) {
                    if (i9 >= valueAt.sendAsPeers.chats.size()) {
                        break;
                    } else if (valueAt.sendAsPeers.chats.get(i9).id == (-j)) {
                        valueAt.sendAsPeers.chats.remove(i9);
                        break;
                    } else {
                        i9++;
                    }
                }
                for (int i10 = 0; i10 < valueAt.sendAsPeers.peers.size(); i10++) {
                    long j4 = -j;
                    if (valueAt.sendAsPeers.peers.get(i10).peer.channel_id == j4 || valueAt.sendAsPeers.peers.get(i10).peer.chat_id == j4) {
                        valueAt.sendAsPeers.peers.remove(i10);
                        break;
                    }
                }
            }
        }
        this.sendAsPeers.remove(j);
        if (i == 1 && i3 == 0) {
            getMessagesStorage().getDialogMaxMessageId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda36
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i11) {
                    MessagesController.this.lambda$deleteDialog$129(j, i2, z, tLRPC$InputPeer, j2, i11);
                }
            });
            return;
        }
        if (i2 == 0 || i2 == 3) {
            getMediaDataController().uninstallShortcut(j, MediaDataController.SHORTCUT_TYPE_USER_OR_CHAT);
        }
        if (i != 0) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("delete dialog with id " + j);
            }
            if (j == getUserConfig().getClientUserId()) {
                getSavedMessagesController().deleteAllDialogs();
            }
            getMessagesStorage().deleteDialog(j, i2);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
            if (i2 == 0 || i2 == 3) {
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogDeleted, Long.valueOf(j), 0);
                getNotificationsController().deleteNotificationChannel(j, 0L);
                JoinCallAlert.processDeletedChat(this.currentAccount, j);
            }
            if (i2 == 0) {
                tLRPC$Dialog = tLRPC$Dialog2;
                j3 = 0;
                getMediaDataController().cleanDraft(j, 0L, false);
            } else {
                tLRPC$Dialog = tLRPC$Dialog2;
                j3 = 0;
            }
            if (tLRPC$Dialog != null) {
                i5 = i == 2 ? Math.max(Math.max(Math.max(0, tLRPC$Dialog.top_message), tLRPC$Dialog.read_inbox_max_id), tLRPC$Dialog.read_outbox_max_id) : i3;
                if (i2 == 0 || i2 == 3) {
                    TLRPC$Dialog tLRPC$Dialog3 = this.promoDialog;
                    z4 = tLRPC$Dialog3 != null && tLRPC$Dialog3.id == j;
                    if (z4) {
                        this.isLeftPromoChannel = true;
                        long j5 = tLRPC$Dialog3.id;
                        if (j5 < j3 && (chat = getChat(Long.valueOf(-j5))) != null) {
                            chat.left = true;
                        }
                        sortDialogs(null);
                    } else {
                        removeDialog(tLRPC$Dialog);
                        int i11 = this.nextDialogsCacheOffset.get(tLRPC$Dialog.folder_id, 0);
                        if (i11 > 0) {
                            this.nextDialogsCacheOffset.put(tLRPC$Dialog.folder_id, i11 - 1);
                        }
                    }
                } else {
                    tLRPC$Dialog.unread_count = 0;
                    z4 = false;
                }
                if (z4) {
                    z5 = z4;
                } else {
                    ArrayList<MessageObject> arrayList = this.dialogMessage.get(tLRPC$Dialog.id);
                    z5 = z4;
                    this.dialogMessage.remove(tLRPC$Dialog.id);
                    if (arrayList != null && arrayList.size() > 0 && arrayList.get(0) != null) {
                        i7 = arrayList.get(0).getId();
                        for (int i12 = 0; i12 < arrayList.size(); i12++) {
                            MessageObject messageObject = arrayList.get(i12);
                            if (messageObject != null && messageObject.getId() > i7) {
                                i7 = messageObject.getId();
                            }
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == j3) {
                                this.dialogMessagesByIds.remove(messageObject.getId());
                            }
                            if (messageObject != null) {
                                long j6 = messageObject.messageOwner.random_id;
                                if (j6 != j3) {
                                    this.dialogMessagesByRandomIds.remove(j6);
                                }
                            }
                        }
                    } else {
                        i7 = tLRPC$Dialog.top_message;
                        MessageObject messageObject2 = this.dialogMessagesByIds.get(i7);
                        if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == j3) {
                            this.dialogMessagesByIds.remove(tLRPC$Dialog.top_message);
                        }
                        if (messageObject2 != null) {
                            long j7 = messageObject2.messageOwner.random_id;
                            if (j7 != j3) {
                                this.dialogMessagesByRandomIds.remove(j7);
                            }
                        }
                    }
                    if (i2 == 1 && !DialogObject.isEncryptedDialog(j) && i7 > 0) {
                        TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                        tLRPC$TL_messageService.id = tLRPC$Dialog.top_message;
                        tLRPC$TL_messageService.out = getUserConfig().getClientUserId() == j;
                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                        tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                        tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
                        tLRPC$TL_messageService.flags |= LiteMode.FLAG_CHAT_BLUR;
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionHistoryClear();
                        tLRPC$TL_messageService.date = tLRPC$Dialog.last_message_date;
                        tLRPC$TL_messageService.dialog_id = j;
                        tLRPC$TL_messageService.peer_id = getPeer(j);
                        boolean contains = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_messageService.dialog_id));
                        MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$TL_messageService, contains, contains);
                        ArrayList<MessageObject> arrayList2 = new ArrayList<>();
                        arrayList2.add(messageObject3);
                        ArrayList<TLRPC$Message> arrayList3 = new ArrayList<>();
                        arrayList3.add(tLRPC$TL_messageService);
                        updateInterfaceWithMessages(j, arrayList2, 0);
                        getMessagesStorage().putMessages(arrayList3, false, true, false, 0, false, 0, 0L);
                    } else {
                        tLRPC$Dialog.top_message = 0;
                    }
                }
                z3 = z5;
                i6 = 2;
            } else {
                i5 = i3;
                i6 = 2;
                z3 = false;
            }
            if (i == i6) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num != null) {
                    i5 = Math.max(num.intValue(), i5);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 != null) {
                    i5 = Math.max(num2.intValue(), i5);
                }
            }
            if (!this.dialogsInTransaction) {
                if (z3) {
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                } else {
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.FALSE, null);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda37
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteDialog$131(j);
                }
            });
            i4 = i5;
        } else {
            j3 = 0;
            i4 = i3;
        }
        if (i2 == 3) {
            return;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(j) : tLRPC$InputPeer;
            if (inputPeer == null) {
                return;
            }
            boolean z6 = inputPeer instanceof TLRPC$TL_inputPeerChannel;
            int i13 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            if (!z6 || i2 != 0) {
                if (i4 > 0 && i4 != Integer.MAX_VALUE) {
                    this.deletedHistory.put(j, Math.max(this.deletedHistory.get(j, 0), i4));
                }
                if (j2 == j3) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 28);
                        try {
                            nativeByteBuffer.writeInt32(13);
                            nativeByteBuffer.writeInt64(j);
                            nativeByteBuffer.writeBool(i != 0);
                            nativeByteBuffer.writeInt32(i2);
                            nativeByteBuffer.writeInt32(i4);
                            z2 = z;
                        } catch (Exception e) {
                            e = e;
                            z2 = z;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        z2 = z;
                        nativeByteBuffer = null;
                    }
                    try {
                        nativeByteBuffer.writeBool(z2);
                        inputPeer.serializeToStream(nativeByteBuffer);
                    } catch (Exception e3) {
                        e = e3;
                        FileLog.e(e);
                        createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        if (!z6) {
                        }
                    }
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    if (!z6) {
                        TLRPC$TL_messages_deleteHistory tLRPC$TL_messages_deleteHistory = new TLRPC$TL_messages_deleteHistory();
                        tLRPC$TL_messages_deleteHistory.peer = inputPeer;
                        if (i4 > 0) {
                            i13 = i4;
                        }
                        tLRPC$TL_messages_deleteHistory.max_id = i13;
                        tLRPC$TL_messages_deleteHistory.just_clear = i2 != 0;
                        tLRPC$TL_messages_deleteHistory.revoke = z2;
                        final TLRPC$InputPeer tLRPC$InputPeer2 = inputPeer;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteDialog$133(createPendingTask, j, i2, i4, z, tLRPC$InputPeer2, tLObject, tLRPC$TL_error);
                            }
                        }, 64);
                        return;
                    } else if (i2 == 0) {
                        if (createPendingTask != j3) {
                            getMessagesStorage().removePendingTask(createPendingTask);
                            return;
                        }
                        return;
                    } else {
                        TLRPC$TL_channels_deleteHistory tLRPC$TL_channels_deleteHistory = new TLRPC$TL_channels_deleteHistory();
                        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
                        tLRPC$TL_channels_deleteHistory.channel = tLRPC$TL_inputChannel;
                        tLRPC$TL_channels_deleteHistory.for_everyone = z2;
                        tLRPC$TL_inputChannel.channel_id = inputPeer.channel_id;
                        tLRPC$TL_inputChannel.access_hash = inputPeer.access_hash;
                        if (i4 <= 0) {
                            i4 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                        }
                        tLRPC$TL_channels_deleteHistory.max_id = i4;
                        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda38
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteDialog$132(createPendingTask, tLObject, tLRPC$TL_error);
                            }
                        }, 64);
                        return;
                    }
                }
            }
            z2 = z;
            createPendingTask = j2;
            if (!z6) {
            }
        } else {
            int encryptedChatId = DialogObject.getEncryptedChatId(j);
            if (i2 == 1) {
                getSecretChatHelper().sendClearHistoryMessage(getEncryptedChat(Integer.valueOf(encryptedChatId)), null);
            } else {
                getSecretChatHelper().declineSecretChat(encryptedChatId, z);
            }
        }
    }

    public /* synthetic */ void lambda$deleteDialog$129(long j, int i, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2, int i2) {
        if (j == getUserConfig().getClientUserId()) {
            getSavedMessagesController().deleteAllDialogs();
        }
        deleteDialog(j, 2, i, Math.max(0, i2), z, tLRPC$InputPeer, j2);
        checkIfFolderEmpty(1);
    }

    public /* synthetic */ void lambda$deleteDialog$130(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    public /* synthetic */ void lambda$deleteDialog$131(final long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda348
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteDialog$130(j);
            }
        });
    }

    public /* synthetic */ void lambda$deleteDialog$132(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public /* synthetic */ void lambda$deleteDialog$133(long j, long j2, int i, int i2, boolean z, TLRPC$InputPeer tLRPC$InputPeer, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, 0, i, i2, z, tLRPC$InputPeer, 0L);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
        }
    }

    public void deleteSavedDialog(long j) {
        deleteSavedDialog(j, 0);
    }

    protected void deleteSavedDialog(final long j, final int i) {
        final int[] iArr = {i};
        final Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda412
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteSavedDialog$135(j, i, iArr);
            }
        };
        if (iArr[0] <= 0) {
            getMessagesStorage().getSavedDialogMaxMessageId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda413
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i2) {
                    MessagesController.lambda$deleteSavedDialog$136(iArr, runnable, i2);
                }
            });
        } else {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$deleteSavedDialog$135(final long j, int i, final int[] iArr) {
        SavedMessagesController.SavedDialog savedDialog;
        getMessagesStorage().deleteSavedDialog(j);
        TLRPC$TL_messages_deleteSavedHistory tLRPC$TL_messages_deleteSavedHistory = new TLRPC$TL_messages_deleteSavedHistory();
        tLRPC$TL_messages_deleteSavedHistory.peer = getInputPeer(j);
        if (i == 0) {
            int i2 = 0;
            while (true) {
                if (i2 >= getSavedMessagesController().allDialogs.size()) {
                    savedDialog = null;
                    break;
                } else if (getSavedMessagesController().allDialogs.get(i2).dialogId == j) {
                    savedDialog = getSavedMessagesController().allDialogs.get(i2);
                    break;
                } else {
                    i2++;
                }
            }
            if (savedDialog != null) {
                iArr[0] = Math.max(iArr[0], savedDialog.top_message_id);
                getSavedMessagesController().deleteDialog(j);
            }
            int i3 = iArr[0];
            if (i3 <= 0) {
                i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            tLRPC$TL_messages_deleteSavedHistory.max_id = i3;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteSavedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda53
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteSavedDialog$134(j, iArr, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$deleteSavedDialog$134(long j, int[] iArr, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteSavedDialog(j, iArr[0]);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j);
        }
    }

    public static /* synthetic */ void lambda$deleteSavedDialog$136(int[] iArr, Runnable runnable, int i) {
        iArr[0] = i;
        runnable.run();
    }

    public void saveGif(final Object obj, TLRPC$Document tLRPC$Document) {
        if (obj == null || !MessageObject.isGifDocument(tLRPC$Document)) {
            return;
        }
        final TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif = new TLRPC$TL_messages_saveGif();
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_messages_saveGif.id = tLRPC$TL_inputDocument;
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        byte[] bArr = tLRPC$Document.file_reference;
        tLRPC$TL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tLRPC$TL_inputDocument.file_reference = new byte[0];
        }
        tLRPC$TL_messages_saveGif.unsave = false;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveGif, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda64
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$saveGif$137(obj, tLRPC$TL_messages_saveGif, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$saveGif$137(Object obj, TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null || !FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tLRPC$TL_messages_saveGif);
    }

    public void saveRecentSticker(final Object obj, TLRPC$Document tLRPC$Document, boolean z) {
        if (obj == null || tLRPC$Document == null) {
            return;
        }
        final TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker = new TLRPC$TL_messages_saveRecentSticker();
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_messages_saveRecentSticker.id = tLRPC$TL_inputDocument;
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        byte[] bArr = tLRPC$Document.file_reference;
        tLRPC$TL_inputDocument.file_reference = bArr;
        if (bArr == null) {
            tLRPC$TL_inputDocument.file_reference = new byte[0];
        }
        tLRPC$TL_messages_saveRecentSticker.unsave = false;
        tLRPC$TL_messages_saveRecentSticker.attached = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveRecentSticker, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda270
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$saveRecentSticker$138(obj, tLRPC$TL_messages_saveRecentSticker, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$saveRecentSticker$138(Object obj, TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null || !FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            return;
        }
        getFileRefController().requestReference(obj, tLRPC$TL_messages_saveRecentSticker);
    }

    public void loadChannelParticipants(Long l) {
        loadChannelParticipants(l, null, 32);
    }

    public void loadChannelParticipants(final Long l, final Utilities.Callback<TLRPC$TL_channels_channelParticipants> callback, int i) {
        if (callback == null && (this.loadingFullParticipants.contains(l) || this.loadedFullParticipants.contains(l))) {
            return;
        }
        this.loadingFullParticipants.add(l);
        TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
        tLRPC$TL_channels_getParticipants.channel = getInputChannel(l.longValue());
        tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsRecent();
        tLRPC$TL_channels_getParticipants.offset = 0;
        tLRPC$TL_channels_getParticipants.limit = i;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda167
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadChannelParticipants$140(l, callback, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelParticipants$140(final Long l, final Utilities.Callback callback, final TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda431
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadChannelParticipants$139(tLRPC$TL_error, tLObject, l, callback);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelParticipants$139(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, Long l, Utilities.Callback callback) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants = (TLRPC$TL_channels_channelParticipants) tLObject;
            putUsers(tLRPC$TL_channels_channelParticipants.users, false);
            putChats(tLRPC$TL_channels_channelParticipants.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipants.users, tLRPC$TL_channels_channelParticipants.chats, true, true);
            getMessagesStorage().updateChannelUsers(l.longValue(), tLRPC$TL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(l);
        }
        this.loadingFullParticipants.remove(l);
        if (callback != null) {
            callback.run(tLObject instanceof TLRPC$TL_channels_channelParticipants ? (TLRPC$TL_channels_channelParticipants) tLObject : null);
        }
    }

    public void putChatFull(TLRPC$ChatFull tLRPC$ChatFull) {
        this.fullChats.put(tLRPC$ChatFull.id, tLRPC$ChatFull);
        getTranslateController().updateDialogFull(-tLRPC$ChatFull.id);
    }

    public void processChatInfo(final long j, final TLRPC$ChatFull tLRPC$ChatFull, final ArrayList<TLRPC$User> arrayList, final boolean z, final boolean z2, final boolean z3, final ArrayList<Integer> arrayList2, final HashMap<Integer, MessageObject> hashMap, final int i, final boolean z4) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processChatInfo$141(z, j, z3, z2, tLRPC$ChatFull, arrayList, arrayList2, hashMap, i, z4);
            }
        });
    }

    public /* synthetic */ void lambda$processChatInfo$141(boolean z, long j, boolean z2, boolean z3, TLRPC$ChatFull tLRPC$ChatFull, ArrayList arrayList, ArrayList arrayList2, HashMap hashMap, int i, boolean z4) {
        if (z && j > 0 && !z2 && System.currentTimeMillis() - this.loadedFullChats.get(j, 0L) > 60000) {
            loadFullChat(j, 0, z3);
        }
        if (tLRPC$ChatFull != null) {
            if (this.fullChats.get(j) == null) {
                this.fullChats.put(j, tLRPC$ChatFull);
                getTranslateController().updateDialogFull(-j);
            }
            putUsers(arrayList, z);
            if (tLRPC$ChatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull.stickerset);
            }
            if (tLRPC$ChatFull.emojiset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull.emojiset);
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.valueOf(z2), Boolean.FALSE);
        }
        if (arrayList2 != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(-j), arrayList2, hashMap, Integer.valueOf(i), Boolean.valueOf(z4));
        }
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        loadUserInfo(tLRPC$User, z, i, 0);
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i, int i2) {
        getMessagesStorage().loadUserInfo(tLRPC$User, z, i, i2);
    }

    public void updateUsernameActiveness(TLObject tLObject, String str, boolean z) {
        if (TextUtils.isEmpty(str)) {
            return;
        }
        this.objectsByUsernames.remove(str);
        if (z) {
            this.objectsByUsernames.put(str.toLowerCase(), tLObject);
        }
    }

    public void processUserInfo(final TLRPC$User tLRPC$User, final TLRPC$UserFull tLRPC$UserFull, final boolean z, final boolean z2, final int i, final ArrayList<Integer> arrayList, final HashMap<Integer, MessageObject> hashMap, final int i2, final boolean z3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda169
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUserInfo$142(z, tLRPC$User, i, z2, tLRPC$UserFull, arrayList, hashMap, i2, z3);
            }
        });
    }

    public /* synthetic */ void lambda$processUserInfo$142(boolean z, TLRPC$User tLRPC$User, int i, boolean z2, TLRPC$UserFull tLRPC$UserFull, ArrayList arrayList, HashMap hashMap, int i2, boolean z3) {
        if (z && System.currentTimeMillis() - this.loadedFullUsers.get(tLRPC$User.id, 0L) > 60000) {
            loadFullUser(tLRPC$User, i, z2);
        }
        if (tLRPC$UserFull != null) {
            if (this.fullUsers.get(tLRPC$User.id) == null) {
                this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
                getTranslateController().updateDialogFull(tLRPC$User.id);
                int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
                if (tLRPC$UserFull.blocked) {
                    if (indexOfKey < 0) {
                        this.blockePeers.put(tLRPC$User.id, 1);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                    }
                } else if (indexOfKey >= 0) {
                    this.blockePeers.removeAt(indexOfKey);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        }
        if (arrayList != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(tLRPC$User.id), arrayList, hashMap, Integer.valueOf(i2), Boolean.valueOf(z3));
        }
    }

    public void updateTimerProc() {
        int i;
        ArrayList arrayList;
        int i2;
        int i3;
        long currentTimeMillis = System.currentTimeMillis();
        int i4 = 0;
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (!this.ignoreSetOnline && getConnectionsManager().getPauseTime() == 0 && ApplicationLoader.isScreenOn && !ApplicationLoader.mainInterfacePausedStageQueue) {
                if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                    this.statusSettingState = 1;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus = new TLRPC$TL_account_updateStatus();
                    tLRPC$TL_account_updateStatus.offline = false;
                    this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda132
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$143(tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } else if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                this.statusSettingState = 2;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus2 = new TLRPC$TL_account_updateStatus();
                tLRPC$TL_account_updateStatus2.offline = true;
                this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda133
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$updateTimerProc$144(tLObject, tLRPC$TL_error);
                    }
                });
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int i5 = 0; i5 < this.updatesQueueChannels.size(); i5++) {
                    long keyAt = this.updatesQueueChannels.keyAt(i5);
                    if (Math.abs(currentTimeMillis - this.updatesStartWaitTimeChannels.valueAt(i5)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(keyAt, 0);
                    }
                }
            }
            for (int i6 = 0; i6 < 3; i6++) {
                if (getUpdatesStartTime(i6) != 0 && Math.abs(currentTimeMillis - getUpdatesStartTime(i6)) >= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(i6 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(i6, 0);
                }
            }
        }
        final int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i7 = 0;
                while (i7 < this.channelViewsToSend.size()) {
                    final long keyAt2 = this.channelViewsToSend.keyAt(i7);
                    final TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews = new TLRPC$TL_messages_getMessagesViews();
                    tLRPC$TL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tLRPC$TL_messages_getMessagesViews.id = this.channelViewsToSend.valueAt(i7);
                    tLRPC$TL_messages_getMessagesViews.increment = i7 == 0;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesViews, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda134
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$146(keyAt2, tLRPC$TL_messages_getMessagesViews, tLObject, tLRPC$TL_error);
                        }
                    });
                    i7++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda135
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$148(currentTime);
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            for (Map.Entry<Long, Integer> entry : this.onlinePrivacy.entrySet()) {
                if (entry.getValue().intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(entry.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Long) it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda136
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$149();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i8 = 0;
            while (i8 < this.shortPollChannels.size()) {
                long keyAt3 = this.shortPollChannels.keyAt(i8);
                if (this.shortPollChannels.valueAt(i8) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i8--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i8++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i9 = 0;
            while (i9 < this.shortPollOnlines.size()) {
                final long keyAt4 = this.shortPollOnlines.keyAt(i9);
                if (this.shortPollOnlines.valueAt(i9) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i9--;
                    }
                    TLRPC$TL_messages_getOnlines tLRPC$TL_messages_getOnlines = new TLRPC$TL_messages_getOnlines();
                    tLRPC$TL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getOnlines, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda137
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$151(keyAt4, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                i9++;
            }
        }
        if (this.printingUsers.isEmpty() && this.lastPrintingStringCount == this.printingUsers.size()) {
            i = 1;
        } else {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i10 = 0;
            boolean z = false;
            while (i10 < arrayList3.size()) {
                Long l = (Long) arrayList3.get(i10);
                ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(l);
                if (concurrentHashMap != null) {
                    ArrayList arrayList4 = new ArrayList(concurrentHashMap.keySet());
                    int i11 = 0;
                    while (i11 < arrayList4.size()) {
                        Integer num = (Integer) arrayList4.get(i11);
                        ArrayList<PrintingUser> arrayList5 = concurrentHashMap.get(num);
                        if (arrayList5 != null) {
                            while (i4 < arrayList5.size()) {
                                PrintingUser printingUser = arrayList5.get(i4);
                                Long l2 = l;
                                ArrayList arrayList6 = arrayList3;
                                int i12 = i10;
                                if (printingUser.lastTime + (printingUser.action instanceof TLRPC$TL_sendMessageGamePlayAction ? 30000 : 5900) < currentTimeMillis) {
                                    arrayList5.remove(printingUser);
                                    i4--;
                                    i3 = 1;
                                    z = true;
                                } else {
                                    i3 = 1;
                                }
                                i4 += i3;
                                l = l2;
                                arrayList3 = arrayList6;
                                i10 = i12;
                            }
                        }
                        ArrayList arrayList7 = arrayList3;
                        int i13 = i10;
                        Long l3 = l;
                        if (arrayList5 == null || arrayList5.isEmpty()) {
                            concurrentHashMap.remove(num);
                            arrayList4.remove(i11);
                            i11--;
                        }
                        i11++;
                        l = l3;
                        arrayList3 = arrayList7;
                        i10 = i13;
                        i4 = 0;
                    }
                }
                ArrayList arrayList8 = arrayList3;
                int i14 = i10;
                Long l4 = l;
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(l4);
                    arrayList = arrayList8;
                    arrayList.remove(i14);
                    i2 = i14 - 1;
                } else {
                    arrayList = arrayList8;
                    i2 = i14;
                }
                i10 = i2 + 1;
                arrayList3 = arrayList;
                i4 = 0;
            }
            i = 1;
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda138
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$152();
                    }
                });
            }
        }
        if (Theme.selectedAutoNightType == i && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            PushListenerController.sendRegistrationToServer(SharedConfig.pushType, SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkPromoInfo$155(false);
        checkTosUpdate();
    }

    public /* synthetic */ void lambda$updateTimerProc$143(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$144(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$146(long j, TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            final TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews = (TLRPC$TL_messages_messageViews) tLObject;
            final LongSparseArray<SparseIntArray> longSparseArray = new LongSparseArray<>();
            final LongSparseArray<SparseIntArray> longSparseArray2 = new LongSparseArray<>();
            final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3 = new LongSparseArray<>();
            SparseIntArray sparseIntArray = longSparseArray.get(j);
            SparseIntArray sparseIntArray2 = longSparseArray2.get(j);
            SparseArray<TLRPC$MessageReplies> sparseArray = longSparseArray3.get(j);
            for (int i = 0; i < tLRPC$TL_messages_getMessagesViews.id.size() && i < tLRPC$TL_messages_messageViews.views.size(); i++) {
                TLRPC$TL_messageViews tLRPC$TL_messageViews = tLRPC$TL_messages_messageViews.views.get(i);
                if ((1 & tLRPC$TL_messageViews.flags) != 0) {
                    if (sparseIntArray == null) {
                        sparseIntArray = new SparseIntArray();
                        longSparseArray.put(j, sparseIntArray);
                    }
                    sparseIntArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.views);
                }
                if ((tLRPC$TL_messageViews.flags & 2) != 0) {
                    if (sparseIntArray2 == null) {
                        sparseIntArray2 = new SparseIntArray();
                        longSparseArray2.put(j, sparseIntArray2);
                    }
                    sparseIntArray2.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.forwards);
                }
                if ((tLRPC$TL_messageViews.flags & 4) != 0) {
                    if (sparseArray == null) {
                        sparseArray = new SparseArray<>();
                        longSparseArray3.put(j, sparseArray);
                    }
                    sparseArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.replies);
                }
            }
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_messageViews.users, tLRPC$TL_messages_messageViews.chats, true, true);
            getMessagesStorage().putChannelViews(longSparseArray, longSparseArray2, longSparseArray3, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda225
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$145(tLRPC$TL_messages_messageViews, longSparseArray, longSparseArray2, longSparseArray3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$145(TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3) {
        putUsers(tLRPC$TL_messages_messageViews.users, false);
        putChats(tLRPC$TL_messages_messageViews.chats, false);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray, longSparseArray2, longSparseArray3, Boolean.FALSE);
    }

    /* JADX WARN: Removed duplicated region for block: B:69:0x0064  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0076  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$updateTimerProc$148(int i) {
        int i2;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.pollsToCheck.size();
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        int i4 = 0;
        while (i4 < size) {
            SparseArray<MessageObject> valueAt = this.pollsToCheck.valueAt(i4);
            if (valueAt != null) {
                int size2 = valueAt.size();
                int i5 = 0;
                while (true) {
                    int i6 = 1000;
                    if (i5 >= size2) {
                        break;
                    }
                    MessageObject valueAt2 = valueAt.valueAt(i5);
                    TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) valueAt2.messageOwner.media).poll;
                    int i7 = tLRPC$Poll.close_date;
                    final boolean z = (i7 == 0 || tLRPC$Poll.closed) ? false : true;
                    if (z) {
                        if (i7 > i) {
                            i3 = Math.min(i3, i7 - i);
                        } else {
                            i2 = i4;
                            int i8 = size2;
                            if (Math.abs(elapsedRealtime - valueAt2.pollLastCheckTime) >= i6) {
                                if (!valueAt2.pollVisibleOnScreen && !z) {
                                    valueAt.remove(valueAt2.getId());
                                    size2 = i8 - 1;
                                    i5--;
                                    i5++;
                                    i4 = i2;
                                }
                            } else {
                                valueAt2.pollLastCheckTime = elapsedRealtime;
                                TLRPC$TL_messages_getPollResults tLRPC$TL_messages_getPollResults = new TLRPC$TL_messages_getPollResults();
                                tLRPC$TL_messages_getPollResults.peer = getInputPeer(valueAt2.getDialogId());
                                tLRPC$TL_messages_getPollResults.msg_id = valueAt2.getId();
                                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPollResults, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda313
                                    @Override // org.telegram.tgnet.RequestDelegate
                                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                        MessagesController.this.lambda$updateTimerProc$147(z, tLObject, tLRPC$TL_error);
                                    }
                                });
                            }
                            size2 = i8;
                            i5++;
                            i4 = i2;
                        }
                    }
                    i2 = i4;
                    i6 = 30000;
                    int i82 = size2;
                    if (Math.abs(elapsedRealtime - valueAt2.pollLastCheckTime) >= i6) {
                    }
                    size2 = i82;
                    i5++;
                    i4 = i2;
                }
                int i9 = i4;
                if (i3 < 5) {
                    this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
                }
                if (valueAt.size() == 0) {
                    LongSparseArray<SparseArray<MessageObject>> longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(i9));
                    size--;
                    i4 = i9 - 1;
                } else {
                    i4 = i9;
                }
            }
            i4++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    public /* synthetic */ void lambda$updateTimerProc$147(boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Poll tLRPC$Poll;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (z) {
                for (int i = 0; i < tLRPC$Updates.updates.size(); i++) {
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if ((tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) && (tLRPC$Poll = ((TLRPC$TL_updateMessagePoll) tLRPC$Update).poll) != null && !tLRPC$Poll.closed) {
                        this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$149() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public /* synthetic */ void lambda$updateTimerProc$151(final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            final TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines = (TLRPC$TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(j, tLRPC$TL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda200
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateTimerProc$150(j, tLRPC$TL_chatOnlines);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$150(long j, TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatOnlineCountDidLoad, Long.valueOf(j), Integer.valueOf(tLRPC$TL_chatOnlines.onlines));
    }

    public /* synthetic */ void lambda$updateTimerProc$152() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime > getConnectionsManager().getCurrentTime() || this.checkingTosUpdate || !getUserConfig().isClientActivated()) {
            return;
        }
        this.checkingTosUpdate = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_help_getTermsOfServiceUpdate
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$help_TermsOfServiceUpdate.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(749019089);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda269
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkTosUpdate$154(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkTosUpdate$154(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC$TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdate) {
            final TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate = (TLRPC$TL_help_termsOfServiceUpdate) tLObject;
            this.nextTosCheckTime = tLRPC$TL_help_termsOfServiceUpdate.expires;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda166
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkTosUpdate$153(tLRPC$TL_help_termsOfServiceUpdate);
                }
            });
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    public /* synthetic */ void lambda$checkTosUpdate$153(TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needShowAlert, 4, tLRPC$TL_help_termsOfServiceUpdate.terms_of_service);
    }

    public void checkPromoInfo(final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda218
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkPromoInfo$155(z);
            }
        });
    }

    /* renamed from: checkPromoInfoInternal */
    public void lambda$checkPromoInfo$155(boolean z) {
        String str;
        boolean z2 = false;
        if (z && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((z || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences globalMainSettings = getGlobalMainSettings();
            globalMainSettings.getBoolean("proxy_enabled", false);
            final String string = globalMainSettings.getString("proxy_ip", "");
            final String string2 = globalMainSettings.getString("proxy_secret", "");
            if (this.promoDialogId != 0 && this.promoDialogType == PROMO_TYPE_PROXY && (str = this.proxyDialogAddress) != null) {
                if (!str.equals(string + string2)) {
                    z2 = true;
                }
            }
            final int i = this.lastCheckPromoId + 1;
            this.lastCheckPromoId = i;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_help_getPromoData
                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i2, boolean z3) {
                    return TLRPC$help_PromoData.TLdeserialize(abstractSerializedData, i2, z3);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(-1063816159);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda414
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkPromoInfoInternal$160(i, string, string2, tLObject, tLRPC$TL_error);
                }
            });
            if (z2) {
                this.promoDialogId = 0L;
                this.proxyDialogAddress = null;
                this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda59(this));
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:98:0x0065, code lost:
        r2 = false;
     */
    /* JADX WARN: Removed duplicated region for block: B:114:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x00a2  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x00f7  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0100  */
    /* JADX WARN: Removed duplicated region for block: B:126:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0111  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0130  */
    /* JADX WARN: Removed duplicated region for block: B:139:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$checkPromoInfoInternal$160(final int i, String str, String str2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final long j;
        boolean z;
        boolean z2;
        String str3;
        String str4;
        boolean z3;
        if (i != this.lastCheckPromoId) {
            return;
        }
        if (tLObject instanceof TLRPC$TL_help_promoDataEmpty) {
            this.nextPromoInfoCheckTime = ((TLRPC$TL_help_promoDataEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_promoData) {
            final TLRPC$TL_help_promoData tLRPC$TL_help_promoData = (TLRPC$TL_help_promoData) tLObject;
            TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
            long j2 = tLRPC$Peer.user_id;
            if (j2 == 0) {
                long j3 = tLRPC$Peer.chat_id;
                if (j3 != 0) {
                    long j4 = -j3;
                    int i2 = 0;
                    while (true) {
                        if (i2 >= tLRPC$TL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i2);
                        if (tLRPC$Chat.id != tLRPC$TL_help_promoData.peer.chat_id) {
                            i2++;
                        } else if (tLRPC$Chat.kicked || tLRPC$Chat.restricted) {
                            z2 = true;
                        }
                    }
                    z = z2;
                    j = j4;
                } else {
                    long j5 = -tLRPC$Peer.channel_id;
                    int i3 = 0;
                    while (true) {
                        if (i3 >= tLRPC$TL_help_promoData.chats.size()) {
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat2 = tLRPC$TL_help_promoData.chats.get(i3);
                        if (tLRPC$Chat2.id != tLRPC$TL_help_promoData.peer.channel_id) {
                            i3++;
                        } else if (tLRPC$Chat2.kicked || tLRPC$Chat2.restricted) {
                            j = j5;
                            z = true;
                        }
                    }
                    j = j5;
                }
                this.promoDialogId = j;
                if (!tLRPC$TL_help_promoData.proxy) {
                    this.promoDialogType = PROMO_TYPE_PROXY;
                } else if (!TextUtils.isEmpty(tLRPC$TL_help_promoData.psa_type)) {
                    this.promoDialogType = PROMO_TYPE_PSA;
                    this.promoPsaType = tLRPC$TL_help_promoData.psa_type;
                } else {
                    this.promoDialogType = PROMO_TYPE_OTHER;
                }
                this.proxyDialogAddress = str + str2;
                this.promoPsaMessage = tLRPC$TL_help_promoData.psa_message;
                this.nextPromoInfoCheckTime = tLRPC$TL_help_promoData.expires;
                SharedPreferences.Editor edit = getGlobalMainSettings().edit();
                edit.putLong("proxy_dialog", this.promoDialogId);
                edit.putString("proxyDialogAddress", this.proxyDialogAddress);
                edit.putInt("promo_dialog_type", this.promoDialogType);
                str3 = this.promoPsaMessage;
                if (str3 == null) {
                    edit.putString("promo_psa_message", str3);
                } else {
                    edit.remove("promo_psa_message");
                }
                str4 = this.promoPsaType;
                if (str4 == null) {
                    edit.putString("promo_psa_type", str4);
                } else {
                    edit.remove("promo_psa_type");
                }
                edit.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
                edit.commit();
                if (!z) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda58
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$checkPromoInfoInternal$159(j, tLRPC$TL_help_promoData, i);
                        }
                    });
                }
                z3 = z;
                if (z3) {
                    this.promoDialogId = 0L;
                    getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                    this.checkingPromoInfoRequestId = 0;
                    this.checkingPromoInfo = false;
                    AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda59(this));
                    return;
                }
                return;
            }
            j = j2;
            z = false;
            this.promoDialogId = j;
            if (!tLRPC$TL_help_promoData.proxy) {
            }
            this.proxyDialogAddress = str + str2;
            this.promoPsaMessage = tLRPC$TL_help_promoData.psa_message;
            this.nextPromoInfoCheckTime = tLRPC$TL_help_promoData.expires;
            SharedPreferences.Editor edit2 = getGlobalMainSettings().edit();
            edit2.putLong("proxy_dialog", this.promoDialogId);
            edit2.putString("proxyDialogAddress", this.proxyDialogAddress);
            edit2.putInt("promo_dialog_type", this.promoDialogType);
            str3 = this.promoPsaMessage;
            if (str3 == null) {
            }
            str4 = this.promoPsaType;
            if (str4 == null) {
            }
            edit2.putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime);
            edit2.commit();
            if (!z) {
            }
            z3 = z;
            if (z3) {
            }
        } else {
            this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        z3 = true;
        if (z3) {
        }
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$159(final long j, final TLRPC$TL_help_promoData tLRPC$TL_help_promoData, final int i) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null && j != tLRPC$Dialog.id) {
            removePromoDialog();
        }
        TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
        this.promoDialog = tLRPC$Dialog2;
        if (tLRPC$Dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            return;
        }
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int i2 = 0; i2 < tLRPC$TL_help_promoData.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$TL_help_promoData.users.get(i2);
            longSparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$TL_help_promoData.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i3);
            longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
        if (tLRPC$Peer.user_id != 0) {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerUser;
            long j2 = tLRPC$TL_help_promoData.peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User tLRPC$User2 = (TLRPC$User) longSparseArray.get(j2);
            if (tLRPC$User2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$User2.access_hash;
            }
        } else if (tLRPC$Peer.chat_id != 0) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChat;
            long j3 = tLRPC$TL_help_promoData.peer.chat_id;
            tLRPC$TL_inputPeerChat.chat_id = j3;
            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray2.get(j3);
            if (tLRPC$Chat2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat2.access_hash;
            }
        } else {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
            long j4 = tLRPC$TL_help_promoData.peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j4;
            TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray2.get(j4);
            if (tLRPC$Chat3 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat3.access_hash;
            }
        }
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda279
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkPromoInfoInternal$158(i, tLRPC$TL_help_promoData, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$158(int i, final TLRPC$TL_help_promoData tLRPC$TL_help_promoData, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (i != this.lastCheckPromoId) {
            return;
        }
        this.checkingPromoInfoRequestId = 0;
        final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
        if (tLRPC$TL_messages_peerDialogs != null && !tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
            getMessagesStorage().putUsersAndChats(tLRPC$TL_help_promoData.users, tLRPC$TL_help_promoData.chats, true, true);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
            tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
            tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
            tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
            getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda465
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$156(tLRPC$TL_help_promoData, tLRPC$TL_messages_peerDialogs, j);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda466
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPromoInfoInternal$157();
                }
            });
        }
        this.checkingPromoInfo = false;
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$156(TLRPC$TL_help_promoData tLRPC$TL_help_promoData, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, long j) {
        putUsers(tLRPC$TL_help_promoData.users, false);
        putChats(tLRPC$TL_help_promoData.chats, false);
        putUsers(tLRPC$TL_messages_peerDialogs.users, false);
        putChats(tLRPC$TL_messages_peerDialogs.chats, false);
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j2 = tLRPC$Dialog.id;
            if (j2 < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j2));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
        }
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = tLRPC$Dialog2;
        tLRPC$Dialog2.id = j;
        tLRPC$Dialog2.folder_id = 0;
        if (DialogObject.isChannel(tLRPC$Dialog2)) {
            LongSparseIntArray longSparseIntArray = this.channelsPts;
            TLRPC$Dialog tLRPC$Dialog3 = this.promoDialog;
            longSparseIntArray.put(-tLRPC$Dialog3.id, tLRPC$Dialog3.pts);
        }
        Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num == null) {
            num = r2;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max((num2 != null ? num2 : 0).intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tLRPC$TL_messages_peerDialogs.messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i2);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_messages_peerDialogs.messages.get(0), (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, false, true);
            ArrayList<MessageObject> arrayList = this.dialogMessage.get(j);
            if (arrayList == null) {
                arrayList = new ArrayList<>(1);
            }
            if (arrayList.size() > 0 && arrayList.get(0) != null && arrayList.get(0).hasValidGroupId() && arrayList.get(0).getGroupIdForUse() != messageObject.getGroupIdForUse()) {
                arrayList.clear();
            }
            arrayList.add(messageObject);
            this.dialogMessage.put(j, arrayList);
            TLRPC$Dialog tLRPC$Dialog4 = this.promoDialog;
            if (tLRPC$Dialog4.last_message_date == 0) {
                tLRPC$Dialog4.last_message_date = messageObject.messageOwner.date;
            }
            getTranslateController().checkDialogMessage(j);
        }
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public /* synthetic */ void lambda$checkPromoInfoInternal$157() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (j < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public void removePromoDialog() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog == null) {
            return;
        }
        long j = tLRPC$Dialog.id;
        if (j < 0) {
            TLRPC$Chat chat = getChat(Long.valueOf(-j));
            if (ChatObject.isNotInChat(chat) || chat.restricted) {
                removeDialog(this.promoDialog);
            }
        } else {
            removeDialog(tLRPC$Dialog);
        }
        this.promoDialog = null;
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public boolean isPromoDialog(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        return tLRPC$Dialog != null && tLRPC$Dialog.id == j && (!z || this.isLeftPromoChannel);
    }

    private String getUserNameForTyping(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return "";
        }
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            return AndroidUtilities.removeDiacritics(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        return (str2 == null || str2.length() <= 0) ? "" : AndroidUtilities.removeDiacritics(tLRPC$User.last_name);
    }

    private void updatePrintingStrings() {
        Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it;
        Iterator<Map.Entry<Integer, ArrayList<PrintingUser>>> it2;
        String string;
        int i;
        int i2;
        int i3;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it3 = this.printingUsers.entrySet().iterator();
        while (it3.hasNext()) {
            Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> next = it3.next();
            Long key = next.getKey();
            boolean isEncryptedDialog = DialogObject.isEncryptedDialog(key.longValue());
            Iterator<Map.Entry<Integer, ArrayList<PrintingUser>>> it4 = next.getValue().entrySet().iterator();
            while (it4.hasNext()) {
                Map.Entry<Integer, ArrayList<PrintingUser>> next2 = it4.next();
                Integer key2 = next2.getKey();
                ArrayList<PrintingUser> value = next2.getValue();
                LongSparseArray longSparseArray3 = new LongSparseArray();
                LongSparseArray longSparseArray4 = new LongSparseArray();
                longSparseArray.put(key.longValue(), longSparseArray3);
                longSparseArray2.put(key.longValue(), longSparseArray4);
                if (key.longValue() > 0 || isEncryptedDialog || value.size() == 1) {
                    it = it3;
                    it2 = it4;
                    PrintingUser printingUser = value.get(0);
                    TLRPC$User user = getUser(Long.valueOf(printingUser.userId));
                    if (user != null) {
                        boolean z = key.longValue() < 0 && !isEncryptedDialog;
                        TLRPC$SendMessageAction tLRPC$SendMessageAction = printingUser.action;
                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordAudioAction) {
                            if (z) {
                                string = LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user));
                            } else {
                                string = LocaleController.getString("RecordingAudio", R.string.RecordingAudio);
                            }
                            i = 1;
                        } else {
                            if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordRoundAction) {
                                if (z) {
                                    string = LocaleController.formatString("IsRecordingRound", R.string.IsRecordingRound, getUserNameForTyping(user));
                                } else {
                                    string = LocaleController.getString("RecordingRound", R.string.RecordingRound);
                                }
                            } else if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadRoundAction)) {
                                if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadAudioAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsSendingAudio", R.string.IsSendingAudio, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SendingAudio", R.string.SendingAudio);
                                    }
                                } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadVideoAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus);
                                    }
                                } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordVideoAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsRecordingVideo", R.string.IsRecordingVideo, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("RecordingVideoStatus", R.string.RecordingVideoStatus);
                                    }
                                } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadDocumentAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsSendingFile", R.string.IsSendingFile, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SendingFile", R.string.SendingFile);
                                    }
                                } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadPhotoAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsSendingPhoto", R.string.IsSendingPhoto, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SendingPhoto", R.string.SendingPhoto);
                                    }
                                } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGamePlayAction) {
                                    if (z) {
                                        string = LocaleController.formatString("IsSendingGame", R.string.IsSendingGame, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SendingGame", R.string.SendingGame);
                                    }
                                    i = 3;
                                } else {
                                    if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGeoLocationAction) {
                                        if (z) {
                                            string = LocaleController.formatString("IsSelectingLocation", R.string.IsSelectingLocation, getUserNameForTyping(user));
                                        } else {
                                            string = LocaleController.getString("SelectingLocation", R.string.SelectingLocation);
                                        }
                                    } else if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseContactAction)) {
                                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteractionSeen) {
                                            String str = ((TLRPC$TL_sendMessageEmojiInteractionSeen) tLRPC$SendMessageAction).emoticon;
                                            if (z) {
                                                string = LocaleController.formatString("IsEnjoyngAnimations", R.string.IsEnjoyngAnimations, getUserNameForTyping(user), str);
                                            } else {
                                                string = LocaleController.formatString("EnjoyngAnimations", R.string.EnjoyngAnimations, str);
                                            }
                                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseStickerAction) {
                                            if (z) {
                                                string = LocaleController.formatString("IsChoosingSticker", R.string.IsChoosingSticker, getUserNameForTyping(user));
                                            } else {
                                                string = LocaleController.getString("ChoosingSticker", R.string.ChoosingSticker);
                                            }
                                        } else if (z) {
                                            string = LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, getUserNameForTyping(user));
                                        } else {
                                            string = LocaleController.getString("Typing", R.string.Typing);
                                        }
                                        i = 5;
                                    } else if (z) {
                                        string = LocaleController.formatString("IsSelectingContact", R.string.IsSelectingContact, getUserNameForTyping(user));
                                    } else {
                                        string = LocaleController.getString("SelectingContact", R.string.SelectingContact);
                                    }
                                    i = 0;
                                }
                                i = 2;
                            } else if (z) {
                                string = LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, getUserNameForTyping(user));
                            } else {
                                string = LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus);
                            }
                            i = 4;
                        }
                        i2 = i;
                    } else {
                        it3 = it;
                        it4 = it2;
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    Iterator<PrintingUser> it5 = value.iterator();
                    int i4 = 0;
                    while (true) {
                        if (!it5.hasNext()) {
                            it = it3;
                            it2 = it4;
                            i3 = i4;
                            break;
                        }
                        it = it3;
                        it2 = it4;
                        TLRPC$User user2 = getUser(Long.valueOf(it5.next().userId));
                        if (user2 != null) {
                            if (sb.length() != 0) {
                                sb.append(", ");
                            }
                            sb.append(getUserNameForTyping(user2));
                            i4++;
                        }
                        i3 = i4;
                        if (i3 == 2) {
                            break;
                        }
                        i4 = i3;
                        it3 = it;
                        it4 = it2;
                    }
                    if (sb.length() != 0) {
                        if (i3 == 1) {
                            string = LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, sb.toString());
                        } else if (value.size() > 2) {
                            try {
                                string = String.format(LocaleController.getPluralString("AndMoreTypingGroup", value.size() - 2), sb.toString(), Integer.valueOf(value.size() - 2));
                            } catch (Exception unused) {
                                string = "LOC_ERR: AndMoreTypingGroup";
                            }
                        } else {
                            int i5 = R.string.AreTypingGroup;
                            String sb2 = sb.toString();
                            i2 = 0;
                            string = LocaleController.formatString("AreTypingGroup", i5, sb2);
                        }
                        i2 = 0;
                    } else {
                        i2 = 0;
                        string = null;
                    }
                }
                if (string != null) {
                    Paint paint = Theme.dialogs_messageNamePaint;
                    if (paint == null) {
                        paint = new Paint();
                        paint.setTypeface(AndroidUtilities.bold());
                        paint.setTextSize(AndroidUtilities.dp(14.0f));
                    }
                    longSparseArray3.put(key2.intValue(), Emoji.replaceEmoji(string, paint.getFontMetricsInt(), false));
                    longSparseArray4.put(key2.intValue(), Integer.valueOf(i2));
                }
                it3 = it;
                it4 = it2;
            }
        }
        this.lastPrintingStringCount = longSparseArray.size();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda54
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$161(longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$updatePrintingStrings$161(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    /* renamed from: cancelTyping */
    public void lambda$sendTyping$164(int i, long j, long j2) {
        LongSparseArray<LongSparseArray<Boolean>> longSparseArray;
        LongSparseArray<Boolean> longSparseArray2;
        if (i >= 0) {
            LongSparseArray<LongSparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i >= longSparseArrayArr.length || (longSparseArray = longSparseArrayArr[i]) == null || (longSparseArray2 = longSparseArray.get(j)) == null) {
                return;
            }
            longSparseArray2.remove(j2);
            if (longSparseArray2.size() == 0) {
                longSparseArray.remove(j);
            }
        }
    }

    public boolean sendTyping(long j, long j2, int i, int i2) {
        return sendTyping(j, j2, i, null, i2);
    }

    public boolean sendTyping(final long j, final long j2, final int i, String str, int i2) {
        TLRPC$Chat chat;
        if (i < 0 || i >= this.sendingTypings.length || j == 0) {
            return false;
        }
        long clientUserId = UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId();
        if (j == clientUserId) {
            return false;
        }
        if (j < 0) {
            long j3 = -j;
            if (ChatObject.getSendAsPeerId(getChat(Long.valueOf(j3)), getChatFull(j3)) != clientUserId) {
                return false;
            }
        } else {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                TLRPC$UserStatus tLRPC$UserStatus = user.status;
                if (tLRPC$UserStatus != null && tLRPC$UserStatus.expires != -100 && !this.onlinePrivacy.containsKey(Long.valueOf(user.id))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        }
        LongSparseArray<LongSparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray<LongSparseArray<Boolean>> longSparseArray = longSparseArrayArr[i];
        if (longSparseArray == null) {
            longSparseArray = new LongSparseArray<>();
            longSparseArrayArr[i] = longSparseArray;
        }
        LongSparseArray<Boolean> longSparseArray2 = longSparseArray.get(j);
        if (longSparseArray2 == null) {
            longSparseArray2 = new LongSparseArray<>();
            longSparseArray.put(j, longSparseArray2);
        }
        if (longSparseArray2.get(j2) != null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$TL_messages_setTyping tLRPC$TL_messages_setTyping = new TLRPC$TL_messages_setTyping();
            if (j2 != 0) {
                tLRPC$TL_messages_setTyping.top_msg_id = (int) j2;
                tLRPC$TL_messages_setTyping.flags |= 1;
            }
            TLRPC$InputPeer inputPeer = getInputPeer(j);
            tLRPC$TL_messages_setTyping.peer = inputPeer;
            if (((inputPeer instanceof TLRPC$TL_inputPeerChannel) && ((chat = getChat(Long.valueOf(inputPeer.channel_id))) == null || !chat.megagroup)) || tLRPC$TL_messages_setTyping.peer == null) {
                return false;
            }
            if (i == 0) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageTypingAction();
            } else if (i == 1) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordAudioAction();
            } else if (i == 2) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageCancelAction();
            } else if (i == 3) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadDocumentAction();
            } else if (i == 4) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadPhotoAction();
            } else if (i == 5) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadVideoAction();
            } else if (i == 6) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageGamePlayAction();
            } else if (i == 7) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordRoundAction();
            } else if (i == 8) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadRoundAction();
            } else if (i == 9) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadAudioAction();
            } else if (i == 10) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageChooseStickerAction();
            } else if (i == 11) {
                TLRPC$TL_sendMessageEmojiInteractionSeen tLRPC$TL_sendMessageEmojiInteractionSeen = new TLRPC$TL_sendMessageEmojiInteractionSeen();
                tLRPC$TL_sendMessageEmojiInteractionSeen.emoticon = str;
                tLRPC$TL_messages_setTyping.action = tLRPC$TL_sendMessageEmojiInteractionSeen;
            }
            longSparseArray2.put(j2, Boolean.TRUE);
            int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_setTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda316
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$sendTyping$163(i, j, j2, tLObject, tLRPC$TL_error);
                }
            }, 2);
            if (i2 != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i2);
            }
        } else if (i != 0) {
            return false;
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr != null && bArr.length > 1 && (encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                TLRPC$TL_messages_setEncryptedTyping tLRPC$TL_messages_setEncryptedTyping = new TLRPC$TL_messages_setEncryptedTyping();
                TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                tLRPC$TL_messages_setEncryptedTyping.peer = tLRPC$TL_inputEncryptedChat;
                tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
                tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tLRPC$TL_messages_setEncryptedTyping.typing = true;
                longSparseArray2.put(j2, Boolean.TRUE);
                int sendRequest2 = getConnectionsManager().sendRequest(tLRPC$TL_messages_setEncryptedTyping, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda317
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$sendTyping$165(i, j, j2, tLObject, tLRPC$TL_error);
                    }
                }, 2);
                if (i2 != 0) {
                    getConnectionsManager().bindRequestToGuid(sendRequest2, i2);
                }
            }
        }
        return true;
    }

    public /* synthetic */ void lambda$sendTyping$163(final int i, final long j, final long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda128
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$162(i, j, j2);
            }
        });
    }

    public /* synthetic */ void lambda$sendTyping$165(final int i, final long j, final long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda197
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$sendTyping$164(i, j, j2);
            }
        });
    }

    public void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC$Message> arrayList) {
        int i = 0;
        int i2 = this.deletedHistory.get(j, 0);
        if (i2 == 0) {
            return;
        }
        int size = arrayList.size();
        while (i < size) {
            if (arrayList.get(i).id <= i2) {
                arrayList.remove(i);
                i--;
                size--;
            }
            i++;
        }
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, boolean z3) {
        loadMessages(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, j3, i10, j3 != 0 ? i9 : 0, 0, 0, false, 0, z3);
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, int i11, int i12, boolean z3, int i13, boolean z4) {
        loadMessagesInternal(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, j3, i9, i10, i11, i12, z3, i13, true, true, z4, null, 0L);
    }

    public void loadMessagesInternal(final long j, final long j2, final boolean z, final int i, final int i2, final int i3, boolean z2, final int i4, final int i5, final int i6, final int i7, final int i8, final long j3, final int i9, final int i10, final int i11, final int i12, final boolean z3, final int i13, boolean z4, final boolean z5, final boolean z6, Timer timer, long j4) {
        Timer timer2;
        int i14;
        TLRPC$TL_forumTopic findTopic;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j + " topic_id " + j3 + " count " + i + " max_id " + i2 + " cache " + z2 + " mindate = " + i4 + " guid " + i5 + " load_type " + i6 + " last_message_id " + i7 + " mode " + i8 + " index " + i9 + " firstUnread " + i10 + " unread_count " + i11 + " last_date " + i12 + " queryFromServer " + z3 + " isTopic " + z6);
        }
        if (BuildVars.LOGS_ENABLED && timer == null && i8 == 0) {
            timer2 = new Timer("MessageLoaderLogger dialogId=" + j + " index=" + i9 + " count=" + i);
        } else {
            timer2 = timer;
        }
        if ((j3 == 0 || z6 || i8 == 3 || i8 == 5) && i8 != 2 && (z2 || DialogObject.isEncryptedDialog(j))) {
            getMessagesStorage().getMessages(j, j2, z, i, i2, i3, i4, i5, i6, i8, j3, i9, z5, z6, timer2);
        } else if (i8 == 5) {
            TLRPC$TL_messages_getQuickReplyMessages tLRPC$TL_messages_getQuickReplyMessages = new TLRPC$TL_messages_getQuickReplyMessages();
            tLRPC$TL_messages_getQuickReplyMessages.shortcut_id = (int) j3;
            tLRPC$TL_messages_getQuickReplyMessages.hash = j4;
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getQuickReplyMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda373
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$166(j, j2, i, i2, i3, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLObject, tLRPC$TL_error);
                }
            }), i5);
        } else if (j3 == 0) {
            if (i8 == 2) {
                return;
            }
            if (i8 == 1) {
                TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory = new TLRPC$TL_messages_getScheduledHistory();
                tLRPC$TL_messages_getScheduledHistory.peer = getInputPeer(j);
                tLRPC$TL_messages_getScheduledHistory.hash = j4;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getScheduledHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda376
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$171(i2, i3, j, j2, i, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLObject, tLRPC$TL_error);
                    }
                }), i5);
            } else if (z4 && ((i6 == 3 || i6 == 2) && i7 == 0)) {
                final TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$InputPeer inputPeer = getInputPeer(j);
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda377
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$173(j, j2, z, i, i2, i3, i4, i5, i6, j3, i9, i10, i12, z3, z5, z6, tLRPC$TL_messages_getPeerDialogs, tLObject, tLRPC$TL_error);
                    }
                });
            } else {
                final TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getInputPeer(j);
                if (i6 == 4) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) + 5;
                } else if (i6 == 3) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) / 2;
                } else if (i6 == 1) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) - 1;
                } else if (i6 == 2 && i2 != 0) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i) + 6;
                } else if (j < 0 && i2 != 0) {
                    if (ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                        tLRPC$TL_messages_getHistory.add_offset = -1;
                        tLRPC$TL_messages_getHistory.limit++;
                    }
                    tLRPC$TL_messages_getHistory.limit = i;
                    tLRPC$TL_messages_getHistory.offset_id = i2;
                    tLRPC$TL_messages_getHistory.offset_date = i3;
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda378
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$175(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLRPC$TL_messages_getHistory, tLObject, tLRPC$TL_error);
                        }
                    }), i5);
                }
                tLRPC$TL_messages_getHistory.limit = i;
                tLRPC$TL_messages_getHistory.offset_id = i2;
                tLRPC$TL_messages_getHistory.offset_date = i3;
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda378
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadMessagesInternal$175(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLRPC$TL_messages_getHistory, tLObject, tLRPC$TL_error);
                    }
                }), i5);
            }
        } else if (i8 == 3) {
            final TLRPC$TL_messages_getSavedHistory tLRPC$TL_messages_getSavedHistory = new TLRPC$TL_messages_getSavedHistory();
            tLRPC$TL_messages_getSavedHistory.peer = getInputPeer(j3);
            if (i6 == 4) {
                tLRPC$TL_messages_getSavedHistory.add_offset = (-i) + 5;
            } else if (i6 == 3) {
                tLRPC$TL_messages_getSavedHistory.add_offset = (-i) / 2;
            } else if (i6 == 1) {
                tLRPC$TL_messages_getSavedHistory.add_offset = (-i) - 1;
            } else if (i6 == 2 && i2 != 0) {
                tLRPC$TL_messages_getSavedHistory.add_offset = (-i) + 6;
            } else if (j < 0 && i2 != 0 && ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                tLRPC$TL_messages_getSavedHistory.add_offset = -1;
                tLRPC$TL_messages_getSavedHistory.limit++;
            }
            tLRPC$TL_messages_getSavedHistory.limit = i;
            tLRPC$TL_messages_getSavedHistory.offset_id = i2;
            tLRPC$TL_messages_getSavedHistory.offset_date = i3;
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getSavedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda374
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$168(j, i, i2, i3, j2, i5, i10, i7, i11, i12, i6, i8, j3, i9, z3, i13, z5, z6, tLRPC$TL_messages_getSavedHistory, tLObject, tLRPC$TL_error);
                }
            }), i5);
        } else if (z4 && z6 && i6 == 2 && i7 == 0 && (findTopic = this.topicsController.findTopic(-j, j3)) != null) {
            loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, findTopic.top_message, i8, j3, i9, i10, findTopic.unread_count, i12, z3, findTopic.unread_mentions_count, false, z5, z6, timer2, 0L);
        } else if (i8 != 0) {
        } else {
            final TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getInputPeer(j);
            tLRPC$TL_messages_getReplies.msg_id = (int) j3;
            tLRPC$TL_messages_getReplies.offset_date = i3;
            if (i6 == 4) {
                i14 = i;
                tLRPC$TL_messages_getReplies.add_offset = (-i14) + 5;
            } else {
                i14 = i;
                if (i6 == 3) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i14) / 2;
                } else if (i6 == 1) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i14) - 1;
                } else if (i6 == 2 && i2 != 0) {
                    tLRPC$TL_messages_getReplies.add_offset = (-i14) + 10;
                } else if (j < 0 && i2 != 0) {
                    if (ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                        tLRPC$TL_messages_getReplies.add_offset = -1;
                        tLRPC$TL_messages_getReplies.limit++;
                    }
                    tLRPC$TL_messages_getReplies.limit = i14;
                    tLRPC$TL_messages_getReplies.offset_id = i2;
                    tLRPC$TL_messages_getReplies.hash = j4;
                    System.currentTimeMillis();
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda375
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadMessagesInternal$170(i, i2, i3, i10, i6, j, j2, i5, i7, i11, i12, i8, j3, i9, z3, i13, z5, z6, tLRPC$TL_messages_getReplies, tLObject, tLRPC$TL_error);
                        }
                    }), i5);
                }
            }
            tLRPC$TL_messages_getReplies.limit = i14;
            tLRPC$TL_messages_getReplies.offset_id = i2;
            tLRPC$TL_messages_getReplies.hash = j4;
            System.currentTimeMillis();
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda375
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$170(i, i2, i3, i10, i6, j, j2, i5, i7, i11, i12, i8, j3, i9, z3, i13, z5, z6, tLRPC$TL_messages_getReplies, tLObject, tLRPC$TL_error);
                }
            }), i5);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$166(long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified) {
                return;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i2, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
        } else if (tLRPC$TL_error == null || !"SHORTCUT_INVALID".equals(tLRPC$TL_error.text)) {
        } else {
            processLoadedMessages(new TLRPC$TL_messages_messages(), 0, j, j2, i, i2, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$168(long j, int i, int i2, int i3, long j2, final int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC$TL_messages_getSavedHistory tLRPC$TL_messages_getSavedHistory, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i3 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i2;
            } else {
                int i14 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i3) {
                        i14 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i14;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda221
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$167(i4, tLRPC$TL_messages_getSavedHistory, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$167(int i, TLRPC$TL_messages_getSavedHistory tLRPC$TL_messages_getSavedHistory, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getSavedHistory, tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$loadMessagesInternal$170(int i, int i2, int i3, int i4, int i5, long j, long j2, final int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (i3 != 0) {
                    int i15 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i3) {
                            i15 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    i13 = i15;
                    i14 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
                    return;
                } else if (i4 != 0) {
                    if (i5 == 2 && i2 > 0) {
                        for (int size2 = tLRPC$messages_Messages.messages.size() - 1; size2 >= 0; size2--) {
                            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages.messages.get(size2);
                            int i16 = tLRPC$Message2.id;
                            if (i16 > i4 && !tLRPC$Message2.out) {
                                i13 = i2;
                                i14 = i16;
                                break;
                            }
                        }
                    }
                    i13 = i2;
                    i14 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
                    return;
                }
            }
            i13 = i2;
            i14 = 0;
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i6, i14, i7, i8, i9, i5, false, i10, j3, i11, z, i12, z2, z3, null);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda318
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$169(i6, tLRPC$TL_messages_getReplies, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$169(int i, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getReplies, tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$loadMessagesInternal$171(int i, int i2, long j, long j2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified) {
                return;
            }
            if (i2 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i;
            } else {
                int i14 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i2) {
                        i14 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i14;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i3, i13, i2, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$173(long j, long j2, boolean z, int i, int i2, int i3, int i4, final int i5, int i6, long j3, int i7, int i8, int i9, boolean z2, boolean z3, boolean z4, final TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
                if (tLRPC$Dialog.top_message != 0) {
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                    tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                    tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                    tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                    getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                }
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, tLRPC$Dialog.top_message, 0, j3, i7, i8, tLRPC$Dialog.unread_count, i9, z2, tLRPC$Dialog.unread_mentions_count, false, z3, z4, null, 0L);
            }
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda308
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$172(i5, tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$172(int i, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
    }

    public /* synthetic */ void lambda$loadMessagesInternal$175(long j, int i, int i2, int i3, long j2, final int i4, int i5, int i6, int i7, int i8, int i9, int i10, long j3, int i11, boolean z, int i12, boolean z2, boolean z3, final TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        ArrayList<TLRPC$Message> arrayList;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i3 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i2;
            } else {
                int i14 = tLRPC$messages_Messages.messages.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i3) {
                        i14 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i14;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, i10, j3, i11, z, i12, z2, z3, null);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadMessagesInternal$174(i4, tLRPC$TL_messages_getHistory, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadMessagesInternal$174(int i, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getHistory, tLRPC$TL_error);
    }

    public void reloadWebPages(final long j, HashMap<String, ArrayList<MessageObject>> hashMap, final int i) {
        HashMap<String, ArrayList<MessageObject>> hashMap2;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray;
        boolean z = i == 1;
        boolean z2 = i == 3;
        if (z) {
            hashMap2 = this.reloadingScheduledWebpages;
            longSparseArray = this.reloadingScheduledWebpagesPending;
        } else if (z2) {
            hashMap2 = this.reloadingSavedWebpages;
            longSparseArray = this.reloadingSavedWebpagesPending;
        } else {
            hashMap2 = this.reloadingWebpages;
            longSparseArray = this.reloadingWebpagesPending;
        }
        final HashMap<String, ArrayList<MessageObject>> hashMap3 = hashMap2;
        final LongSparseArray<ArrayList<MessageObject>> longSparseArray2 = longSparseArray;
        for (Map.Entry<String, ArrayList<MessageObject>> entry : hashMap.entrySet()) {
            final String key = entry.getKey();
            ArrayList<MessageObject> value = entry.getValue();
            ArrayList<MessageObject> arrayList = hashMap3.get(key);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                hashMap3.put(key, arrayList);
            }
            arrayList.addAll(value);
            TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
            tLRPC$TL_messages_getWebPagePreview.message = key;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda204
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$reloadWebPages$177(hashMap3, key, longSparseArray2, j, i, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadWebPages$177(final HashMap hashMap, final String str, final LongSparseArray longSparseArray, final long j, final int i, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda146
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadWebPages$176(hashMap, str, tLObject, longSparseArray, j, i);
            }
        });
    }

    public /* synthetic */ void lambda$reloadWebPages$176(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, int i) {
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList == null) {
            return;
        }
        TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
        if (!(tLObject instanceof TLRPC$TL_messageMediaWebPage)) {
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = new TLRPC$TL_webPageEmpty();
                tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
            }
        } else {
            TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject;
            TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
            if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                for (int i3 = 0; i3 < arrayList.size(); i3++) {
                    ((MessageObject) arrayList.get(i3)).messageOwner.media.webpage = tLRPC$TL_messageMediaWebPage.webpage;
                    if (i3 == 0) {
                        ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i3)).messageOwner);
                    }
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i3)).messageOwner);
                }
            } else {
                longSparseArray.put(tLRPC$WebPage.id, arrayList);
            }
        }
        if (tLRPC$TL_messages_messages.messages.isEmpty()) {
            return;
        }
        getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, j, -2, 0, false, i, 0L);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
    }

    /* JADX WARN: Code restructure failed: missing block: B:353:0x01b6, code lost:
        if ((android.os.SystemClock.elapsedRealtime() - r35.lastQuickReplyServerQueryTime.get(r2, java.lang.Long.valueOf(r29)).longValue()) > 60000) goto L280;
     */
    /* JADX WARN: Code restructure failed: missing block: B:354:0x01b8, code lost:
        r1 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:331:0x0126  */
    /* JADX WARN: Removed duplicated region for block: B:339:0x0145 A[LOOP:0: B:337:0x013d->B:339:0x0145, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:343:0x015e A[LOOP:1: B:341:0x0156->B:343:0x015e, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:346:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:351:0x0196  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x037f A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:432:0x038d  */
    /* JADX WARN: Removed duplicated region for block: B:484:0x0483  */
    /* JADX WARN: Removed duplicated region for block: B:485:0x048d  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x0490  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x04ca  */
    /* JADX WARN: Removed duplicated region for block: B:540:0x05e8  */
    /* JADX WARN: Removed duplicated region for block: B:546:0x05ff  */
    /* JADX WARN: Removed duplicated region for block: B:547:0x0630  */
    /* JADX WARN: Removed duplicated region for block: B:549:0x0634  */
    /* JADX WARN: Removed duplicated region for block: B:550:0x063e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processLoadedMessages(final TLRPC$messages_Messages tLRPC$messages_Messages, final int i, final long j, final long j2, final int i2, final int i3, final int i4, final boolean z, final int i5, final int i6, final int i7, final int i8, final int i9, final int i10, final boolean z2, final int i11, final long j3, final int i12, final boolean z3, final int i13, final boolean z4, final boolean z5, final Timer timer) {
        long j4;
        int i14;
        boolean z6;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        int i15;
        int i16;
        long j5;
        int i17;
        boolean z7;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        TLRPC$messages_Messages tLRPC$messages_Messages2;
        int size;
        long j6;
        int i18;
        LongSparseArray longSparseArray5;
        int i19;
        int i20;
        int i21;
        boolean z8;
        boolean z9;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        final long j7;
        LongSparseArray longSparseArray8;
        long j8;
        int i22;
        long j9;
        long calcHash;
        TLRPC$Message tLRPC$Message;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processLoadedMessages size " + tLRPC$messages_Messages.messages.size() + " in chat " + j + " topic_id " + j3 + " count " + i2 + " max_id " + i3 + " cache " + z + " guid " + i5 + " load_type " + i10 + " last_message_id " + i7 + " index " + i12 + " firstUnread " + i6 + " unread_count " + i8 + " last_date " + i9 + " queryFromServer " + z3 + " isTopic " + z5 + " mode " + i11);
        }
        Timer.Task start = Timer.start(timer, "processLoadedMessages");
        long elapsedRealtime = SystemClock.elapsedRealtime();
        if (tLRPC$messages_Messages instanceof TLRPC$TL_messages_channelMessages) {
            long j10 = -j;
            if (i11 == 0 && j3 == 0 && this.channelsPts.get(j10) == 0 && getMessagesStorage().getChannelPtsSync(j10) == 0) {
                this.channelsPts.put(j10, tLRPC$messages_Messages.pts);
                if (this.needShortPollChannels.indexOfKey(j10) >= 0 && this.shortPollChannels.indexOfKey(j10) < 0) {
                    j4 = 0;
                    i14 = 1;
                    getChannelDifference(j10, 2, 0L, null);
                } else {
                    i14 = 1;
                    j4 = 0;
                    getChannelDifference(j10);
                }
                z6 = true;
                if (!z) {
                    ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
                }
                boolean z10 = i4 != 0 && i3 == 0;
                longSparseArray = new LongSparseArray();
                longSparseArray2 = new LongSparseArray();
                for (i15 = 0; i15 < tLRPC$messages_Messages.users.size(); i15++) {
                    TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i15);
                    longSparseArray.put(tLRPC$User.id, tLRPC$User);
                }
                for (i16 = 0; i16 < tLRPC$messages_Messages.chats.size(); i16++) {
                    TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages.chats.get(i16);
                    longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                if (i11 != i14) {
                    z7 = SystemClock.elapsedRealtime() - this.lastScheduledServerQueryTime.get(j, Long.valueOf(j4)).longValue() > 60000;
                    j5 = j3;
                    i17 = 1;
                } else if (i11 == 5) {
                    j5 = j3;
                    i17 = 1;
                } else {
                    j5 = j3;
                    i17 = 1;
                    z7 = i11 != 3 ? false : false;
                }
                if (DialogObject.isEncryptedDialog(j) && z && z7) {
                    if (i11 == i17) {
                        this.lastScheduledServerQueryTime.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
                    } else if (i11 == 5) {
                        this.lastQuickReplyServerQueryTime.put(j5, Long.valueOf(SystemClock.elapsedRealtime()));
                    } else if (i11 == 3) {
                        this.lastSavedServerQueryTime.put(j5, Long.valueOf(SystemClock.elapsedRealtime()));
                    } else if (i11 == 0) {
                        this.lastServerQueryTime.put(j, Long.valueOf(SystemClock.elapsedRealtime()));
                    }
                    if (i11 == i17) {
                        int size2 = tLRPC$messages_Messages.messages.size();
                        j8 = j4;
                        int i23 = 0;
                        while (i23 < size2) {
                            int i24 = size2;
                            int i25 = tLRPC$messages_Messages.messages.get(i23).id;
                            if (i25 >= 0) {
                                j8 = MediaDataController.calcHash(MediaDataController.calcHash(MediaDataController.calcHash(j8, i25), tLRPC$Message.edit_date), tLRPC$Message.date);
                            }
                            i23++;
                            size2 = i24;
                        }
                    } else {
                        if (i11 == 0 || i11 == 3) {
                            int size3 = tLRPC$messages_Messages.messages.size();
                            long j11 = j4;
                            int i26 = 0;
                            while (i26 < size3) {
                                TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages.messages.get(i26);
                                if (tLRPC$Message2.id < 0) {
                                    longSparseArray8 = longSparseArray2;
                                } else {
                                    longSparseArray8 = longSparseArray2;
                                    long calcHash2 = MediaDataController.calcHash(MediaDataController.calcHash(j11, Math.abs(DialogObject.getPeerDialogId(tLRPC$Message2.peer_id))), tLRPC$Message2.id);
                                    if (tLRPC$Message2.pinned) {
                                        calcHash2 = MediaDataController.calcHash(calcHash2, 1L);
                                    }
                                    int i27 = tLRPC$Message2.date;
                                    if ((tLRPC$Message2.flags & LiteMode.FLAG_CHAT_SCALE) != 0) {
                                        i27 = tLRPC$Message2.edit_date;
                                    }
                                    j11 = MediaDataController.calcHash(calcHash2, i27);
                                }
                                i26++;
                                longSparseArray2 = longSparseArray8;
                            }
                            longSparseArray7 = longSparseArray2;
                            j7 = j11;
                        } else if (i11 == 5) {
                            int size4 = tLRPC$messages_Messages.messages.size();
                            j8 = j4;
                            int i28 = 0;
                            while (i28 < size4) {
                                TLRPC$Message tLRPC$Message3 = tLRPC$messages_Messages.messages.get(i28);
                                int i29 = tLRPC$Message3.id;
                                if (i29 < 0) {
                                    i22 = size4;
                                    calcHash = j8;
                                } else {
                                    i22 = size4;
                                    long calcHash3 = MediaDataController.calcHash(j8, i29);
                                    if ((tLRPC$Message3.flags & LiteMode.FLAG_CHAT_SCALE) != 0) {
                                        calcHash = MediaDataController.calcHash(calcHash3, tLRPC$Message3.edit_date);
                                    } else {
                                        j9 = j4;
                                        calcHash = MediaDataController.calcHash(calcHash3, j9);
                                        i28++;
                                        j4 = j9;
                                        j8 = calcHash;
                                        size4 = i22;
                                    }
                                }
                                j9 = j4;
                                i28++;
                                j4 = j9;
                                j8 = calcHash;
                                size4 = i22;
                            }
                        } else {
                            longSparseArray7 = longSparseArray2;
                            j7 = j4;
                        }
                        longSparseArray3 = longSparseArray7;
                        longSparseArray4 = longSparseArray;
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                            }
                        });
                        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                        if (tLRPC$messages_Messages2.messages.isEmpty()) {
                            return;
                        }
                    }
                    j7 = j8;
                    longSparseArray7 = longSparseArray2;
                    longSparseArray3 = longSparseArray7;
                    longSparseArray4 = longSparseArray;
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$processLoadedMessages$178(j, j2, i2, i10, z3, i6, i3, i4, i5, i7, i11, j3, i12, i8, i9, i13, z4, z5, timer, j7);
                        }
                    });
                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                    if (tLRPC$messages_Messages2.messages.isEmpty()) {
                    }
                } else {
                    longSparseArray3 = longSparseArray2;
                    longSparseArray4 = longSparseArray;
                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                }
                size = tLRPC$messages_Messages2.messages.size();
                if (z) {
                    Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                    if (num == null) {
                        j6 = j;
                        z8 = false;
                        num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j6));
                        this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
                    } else {
                        j6 = j;
                        z8 = false;
                    }
                    Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                    if (num2 == null) {
                        z9 = true;
                        num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j6));
                        this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
                    } else {
                        z9 = true;
                    }
                    int i30 = 0;
                    while (i30 < size) {
                        TLRPC$Message tLRPC$Message4 = tLRPC$messages_Messages2.messages.get(i30);
                        if (i11 == 0) {
                            TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message4.action;
                            if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                                longSparseArray6 = longSparseArray4;
                                TLRPC$User tLRPC$User2 = (TLRPC$User) longSparseArray6.get(tLRPC$MessageAction.user_id);
                                if (tLRPC$User2 != null && tLRPC$User2.bot) {
                                    tLRPC$Message4.reply_markup = new TLRPC$TL_replyKeyboardHide();
                                    tLRPC$Message4.flags |= 64;
                                }
                            } else {
                                longSparseArray6 = longSparseArray4;
                            }
                            TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message4.action;
                            if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                                tLRPC$Message4.unread = z8;
                                tLRPC$Message4.media_unread = z8;
                            } else {
                                if (j3 == j4) {
                                    tLRPC$Message4.unread = (tLRPC$Message4.out ? num2 : num).intValue() < tLRPC$Message4.id;
                                } else {
                                    tLRPC$Message4.unread = z9;
                                }
                                z8 = false;
                            }
                        } else {
                            longSparseArray6 = longSparseArray4;
                        }
                        i30++;
                        longSparseArray4 = longSparseArray6;
                    }
                    LongSparseArray longSparseArray9 = longSparseArray4;
                    if (j3 != j4 && !z5) {
                        if (i11 != 3 && i11 != 5) {
                            longSparseArray5 = longSparseArray9;
                            i18 = i11;
                            i19 = 3;
                            if (i18 != i19) {
                                getSavedMessagesController().update(j3, tLRPC$messages_Messages2);
                            }
                        }
                    }
                    i19 = 3;
                    longSparseArray5 = longSparseArray9;
                    i18 = i11;
                    getMessagesStorage().putMessages(tLRPC$messages_Messages, j, i10, i3, z6, i11, j3);
                    if (i18 != i19) {
                    }
                } else {
                    j6 = j;
                    i18 = i11;
                    longSparseArray5 = longSparseArray4;
                    i19 = 3;
                }
                if (z4 && DialogObject.isEncryptedDialog(j)) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda250
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$processLoadedMessages$179(i5, tLRPC$messages_Messages, z, z2, i7);
                        }
                    });
                    return;
                }
                final ArrayList<MessageObject> arrayList = new ArrayList<>();
                final ArrayList arrayList2 = new ArrayList();
                final HashMap hashMap = new HashMap();
                i20 = 0;
                while (i20 < size) {
                    TLRPC$Message tLRPC$Message5 = tLRPC$messages_Messages2.messages.get(i20);
                    tLRPC$Message5.dialog_id = j6;
                    SystemClock.elapsedRealtime();
                    int i31 = size;
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message5, (LongSparseArray<TLRPC$User>) longSparseArray5, (LongSparseArray<TLRPC$Chat>) longSparseArray3, true, false, i18 == i19);
                    messageObject.scheduled = i11 == 1;
                    arrayList.add(messageObject);
                    if (z) {
                        if (tLRPC$Message5.legacy && tLRPC$Message5.layer < 186) {
                            arrayList2.add(Integer.valueOf(tLRPC$Message5.id));
                        } else if ((MessageObject.getMedia(tLRPC$Message5) instanceof TLRPC$TL_messageMediaUnsupported) && MessageObject.getMedia(tLRPC$Message5).bytes != null && (MessageObject.getMedia(tLRPC$Message5).bytes.length == 0 || ((MessageObject.getMedia(tLRPC$Message5).bytes.length == 1 && MessageObject.getMedia(tLRPC$Message5).bytes[0] < 186) || (MessageObject.getMedia(tLRPC$Message5).bytes.length == 4 && Utilities.bytesToInt(MessageObject.getMedia(tLRPC$Message5).bytes) < 186)))) {
                            arrayList2.add(Integer.valueOf(tLRPC$Message5.id));
                        }
                        if (MessageObject.getMedia(tLRPC$Message5) instanceof TLRPC$TL_messageMediaWebPage) {
                            if ((MessageObject.getMedia(tLRPC$Message5).webpage instanceof TLRPC$TL_webPagePending) && MessageObject.getMedia(tLRPC$Message5).webpage.date <= getConnectionsManager().getCurrentTime()) {
                                arrayList2.add(Integer.valueOf(tLRPC$Message5.id));
                            } else if (MessageObject.getMedia(tLRPC$Message5).webpage instanceof TLRPC$TL_webPageUrlPending) {
                                ArrayList arrayList3 = (ArrayList) hashMap.get(MessageObject.getMedia(tLRPC$Message5).webpage.url);
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                    hashMap.put(MessageObject.getMedia(tLRPC$Message5).webpage.url, arrayList3);
                                }
                                arrayList3.add(messageObject);
                            }
                        }
                    }
                    i20++;
                    tLRPC$messages_Messages2 = tLRPC$messages_Messages;
                    j6 = j;
                    i18 = i11;
                    size = i31;
                    i19 = 3;
                }
                i21 = i18;
                getFileLoader().checkMediaExistance(arrayList);
                if (MessageObject.canCreateStripedThubms()) {
                    for (int i32 = 0; i32 < arrayList.size(); i32++) {
                        arrayList.get(i32).createStrippedThumb();
                    }
                }
                if (!BuildVars.LOGS_ENABLED) {
                    FileLog.d("process time=" + (SystemClock.elapsedRealtime() - elapsedRealtime) + " count=" + arrayList.size() + " for dialog  " + j);
                }
                if (i21 != 1) {
                    Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251
                        @Override // java.util.Comparator
                        public final int compare(Object obj, Object obj2) {
                            int lambda$processLoadedMessages$180;
                            lambda$processLoadedMessages$180 = MessagesController.lambda$processLoadedMessages$180((MessageObject) obj, (MessageObject) obj2);
                            return lambda$processLoadedMessages$180;
                        }
                    });
                } else if (i21 == 5) {
                    Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda252
                        @Override // java.util.Comparator
                        public final int compare(Object obj, Object obj2) {
                            int lambda$processLoadedMessages$181;
                            lambda$processLoadedMessages$181 = MessagesController.lambda$processLoadedMessages$181((MessageObject) obj, (MessageObject) obj2);
                            return lambda$processLoadedMessages$181;
                        }
                    });
                    for (int i33 = 0; i33 < arrayList.size(); i33++) {
                        MessageObject messageObject2 = arrayList.get(i33);
                        if (messageObject2.isReply()) {
                            int i34 = messageObject2.messageOwner.reply_to.reply_to_msg_id;
                            int i35 = 0;
                            while (true) {
                                if (i35 >= arrayList.size()) {
                                    break;
                                } else if (i33 == i35 || arrayList.get(i35) == messageObject2 || arrayList.get(i35).getId() != i34) {
                                    i35++;
                                } else {
                                    messageObject2.replyMessageObject = arrayList.get(i35);
                                    messageObject2.applyTimestampsHighlightForReplyMsg();
                                    TLRPC$MessageAction tLRPC$MessageAction3 = messageObject2.messageOwner.action;
                                    if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionPinMessage) {
                                        messageObject2.generatePinMessageText(null, null);
                                    } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionGameScore) {
                                        messageObject2.generateGameMessageText(null);
                                    } else if (tLRPC$MessageAction3 instanceof TLRPC$TL_messageActionPaymentSent) {
                                        messageObject2.generatePaymentSentMessageText(null);
                                    }
                                }
                            }
                        }
                    }
                }
                Timer.done(start);
                final Timer.Task start2 = Timer.start(timer, "processLoadedMessages: runOnUIThread");
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda253
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$processLoadedMessages$183(start2, timer, tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList, j3, i5, i, z2, i7, i8, i9, i12, i3, i13, arrayList2, hashMap);
                    }
                });
            }
        }
        j4 = 0;
        i14 = 1;
        z6 = false;
        if (!z) {
        }
        if (i4 != 0) {
        }
        longSparseArray = new LongSparseArray();
        longSparseArray2 = new LongSparseArray();
        while (i15 < tLRPC$messages_Messages.users.size()) {
        }
        while (i16 < tLRPC$messages_Messages.chats.size()) {
        }
        if (i11 != i14) {
        }
        if (DialogObject.isEncryptedDialog(j)) {
        }
        longSparseArray3 = longSparseArray2;
        longSparseArray4 = longSparseArray;
        tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        size = tLRPC$messages_Messages2.messages.size();
        if (z) {
        }
        if (z4) {
        }
        final ArrayList arrayList4 = new ArrayList<>();
        final ArrayList arrayList22 = new ArrayList();
        final HashMap hashMap2 = new HashMap();
        i20 = 0;
        while (i20 < size) {
        }
        i21 = i18;
        getFileLoader().checkMediaExistance(arrayList4);
        if (MessageObject.canCreateStripedThubms()) {
        }
        if (!BuildVars.LOGS_ENABLED) {
        }
        if (i21 != 1) {
        }
        Timer.done(start);
        final Timer.Task start22 = Timer.start(timer, "processLoadedMessages: runOnUIThread");
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda253
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedMessages$183(start22, timer, tLRPC$messages_Messages, z, z4, i11, z3, i10, i6, i2, j, arrayList4, j3, i5, i, z2, i7, i8, i9, i12, i3, i13, arrayList22, hashMap2);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedMessages$178(long j, long j2, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, long j3, int i9, int i10, int i11, int i12, boolean z2, boolean z3, Timer timer, long j4) {
        loadMessagesInternal(j, j2, false, i, (i2 == 2 && z) ? i3 : i4, i5, false, 0, i6, i2, i7, i8, j3, i9, i3, i10, i11, z, i12, true, z2, z3, timer, j4);
    }

    public /* synthetic */ void lambda$processLoadedMessages$179(int i, TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, boolean z2, int i2) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(tLRPC$messages_Messages.messages.size()), Boolean.valueOf(z), Boolean.valueOf(z2), Integer.valueOf(i2));
    }

    public static /* synthetic */ int lambda$processLoadedMessages$180(MessageObject messageObject, MessageObject messageObject2) {
        int i;
        int i2;
        if (messageObject.messageOwner.date == messageObject2.messageOwner.date && messageObject.getId() >= 0 && messageObject2.getId() >= 0) {
            i = messageObject2.getId();
            i2 = messageObject.getId();
        } else {
            i = messageObject2.messageOwner.date;
            i2 = messageObject.messageOwner.date;
        }
        return i - i2;
    }

    public static /* synthetic */ int lambda$processLoadedMessages$181(MessageObject messageObject, MessageObject messageObject2) {
        return messageObject2.getId() - messageObject.getId();
    }

    public /* synthetic */ void lambda$processLoadedMessages$183(Timer.Task task, Timer timer, TLRPC$messages_Messages tLRPC$messages_Messages, final boolean z, final boolean z2, final int i, boolean z3, final int i2, int i3, final int i4, final long j, final ArrayList arrayList, long j2, final int i5, final int i6, final boolean z4, final int i7, final int i8, final int i9, final int i10, final int i11, final int i12, ArrayList arrayList2, HashMap hashMap) {
        int i13;
        int i14;
        int i15;
        int i16;
        MessagesController messagesController;
        int i17;
        long j3;
        Timer.done(task);
        Timer.Task start = Timer.start(timer, "processLoadedMessages: post runOnUIThread");
        putUsers(tLRPC$messages_Messages.users, z);
        putChats(tLRPC$messages_Messages.chats, z);
        if (tLRPC$messages_Messages.animatedEmoji != null && z2) {
            AnimatedEmojiDrawable.getDocumentFetcher(this.currentAccount).processDocuments(tLRPC$messages_Messages.animatedEmoji);
        }
        if (i == 1) {
            i15 = 0;
        } else {
            if (z3 && i2 == 2) {
                i14 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                for (int i18 = 0; i18 < tLRPC$messages_Messages.messages.size(); i18++) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i18);
                    if ((!tLRPC$Message.out || tLRPC$Message.from_scheduled) && (i16 = tLRPC$Message.id) > i3 && i16 < i14) {
                        i14 = i16;
                    }
                }
                i13 = i3;
            } else {
                i13 = i3;
                i14 = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            i15 = i14 == Integer.MAX_VALUE ? i13 : i14;
        }
        if (i == 1 && i4 == 1) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()), Boolean.FALSE);
        }
        if (!DialogObject.isEncryptedDialog(j) && i != 5) {
            final Timer.Task start2 = Timer.start(timer, "loadReplyMessagesForMessages");
            final int i19 = i15;
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i, j2, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda76
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedMessages$182(start2, z2, i5, i6, z, z4, i7, j, i4, arrayList, i19, i8, i9, i2, i10, i11, i12, i);
                }
            }, i5, timer);
        } else {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z), Integer.valueOf(i15), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i2), Boolean.valueOf(z4), Integer.valueOf(i5), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12), Integer.valueOf(i));
        }
        if (arrayList2.isEmpty()) {
            messagesController = this;
            i17 = i;
            j3 = j;
        } else {
            messagesController = this;
            i17 = i;
            j3 = j;
            messagesController.reloadMessages(arrayList2, j3, i17);
        }
        if (!hashMap.isEmpty()) {
            messagesController.reloadWebPages(j3, hashMap, i17);
        }
        Timer.done(start);
        if (timer != null) {
            timer.finish();
        }
    }

    public /* synthetic */ void lambda$processLoadedMessages$182(Timer.Task task, boolean z, int i, int i2, boolean z2, boolean z3, int i3, long j, int i4, ArrayList arrayList, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12) {
        Timer.done(task);
        if (!z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z2), Boolean.valueOf(z3), Integer.valueOf(i3));
        } else {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z2), Integer.valueOf(i5), Integer.valueOf(i3), Integer.valueOf(i6), Integer.valueOf(i7), Integer.valueOf(i8), Boolean.valueOf(z3), Integer.valueOf(i), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12));
        }
    }

    public void loadHintDialogs() {
        if (!this.hintDialogs.isEmpty() || TextUtils.isEmpty(this.installReferer)) {
            return;
        }
        TLRPC$TL_help_getRecentMeUrls tLRPC$TL_help_getRecentMeUrls = new TLRPC$TL_help_getRecentMeUrls();
        tLRPC$TL_help_getRecentMeUrls.referer = this.installReferer;
        getConnectionsManager().sendRequest(tLRPC$TL_help_getRecentMeUrls, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda172
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadHintDialogs$185(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadHintDialogs$185(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda174
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadHintDialogs$184(tLObject);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadHintDialogs$184(TLObject tLObject) {
        TLRPC$TL_help_recentMeUrls tLRPC$TL_help_recentMeUrls = (TLRPC$TL_help_recentMeUrls) tLObject;
        putUsers(tLRPC$TL_help_recentMeUrls.users, false);
        putChats(tLRPC$TL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tLRPC$TL_help_recentMeUrls.urls);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public TLRPC$TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC$TL_dialogFolder) tLRPC$Dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
        tLRPC$TL_dialogFolder.id = makeFolderDialogId;
        tLRPC$TL_dialogFolder.peer = new TLRPC$TL_peerUser();
        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
        tLRPC$TL_folder.id = i;
        tLRPC$TL_folder.title = LocaleController.getString("ArchivedChats", R.string.ArchivedChats);
        tLRPC$TL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i3);
            if (!tLRPC$Dialog2.pinned) {
                if (tLRPC$Dialog2.id != this.promoDialogId) {
                    break;
                }
            } else {
                i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
            }
        }
        tLRPC$TL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialogFolder);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tLRPC$TL_dialogFolder);
        this.allDialogs.add(0, tLRPC$TL_dialogFolder);
        return tLRPC$TL_dialogFolder;
    }

    private void removeFolder(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog == null) {
            return;
        }
        this.dialogs_dict.remove(makeFolderDialogId);
        this.allDialogs.remove(tLRPC$Dialog);
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
    }

    public void onFolderEmpty(final int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] != 2147483647L) {
            loadDialogs(i, 0, 10, false, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda415
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$onFolderEmpty$186(i);
                }
            });
        } else if (i == 1) {
            this.hasArchivedChats = false;
            checkArchiveFolder();
        } else {
            removeFolder(i);
        }
    }

    public /* synthetic */ void lambda$onFolderEmpty$186(int i) {
        if (i == 1) {
            this.hasArchivedChats = false;
            checkArchiveFolder();
            return;
        }
        removeFolder(i);
    }

    public void checkArchiveFolder() {
        if (!this.hasArchivedChats && !getStoriesController().hasHiddenStories()) {
            removeFolder(1);
        } else {
            boolean[] zArr = {false};
            ensureFolderDialogExists(1, zArr);
            if (zArr[0]) {
                sortDialogs(null);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, 0);
    }

    public void checkIfFolderEmpty(int i) {
        if (i == 0) {
            return;
        }
        getMessagesStorage().checkIfFolderEmpty(i);
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList<Long> arrayList = new ArrayList<>(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, null, j2);
    }

    /* JADX WARN: Removed duplicated region for block: B:131:0x012b  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x0147 A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:134:0x0149  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int addDialogToFolder(ArrayList<Long> arrayList, int i, int i2, ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, long j) {
        final long j2;
        NativeByteBuffer nativeByteBuffer;
        long createPendingTask;
        TLRPC$Dialog tLRPC$Dialog;
        boolean[] zArr;
        int i3;
        int i4;
        TLRPC$TL_folders_editPeerFolders tLRPC$TL_folders_editPeerFolders = new TLRPC$TL_folders_editPeerFolders();
        boolean[] zArr2 = null;
        if (j == 0) {
            long clientUserId = getUserConfig().getClientUserId();
            int size = arrayList.size();
            boolean[] zArr3 = null;
            boolean z = false;
            int i5 = 0;
            int i6 = 0;
            while (i5 < size) {
                long longValue = arrayList.get(i5).longValue();
                if ((DialogObject.isChatDialog(longValue) || DialogObject.isUserDialog(longValue) || DialogObject.isEncryptedDialog(longValue)) && !((i == 1 && (longValue == clientUserId || longValue == 777000 || isPromoDialog(longValue, false))) || (tLRPC$Dialog = this.dialogs_dict.get(longValue)) == null)) {
                    tLRPC$Dialog.folder_id = i;
                    if (i2 > 0) {
                        tLRPC$Dialog.pinned = true;
                        tLRPC$Dialog.pinnedNum = i2;
                    } else {
                        tLRPC$Dialog.pinned = false;
                        tLRPC$Dialog.pinnedNum = 0;
                    }
                    if (zArr3 == null) {
                        boolean[] zArr4 = new boolean[1];
                        this.hasArchivedChats = true;
                        ensureFolderDialogExists(i, zArr4);
                        zArr = zArr4;
                    } else {
                        zArr = zArr3;
                    }
                    if (DialogObject.isEncryptedDialog(longValue)) {
                        i3 = i5;
                        i4 = size;
                        getMessagesStorage().setDialogsFolderId(null, null, longValue, i);
                    } else {
                        i3 = i5;
                        i4 = size;
                        TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = new TLRPC$TL_inputFolderPeer();
                        tLRPC$TL_inputFolderPeer.folder_id = i;
                        tLRPC$TL_inputFolderPeer.peer = getInputPeer(longValue);
                        tLRPC$TL_folders_editPeerFolders.folder_peers.add(tLRPC$TL_inputFolderPeer);
                        i6 += tLRPC$TL_inputFolderPeer.getObjectSize();
                    }
                    zArr3 = zArr;
                    z = true;
                } else {
                    i3 = i5;
                    i4 = size;
                }
                i5 = i3 + 1;
                size = i4;
            }
            if (!z) {
                return 0;
            }
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (i6 != 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(i6 + 12);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(17);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tLRPC$TL_folders_editPeerFolders.folder_peers.size());
                    int size2 = tLRPC$TL_folders_editPeerFolders.folder_peers.size();
                    for (int i7 = 0; i7 < size2; i7++) {
                        tLRPC$TL_folders_editPeerFolders.folder_peers.get(i7).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e2) {
                    e = e2;
                    zArr2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = zArr2;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    zArr2 = zArr3;
                    j2 = createPendingTask;
                    if (!tLRPC$TL_folders_editPeerFolders.folder_peers.isEmpty()) {
                    }
                    if (zArr2 != null) {
                    }
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                createPendingTask = 0;
            }
            zArr2 = zArr3;
            j2 = createPendingTask;
        } else {
            tLRPC$TL_folders_editPeerFolders.folder_peers = arrayList2;
            j2 = j;
        }
        if (!tLRPC$TL_folders_editPeerFolders.folder_peers.isEmpty()) {
            getConnectionsManager().sendRequest(tLRPC$TL_folders_editPeerFolders, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda163
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$addDialogToFolder$187(j2, tLObject, tLRPC$TL_error);
                }
            });
            getMessagesStorage().setDialogsFolderId(null, tLRPC$TL_folders_editPeerFolders.folder_peers, 0L, i);
        }
        if (zArr2 != null) {
            return 0;
        }
        return zArr2[0] ? 2 : 1;
    }

    public /* synthetic */ void lambda$addDialogToFolder$187(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, null);
    }

    public void loadDialogs(final int i, int i2, final int i3, boolean z, final Runnable runnable) {
        long j;
        if (this.loadingDialogs.get(i) || this.resetingDialogs) {
            return;
        }
        boolean z2 = true;
        this.loadingDialogs.put(i, true);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i4 = NotificationCenter.dialogsNeedReload;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i4, new Object[0]);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
        }
        if (z) {
            getMessagesStorage().getDialogs(i, i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0), i3, (i == 0 && i2 == 0) ? false : false);
            return;
        }
        TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
        tLRPC$TL_messages_getDialogs.limit = i3;
        tLRPC$TL_messages_getDialogs.exclude_pinned = true;
        if (i != 0) {
            tLRPC$TL_messages_getDialogs.flags |= 2;
            tLRPC$TL_messages_getDialogs.folder_id = i;
        }
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        long j2 = dialogLoadOffsets[0];
        if (j2 == -1) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            int size = dialogs.size() - 1;
            while (true) {
                if (size < 0) {
                    z2 = false;
                    break;
                }
                TLRPC$Dialog tLRPC$Dialog = dialogs.get(size);
                if (!tLRPC$Dialog.pinned && !DialogObject.isEncryptedDialog(tLRPC$Dialog.id) && tLRPC$Dialog.top_message > 0) {
                    ArrayList<MessageObject> arrayList = this.dialogMessage.get(tLRPC$Dialog.id);
                    MessageObject messageObject = null;
                    if (arrayList != null) {
                        for (int i5 = 0; i5 < arrayList.size(); i5++) {
                            MessageObject messageObject2 = arrayList.get(i5);
                            if (messageObject2 != null && (messageObject == null || messageObject2.getId() > messageObject.getId())) {
                                messageObject = arrayList.get(i5);
                            }
                        }
                    }
                    if (messageObject != null && messageObject.getId() > 0) {
                        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                        tLRPC$TL_messages_getDialogs.offset_date = tLRPC$Message.date;
                        tLRPC$TL_messages_getDialogs.offset_id = tLRPC$Message.id;
                        TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                        long j3 = tLRPC$Peer.channel_id;
                        if (j3 == 0) {
                            j3 = tLRPC$Peer.chat_id;
                            if (j3 == 0) {
                                j = tLRPC$Peer.user_id;
                                tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                            }
                        }
                        j = -j3;
                        tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                    }
                }
                size--;
            }
            if (!z2) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            }
        } else if (j2 == 2147483647L) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
            this.loadingDialogs.put(i, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(i4, new Object[0]);
            return;
        } else {
            int i6 = (int) j2;
            tLRPC$TL_messages_getDialogs.offset_id = i6;
            tLRPC$TL_messages_getDialogs.offset_date = (int) dialogLoadOffsets[1];
            if (i6 == 0) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                if (dialogLoadOffsets[4] != 0) {
                    TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                    tLRPC$TL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                } else if (dialogLoadOffsets[2] != 0) {
                    TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                    tLRPC$TL_inputPeerUser.user_id = dialogLoadOffsets[2];
                } else {
                    TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                    tLRPC$TL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                }
                tLRPC$TL_messages_getDialogs.offset_peer.access_hash = dialogLoadOffsets[5];
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda139
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadDialogs$188(i, i3, runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadDialogs$188(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            processLoadedDialogs(tLRPC$messages_Dialogs, null, null, i, 0, i2, 0, false, false, false);
            if (runnable == null || !tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                return;
            }
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public void loadGlobalNotificationsSettings() {
        SharedPreferences.Editor editor;
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                editor = notificationsSettings.edit();
                if (!z) {
                    editor.putInt("EnableGroup2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                    editor.putInt("EnableChannel2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                editor.remove("EnableGroup").commit();
            } else {
                editor = null;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", ConnectionsManager.DEFAULT_DATACENTER_ID);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 4;
            for (final int i = 0; i < 3; i++) {
                TLRPC$TL_account_getNotifySettings tLRPC$TL_account_getNotifySettings = new TLRPC$TL_account_getNotifySettings();
                if (i == 0) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyChats();
                } else if (i == 1) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyUsers();
                } else {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_getNotifySettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda60
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$190(i, tLObject, tLRPC$TL_error);
                    }
                });
            }
            getConnectionsManager().sendRequest(new TLRPC$TL_account_getReactionsNotifySettings(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadGlobalNotificationsSettings$192(tLObject, tLRPC$TL_error);
                }
            });
        }
        if (getUserConfig().notificationsSignUpSettingsLoaded) {
            return;
        }
        loadSignUpNotificationsSettings();
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$190(final int i, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadGlobalNotificationsSettings$189(tLObject, i);
            }
        });
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$189(TLObject tLObject, int i) {
        if (tLObject != null) {
            this.loadingNotificationSettings--;
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = (TLRPC$TL_peerNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            if (i == 0) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewGroup", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableGroup2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 1) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewAll", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 64) != 0) {
                    edit.putBoolean("EnableAllStories", !tLRPC$TL_peerNotifySettings.stories_muted);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 128) != 0) {
                    edit.putBoolean("EnableHideStoriesSenders", tLRPC$TL_peerNotifySettings.stories_hide_sender);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableAll2", tLRPC$TL_peerNotifySettings.mute_until);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 64) != 0) {
                    edit.putBoolean("EnableAllStories", !tLRPC$TL_peerNotifySettings.stories_muted);
                }
            } else {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewChannel", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableChannel2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            }
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_peerNotifySettings.android_sound, edit, 0L, 0L, i, false);
            edit.apply();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$192(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda409
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadGlobalNotificationsSettings$191(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$191(TLObject tLObject) {
        this.loadingNotificationSettings--;
        if (tLObject instanceof TLRPC$TL_reactionsNotifySettings) {
            TLRPC$TL_reactionsNotifySettings tLRPC$TL_reactionsNotifySettings = (TLRPC$TL_reactionsNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putBoolean("EnableReactionsMessages", tLRPC$TL_reactionsNotifySettings.messages_notify_from != null);
            TLRPC$ReactionNotificationsFrom tLRPC$ReactionNotificationsFrom = tLRPC$TL_reactionsNotifySettings.messages_notify_from;
            if (tLRPC$ReactionNotificationsFrom != null) {
                edit.putBoolean("EnableReactionsMessagesContacts", tLRPC$ReactionNotificationsFrom instanceof TLRPC$TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsStories", tLRPC$TL_reactionsNotifySettings.stories_notify_from != null);
            TLRPC$ReactionNotificationsFrom tLRPC$ReactionNotificationsFrom2 = tLRPC$TL_reactionsNotifySettings.stories_notify_from;
            if (tLRPC$ReactionNotificationsFrom2 != null) {
                edit.putBoolean("EnableReactionsStoriesContacts", tLRPC$ReactionNotificationsFrom2 instanceof TLRPC$TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsPreview", tLRPC$TL_reactionsNotifySettings.show_previews);
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_reactionsNotifySettings.sound, edit, 0L, 0L, 4, false);
            edit.apply();
        }
        if (this.loadingNotificationSettings == 0) {
            getUserConfig().notificationsSettingsLoaded = true;
            getUserConfig().saveConfig(false);
        }
    }

    public /* synthetic */ void lambda$reloadReactionsNotifySettings$194(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda89
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadReactionsNotifySettings$193(tLObject);
            }
        });
    }

    public void reloadReactionsNotifySettings() {
        getConnectionsManager().sendRequest(new TLRPC$TL_account_getReactionsNotifySettings(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda445
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadReactionsNotifySettings$194(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadReactionsNotifySettings$193(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_reactionsNotifySettings) {
            TLRPC$TL_reactionsNotifySettings tLRPC$TL_reactionsNotifySettings = (TLRPC$TL_reactionsNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putBoolean("EnableReactionsMessages", tLRPC$TL_reactionsNotifySettings.messages_notify_from != null);
            TLRPC$ReactionNotificationsFrom tLRPC$ReactionNotificationsFrom = tLRPC$TL_reactionsNotifySettings.messages_notify_from;
            if (tLRPC$ReactionNotificationsFrom != null) {
                edit.putBoolean("EnableReactionsMessagesContacts", tLRPC$ReactionNotificationsFrom instanceof TLRPC$TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsStories", tLRPC$TL_reactionsNotifySettings.stories_notify_from != null);
            TLRPC$ReactionNotificationsFrom tLRPC$ReactionNotificationsFrom2 = tLRPC$TL_reactionsNotifySettings.stories_notify_from;
            if (tLRPC$ReactionNotificationsFrom2 != null) {
                edit.putBoolean("EnableReactionsStoriesContacts", tLRPC$ReactionNotificationsFrom2 instanceof TLRPC$TL_reactionNotificationsFromContacts);
            }
            edit.putBoolean("EnableReactionsPreview", tLRPC$TL_reactionsNotifySettings.show_previews);
            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_reactionsNotifySettings.sound, edit, 0L, 0L, 4, false);
            edit.apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (this.loadingNotificationSignUpSettings) {
            return;
        }
        this.loadingNotificationSignUpSettings = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_account_getContactSignUpNotification
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$Bool.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-1626880216);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda382
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadSignUpNotificationsSettings$196(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$196(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda302
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadSignUpNotificationsSettings$195(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$195(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC$TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    public void loadUnknownDialog(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer == null) {
            return;
        }
        final long peerDialogId = DialogObject.getPeerDialogId(tLRPC$InputPeer);
        if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) >= 0) {
            return;
        }
        this.gettingUnknownDialogs.put(peerDialogId, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load unknown dialog " + peerDialogId);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        if (j == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
            } catch (Exception e) {
                e = e;
            }
            try {
                nativeByteBuffer.writeInt32(15);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                final long j2 = j;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$197(j2, peerDialogId, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j22 = j;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnknownDialog$197(j22, peerDialogId, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnknownDialog$197(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, null, null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs) {
        TLRPC$InputPeer tLRPC$TL_inputPeerUser;
        int size = tLRPC$TL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i2);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Dialog.peer);
                if (tLRPC$TL_dialogFolder.top_message == 0 || peerDialogId == 0) {
                    tLRPC$TL_messages_peerDialogs.dialogs.remove(tLRPC$TL_dialogFolder);
                } else {
                    int size2 = tLRPC$TL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(tLRPC$Message) && tLRPC$Dialog.top_message == tLRPC$Message.id) {
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.peer = tLRPC$Dialog.peer;
                            tLRPC$TL_dialog.top_message = tLRPC$Dialog.top_message;
                            tLRPC$TL_dialog.folder_id = tLRPC$TL_dialogFolder.folder.id;
                            tLRPC$TL_dialog.flags |= 16;
                            tLRPC$TL_messages_peerDialogs.dialogs.add(tLRPC$TL_dialog);
                            TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                            if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerChannel();
                                tLRPC$TL_inputPeerUser.channel_id = tLRPC$Dialog.peer.channel_id;
                                int size3 = tLRPC$TL_messages_peerDialogs.chats.size();
                                while (true) {
                                    if (i >= size3) {
                                        break;
                                    }
                                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i);
                                    if (tLRPC$Chat.id == tLRPC$TL_inputPeerUser.channel_id) {
                                        tLRPC$TL_inputPeerUser.access_hash = tLRPC$Chat.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerChat();
                                tLRPC$TL_inputPeerUser.chat_id = tLRPC$Dialog.peer.chat_id;
                            } else {
                                tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                                tLRPC$TL_inputPeerUser.user_id = tLRPC$Dialog.peer.user_id;
                                int size4 = tLRPC$TL_messages_peerDialogs.users.size();
                                while (true) {
                                    if (i >= size4) {
                                        break;
                                    }
                                    TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                                    if (tLRPC$User.id == tLRPC$TL_inputPeerUser.user_id) {
                                        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tLRPC$TL_inputPeerUser, 0L);
                            return;
                        }
                    }
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$resetDialogs$198(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC$TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    public /* synthetic */ void lambda$resetDialogs$199(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.resetDialogsAll = (TLRPC$messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:192:0x0157  */
    /* JADX WARN: Removed duplicated region for block: B:235:0x0206  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x0230  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void resetDialogs(boolean z, final int i, final int i2, final int i3, final int i4) {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs;
        long j;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        Integer num;
        Integer num2;
        ArrayList<MessageObject> arrayList;
        TLRPC$Message tLRPC$Message;
        int i5;
        TLRPC$Chat tLRPC$Chat2;
        ArrayList<MessageObject> arrayList2;
        Integer num3 = 0;
        if (z) {
            if (this.resetingDialogs) {
                return;
            }
            getUserConfig().setPinnedDialogsLoaded(1, false);
            this.resetingDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getPinnedDialogs(), new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda333
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$resetDialogs$198(i, i2, i3, i4, tLObject, tLRPC$TL_error);
                }
            });
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.limit = 100;
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda334
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$resetDialogs$199(i, i2, i3, i4, tLObject, tLRPC$TL_error);
                }
            });
        } else if (this.resetDialogsPinned != null && (tLRPC$messages_Dialogs = this.resetDialogsAll) != null) {
            int size = tLRPC$messages_Dialogs.messages.size();
            int size2 = this.resetDialogsAll.dialogs.size();
            fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
            this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
            this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
            this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
            this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
            LongSparseArray<TLRPC$Dialog> longSparseArray = new LongSparseArray<>();
            LongSparseArray<ArrayList<MessageObject>> longSparseArray2 = new LongSparseArray<>();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            LongSparseArray longSparseArray4 = new LongSparseArray();
            for (int i6 = 0; i6 < this.resetDialogsAll.users.size(); i6++) {
                TLRPC$User tLRPC$User2 = this.resetDialogsAll.users.get(i6);
                longSparseArray3.put(tLRPC$User2.id, tLRPC$User2);
            }
            for (int i7 = 0; i7 < this.resetDialogsAll.chats.size(); i7++) {
                TLRPC$Chat tLRPC$Chat3 = this.resetDialogsAll.chats.get(i7);
                longSparseArray4.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            int i8 = 0;
            TLRPC$Message tLRPC$Message2 = null;
            while (true) {
                j = 0;
                if (i8 >= this.resetDialogsAll.messages.size()) {
                    break;
                }
                TLRPC$Message tLRPC$Message3 = this.resetDialogsAll.messages.get(i8);
                if (i8 < size && (tLRPC$Message2 == null || tLRPC$Message3.date < tLRPC$Message2.date)) {
                    tLRPC$Message2 = tLRPC$Message3;
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Message3.peer_id;
                Integer num4 = num3;
                long j2 = tLRPC$Peer.channel_id;
                if (j2 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j2);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                    }
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message3, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, true);
                    long dialogId = messageObject.getDialogId();
                    arrayList2 = longSparseArray2.get(dialogId);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList<>(1);
                    }
                    arrayList2.add(messageObject);
                    longSparseArray2.put(dialogId, arrayList2);
                } else {
                    long j3 = tLRPC$Peer.chat_id;
                    if (j3 != 0 && (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray4.get(j3)) != null && tLRPC$Chat2.migrated_to != null) {
                    }
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message3, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, true);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList2 = longSparseArray2.get(dialogId2);
                    if (arrayList2 == null) {
                    }
                    arrayList2.add(messageObject2);
                    longSparseArray2.put(dialogId2, arrayList2);
                }
                i8++;
                num3 = num4;
            }
            Integer num5 = num3;
            int i9 = 0;
            while (i9 < this.resetDialogsAll.dialogs.size()) {
                TLRPC$Dialog tLRPC$Dialog = this.resetDialogsAll.dialogs.get(i9);
                DialogObject.initDialog(tLRPC$Dialog);
                long j4 = tLRPC$Dialog.id;
                if (j4 != j) {
                    if (tLRPC$Dialog.last_message_date == 0 && (arrayList = longSparseArray2.get(j4)) != null) {
                        int i10 = Integer.MIN_VALUE;
                        for (int i11 = 0; i11 < arrayList.size(); i11++) {
                            MessageObject messageObject3 = arrayList.get(i11);
                            if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && (i5 = tLRPC$Message.date) > i10) {
                                i10 = i5;
                            }
                        }
                        if (i10 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i10;
                        }
                    }
                    if (DialogObject.isChannel(tLRPC$Dialog)) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id);
                        if (tLRPC$Chat5 == null || !tLRPC$Chat5.left) {
                            this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                            longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                            num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                            if (num == null) {
                                num = num5;
                            }
                            this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                            num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                            if (num2 == null) {
                                num2 = num5;
                            }
                            this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                        }
                    } else {
                        if (DialogObject.isChatDialog(tLRPC$Dialog.id) && (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) != null && tLRPC$Chat.migrated_to != null) {
                        }
                        longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                        num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num == null) {
                        }
                        this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                        num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num2 == null) {
                        }
                        this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                    }
                }
                i9++;
                j = 0;
            }
            ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
            for (int i12 = 0; i12 < this.resetDialogsAll.messages.size(); i12++) {
                TLRPC$Message tLRPC$Message4 = this.resetDialogsAll.messages.get(i12);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message4.action;
                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray3.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                    tLRPC$Message4.reply_markup = new TLRPC$TL_replyKeyboardHide();
                    tLRPC$Message4.flags |= 64;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message4.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message4.unread = false;
                    tLRPC$Message4.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message4.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num6 = concurrentHashMap.get(Long.valueOf(tLRPC$Message4.dialog_id));
                    if (num6 == null) {
                        num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message4.out, tLRPC$Message4.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message4.dialog_id), num6);
                    }
                    tLRPC$Message4.unread = num6.intValue() < tLRPC$Message4.id;
                }
            }
            getMessagesStorage().resetDialogs(this.resetDialogsAll, size, i, i2, i3, i4, longSparseArray, longSparseArray2, tLRPC$Message2, size2);
            this.resetDialogsPinned = null;
            this.resetDialogsAll = null;
        }
    }

    public void completeDialogsReset(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, final int i3, final int i4, final int i5, final LongSparseArray<TLRPC$Dialog> longSparseArray, final LongSparseArray<ArrayList<MessageObject>> longSparseArray2, TLRPC$Message tLRPC$Message) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$201(i3, i4, i5, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$201(int i, int i2, int i3, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda346
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$200(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$200(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        MediaDataController mediaDataController;
        long j;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
        MediaDataController mediaDataController2 = getMediaDataController();
        mediaDataController2.clearAllDrafts(false);
        mediaDataController2.loadDraftsIfNeed();
        putUsers(tLRPC$messages_Dialogs.users, false);
        putChats(tLRPC$messages_Dialogs.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(i);
            if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                this.dialogs_dict.remove(tLRPC$Dialog.id);
                ArrayList<MessageObject> arrayList = this.dialogMessage.get(tLRPC$Dialog.id);
                this.dialogMessage.remove(tLRPC$Dialog.id);
                if (arrayList != null) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        MessageObject messageObject = arrayList.get(i2);
                        if (messageObject != null) {
                            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject.getId());
                            }
                            long j2 = messageObject.messageOwner.random_id;
                            if (j2 != 0) {
                                this.dialogMessagesByRandomIds.remove(j2);
                            }
                        }
                    }
                }
            }
        }
        int i3 = 0;
        while (i3 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i3);
            TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) longSparseArray.valueAt(i3);
            TLRPC$DraftMessage tLRPC$DraftMessage = tLRPC$Dialog2.draft;
            if (tLRPC$DraftMessage instanceof TLRPC$TL_draftMessage) {
                mediaDataController = mediaDataController2;
                j = keyAt;
                mediaDataController2.saveDraft(tLRPC$Dialog2.id, 0L, tLRPC$DraftMessage, null, false);
            } else {
                mediaDataController = mediaDataController2;
                j = keyAt;
            }
            this.dialogs_dict.put(j, tLRPC$Dialog2);
            ArrayList<MessageObject> arrayList2 = (ArrayList) longSparseArray2.get(tLRPC$Dialog2.id);
            this.dialogMessage.put(j, arrayList2);
            if (arrayList2 != null) {
                for (int i4 = 0; i4 < arrayList2.size(); i4++) {
                    MessageObject messageObject2 = arrayList2.get(i4);
                    if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                        long j3 = messageObject2.messageOwner.random_id;
                        if (j3 != 0) {
                            this.dialogMessagesByRandomIds.put(j3, messageObject2);
                        }
                    }
                }
            }
            getTranslateController().checkDialogMessage(j);
            i3++;
            mediaDataController2 = mediaDataController;
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i5 = 0; i5 < size; i5++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i5);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (totalDialogsCount < 400) {
            long j4 = dialogLoadOffsets[0];
            if (j4 != -1 && j4 != 2147483647L) {
                loadDialogs(0, 0, 100, false);
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(final int i, int i2, long j, long j2, long j3, long j4) {
        if (this.migratingDialogs || i == -1) {
            return;
        }
        this.migratingDialogs = true;
        TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
        tLRPC$TL_messages_getDialogs.exclude_pinned = true;
        tLRPC$TL_messages_getDialogs.limit = 100;
        tLRPC$TL_messages_getDialogs.offset_id = i;
        tLRPC$TL_messages_getDialogs.offset_date = i2;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().getFormatterStats().format(i2 * 1000));
        }
        if (i == 0) {
            tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
        } else {
            if (j3 != 0) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                tLRPC$TL_inputPeerChannel.channel_id = j3;
            } else if (j != 0) {
                TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                tLRPC$TL_inputPeerUser.user_id = j;
            } else {
                TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                tLRPC$TL_inputPeerChat.chat_id = j2;
            }
            tLRPC$TL_messages_getDialogs.offset_peer.access_hash = j4;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda203
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$migrateDialogs$205(i, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$migrateDialogs$205(final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            final TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda29
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$203(tLRPC$messages_Dialogs, i);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$migrateDialogs$204();
            }
        });
    }

    /* JADX WARN: Removed duplicated region for block: B:261:0x034c A[Catch: Exception -> 0x0428, TryCatch #0 {Exception -> 0x0428, blocks: (B:165:0x0004, B:166:0x001d, B:169:0x0029, B:171:0x0035, B:173:0x0064, B:176:0x006b, B:177:0x006e, B:179:0x0072, B:180:0x009f, B:182:0x00ab, B:190:0x00f5, B:191:0x0108, B:193:0x0110, B:195:0x0121, B:196:0x0126, B:197:0x0133, B:198:0x0152, B:200:0x0158, B:202:0x0168, B:205:0x016d, B:206:0x0173, B:208:0x017b, B:214:0x019c, B:211:0x018c, B:213:0x0199, B:215:0x019e, B:216:0x01a2, B:218:0x01a9, B:219:0x01c3, B:221:0x01d9, B:222:0x01e5, B:225:0x01ef, B:231:0x0201, B:232:0x0250, B:234:0x025a, B:237:0x0285, B:239:0x029b, B:241:0x02a3, B:244:0x02b3, B:250:0x02c2, B:251:0x02ff, B:253:0x0307, B:259:0x0337, B:261:0x034c, B:262:0x0363, B:264:0x036b, B:266:0x037f, B:267:0x0389, B:286:0x0416, B:268:0x038c, B:270:0x0392, B:271:0x03a9, B:273:0x03b1, B:275:0x03c5, B:276:0x03ce, B:277:0x03d1, B:279:0x03d7, B:280:0x03ee, B:282:0x03f6, B:284:0x040a, B:285:0x0413, B:183:0x00ae, B:185:0x00b2, B:188:0x00ba), top: B:291:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:268:0x038c A[Catch: Exception -> 0x0428, TryCatch #0 {Exception -> 0x0428, blocks: (B:165:0x0004, B:166:0x001d, B:169:0x0029, B:171:0x0035, B:173:0x0064, B:176:0x006b, B:177:0x006e, B:179:0x0072, B:180:0x009f, B:182:0x00ab, B:190:0x00f5, B:191:0x0108, B:193:0x0110, B:195:0x0121, B:196:0x0126, B:197:0x0133, B:198:0x0152, B:200:0x0158, B:202:0x0168, B:205:0x016d, B:206:0x0173, B:208:0x017b, B:214:0x019c, B:211:0x018c, B:213:0x0199, B:215:0x019e, B:216:0x01a2, B:218:0x01a9, B:219:0x01c3, B:221:0x01d9, B:222:0x01e5, B:225:0x01ef, B:231:0x0201, B:232:0x0250, B:234:0x025a, B:237:0x0285, B:239:0x029b, B:241:0x02a3, B:244:0x02b3, B:250:0x02c2, B:251:0x02ff, B:253:0x0307, B:259:0x0337, B:261:0x034c, B:262:0x0363, B:264:0x036b, B:266:0x037f, B:267:0x0389, B:286:0x0416, B:268:0x038c, B:270:0x0392, B:271:0x03a9, B:273:0x03b1, B:275:0x03c5, B:276:0x03ce, B:277:0x03d1, B:279:0x03d7, B:280:0x03ee, B:282:0x03f6, B:284:0x040a, B:285:0x0413, B:183:0x00ae, B:185:0x00b2, B:188:0x00ba), top: B:291:0x0004 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$migrateDialogs$203(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        int i2;
        TLRPC$Message tLRPC$Message;
        SQLiteCursor sQLiteCursor;
        int i3;
        TLRPC$Peer tLRPC$Peer;
        TLRPC$Message tLRPC$Message2;
        TLRPC$Message tLRPC$Message3;
        int i4 = i;
        try {
            getUserConfig().setTotalDialogsCount(0, getUserConfig().getTotalDialogsCount(0) + tLRPC$messages_Dialogs.dialogs.size());
            TLRPC$Message tLRPC$Message4 = null;
            for (int i5 = 0; i5 < tLRPC$messages_Dialogs.messages.size(); i5++) {
                TLRPC$Message tLRPC$Message5 = tLRPC$messages_Dialogs.messages.get(i5);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("search migrate id " + tLRPC$Message5.id + " date " + LocaleController.getInstance().getFormatterStats().format(tLRPC$Message5.date * 1000));
                }
                if (tLRPC$Message4 == null || tLRPC$Message5.date < tLRPC$Message4.date) {
                    tLRPC$Message4 = tLRPC$Message5;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate step with id " + tLRPC$Message4.id + " date " + LocaleController.getInstance().getFormatterStats().format(tLRPC$Message4.date * 1000));
            }
            int i6 = -1;
            if (tLRPC$messages_Dialogs.dialogs.size() >= 100) {
                i2 = tLRPC$Message4.id;
            } else {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("migrate stop due to not 100 dialogs");
                }
                int i7 = 0;
                for (int i8 = 2; i7 < i8; i8 = 2) {
                    getUserConfig().setDialogsLoadOffset(i7, ConnectionsManager.DEFAULT_DATACENTER_ID, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                    i7++;
                }
                i2 = -1;
            }
            StringBuilder sb = new StringBuilder(tLRPC$messages_Dialogs.dialogs.size() * 12);
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i9 = 0; i9 < tLRPC$messages_Dialogs.dialogs.size(); i9++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i9);
                DialogObject.initDialog(tLRPC$Dialog);
                if (sb.length() > 0) {
                    sb.append(",");
                }
                sb.append(tLRPC$Dialog.id);
                longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
            }
            SQLiteCursor queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN (%s)", sb.toString()), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                int intValue = queryFinalized.intValue(1);
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) longSparseArray.get(longValue);
                if (tLRPC$Dialog2 != null) {
                    if (tLRPC$Dialog2.folder_id == intValue) {
                        tLRPC$messages_Dialogs.dialogs.remove(tLRPC$Dialog2);
                        int i10 = 0;
                        while (true) {
                            if (i10 >= tLRPC$messages_Dialogs.messages.size()) {
                                break;
                            }
                            TLRPC$Message tLRPC$Message6 = tLRPC$messages_Dialogs.messages.get(i10);
                            if (MessageObject.getDialogId(tLRPC$Message6) == longValue) {
                                tLRPC$messages_Dialogs.messages.remove(i10);
                                i10--;
                                if (tLRPC$Message6.id == tLRPC$Dialog2.top_message) {
                                    tLRPC$Dialog2.top_message = 0;
                                    break;
                                }
                            }
                            i10++;
                        }
                    }
                }
                longSparseArray.remove(longValue);
            }
            queryFinalized.dispose();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate found missing dialogs " + tLRPC$messages_Dialogs.dialogs.size());
            }
            SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized("SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 NOT IN (536870912, 1073741824)", new Object[0]);
            if (queryFinalized2.next()) {
                int max = Math.max(1441062000, queryFinalized2.intValue(0));
                int i11 = 0;
                while (true) {
                    String str = "migrate stop due to reached loaded dialogs ";
                    if (i11 >= tLRPC$messages_Dialogs.messages.size()) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message7 = tLRPC$messages_Dialogs.messages.get(i11);
                    if (tLRPC$Message7.date < max) {
                        if (i4 != i6) {
                            int i12 = 0;
                            while (i12 < 2) {
                                int i13 = i12;
                                getUserConfig().setDialogsLoadOffset(i13, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                i12 = i13 + 1;
                                tLRPC$Message7 = tLRPC$Message7;
                                str = str;
                                tLRPC$Message4 = tLRPC$Message4;
                            }
                            tLRPC$Message2 = tLRPC$Message4;
                            tLRPC$Message3 = tLRPC$Message7;
                            String str2 = str;
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d(str2 + LocaleController.getInstance().getFormatterStats().format(max * 1000));
                            }
                            i2 = -1;
                        } else {
                            tLRPC$Message2 = tLRPC$Message4;
                            tLRPC$Message3 = tLRPC$Message7;
                        }
                        tLRPC$messages_Dialogs.messages.remove(i11);
                        i11--;
                        long dialogId = MessageObject.getDialogId(tLRPC$Message3);
                        TLRPC$Dialog tLRPC$Dialog3 = (TLRPC$Dialog) longSparseArray.get(dialogId);
                        longSparseArray.remove(dialogId);
                        if (tLRPC$Dialog3 != null) {
                            tLRPC$messages_Dialogs.dialogs.remove(tLRPC$Dialog3);
                        }
                    } else {
                        tLRPC$Message2 = tLRPC$Message4;
                    }
                    i11++;
                    i4 = i;
                    tLRPC$Message4 = tLRPC$Message2;
                    i6 = -1;
                }
                TLRPC$Message tLRPC$Message8 = tLRPC$Message4;
                if (tLRPC$Message8 != null) {
                    tLRPC$Message = tLRPC$Message8;
                    if (tLRPC$Message.date < max && i != -1) {
                        int i14 = 0;
                        for (int i15 = 2; i14 < i15; i15 = 2) {
                            getUserConfig().setDialogsLoadOffset(i14, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                            i14++;
                            queryFinalized2 = queryFinalized2;
                            max = max;
                        }
                        sQLiteCursor = queryFinalized2;
                        int i16 = max;
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().getFormatterStats().format(i16 * 1000));
                        }
                        i3 = -1;
                        sQLiteCursor.dispose();
                        getUserConfig().migrateOffsetDate = tLRPC$Message.date;
                        tLRPC$Peer = tLRPC$Message.peer_id;
                        if (tLRPC$Peer.channel_id != 0) {
                            getUserConfig().migrateOffsetChannelId = tLRPC$Message.peer_id.channel_id;
                            getUserConfig().migrateOffsetChatId = 0L;
                            getUserConfig().migrateOffsetUserId = 0L;
                            int i17 = 0;
                            while (true) {
                                if (i17 >= tLRPC$messages_Dialogs.chats.size()) {
                                    break;
                                }
                                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs.chats.get(i17);
                                if (tLRPC$Chat.id == getUserConfig().migrateOffsetChannelId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$Chat.access_hash;
                                    break;
                                }
                                i17++;
                            }
                        } else if (tLRPC$Peer.chat_id != 0) {
                            getUserConfig().migrateOffsetChatId = tLRPC$Message.peer_id.chat_id;
                            getUserConfig().migrateOffsetChannelId = 0L;
                            getUserConfig().migrateOffsetUserId = 0L;
                            int i18 = 0;
                            while (true) {
                                if (i18 >= tLRPC$messages_Dialogs.chats.size()) {
                                    break;
                                }
                                TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i18);
                                if (tLRPC$Chat2.id == getUserConfig().migrateOffsetChatId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$Chat2.access_hash;
                                    break;
                                }
                                i18++;
                            }
                        } else if (tLRPC$Peer.user_id != 0) {
                            getUserConfig().migrateOffsetUserId = tLRPC$Message.peer_id.user_id;
                            getUserConfig().migrateOffsetChatId = 0L;
                            getUserConfig().migrateOffsetChannelId = 0L;
                            int i19 = 0;
                            while (true) {
                                if (i19 >= tLRPC$messages_Dialogs.users.size()) {
                                    break;
                                }
                                TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i19);
                                if (tLRPC$User.id == getUserConfig().migrateOffsetUserId) {
                                    getUserConfig().migrateOffsetAccess = tLRPC$User.access_hash;
                                    break;
                                }
                                i19++;
                            }
                        }
                        processLoadedDialogs(tLRPC$messages_Dialogs, null, null, 0, i3, 0, 0, false, true, false);
                    }
                } else {
                    sQLiteCursor = queryFinalized2;
                    tLRPC$Message = tLRPC$Message8;
                    i3 = i2;
                    sQLiteCursor.dispose();
                    getUserConfig().migrateOffsetDate = tLRPC$Message.date;
                    tLRPC$Peer = tLRPC$Message.peer_id;
                    if (tLRPC$Peer.channel_id != 0) {
                    }
                    processLoadedDialogs(tLRPC$messages_Dialogs, null, null, 0, i3, 0, 0, false, true, false);
                }
            } else {
                tLRPC$Message = tLRPC$Message4;
            }
            sQLiteCursor = queryFinalized2;
            i3 = i2;
            sQLiteCursor.dispose();
            getUserConfig().migrateOffsetDate = tLRPC$Message.date;
            tLRPC$Peer = tLRPC$Message.peer_id;
            if (tLRPC$Peer.channel_id != 0) {
            }
            processLoadedDialogs(tLRPC$messages_Dialogs, null, null, 0, i3, 0, 0, false, true, false);
        } catch (Exception e) {
            FileLog.e(e);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda319
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$migrateDialogs$202();
                }
            });
        }
    }

    public /* synthetic */ void lambda$migrateDialogs$202() {
        this.migratingDialogs = false;
    }

    public /* synthetic */ void lambda$migrateDialogs$204() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final ArrayList<TLRPC$EncryptedChat> arrayList, final ArrayList<TLRPC$UserFull> arrayList2, final int i, final int i2, final int i3, final int i4, final boolean z, final boolean z2, final boolean z3) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda320
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$209(i, i4, tLRPC$messages_Dialogs, arrayList2, z, i3, arrayList, i2, z3, z2);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:312:0x012d, code lost:
        if (r10 == (-r6.id)) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:320:0x0146, code lost:
        if (r5.migrated_to != null) goto L62;
     */
    /* JADX WARN: Code restructure failed: missing block: B:422:0x0377, code lost:
        if (r6 == r0.id) goto L148;
     */
    /* JADX WARN: Removed duplicated region for block: B:324:0x016d  */
    /* JADX WARN: Removed duplicated region for block: B:325:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:438:0x03b7  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x03cf  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x03e3  */
    /* JADX WARN: Removed duplicated region for block: B:453:0x0410  */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$209(final int i, final int i2, final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final ArrayList arrayList, final boolean z, final int i3, final ArrayList arrayList2, final int i4, final boolean z2, final boolean z3) {
        SparseArray sparseArray;
        LongSparseArray longSparseArray;
        TLRPC$Message tLRPC$Message;
        LongSparseArray longSparseArray2;
        LongSparseArray longSparseArray3;
        LongSparseArray longSparseArray4;
        ?? r13;
        LongSparseArray longSparseArray5;
        SparseArray sparseArray2;
        MessagesController messagesController;
        LongSparseArray longSparseArray6;
        LongSparseArray longSparseArray7;
        boolean z4;
        TLRPC$Chat tLRPC$Chat;
        LongSparseArray longSparseArray8;
        Integer num;
        Integer num2;
        TLRPC$Message tLRPC$Message2;
        int i5;
        LongSparseArray longSparseArray9;
        int i6;
        long j;
        long j2;
        long j3;
        long j4;
        int i7;
        int i8;
        long j5;
        long j6;
        int i9;
        int i10;
        long j7;
        SparseArray sparseArray3;
        TLRPC$Message tLRPC$Message3;
        ArrayList arrayList3;
        if (!this.firstGettingTask) {
            getNewDeleteTask(null, null);
            this.firstGettingTask = true;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("loaded folderId " + i + " loadType " + i2 + " count " + tLRPC$messages_Dialogs.dialogs.size());
        }
        final long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE && tLRPC$messages_Dialogs.dialogs.size() == 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda230
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$206(tLRPC$messages_Dialogs, arrayList, i, z, dialogLoadOffsets, i3);
                }
            });
            return;
        }
        LongSparseArray longSparseArray10 = new LongSparseArray();
        LongSparseArray longSparseArray11 = new LongSparseArray();
        LongSparseArray longSparseArray12 = new LongSparseArray();
        LongSparseArray longSparseArray13 = new LongSparseArray();
        int i11 = 0;
        while (i11 < tLRPC$messages_Dialogs.users.size()) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i11);
            longSparseArray12.put(tLRPC$User.id, tLRPC$User);
            i11++;
            dialogLoadOffsets = dialogLoadOffsets;
        }
        long[] jArr = dialogLoadOffsets;
        for (int i12 = 0; i12 < tLRPC$messages_Dialogs.chats.size(); i12++) {
            TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs.chats.get(i12);
            longSparseArray13.put(tLRPC$Chat2.id, tLRPC$Chat2);
        }
        if (arrayList2 != null) {
            SparseArray sparseArray4 = new SparseArray();
            int size = arrayList2.size();
            for (int i13 = 0; i13 < size; i13++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList2.get(i13);
                sparseArray4.put(tLRPC$EncryptedChat.id, tLRPC$EncryptedChat);
            }
            sparseArray = sparseArray4;
        } else {
            sparseArray = null;
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CACHE) {
            this.nextDialogsCacheOffset.put(i, i4 + i3);
        }
        ArrayList arrayList4 = new ArrayList();
        int i14 = 0;
        TLRPC$Message tLRPC$Message4 = null;
        while (i14 < tLRPC$messages_Dialogs.messages.size()) {
            TLRPC$Message tLRPC$Message5 = tLRPC$messages_Dialogs.messages.get(i14);
            int i15 = tLRPC$Message5.date;
            if (i15 == 0) {
                sparseArray3 = sparseArray;
            } else {
                sparseArray3 = sparseArray;
                if (tLRPC$Message4 == null || i15 < tLRPC$Message4.date) {
                    tLRPC$Message4 = tLRPC$Message5;
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Message5.peer_id;
                long j8 = tLRPC$Peer.channel_id;
                if (j8 != 0) {
                    TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray13.get(j8);
                    if (tLRPC$Chat3 == null || !tLRPC$Chat3.left) {
                        tLRPC$Message3 = tLRPC$Message4;
                    } else {
                        long j9 = this.promoDialogId;
                        tLRPC$Message3 = tLRPC$Message4;
                        if (j9 != 0) {
                        }
                    }
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message5, (LongSparseArray<TLRPC$User>) longSparseArray12, (LongSparseArray<TLRPC$Chat>) longSparseArray13, false, false);
                    arrayList4.add(messageObject);
                    long dialogId = messageObject.getDialogId();
                    arrayList3 = (ArrayList) longSparseArray11.get(dialogId);
                    if (arrayList3 != null) {
                        arrayList3 = new ArrayList(1);
                    }
                    arrayList3.add(messageObject);
                    longSparseArray11.put(dialogId, arrayList3);
                } else {
                    tLRPC$Message3 = tLRPC$Message4;
                    long j10 = tLRPC$Peer.chat_id;
                    if (j10 != 0) {
                        TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray13.get(j10);
                        if (tLRPC$Chat4 != null) {
                        }
                    }
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message5, (LongSparseArray<TLRPC$User>) longSparseArray12, (LongSparseArray<TLRPC$Chat>) longSparseArray13, false, false);
                    arrayList4.add(messageObject2);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList3 = (ArrayList) longSparseArray11.get(dialogId2);
                    if (arrayList3 != null) {
                    }
                    arrayList3.add(messageObject2);
                    longSparseArray11.put(dialogId2, arrayList3);
                }
                tLRPC$Message4 = tLRPC$Message3;
            }
            i14++;
            sparseArray = sparseArray3;
        }
        SparseArray sparseArray5 = sparseArray;
        if (z2 || z3 || jArr[0] == -1 || i2 != 0) {
            longSparseArray = longSparseArray13;
            tLRPC$Message = tLRPC$Message4;
            longSparseArray2 = longSparseArray12;
            longSparseArray3 = longSparseArray10;
            longSparseArray4 = longSparseArray11;
            r13 = 0;
        } else {
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(i);
            if (tLRPC$Message4 == null || tLRPC$Message4.id == jArr[0]) {
                longSparseArray9 = longSparseArray12;
                i6 = totalDialogsCount;
                j = 0;
                j2 = 0;
                j3 = 0;
                j4 = 0;
                i7 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                i8 = 0;
            } else {
                int size2 = totalDialogsCount + tLRPC$messages_Dialogs.dialogs.size();
                int i16 = tLRPC$Message4.id;
                int i17 = tLRPC$Message4.date;
                TLRPC$Peer tLRPC$Peer2 = tLRPC$Message4.peer_id;
                longSparseArray9 = longSparseArray12;
                long j11 = tLRPC$Peer2.channel_id;
                if (j11 != 0) {
                    int i18 = 0;
                    while (true) {
                        if (i18 >= tLRPC$messages_Dialogs.chats.size()) {
                            i9 = size2;
                            i10 = i16;
                            j7 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat5 = tLRPC$messages_Dialogs.chats.get(i18);
                        i9 = size2;
                        i10 = i16;
                        if (tLRPC$Chat5.id == j11) {
                            j7 = tLRPC$Chat5.access_hash;
                            break;
                        }
                        i18++;
                        size2 = i9;
                        i16 = i10;
                    }
                    j4 = j7;
                    i8 = i17;
                    j3 = j11;
                    j2 = 0;
                    i6 = i9;
                    i7 = i10;
                    j = 0;
                } else {
                    long j12 = tLRPC$Peer2.chat_id;
                    if (j12 != 0) {
                        int i19 = 0;
                        while (true) {
                            if (i19 >= tLRPC$messages_Dialogs.chats.size()) {
                                j6 = 0;
                                break;
                            }
                            TLRPC$Chat tLRPC$Chat6 = tLRPC$messages_Dialogs.chats.get(i19);
                            if (tLRPC$Chat6.id == j12) {
                                j6 = tLRPC$Chat6.access_hash;
                                break;
                            }
                            i19++;
                        }
                        j2 = j12;
                        i8 = i17;
                        j4 = j6;
                        j3 = 0;
                        i6 = size2;
                        i7 = i16;
                        j = 0;
                    } else {
                        long j13 = tLRPC$Peer2.user_id;
                        if (j13 != 0) {
                            int i20 = 0;
                            while (true) {
                                if (i20 >= tLRPC$messages_Dialogs.users.size()) {
                                    j5 = 0;
                                    break;
                                }
                                TLRPC$User tLRPC$User2 = tLRPC$messages_Dialogs.users.get(i20);
                                if (tLRPC$User2.id == j13) {
                                    j5 = tLRPC$User2.access_hash;
                                    break;
                                }
                                i20++;
                            }
                            i8 = i17;
                            j4 = j5;
                            j2 = 0;
                            j3 = 0;
                            i6 = size2;
                            i7 = i16;
                            j = j13;
                        } else {
                            i8 = i17;
                            j2 = 0;
                            j3 = 0;
                            j4 = 0;
                            i6 = size2;
                            i7 = i16;
                            j = 0;
                        }
                    }
                }
            }
            tLRPC$Message = tLRPC$Message4;
            long j14 = j;
            longSparseArray2 = longSparseArray9;
            longSparseArray = longSparseArray13;
            longSparseArray3 = longSparseArray10;
            longSparseArray4 = longSparseArray11;
            r13 = 0;
            getUserConfig().setDialogsLoadOffset(i, i7, i8, j14, j2, j3, j4);
            getUserConfig().setTotalDialogsCount(i, i6);
            getUserConfig().saveConfig(false);
        }
        final ArrayList arrayList5 = new ArrayList();
        int i21 = 0;
        while (i21 < tLRPC$messages_Dialogs.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i21);
            DialogObject.initDialog(tLRPC$Dialog);
            long j15 = tLRPC$Dialog.id;
            if (j15 == 0) {
                sparseArray2 = sparseArray5;
            } else {
                if (!DialogObject.isEncryptedDialog(j15) || sparseArray5 == null) {
                    sparseArray2 = sparseArray5;
                    messagesController = this;
                } else {
                    sparseArray2 = sparseArray5;
                    messagesController = this;
                    if (sparseArray2.get(DialogObject.getEncryptedChatId(tLRPC$Dialog.id)) == null) {
                    }
                }
                long j16 = messagesController.promoDialogId;
                if (j16 != 0 && j16 == tLRPC$Dialog.id) {
                    messagesController.promoDialog = tLRPC$Dialog;
                }
                if (tLRPC$Dialog.last_message_date == 0) {
                    longSparseArray6 = longSparseArray4;
                    ArrayList arrayList6 = (ArrayList) longSparseArray6.get(tLRPC$Dialog.id);
                    if (arrayList6 != null) {
                        int i22 = Integer.MIN_VALUE;
                        for (int i23 = 0; i23 < arrayList6.size(); i23++) {
                            MessageObject messageObject3 = (MessageObject) arrayList6.get(i23);
                            if (messageObject3 != null && (tLRPC$Message2 = messageObject3.messageOwner) != null && (i5 = tLRPC$Message2.date) > i22) {
                                i22 = i5;
                            }
                        }
                        if (i22 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i22;
                        }
                    }
                } else {
                    longSparseArray6 = longSparseArray4;
                }
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    longSparseArray7 = longSparseArray;
                    TLRPC$Chat tLRPC$Chat7 = (TLRPC$Chat) longSparseArray7.get(-tLRPC$Dialog.id);
                    if (tLRPC$Chat7 != null) {
                        z4 = tLRPC$Chat7.megagroup;
                        if (ChatObject.isNotInChat(tLRPC$Chat7)) {
                            long j17 = messagesController.promoDialogId;
                            if (j17 != 0) {
                            }
                            longSparseArray = longSparseArray7;
                            longSparseArray8 = longSparseArray3;
                        }
                    } else {
                        z4 = true;
                    }
                    messagesController.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                    longSparseArray8 = longSparseArray3;
                    longSparseArray8.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    if (z4) {
                        longSparseArray = longSparseArray7;
                    } else {
                        longSparseArray = longSparseArray7;
                        if (i2 == messagesController.DIALOGS_LOAD_TYPE_CACHE && ((tLRPC$Dialog.read_outbox_max_id == 0 || tLRPC$Dialog.read_inbox_max_id == 0) && tLRPC$Dialog.top_message != 0)) {
                            arrayList5.add(tLRPC$Dialog);
                        }
                    }
                    num = messagesController.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = Integer.valueOf((int) r13);
                    }
                    messagesController.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    num2 = messagesController.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = Integer.valueOf((int) r13);
                    }
                    messagesController.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                } else {
                    longSparseArray7 = longSparseArray;
                    if (!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray7.get(-tLRPC$Dialog.id)) == null || (tLRPC$Chat.migrated_to == null && !ChatObject.isNotInChat(tLRPC$Chat))) {
                        z4 = true;
                        longSparseArray8 = longSparseArray3;
                        longSparseArray8.put(tLRPC$Dialog.id, tLRPC$Dialog);
                        if (z4) {
                        }
                        num = messagesController.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num == null) {
                        }
                        messagesController.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                        num2 = messagesController.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                        if (num2 == null) {
                        }
                        messagesController.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                    }
                    longSparseArray = longSparseArray7;
                    longSparseArray8 = longSparseArray3;
                }
                i21++;
                sparseArray5 = sparseArray2;
                longSparseArray3 = longSparseArray8;
                longSparseArray4 = longSparseArray6;
            }
            longSparseArray8 = longSparseArray3;
            longSparseArray6 = longSparseArray4;
            i21++;
            sparseArray5 = sparseArray2;
            longSparseArray3 = longSparseArray8;
            longSparseArray4 = longSparseArray6;
        }
        final LongSparseArray longSparseArray14 = longSparseArray3;
        final LongSparseArray longSparseArray15 = longSparseArray4;
        if (i2 != this.DIALOGS_LOAD_TYPE_CACHE) {
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Dialogs.messages);
            int i24 = 0;
            while (i24 < tLRPC$messages_Dialogs.messages.size()) {
                TLRPC$Message tLRPC$Message6 = tLRPC$messages_Dialogs.messages.get(i24);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message6.action;
                if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                    longSparseArray5 = longSparseArray2;
                    TLRPC$User tLRPC$User3 = (TLRPC$User) longSparseArray5.get(tLRPC$MessageAction.user_id);
                    if (tLRPC$User3 != null && tLRPC$User3.bot) {
                        tLRPC$Message6.reply_markup = new TLRPC$TL_replyKeyboardHide();
                        tLRPC$Message6.flags |= 64;
                    }
                } else {
                    longSparseArray5 = longSparseArray2;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message6.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message6.unread = r13;
                    tLRPC$Message6.media_unread = r13;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message6.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num3 = concurrentHashMap.get(Long.valueOf(tLRPC$Message6.dialog_id));
                    if (num3 == null) {
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message6.out, tLRPC$Message6.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message6.dialog_id), num3);
                    }
                    tLRPC$Message6.unread = num3.intValue() < tLRPC$Message6.id;
                }
                i24++;
                longSparseArray2 = longSparseArray5;
            }
            getMessagesStorage().putDialogs(tLRPC$messages_Dialogs, i2 == this.DIALOGS_LOAD_TYPE_UNKNOWN ? 3 : 0);
        }
        if (i2 == this.DIALOGS_LOAD_TYPE_CHANNEL) {
            final TLRPC$Chat tLRPC$Chat8 = tLRPC$messages_Dialogs.chats.get(r13);
            getChannelDifference(tLRPC$Chat8.id);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda231
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processLoadedDialogs$207(tLRPC$Chat8);
                }
            });
        }
        final TLRPC$Message tLRPC$Message7 = tLRPC$Message;
        final LongSparseArray longSparseArray16 = longSparseArray;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda232
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$208(tLRPC$Message7, i2, tLRPC$messages_Dialogs, arrayList, arrayList2, z3, i, longSparseArray14, longSparseArray15, longSparseArray16, i3, z2, i4, arrayList5);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDialogs$206(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList, int i, boolean z, long[] jArr, int i2) {
        putUsers(tLRPC$messages_Dialogs.users, true);
        if (arrayList != null) {
            for (int i3 = 0; i3 < arrayList.size(); i3++) {
                long j = ((TLRPC$UserFull) arrayList.get(i3)).id;
                this.fullUsers.put(j, (TLRPC$UserFull) arrayList.get(i3));
                getTranslateController().updateDialogFull(j);
            }
        }
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (jArr[0] == 2147483647L) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processLoadedDialogs$207(TLRPC$Chat tLRPC$Chat) {
        checkChatInviter(tLRPC$Chat.id, true);
    }

    /* JADX WARN: Code restructure failed: missing block: B:474:0x02a1, code lost:
        if (r4.size() == r8.size()) goto L159;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v13 */
    /* JADX WARN: Type inference failed for: r13v14 */
    /* JADX WARN: Type inference failed for: r13v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processLoadedDialogs$208(TLRPC$Message tLRPC$Message, int i, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList, ArrayList arrayList2, boolean z, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, int i3, boolean z2, int i4, ArrayList arrayList3) {
        int i5;
        int i6;
        int i7;
        int i8;
        boolean z3;
        int i9;
        boolean z4;
        boolean z5;
        boolean z6;
        int i10 = i2;
        LongSparseArray longSparseArray4 = longSparseArray;
        if (tLRPC$Message != null) {
            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, tLRPC$Message.date);
        } else {
            this.dialogsLoadedTillDate = Integer.MIN_VALUE;
        }
        if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
            applyDialogsNotificationsSettings(tLRPC$messages_Dialogs.dialogs);
            getMediaDataController().loadDraftsIfNeed();
        }
        putUsers(tLRPC$messages_Dialogs.users, i == this.DIALOGS_LOAD_TYPE_CACHE);
        putChats(tLRPC$messages_Dialogs.chats, i == this.DIALOGS_LOAD_TYPE_CACHE);
        if (arrayList != null) {
            for (int i11 = 0; i11 < arrayList.size(); i11++) {
                long j = ((TLRPC$UserFull) arrayList.get(i11)).id;
                this.fullUsers.put(j, (TLRPC$UserFull) arrayList.get(i11));
                getTranslateController().updateDialogFull(j);
            }
        }
        if (arrayList2 != null) {
            for (int i12 = 0; i12 < arrayList2.size(); i12++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList2.get(i12);
                if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                    getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, null);
                }
                putEncryptedChat(tLRPC$EncryptedChat, true);
            }
        }
        if (!z && i != this.DIALOGS_LOAD_TYPE_UNKNOWN && i != this.DIALOGS_LOAD_TYPE_CHANNEL) {
            this.loadingDialogs.put(i10, false);
        }
        this.dialogsLoaded = true;
        if (!z || this.allDialogs.isEmpty()) {
            i5 = 0;
        } else {
            ArrayList<TLRPC$Dialog> arrayList4 = this.allDialogs;
            i5 = arrayList4.get(arrayList4.size() - 1).last_message_date;
        }
        boolean isFeatureAvailable = getTranslateController().isFeatureAvailable();
        int i13 = 0;
        int i14 = 0;
        boolean z7 = false;
        while (true) {
            i6 = i14;
            if (i13 >= longSparseArray.size()) {
                break;
            }
            long keyAt = longSparseArray4.keyAt(i13);
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray4.valueAt(i13);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            if (z && tLRPC$Dialog2 != null) {
                tLRPC$Dialog2.folder_id = tLRPC$Dialog.folder_id;
            }
            if (!z || i5 == 0 || tLRPC$Dialog.last_message_date >= i5) {
                if (i == this.DIALOGS_LOAD_TYPE_CACHE || !(tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage)) {
                    i9 = i5;
                } else {
                    i9 = i5;
                    getMediaDataController().saveDraft(tLRPC$Dialog.id, 0L, tLRPC$Dialog.draft, null, false);
                }
                if (tLRPC$Dialog.folder_id != i10) {
                    i6++;
                }
                ArrayList<MessageObject> arrayList5 = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList5);
                    if (arrayList5 != null) {
                        for (int i15 = 0; i15 < arrayList5.size(); i15++) {
                            MessageObject messageObject = arrayList5.get(i15);
                            if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                long j2 = messageObject.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject);
                                }
                            }
                        }
                    }
                    if (isFeatureAvailable) {
                        getTranslateController().checkDialogMessageSure(keyAt);
                    }
                    i14 = i6;
                    z7 = true;
                } else {
                    if (i != this.DIALOGS_LOAD_TYPE_CACHE) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    ArrayList<MessageObject> arrayList6 = this.dialogMessage.get(keyAt);
                    for (int i16 = 0; arrayList6 != null && i16 < arrayList6.size(); i16++) {
                        if (arrayList6.get(i16) != null && arrayList6.get(i16).deleted) {
                            z4 = true;
                            break;
                        }
                    }
                    z4 = false;
                    if (z4 || arrayList6 == null || tLRPC$Dialog2.top_message > 0) {
                        z5 = z7;
                        if (tLRPC$Dialog.top_message < tLRPC$Dialog2.top_message) {
                            if ((arrayList6 == null) == (arrayList5 == null)) {
                                if (arrayList6 != null) {
                                    if (arrayList5 != null) {
                                    }
                                }
                            }
                        }
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList5);
                        if (arrayList6 != null) {
                            for (int i17 = 0; i17 < arrayList6.size(); i17++) {
                                MessageObject messageObject2 = arrayList6.get(i17);
                                if (messageObject2 != null) {
                                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                        this.dialogMessagesByIds.remove(messageObject2.getId());
                                    }
                                    long j3 = messageObject2.messageOwner.random_id;
                                    if (j3 != 0) {
                                        this.dialogMessagesByRandomIds.remove(j3);
                                    }
                                }
                            }
                        }
                        if (arrayList5 != null) {
                            for (int i18 = 0; i18 < arrayList5.size(); i18++) {
                                MessageObject messageObject3 = arrayList5.get(i18);
                                if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                    int i19 = 0;
                                    while (true) {
                                        if (arrayList6 == null || i19 >= arrayList6.size()) {
                                            break;
                                        }
                                        MessageObject messageObject4 = arrayList6.get(i19);
                                        if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                            messageObject3.deleted = messageObject4.deleted;
                                            break;
                                        }
                                        i19++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                    long j4 = messageObject3.messageOwner.random_id;
                                    if (j4 != 0) {
                                        this.dialogMessagesByRandomIds.put(j4, messageObject3);
                                    }
                                }
                            }
                        }
                        if (isFeatureAvailable) {
                            getTranslateController().checkDialogMessageSure(keyAt);
                        }
                    } else {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, arrayList5);
                        int i20 = 0;
                        while (i20 < arrayList6.size()) {
                            MessageObject messageObject5 = arrayList6.get(i20);
                            if (messageObject5 == null) {
                                z6 = z7;
                            } else {
                                z6 = z7;
                                if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.remove(messageObject5.getId());
                                }
                                long j5 = messageObject5.messageOwner.random_id;
                                if (j5 != 0) {
                                    this.dialogMessagesByRandomIds.remove(j5);
                                }
                            }
                            i20++;
                            z7 = z6;
                        }
                        z5 = z7;
                        if (arrayList5 != null) {
                            for (int i21 = 0; i21 < arrayList5.size(); i21++) {
                                MessageObject messageObject6 = arrayList5.get(i21);
                                if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                    int i22 = 0;
                                    while (true) {
                                        if (i22 >= arrayList6.size()) {
                                            break;
                                        }
                                        MessageObject messageObject7 = arrayList6.get(i22);
                                        if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                            messageObject6.deleted = messageObject7.deleted;
                                            break;
                                        }
                                        i22++;
                                    }
                                    this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                    long j6 = messageObject6.messageOwner.random_id;
                                    if (j6 != 0) {
                                        this.dialogMessagesByRandomIds.put(j6, messageObject6);
                                    }
                                }
                            }
                        }
                        if (isFeatureAvailable) {
                            getTranslateController().checkDialogMessageSure(keyAt);
                        }
                    }
                    i14 = i6;
                    z7 = z5;
                }
            } else {
                i14 = i6;
                i9 = i5;
            }
            i13++;
            i5 = i9;
            i10 = i2;
            longSparseArray4 = longSparseArray;
        }
        boolean z8 = z7;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i23 = 0; i23 < size; i23++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i23);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(z ? longSparseArray3 : null);
        putAllNeededDraftDialogs();
        if (i == this.DIALOGS_LOAD_TYPE_CHANNEL || i == this.DIALOGS_LOAD_TYPE_UNKNOWN || z) {
            i7 = i2;
        } else {
            SparseBooleanArray sparseBooleanArray = this.dialogsEndReached;
            if ((tLRPC$messages_Dialogs.dialogs.size() == 0 || tLRPC$messages_Dialogs.dialogs.size() != i3) && i == 0) {
                i7 = i2;
                z3 = true;
            } else {
                i7 = i2;
                z3 = false;
            }
            sparseBooleanArray.put(i7, z3);
            if (i6 > 0 && i6 < 20 && i7 == 0) {
                this.dialogsEndReached.put(1, true);
                if (getUserConfig().getDialogLoadOffsets(i7)[0] == 2147483647L) {
                    this.serverDialogsEndReached.put(1, true);
                }
            }
            if (!z2) {
                this.serverDialogsEndReached.put(i7, (tLRPC$messages_Dialogs.dialogs.size() == 0 || tLRPC$messages_Dialogs.dialogs.size() != i3) && i == 0);
            }
        }
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(i7);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i7);
        if (z2 || z || totalDialogsCount >= 400) {
            i8 = 0;
        } else {
            i8 = 0;
            i8 = 0;
            i8 = 0;
            long j7 = dialogLoadOffsets[0];
            if (j7 != -1 && j7 != 2147483647L) {
                loadDialogs(i7, 0, 100, false);
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[i8]);
        if (z) {
            getUserConfig().migrateOffsetId = i4;
            getUserConfig().saveConfig(i8);
            this.migratingDialogs = i8;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[i8]);
        } else if (!z8 && i == this.DIALOGS_LOAD_TYPE_CACHE && this.dialogsEndReached.get(i7)) {
            loadDialogs(i7, i8, i3, i8);
        }
        migrateDialogs(getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
        if (!arrayList3.isEmpty()) {
            reloadDialogsReadValue(arrayList3, 0L);
        }
        loadUnreadDialogs();
        if (tLRPC$messages_Dialogs.dialogs != null) {
            for (int i24 = i8; i24 < tLRPC$messages_Dialogs.dialogs.size(); i24++) {
                if (isForum(tLRPC$messages_Dialogs.dialogs.get(i24).id)) {
                    this.topicsController.preloadTopics(-tLRPC$messages_Dialogs.dialogs.get(i24).id);
                }
            }
        }
    }

    private void applyDialogNotificationsSettings(long j, long j2, TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings) {
        getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j, j2, tLRPC$PeerNotifySettings);
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC$Dialog> arrayList) {
        SharedPreferences.Editor edit = getNotificationsSettings(this.currentAccount).edit();
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = arrayList.get(i);
            if (tLRPC$Dialog.peer != null && (tLRPC$Dialog.notify_settings instanceof TLRPC$TL_peerNotifySettings)) {
                getNotificationsController().getNotificationsSettingsFacade().setSettingsForDialog(edit, tLRPC$Dialog, tLRPC$Dialog.notify_settings);
            }
        }
        edit.apply();
    }

    public void reloadMentionsCountForChannel(final TLRPC$InputPeer tLRPC$InputPeer, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
            } catch (Exception e2) {
                nativeByteBuffer = null;
                e = e2;
            }
            try {
                nativeByteBuffer.writeInt32(22);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
                tLRPC$TL_messages_getUnreadMentions.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getUnreadMentions.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda357
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$reloadMentionsCountForChannel$210(tLRPC$InputPeer, j, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions2 = new TLRPC$TL_messages_getUnreadMentions();
        tLRPC$TL_messages_getUnreadMentions2.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getUnreadMentions2.limit = 1;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda357
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadMentionsCountForChannel$210(tLRPC$InputPeer, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannel$210(TLRPC$InputPeer tLRPC$InputPeer, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        if (tLRPC$messages_Messages != null) {
            int i = tLRPC$messages_Messages.count;
            if (i == 0) {
                i = tLRPC$messages_Messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount(-tLRPC$InputPeer.channel_id, 0L, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void reloadMentionsCountForChannels(final ArrayList<Long> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda193
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$211(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannels$211(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            reloadMentionsCountForChannel(getInputPeer(-((Long) arrayList.get(i)).longValue()), 0L);
        }
    }

    public void processDialogsUpdateRead(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda434
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$212(longSparseIntArray, longSparseIntArray2);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:176:0x00f6, code lost:
        r5 = true;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdateRead$212(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2) {
        boolean z;
        if (longSparseIntArray != null) {
            z = false;
            for (int i = 0; i < longSparseIntArray.size(); i++) {
                long keyAt = longSparseIntArray.keyAt(i);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                if (tLRPC$Dialog == null) {
                    int i2 = 0;
                    while (true) {
                        if (i2 >= this.allDialogs.size()) {
                            break;
                        } else if (this.allDialogs.get(i2).id == keyAt) {
                            this.dialogs_dict.put(keyAt, this.allDialogs.get(i2));
                            tLRPC$Dialog = this.allDialogs.get(i2);
                            break;
                        } else {
                            i2++;
                        }
                    }
                }
                if (tLRPC$Dialog == null) {
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("can't update dialog " + keyAt + " with new unread " + longSparseIntArray.valueAt(i));
                    }
                    this.pendingUnreadCounter.put(keyAt, longSparseIntArray.valueAt(i));
                }
                if (tLRPC$Dialog != null) {
                    int i3 = tLRPC$Dialog.unread_count;
                    tLRPC$Dialog.unread_count = longSparseIntArray.valueAt(i);
                    if (BuildVars.DEBUG_PRIVATE_VERSION) {
                        FileLog.d("update dialog " + keyAt + " with new unread " + tLRPC$Dialog.unread_count);
                    }
                    if (i3 != 0 && tLRPC$Dialog.unread_count == 0) {
                        if (!isDialogMuted(keyAt, 0L)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i4 >= dialogFilterArr.length) {
                                    break;
                                }
                                DialogFilter dialogFilter = dialogFilterArr[i4];
                                if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                                i4++;
                            }
                        }
                    } else if (i3 == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_count != 0) {
                        if (!isDialogMuted(keyAt, 0L)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i5 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i5 >= dialogFilterArr2.length) {
                                    break;
                                }
                                DialogFilter dialogFilter2 = dialogFilterArr2[i5];
                                if (dialogFilter2 != null && (dialogFilter2.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                                i5++;
                            }
                        }
                    }
                }
            }
        } else {
            z = false;
        }
        if (longSparseIntArray2 != null) {
            for (int i6 = 0; i6 < longSparseIntArray2.size(); i6++) {
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(longSparseIntArray2.keyAt(i6));
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.unread_mentions_count = longSparseIntArray2.valueAt(i6);
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), 0L, Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i7 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i7 >= dialogFilterArr3.length) {
                                break;
                            }
                            DialogFilter dialogFilter3 = dialogFilterArr3[i7];
                            if (dialogFilter3 != null) {
                                int i8 = dialogFilter3.flags;
                                if ((DIALOG_FILTER_FLAG_EXCLUDE_MUTED & i8) != 0 || (i8 & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                    break;
                                }
                            }
                            i7++;
                        }
                        z = true;
                    }
                }
            }
        }
        if (z) {
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        if (longSparseIntArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
        }
    }

    public void checkLastDialogMessage(final TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (DialogObject.isEncryptedDialog(tLRPC$Dialog.id) || this.checkingLastMessagesDialogs.indexOfKey(tLRPC$Dialog.id) >= 0) {
            return;
        }
        TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
        if (tLRPC$InputPeer == null) {
            tLRPC$InputPeer = getInputPeer(tLRPC$Dialog.id);
        }
        tLRPC$TL_messages_getHistory.peer = tLRPC$InputPeer;
        if (tLRPC$InputPeer == null) {
            return;
        }
        tLRPC$TL_messages_getHistory.limit = 1;
        this.checkingLastMessagesDialogs.put(tLRPC$Dialog.id, Boolean.TRUE);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id);
        }
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_getHistory.peer.getObjectSize() + 60);
            } catch (Exception e2) {
                nativeByteBuffer = null;
                e = e2;
            }
            try {
                nativeByteBuffer.writeInt32(14);
                nativeByteBuffer.writeInt64(tLRPC$Dialog.id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.top_message);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.read_inbox_max_id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.read_outbox_max_id);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_count);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.last_message_date);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.pts);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.flags);
                nativeByteBuffer.writeBool(tLRPC$Dialog.pinned);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.pinnedNum);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_mentions_count);
                nativeByteBuffer.writeBool(tLRPC$Dialog.unread_mark);
                nativeByteBuffer.writeInt32(tLRPC$Dialog.folder_id);
                tLRPC$TL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
            } catch (Exception e3) {
                e = e3;
                FileLog.e(e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda267
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$216(tLRPC$Dialog, j, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda267
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkLastDialogMessage$216(tLRPC$Dialog, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$216(final TLRPC$Dialog tLRPC$Dialog, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(tLRPC$Dialog.id, tLRPC$messages_Messages.messages);
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has message");
                }
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.flags = tLRPC$Dialog.flags;
                tLRPC$TL_dialog.top_message = tLRPC$Message.id;
                tLRPC$TL_dialog.last_message_date = tLRPC$Message.date;
                tLRPC$TL_dialog.notify_settings = tLRPC$Dialog.notify_settings;
                tLRPC$TL_dialog.pts = tLRPC$Dialog.pts;
                tLRPC$TL_dialog.unread_count = tLRPC$Dialog.unread_count;
                tLRPC$TL_dialog.unread_mark = tLRPC$Dialog.unread_mark;
                tLRPC$TL_dialog.unread_mentions_count = tLRPC$Dialog.unread_mentions_count;
                tLRPC$TL_dialog.unread_reactions_count = tLRPC$Dialog.unread_reactions_count;
                tLRPC$TL_dialog.read_inbox_max_id = tLRPC$Dialog.read_inbox_max_id;
                tLRPC$TL_dialog.read_outbox_max_id = tLRPC$Dialog.read_outbox_max_id;
                tLRPC$TL_dialog.pinned = tLRPC$Dialog.pinned;
                tLRPC$TL_dialog.pinnedNum = tLRPC$Dialog.pinnedNum;
                tLRPC$TL_dialog.folder_id = tLRPC$Dialog.folder_id;
                long j2 = tLRPC$Dialog.id;
                tLRPC$TL_dialog.id = j2;
                tLRPC$Message.dialog_id = j2;
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$messages_Messages.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$messages_Messages.chats);
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$messages_Messages.messages);
                tLRPC$TL_messages_dialogs.count = 1;
                processDialogsUpdate(tLRPC$TL_messages_dialogs, null, false);
                getMessagesStorage().putMessages(tLRPC$messages_Messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, 0, 0L);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda104
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$214(tLRPC$Dialog);
                    }
                });
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda105
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkLastDialogMessage$215(tLRPC$Dialog);
            }
        });
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$214(final TLRPC$Dialog tLRPC$Dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has not message");
        }
        if (getMediaDataController().getDraft(tLRPC$Dialog.id, 0L) == null) {
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(tLRPC$Dialog.id, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda426
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkLastDialogMessage$213(tLRPC$Dialog);
                    }
                });
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog top message " + tLRPC$Dialog2.top_message);
            }
            if (tLRPC$Dialog2.top_message == 0) {
                deleteDialog(tLRPC$Dialog.id, 3);
            }
        }
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$213(TLRPC$Dialog tLRPC$Dialog) {
        deleteDialog(tLRPC$Dialog.id, 3);
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$215(TLRPC$Dialog tLRPC$Dialog) {
        this.checkingLastMessagesDialogs.delete(tLRPC$Dialog.id);
    }

    public void processDialogsUpdate(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, final boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda391
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$218(tLRPC$messages_Dialogs, z);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:134:0x009f, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:144:0x00bc, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L32;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$218(final TLRPC$messages_Dialogs tLRPC$messages_Dialogs, final boolean z) {
        TLRPC$Chat tLRPC$Chat;
        LongSparseIntArray longSparseIntArray;
        TLRPC$Chat tLRPC$Chat2;
        ArrayList arrayList;
        TLRPC$Message tLRPC$Message;
        int i;
        int i2;
        ArrayList<MessageObject> arrayList2;
        final LongSparseArray longSparseArray = new LongSparseArray();
        final LongSparseArray longSparseArray2 = new LongSparseArray();
        LongSparseArray longSparseArray3 = new LongSparseArray(tLRPC$messages_Dialogs.users.size());
        LongSparseArray longSparseArray4 = new LongSparseArray(tLRPC$messages_Dialogs.chats.size());
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray();
        for (int i3 = 0; i3 < tLRPC$messages_Dialogs.users.size(); i3++) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs.users.get(i3);
            longSparseArray3.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i4 = 0; i4 < tLRPC$messages_Dialogs.chats.size(); i4++) {
            TLRPC$Chat tLRPC$Chat3 = tLRPC$messages_Dialogs.chats.get(i4);
            longSparseArray4.put(tLRPC$Chat3.id, tLRPC$Chat3);
        }
        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
        int i5 = 0;
        while (i5 < tLRPC$messages_Dialogs.messages.size()) {
            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Dialogs.messages.get(i5);
            LongSparseIntArray longSparseIntArray3 = longSparseIntArray2;
            long j = this.promoDialogId;
            if (j == 0 || j != tLRPC$Message2.dialog_id) {
                TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
                if (tLRPC$Peer != null) {
                    long j2 = tLRPC$Peer.channel_id;
                    if (j2 != 0) {
                        TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j2);
                        if (tLRPC$Chat4 != null) {
                        }
                    }
                }
                if (tLRPC$Peer != null) {
                    long j3 = tLRPC$Peer.chat_id;
                    if (j3 != 0) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(j3);
                        if (tLRPC$Chat5 != null) {
                            if (tLRPC$Chat5.migrated_to == null) {
                            }
                            i2 = i5;
                            arrayList2 = arrayList3;
                            i5 = i2 + 1;
                            arrayList3 = arrayList2;
                            longSparseIntArray2 = longSparseIntArray3;
                        }
                    }
                }
            }
            i2 = i5;
            arrayList2 = arrayList3;
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, false);
            arrayList2.add(messageObject);
            long dialogId = messageObject.getDialogId();
            ArrayList arrayList4 = (ArrayList) longSparseArray2.get(dialogId);
            if (arrayList4 == null) {
                arrayList4 = new ArrayList(1);
            }
            arrayList4.add(messageObject);
            longSparseArray2.put(dialogId, arrayList4);
            i5 = i2 + 1;
            arrayList3 = arrayList2;
            longSparseIntArray2 = longSparseIntArray3;
        }
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray2;
        getFileLoader().checkMediaExistance(arrayList3);
        int i6 = 0;
        while (i6 < tLRPC$messages_Dialogs.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs.dialogs.get(i6);
            DialogObject.initDialog(tLRPC$Dialog);
            long j4 = this.promoDialogId;
            if ((j4 == 0 || j4 != tLRPC$Dialog.id) && (!DialogObject.isChannel(tLRPC$Dialog) ? !(!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) == null || (tLRPC$Chat.migrated_to == null && !ChatObject.isNotInChat(tLRPC$Chat))) : !((tLRPC$Chat2 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) == null || !ChatObject.isNotInChat(tLRPC$Chat2)))) {
                longSparseIntArray = longSparseIntArray4;
            } else {
                if (tLRPC$Dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id)) != null) {
                    int i7 = Integer.MIN_VALUE;
                    for (int i8 = 0; i8 < arrayList.size(); i8++) {
                        MessageObject messageObject2 = (MessageObject) arrayList.get(i8);
                        if (messageObject2 != null && (tLRPC$Message = messageObject2.messageOwner) != null && (i = tLRPC$Message.date) > i7) {
                            i7 = i;
                        }
                    }
                    if (i7 > Integer.MIN_VALUE) {
                        tLRPC$Dialog.last_message_date = i7;
                    }
                }
                longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                longSparseIntArray = longSparseIntArray4;
                longSparseIntArray.put(tLRPC$Dialog.id, tLRPC$Dialog.unread_count);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                int i9 = tLRPC$Dialog.read_inbox_max_id;
                int i10 = tLRPC$Dialog.top_message;
                if (i9 > i10) {
                    tLRPC$Dialog.read_inbox_max_id = i10;
                }
                int intValue = num.intValue();
                int i11 = tLRPC$Dialog.top_message;
                if (intValue > i11) {
                    num = Integer.valueOf(i11);
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            }
            i6++;
            longSparseIntArray4 = longSparseIntArray;
        }
        final LongSparseIntArray longSparseIntArray5 = longSparseIntArray4;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda443
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$217(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2, z, longSparseIntArray5);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:360:0x02e9, code lost:
        if (r8.size() == r12.size()) goto L148;
     */
    /* JADX WARN: Removed duplicated region for block: B:400:0x03ab  */
    /* JADX WARN: Removed duplicated region for block: B:420:0x03b0 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processDialogsUpdate$217(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, boolean z, LongSparseIntArray longSparseIntArray) {
        int i;
        boolean z2;
        int i2 = 1;
        putUsers(tLRPC$messages_Dialogs.users, true);
        putChats(tLRPC$messages_Dialogs.chats, true);
        boolean isFeatureAvailable = getTranslateController().isFeatureAvailable();
        int i3 = 0;
        while (i3 < longSparseArray.size()) {
            long keyAt = longSparseArray.keyAt(i3);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processDialogsUpdate " + keyAt);
            }
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray.valueAt(i3);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            ArrayList<MessageObject> arrayList = (ArrayList) longSparseArray2.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog null");
                }
                this.nextDialogsCacheOffset.put(tLRPC$Dialog.folder_id, this.nextDialogsCacheOffset.get(tLRPC$Dialog.folder_id, 0) + i2);
                i = i3;
                this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                this.dialogMessage.put(keyAt, arrayList);
                if (arrayList == null || arrayList.size() <= 0) {
                    if (z) {
                        checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message is null");
                    }
                } else {
                    for (int i4 = 0; i4 < arrayList.size(); i4++) {
                        MessageObject messageObject = arrayList.get(i4);
                        if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                            long j = messageObject.messageOwner.random_id;
                            if (j != 0) {
                                this.dialogMessagesByRandomIds.put(j, messageObject);
                            }
                        }
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message not null");
                    }
                }
                if (isFeatureAvailable) {
                    getTranslateController().checkDialogMessageSure(keyAt);
                }
            } else {
                i = i3;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog not null");
                }
                tLRPC$Dialog2.unread_count = tLRPC$Dialog.unread_count;
                int i5 = tLRPC$Dialog2.unread_mentions_count;
                int i6 = tLRPC$Dialog.unread_mentions_count;
                if (i5 != i6) {
                    tLRPC$Dialog2.unread_mentions_count = i6;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), 0L, Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                }
                int i7 = tLRPC$Dialog2.unread_reactions_count;
                int i8 = tLRPC$Dialog.unread_reactions_count;
                if (i7 != i8) {
                    tLRPC$Dialog2.unread_reactions_count = i8;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(tLRPC$Dialog2.id), 0L, Integer.valueOf(tLRPC$Dialog2.unread_reactions_count), null);
                }
                ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(keyAt);
                for (int i9 = 0; arrayList2 != null && i9 < arrayList2.size(); i9++) {
                    if (arrayList2.get(i9) != null && arrayList2.get(i9).deleted) {
                        z2 = true;
                        break;
                    }
                }
                z2 = false;
                if (BuildVars.LOGS_ENABLED) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("processDialogsUpdate oldMsgs (count = ");
                    sb.append(arrayList2 == null ? "null" : Integer.valueOf(arrayList2.size()));
                    sb.append(") old top_message = ");
                    sb.append(tLRPC$Dialog2.top_message);
                    sb.append(" new top_message = ");
                    sb.append(tLRPC$Dialog.top_message);
                    sb.append("  unread_count =");
                    sb.append(tLRPC$Dialog2.unread_count);
                    sb.append(" fromCache=");
                    sb.append(z);
                    FileLog.d(sb.toString());
                    FileLog.d("processDialogsUpdate oldMsgDeleted " + z2);
                }
                if (arrayList2 == null || tLRPC$Dialog2.top_message > 0) {
                    if (!z2 && tLRPC$Dialog.top_message <= tLRPC$Dialog2.top_message) {
                        if ((arrayList2 == null) == (arrayList == null)) {
                            if (arrayList2 != null) {
                                if (arrayList != null) {
                                }
                            }
                            if (z && arrayList == null) {
                                checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                                if (!BuildVars.LOGS_ENABLED) {
                                    FileLog.d("processDialogsUpdate new messages are null");
                                }
                            }
                        }
                    }
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList);
                    for (int i10 = 0; arrayList2 != null && i10 < arrayList2.size(); i10++) {
                        MessageObject messageObject2 = arrayList2.get(i10);
                        if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject2.getId());
                            long j2 = messageObject2.messageOwner.random_id;
                            if (j2 != 0) {
                                this.dialogMessagesByRandomIds.remove(j2);
                            }
                        }
                    }
                    if (arrayList != null) {
                        for (int i11 = 0; i11 < arrayList.size(); i11++) {
                            MessageObject messageObject3 = arrayList.get(i11);
                            int i12 = 0;
                            while (true) {
                                if (arrayList2 == null || i12 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject4 = arrayList2.get(i12);
                                if (messageObject4 != null && messageObject4.getId() == messageObject3.getId()) {
                                    messageObject3.deleted = messageObject4.deleted;
                                    break;
                                }
                                i12++;
                            }
                            if (messageObject3 != null && messageObject3.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject3.messageOwner.date);
                                long j3 = messageObject3.messageOwner.random_id;
                                if (j3 != 0) {
                                    this.dialogMessagesByRandomIds.put(j3, messageObject3);
                                }
                            }
                        }
                    }
                    if (isFeatureAvailable) {
                        getTranslateController().checkDialogMessageSure(keyAt);
                    }
                    if (z) {
                        checkLastDialogMessage(tLRPC$Dialog, null, 0L);
                        if (!BuildVars.LOGS_ENABLED) {
                        }
                    }
                } else if (z2 || messagesMaxDate(arrayList) > messagesMaxDate(arrayList2)) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, arrayList);
                    for (int i13 = 0; i13 < arrayList2.size(); i13++) {
                        MessageObject messageObject5 = arrayList2.get(i13);
                        if (messageObject5 != null && messageObject5.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(messageObject5.getId());
                        }
                    }
                    if (arrayList != null) {
                        for (int i14 = 0; i14 < arrayList.size(); i14++) {
                            MessageObject messageObject6 = arrayList.get(i14);
                            int i15 = 0;
                            while (true) {
                                if (i15 >= arrayList2.size()) {
                                    break;
                                }
                                MessageObject messageObject7 = arrayList2.get(i15);
                                if (messageObject7 != null && messageObject7.getId() == messageObject6.getId()) {
                                    messageObject6.deleted = messageObject7.deleted;
                                    break;
                                }
                                i15++;
                            }
                            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(messageObject6.getId(), messageObject6);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject6.messageOwner.date);
                                long j4 = messageObject6.messageOwner.random_id;
                                if (j4 != 0) {
                                    this.dialogMessagesByRandomIds.put(j4, messageObject6);
                                }
                            }
                        }
                    }
                    for (int i16 = 0; i16 < arrayList2.size(); i16++) {
                        long j5 = arrayList2.get(i16).messageOwner.random_id;
                        if (j5 != 0) {
                            this.dialogMessagesByRandomIds.remove(j5);
                        }
                    }
                    if (isFeatureAvailable) {
                        getTranslateController().checkDialogMessageSure(keyAt);
                    }
                }
            }
            i3 = i + 1;
            i2 = 1;
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i17 = 0; i17 < size; i17++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i17);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs(null);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    private int messagesMaxDate(ArrayList<MessageObject> arrayList) {
        TLRPC$Message tLRPC$Message;
        int i;
        int i2 = Integer.MIN_VALUE;
        for (int i3 = 0; arrayList != null && i3 < arrayList.size(); i3++) {
            MessageObject messageObject = arrayList.get(i3);
            if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && (i = tLRPC$Message.date) > i2) {
                i2 = i;
            }
        }
        return i2;
    }

    public void addToViewsQueue(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda48
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$219(messageObject);
            }
        });
    }

    public /* synthetic */ void lambda$addToViewsQueue$219(MessageObject messageObject) {
        long dialogId = messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList<Integer> arrayList = this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (arrayList.contains(Integer.valueOf(id))) {
            return;
        }
        arrayList.add(Integer.valueOf(id));
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        int i;
        SparseArray<MessageObject> sparseArray = this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i2 = 0; i2 < size; i2++) {
            sparseArray.valueAt(i2).pollVisibleOnScreen = false;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        int size2 = arrayList.size();
        boolean z = false;
        int i3 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        for (int i4 = 0; i4 < size2; i4++) {
            MessageObject messageObject = arrayList.get(i4);
            if (messageObject.type == 17) {
                TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                if (!tLRPC$Poll.closed && (i = tLRPC$Poll.close_date) != 0) {
                    if (i <= currentTime) {
                        z = true;
                    } else {
                        i3 = Math.min(i3, i - currentTime);
                    }
                }
                int id = messageObject.getId();
                MessageObject messageObject2 = sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
        if (z) {
            this.lastViewsCheckTime = 0L;
        } else if (i3 < 5) {
            this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((5 - i3) * 1000));
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (messageObject.scheduled) {
            return;
        }
        ArrayList<Integer> arrayList = new ArrayList<>();
        if (messageObject.messageOwner.mentioned) {
            getMessagesStorage().markMentionMessageAsRead(-messageObject.messageOwner.peer_id.channel_id, messageObject.getId(), messageObject.getDialogId());
        }
        arrayList.add(Integer.valueOf(messageObject.getId()));
        long dialogId = messageObject.getDialogId();
        getMessagesStorage().markMessagesContentAsRead(dialogId, arrayList, 0, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadContent, Long.valueOf(dialogId), arrayList);
        if (messageObject.getId() < 0) {
            markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
        } else if (messageObject.messageOwner.peer_id.channel_id != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel == null) {
                return;
            }
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda27
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$markMessageContentAsRead$220(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
            tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda28
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$markMessageContentAsRead$221(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markMessageContentAsRead$221(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public void markMentionMessageAsRead(int i, long j, long j2) {
        getMessagesStorage().markMentionMessageAsRead(-j, i, j2);
        if (j != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(j);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel == null) {
                return;
            }
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda149
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$markMentionMessageAsRead$222(tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda150
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMentionMessageAsRead$223(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markMentionMessageAsRead$223(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public long createDeleteShowOnceTask(long j, int i) {
        NativeByteBuffer nativeByteBuffer;
        NativeByteBuffer nativeByteBuffer2 = null;
        try {
            nativeByteBuffer = new NativeByteBuffer(16);
        } catch (Exception e) {
            e = e;
        }
        try {
            nativeByteBuffer.writeInt32(R.styleable.AppCompatTheme_textAppearanceLargePopupMenu);
            nativeByteBuffer.writeInt64(j);
            nativeByteBuffer.writeInt32(i);
        } catch (Exception e2) {
            e = e2;
            nativeByteBuffer2 = nativeByteBuffer;
            FileLog.e(e);
            nativeByteBuffer = nativeByteBuffer2;
            return getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        return getMessagesStorage().createPendingTask(nativeByteBuffer);
    }

    /* renamed from: doDeleteShowOnceTask */
    public void lambda$checkDeletingTask$78(long j, long j2, int i) {
        getMessagesStorage().removePendingTask(j);
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(Integer.valueOf(i));
        getMessagesStorage().emptyMessagesMedia(j2, arrayList);
    }

    public void markMessageAsRead2(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        markMessageAsRead2(j, i, tLRPC$InputChannel, i2, j2, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x0072  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x0082  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x009f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void markMessageAsRead2(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2, boolean z) {
        TLRPC$InputChannel tLRPC$InputChannel2;
        final long j3;
        NativeByteBuffer nativeByteBuffer;
        if (i == 0 || i2 < 0) {
            return;
        }
        if (DialogObject.isChatDialog(j) && tLRPC$InputChannel == null) {
            TLRPC$InputChannel inputChannel = getInputChannel(j);
            if (inputChannel == null) {
                return;
            }
            tLRPC$InputChannel2 = inputChannel;
        } else {
            tLRPC$InputChannel2 = tLRPC$InputChannel;
        }
        if (j2 == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(20 + (tLRPC$InputChannel2 != null ? tLRPC$InputChannel2.getObjectSize() : 0));
                try {
                    nativeByteBuffer.writeInt32(z ? 23 : 101);
                    try {
                        nativeByteBuffer.writeInt64(j);
                        nativeByteBuffer.writeInt32(i);
                        nativeByteBuffer.writeInt32(i2);
                        if (tLRPC$InputChannel2 != null) {
                            tLRPC$InputChannel2.serializeToStream(nativeByteBuffer);
                        }
                    } catch (Exception e) {
                        e = e;
                        nativeByteBuffer2 = nativeByteBuffer;
                        FileLog.e(e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        int currentTime = getConnectionsManager().getCurrentTime();
                        if (z) {
                        }
                        if (tLRPC$InputChannel2 == null) {
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Exception e3) {
                e = e3;
            }
            j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            j3 = j2;
        }
        int currentTime2 = getConnectionsManager().getCurrentTime();
        if (z) {
            getMessagesStorage().createTaskForMid(j, i, currentTime2, currentTime2, i2, false);
        }
        if (tLRPC$InputChannel2 == null) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            tLRPC$TL_channels_readMessageContents.channel = tLRPC$InputChannel2;
            tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
            getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda67
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$markMessageAsRead2$224(j3, tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda68
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMessageAsRead2$225(j3, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markMessageAsRead2$224(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$markMessageAsRead2$225(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC$EncryptedChat encryptedChat;
        if (j2 == 0 || j == 0) {
            return;
        }
        if ((i > 0 || i == Integer.MIN_VALUE) && DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
            ArrayList<Long> arrayList = new ArrayList<>();
            arrayList.add(Long.valueOf(j2));
            getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, null);
            if (i > 0) {
                int currentTime = getConnectionsManager().getCurrentTime();
                getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void completeReadTask(ReadTask readTask) {
        TLRPC$TL_messages_readHistory tLRPC$TL_messages_readHistory;
        if (readTask.replyId != 0) {
            TLRPC$TL_messages_readDiscussion tLRPC$TL_messages_readDiscussion = new TLRPC$TL_messages_readDiscussion();
            tLRPC$TL_messages_readDiscussion.msg_id = (int) readTask.replyId;
            tLRPC$TL_messages_readDiscussion.peer = getInputPeer(readTask.dialogId);
            tLRPC$TL_messages_readDiscussion.read_max_id = readTask.maxId;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readDiscussion, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda343
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$completeReadTask$226(tLObject, tLRPC$TL_error);
                }
            });
        } else if (!DialogObject.isEncryptedDialog(readTask.dialogId)) {
            TLRPC$InputPeer inputPeer = getInputPeer(readTask.dialogId);
            if (inputPeer instanceof TLRPC$TL_inputPeerChannel) {
                TLRPC$TL_channels_readHistory tLRPC$TL_channels_readHistory = new TLRPC$TL_channels_readHistory();
                tLRPC$TL_channels_readHistory.channel = getInputChannel(-readTask.dialogId);
                tLRPC$TL_channels_readHistory.max_id = readTask.maxId;
                tLRPC$TL_messages_readHistory = tLRPC$TL_channels_readHistory;
            } else {
                TLRPC$TL_messages_readHistory tLRPC$TL_messages_readHistory2 = new TLRPC$TL_messages_readHistory();
                tLRPC$TL_messages_readHistory2.peer = inputPeer;
                tLRPC$TL_messages_readHistory2.max_id = readTask.maxId;
                tLRPC$TL_messages_readHistory = tLRPC$TL_messages_readHistory2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda344
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$completeReadTask$227(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(readTask.dialogId)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr == null || bArr.length <= 1 || !(encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                return;
            }
            TLRPC$TL_messages_readEncryptedHistory tLRPC$TL_messages_readEncryptedHistory = new TLRPC$TL_messages_readEncryptedHistory();
            TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
            tLRPC$TL_messages_readEncryptedHistory.peer = tLRPC$TL_inputEncryptedChat;
            tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
            tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
            tLRPC$TL_messages_readEncryptedHistory.max_date = readTask.maxDate;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readEncryptedHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda345
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$completeReadTask$228(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$completeReadTask$227(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null && (tLObject instanceof TLRPC$TL_messages_affectedMessages)) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            ReadTask readTask = this.readTasks.get(i2);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i2);
                this.readTasksMap.remove(readTask.dialogId);
                i2--;
                size--;
            }
            i2++;
        }
        int size2 = this.repliesReadTasks.size();
        while (i < size2) {
            ReadTask readTask2 = this.repliesReadTasks.get(i);
            if (readTask2.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask2);
                this.repliesReadTasks.remove(i);
                this.threadsReadTasksMap.remove(readTask2.dialogId + "_" + readTask2.replyId);
                i += -1;
                size2 += -1;
            }
            i++;
        }
    }

    public void markDialogAsReadNow(final long j, final long j2) {
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda310
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$229(j2, j);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsReadNow$229(long j, long j2) {
        if (j != 0) {
            String str = j2 + "_" + j;
            ReadTask readTask = this.threadsReadTasksMap.get(str);
            if (readTask == null) {
                return;
            }
            completeReadTask(readTask);
            this.repliesReadTasks.remove(readTask);
            this.threadsReadTasksMap.remove(str);
            return;
        }
        ReadTask readTask2 = this.readTasksMap.get(j2);
        if (readTask2 == null) {
            return;
        }
        completeReadTask(readTask2);
        this.readTasks.remove(readTask2);
        this.readTasksMap.remove(j2);
    }

    public void markMentionsAsRead(long j, long j2) {
        if (DialogObject.isEncryptedDialog(j) || j == getUserConfig().getClientUserId()) {
            return;
        }
        getMessagesStorage().resetMentionsCount(j, j2, 0);
        TLRPC$TL_messages_readMentions tLRPC$TL_messages_readMentions = new TLRPC$TL_messages_readMentions();
        tLRPC$TL_messages_readMentions.peer = getInputPeer(j);
        if (j2 != 0) {
            tLRPC$TL_messages_readMentions.top_msg_id = (int) j2;
            tLRPC$TL_messages_readMentions.flags |= 1;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMentions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda241
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$markMentionsAsRead$230(tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:32:0x0010, code lost:
        if (r18 != Integer.MAX_VALUE) goto L5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:34:0x0014, code lost:
        r11 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x0076, code lost:
        if (r18 != Integer.MAX_VALUE) goto L5;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void markDialogAsRead(final long j, final int i, final int i2, final int i3, final boolean z, final long j2, final int i4, final boolean z2, int i5) {
        boolean z3 = true;
        if (j2 == 0) {
            boolean z4 = getNotificationsController().showBadgeMessages;
            if (DialogObject.isEncryptedDialog(j)) {
                if (i3 == 0) {
                    return;
                }
                TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
                getMessagesStorage().processPendingRead(j, i, i2, i5);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda355
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$234(j, i3, z, i4, i2);
                    }
                });
                if (encryptedChat != null && encryptedChat.ttl > 0) {
                    getMessagesStorage().createTaskForSecretChat(encryptedChat.id, i3, Math.max(getConnectionsManager().getCurrentTime(), i3), 0, null);
                }
            } else if (i == 0) {
                return;
            } else {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(num.intValue(), i)));
                getMessagesStorage().processPendingRead(j, i, i2, i5);
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda354
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$232(j, i4, i, z);
                    }
                });
            }
            if (z3) {
                Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda356
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$markDialogAsRead$235(j2, j, z2, i3, i);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$markDialogAsRead$232(final long j, final int i, final int i2, final boolean z) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda179
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$231(j, i, i2, z);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsRead$231(long j, int i, int i2, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i3 = tLRPC$Dialog.unread_count;
            if (i == 0 || i2 >= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i3 - i, 0);
                tLRPC$Dialog.unread_count = max;
                if (i2 != Integer.MIN_VALUE) {
                    int i4 = tLRPC$Dialog.top_message;
                    if (max > i4 - i2) {
                        tLRPC$Dialog.unread_count = i4 - i2;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i3 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs--;
                }
                int i5 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i5 < dialogFilterArr.length) {
                        DialogFilter dialogFilter = dialogFilterArr[i5];
                        if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i5++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        if (!z) {
            getNotificationsController().processReadMessages(null, j, 0, i2, false);
            LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j, 0);
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
            return;
        }
        getNotificationsController().processReadMessages(null, j, 0, i2, true);
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray(1);
        longSparseIntArray2.put(j, -1);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray2);
    }

    public /* synthetic */ void lambda$markDialogAsRead$234(final long j, final int i, final boolean z, final int i2, final int i3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda475
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$markDialogAsRead$233(j, i, z, i2, i3);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsRead$233(long j, int i, boolean z, int i2, int i3) {
        getNotificationsController().processReadMessages(null, j, i, 0, z);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i2 == 0 || i3 <= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i2, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i3 - i5) {
                        tLRPC$Dialog.unread_count = i3 - i5;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        DialogFilter dialogFilter = dialogFilterArr[i6];
                        if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs(null);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
        longSparseIntArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    public /* synthetic */ void lambda$markDialogAsRead$235(long j, long j2, boolean z, int i, int i2) {
        ReadTask readTask;
        if (j != 0) {
            HashMap<String, ReadTask> hashMap = this.threadsReadTasksMap;
            readTask = hashMap.get(j2 + "_" + j);
        } else {
            readTask = this.readTasksMap.get(j2);
        }
        if (readTask == null) {
            readTask = new ReadTask(null);
            readTask.dialogId = j2;
            readTask.replyId = j;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                if (j != 0) {
                    HashMap<String, ReadTask> hashMap2 = this.threadsReadTasksMap;
                    hashMap2.put(j2 + "_" + j, readTask);
                    this.repliesReadTasks.add(readTask);
                } else {
                    this.readTasksMap.put(j2, readTask);
                    this.readTasks.add(readTask);
                }
            }
        }
        readTask.maxDate = i;
        readTask.maxId = i2;
        if (z) {
            completeReadTask(readTask);
        }
    }

    public int createChat(String str, ArrayList<Long> arrayList, String str2, int i, boolean z, Location location, String str3, int i2, final BaseFragment baseFragment) {
        if (i == 0 && !z) {
            final TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat = new TLRPC$TL_messages_createChat();
            tLRPC$TL_messages_createChat.title = str;
            if (i2 >= 0) {
                tLRPC$TL_messages_createChat.ttl_period = i2;
                tLRPC$TL_messages_createChat.flags |= 1;
            }
            for (int i3 = 0; i3 < arrayList.size(); i3++) {
                TLRPC$User user = getUser(arrayList.get(i3));
                if (user != null) {
                    tLRPC$TL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_messages_createChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda222
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$238(baseFragment, tLRPC$TL_messages_createChat, tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else if (z || i == 2 || i == 4 || i == 5) {
            final TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel = new TLRPC$TL_channels_createChannel();
            tLRPC$TL_channels_createChannel.title = str;
            if (str2 == null) {
                str2 = "";
            }
            tLRPC$TL_channels_createChannel.about = str2;
            tLRPC$TL_channels_createChannel.for_import = z;
            if (z || i == 4 || i == 5) {
                tLRPC$TL_channels_createChannel.megagroup = true;
            } else {
                tLRPC$TL_channels_createChannel.broadcast = true;
            }
            tLRPC$TL_channels_createChannel.forum = i == 5;
            if (location != null) {
                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                tLRPC$TL_channels_createChannel.geo_point = tLRPC$TL_inputGeoPoint;
                tLRPC$TL_inputGeoPoint.lat = location.getLatitude();
                tLRPC$TL_channels_createChannel.geo_point._long = location.getLongitude();
                tLRPC$TL_channels_createChannel.address = str3;
                tLRPC$TL_channels_createChannel.flags |= 4;
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_channels_createChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda223
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$241(baseFragment, tLRPC$TL_channels_createChannel, tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else {
            return 0;
        }
    }

    public /* synthetic */ void lambda$createChat$238(final BaseFragment baseFragment, final TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda306
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$236(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat);
                }
            });
        } else if (tLObject instanceof TLRPC$TL_messages_invitedUsers) {
            final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers = (TLRPC$TL_messages_invitedUsers) tLObject;
            processUpdates(tLRPC$TL_messages_invitedUsers.updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda307
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$237(tLRPC$TL_messages_invitedUsers);
                }
            });
        }
    }

    public /* synthetic */ void lambda$createChat$236(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$createChat$237(TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers) {
        putUsers(tLRPC$TL_messages_invitedUsers.updates.users, false);
        putChats(tLRPC$TL_messages_invitedUsers.updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$TL_messages_invitedUsers.updates.chats;
        if (arrayList != null && !arrayList.isEmpty()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$TL_messages_invitedUsers.updates.chats.get(0).id));
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, tLRPC$TL_messages_invitedUsers.updates.chats.get(0), tLRPC$TL_messages_invitedUsers);
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$createChat$241(final BaseFragment baseFragment, final TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda80
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$createChat$239(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel);
                }
            });
            return;
        }
        final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda81
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$createChat$240(tLRPC$Updates);
            }
        });
    }

    public /* synthetic */ void lambda$createChat$239(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel, new Object[0]);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$createChat$240(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList != null && !arrayList.isEmpty()) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$Updates.chats.get(0).id));
        } else {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatDidFailCreate, new Object[0]);
        }
    }

    public void convertToMegaGroup(Context context, long j, BaseFragment baseFragment, MessagesStorage.LongCallback longCallback) {
        convertToMegaGroup(context, j, baseFragment, longCallback, null);
    }

    public void convertToMegaGroup(final Context context, final long j, final BaseFragment baseFragment, final MessagesStorage.LongCallback longCallback, final Runnable runnable) {
        final TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat = new TLRPC$TL_messages_migrateChat();
        tLRPC$TL_messages_migrateChat.chat_id = j;
        final AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_migrateChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda386
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToMegaGroup$245(context, alertDialog, longCallback, j, runnable, baseFragment, tLRPC$TL_messages_migrateChat, tLObject, tLRPC$TL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda387
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToMegaGroup$246(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.show();
            } catch (Exception unused) {
            }
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$245(final Context context, final AlertDialog alertDialog, final MessagesStorage.LongCallback longCallback, final long j, Runnable runnable, final BaseFragment baseFragment, final TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda422
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$convertToMegaGroup$242(context, alertDialog);
                    }
                });
            }
            final TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda423
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToMegaGroup$243(MessagesStorage.LongCallback.this, tLRPC$Updates, j);
                }
            });
            return;
        }
        if (runnable != null) {
            runnable.run();
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda424
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$convertToMegaGroup$244(longCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat);
            }
        });
    }

    public static /* synthetic */ void lambda$convertToMegaGroup$242(Context context, AlertDialog alertDialog) {
        if (((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public static /* synthetic */ void lambda$convertToMegaGroup$243(MessagesStorage.LongCallback longCallback, TLRPC$Updates tLRPC$Updates, long j) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$InputChannel tLRPC$InputChannel;
        if (longCallback != null) {
            int i = 0;
            int i2 = 0;
            while (true) {
                tLRPC$Chat = null;
                if (i2 >= tLRPC$Updates.chats.size()) {
                    tLRPC$Chat2 = null;
                    break;
                }
                tLRPC$Chat2 = tLRPC$Updates.chats.get(i2);
                if (j == tLRPC$Chat2.id) {
                    break;
                }
                i2++;
            }
            if (tLRPC$Chat2 == null || (tLRPC$InputChannel = tLRPC$Chat2.migrated_to) == null) {
                return;
            }
            long j2 = tLRPC$InputChannel.channel_id;
            while (true) {
                if (i >= tLRPC$Updates.chats.size()) {
                    break;
                }
                TLRPC$Chat tLRPC$Chat3 = tLRPC$Updates.chats.get(i);
                if (j2 == tLRPC$Chat3.id) {
                    tLRPC$Chat = tLRPC$Chat3;
                    break;
                }
                i++;
            }
            if (tLRPC$Chat != null) {
                longCallback.run(j2);
            }
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$244(MessagesStorage.LongCallback longCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat) {
        if (longCallback != null) {
            longCallback.run(0L);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$convertToMegaGroup$246(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void convertToGigaGroup(final Context context, TLRPC$Chat tLRPC$Chat, final BaseFragment baseFragment, final MessagesStorage.BooleanCallback booleanCallback) {
        final TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup = new TLRPC$TL_channels_convertToGigagroup();
        tLRPC$TL_channels_convertToGigagroup.channel = getInputChannel(tLRPC$Chat);
        AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        final AlertDialog alertDialog2 = alertDialog;
        final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_channels_convertToGigagroup, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda296
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToGigaGroup$250(context, alertDialog2, booleanCallback, baseFragment, tLRPC$TL_channels_convertToGigagroup, tLObject, tLRPC$TL_error);
            }
        });
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda297
                @Override // android.content.DialogInterface.OnCancelListener
                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$convertToGigaGroup$251(sendRequest, dialogInterface);
                }
            });
            try {
                alertDialog.showDelayed(400L);
            } catch (Exception unused) {
            }
        }
    }

    public /* synthetic */ void lambda$convertToGigaGroup$250(final Context context, final AlertDialog alertDialog, final MessagesStorage.BooleanCallback booleanCallback, final BaseFragment baseFragment, final TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda286
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$convertToGigaGroup$247(context, alertDialog);
                    }
                });
            }
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda287
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$convertToGigaGroup$248(MessagesStorage.BooleanCallback.this);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda288
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$convertToGigaGroup$249(booleanCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup);
            }
        });
    }

    public static /* synthetic */ void lambda$convertToGigaGroup$247(Context context, AlertDialog alertDialog) {
        if (((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    public static /* synthetic */ void lambda$convertToGigaGroup$248(MessagesStorage.BooleanCallback booleanCallback) {
        if (booleanCallback != null) {
            booleanCallback.run(true);
        }
    }

    public /* synthetic */ void lambda$convertToGigaGroup$249(MessagesStorage.BooleanCallback booleanCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup) {
        if (booleanCallback != null) {
            booleanCallback.run(false);
        }
        if (context == null || ((Activity) context).isFinishing()) {
            return;
        }
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e(e);
        }
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup, Boolean.FALSE);
    }

    public /* synthetic */ void lambda$convertToGigaGroup$251(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void addUsersToChannel(final long j, ArrayList<TLRPC$InputUser> arrayList, final BaseFragment baseFragment) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        final TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
        tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(j);
        tLRPC$TL_channels_inviteToChannel.users = arrayList;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_inviteToChannel, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda154
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$addUsersToChannel$254(baseFragment, tLRPC$TL_channels_inviteToChannel, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$addUsersToChannel$252(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel, Boolean.TRUE);
    }

    public /* synthetic */ void lambda$addUsersToChannel$254(final BaseFragment baseFragment, final TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel, final long j, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda362
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUsersToChannel$252(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel);
                }
            });
        } else if (tLObject instanceof TLRPC$TL_messages_invitedUsers) {
            final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers = (TLRPC$TL_messages_invitedUsers) tLObject;
            processUpdates(tLRPC$TL_messages_invitedUsers.updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda363
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUsersToChannel$253(tLRPC$TL_messages_invitedUsers, j);
                }
            });
        }
    }

    public /* synthetic */ void lambda$addUsersToChannel$253(TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers, long j) {
        putUsers(tLRPC$TL_messages_invitedUsers.updates.users, false);
        putChats(tLRPC$TL_messages_invitedUsers.updates.chats, false);
        AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tLRPC$TL_messages_invitedUsers);
    }

    public void setDefaultSendAs(final long j, long j2) {
        TLRPC$ChatFull chatFull = getChatFull(-j);
        if (chatFull != null) {
            chatFull.default_send_as = getPeer(j2);
            getMessagesStorage().updateChatInfo(chatFull, false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateDefaultSendAsPeer, Long.valueOf(j), chatFull.default_send_as);
        }
        TLRPC$TL_messages_saveDefaultSendAs tLRPC$TL_messages_saveDefaultSendAs = new TLRPC$TL_messages_saveDefaultSendAs();
        tLRPC$TL_messages_saveDefaultSendAs.peer = getInputPeer(j);
        tLRPC$TL_messages_saveDefaultSendAs.send_as = getInputPeer(j2);
        getConnectionsManager().sendRequest(tLRPC$TL_messages_saveDefaultSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda254
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setDefaultSendAs$255(j, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$setDefaultSendAs$255(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            long j2 = -j;
            if (getChatFull(j2) == null) {
                loadFullChat(j2, 0, true);
            }
        } else if (tLRPC$TL_error == null || tLRPC$TL_error.code != 400) {
        } else {
            loadFullChat(-j, 0, true);
        }
    }

    public void toggleChatNoForwards(long j, boolean z) {
        TLRPC$TL_messages_toggleNoForwards tLRPC$TL_messages_toggleNoForwards = new TLRPC$TL_messages_toggleNoForwards();
        tLRPC$TL_messages_toggleNoForwards.peer = getInputPeer(-j);
        tLRPC$TL_messages_toggleNoForwards.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleNoForwards, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda464
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatNoForwards$257(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatNoForwards$257(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda100
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatNoForwards$256();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChatNoForwards$256() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinToSend(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC$TL_channels_toggleJoinToSend tLRPC$TL_channels_toggleJoinToSend = new TLRPC$TL_channels_toggleJoinToSend();
        tLRPC$TL_channels_toggleJoinToSend.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleJoinToSend.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleJoinToSend, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda117
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatJoinToSend$259(runnable, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatJoinToSend$259(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda470
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinToSend$258();
                }
            });
            if (runnable != null) {
                runnable.run();
            }
        } else if (tLRPC$TL_error == null || "CHAT_NOT_MODIFIED".equals(tLRPC$TL_error.text)) {
            if (runnable != null) {
                runnable.run();
            }
        } else if (runnable2 != null) {
            runnable2.run();
        }
    }

    public /* synthetic */ void lambda$toggleChatJoinToSend$258() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinRequest(long j, boolean z, final Runnable runnable, final Runnable runnable2) {
        TLRPC$TL_channels_toggleJoinRequest tLRPC$TL_channels_toggleJoinRequest = new TLRPC$TL_channels_toggleJoinRequest();
        tLRPC$TL_channels_toggleJoinRequest.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleJoinRequest.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleJoinRequest, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda392
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChatJoinRequest$261(runnable, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChatJoinRequest$261(Runnable runnable, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda90
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChatJoinRequest$260();
                }
            });
            if (runnable != null) {
                runnable.run();
            }
        } else if (tLRPC$TL_error == null || "CHAT_NOT_MODIFIED".equals(tLRPC$TL_error.text)) {
            if (runnable != null) {
                runnable.run();
            }
        } else if (runnable2 != null) {
            runnable2.run();
        }
    }

    public /* synthetic */ void lambda$toggleChatJoinRequest$260() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelSignatures(long j, boolean z, boolean z2) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat != null) {
            chat.signatures = z;
            chat.signature_profiles = z2;
            putChat(chat, true);
        }
        TLRPC$TL_channels_toggleSignatures tLRPC$TL_channels_toggleSignatures = new TLRPC$TL_channels_toggleSignatures();
        tLRPC$TL_channels_toggleSignatures.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleSignatures.signatures_enabled = z;
        tLRPC$TL_channels_toggleSignatures.profiles_enabled = z2;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSignatures, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda228
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelSignatures$263(tLObject, tLRPC$TL_error);
            }
        }, 64);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateAllMessages, Long.valueOf(-j));
    }

    public /* synthetic */ void lambda$toggleChannelSignatures$263(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda40
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelSignatures$262();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelSignatures$262() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelForum(long j, boolean z) {
        TLRPC$TL_channels_toggleForum tLRPC$TL_channels_toggleForum = new TLRPC$TL_channels_toggleForum();
        tLRPC$TL_channels_toggleForum.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleForum.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleForum, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda295
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelForum$265(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChannelForum$265(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda94
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelForum$264();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelForum$264() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelInvitesHistory(long j, boolean z) {
        TLRPC$TL_channels_togglePreHistoryHidden tLRPC$TL_channels_togglePreHistoryHidden = new TLRPC$TL_channels_togglePreHistoryHidden();
        tLRPC$TL_channels_togglePreHistoryHidden.channel = getInputChannel(j);
        tLRPC$TL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_togglePreHistoryHidden, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda442
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toggleChannelInvitesHistory$267(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toggleChannelInvitesHistory$267(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda277
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$toggleChannelInvitesHistory$266();
                }
            });
        }
    }

    public /* synthetic */ void lambda$toggleChannelInvitesHistory$266() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void updateChatAbout(long j, final String str, final TLRPC$ChatFull tLRPC$ChatFull) {
        TLRPC$TL_messages_editChatAbout tLRPC$TL_messages_editChatAbout = new TLRPC$TL_messages_editChatAbout();
        tLRPC$TL_messages_editChatAbout.peer = getInputPeer(-j);
        tLRPC$TL_messages_editChatAbout.about = str;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAbout, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda341
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChatAbout$269(tLRPC$ChatFull, str, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChatAbout$269(final TLRPC$ChatFull tLRPC$ChatFull, final String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (!(tLObject instanceof TLRPC$TL_boolTrue) || tLRPC$ChatFull == null) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda211
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$updateChatAbout$268(tLRPC$ChatFull, str);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatAbout$268(TLRPC$ChatFull tLRPC$ChatFull, String str) {
        tLRPC$ChatFull.about = str;
        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.lambda$postNotificationNameOnUIThread$1(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void updateChannelUserName(final BaseFragment baseFragment, final long j, final String str, final Runnable runnable, final Runnable runnable2) {
        final TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername = new TLRPC$TL_channels_updateUsername();
        tLRPC$TL_channels_updateUsername.channel = getInputChannel(j);
        tLRPC$TL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_updateUsername, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda342
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChannelUserName$271(j, str, runnable, baseFragment, tLRPC$TL_channels_updateUsername, runnable2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChannelUserName$271(final long j, final String str, final Runnable runnable, BaseFragment baseFragment, TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername, Runnable runnable2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if ((tLObject instanceof TLRPC$TL_boolTrue) || (tLRPC$TL_error != null && "USERNAME_NOT_MODIFIED".equals(tLRPC$TL_error.text))) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda168
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$updateChannelUserName$270(j, str, runnable);
                }
            });
            return;
        }
        AlertsCreator.processError(UserConfig.selectedAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_updateUsername, new Object[0]);
        if (runnable2 != null) {
            runnable2.run();
        }
    }

    public /* synthetic */ void lambda$updateChannelUserName$270(long j, String str, Runnable runnable) {
        boolean z;
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat.usernames != null) {
            for (int i = 0; i < chat.usernames.size(); i++) {
                TLRPC$TL_username tLRPC$TL_username = chat.usernames.get(i);
                if (tLRPC$TL_username != null && tLRPC$TL_username.editable) {
                    tLRPC$TL_username.username = str;
                    z = true;
                    break;
                }
            }
        }
        z = false;
        if (!z) {
            ArrayList<TLRPC$TL_username> arrayList = chat.usernames;
            if (arrayList == null || arrayList.size() >= 1) {
                if (chat.usernames == null) {
                    chat.usernames = new ArrayList<>();
                }
                TLRPC$TL_username tLRPC$TL_username2 = new TLRPC$TL_username();
                tLRPC$TL_username2.username = str;
                tLRPC$TL_username2.active = true;
                tLRPC$TL_username2.editable = true;
                chat.usernames.add(0, tLRPC$TL_username2);
            } else {
                chat.username = str;
            }
        }
        ArrayList arrayList2 = new ArrayList();
        arrayList2.add(chat);
        getMessagesStorage().putUsersAndChats(null, arrayList2, true, true);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        if (runnable != null) {
            runnable.run();
        }
    }

    public void sendBotStart(TLRPC$User tLRPC$User, String str) {
        if (tLRPC$User == null) {
            return;
        }
        TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
        tLRPC$TL_messages_startBot.bot = getInputUser(tLRPC$User);
        tLRPC$TL_messages_startBot.peer = getInputPeer(tLRPC$User.id);
        tLRPC$TL_messages_startBot.start_param = str;
        tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
        getConnectionsManager().sendRequest(tLRPC$TL_messages_startBot, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda477
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendBotStart$272(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$sendBotStart$272(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
    }

    public boolean isJoiningChannel(long j) {
        return this.joiningToChannels.contains(Long.valueOf(j));
    }

    public void addUserToChat(long j, TLRPC$User tLRPC$User, int i, String str, BaseFragment baseFragment, Runnable runnable) {
        addUserToChat(j, tLRPC$User, i, str, baseFragment, false, runnable, null);
    }

    public void loadUsersPremiumLocked(final ArrayList<TLRPC$User> arrayList, final Utilities.Callback<ArrayList<Long>> callback) {
        if (callback == null) {
            return;
        }
        if (getUserConfig().isPremium()) {
            callback.run(null);
            return;
        }
        TLRPC$TL_users_getIsPremiumRequiredToContact tLRPC$TL_users_getIsPremiumRequiredToContact = new TLRPC$TL_users_getIsPremiumRequiredToContact();
        MessagesController messagesController = getInstance(this.currentAccount);
        Iterator<TLRPC$User> it = arrayList.iterator();
        while (it.hasNext()) {
            tLRPC$TL_users_getIsPremiumRequiredToContact.id.add(messagesController.getInputUser(it.next()));
        }
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_users_getIsPremiumRequiredToContact, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda185
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$loadUsersPremiumLocked$274(arrayList, callback, tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$loadUsersPremiumLocked$274(final ArrayList arrayList, final Utilities.Callback callback, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda257
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$loadUsersPremiumLocked$273(TLObject.this, arrayList, callback);
            }
        });
    }

    public static /* synthetic */ void lambda$loadUsersPremiumLocked$273(TLObject tLObject, ArrayList arrayList, Utilities.Callback callback) {
        ArrayList arrayList2 = new ArrayList();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            for (int i = 0; i < tLRPC$Vector.objects.size(); i++) {
                if (i < arrayList.size() && (tLRPC$Vector.objects.get(i) instanceof TLRPC$TL_boolTrue)) {
                    arrayList2.add(Long.valueOf(((TLRPC$User) arrayList.get(i)).id));
                }
            }
        }
        callback.run(arrayList2);
    }

    public void addUsersToChat(final TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, ArrayList<TLRPC$User> arrayList, int i, final androidx.core.util.Consumer<TLRPC$User> consumer, final androidx.core.util.Consumer<TLRPC$User> consumer2, final Runnable runnable) {
        final int size = arrayList.size();
        final int[] iArr = {0};
        final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers = new TLRPC$TL_messages_invitedUsers();
        tLRPC$TL_messages_invitedUsers.updates = new TLRPC$TL_updates();
        long j = tLRPC$Chat.id;
        for (int i2 = 0; i2 < size; i2++) {
            final TLRPC$User tLRPC$User = arrayList.get(i2);
            addUserToChat(j, tLRPC$User, i, null, baseFragment, false, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda129
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$addUsersToChat$275(androidx.core.util.Consumer.this, tLRPC$User);
                }
            }, new ErrorDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda130
                @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                public final boolean run(TLRPC$TL_error tLRPC$TL_error) {
                    boolean lambda$addUsersToChat$276;
                    lambda$addUsersToChat$276 = MessagesController.lambda$addUsersToChat$276(androidx.core.util.Consumer.this, tLRPC$User, tLRPC$TL_error);
                    return lambda$addUsersToChat$276;
                }
            }, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda131
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$addUsersToChat$278(tLRPC$TL_messages_invitedUsers, iArr, size, tLRPC$Chat, runnable, (TLRPC$TL_messages_invitedUsers) obj);
                }
            });
            putUser(tLRPC$User, false);
        }
    }

    public static /* synthetic */ void lambda$addUsersToChat$275(androidx.core.util.Consumer consumer, TLRPC$User tLRPC$User) {
        if (consumer != null) {
            consumer.accept(tLRPC$User);
        }
    }

    public static /* synthetic */ boolean lambda$addUsersToChat$276(androidx.core.util.Consumer consumer, TLRPC$User tLRPC$User, TLRPC$TL_error tLRPC$TL_error) {
        if (consumer != null) {
            consumer.accept(tLRPC$User);
        }
        return tLRPC$TL_error == null || !"USER_PRIVACY_RESTRICTED".equals(tLRPC$TL_error.text);
    }

    public /* synthetic */ void lambda$addUsersToChat$278(final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers, int[] iArr, int i, final TLRPC$Chat tLRPC$Chat, Runnable runnable, TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers2) {
        if (tLRPC$TL_messages_invitedUsers2 != null) {
            tLRPC$TL_messages_invitedUsers.missing_invitees.addAll(tLRPC$TL_messages_invitedUsers2.missing_invitees);
        }
        int i2 = iArr[0] + 1;
        iArr[0] = i2;
        if (i2 >= i) {
            if (!tLRPC$TL_messages_invitedUsers.missing_invitees.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda170
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUsersToChat$277(tLRPC$Chat, tLRPC$TL_messages_invitedUsers);
                    }
                });
            }
            if (runnable != null) {
                runnable.run();
            }
        }
    }

    public /* synthetic */ void lambda$addUsersToChat$277(TLRPC$Chat tLRPC$Chat, TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers) {
        AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, tLRPC$Chat, tLRPC$TL_messages_invitedUsers);
    }

    public void addUserToChat(long j, TLRPC$User tLRPC$User, int i, String str, BaseFragment baseFragment, boolean z, Runnable runnable, ErrorDelegate errorDelegate) {
        addUserToChat(j, tLRPC$User, i, str, baseFragment, z, runnable, errorDelegate, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void addUserToChat(final long j, final TLRPC$User tLRPC$User, int i, String str, final BaseFragment baseFragment, final boolean z, final Runnable runnable, final ErrorDelegate errorDelegate, final Utilities.Callback<TLRPC$TL_messages_invitedUsers> callback) {
        TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser;
        if (tLRPC$User == null) {
            if (errorDelegate != null) {
                errorDelegate.run(null);
            }
            if (callback != null) {
                callback.run(null);
                return;
            }
            return;
        }
        final boolean isChannel = ChatObject.isChannel(j, this.currentAccount);
        final boolean z2 = isChannel && getChat(Long.valueOf(j)).megagroup;
        final TLRPC$InputUser inputUser = getInputUser(tLRPC$User);
        if (str != null && (!isChannel || z2)) {
            TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
            tLRPC$TL_messages_startBot.bot = inputUser;
            if (isChannel) {
                tLRPC$TL_messages_startBot.peer = getInputPeer(-j);
            } else {
                TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                tLRPC$TL_messages_startBot.peer = tLRPC$TL_inputPeerChat;
                tLRPC$TL_inputPeerChat.chat_id = j;
            }
            tLRPC$TL_messages_startBot.start_param = str;
            tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
            tLRPC$TL_messages_addChatUser = tLRPC$TL_messages_startBot;
        } else if (isChannel) {
            if (inputUser instanceof TLRPC$TL_inputUserSelf) {
                if (this.joiningToChannels.contains(Long.valueOf(j))) {
                    if (errorDelegate != null) {
                        errorDelegate.run(null);
                        return;
                    }
                    return;
                }
                TLRPC$TL_channels_joinChannel tLRPC$TL_channels_joinChannel = new TLRPC$TL_channels_joinChannel();
                tLRPC$TL_channels_joinChannel.channel = getInputChannel(j);
                this.joiningToChannels.add(Long.valueOf(j));
                tLRPC$TL_messages_addChatUser = tLRPC$TL_channels_joinChannel;
            } else {
                TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
                tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(j);
                tLRPC$TL_channels_inviteToChannel.users.add(inputUser);
                tLRPC$TL_messages_addChatUser = tLRPC$TL_channels_inviteToChannel;
            }
        } else {
            TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser2 = new TLRPC$TL_messages_addChatUser();
            tLRPC$TL_messages_addChatUser2.chat_id = j;
            tLRPC$TL_messages_addChatUser2.fwd_limit = i;
            tLRPC$TL_messages_addChatUser2.user_id = inputUser;
            tLRPC$TL_messages_addChatUser = tLRPC$TL_messages_addChatUser2;
        }
        final TLRPC$TL_messages_addChatUser tLRPC$TL_messages_addChatUser3 = tLRPC$TL_messages_addChatUser;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_addChatUser3, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda173
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$addUserToChat$288(isChannel, inputUser, j, tLRPC$User, callback, z, runnable, errorDelegate, baseFragment, tLRPC$TL_messages_addChatUser3, z2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$addUserToChat$288(final boolean z, final TLRPC$InputUser tLRPC$InputUser, final long j, TLRPC$User tLRPC$User, final Utilities.Callback callback, boolean z2, Runnable runnable, final ErrorDelegate errorDelegate, final BaseFragment baseFragment, final TLObject tLObject, final boolean z3, TLObject tLObject2, final TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Updates tLRPC$Updates;
        TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers;
        boolean z4;
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda107
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$279(j);
                }
            });
        }
        if (tLRPC$TL_error != null) {
            if ("PRIVACY_PREMIUM_REQUIRED".equals(tLRPC$TL_error.text)) {
                final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers2 = new TLRPC$TL_messages_invitedUsers();
                tLRPC$TL_messages_invitedUsers2.updates = new TLRPC$TL_updates();
                TLRPC$TL_missingInvitee tLRPC$TL_missingInvitee = new TLRPC$TL_missingInvitee();
                tLRPC$TL_missingInvitee.user_id = tLRPC$User.id;
                tLRPC$TL_missingInvitee.premium_would_allow_invite = true;
                tLRPC$TL_missingInvitee.premium_required_for_pm = true;
                tLRPC$TL_messages_invitedUsers2.missing_invitees.add(tLRPC$TL_missingInvitee);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda108
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUserToChat$280(callback, tLRPC$TL_messages_invitedUsers2, j);
                    }
                });
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda109
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$addUserToChat$281(Utilities.Callback.this);
                }
            });
            if ("USER_ALREADY_PARTICIPANT".equals(tLRPC$TL_error.text) && z2) {
                if (runnable != null) {
                    AndroidUtilities.runOnUIThread(runnable);
                    return;
                }
                return;
            }
            if (errorDelegate != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda110
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$addUserToChat$282(errorDelegate, tLRPC$TL_error, baseFragment, tLObject, z, z3);
                    }
                });
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda111
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$283(errorDelegate, tLRPC$TL_error, baseFragment, tLObject, z, z3, tLRPC$InputUser);
                }
            });
            return;
        }
        if (tLObject2 instanceof TLRPC$TL_messages_invitedUsers) {
            tLRPC$TL_messages_invitedUsers = (TLRPC$TL_messages_invitedUsers) tLObject2;
            tLRPC$Updates = tLRPC$TL_messages_invitedUsers.updates;
        } else if (tLObject2 instanceof TLRPC$Updates) {
            tLRPC$Updates = (TLRPC$Updates) tLObject2;
            tLRPC$TL_messages_invitedUsers = null;
        } else {
            FileLog.e("unexpected " + tLObject2 + " in addUserToChat");
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda112
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$addUserToChat$284(Utilities.Callback.this);
                }
            });
            return;
        }
        int i = 0;
        while (true) {
            if (i >= tLRPC$Updates.updates.size()) {
                z4 = false;
                break;
            }
            TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) && (((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action instanceof TLRPC$TL_messageActionChatAddUser)) {
                z4 = true;
                break;
            }
            i++;
        }
        processUpdates(tLRPC$Updates, false);
        if (tLRPC$TL_messages_invitedUsers != null && !tLRPC$TL_messages_invitedUsers.missing_invitees.isEmpty()) {
            final TLRPC$Updates tLRPC$Updates2 = tLRPC$Updates;
            final TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers3 = tLRPC$TL_messages_invitedUsers;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda113
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$285(tLRPC$Updates2, callback, tLRPC$TL_messages_invitedUsers3, j);
                }
            });
            return;
        }
        if (z) {
            if (!z4 && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
                generateJoinMessage(j, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$addUserToChat$286(j);
                }
            }, 1000L);
        }
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(-j, j, new ArrayList<>(), null, true);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
        if (callback != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda115
                @Override // java.lang.Runnable
                public final void run() {
                    Utilities.Callback.this.run(null);
                }
            });
        }
    }

    public /* synthetic */ void lambda$addUserToChat$279(long j) {
        this.joiningToChannels.remove(Long.valueOf(j));
    }

    public /* synthetic */ void lambda$addUserToChat$280(Utilities.Callback callback, TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers, long j) {
        if (callback != null) {
            callback.run(tLRPC$TL_messages_invitedUsers);
        } else {
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tLRPC$TL_messages_invitedUsers);
        }
    }

    public static /* synthetic */ void lambda$addUserToChat$281(Utilities.Callback callback) {
        if (callback != null) {
            callback.run(null);
        }
    }

    public /* synthetic */ void lambda$addUserToChat$282(ErrorDelegate errorDelegate, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2) {
        if (errorDelegate.run(tLRPC$TL_error)) {
            int i = this.currentAccount;
            boolean z3 = true;
            Object[] objArr = new Object[1];
            objArr[0] = Boolean.valueOf((!z || z2) ? false : false);
            AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        }
    }

    public /* synthetic */ void lambda$addUserToChat$283(ErrorDelegate errorDelegate, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC$InputUser tLRPC$InputUser) {
        if (errorDelegate == null) {
            int i = this.currentAccount;
            Object[] objArr = new Object[1];
            objArr[0] = Boolean.valueOf(z && !z2);
            AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        }
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        }
    }

    public static /* synthetic */ void lambda$addUserToChat$284(Utilities.Callback callback) {
        if (callback != null) {
            callback.run(null);
        }
    }

    public /* synthetic */ void lambda$addUserToChat$285(TLRPC$Updates tLRPC$Updates, Utilities.Callback callback, TLRPC$TL_messages_invitedUsers tLRPC$TL_messages_invitedUsers, long j) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        if (callback != null) {
            callback.run(tLRPC$TL_messages_invitedUsers);
        } else {
            AlertsCreator.checkRestrictedInviteUsers(this.currentAccount, getChat(Long.valueOf(j)), tLRPC$TL_messages_invitedUsers);
        }
    }

    public /* synthetic */ void lambda$addUserToChat$286(long j) {
        loadFullChat(j, 0, true);
    }

    public void deleteParticipantFromChat(long j, TLRPC$User tLRPC$User) {
        deleteParticipantFromChat(j, tLRPC$User, (TLRPC$Chat) null, false, false);
    }

    public void deleteParticipantFromChat(long j, TLRPC$InputPeer tLRPC$InputPeer) {
        deleteParticipantFromChat(j, tLRPC$InputPeer, false, false);
    }

    public void deleteParticipantFromChat(long j, TLRPC$InputPeer tLRPC$InputPeer, boolean z, boolean z2) {
        deleteParticipantFromChat(j, tLRPC$InputPeer, z, z2, (Runnable) null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void deleteParticipantFromChat(final long j, TLRPC$InputPeer tLRPC$InputPeer, boolean z, boolean z2, final Runnable runnable) {
        TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser;
        TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser2;
        if (tLRPC$InputPeer == null) {
            return;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        boolean z3 = (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerUser) && UserObject.isUserSelf(getMessagesController().getUser(Long.valueOf(tLRPC$InputPeer.user_id)));
        final boolean isChannel = ChatObject.isChannel(chat);
        if (isChannel) {
            if (z3) {
                if (chat.creator && z) {
                    TLRPC$TL_channels_deleteChannel tLRPC$TL_channels_deleteChannel = new TLRPC$TL_channels_deleteChannel();
                    tLRPC$TL_channels_deleteChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser2 = tLRPC$TL_channels_deleteChannel;
                } else {
                    TLRPC$TL_channels_leaveChannel tLRPC$TL_channels_leaveChannel = new TLRPC$TL_channels_leaveChannel();
                    tLRPC$TL_channels_leaveChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser2 = tLRPC$TL_channels_leaveChannel;
                }
                tLRPC$TL_messages_deleteChatUser = tLRPC$TL_messages_deleteChatUser2;
            } else {
                TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
                tLRPC$TL_channels_editBanned.channel = getInputChannel(chat);
                tLRPC$TL_channels_editBanned.participant = tLRPC$InputPeer;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = new TLRPC$TL_chatBannedRights();
                tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
                tLRPC$TL_chatBannedRights.view_messages = true;
                tLRPC$TL_chatBannedRights.send_media = true;
                tLRPC$TL_chatBannedRights.send_messages = true;
                tLRPC$TL_chatBannedRights.send_stickers = true;
                tLRPC$TL_chatBannedRights.send_gifs = true;
                tLRPC$TL_chatBannedRights.send_games = true;
                tLRPC$TL_chatBannedRights.send_inline = true;
                tLRPC$TL_chatBannedRights.embed_links = true;
                tLRPC$TL_chatBannedRights.pin_messages = true;
                tLRPC$TL_chatBannedRights.send_polls = true;
                tLRPC$TL_chatBannedRights.invite_users = true;
                tLRPC$TL_chatBannedRights.change_info = true;
                tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_editBanned;
            }
        } else if (z) {
            TLRPC$TL_messages_deleteChat tLRPC$TL_messages_deleteChat = new TLRPC$TL_messages_deleteChat();
            tLRPC$TL_messages_deleteChat.chat_id = j;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda335
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$deleteParticipantFromChat$289(tLObject, tLRPC$TL_error);
                }
            });
            return;
        } else {
            TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser3 = new TLRPC$TL_messages_deleteChatUser();
            tLRPC$TL_messages_deleteChatUser3.chat_id = j;
            tLRPC$TL_messages_deleteChatUser3.user_id = getInputUser(tLRPC$InputPeer);
            tLRPC$TL_messages_deleteChatUser3.revoke_history = true;
            tLRPC$TL_messages_deleteChatUser = tLRPC$TL_messages_deleteChatUser3;
        }
        if (z3) {
            deleteDialog(-j, 0, z2);
        }
        final boolean z4 = z3;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChatUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda336
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteParticipantFromChat$291(isChannel, z4, j, runnable, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$291(boolean z, boolean z2, final long j, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
        if (z && !z2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda239
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteParticipantFromChat$290(j);
                }
            }, 1000L);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$290(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void deleteParticipantFromChat(final long j, final TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, boolean z, boolean z2) {
        TLRPC$InputPeer inputPeer;
        TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser;
        if (tLRPC$User == null && tLRPC$Chat == null) {
            return;
        }
        if (tLRPC$User != null) {
            inputPeer = getInputPeer(tLRPC$User);
        } else {
            inputPeer = getInputPeer(tLRPC$Chat);
        }
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        final boolean isChannel = ChatObject.isChannel(chat);
        if (isChannel) {
            if (UserObject.isUserSelf(tLRPC$User)) {
                if (chat.creator && z) {
                    TLRPC$TL_channels_deleteChannel tLRPC$TL_channels_deleteChannel = new TLRPC$TL_channels_deleteChannel();
                    tLRPC$TL_channels_deleteChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_deleteChannel;
                } else {
                    TLRPC$TL_channels_leaveChannel tLRPC$TL_channels_leaveChannel = new TLRPC$TL_channels_leaveChannel();
                    tLRPC$TL_channels_leaveChannel.channel = getInputChannel(chat);
                    tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_leaveChannel;
                }
            } else {
                TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
                tLRPC$TL_channels_editBanned.channel = getInputChannel(chat);
                tLRPC$TL_channels_editBanned.participant = inputPeer;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = new TLRPC$TL_chatBannedRights();
                tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
                tLRPC$TL_chatBannedRights.view_messages = true;
                tLRPC$TL_chatBannedRights.send_media = true;
                tLRPC$TL_chatBannedRights.send_messages = true;
                tLRPC$TL_chatBannedRights.send_stickers = true;
                tLRPC$TL_chatBannedRights.send_gifs = true;
                tLRPC$TL_chatBannedRights.send_games = true;
                tLRPC$TL_chatBannedRights.send_inline = true;
                tLRPC$TL_chatBannedRights.embed_links = true;
                tLRPC$TL_chatBannedRights.pin_messages = true;
                tLRPC$TL_chatBannedRights.send_polls = true;
                tLRPC$TL_chatBannedRights.invite_users = true;
                tLRPC$TL_chatBannedRights.change_info = true;
                tLRPC$TL_messages_deleteChatUser = tLRPC$TL_channels_editBanned;
            }
        } else if (z) {
            TLRPC$TL_messages_deleteChat tLRPC$TL_messages_deleteChat = new TLRPC$TL_messages_deleteChat();
            tLRPC$TL_messages_deleteChat.chat_id = j;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChat, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda175
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$deleteParticipantFromChat$292(tLObject, tLRPC$TL_error);
                }
            });
            return;
        } else {
            TLRPC$TL_messages_deleteChatUser tLRPC$TL_messages_deleteChatUser2 = new TLRPC$TL_messages_deleteChatUser();
            tLRPC$TL_messages_deleteChatUser2.chat_id = j;
            tLRPC$TL_messages_deleteChatUser2.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_messages_deleteChatUser2.revoke_history = true;
            tLRPC$TL_messages_deleteChatUser = tLRPC$TL_messages_deleteChatUser2;
        }
        if (UserObject.isUserSelf(tLRPC$User)) {
            deleteDialog(-j, 0, z2);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteChatUser, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda176
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteParticipantFromChat$294(isChannel, tLRPC$User, j, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$294(boolean z, TLRPC$User tLRPC$User, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
        if (!z || UserObject.isUserSelf(tLRPC$User)) {
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteParticipantFromChat$293(j);
            }
        }, 1000L);
    }

    public /* synthetic */ void lambda$deleteParticipantFromChat$293(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatTitle(long j, String str) {
        TLRPC$TL_messages_editChatTitle tLRPC$TL_messages_editChatTitle;
        if (ChatObject.isChannel(j, this.currentAccount)) {
            TLRPC$TL_channels_editTitle tLRPC$TL_channels_editTitle = new TLRPC$TL_channels_editTitle();
            tLRPC$TL_channels_editTitle.channel = getInputChannel(j);
            tLRPC$TL_channels_editTitle.title = str;
            tLRPC$TL_messages_editChatTitle = tLRPC$TL_channels_editTitle;
        } else {
            TLRPC$TL_messages_editChatTitle tLRPC$TL_messages_editChatTitle2 = new TLRPC$TL_messages_editChatTitle();
            tLRPC$TL_messages_editChatTitle2.chat_id = j;
            tLRPC$TL_messages_editChatTitle2.title = str;
            tLRPC$TL_messages_editChatTitle = tLRPC$TL_messages_editChatTitle2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatTitle, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda467
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$changeChatTitle$295(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$changeChatTitle$295(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            return;
        }
        processUpdates((TLRPC$Updates) tLObject, false);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void changeChatAvatar(final long j, final TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$InputFile tLRPC$InputFile, TLRPC$InputFile tLRPC$InputFile2, TLRPC$VideoSize tLRPC$VideoSize, double d, final String str, final TLRPC$FileLocation tLRPC$FileLocation, final TLRPC$FileLocation tLRPC$FileLocation2, final Runnable runnable) {
        MessagesController messagesController;
        TLRPC$InputChatPhoto tLRPC$InputChatPhoto;
        TLRPC$TL_messages_editChatPhoto tLRPC$TL_messages_editChatPhoto;
        if (tLRPC$TL_inputChatPhoto != null) {
            messagesController = this;
            tLRPC$InputChatPhoto = tLRPC$TL_inputChatPhoto;
        } else if (tLRPC$InputFile != null || tLRPC$InputFile2 != null || tLRPC$VideoSize != null) {
            TLRPC$TL_inputChatUploadedPhoto tLRPC$TL_inputChatUploadedPhoto = new TLRPC$TL_inputChatUploadedPhoto();
            if (tLRPC$InputFile != null) {
                tLRPC$TL_inputChatUploadedPhoto.file = tLRPC$InputFile;
                tLRPC$TL_inputChatUploadedPhoto.flags |= 1;
            }
            if (tLRPC$InputFile2 != null) {
                tLRPC$TL_inputChatUploadedPhoto.video = tLRPC$InputFile2;
                tLRPC$TL_inputChatUploadedPhoto.video_start_ts = d;
                tLRPC$TL_inputChatUploadedPhoto.flags = tLRPC$TL_inputChatUploadedPhoto.flags | 2 | 4;
            }
            if (tLRPC$VideoSize != null) {
                tLRPC$TL_inputChatUploadedPhoto.video_emoji_markup = tLRPC$VideoSize;
                tLRPC$TL_inputChatUploadedPhoto.flags |= 8;
            }
            messagesController = this;
            tLRPC$InputChatPhoto = tLRPC$TL_inputChatUploadedPhoto;
        } else {
            tLRPC$InputChatPhoto = new TLRPC$InputChatPhoto() { // from class: org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(480546647);
                }
            };
            messagesController = this;
        }
        if (ChatObject.isChannel(j, messagesController.currentAccount)) {
            TLRPC$TL_channels_editPhoto tLRPC$TL_channels_editPhoto = new TLRPC$TL_channels_editPhoto();
            tLRPC$TL_channels_editPhoto.channel = getInputChannel(j);
            tLRPC$TL_channels_editPhoto.photo = tLRPC$InputChatPhoto;
            tLRPC$TL_messages_editChatPhoto = tLRPC$TL_channels_editPhoto;
        } else {
            TLRPC$TL_messages_editChatPhoto tLRPC$TL_messages_editChatPhoto2 = new TLRPC$TL_messages_editChatPhoto();
            tLRPC$TL_messages_editChatPhoto2.chat_id = j;
            tLRPC$TL_messages_editChatPhoto2.photo = tLRPC$InputChatPhoto;
            tLRPC$TL_messages_editChatPhoto = tLRPC$TL_messages_editChatPhoto2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatPhoto, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda101
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$changeChatAvatar$297(tLRPC$TL_inputChatPhoto, tLRPC$FileLocation, tLRPC$FileLocation2, str, j, runnable, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$changeChatAvatar$297(TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$FileLocation tLRPC$FileLocation, TLRPC$FileLocation tLRPC$FileLocation2, String str, long j, final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error != null) {
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        if (tLRPC$TL_inputChatPhoto == null) {
            int size = tLRPC$Updates.updates.size();
            int i = 0;
            while (true) {
                if (i >= size) {
                    tLRPC$Photo = null;
                    break;
                }
                TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                    TLRPC$MessageAction tLRPC$MessageAction = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatEditPhoto) {
                        tLRPC$Photo = tLRPC$MessageAction.photo;
                        if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                            break;
                        }
                    } else {
                        continue;
                    }
                    i++;
                } else {
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction2 = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction2.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    i++;
                }
            }
            if (tLRPC$Photo != null) {
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, ImageReceiver.DEFAULT_CROSSFADE_DURATION);
                TLRPC$VideoSize tLRPC$VideoSize = tLRPC$Photo.video_sizes.isEmpty() ? null : tLRPC$Photo.video_sizes.get(0);
                if (closestPhotoSizeWithSize != null && tLRPC$FileLocation != null) {
                    getFileLoader().getPathToAttach(tLRPC$FileLocation, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize, true));
                    ImageLoader.getInstance().replaceImageInCache(tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + "@50_50", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@50_50", ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo), true);
                }
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 800);
                if (closestPhotoSizeWithSize2 != null && tLRPC$FileLocation2 != null) {
                    getFileLoader().getPathToAttach(tLRPC$FileLocation2, true).renameTo(getFileLoader().getPathToAttach(closestPhotoSizeWithSize2, true));
                }
                if (tLRPC$VideoSize != null && str != null) {
                    new File(str).renameTo(getFileLoader().getPathToAttach(tLRPC$VideoSize, "mp4", true));
                }
                getDialogPhotos(-j).addPhotoAtStart(tLRPC$Photo);
            }
        }
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda242
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$changeChatAvatar$296(runnable);
            }
        });
    }

    public /* synthetic */ void lambda$changeChatAvatar$296(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.reloadDialogPhotos, new Object[0]);
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC$TL_account_unregisterDevice tLRPC$TL_account_unregisterDevice = new TLRPC$TL_account_unregisterDevice();
            tLRPC$TL_account_unregisterDevice.token = SharedConfig.pushString;
            tLRPC$TL_account_unregisterDevice.token_type = SharedConfig.pushType;
            for (int i = 0; i < 4; i++) {
                UserConfig userConfig = UserConfig.getInstance(i);
                if (i != this.currentAccount && userConfig.isClientActivated()) {
                    tLRPC$TL_account_unregisterDevice.other_uids.add(Long.valueOf(userConfig.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_unregisterDevice, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda191
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$unregistedPush$298(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public void performLogout(int i) {
        boolean z = true;
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_auth_logOut
                @Override // org.telegram.tgnet.TLObject
                public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i2, boolean z2) {
                    return TLRPC$TL_auth_loggedOut.TLdeserialize(abstractSerializedData, i2, z2);
                }

                @Override // org.telegram.tgnet.TLObject
                public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                    abstractSerializedData.writeInt32(1047706137);
                }
            }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda79
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$performLogout$300(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            getConnectionsManager().cleanup(i == 2);
        }
        getUserConfig().clearConfig();
        SharedPrefsHelper.cleanupAccount(this.currentAccount);
        ArrayList<NotificationCenter.NotificationCenterDelegate> observers = getNotificationCenter().getObservers(NotificationCenter.appDidLogout);
        if (observers != null) {
            int size = observers.size();
            int i2 = 0;
            while (true) {
                if (i2 >= size) {
                    break;
                } else if (observers.get(i2) instanceof LaunchActivity) {
                    z = false;
                    break;
                } else {
                    i2++;
                }
            }
        }
        if (z && UserConfig.selectedAccount == this.currentAccount) {
            int i3 = 0;
            while (true) {
                if (i3 >= 4) {
                    i3 = -1;
                    break;
                } else if (UserConfig.getInstance(i3).isClientActivated()) {
                    break;
                } else {
                    i3++;
                }
            }
            if (i3 != -1) {
                UserConfig.selectedAccount = i3;
                UserConfig.getInstance(0).saveConfig(false);
                LaunchActivity.clearFragments();
            }
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    public /* synthetic */ void lambda$performLogout$300(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getConnectionsManager().cleanup(false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda441
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$performLogout$299(TLObject.this);
            }
        });
    }

    public static /* synthetic */ void lambda$performLogout$299(TLObject tLObject) {
        if (tLObject instanceof TLRPC$TL_auth_loggedOut) {
            TLRPC$TL_auth_loggedOut tLRPC$TL_auth_loggedOut = (TLRPC$TL_auth_loggedOut) tLObject;
            if (tLRPC$TL_auth_loggedOut.future_auth_token != null) {
                AuthTokensHelper.addLogOutToken(tLRPC$TL_auth_loggedOut);
            }
        }
    }

    public void registerForPush(final int i, final String str) {
        if (TextUtils.isEmpty(str) || this.registeringForPush || getUserConfig().getClientUserId() == 0) {
            return;
        }
        if (getUserConfig().registeredForPush && str.equals(SharedConfig.pushString)) {
            return;
        }
        this.registeringForPush = true;
        this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
        if (SharedConfig.pushAuthKey == null) {
            SharedConfig.pushAuthKey = new byte[LiteMode.FLAG_CHAT_BLUR];
            Utilities.random.nextBytes(SharedConfig.pushAuthKey);
            SharedConfig.saveConfig();
        }
        TLRPC$TL_account_registerDevice tLRPC$TL_account_registerDevice = new TLRPC$TL_account_registerDevice();
        tLRPC$TL_account_registerDevice.token_type = i;
        tLRPC$TL_account_registerDevice.token = str;
        tLRPC$TL_account_registerDevice.no_muted = false;
        tLRPC$TL_account_registerDevice.secret = SharedConfig.pushAuthKey;
        for (int i2 = 0; i2 < 4; i2++) {
            UserConfig userConfig = UserConfig.getInstance(i2);
            if (i2 != this.currentAccount && userConfig.isClientActivated()) {
                long clientUserId = userConfig.getClientUserId();
                tLRPC$TL_account_registerDevice.other_uids.add(Long.valueOf(clientUserId));
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                }
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_registerDevice, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda153
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$registerForPush$302(i, str, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$registerForPush$302(int i, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push, push type: " + i);
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            SharedConfig.pushType = i;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda416
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$registerForPush$301();
            }
        });
    }

    public /* synthetic */ void lambda$registerForPush$301() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (this.updatingState) {
            return;
        }
        this.updatingState = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_updates_getState
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$TL_updates_state.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-304838614);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda93
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadCurrentState$303(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadCurrentState$303(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.updatingState = false;
        if (tLRPC$TL_error == null) {
            TLRPC$TL_updates_state tLRPC$TL_updates_state = (TLRPC$TL_updates_state) tLObject;
            getMessagesStorage().setLastDateValue(tLRPC$TL_updates_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$TL_updates_state.pts);
            getMessagesStorage().setLastSeqValue(tLRPC$TL_updates_state.seq);
            getMessagesStorage().setLastQtsValue(tLRPC$TL_updates_state.qts);
            for (int i = 0; i < 3; i++) {
                processUpdatesQueue(i, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (tLRPC$TL_error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC$Updates tLRPC$Updates) {
        if (tLRPC$Updates instanceof TLRPC$TL_updatesCombined) {
            return tLRPC$Updates.seq_start;
        }
        return tLRPC$Updates.seq;
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i == 2) {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0L;
    }

    private int isValidUpdate(TLRPC$Updates tLRPC$Updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(tLRPC$Updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        } else if (i == 1) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts ? 0 : 1;
        } else if (i == 2) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + tLRPC$Updates.updates.size() == tLRPC$Updates.pts ? 0 : 1;
        } else {
            return 0;
        }
    }

    private void processChannelsUpdatesQueue(long j, int i) {
        char c;
        ArrayList<TLRPC$Updates> arrayList = this.updatesQueueChannels.get(j);
        if (arrayList == null) {
            return;
        }
        int i2 = this.channelsPts.get(j);
        if (arrayList.isEmpty() || i2 == 0) {
            this.updatesQueueChannels.remove(j);
            return;
        }
        Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$processChannelsUpdatesQueue$304;
                lambda$processChannelsUpdatesQueue$304 = MessagesController.lambda$processChannelsUpdatesQueue$304((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                return lambda$processChannelsUpdatesQueue$304;
            }
        });
        if (i == 2) {
            this.channelsPts.put(j, arrayList.get(0).pts);
        }
        boolean z = false;
        while (arrayList.size() > 0) {
            TLRPC$Updates tLRPC$Updates = arrayList.get(0);
            int i3 = tLRPC$Updates.pts;
            if (i3 <= i2) {
                c = 2;
            } else {
                c = tLRPC$Updates.pts_count + i2 == i3 ? (char) 0 : (char) 1;
            }
            if (c == 0) {
                processUpdates(tLRPC$Updates, true);
                if (arrayList.size() <= 0) {
                    break;
                }
                arrayList.remove(0);
                z = true;
            } else if (c == 1) {
                long j2 = this.updatesStartWaitTimeChannels.get(j);
                if (j2 != 0 && (z || Math.abs(System.currentTimeMillis() - j2) <= 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - getChannelDifference ");
                }
                this.updatesStartWaitTimeChannels.delete(j);
                this.updatesQueueChannels.remove(j);
                getChannelDifference(j);
                return;
            } else if (arrayList.size() <= 0) {
                break;
            } else {
                arrayList.remove(0);
            }
        }
        this.updatesQueueChannels.remove(j);
        this.updatesStartWaitTimeChannels.delete(j);
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("UPDATES CHANNEL " + j + " QUEUE PROCEED - OK");
        }
    }

    public static /* synthetic */ int lambda$processChannelsUpdatesQueue$304(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC$Updates> arrayList;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda32
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$305;
                    lambda$processUpdatesQueue$305 = MessagesController.this.lambda$processUpdatesQueue$305((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                    return lambda$processUpdatesQueue$305;
                }
            });
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda33
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$306;
                    lambda$processUpdatesQueue$306 = MessagesController.lambda$processUpdatesQueue$306((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                    return lambda$processUpdatesQueue$306;
                }
            });
        } else if (i == 2) {
            arrayList = this.updatesQueueQts;
            Collections.sort(arrayList, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda34
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$processUpdatesQueue$307;
                    lambda$processUpdatesQueue$307 = MessagesController.lambda$processUpdatesQueue$307((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                    return lambda$processUpdatesQueue$307;
                }
            });
        } else {
            arrayList = null;
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            if (i2 == 2) {
                TLRPC$Updates tLRPC$Updates = arrayList.get(0);
                if (i == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(tLRPC$Updates));
                } else if (i == 1) {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(tLRPC$Updates.pts);
                }
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates2 = arrayList.get(0);
                int isValidUpdate = isValidUpdate(tLRPC$Updates2, i);
                if (isValidUpdate == 0) {
                    processUpdates(tLRPC$Updates2, true);
                    arrayList.remove(0);
                    z = true;
                } else if (isValidUpdate == 1) {
                    if (getUpdatesStartTime(i) != 0 && (z || Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) <= 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                        }
                        if (z) {
                            setUpdatesStartTime(i, System.currentTimeMillis());
                            return;
                        }
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(i, 0L);
                    arrayList.clear();
                    getDifference();
                    return;
                } else {
                    arrayList.remove(0);
                }
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(i, 0L);
    }

    public /* synthetic */ int lambda$processUpdatesQueue$305(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(getUpdateSeq(tLRPC$Updates), getUpdateSeq(tLRPC$Updates2));
    }

    public static /* synthetic */ int lambda$processUpdatesQueue$306(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    public static /* synthetic */ int lambda$processUpdatesQueue$307(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(tLRPC$Updates.pts, tLRPC$Updates2.pts);
    }

    public void loadUnknownChannel(final TLRPC$Chat tLRPC$Chat, final long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (!(tLRPC$Chat instanceof TLRPC$TL_channel) || this.gettingUnknownChannels.indexOfKey(tLRPC$Chat.id) >= 0) {
            return;
        }
        if (tLRPC$Chat.access_hash == 0) {
            if (j != 0) {
                getMessagesStorage().removePendingTask(j);
                return;
            }
            return;
        }
        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
        long j2 = tLRPC$Chat.id;
        tLRPC$TL_inputPeerChannel.channel_id = j2;
        tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
        this.gettingUnknownChannels.put(j2, Boolean.TRUE);
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize() + 4);
                try {
                    nativeByteBuffer.writeInt32(0);
                    tLRPC$Chat.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e(e);
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda285
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadUnknownChannel$308(j, tLRPC$Chat, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e3) {
                nativeByteBuffer = null;
                e = e3;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda285
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnknownChannel$308(j, tLRPC$Chat, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnknownChannel$308(long j, TLRPC$Chat tLRPC$Chat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty() && !tLRPC$TL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, null, null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(tLRPC$Chat.id);
    }

    public void startShortPoll(TLRPC$Chat tLRPC$Chat, int i, boolean z) {
        startShortPoll(tLRPC$Chat, i, z, null);
    }

    public void startShortPoll(final TLRPC$Chat tLRPC$Chat, final int i, final boolean z, final androidx.core.util.Consumer<Boolean> consumer) {
        if (tLRPC$Chat == null) {
            return;
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda339
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$startShortPoll$311(tLRPC$Chat, z, i, consumer);
            }
        });
    }

    public /* synthetic */ void lambda$startShortPoll$311(TLRPC$Chat tLRPC$Chat, boolean z, int i, final androidx.core.util.Consumer consumer) {
        ArrayList<Integer> arrayList = this.needShortPollChannels.get(tLRPC$Chat.id);
        ArrayList<Integer> arrayList2 = this.needShortPollOnlines.get(tLRPC$Chat.id);
        if (z) {
            if (arrayList != null) {
                arrayList.remove(Integer.valueOf(i));
            }
            if (arrayList == null || arrayList.isEmpty()) {
                this.needShortPollChannels.delete(tLRPC$Chat.id);
            }
            if (tLRPC$Chat.megagroup) {
                if (arrayList2 != null) {
                    arrayList2.remove(Integer.valueOf(i));
                }
                if (arrayList2 == null || arrayList2.isEmpty()) {
                    this.needShortPollOnlines.delete(tLRPC$Chat.id);
                    return;
                }
                return;
            }
            return;
        }
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.needShortPollChannels.put(tLRPC$Chat.id, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(i))) {
            arrayList.add(Integer.valueOf(i));
        }
        if (this.shortPollChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            if (consumer != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda331
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$startShortPoll$309(androidx.core.util.Consumer.this);
                    }
                });
            }
            getChannelDifference(tLRPC$Chat.id, 3, 0L, null);
        } else if (consumer != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda332
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$startShortPoll$310(androidx.core.util.Consumer.this);
                }
            });
        }
        if (tLRPC$Chat.megagroup) {
            if (arrayList2 == null) {
                arrayList2 = new ArrayList<>();
                this.needShortPollOnlines.put(tLRPC$Chat.id, arrayList2);
            }
            if (!arrayList2.contains(Integer.valueOf(i))) {
                arrayList2.add(Integer.valueOf(i));
            }
            if (this.shortPollOnlines.indexOfKey(tLRPC$Chat.id) < 0) {
                this.shortPollOnlines.put(tLRPC$Chat.id, 0);
            }
        }
    }

    public static /* synthetic */ void lambda$startShortPoll$309(androidx.core.util.Consumer consumer) {
        consumer.accept(Boolean.TRUE);
    }

    public static /* synthetic */ void lambda$startShortPoll$310(androidx.core.util.Consumer consumer) {
        consumer.accept(Boolean.FALSE);
    }

    private void getChannelDifference(long j) {
        getChannelDifference(j, 0, 0L, null);
    }

    public static boolean isSupportUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User != null) {
            if (!tLRPC$User.support) {
                long j = tLRPC$User.id;
                if (j == 777000 || j == 333000 || j == 4240000 || j == 4244000 || j == 4245000 || j == 4246000 || j == 410000 || j == 420000 || j == 431000 || j == 431415000 || j == 434000 || j == 4243000 || j == 439000 || j == 449000 || j == 450000 || j == 452000 || j == 454000 || j == 4254000 || j == 455000 || j == 460000 || j == 470000 || j == 479000 || j == 796000 || j == 482000 || j == 490000 || j == 496000 || j == 497000 || j == 498000 || j == 4298000) {
                }
            }
            return true;
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:124:0x00ed  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x00f4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void getChannelDifference(final long j, final int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        int i2;
        int i3;
        TLRPC$InputChannel tLRPC$InputChannel2;
        NativeByteBuffer nativeByteBuffer;
        long j3 = j2;
        if (this.gettingDifferenceChannels.get(j, Boolean.FALSE).booleanValue()) {
            return;
        }
        if (i == 1) {
            if (this.channelsPts.get(j) != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda186
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$312(j);
                    }
                });
                return;
            } else {
                i2 = 1;
                i3 = 1;
            }
        } else {
            i2 = this.channelsPts.get(j);
            if (i2 == 0) {
                i2 = getMessagesStorage().getChannelPtsSync(j);
                if (i2 != 0) {
                    this.channelsPts.put(j, i2);
                }
                if (i2 == 0 && (i == 2 || i == 3)) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda187
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$getChannelDifference$313(j);
                        }
                    });
                    return;
                }
            }
            if (i2 == 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$314(j);
                    }
                });
                return;
            }
            i3 = 100;
        }
        if (tLRPC$InputChannel == null) {
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (chat == null && (chat = getMessagesStorage().getChatSync(j)) != null) {
                putChat(chat, true);
            }
            tLRPC$InputChannel2 = getInputChannel(chat);
        } else {
            tLRPC$InputChannel2 = tLRPC$InputChannel;
        }
        if (tLRPC$InputChannel2.access_hash == 0) {
            if (j3 != 0) {
                getMessagesStorage().removePendingTask(j3);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda189
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$315(j);
                }
            });
            return;
        }
        if (j3 == 0) {
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputChannel2.getObjectSize() + 16);
                try {
                    nativeByteBuffer.writeInt32(25);
                    nativeByteBuffer.writeInt64(j);
                    nativeByteBuffer.writeInt32(i);
                    tLRPC$InputChannel2.serializeToStream(nativeByteBuffer);
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    final long j4 = j3;
                    this.gettingDifferenceChannels.put(j, Boolean.TRUE);
                    TLRPC$TL_updates_getChannelDifference tLRPC$TL_updates_getChannelDifference = new TLRPC$TL_updates_getChannelDifference();
                    tLRPC$TL_updates_getChannelDifference.channel = tLRPC$InputChannel2;
                    tLRPC$TL_updates_getChannelDifference.filter = new TLRPC$ChannelMessagesFilter() { // from class: org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
                        @Override // org.telegram.tgnet.TLObject
                        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                            abstractSerializedData.writeInt32(-1798033689);
                        }
                    };
                    tLRPC$TL_updates_getChannelDifference.pts = i2;
                    tLRPC$TL_updates_getChannelDifference.limit = i3;
                    tLRPC$TL_updates_getChannelDifference.force = i != 3;
                    if (BuildVars.LOGS_ENABLED) {
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_updates_getChannelDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda190
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$getChannelDifference$327(j, i, j4, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e2) {
                e = e2;
            }
            j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        final long j42 = j3;
        this.gettingDifferenceChannels.put(j, Boolean.TRUE);
        TLRPC$TL_updates_getChannelDifference tLRPC$TL_updates_getChannelDifference2 = new TLRPC$TL_updates_getChannelDifference();
        tLRPC$TL_updates_getChannelDifference2.channel = tLRPC$InputChannel2;
        tLRPC$TL_updates_getChannelDifference2.filter = new TLRPC$ChannelMessagesFilter() { // from class: org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-1798033689);
            }
        };
        tLRPC$TL_updates_getChannelDifference2.pts = i2;
        tLRPC$TL_updates_getChannelDifference2.limit = i3;
        tLRPC$TL_updates_getChannelDifference2.force = i != 3;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("start getChannelDifference with pts = " + i2 + " channelId = " + j);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_updates_getChannelDifference2, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda190
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getChannelDifference$327(j, i, j42, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$312(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$313(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$314(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$315(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$327(final long j, final int i, final long j2, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        final TLRPC$Chat tLRPC$Chat;
        if (tLObject == null) {
            if (tLRPC$TL_error != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda300
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$326(tLRPC$TL_error, j);
                    }
                });
                this.gettingDifferenceChannels.delete(j);
                if (j2 != 0) {
                    getMessagesStorage().removePendingTask(j2);
                    return;
                }
                return;
            }
            return;
        }
        final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference = (TLRPC$updates_ChannelDifference) tLObject;
        final LongSparseArray longSparseArray = new LongSparseArray();
        int i2 = 0;
        for (int i3 = 0; i3 < tLRPC$updates_ChannelDifference.users.size(); i3++) {
            TLRPC$User tLRPC$User = tLRPC$updates_ChannelDifference.users.get(i3);
            longSparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        int i4 = 0;
        while (true) {
            if (i4 >= tLRPC$updates_ChannelDifference.chats.size()) {
                tLRPC$Chat = null;
                break;
            }
            TLRPC$Chat tLRPC$Chat2 = tLRPC$updates_ChannelDifference.chats.get(i4);
            if (tLRPC$Chat2.id == j) {
                tLRPC$Chat = tLRPC$Chat2;
                break;
            }
            i4++;
        }
        final ArrayList arrayList = new ArrayList();
        if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
            while (i2 < tLRPC$updates_ChannelDifference.other_updates.size()) {
                TLRPC$Update tLRPC$Update = tLRPC$updates_ChannelDifference.other_updates.get(i2);
                if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                    arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                    tLRPC$updates_ChannelDifference.other_updates.remove(i2);
                    i2--;
                }
                i2++;
            }
        }
        getMessagesStorage().putUsersAndChats(tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, true);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda298
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$316(tLRPC$updates_ChannelDifference);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda299
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$325(arrayList, j, tLRPC$updates_ChannelDifference, tLRPC$Chat, longSparseArray, i, j2);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$316(TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        putUsers(tLRPC$updates_ChannelDifference.users, false);
        putChats(tLRPC$updates_ChannelDifference.chats, false);
    }

    public /* synthetic */ void lambda$getChannelDifference$325(ArrayList arrayList, final long j, final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, final TLRPC$Chat tLRPC$Chat, final LongSparseArray longSparseArray, final int i, final long j2) {
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, -j, null, tLRPC$TL_updateMessageID.id, 0, false, -1, 0);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda419
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$317(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda420
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$324(tLRPC$updates_ChannelDifference, j, tLRPC$Chat, longSparseArray, i, j2);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$317(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.messageReceivedByServer;
            Boolean bool = Boolean.FALSE;
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messageReceivedByServer2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:171:0x017d  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:185:0x01ef  */
    /* JADX WARN: Removed duplicated region for block: B:188:0x01f6  */
    /* JADX WARN: Removed duplicated region for block: B:191:0x026c  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0275  */
    /* JADX WARN: Removed duplicated region for block: B:201:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getChannelDifference$324(final TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, final long j, TLRPC$Chat tLRPC$Chat, LongSparseArray longSparseArray, int i, long j2) {
        boolean z;
        MessageObject messageObject;
        ArrayList arrayList;
        boolean z2;
        TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
        boolean z3 = false;
        if ((tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifference) || (tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifferenceEmpty)) {
            if (!tLRPC$updates_ChannelDifference.new_messages.isEmpty()) {
                final LongSparseArray longSparseArray2 = new LongSparseArray();
                ImageLoader.saveMessagesThumbs(tLRPC$updates_ChannelDifference.new_messages);
                final ArrayList arrayList2 = new ArrayList();
                long j3 = -j;
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j3));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j3));
                    this.dialogs_read_inbox_max.put(Long.valueOf(j3), num);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j3));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j3));
                    this.dialogs_read_outbox_max.put(Long.valueOf(j3), num2);
                }
                int i2 = 0;
                while (i2 < tLRPC$updates_ChannelDifference.new_messages.size()) {
                    TLRPC$Message tLRPC$Message = tLRPC$updates_ChannelDifference.new_messages.get(i2);
                    if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                        if (tLRPC$Chat2 == null || !tLRPC$Chat2.left) {
                            if ((tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id && !(tLRPC$Message.action instanceof TLRPC$TL_messageActionChannelCreate)) {
                                z = true;
                                tLRPC$Message.unread = z;
                                boolean contains = this.createdDialogIds.contains(Long.valueOf(j3));
                                messageObject = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, contains, contains);
                                if ((messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                                    arrayList2.add(messageObject);
                                }
                                arrayList = (ArrayList) longSparseArray2.get(j3);
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                    longSparseArray2.put(j3, arrayList);
                                }
                                arrayList.add(messageObject);
                            }
                        }
                        z = false;
                        tLRPC$Message.unread = z;
                        boolean contains2 = this.createdDialogIds.contains(Long.valueOf(j3));
                        messageObject = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, contains2, contains2);
                        if (messageObject.isOut()) {
                        }
                        arrayList2.add(messageObject);
                        arrayList = (ArrayList) longSparseArray2.get(j3);
                        if (arrayList == null) {
                        }
                        arrayList.add(messageObject);
                    }
                    i2++;
                    tLRPC$Chat2 = tLRPC$Chat;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda123
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$318(longSparseArray2);
                    }
                });
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda124
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getChannelDifference$320(arrayList2, tLRPC$updates_ChannelDifference);
                    }
                });
            }
            if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
                processUpdateArray(tLRPC$updates_ChannelDifference.other_updates, tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, 0);
            }
            processChannelsUpdatesQueue(j, 1);
            getMessagesStorage().saveChannelPts(j, tLRPC$updates_ChannelDifference.pts);
        } else if (tLRPC$updates_ChannelDifference instanceof TLRPC$TL_updates_channelDifferenceTooLong) {
            long j4 = -j;
            Integer num3 = this.dialogs_read_inbox_max.get(Long.valueOf(j4));
            if (num3 == null) {
                num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j4));
                this.dialogs_read_inbox_max.put(Long.valueOf(j4), num3);
            }
            Integer num4 = this.dialogs_read_outbox_max.get(Long.valueOf(j4));
            if (num4 == null) {
                num4 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j4));
                this.dialogs_read_outbox_max.put(Long.valueOf(j4), num4);
            }
            for (int i3 = 0; i3 < tLRPC$updates_ChannelDifference.messages.size(); i3++) {
                TLRPC$Message tLRPC$Message2 = tLRPC$updates_ChannelDifference.messages.get(i3);
                tLRPC$Message2.dialog_id = j4;
                if (!(tLRPC$Message2.action instanceof TLRPC$TL_messageActionChannelCreate) && (tLRPC$Chat2 == null || !tLRPC$Chat2.left)) {
                    if ((tLRPC$Message2.out ? num4 : num3).intValue() < tLRPC$Message2.id) {
                        z2 = true;
                        tLRPC$Message2.unread = z2;
                    }
                }
                z2 = false;
                tLRPC$Message2.unread = z2;
            }
            getMessagesStorage().overwriteChannel(j, (TLRPC$TL_updates_channelDifferenceTooLong) tLRPC$updates_ChannelDifference, i, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda125
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$322(j);
                }
            });
            this.gettingDifferenceChannels.delete(j);
            this.channelsPts.put(j, tLRPC$updates_ChannelDifference.pts);
            if ((tLRPC$updates_ChannelDifference.flags & 2) != 0) {
                this.shortPollChannels.put(j, ((int) (System.currentTimeMillis() / 1000)) + tLRPC$updates_ChannelDifference.timeout);
            }
            if (!tLRPC$updates_ChannelDifference.isFinal) {
                getChannelDifference(j);
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("received channel difference with pts = " + tLRPC$updates_ChannelDifference.pts + " channelId = " + j);
                FileLog.d("new_messages = " + tLRPC$updates_ChannelDifference.new_messages.size() + " messages = " + tLRPC$updates_ChannelDifference.messages.size() + " users = " + tLRPC$updates_ChannelDifference.users.size() + " chats = " + tLRPC$updates_ChannelDifference.chats.size() + " other updates = " + tLRPC$updates_ChannelDifference.other_updates.size());
            }
            if (j2 != 0) {
                getMessagesStorage().removePendingTask(j2);
            }
            if (z3) {
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda126
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$323(j);
                }
            });
            return;
        }
        z3 = true;
        this.gettingDifferenceChannels.delete(j);
        this.channelsPts.put(j, tLRPC$updates_ChannelDifference.pts);
        if ((tLRPC$updates_ChannelDifference.flags & 2) != 0) {
        }
        if (!tLRPC$updates_ChannelDifference.isFinal) {
        }
        if (BuildVars.LOGS_ENABLED) {
        }
        if (j2 != 0) {
        }
        if (z3) {
        }
    }

    public /* synthetic */ void lambda$getChannelDifference$318(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), 0);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$getChannelDifference$320(final ArrayList arrayList, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda140
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getChannelDifference$319(arrayList);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_ChannelDifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), 0, 0L);
    }

    public /* synthetic */ void lambda$getChannelDifference$319(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$getChannelDifference$322(final long j) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda444
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelDifference$321(j);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelDifference$321(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$323(long j) {
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    public /* synthetic */ void lambda$getChannelDifference$326(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.onReceivedChannelDifference, Long.valueOf(j));
    }

    private void checkChannelError(String str, long j) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1809401834:
                if (str.equals("USER_BANNED_IN_CHANNEL")) {
                    c = 0;
                    break;
                }
                break;
            case -795226617:
                if (str.equals("CHANNEL_PRIVATE")) {
                    c = 1;
                    break;
                }
                break;
            case -471086771:
                if (str.equals("CHANNEL_PUBLIC_GROUP_NA")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 2);
                return;
            case 1:
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 0);
                return;
            case 2:
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 1);
                return;
            default:
                return;
        }
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, final int i2, final int i3, boolean z) {
        registerForPush(SharedConfig.pushType, SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (z || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC$TL_updates_getDifference tLRPC$TL_updates_getDifference = new TLRPC$TL_updates_getDifference();
            tLRPC$TL_updates_getDifference.pts = i;
            tLRPC$TL_updates_getDifference.date = i2;
            tLRPC$TL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tLRPC$TL_updates_getDifference.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 5000;
                } else {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (tLRPC$TL_updates_getDifference.date == 0) {
                tLRPC$TL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
                FileLog.d("getDifference: isUpdating = true");
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tLRPC$TL_updates_getDifference, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getDifference$337(i2, i3, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getDifference$337(final int i, final int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i3 = 0;
        if (tLRPC$TL_error == null) {
            final TLRPC$updates_Difference tLRPC$updates_Difference = (TLRPC$updates_Difference) tLObject;
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda85
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getDifference$328(tLRPC$updates_Difference, i, i2);
                    }
                });
                return;
            }
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
                TLRPC$TL_updates_state tLRPC$TL_updates_state = tLRPC$updates_Difference.intermediate_state;
                getDifference(tLRPC$TL_updates_state.pts, tLRPC$TL_updates_state.date, tLRPC$TL_updates_state.qts, true);
            }
            final LongSparseArray longSparseArray = new LongSparseArray();
            final LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i4 = 0; i4 < tLRPC$updates_Difference.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$updates_Difference.users.get(i4);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$updates_Difference.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$updates_Difference.chats.get(i5);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            final ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
                while (i3 < tLRPC$updates_Difference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_Difference.other_updates.get(i3);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_Difference.other_updates.remove(i3);
                    } else {
                        if (getUpdateType(tLRPC$Update) == 2) {
                            long updateChannelId = getUpdateChannelId(tLRPC$Update);
                            int i6 = this.channelsPts.get(updateChannelId);
                            if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                                this.channelsPts.put(updateChannelId, i6);
                            }
                            if (i6 != 0 && getUpdatePts(tLRPC$Update) <= i6) {
                                tLRPC$updates_Difference.other_updates.remove(i3);
                            }
                        }
                        i3++;
                    }
                    i3--;
                    i3++;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda86
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$329(tLRPC$updates_Difference);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda87
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$336(tLRPC$updates_Difference, arrayList, longSparseArray, longSparseArray2);
                }
            });
            return;
        }
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
        FileLog.d("received: isUpdating = false");
    }

    public /* synthetic */ void lambda$getDifference$328(TLRPC$updates_Difference tLRPC$updates_Difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), tLRPC$updates_Difference.pts, i, i2);
        getStoriesController().cleanup();
    }

    public /* synthetic */ void lambda$getDifference$329(TLRPC$updates_Difference tLRPC$updates_Difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(tLRPC$updates_Difference.users, false);
        putChats(tLRPC$updates_Difference.chats, false);
    }

    public /* synthetic */ void lambda$getDifference$336(final TLRPC$updates_Difference tLRPC$updates_Difference, ArrayList arrayList, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2) {
        getMessagesStorage().putUsersAndChats(tLRPC$updates_Difference.users, tLRPC$updates_Difference.chats, true, false);
        if (!arrayList.isEmpty()) {
            final SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, 0L, null, tLRPC$TL_updateMessageID.id, 0, false, -1, 0);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda49
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getDifference$330(sparseArray);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda50
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$335(tLRPC$updates_Difference, longSparseArray, longSparseArray2);
            }
        });
    }

    public /* synthetic */ void lambda$getDifference$330(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.messageReceivedByServer;
            Boolean bool = Boolean.FALSE;
            notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messageReceivedByServer2, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, bool);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:154:0x0121, code lost:
        if (r10.messageOwner.from_scheduled != false) goto L83;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getDifference$335(final TLRPC$updates_Difference tLRPC$updates_Difference, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        MessageObject messageObject;
        TLRPC$User tLRPC$User;
        int i = 0;
        if (!tLRPC$updates_Difference.new_messages.isEmpty() || !tLRPC$updates_Difference.new_encrypted_messages.isEmpty()) {
            final LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$updates_Difference.new_encrypted_messages.size(); i2++) {
                ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(tLRPC$updates_Difference.new_encrypted_messages.get(i2));
                if (decryptMessage != null && !decryptMessage.isEmpty()) {
                    tLRPC$updates_Difference.new_messages.addAll(decryptMessage);
                }
            }
            ImageLoader.saveMessagesThumbs(tLRPC$updates_Difference.new_messages);
            final ArrayList arrayList = new ArrayList();
            long clientUserId = getUserConfig().getClientUserId();
            for (int i3 = 0; i3 < tLRPC$updates_Difference.new_messages.size(); i3++) {
                TLRPC$Message tLRPC$Message = tLRPC$updates_Difference.new_messages.get(i3);
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    MessageObject.getDialogId(tLRPC$Message);
                    if (!DialogObject.isEncryptedDialog(tLRPC$Message.dialog_id)) {
                        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                        if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                            tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                            tLRPC$Message.flags |= 64;
                        }
                        TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                        if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                            tLRPC$Message.unread = false;
                            tLRPC$Message.media_unread = false;
                        } else {
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer num = concurrentHashMap.get(Long.valueOf(tLRPC$Message.dialog_id));
                            if (num == null) {
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                            }
                            tLRPC$Message.unread = num.intValue() < tLRPC$Message.id;
                        }
                    }
                    long j = tLRPC$Message.dialog_id;
                    if (j == clientUserId) {
                        tLRPC$Message.unread = false;
                        tLRPC$Message.media_unread = false;
                        tLRPC$Message.out = true;
                    }
                    boolean contains = this.createdDialogIds.contains(Long.valueOf(j));
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, longSparseArray, longSparseArray2, contains, contains);
                    if (messageObject2.isOut()) {
                        messageObject = messageObject2;
                    } else {
                        messageObject = messageObject2;
                    }
                    if (messageObject.isUnread()) {
                        arrayList.add(messageObject);
                    }
                    ArrayList arrayList2 = (ArrayList) longSparseArray3.get(tLRPC$Message.dialog_id);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                        longSparseArray3.put(tLRPC$Message.dialog_id, arrayList2);
                    }
                    arrayList2.add(messageObject);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda321
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$334(arrayList, tLRPC$updates_Difference, longSparseArray3);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
            processUpdateArray(tLRPC$updates_Difference.other_updates, tLRPC$updates_Difference.users, tLRPC$updates_Difference.chats, true, 0);
        }
        if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference.state.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference.state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference.state.qts);
            FileLog.d("received difference: isUpdating = false");
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        } else if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference.intermediate_state.qts);
        } else if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference.date);
            getConnectionsManager().setIsUpdating(false);
            FileLog.d("received differenceEmpty: isUpdating = false");
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + tLRPC$updates_Difference.new_messages.size() + " users = " + tLRPC$updates_Difference.users.size() + " chats = " + tLRPC$updates_Difference.chats.size() + " other updates = " + tLRPC$updates_Difference.other_updates.size());
        }
    }

    public /* synthetic */ void lambda$getDifference$334(final ArrayList arrayList, final TLRPC$updates_Difference tLRPC$updates_Difference, LongSparseArray longSparseArray) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda468
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$331(arrayList, tLRPC$updates_Difference);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_Difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), 0, 0L);
        for (int i = 0; i < longSparseArray.size(); i++) {
            final long keyAt = longSparseArray.keyAt(i);
            final ArrayList<MessageObject> arrayList2 = (ArrayList) longSparseArray.valueAt(i);
            getMediaDataController().loadReplyMessagesForMessages(arrayList2, keyAt, 0, 0L, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda469
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$getDifference$333(keyAt, arrayList2);
                }
            }, 0, null);
        }
    }

    public /* synthetic */ void lambda$getDifference$331(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        getNotificationsController().processNewMessages(arrayList, !(tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice), false, null);
    }

    public /* synthetic */ void lambda$getDifference$333(final long j, final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getDifference$332(j, arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$getDifference$332(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public void markDialogAsUnread(long j, TLRPC$InputPeer tLRPC$InputPeer, final long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.unread_mark = true;
            if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j, 0L)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    DialogFilter dialogFilter = dialogFilterArr[i];
                    if (dialogFilter != null && (dialogFilter.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs(null);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        if (DialogObject.isEncryptedDialog(j)) {
            return;
        }
        TLRPC$TL_messages_markDialogUnread tLRPC$TL_messages_markDialogUnread = new TLRPC$TL_messages_markDialogUnread();
        tLRPC$TL_messages_markDialogUnread.unread = true;
        if (tLRPC$InputPeer == null) {
            tLRPC$InputPeer = getInputPeer(j);
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerEmpty) {
            return;
        }
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_markDialogUnread.peer = tLRPC$TL_inputDialogPeer;
        if (j2 == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 12);
            } catch (Exception e) {
                e = e;
            }
            try {
                nativeByteBuffer.writeInt32(9);
                nativeByteBuffer.writeInt64(j);
                tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
            } catch (Exception e2) {
                e = e2;
                nativeByteBuffer2 = nativeByteBuffer;
                FileLog.e(e);
                nativeByteBuffer = nativeByteBuffer2;
                j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda226
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$markDialogAsUnread$338(j2, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda226
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markDialogAsUnread$338(j2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsUnread$338(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadUnreadDialogs() {
        if (this.loadingUnreadDialogs || getUserConfig().unreadDialogsLoaded) {
            return;
        }
        this.loadingUnreadDialogs = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_messages_getDialogUnreadMarks
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                TLRPC$Vector tLRPC$Vector = new TLRPC$Vector();
                int readInt32 = abstractSerializedData.readInt32(z);
                for (int i2 = 0; i2 < readInt32; i2++) {
                    TLRPC$DialogPeer TLdeserialize = TLRPC$DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize == null) {
                        return tLRPC$Vector;
                    }
                    tLRPC$Vector.objects.add(TLdeserialize);
                }
                return tLRPC$Vector;
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(585256482);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda417
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadUnreadDialogs$340(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$340(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda143
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadUnreadDialogs$339(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$339(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                TLRPC$DialogPeer tLRPC$DialogPeer = (TLRPC$DialogPeer) tLRPC$Vector.objects.get(i);
                if (tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer) {
                    TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer;
                    long j = tLRPC$Peer.user_id;
                    if (j == 0) {
                        long j2 = tLRPC$Peer.chat_id;
                        j = j2 != 0 ? -j2 : -tLRPC$Peer.channel_id;
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
                    if (tLRPC$Dialog != null && !tLRPC$Dialog.unread_mark) {
                        tLRPC$Dialog.unread_mark = true;
                        if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j, 0L)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC$InputDialogPeer> arrayList, final long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messages_reorderPinnedDialogs tLRPC$TL_messages_reorderPinnedDialogs = new TLRPC$TL_messages_reorderPinnedDialogs();
        tLRPC$TL_messages_reorderPinnedDialogs.folder_id = i;
        tLRPC$TL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            if (dialogs.isEmpty()) {
                return;
            }
            ArrayList<Long> arrayList2 = new ArrayList<>();
            ArrayList<Integer> arrayList3 = new ArrayList<>();
            int size = dialogs.size();
            int i2 = 0;
            for (int i3 = 0; i3 < size; i3++) {
                TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                    if (!tLRPC$Dialog.pinned) {
                        if (tLRPC$Dialog.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        arrayList2.add(Long.valueOf(tLRPC$Dialog.id));
                        arrayList3.add(Integer.valueOf(tLRPC$Dialog.pinnedNum));
                        if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                            TLRPC$InputPeer inputPeer = getInputPeer(tLRPC$Dialog.id);
                            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                            tLRPC$TL_inputDialogPeer.peer = inputPeer;
                            tLRPC$TL_messages_reorderPinnedDialogs.order.add(tLRPC$TL_inputDialogPeer);
                            i2 += tLRPC$TL_inputDialogPeer.getObjectSize();
                        }
                    }
                }
            }
            getMessagesStorage().setDialogsPinned(arrayList2, arrayList3);
            NativeByteBuffer nativeByteBuffer2 = null;
            try {
                nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                try {
                    nativeByteBuffer.writeInt32(16);
                    nativeByteBuffer.writeInt32(i);
                    nativeByteBuffer.writeInt32(tLRPC$TL_messages_reorderPinnedDialogs.order.size());
                    int size2 = tLRPC$TL_messages_reorderPinnedDialogs.order.size();
                    for (int i4 = 0; i4 < size2; i4++) {
                        tLRPC$TL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                    }
                } catch (Exception e) {
                    e = e;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda116
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$reorderPinnedDialogs$341(j, tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } catch (Exception e2) {
                e = e2;
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        } else {
            tLRPC$TL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda116
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$341(j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reorderPinnedDialogs$341(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public boolean pinDialog(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        final long createPendingTask;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null || tLRPC$Dialog.pinned == z) {
            return tLRPC$Dialog != null;
        }
        int i = tLRPC$Dialog.folder_id;
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        tLRPC$Dialog.pinned = z;
        if (z) {
            int i2 = 0;
            for (int i3 = 0; i3 < dialogs.size(); i3++) {
                TLRPC$Dialog tLRPC$Dialog2 = dialogs.get(i3);
                if (!(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                    if (!tLRPC$Dialog2.pinned) {
                        if (tLRPC$Dialog2.id != this.promoDialogId) {
                            break;
                        }
                    } else {
                        i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
                    }
                }
            }
            tLRPC$Dialog.pinnedNum = i2 + 1;
        } else {
            tLRPC$Dialog.pinnedNum = 0;
        }
        NativeByteBuffer nativeByteBuffer2 = null;
        sortDialogs(null);
        if (!z && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == tLRPC$Dialog && !this.dialogsEndReached.get(i)) {
            dialogs.remove(dialogs.size() - 1);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        if (!DialogObject.isEncryptedDialog(j) && j2 != -1) {
            TLRPC$TL_messages_toggleDialogPin tLRPC$TL_messages_toggleDialogPin = new TLRPC$TL_messages_toggleDialogPin();
            tLRPC$TL_messages_toggleDialogPin.pinned = z;
            TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(j) : tLRPC$InputPeer;
            if (inputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                return false;
            }
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = inputPeer;
            tLRPC$TL_messages_toggleDialogPin.peer = tLRPC$TL_inputDialogPeer;
            if (j2 == 0) {
                try {
                    nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 16);
                } catch (Exception e) {
                    e = e;
                }
                try {
                    nativeByteBuffer.writeInt32(4);
                    nativeByteBuffer.writeInt64(j);
                    nativeByteBuffer.writeBool(z);
                    inputPeer.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                    nativeByteBuffer2 = nativeByteBuffer;
                    FileLog.e(e);
                    nativeByteBuffer = nativeByteBuffer2;
                    createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda315
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$pinDialog$342(createPendingTask, tLObject, tLRPC$TL_error);
                        }
                    });
                    getMessagesStorage().setDialogPinned(j, tLRPC$Dialog.pinnedNum);
                    return true;
                }
                createPendingTask = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                createPendingTask = j2;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda315
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$pinDialog$342(createPendingTask, tLObject, tLRPC$TL_error);
                }
            });
        }
        getMessagesStorage().setDialogPinned(j, tLRPC$Dialog.pinnedNum);
        return true;
    }

    public /* synthetic */ void lambda$pinDialog$342(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadPinnedDialogs(final int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) >= 0 || getUserConfig().isPinnedDialogsLoaded(i)) {
            return;
        }
        this.loadingPinnedDialogs.put(i, 1);
        TLRPC$TL_messages_getPinnedDialogs tLRPC$TL_messages_getPinnedDialogs = new TLRPC$TL_messages_getPinnedDialogs();
        tLRPC$TL_messages_getPinnedDialogs.folder_id = i;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPinnedDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda156
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$loadPinnedDialogs$345(i, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:117:0x009f, code lost:
        if (r9.left != false) goto L22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:118:0x00a1, code lost:
        r16 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:124:0x00b4, code lost:
        if (r9.migrated_to != null) goto L22;
     */
    /* JADX WARN: Removed duplicated region for block: B:128:0x00db  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$loadPinnedDialogs$345(final int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat;
        ArrayList arrayList;
        TLRPC$Message tLRPC$Message;
        int i2;
        TLRPC$Chat tLRPC$Chat2;
        int i3;
        ArrayList arrayList2;
        if (tLObject != null) {
            final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            final ArrayList arrayList3 = new ArrayList(tLRPC$TL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tLRPC$TL_messages_peerDialogs);
            final TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
            tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
            tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            final LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i4 = 0; i4 < tLRPC$TL_messages_peerDialogs.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i4);
                longSparseArray2.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$TL_messages_peerDialogs.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$TL_messages_peerDialogs.chats.get(i5);
                longSparseArray3.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            ArrayList arrayList4 = new ArrayList();
            int i6 = 0;
            while (i6 < tLRPC$TL_messages_peerDialogs.messages.size()) {
                TLRPC$Message tLRPC$Message2 = tLRPC$TL_messages_peerDialogs.messages.get(i6);
                TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
                long j = tLRPC$Peer.channel_id;
                if (j != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray3.get(j);
                    if (tLRPC$Chat4 != null) {
                    }
                    i3 = i6;
                    MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray2, (LongSparseArray<TLRPC$Chat>) longSparseArray3, false, false);
                    arrayList4.add(messageObject);
                    long dialogId = messageObject.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(messageObject);
                    longSparseArray.put(dialogId, arrayList2);
                } else {
                    long j2 = tLRPC$Peer.chat_id;
                    if (j2 != 0) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray3.get(j2);
                        if (tLRPC$Chat5 != null) {
                        }
                    }
                    i3 = i6;
                    MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray2, (LongSparseArray<TLRPC$Chat>) longSparseArray3, false, false);
                    arrayList4.add(messageObject2);
                    long dialogId2 = messageObject2.getDialogId();
                    arrayList2 = (ArrayList) longSparseArray.get(dialogId2);
                    if (arrayList2 == null) {
                    }
                    arrayList2.add(messageObject2);
                    longSparseArray.put(dialogId2, arrayList2);
                }
                i6 = i3 + 1;
            }
            final boolean z = !arrayList3.isEmpty() && (arrayList3.get(0) instanceof TLRPC$TL_dialogFolder);
            int size = arrayList3.size();
            for (int i7 = 0; i7 < size; i7++) {
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) arrayList3.get(i7);
                tLRPC$Dialog.pinned = true;
                DialogObject.initDialog(tLRPC$Dialog);
                if (!DialogObject.isChannel(tLRPC$Dialog) ? !DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id)) == null || tLRPC$Chat.migrated_to == null : (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id)) == null || !tLRPC$Chat2.left) {
                    if (tLRPC$Dialog.last_message_date == 0 && (arrayList = (ArrayList) longSparseArray.get(tLRPC$Dialog.id)) != null) {
                        int i8 = Integer.MIN_VALUE;
                        for (int i9 = 0; i9 < arrayList.size(); i9++) {
                            MessageObject messageObject3 = (MessageObject) arrayList.get(i9);
                            if (messageObject3 != null && (tLRPC$Message = messageObject3.messageOwner) != null && (i2 = tLRPC$Message.date) > i8) {
                                i8 = i2;
                            }
                        }
                        if (i8 > Integer.MIN_VALUE) {
                            tLRPC$Dialog.last_message_date = i8;
                        }
                    }
                    Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num == null) {
                        num = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num2 == null) {
                        num2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda201
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$loadPinnedDialogs$344(i, arrayList3, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$344(final int i, final ArrayList arrayList, final boolean z, final TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, final LongSparseArray longSparseArray, final TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda418
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$loadPinnedDialogs$343(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs);
            }
        });
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$343(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        boolean z2;
        boolean z3;
        boolean z4;
        ArrayList<Integer> arrayList2;
        ArrayList<MessageObject> arrayList3;
        this.loadingPinnedDialogs.delete(i);
        applyDialogsNotificationsSettings(arrayList);
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        int i2 = z ? 1 : 0;
        int i3 = 0;
        int i4 = 0;
        boolean z5 = false;
        while (true) {
            z2 = true;
            if (i3 >= dialogs.size()) {
                break;
            }
            TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
            if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                if (DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                    if (i2 < arrayList.size()) {
                        arrayList.add(i2, tLRPC$Dialog);
                    } else {
                        arrayList.add(tLRPC$Dialog);
                    }
                    i2++;
                } else if (!tLRPC$Dialog.pinned) {
                    if (tLRPC$Dialog.id != this.promoDialogId) {
                        break;
                    }
                } else {
                    i4 = Math.max(tLRPC$Dialog.pinnedNum, i4);
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    i2++;
                    z5 = true;
                }
            }
            i3++;
        }
        ArrayList<Long> arrayList4 = new ArrayList<>();
        if (arrayList.isEmpty()) {
            z3 = false;
        } else {
            putUsers(tLRPC$TL_messages_peerDialogs.users, false);
            putChats(tLRPC$TL_messages_peerDialogs.chats, false);
            ArrayList<Long> arrayList5 = new ArrayList<>();
            ArrayList<Integer> arrayList6 = new ArrayList<>();
            int size = arrayList.size();
            int i5 = 0;
            z3 = false;
            while (i5 < size) {
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) arrayList.get(i5);
                tLRPC$Dialog2.pinnedNum = (size - i5) + i4;
                arrayList4.add(Long.valueOf(tLRPC$Dialog2.id));
                TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(tLRPC$Dialog2.id);
                if (tLRPC$Dialog3 != null) {
                    tLRPC$Dialog3.pinned = z2;
                    tLRPC$Dialog3.pinnedNum = tLRPC$Dialog2.pinnedNum;
                    arrayList5.add(Long.valueOf(tLRPC$Dialog2.id));
                    arrayList6.add(Integer.valueOf(tLRPC$Dialog2.pinnedNum));
                    arrayList2 = arrayList6;
                } else {
                    this.dialogs_dict.put(tLRPC$Dialog2.id, tLRPC$Dialog2);
                    ArrayList<MessageObject> arrayList7 = (ArrayList) longSparseArray.get(tLRPC$Dialog2.id);
                    arrayList2 = arrayList6;
                    this.dialogMessage.put(tLRPC$Dialog2.id, arrayList7);
                    if (arrayList7 != null) {
                        int i6 = 0;
                        while (i6 < arrayList7.size()) {
                            MessageObject messageObject = arrayList7.get(i6);
                            if (messageObject != null) {
                                arrayList3 = arrayList7;
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                    this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                                    long j = messageObject.messageOwner.random_id;
                                    if (j != 0) {
                                        this.dialogMessagesByRandomIds.put(j, messageObject);
                                    }
                                }
                            } else {
                                arrayList3 = arrayList7;
                            }
                            i6++;
                            arrayList7 = arrayList3;
                        }
                    }
                    getTranslateController().checkDialogMessage(tLRPC$Dialog2.id);
                    z3 = true;
                }
                i5++;
                arrayList6 = arrayList2;
                z5 = true;
                z2 = true;
            }
            getMessagesStorage().setDialogsPinned(arrayList5, arrayList6);
        }
        if (z5) {
            if (z3) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i7);
                    if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                        this.allDialogs.add(valueAt);
                    }
                }
            }
            sortDialogs(null);
            z4 = false;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            z4 = false;
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList4, i);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i, true);
        getUserConfig().saveConfig(z4);
    }

    public void generateJoinMessage(final long j, boolean z) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat == null || !ChatObject.isChannel(j, this.currentAccount)) {
            return;
        }
        if ((!ChatObject.isNotInChat(chat) || z) && !chat.creator) {
            TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
            tLRPC$TL_messageService.flags = LiteMode.FLAG_CHAT_BLUR;
            int newMessageId = getUserConfig().getNewMessageId();
            tLRPC$TL_messageService.id = newMessageId;
            tLRPC$TL_messageService.local_id = newMessageId;
            if ((chat instanceof TLRPC$TL_channel) && !z) {
                tLRPC$TL_messageService.date = chat.date;
            } else {
                tLRPC$TL_messageService.date = getConnectionsManager().getCurrentTime();
            }
            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
            tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
            tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
            TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
            tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
            tLRPC$TL_peerChannel.channel_id = j;
            tLRPC$TL_messageService.dialog_id = -j;
            tLRPC$TL_messageService.post = true;
            TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
            tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
            tLRPC$TL_messageActionChatAddUser.users.add(Long.valueOf(getUserConfig().getClientUserId()));
            getUserConfig().saveConfig(false);
            final ArrayList arrayList = new ArrayList();
            ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
            arrayList2.add(tLRPC$TL_messageService);
            arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_messageService, true, false));
            getMessagesStorage().putMessages(arrayList2, true, true, false, 0, 0, 0L);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda177
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$generateJoinMessage$346(j, arrayList);
                }
            });
        }
    }

    public /* synthetic */ void lambda$generateJoinMessage$346(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(-j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public void deleteMessagesByPush(final long j, final ArrayList<Integer> arrayList, final long j2) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda349
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$348(arrayList, j2, j);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$348(final ArrayList arrayList, final long j, long j2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda121
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$347(arrayList, j);
            }
        });
        getMessagesStorage().deletePushMessages(j2, arrayList);
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, j, arrayList, getMessagesStorage().markMessagesAsDeleted(j2, arrayList, false, true, 0, 0), false);
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$347(ArrayList arrayList, long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        if (j == 0) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
            }
            return;
        }
        ArrayList<MessageObject> arrayList2 = this.dialogMessage.get(-j);
        if (arrayList2 != null) {
            for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                MessageObject messageObject2 = arrayList2.get(i2);
                int size2 = arrayList.size();
                int i3 = 0;
                while (true) {
                    if (i3 >= size2) {
                        break;
                    } else if (messageObject2.getId() == ((Integer) arrayList.get(i3)).intValue()) {
                        messageObject2.deleted = true;
                        break;
                    } else {
                        i3++;
                    }
                }
            }
        }
    }

    public void checkChatInviter(final long j, final boolean z) {
        final TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (!ChatObject.isChannel(chat) || chat.creator || this.gettingChatInviters.indexOfKey(j) >= 0) {
            return;
        }
        this.gettingChatInviters.put(j, Boolean.TRUE);
        TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
        tLRPC$TL_channels_getParticipant.channel = getInputChannel(j);
        tLRPC$TL_channels_getParticipant.participant = getInputPeer(getUserConfig().getClientUserId());
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda262
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkChatInviter$353(chat, z, j, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatInviter$353(TLRPC$Chat tLRPC$Chat, boolean z, final long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final ArrayList arrayList;
        final TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant = (TLRPC$TL_channels_channelParticipant) tLObject;
        if (tLRPC$TL_channels_channelParticipant != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipant.participant;
            if (tLRPC$ChannelParticipant instanceof TLRPC$TL_channelParticipantSelf) {
                TLRPC$TL_channelParticipantSelf tLRPC$TL_channelParticipantSelf = (TLRPC$TL_channelParticipantSelf) tLRPC$ChannelParticipant;
                if (tLRPC$Chat.megagroup && getMessagesStorage().isMigratedChat(tLRPC$Chat.id)) {
                    return;
                }
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda215
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkChatInviter$349(tLRPC$TL_channels_channelParticipant);
                    }
                });
                getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipant.users, tLRPC$TL_channels_channelParticipant.chats, true, true);
                if (!z || Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$TL_channels_channelParticipant.participant.date) >= 86400 || getMessagesStorage().hasInviteMeMessage(j)) {
                    arrayList = null;
                } else {
                    TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                    tLRPC$TL_messageService.flags = LiteMode.FLAG_CHAT_BLUR;
                    int newMessageId = getUserConfig().getNewMessageId();
                    tLRPC$TL_messageService.id = newMessageId;
                    tLRPC$TL_messageService.local_id = newMessageId;
                    tLRPC$TL_messageService.date = tLRPC$TL_channels_channelParticipant.participant.date;
                    TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                    tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                    tLRPC$TL_peerUser.user_id = tLRPC$TL_channels_channelParticipant.participant.inviter_id;
                    TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                    tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                    tLRPC$TL_peerChannel.channel_id = j;
                    tLRPC$TL_messageService.media_unread = true;
                    tLRPC$TL_messageService.unread = true;
                    tLRPC$TL_messageService.post = true;
                    if (!tLRPC$TL_channelParticipantSelf.via_invite || tLRPC$TL_channelParticipantSelf.inviter_id != getUserConfig().getClientUserId()) {
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatAddUser();
                    } else {
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatJoinedByRequest();
                    }
                    tLRPC$TL_messageService.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                    tLRPC$TL_messageService.dialog_id = -j;
                    getUserConfig().saveConfig(false);
                    arrayList = new ArrayList();
                    ArrayList<TLRPC$Message> arrayList2 = new ArrayList<>();
                    ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                    for (int i = 0; i < tLRPC$TL_channels_channelParticipant.users.size(); i++) {
                        TLRPC$User tLRPC$User = tLRPC$TL_channels_channelParticipant.users.get(i);
                        concurrentHashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                    }
                    arrayList2.add(tLRPC$TL_messageService);
                    arrayList.add(new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_messageService, (AbstractMap<Long, TLRPC$User>) concurrentHashMap, true, false));
                    getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda216
                        @Override // java.lang.Runnable
                        public final void run() {
                            MessagesController.this.lambda$checkChatInviter$351(arrayList);
                        }
                    });
                    getMessagesStorage().putMessages(arrayList2, true, true, false, 0, 0, 0L);
                }
                final ArrayList arrayList3 = arrayList;
                getMessagesStorage().saveChatInviter(j, tLRPC$TL_channels_channelParticipant.participant.inviter_id);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda217
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkChatInviter$352(j, arrayList3, tLRPC$TL_channels_channelParticipant);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$checkChatInviter$349(TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        putUsers(tLRPC$TL_channels_channelParticipant.users, false);
        putChats(tLRPC$TL_channels_channelParticipant.chats, false);
    }

    public /* synthetic */ void lambda$checkChatInviter$350(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$checkChatInviter$351(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda474
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkChatInviter$350(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatInviter$352(long j, ArrayList arrayList, TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        this.gettingChatInviters.delete(j);
        if (arrayList != null) {
            updateInterfaceWithMessages(-j, arrayList, 0);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadChatInviter, Long.valueOf(j), Long.valueOf(tLRPC$TL_channels_channelParticipant.participant.inviter_id));
    }

    private int getUpdateType(TLRPC$Update tLRPC$Update) {
        if ((tLRPC$Update instanceof TLRPC$TL_updateNewMessage) || (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) || (tLRPC$Update instanceof TLRPC$TL_updateWebPage) || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) || (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) || (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages)) ? 2 : 3;
    }

    private static int getUpdatePts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return ((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).qts;
        }
        return 0;
    }

    public static long getUpdateChannelId(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
            return ((TLRPC$TL_updateReadChannelOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
            return ((TLRPC$TL_updateChannelMessageViews) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
            return ((TLRPC$TL_updateChannelMessageForwards) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
            return ((TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
            return ((TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
            return ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
            return ((TLRPC$TL_updateReadChannelInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) {
            return ((TLRPC$TL_updateChannelPinnedTopic) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics) {
            return ((TLRPC$TL_updateChannelPinnedTopics) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
            return ((TLRPC$TL_updateChannelUserTyping) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelViewForumAsMessages) {
            return ((TLRPC$TL_updateChannelViewForumAsMessages) tLRPC$Update).channel_id;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.e("trying to get unknown update channel_id for " + tLRPC$Update);
            return 0L;
        }
        return 0L;
    }

    /* JADX WARN: Code restructure failed: missing block: B:655:0x03ff, code lost:
        r2 = r15.pts_count + r1;
        r3 = r15.pts;
     */
    /* JADX WARN: Code restructure failed: missing block: B:656:0x0404, code lost:
        if (r2 != r3) goto L263;
     */
    /* JADX WARN: Code restructure failed: missing block: B:658:0x0418, code lost:
        if (processUpdateArray(r15.updates, r28.users, r28.chats, false, r28.date) != false) goto L262;
     */
    /* JADX WARN: Code restructure failed: missing block: B:660:0x041c, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L255;
     */
    /* JADX WARN: Code restructure failed: missing block: B:661:0x041e, code lost:
        org.telegram.messenger.FileLog.d("need get channel diff inner TL_updates, channel_id = " + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:662:0x0432, code lost:
        if (r9 != null) goto L258;
     */
    /* JADX WARN: Code restructure failed: missing block: B:663:0x0434, code lost:
        r5 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:665:0x0444, code lost:
        if (r9.contains(java.lang.Long.valueOf(r4)) != false) goto L261;
     */
    /* JADX WARN: Code restructure failed: missing block: B:666:0x0446, code lost:
        r9.add(java.lang.Long.valueOf(r4));
     */
    /* JADX WARN: Code restructure failed: missing block: B:667:0x044f, code lost:
        r27.channelsPts.put(r4, r15.pts);
        getMessagesStorage().saveChannelPts(r4, r15.pts);
     */
    /* JADX WARN: Code restructure failed: missing block: B:669:0x0462, code lost:
        if (r1 == r3) goto L261;
     */
    /* JADX WARN: Code restructure failed: missing block: B:671:0x0466, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L268;
     */
    /* JADX WARN: Code restructure failed: missing block: B:672:0x0468, code lost:
        org.telegram.messenger.FileLog.d(r0 + " need get channel diff, pts: " + r1 + " " + r15.pts + " count = " + r15.pts_count + " channelId = " + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:673:0x0497, code lost:
        r0 = r27.updatesStartWaitTimeChannels.get(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:674:0x04ab, code lost:
        if (r27.gettingDifferenceChannels.get(r4, java.lang.Boolean.FALSE).booleanValue() != false) goto L279;
     */
    /* JADX WARN: Code restructure failed: missing block: B:676:0x04b1, code lost:
        if (r0 == 0) goto L279;
     */
    /* JADX WARN: Code restructure failed: missing block: B:678:0x04c0, code lost:
        if (java.lang.Math.abs(java.lang.System.currentTimeMillis() - r0) > 1500) goto L274;
     */
    /* JADX WARN: Code restructure failed: missing block: B:680:0x04c3, code lost:
        if (r9 != null) goto L276;
     */
    /* JADX WARN: Code restructure failed: missing block: B:681:0x04c5, code lost:
        r5 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:683:0x04d3, code lost:
        if (r9.contains(java.lang.Long.valueOf(r4)) != false) goto L261;
     */
    /* JADX WARN: Code restructure failed: missing block: B:684:0x04d5, code lost:
        r9.add(java.lang.Long.valueOf(r4));
     */
    /* JADX WARN: Code restructure failed: missing block: B:686:0x04e1, code lost:
        if (r0 != 0) goto L282;
     */
    /* JADX WARN: Code restructure failed: missing block: B:687:0x04e3, code lost:
        r27.updatesStartWaitTimeChannels.put(r4, java.lang.System.currentTimeMillis());
     */
    /* JADX WARN: Code restructure failed: missing block: B:689:0x04ee, code lost:
        if (org.telegram.messenger.BuildVars.LOGS_ENABLED == false) goto L285;
     */
    /* JADX WARN: Code restructure failed: missing block: B:690:0x04f0, code lost:
        org.telegram.messenger.FileLog.d(r23);
     */
    /* JADX WARN: Code restructure failed: missing block: B:691:0x04f3, code lost:
        r0 = r27.updatesQueueChannels.get(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:692:0x04fb, code lost:
        if (r0 != null) goto L288;
     */
    /* JADX WARN: Code restructure failed: missing block: B:693:0x04fd, code lost:
        r0 = new java.util.ArrayList<>();
        r27.updatesQueueChannels.put(r4, r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:694:0x0507, code lost:
        r0.add(r15);
     */
    /* JADX WARN: Code restructure failed: missing block: B:711:0x055e, code lost:
        if (getMessagesStorage().getLastSeqValue() != r28.seq_start) goto L130;
     */
    /* JADX WARN: Code restructure failed: missing block: B:713:0x0561, code lost:
        r1 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:719:0x057d, code lost:
        if (r2 != getMessagesStorage().getLastSeqValue()) goto L130;
     */
    /* JADX WARN: Removed duplicated region for block: B:553:0x0117  */
    /* JADX WARN: Removed duplicated region for block: B:749:0x063b  */
    /* JADX WARN: Removed duplicated region for block: B:788:0x0702  */
    /* JADX WARN: Removed duplicated region for block: B:792:0x071c  */
    /* JADX WARN: Removed duplicated region for block: B:795:0x0722  */
    /* JADX WARN: Removed duplicated region for block: B:805:0x0735  */
    /* JADX WARN: Removed duplicated region for block: B:826:0x0779  */
    /* JADX WARN: Removed duplicated region for block: B:854:0x07eb  */
    /* JADX WARN: Removed duplicated region for block: B:920:0x09d6  */
    /* JADX WARN: Removed duplicated region for block: B:938:0x0a10  */
    /* JADX WARN: Removed duplicated region for block: B:940:0x0a2d  */
    /* JADX WARN: Removed duplicated region for block: B:972:0x07b1 A[EDGE_INSN: B:972:0x07b1->B:841:0x07b1 ?: BREAK  , SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void processUpdates(final TLRPC$Updates tLRPC$Updates, boolean z) {
        int i;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        boolean z2;
        long j;
        TLRPC$User tLRPC$User2;
        boolean z3;
        boolean z4;
        String str;
        boolean z5;
        int i2;
        TLRPC$UserStatus tLRPC$UserStatus;
        int i3;
        TLRPC$Chat chat;
        boolean z6;
        ArrayList arrayList;
        int i4;
        boolean z7;
        ArrayList arrayList2;
        boolean z8;
        boolean z9;
        int i5;
        String str2;
        int i6 = 0;
        if (tLRPC$Updates instanceof TLRPC$TL_updateShort) {
            ArrayList<TLRPC$Update> arrayList3 = new ArrayList<>();
            arrayList3.add(tLRPC$Updates.update);
            processUpdateArray(arrayList3, null, null, false, tLRPC$Updates.date);
        } else {
            boolean z10 = tLRPC$Updates instanceof TLRPC$TL_updateShortChatMessage;
            String str3 = "add to queue";
            i = 1;
            if (z10 || (tLRPC$Updates instanceof TLRPC$TL_updateShortMessage)) {
                final long j2 = z10 ? tLRPC$Updates.from_id : tLRPC$Updates.user_id;
                TLRPC$User user = getUser(Long.valueOf(j2));
                FileLog.d("update message short userId = " + j2);
                if (user == null || user.min) {
                    user = getMessagesStorage().getUserSync(j2);
                    if (user != null && user.min) {
                        user = null;
                    }
                    putUser(user, true);
                }
                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Updates.fwd_from;
                if (tLRPC$MessageFwdHeader != null) {
                    TLRPC$Peer tLRPC$Peer = tLRPC$MessageFwdHeader.from_id;
                    if (tLRPC$Peer instanceof TLRPC$TL_peerUser) {
                        tLRPC$User = getUser(Long.valueOf(tLRPC$Peer.user_id));
                        if (tLRPC$User == null) {
                            tLRPC$User = getMessagesStorage().getUserSync(tLRPC$Updates.fwd_from.from_id.user_id);
                            putUser(tLRPC$User, true);
                        }
                        tLRPC$Chat = null;
                    } else {
                        if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
                            chat = getChat(Long.valueOf(tLRPC$Peer.channel_id));
                            if (chat == null) {
                                chat = getMessagesStorage().getChatSync(tLRPC$Updates.fwd_from.from_id.channel_id);
                                putChat(chat, true);
                            }
                        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
                            chat = getChat(Long.valueOf(tLRPC$Peer.chat_id));
                            if (chat == null) {
                                chat = getMessagesStorage().getChatSync(tLRPC$Updates.fwd_from.from_id.chat_id);
                                putChat(chat, true);
                            }
                        }
                        tLRPC$Chat = chat;
                        tLRPC$User = null;
                    }
                    z2 = true;
                    j = tLRPC$Updates.via_bot_id;
                    if (j == 0) {
                        tLRPC$User2 = getUser(Long.valueOf(j));
                        if (tLRPC$User2 == null) {
                            tLRPC$User2 = getMessagesStorage().getUserSync(tLRPC$Updates.via_bot_id);
                            putUser(tLRPC$User2, true);
                        }
                        z3 = true;
                    } else {
                        tLRPC$User2 = null;
                        z3 = false;
                    }
                    z4 = tLRPC$Updates instanceof TLRPC$TL_updateShortMessage;
                    if (z4) {
                        TLRPC$User tLRPC$User3 = tLRPC$User2;
                        TLRPC$Chat chat2 = getChat(Long.valueOf(tLRPC$Updates.chat_id));
                        if (chat2 == null) {
                            str = " ";
                            chat2 = getMessagesStorage().getChatSync(tLRPC$Updates.chat_id);
                            putChat(chat2, true);
                        } else {
                            str = " ";
                        }
                        z5 = chat2 == null || user == null || (z2 && tLRPC$User == null && tLRPC$Chat == null) || (z3 && tLRPC$User3 == null);
                    } else {
                        z5 = user == null || (z2 && tLRPC$User == null && tLRPC$Chat == null) || (z3 && tLRPC$User2 == null);
                        str = " ";
                    }
                    if (!z5 && !tLRPC$Updates.entities.isEmpty()) {
                        i3 = 0;
                        while (true) {
                            if (i3 < tLRPC$Updates.entities.size()) {
                                break;
                            }
                            TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Updates.entities.get(i3);
                            if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                                long j3 = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                                TLRPC$User user2 = getUser(Long.valueOf(j3));
                                if (user2 == null || user2.min) {
                                    TLRPC$User userSync = getMessagesStorage().getUserSync(j3);
                                    if (userSync != null && userSync.min) {
                                        userSync = null;
                                    }
                                    if (userSync == null) {
                                        z5 = true;
                                        break;
                                    }
                                    putUser(user, true);
                                }
                            }
                            i3++;
                        }
                    }
                    if (!tLRPC$Updates.out || user == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires > 0 || Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$Updates.date) >= 30) {
                        i2 = 0;
                    } else {
                        this.onlinePrivacy.put(Long.valueOf(user.id), Integer.valueOf(tLRPC$Updates.date));
                        i2 = 1;
                    }
                    if (!z5) {
                        if (getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts) {
                            TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                            tLRPC$TL_message.id = tLRPC$Updates.id;
                            long clientUserId = getUserConfig().getClientUserId();
                            if (z4) {
                                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.from_id = tLRPC$TL_peerUser;
                                if (tLRPC$Updates.out) {
                                    tLRPC$TL_peerUser.user_id = clientUserId;
                                } else {
                                    tLRPC$TL_peerUser.user_id = j2;
                                }
                                TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.peer_id = tLRPC$TL_peerUser2;
                                tLRPC$TL_peerUser2.user_id = j2;
                                tLRPC$TL_message.dialog_id = j2;
                            } else {
                                TLRPC$TL_peerUser tLRPC$TL_peerUser3 = new TLRPC$TL_peerUser();
                                tLRPC$TL_message.from_id = tLRPC$TL_peerUser3;
                                tLRPC$TL_peerUser3.user_id = j2;
                                TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
                                tLRPC$TL_message.peer_id = tLRPC$TL_peerChat;
                                long j4 = tLRPC$Updates.chat_id;
                                tLRPC$TL_peerChat.chat_id = j4;
                                tLRPC$TL_message.dialog_id = -j4;
                            }
                            tLRPC$TL_message.fwd_from = tLRPC$Updates.fwd_from;
                            tLRPC$TL_message.silent = tLRPC$Updates.silent;
                            tLRPC$TL_message.out = tLRPC$Updates.out;
                            tLRPC$TL_message.mentioned = tLRPC$Updates.mentioned;
                            tLRPC$TL_message.media_unread = tLRPC$Updates.media_unread;
                            tLRPC$TL_message.entities = tLRPC$Updates.entities;
                            tLRPC$TL_message.message = tLRPC$Updates.message;
                            tLRPC$TL_message.date = tLRPC$Updates.date;
                            tLRPC$TL_message.via_bot_id = tLRPC$Updates.via_bot_id;
                            tLRPC$TL_message.flags = tLRPC$Updates.flags | LiteMode.FLAG_CHAT_BLUR;
                            tLRPC$TL_message.reply_to = tLRPC$Updates.reply_to;
                            tLRPC$TL_message.ttl_period = tLRPC$Updates.ttl_period;
                            tLRPC$TL_message.media = new TLRPC$TL_messageMediaEmpty();
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$TL_message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer num = concurrentHashMap.get(Long.valueOf(tLRPC$TL_message.dialog_id));
                            if (num == null) {
                                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$TL_message.out, tLRPC$TL_message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(tLRPC$TL_message.dialog_id), num);
                            }
                            tLRPC$TL_message.unread = num.intValue() < tLRPC$TL_message.id;
                            if (tLRPC$TL_message.dialog_id == clientUserId) {
                                tLRPC$TL_message.unread = false;
                                tLRPC$TL_message.media_unread = false;
                                tLRPC$TL_message.out = true;
                            }
                            getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                            boolean contains = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_message.dialog_id));
                            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_message, contains, contains);
                            final ArrayList<MessageObject> arrayList4 = new ArrayList<>();
                            arrayList4.add(messageObject);
                            ArrayList<TLRPC$Message> arrayList5 = new ArrayList<>();
                            arrayList5.add(tLRPC$TL_message);
                            if (z4) {
                                final boolean z11 = !tLRPC$Updates.out && updatePrintingUsersWithNewMessages(tLRPC$Updates.user_id, arrayList4);
                                if (z11) {
                                    updatePrintingStrings();
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda365
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$354(z11, j2, arrayList4);
                                    }
                                });
                            } else {
                                final boolean updatePrintingUsersWithNewMessages = updatePrintingUsersWithNewMessages(-tLRPC$Updates.chat_id, arrayList4);
                                if (updatePrintingUsersWithNewMessages) {
                                    updatePrintingStrings();
                                }
                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda366
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$355(updatePrintingUsersWithNewMessages, tLRPC$Updates, arrayList4);
                                    }
                                });
                            }
                            if (!messageObject.isOut()) {
                                getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda367
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        MessagesController.this.lambda$processUpdates$357(arrayList4);
                                    }
                                });
                            }
                            getMessagesStorage().putMessages(arrayList5, false, true, false, 0, 0, 0L);
                        } else if (getMessagesStorage().getLastPtsValue() != tLRPC$Updates.pts) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("need get diff short message, pts: " + getMessagesStorage().getLastPtsValue() + str + tLRPC$Updates.pts + " count = " + tLRPC$Updates.pts_count);
                            }
                            if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                if (this.updatesStartWaitTimePts == 0) {
                                    this.updatesStartWaitTimePts = System.currentTimeMillis();
                                }
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("add to queue");
                                }
                                this.updatesQueuePts.add(tLRPC$Updates);
                            }
                        }
                        i = 0;
                        i6 = i2;
                    }
                    i = 1;
                    i6 = i2;
                }
                tLRPC$User = null;
                tLRPC$Chat = null;
                z2 = false;
                j = tLRPC$Updates.via_bot_id;
                if (j == 0) {
                }
                z4 = tLRPC$Updates instanceof TLRPC$TL_updateShortMessage;
                if (z4) {
                }
                if (!z5) {
                    i3 = 0;
                    while (true) {
                        if (i3 < tLRPC$Updates.entities.size()) {
                        }
                        i3++;
                    }
                }
                if (tLRPC$Updates.out) {
                }
                i2 = 0;
                if (!z5) {
                }
                i = 1;
                i6 = i2;
            } else if ((tLRPC$Updates instanceof TLRPC$TL_updatesCombined) || (tLRPC$Updates instanceof TLRPC$TL_updates)) {
                LongSparseArray longSparseArray = null;
                for (int i7 = 0; i7 < tLRPC$Updates.chats.size(); i7++) {
                    TLRPC$Chat tLRPC$Chat2 = tLRPC$Updates.chats.get(i7);
                    if ((tLRPC$Chat2 instanceof TLRPC$TL_channel) && tLRPC$Chat2.min) {
                        TLRPC$Chat chat3 = getChat(Long.valueOf(tLRPC$Chat2.id));
                        if (chat3 == null || chat3.min) {
                            chat3 = getMessagesStorage().getChatSync(tLRPC$Updates.chat_id);
                            putChat(chat3, true);
                        }
                        if (chat3 == null || chat3.min) {
                            if (longSparseArray == null) {
                                longSparseArray = new LongSparseArray();
                            }
                            longSparseArray.put(tLRPC$Chat2.id, tLRPC$Chat2);
                        }
                    }
                }
                if (longSparseArray != null) {
                    for (int i8 = 0; i8 < tLRPC$Updates.updates.size(); i8++) {
                        TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i8);
                        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                            long j5 = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
                            if (longSparseArray.indexOfKey(j5) >= 0) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("need get diff because of min channel " + j5);
                                }
                                i4 = 1;
                                if (i4 != 0) {
                                    getMessagesStorage().putUsersAndChats(tLRPC$Updates.users, tLRPC$Updates.chats, true, true);
                                    Collections.sort(tLRPC$Updates.updates, this.updatesComparator);
                                    int i9 = i4;
                                    ArrayList arrayList6 = null;
                                    z7 = false;
                                    while (true) {
                                        if (tLRPC$Updates.updates.size() <= 0) {
                                            arrayList2 = arrayList6;
                                            break;
                                        }
                                        TLRPC$Update tLRPC$Update2 = tLRPC$Updates.updates.get(i6);
                                        if (getUpdateType(tLRPC$Update2) == 0) {
                                            TLRPC$TL_updates tLRPC$TL_updates = new TLRPC$TL_updates();
                                            tLRPC$TL_updates.updates.add(tLRPC$Update2);
                                            tLRPC$TL_updates.pts = getUpdatePts(tLRPC$Update2);
                                            tLRPC$TL_updates.pts_count = getUpdatePtsCount(tLRPC$Update2);
                                            while (i < tLRPC$Updates.updates.size()) {
                                                TLRPC$Update tLRPC$Update3 = tLRPC$Updates.updates.get(i);
                                                int updatePts = getUpdatePts(tLRPC$Update3);
                                                int updatePtsCount = getUpdatePtsCount(tLRPC$Update3);
                                                if (getUpdateType(tLRPC$Update3) != 0 || tLRPC$TL_updates.pts + updatePtsCount != updatePts) {
                                                    break;
                                                }
                                                tLRPC$TL_updates.updates.add(tLRPC$Update3);
                                                tLRPC$TL_updates.pts = updatePts;
                                                tLRPC$TL_updates.pts_count += updatePtsCount;
                                                tLRPC$Updates.updates.remove(i);
                                            }
                                            if (getMessagesStorage().getLastPtsValue() + tLRPC$TL_updates.pts_count == tLRPC$TL_updates.pts) {
                                                arrayList2 = arrayList6;
                                                if (!processUpdateArray(tLRPC$TL_updates.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date)) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d("need get diff inner TL_updates, pts: " + getMessagesStorage().getLastPtsValue() + " " + tLRPC$Updates.seq);
                                                    }
                                                    i9 = 1;
                                                    arrayList6 = arrayList2;
                                                    str2 = str3;
                                                } else {
                                                    getMessagesStorage().setLastPtsValue(tLRPC$TL_updates.pts);
                                                    arrayList6 = arrayList2;
                                                    str2 = str3;
                                                }
                                            } else {
                                                arrayList2 = arrayList6;
                                                if (getMessagesStorage().getLastPtsValue() != tLRPC$TL_updates.pts) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d(tLRPC$Update2 + " need get diff, pts: " + getMessagesStorage().getLastPtsValue() + " " + tLRPC$TL_updates.pts + " count = " + tLRPC$TL_updates.pts_count);
                                                    }
                                                    if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                                        if (this.updatesStartWaitTimePts == 0) {
                                                            this.updatesStartWaitTimePts = System.currentTimeMillis();
                                                        }
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d(str3);
                                                        }
                                                        this.updatesQueuePts.add(tLRPC$TL_updates);
                                                    }
                                                    i9 = 1;
                                                }
                                                arrayList6 = arrayList2;
                                                str2 = str3;
                                            }
                                        } else {
                                            arrayList2 = arrayList6;
                                            if (getUpdateType(tLRPC$Update2) == 1) {
                                                TLRPC$TL_updates tLRPC$TL_updates2 = new TLRPC$TL_updates();
                                                tLRPC$TL_updates2.updates.add(tLRPC$Update2);
                                                tLRPC$TL_updates2.pts = getUpdateQts(tLRPC$Update2);
                                                while (1 < tLRPC$Updates.updates.size()) {
                                                    TLRPC$Update tLRPC$Update4 = tLRPC$Updates.updates.get(1);
                                                    int updateQts = getUpdateQts(tLRPC$Update4);
                                                    if (getUpdateType(tLRPC$Update4) != 1 || tLRPC$TL_updates2.pts + 1 != updateQts) {
                                                        break;
                                                    }
                                                    tLRPC$TL_updates2.updates.add(tLRPC$Update4);
                                                    tLRPC$TL_updates2.pts = updateQts;
                                                    tLRPC$Updates.updates.remove(1);
                                                }
                                                if (getMessagesStorage().getLastQtsValue() == 0 || getMessagesStorage().getLastQtsValue() + tLRPC$TL_updates2.updates.size() == tLRPC$TL_updates2.pts) {
                                                    processUpdateArray(tLRPC$TL_updates2.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date);
                                                    getMessagesStorage().setLastQtsValue(tLRPC$TL_updates2.pts);
                                                    z7 = true;
                                                } else if (getMessagesStorage().getLastPtsValue() != tLRPC$TL_updates2.pts) {
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        FileLog.d(tLRPC$Update2 + " need get diff, qts: " + getMessagesStorage().getLastQtsValue() + " " + tLRPC$TL_updates2.pts);
                                                    }
                                                    if (this.gettingDifference || this.updatesStartWaitTimeQts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeQts) <= 1500) {
                                                        if (this.updatesStartWaitTimeQts == 0) {
                                                            this.updatesStartWaitTimeQts = System.currentTimeMillis();
                                                        }
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d(str3);
                                                        }
                                                        this.updatesQueueQts.add(tLRPC$TL_updates2);
                                                    }
                                                    i9 = 1;
                                                }
                                                arrayList6 = arrayList2;
                                                str2 = str3;
                                            } else if (getUpdateType(tLRPC$Update2) != 2) {
                                                break;
                                            } else {
                                                long updateChannelId = getUpdateChannelId(tLRPC$Update2);
                                                int i10 = this.channelsPts.get(updateChannelId);
                                                if (i10 == 0) {
                                                    i10 = getMessagesStorage().getChannelPtsSync(updateChannelId);
                                                    if (i10 == 0) {
                                                        int i11 = 0;
                                                        while (i11 < tLRPC$Updates.chats.size()) {
                                                            TLRPC$Chat tLRPC$Chat3 = tLRPC$Updates.chats.get(i11);
                                                            int i12 = i11;
                                                            if (tLRPC$Chat3.id == updateChannelId) {
                                                                loadUnknownChannel(tLRPC$Chat3, 0L);
                                                                z9 = true;
                                                                break;
                                                            }
                                                            i11 = i12 + 1;
                                                        }
                                                    } else {
                                                        this.channelsPts.put(updateChannelId, i10);
                                                    }
                                                }
                                                z9 = false;
                                                TLRPC$TL_updates tLRPC$TL_updates3 = new TLRPC$TL_updates();
                                                tLRPC$TL_updates3.updates.add(tLRPC$Update2);
                                                tLRPC$TL_updates3.pts = getUpdatePts(tLRPC$Update2);
                                                tLRPC$TL_updates3.pts_count = getUpdatePtsCount(tLRPC$Update2);
                                                while (true) {
                                                    if (1 >= tLRPC$Updates.updates.size()) {
                                                        i5 = i9;
                                                        str2 = str3;
                                                        break;
                                                    }
                                                    TLRPC$Update tLRPC$Update5 = tLRPC$Updates.updates.get(1);
                                                    int updatePts2 = getUpdatePts(tLRPC$Update5);
                                                    int updatePtsCount2 = getUpdatePtsCount(tLRPC$Update5);
                                                    i5 = i9;
                                                    str2 = str3;
                                                    if (getUpdateType(tLRPC$Update5) != 2 || updateChannelId != getUpdateChannelId(tLRPC$Update5) || tLRPC$TL_updates3.pts + updatePtsCount2 != updatePts2) {
                                                        break;
                                                    }
                                                    tLRPC$TL_updates3.updates.add(tLRPC$Update5);
                                                    tLRPC$TL_updates3.pts = updatePts2;
                                                    tLRPC$TL_updates3.pts_count += updatePtsCount2;
                                                    tLRPC$Updates.updates.remove(1);
                                                    i9 = i5;
                                                    str3 = str2;
                                                }
                                                if (BuildVars.LOGS_ENABLED) {
                                                    FileLog.d("need load unknown channel = " + updateChannelId);
                                                }
                                                arrayList6 = arrayList2;
                                                i9 = i5;
                                            }
                                        }
                                        if (tLRPC$Updates.updates.size() <= 0) {
                                            arrayList2 = arrayList6;
                                            break;
                                        }
                                        tLRPC$Updates.updates.remove(0);
                                        str3 = str2;
                                        i6 = 0;
                                        i = 1;
                                    }
                                    i9 = i9;
                                    boolean z12 = tLRPC$Updates instanceof TLRPC$TL_updatesCombined;
                                    if (z12) {
                                        if (getMessagesStorage().getLastSeqValue() + 1 != tLRPC$Updates.seq_start) {
                                        }
                                        z8 = true;
                                    } else {
                                        int lastSeqValue = getMessagesStorage().getLastSeqValue() + 1;
                                        int i13 = tLRPC$Updates.seq;
                                        if (lastSeqValue != i13) {
                                            if (i13 != 0) {
                                            }
                                        }
                                        z8 = true;
                                    }
                                    if (z8) {
                                        processUpdateArray(tLRPC$Updates.updates, tLRPC$Updates.users, tLRPC$Updates.chats, false, tLRPC$Updates.date);
                                        if (tLRPC$Updates.seq != 0) {
                                            if (tLRPC$Updates.date != 0) {
                                                getMessagesStorage().setLastDateValue(tLRPC$Updates.date);
                                            }
                                            getMessagesStorage().setLastSeqValue(tLRPC$Updates.seq);
                                        }
                                    } else {
                                        if (BuildVars.LOGS_ENABLED) {
                                            if (z12) {
                                                FileLog.d("need get diff TL_updatesCombined, seq: " + getMessagesStorage().getLastSeqValue() + " " + tLRPC$Updates.seq_start);
                                            } else {
                                                FileLog.d("need get diff TL_updates, seq: " + getMessagesStorage().getLastSeqValue() + " " + tLRPC$Updates.seq);
                                            }
                                        }
                                        if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                                            if (this.updatesStartWaitTimeSeq == 0) {
                                                this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                                            }
                                            if (BuildVars.LOGS_ENABLED) {
                                                FileLog.d("add TL_updates/Combined to queue");
                                            }
                                            this.updatesQueueSeq.add(tLRPC$Updates);
                                        } else {
                                            arrayList = arrayList2;
                                            i = 1;
                                        }
                                    }
                                    i = i9;
                                    arrayList = arrayList2;
                                } else {
                                    i = i4;
                                    arrayList = null;
                                    z7 = false;
                                }
                                z6 = z7;
                                i6 = 0;
                                getSecretChatHelper().processPendingEncMessages();
                                if (!z) {
                                    for (int i14 = 0; i14 < this.updatesQueueChannels.size(); i14++) {
                                        long keyAt = this.updatesQueueChannels.keyAt(i14);
                                        if (arrayList != null && arrayList.contains(Long.valueOf(keyAt))) {
                                            getChannelDifference(keyAt);
                                        } else {
                                            processChannelsUpdatesQueue(keyAt, 0);
                                        }
                                    }
                                    if (i != 0) {
                                        getDifference();
                                    } else {
                                        for (int i15 = 0; i15 < 3; i15++) {
                                            processUpdatesQueue(i15, 0);
                                        }
                                    }
                                }
                                if (z6) {
                                    TLRPC$TL_messages_receivedQueue tLRPC$TL_messages_receivedQueue = new TLRPC$TL_messages_receivedQueue();
                                    tLRPC$TL_messages_receivedQueue.max_qts = getMessagesStorage().getLastQtsValue();
                                    getConnectionsManager().sendRequest(tLRPC$TL_messages_receivedQueue, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda368
                                        @Override // org.telegram.tgnet.RequestDelegate
                                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                            MessagesController.lambda$processUpdates$358(tLObject, tLRPC$TL_error);
                                        }
                                    });
                                }
                                if (i6 != 0) {
                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda369
                                        @Override // java.lang.Runnable
                                        public final void run() {
                                            MessagesController.this.lambda$processUpdates$359();
                                        }
                                    });
                                }
                                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
                            }
                        }
                    }
                }
                i4 = 0;
                if (i4 != 0) {
                }
                z6 = z7;
                i6 = 0;
                getSecretChatHelper().processPendingEncMessages();
                if (!z) {
                }
                if (z6) {
                }
                if (i6 != 0) {
                }
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (tLRPC$Updates instanceof TLRPC$TL_updatesTooLong) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("need get diff TL_updatesTooLong");
                }
            } else if (tLRPC$Updates instanceof UserActionUpdatesSeq) {
                getMessagesStorage().setLastSeqValue(tLRPC$Updates.seq);
            } else if (tLRPC$Updates instanceof UserActionUpdatesPts) {
                long j6 = tLRPC$Updates.chat_id;
                if (j6 != 0) {
                    this.channelsPts.put(j6, tLRPC$Updates.pts);
                    getMessagesStorage().saveChannelPts(tLRPC$Updates.chat_id, tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                }
            }
            z6 = false;
            arrayList = null;
            getSecretChatHelper().processPendingEncMessages();
            if (!z) {
            }
            if (z6) {
            }
            if (i6 != 0) {
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        }
        z6 = false;
        arrayList = null;
        i = 0;
        getSecretChatHelper().processPendingEncMessages();
        if (!z) {
        }
        if (z6) {
        }
        if (i6 != 0) {
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
    }

    public /* synthetic */ void lambda$processUpdates$354(boolean z, long j, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(j, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$355(boolean z, TLRPC$Updates tLRPC$Updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(-tLRPC$Updates.chat_id, arrayList, 0);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$356(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$processUpdates$357(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda476
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdates$356(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdates$359() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC$TL_updateFolderPeers> arrayList) {
        if (arrayList == null) {
            return false;
        }
        int size = arrayList.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = arrayList.get(i);
            int size2 = tLRPC$TL_updateFolderPeers.folder_peers.size();
            for (int i2 = 0; i2 < size2; i2++) {
                TLRPC$TL_folderPeer tLRPC$TL_folderPeer = tLRPC$TL_updateFolderPeers.folder_peers.get(i2);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer));
                if (tLRPC$Dialog != null) {
                    int i3 = tLRPC$Dialog.folder_id;
                    int i4 = tLRPC$TL_folderPeer.folder_id;
                    if (i3 != i4) {
                        tLRPC$Dialog.pinned = false;
                        tLRPC$Dialog.pinnedNum = 0;
                        tLRPC$Dialog.folder_id = i4;
                        this.hasArchivedChats = true;
                        checkArchiveFolder();
                    }
                }
            }
            getMessagesStorage().setDialogsFolderId(arrayList.get(i).folder_peers, null, 0L, 0);
            i++;
            z = true;
        }
        return z;
    }

    /* JADX WARN: Code restructure failed: missing block: B:2116:0x1563, code lost:
        if (r0.action.user_id == r23) goto L145;
     */
    /* JADX WARN: Removed duplicated region for block: B:1981:0x1316  */
    /* JADX WARN: Removed duplicated region for block: B:2023:0x13fc  */
    /* JADX WARN: Removed duplicated region for block: B:2032:0x1427  */
    /* JADX WARN: Removed duplicated region for block: B:2034:0x142a  */
    /* JADX WARN: Removed duplicated region for block: B:2069:0x149c  */
    /* JADX WARN: Removed duplicated region for block: B:2106:0x1531  */
    /* JADX WARN: Removed duplicated region for block: B:2149:0x15e5  */
    /* JADX WARN: Removed duplicated region for block: B:2150:0x15eb  */
    /* JADX WARN: Removed duplicated region for block: B:2154:0x15f6  */
    /* JADX WARN: Removed duplicated region for block: B:2165:0x164e  */
    /* JADX WARN: Removed duplicated region for block: B:2188:0x16b0  */
    /* JADX WARN: Removed duplicated region for block: B:2192:0x16bd  */
    /* JADX WARN: Removed duplicated region for block: B:2195:0x16e1  */
    /* JADX WARN: Removed duplicated region for block: B:2197:0x16e6  */
    /* JADX WARN: Removed duplicated region for block: B:2201:0x16ef  */
    /* JADX WARN: Removed duplicated region for block: B:2204:0x16ff  */
    /* JADX WARN: Removed duplicated region for block: B:2207:0x1712  */
    /* JADX WARN: Removed duplicated region for block: B:2217:0x172c  */
    /* JADX WARN: Removed duplicated region for block: B:2218:0x1732  */
    /* JADX WARN: Removed duplicated region for block: B:2285:0x1962  */
    /* JADX WARN: Removed duplicated region for block: B:2291:0x1999  */
    /* JADX WARN: Removed duplicated region for block: B:2293:0x19a9  */
    /* JADX WARN: Removed duplicated region for block: B:2298:0x19d6  */
    /* JADX WARN: Removed duplicated region for block: B:2303:0x1a02  */
    /* JADX WARN: Removed duplicated region for block: B:2308:0x1a37  */
    /* JADX WARN: Removed duplicated region for block: B:2313:0x1a60  */
    /* JADX WARN: Removed duplicated region for block: B:2318:0x1a86  */
    /* JADX WARN: Removed duplicated region for block: B:2351:0x1526 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean processUpdateArray(ArrayList<TLRPC$Update> arrayList, final ArrayList<TLRPC$User> arrayList2, final ArrayList<TLRPC$Chat> arrayList3, boolean z, final int i) {
        ConcurrentHashMap<Long, TLRPC$User> concurrentHashMap;
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap2;
        ArrayList<Long> arrayList4;
        final LongSparseArray longSparseArray;
        LongSparseArray<SparseIntArray> longSparseArray2;
        ArrayList arrayList5;
        LongSparseArray<ArrayList<Integer>> longSparseArray3;
        LongSparseIntArray longSparseIntArray;
        SparseIntArray sparseIntArray;
        boolean z2;
        HashMap hashMap;
        SparseIntArray sparseIntArray2;
        int i2;
        LongSparseIntArray longSparseIntArray2;
        ArrayList<Long> arrayList6;
        LongSparseArray longSparseArray4;
        LongSparseArray<ArrayList<Integer>> longSparseArray5;
        LongSparseArray longSparseArray6;
        LongSparseArray<SparseIntArray> longSparseArray7;
        ArrayList arrayList7;
        SparseIntArray sparseIntArray3;
        LongSparseIntArray longSparseIntArray3;
        LongSparseArray longSparseArray8;
        LongSparseIntArray longSparseIntArray4;
        LongSparseArray longSparseArray9;
        ArrayList arrayList8;
        LongSparseArray<SparseIntArray> longSparseArray10;
        LongSparseArray longSparseArray11;
        TLRPC$Message tLRPC$Message;
        TLRPC$Chat tLRPC$Chat;
        long j;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$MessageAction tLRPC$MessageAction;
        LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray12;
        boolean z3;
        long j2;
        MessageObject messageObject;
        int i3;
        int i4;
        ArrayList arrayList9;
        ImageLoader.MessageThumb generateMessageThumb;
        boolean z4;
        TLRPC$UserStatus tLRPC$UserStatus;
        LongSparseArray longSparseArray13;
        LongSparseArray longSparseArray14;
        HashMap hashMap2;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap3;
        long j3;
        int i5;
        TLRPC$SendMessageAction tLRPC$SendMessageAction;
        long j4;
        long j5;
        LongSparseArray longSparseArray15;
        boolean z5;
        LongSparseArray longSparseArray16;
        ArrayList<Long> arrayList10;
        LongSparseArray<TLRPC$WebPage> longSparseArray17;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap4;
        HashMap hashMap5;
        ArrayList arrayList11;
        boolean z6;
        final TLRPC$Message tLRPC$Message2;
        boolean z7;
        LongSparseIntArray longSparseIntArray5;
        ArrayList<Long> arrayList12;
        ArrayList arrayList13;
        LongSparseArray longSparseArray18;
        LongSparseArray longSparseArray19;
        String str;
        TLRPC$TL_updateEncryptedChatTyping tLRPC$TL_updateEncryptedChatTyping;
        long j6;
        boolean z8;
        TLRPC$TL_updateNewEncryptedMessage tLRPC$TL_updateNewEncryptedMessage;
        ArrayList<Long> arrayList14;
        ArrayList<TLRPC$Message> arrayList15;
        ArrayList arrayList16;
        TLRPC$User tLRPC$User;
        long j7;
        long j8;
        TLRPC$UserStatus tLRPC$UserStatus2;
        long j9;
        if (arrayList.isEmpty()) {
            if (arrayList2 != null || arrayList3 != null) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda394
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$processUpdateArray$360(arrayList2, arrayList3);
                    }
                });
            }
            return true;
        }
        long currentTimeMillis = System.currentTimeMillis();
        if (arrayList2 != null) {
            concurrentHashMap = new ConcurrentHashMap<>();
            int size = arrayList2.size();
            for (int i6 = 0; i6 < size; i6++) {
                TLRPC$User tLRPC$User2 = arrayList2.get(i6);
                concurrentHashMap.put(Long.valueOf(tLRPC$User2.id), tLRPC$User2);
            }
        } else {
            concurrentHashMap = this.users;
        }
        ConcurrentHashMap<Long, TLRPC$User> concurrentHashMap3 = concurrentHashMap;
        if (arrayList3 != null) {
            concurrentHashMap2 = new ConcurrentHashMap<>();
            int size2 = arrayList3.size();
            for (int i7 = 0; i7 < size2; i7++) {
                TLRPC$Chat tLRPC$Chat3 = arrayList3.get(i7);
                concurrentHashMap2.put(Long.valueOf(tLRPC$Chat3.id), tLRPC$Chat3);
            }
        } else {
            concurrentHashMap2 = this.chats;
        }
        ConcurrentHashMap<Long, TLRPC$Chat> concurrentHashMap4 = concurrentHashMap2;
        if (arrayList2 != null || arrayList3 != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda400
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$361(arrayList2, arrayList3);
                }
            });
        }
        long clientUserId = getUserConfig().getClientUserId();
        int size3 = arrayList.size();
        LongSparseArray longSparseArray20 = null;
        LongSparseIntArray longSparseIntArray6 = null;
        ArrayList<Long> arrayList17 = null;
        LongSparseArray longSparseArray21 = null;
        SparseIntArray sparseIntArray4 = null;
        LongSparseArray longSparseArray22 = null;
        LongSparseIntArray longSparseIntArray7 = null;
        LongSparseArray longSparseArray23 = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray24 = null;
        int i8 = 0;
        int i9 = 0;
        ArrayList arrayList18 = null;
        LongSparseArray longSparseArray25 = null;
        LongSparseIntArray longSparseIntArray8 = null;
        LongSparseArray longSparseArray26 = null;
        ArrayList arrayList19 = null;
        LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray27 = null;
        ArrayList arrayList20 = null;
        boolean z9 = false;
        ArrayList arrayList21 = null;
        LongSparseArray longSparseArray28 = null;
        ArrayList<TLRPC$Message> arrayList22 = null;
        LongSparseArray<SparseIntArray> longSparseArray29 = null;
        LongSparseArray<SparseIntArray> longSparseArray30 = null;
        ArrayList arrayList23 = null;
        ArrayList<TLRPC$Message> arrayList24 = null;
        LongSparseIntArray longSparseIntArray9 = null;
        LongSparseArray<TLRPC$WebPage> longSparseArray31 = null;
        LongSparseIntArray longSparseIntArray10 = null;
        HashMap hashMap6 = null;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap7 = null;
        int i10 = 0;
        ArrayList arrayList25 = null;
        while (i8 < size3) {
            int i11 = size3;
            TLRPC$Update tLRPC$Update = arrayList.get(i8);
            if (!BuildVars.LOGS_ENABLED || tLRPC$Update == null) {
                sparseIntArray2 = sparseIntArray4;
                i2 = i8;
            } else {
                i2 = i8;
                StringBuilder sb = new StringBuilder();
                sparseIntArray2 = sparseIntArray4;
                sb.append("process update ");
                sb.append(tLRPC$Update.getClass().getSimpleName());
                FileLog.d(sb.toString());
            }
            boolean z10 = tLRPC$Update instanceof TLRPC$TL_updateNewMessage;
            long j10 = currentTimeMillis;
            if (z10 || (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                longSparseIntArray2 = longSparseIntArray6;
                arrayList6 = arrayList17;
                longSparseArray4 = longSparseArray22;
                longSparseArray5 = longSparseArray24;
                longSparseArray6 = longSparseArray28;
                longSparseArray7 = longSparseArray29;
                arrayList7 = arrayList23;
                sparseIntArray3 = sparseIntArray2;
                longSparseIntArray3 = longSparseIntArray10;
                currentTimeMillis = j10;
                longSparseArray8 = longSparseArray21;
                longSparseIntArray4 = longSparseIntArray7;
                longSparseArray9 = longSparseArray23;
                arrayList8 = arrayList21;
                longSparseArray10 = longSparseArray30;
                longSparseArray11 = longSparseArray20;
                if (z10) {
                    tLRPC$Message = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage) {
                    tLRPC$Message = ((TLRPC$TL_updateNewScheduledMessage) tLRPC$Update).message;
                } else {
                    tLRPC$Message = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message;
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(tLRPC$Update + " channelId = " + tLRPC$Message.peer_id.channel_id + " message_id = " + tLRPC$Message.id);
                    }
                    if (!tLRPC$Message.out) {
                        TLRPC$Peer tLRPC$Peer = tLRPC$Message.from_id;
                        if ((tLRPC$Peer instanceof TLRPC$TL_peerUser) && tLRPC$Peer.user_id == getUserConfig().getClientUserId()) {
                            tLRPC$Message.out = true;
                        }
                    }
                }
                if (!(tLRPC$Message instanceof TLRPC$TL_messageEmpty)) {
                    NewMessageCallback newMessageCallback = this.newMessageCallback;
                    if (newMessageCallback == null || !newMessageCallback.onMessageReceived(tLRPC$Message)) {
                        tLRPC$Chat = null;
                    } else {
                        tLRPC$Chat = null;
                        this.newMessageCallback = null;
                    }
                    TLRPC$Peer tLRPC$Peer2 = tLRPC$Message.peer_id;
                    long j11 = tLRPC$Peer2.channel_id;
                    if (j11 == 0) {
                        j11 = tLRPC$Peer2.chat_id;
                        if (j11 == 0) {
                            long j12 = tLRPC$Peer2.user_id;
                            if (j12 != 0) {
                                j = j12;
                                j11 = 0;
                            } else {
                                j11 = 0;
                                j = 0;
                            }
                            if (j11 == 0) {
                                tLRPC$Chat2 = concurrentHashMap4.get(Long.valueOf(j11));
                                if (tLRPC$Chat2 == null || tLRPC$Chat2.min) {
                                    tLRPC$Chat2 = getChat(Long.valueOf(j11));
                                }
                                if (tLRPC$Chat2 == null || tLRPC$Chat2.min) {
                                    tLRPC$Chat2 = getMessagesStorage().getChatSync(j11);
                                    putChat(tLRPC$Chat2, true);
                                }
                            } else {
                                tLRPC$Chat2 = tLRPC$Chat;
                            }
                            if (!z) {
                                if (j11 != 0 && tLRPC$Chat2 == null) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("not found chat " + j11);
                                        return false;
                                    }
                                    return false;
                                }
                                int size4 = tLRPC$Message.entities.size() + 3;
                                for (int i12 = 0; i12 < size4; i12++) {
                                    if (i12 != 0) {
                                        if (i12 == 1) {
                                            TLRPC$Peer tLRPC$Peer3 = tLRPC$Message.from_id;
                                            j = tLRPC$Peer3 instanceof TLRPC$TL_peerUser ? tLRPC$Peer3.user_id : 0L;
                                            if (tLRPC$Message.post) {
                                                z4 = true;
                                                if (j > 0) {
                                                    TLRPC$User tLRPC$User3 = concurrentHashMap3.get(Long.valueOf(j));
                                                    if (tLRPC$User3 == null || (!z4 && tLRPC$User3.min)) {
                                                        tLRPC$User3 = getUser(Long.valueOf(j));
                                                    }
                                                    if (tLRPC$User3 == null || (!z4 && tLRPC$User3.min)) {
                                                        tLRPC$User3 = getMessagesStorage().getUserSync(j);
                                                        if (tLRPC$User3 != null && !z4 && tLRPC$User3.min) {
                                                            tLRPC$User3 = null;
                                                        }
                                                        putUser(tLRPC$User3, true);
                                                    }
                                                    if (tLRPC$User3 == null) {
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("not found user " + j);
                                                            return false;
                                                        }
                                                        return false;
                                                    } else if (!tLRPC$Message.out && i12 == 1 && (tLRPC$UserStatus = tLRPC$User3.status) != null && tLRPC$UserStatus.expires <= 0 && Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$Message.date) < 30) {
                                                        this.onlinePrivacy.put(Long.valueOf(j), Integer.valueOf(tLRPC$Message.date));
                                                        i9 |= UPDATE_MASK_STATUS;
                                                    }
                                                }
                                            }
                                        } else {
                                            if (i12 == 2) {
                                                TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message.fwd_from;
                                                if (tLRPC$MessageFwdHeader != null) {
                                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$MessageFwdHeader.from_id;
                                                    if (tLRPC$Peer4 instanceof TLRPC$TL_peerUser) {
                                                        j = tLRPC$Peer4.user_id;
                                                        z4 = false;
                                                    }
                                                }
                                                j = 0;
                                                z4 = false;
                                            } else {
                                                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i12 - 3);
                                                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                                                    j = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id;
                                                    z4 = false;
                                                }
                                                j = 0;
                                                z4 = false;
                                            }
                                            if (j > 0) {
                                            }
                                        }
                                    }
                                    z4 = false;
                                    if (j > 0) {
                                    }
                                }
                            }
                            tLRPC$MessageAction = tLRPC$Message.action;
                            if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                                TLRPC$User tLRPC$User4 = concurrentHashMap3.get(Long.valueOf(tLRPC$MessageAction.user_id));
                                if (tLRPC$User4 != null && tLRPC$User4.bot) {
                                    tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                                    tLRPC$Message.flags |= 64;
                                } else {
                                    TLRPC$Peer tLRPC$Peer5 = tLRPC$Message.from_id;
                                    if (tLRPC$Peer5 instanceof TLRPC$TL_peerUser) {
                                        if (tLRPC$Peer5.user_id == clientUserId) {
                                        }
                                    }
                                }
                            }
                            ImageLoader.saveMessageThumbs(tLRPC$Message);
                            MessageObject.getDialogId(tLRPC$Message);
                            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || tLRPC$Message.reply_to == null || (tLRPC$Message.action instanceof TLRPC$TL_messageActionPinMessage)) {
                                longSparseArray12 = longSparseArray27;
                            } else {
                                longSparseArray12 = longSparseArray27;
                                if (longSparseArray12 == null) {
                                    longSparseArray12 = new LongSparseArray<>();
                                }
                                SparseArray<TLRPC$MessageReplies> sparseArray = longSparseArray12.get(tLRPC$Message.dialog_id);
                                if (sparseArray == null) {
                                    sparseArray = new SparseArray<>();
                                    longSparseArray12.put(tLRPC$Message.dialog_id, sparseArray);
                                }
                                TLRPC$MessageReplyHeader tLRPC$MessageReplyHeader = tLRPC$Message.reply_to;
                                int i13 = tLRPC$MessageReplyHeader.reply_to_top_id;
                                if (i13 == 0) {
                                    i13 = tLRPC$MessageReplyHeader.reply_to_msg_id;
                                }
                                TLRPC$MessageReplies tLRPC$MessageReplies = sparseArray.get(i13);
                                if (tLRPC$MessageReplies == null) {
                                    tLRPC$MessageReplies = new TLRPC$TL_messageReplies();
                                    sparseArray.put(i13, tLRPC$MessageReplies);
                                }
                                TLRPC$Peer tLRPC$Peer6 = tLRPC$Message.from_id;
                                if (tLRPC$Peer6 != null) {
                                    tLRPC$MessageReplies.recent_repliers.add(0, tLRPC$Peer6);
                                }
                                tLRPC$MessageReplies.replies++;
                            }
                            longSparseArray27 = longSparseArray12;
                            if (this.createdDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id)) && tLRPC$Message.grouped_id == 0 && (generateMessageThumb = ImageLoader.generateMessageThumb(tLRPC$Message)) != null) {
                                ArrayList arrayList26 = arrayList20 != null ? new ArrayList() : arrayList20;
                                arrayList26.add(generateMessageThumb);
                                arrayList20 = arrayList26;
                            }
                            if (!(tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                                ArrayList<TLRPC$Message> arrayList27 = arrayList22 == null ? new ArrayList<>() : arrayList22;
                                arrayList27.add(tLRPC$Message);
                                boolean contains = this.createdScheduledDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id));
                                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap3, concurrentHashMap4, contains, contains);
                                messageObject2.scheduled = true;
                                LongSparseArray longSparseArray32 = longSparseArray26 == null ? new LongSparseArray() : longSparseArray26;
                                ArrayList arrayList28 = (ArrayList) longSparseArray32.get(tLRPC$Message.dialog_id);
                                if (arrayList28 == null) {
                                    arrayList28 = new ArrayList();
                                    longSparseArray32.put(tLRPC$Message.dialog_id, arrayList28);
                                }
                                arrayList28.add(messageObject2);
                                arrayList22 = arrayList27;
                                longSparseArray26 = longSparseArray32;
                                longSparseArray21 = longSparseArray8;
                            } else {
                                ArrayList<TLRPC$Message> arrayList29 = arrayList24 == null ? new ArrayList<>() : arrayList24;
                                arrayList29.add(tLRPC$Message);
                                ConcurrentHashMap<Long, Integer> concurrentHashMap5 = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                                Integer num = concurrentHashMap5.get(Long.valueOf(tLRPC$Message.dialog_id));
                                if (num == null) {
                                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                                    concurrentHashMap5.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                                }
                                if (num.intValue() < tLRPC$Message.id && (tLRPC$Chat2 == null || !ChatObject.isNotInChat(tLRPC$Chat2))) {
                                    TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                                    if (!(tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) && !(tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                                        z3 = true;
                                        tLRPC$Message.unread = z3;
                                        j2 = tLRPC$Message.dialog_id;
                                        if (j2 == clientUserId) {
                                            if (!tLRPC$Message.from_scheduled) {
                                                tLRPC$Message.unread = false;
                                            }
                                            tLRPC$Message.media_unread = false;
                                            tLRPC$Message.out = true;
                                        }
                                        boolean contains2 = this.createdDialogIds.contains(Long.valueOf(j2));
                                        messageObject = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap3, concurrentHashMap4, contains2, contains2);
                                        i3 = messageObject.type;
                                        if (i3 != 11) {
                                            i4 = UPDATE_MASK_CHAT_AVATAR;
                                        } else {
                                            if (i3 == 10) {
                                                i4 = UPDATE_MASK_CHAT_NAME;
                                            }
                                            if (longSparseArray8 == null) {
                                                longSparseArray8 = new LongSparseArray();
                                            }
                                            arrayList9 = (ArrayList) longSparseArray8.get(tLRPC$Message.dialog_id);
                                            if (arrayList9 == null) {
                                                arrayList9 = new ArrayList();
                                                longSparseArray8.put(tLRPC$Message.dialog_id, arrayList9);
                                            }
                                            arrayList9.add(messageObject);
                                            if ((messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread() && (tLRPC$Chat2 == null || (!ChatObject.isNotInChat(tLRPC$Chat2) && !tLRPC$Chat2.min))) {
                                                ArrayList arrayList30 = arrayList8 == null ? new ArrayList() : arrayList8;
                                                arrayList30.add(messageObject);
                                                arrayList8 = arrayList30;
                                            }
                                            arrayList24 = arrayList29;
                                            longSparseArray21 = longSparseArray8;
                                        }
                                        i9 |= i4;
                                        if (longSparseArray8 == null) {
                                        }
                                        arrayList9 = (ArrayList) longSparseArray8.get(tLRPC$Message.dialog_id);
                                        if (arrayList9 == null) {
                                        }
                                        arrayList9.add(messageObject);
                                        if (messageObject.isOut()) {
                                        }
                                        if (arrayList8 == null) {
                                        }
                                        arrayList30.add(messageObject);
                                        arrayList8 = arrayList30;
                                        arrayList24 = arrayList29;
                                        longSparseArray21 = longSparseArray8;
                                    }
                                }
                                z3 = false;
                                tLRPC$Message.unread = z3;
                                j2 = tLRPC$Message.dialog_id;
                                if (j2 == clientUserId) {
                                }
                                boolean contains22 = this.createdDialogIds.contains(Long.valueOf(j2));
                                messageObject = new MessageObject(this.currentAccount, tLRPC$Message, concurrentHashMap3, concurrentHashMap4, contains22, contains22);
                                i3 = messageObject.type;
                                if (i3 != 11) {
                                }
                                i9 |= i4;
                                if (longSparseArray8 == null) {
                                }
                                arrayList9 = (ArrayList) longSparseArray8.get(tLRPC$Message.dialog_id);
                                if (arrayList9 == null) {
                                }
                                arrayList9.add(messageObject);
                                if (messageObject.isOut()) {
                                }
                                if (arrayList8 == null) {
                                }
                                arrayList30.add(messageObject);
                                arrayList8 = arrayList30;
                                arrayList24 = arrayList29;
                                longSparseArray21 = longSparseArray8;
                            }
                            arrayList17 = arrayList6;
                            longSparseArray20 = longSparseArray11;
                            arrayList21 = arrayList8;
                            longSparseIntArray7 = longSparseIntArray4;
                            longSparseArray30 = longSparseArray10;
                            longSparseArray23 = longSparseArray9;
                            longSparseArray24 = longSparseArray5;
                            longSparseIntArray6 = longSparseIntArray2;
                            sparseIntArray4 = sparseIntArray3;
                            longSparseIntArray10 = longSparseIntArray3;
                            longSparseArray22 = longSparseArray4;
                            longSparseArray28 = longSparseArray6;
                            arrayList23 = arrayList7;
                            i8 = i2 + 1;
                            size3 = i11;
                            longSparseArray29 = longSparseArray7;
                        }
                    }
                    j = 0;
                    if (j11 == 0) {
                    }
                    if (!z) {
                    }
                    tLRPC$MessageAction = tLRPC$Message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                    }
                    ImageLoader.saveMessageThumbs(tLRPC$Message);
                    MessageObject.getDialogId(tLRPC$Message);
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                    }
                    longSparseArray12 = longSparseArray27;
                    longSparseArray27 = longSparseArray12;
                    if (this.createdDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id))) {
                        if (arrayList20 != null) {
                        }
                        arrayList26.add(generateMessageThumb);
                        arrayList20 = arrayList26;
                    }
                    if (!(tLRPC$Update instanceof TLRPC$TL_updateNewScheduledMessage)) {
                    }
                    arrayList17 = arrayList6;
                    longSparseArray20 = longSparseArray11;
                    arrayList21 = arrayList8;
                    longSparseIntArray7 = longSparseIntArray4;
                    longSparseArray30 = longSparseArray10;
                    longSparseArray23 = longSparseArray9;
                    longSparseArray24 = longSparseArray5;
                    longSparseIntArray6 = longSparseIntArray2;
                    sparseIntArray4 = sparseIntArray3;
                    longSparseIntArray10 = longSparseIntArray3;
                    longSparseArray22 = longSparseArray4;
                    longSparseArray28 = longSparseArray6;
                    arrayList23 = arrayList7;
                    i8 = i2 + 1;
                    size3 = i11;
                    longSparseArray29 = longSparseArray7;
                }
                arrayList17 = arrayList6;
                longSparseArray21 = longSparseArray8;
            } else {
                if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
                    TLRPC$TL_updateReadMessagesContents tLRPC$TL_updateReadMessagesContents = (TLRPC$TL_updateReadMessagesContents) tLRPC$Update;
                    int i14 = tLRPC$TL_updateReadMessagesContents.date;
                    if (longSparseArray24 == null) {
                        longSparseArray24 = new LongSparseArray<>();
                    }
                    ArrayList<Integer> arrayList31 = longSparseArray24.get(0L);
                    if (arrayList31 == null) {
                        arrayList31 = new ArrayList<>();
                        longSparseArray24.put(0L, arrayList31);
                    }
                    arrayList31.addAll(tLRPC$TL_updateReadMessagesContents.messages);
                    i10 = i14;
                } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
                    TLRPC$TL_updateChannelReadMessagesContents tLRPC$TL_updateChannelReadMessagesContents = (TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update;
                    if (longSparseArray24 == null) {
                        longSparseArray24 = new LongSparseArray<>();
                    }
                    long j13 = -tLRPC$TL_updateChannelReadMessagesContents.channel_id;
                    ArrayList<Integer> arrayList32 = longSparseArray24.get(j13);
                    if (arrayList32 == null) {
                        arrayList32 = new ArrayList<>();
                        longSparseArray24.put(j13, arrayList32);
                    }
                    arrayList32.addAll(tLRPC$TL_updateChannelReadMessagesContents.messages);
                } else if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
                    TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = (TLRPC$TL_updateReadHistoryInbox) tLRPC$Update;
                    if (longSparseIntArray7 == null) {
                        longSparseIntArray7 = new LongSparseIntArray();
                    }
                    TLRPC$Peer tLRPC$Peer7 = tLRPC$TL_updateReadHistoryInbox.peer;
                    long j14 = tLRPC$Peer7.chat_id;
                    if (j14 != 0) {
                        longSparseIntArray7.put(-j14, tLRPC$TL_updateReadHistoryInbox.max_id);
                        j9 = -tLRPC$TL_updateReadHistoryInbox.peer.chat_id;
                    } else {
                        longSparseIntArray7.put(tLRPC$Peer7.user_id, tLRPC$TL_updateReadHistoryInbox.max_id);
                        j9 = tLRPC$TL_updateReadHistoryInbox.peer.user_id;
                    }
                    Integer num2 = this.dialogs_read_inbox_max.get(Long.valueOf(j9));
                    if (num2 == null) {
                        num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j9));
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(j9), Integer.valueOf(Math.max(num2.intValue(), tLRPC$TL_updateReadHistoryInbox.max_id)));
                } else if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
                    TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = (TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update;
                    if (longSparseIntArray6 == null) {
                        longSparseIntArray6 = new LongSparseIntArray();
                    }
                    TLRPC$Peer tLRPC$Peer8 = tLRPC$TL_updateReadHistoryOutbox.peer;
                    long j15 = tLRPC$Peer8.chat_id;
                    if (j15 != 0) {
                        longSparseIntArray6.put(-j15, tLRPC$TL_updateReadHistoryOutbox.max_id);
                        j8 = -tLRPC$TL_updateReadHistoryOutbox.peer.chat_id;
                    } else {
                        longSparseIntArray6.put(tLRPC$Peer8.user_id, tLRPC$TL_updateReadHistoryOutbox.max_id);
                        long j16 = tLRPC$TL_updateReadHistoryOutbox.peer.user_id;
                        TLRPC$User user = getUser(Long.valueOf(j16));
                        if (user == null || (tLRPC$UserStatus2 = user.status) == null || tLRPC$UserStatus2.expires > 0 || Math.abs(getConnectionsManager().getCurrentTime() - i) >= 30) {
                            j7 = j16;
                        } else {
                            j7 = j16;
                            this.onlinePrivacy.put(Long.valueOf(tLRPC$TL_updateReadHistoryOutbox.peer.user_id), Integer.valueOf(i));
                            i9 |= UPDATE_MASK_STATUS;
                        }
                        j8 = j7;
                    }
                    Integer num3 = this.dialogs_read_outbox_max.get(Long.valueOf(j8));
                    if (num3 == null) {
                        num3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j8));
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(j8), Integer.valueOf(Math.max(num3.intValue(), tLRPC$TL_updateReadHistoryOutbox.max_id)));
                } else if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
                    TLRPC$TL_updateDeleteMessages tLRPC$TL_updateDeleteMessages = (TLRPC$TL_updateDeleteMessages) tLRPC$Update;
                    if (longSparseArray22 == null) {
                        longSparseArray22 = new LongSparseArray();
                    }
                    ArrayList arrayList33 = (ArrayList) longSparseArray22.get(0L);
                    if (arrayList33 == null) {
                        arrayList33 = new ArrayList();
                        longSparseArray22.put(0L, arrayList33);
                    }
                    arrayList33.addAll(tLRPC$TL_updateDeleteMessages.messages);
                } else {
                    if (tLRPC$Update instanceof TLRPC$TL_updateDeleteQuickReplyMessages) {
                        TLRPC$TL_updateDeleteQuickReplyMessages tLRPC$TL_updateDeleteQuickReplyMessages = (TLRPC$TL_updateDeleteQuickReplyMessages) tLRPC$Update;
                        if (longSparseArray20 == null) {
                            longSparseArray20 = new LongSparseArray();
                        }
                        ArrayList arrayList34 = (ArrayList) longSparseArray20.get(tLRPC$TL_updateDeleteQuickReplyMessages.shortcut_id);
                        if (arrayList34 == null) {
                            arrayList34 = new ArrayList();
                            longSparseArray5 = longSparseArray24;
                            longSparseArray20.put(tLRPC$TL_updateDeleteQuickReplyMessages.shortcut_id, arrayList34);
                        } else {
                            longSparseArray5 = longSparseArray24;
                        }
                        arrayList34.addAll(tLRPC$TL_updateDeleteQuickReplyMessages.messages);
                        arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                        arrayList16.add(tLRPC$Update);
                    } else {
                        longSparseArray5 = longSparseArray24;
                        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteScheduledMessages) {
                            TLRPC$TL_updateDeleteScheduledMessages tLRPC$TL_updateDeleteScheduledMessages = (TLRPC$TL_updateDeleteScheduledMessages) tLRPC$Update;
                            if (longSparseArray23 == null) {
                                longSparseArray23 = new LongSparseArray();
                            }
                            long peerId = MessageObject.getPeerId(tLRPC$TL_updateDeleteScheduledMessages.peer);
                            ArrayList arrayList35 = (ArrayList) longSparseArray23.get(MessageObject.getPeerId(tLRPC$TL_updateDeleteScheduledMessages.peer));
                            if (arrayList35 == null) {
                                arrayList35 = new ArrayList();
                                longSparseArray23.put(peerId, arrayList35);
                            }
                            arrayList35.addAll(tLRPC$TL_updateDeleteScheduledMessages.messages);
                        } else {
                            boolean z11 = tLRPC$Update instanceof TLRPC$TL_updateUserTyping;
                            if (z11 || (tLRPC$Update instanceof TLRPC$TL_updateChatUserTyping) || (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping)) {
                                longSparseIntArray2 = longSparseIntArray6;
                                arrayList6 = arrayList17;
                                longSparseArray13 = longSparseArray21;
                                longSparseArray4 = longSparseArray22;
                                longSparseArray14 = longSparseArray28;
                                longSparseArray7 = longSparseArray29;
                                arrayList7 = arrayList23;
                                sparseIntArray3 = sparseIntArray2;
                                longSparseIntArray3 = longSparseIntArray10;
                                currentTimeMillis = j10;
                                longSparseIntArray4 = longSparseIntArray7;
                                longSparseArray9 = longSparseArray23;
                                arrayList8 = arrayList21;
                                longSparseArray10 = longSparseArray30;
                                hashMap2 = hashMap6;
                                hashMap3 = hashMap7;
                                longSparseArray11 = longSparseArray20;
                                if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
                                    TLRPC$TL_updateChannelUserTyping tLRPC$TL_updateChannelUserTyping = (TLRPC$TL_updateChannelUserTyping) tLRPC$Update;
                                    TLRPC$Peer tLRPC$Peer9 = tLRPC$TL_updateChannelUserTyping.from_id;
                                    j4 = tLRPC$Peer9.user_id;
                                    if (j4 == 0) {
                                        long j17 = tLRPC$Peer9.channel_id;
                                        j4 = j17 != 0 ? -j17 : -tLRPC$Peer9.chat_id;
                                    }
                                    j5 = tLRPC$TL_updateChannelUserTyping.channel_id;
                                    tLRPC$SendMessageAction = tLRPC$TL_updateChannelUserTyping.action;
                                    i5 = tLRPC$TL_updateChannelUserTyping.top_msg_id;
                                    hashMap6 = hashMap2;
                                    hashMap7 = hashMap3;
                                } else {
                                    if (z11) {
                                        final TLRPC$TL_updateUserTyping tLRPC$TL_updateUserTyping = (TLRPC$TL_updateUserTyping) tLRPC$Update;
                                        j4 = tLRPC$TL_updateUserTyping.user_id;
                                        tLRPC$SendMessageAction = tLRPC$TL_updateUserTyping.action;
                                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteraction) {
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda401
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$362(tLRPC$TL_updateUserTyping);
                                                }
                                            });
                                        } else {
                                            hashMap6 = hashMap2;
                                            hashMap7 = hashMap3;
                                            j5 = 0;
                                            i5 = 0;
                                        }
                                    } else {
                                        final TLRPC$TL_updateChatUserTyping tLRPC$TL_updateChatUserTyping = (TLRPC$TL_updateChatUserTyping) tLRPC$Update;
                                        long j18 = tLRPC$TL_updateChatUserTyping.chat_id;
                                        TLRPC$Peer tLRPC$Peer10 = tLRPC$TL_updateChatUserTyping.from_id;
                                        long j19 = tLRPC$Peer10.user_id;
                                        if (j19 != 0) {
                                            j3 = j19;
                                        } else {
                                            long j20 = tLRPC$Peer10.channel_id;
                                            j3 = j20 != 0 ? -j20 : -tLRPC$Peer10.chat_id;
                                        }
                                        TLRPC$SendMessageAction tLRPC$SendMessageAction2 = tLRPC$TL_updateChatUserTyping.action;
                                        if (tLRPC$SendMessageAction2 instanceof TLRPC$TL_sendMessageEmojiInteraction) {
                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda402
                                                @Override // java.lang.Runnable
                                                public final void run() {
                                                    MessagesController.this.lambda$processUpdateArray$363(tLRPC$TL_updateChatUserTyping);
                                                }
                                            });
                                        } else {
                                            hashMap6 = hashMap2;
                                            hashMap7 = hashMap3;
                                            i5 = 0;
                                            tLRPC$SendMessageAction = tLRPC$SendMessageAction2;
                                            j4 = j3;
                                            j5 = j18;
                                        }
                                    }
                                    i8 = i2 + 1;
                                    size3 = i11;
                                    longSparseArray29 = longSparseArray7;
                                }
                                long j21 = -j5;
                                if (j21 == 0) {
                                    j21 = j4;
                                }
                                if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageHistoryImportAction) {
                                    LongSparseIntArray longSparseIntArray11 = longSparseIntArray8 == null ? new LongSparseIntArray() : longSparseIntArray8;
                                    longSparseIntArray11.put(j21, ((TLRPC$TL_sendMessageHistoryImportAction) tLRPC$SendMessageAction).progress);
                                    longSparseIntArray8 = longSparseIntArray11;
                                } else if (j4 != getUserConfig().getClientUserId()) {
                                    if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_speakingInGroupCallAction)) {
                                        ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap6 = this.printingUsers.get(Long.valueOf(j21));
                                        ArrayList<PrintingUser> arrayList36 = concurrentHashMap6 != null ? concurrentHashMap6.get(Integer.valueOf(i5)) : null;
                                        if (!(tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageCancelAction)) {
                                            longSparseArray6 = longSparseArray14;
                                            longSparseArray15 = longSparseArray13;
                                            if (concurrentHashMap6 == null) {
                                                concurrentHashMap6 = new ConcurrentHashMap<>();
                                                this.printingUsers.put(Long.valueOf(j21), concurrentHashMap6);
                                            }
                                            if (arrayList36 == null) {
                                                arrayList36 = new ArrayList<>();
                                                concurrentHashMap6.put(Integer.valueOf(i5), arrayList36);
                                            }
                                            Iterator<PrintingUser> it = arrayList36.iterator();
                                            while (true) {
                                                if (!it.hasNext()) {
                                                    z5 = false;
                                                    break;
                                                }
                                                PrintingUser next = it.next();
                                                if (next.userId == j4) {
                                                    next.lastTime = currentTimeMillis;
                                                    if (next.action.getClass() != tLRPC$SendMessageAction.getClass()) {
                                                        z9 = true;
                                                    }
                                                    next.action = tLRPC$SendMessageAction;
                                                    z5 = true;
                                                }
                                            }
                                            if (!z5) {
                                                PrintingUser printingUser = new PrintingUser();
                                                printingUser.userId = j4;
                                                printingUser.lastTime = currentTimeMillis;
                                                printingUser.action = tLRPC$SendMessageAction;
                                                arrayList36.add(printingUser);
                                                z9 = true;
                                            }
                                        } else if (arrayList36 != null) {
                                            int size5 = arrayList36.size();
                                            int i15 = 0;
                                            while (true) {
                                                if (i15 >= size5) {
                                                    longSparseArray6 = longSparseArray14;
                                                    longSparseArray15 = longSparseArray13;
                                                    break;
                                                }
                                                int i16 = size5;
                                                longSparseArray6 = longSparseArray14;
                                                longSparseArray15 = longSparseArray13;
                                                if (arrayList36.get(i15).userId == j4) {
                                                    arrayList36.remove(i15);
                                                    z9 = true;
                                                    break;
                                                }
                                                i15++;
                                                longSparseArray13 = longSparseArray15;
                                                size5 = i16;
                                                longSparseArray14 = longSparseArray6;
                                            }
                                            if (arrayList36.isEmpty()) {
                                                concurrentHashMap6.remove(Integer.valueOf(i5));
                                                if (concurrentHashMap6.isEmpty()) {
                                                    this.printingUsers.remove(Long.valueOf(j21));
                                                }
                                            }
                                        }
                                        if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                            this.onlinePrivacy.put(Long.valueOf(j4), Integer.valueOf(i));
                                        }
                                        arrayList17 = arrayList6;
                                        longSparseArray21 = longSparseArray15;
                                    } else if (j5 != 0) {
                                        LongSparseArray longSparseArray33 = longSparseArray25 == null ? new LongSparseArray() : longSparseArray25;
                                        ArrayList arrayList37 = (ArrayList) longSparseArray33.get(j5);
                                        if (arrayList37 == null) {
                                            arrayList37 = new ArrayList();
                                            longSparseArray33.put(j5, arrayList37);
                                        }
                                        arrayList37.add(Long.valueOf(j4));
                                        longSparseArray25 = longSparseArray33;
                                    }
                                    longSparseArray6 = longSparseArray14;
                                    longSparseArray15 = longSparseArray13;
                                    if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                    }
                                    arrayList17 = arrayList6;
                                    longSparseArray21 = longSparseArray15;
                                }
                                longSparseArray6 = longSparseArray14;
                                longSparseArray15 = longSparseArray13;
                                arrayList17 = arrayList6;
                                longSparseArray21 = longSparseArray15;
                            } else if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipants) {
                                TLRPC$TL_updateChatParticipants tLRPC$TL_updateChatParticipants = (TLRPC$TL_updateChatParticipants) tLRPC$Update;
                                i9 |= UPDATE_MASK_CHAT_MEMBERS;
                                ArrayList arrayList38 = arrayList19 == null ? new ArrayList() : arrayList19;
                                arrayList38.add(tLRPC$TL_updateChatParticipants.participants);
                                arrayList19 = arrayList38;
                            } else {
                                if (tLRPC$Update instanceof TL_stories$TL_updateStory) {
                                    getStoriesController().processUpdate((TL_stories$TL_updateStory) tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserStatus) {
                                    i9 |= UPDATE_MASK_STATUS;
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerWallpaper) {
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserEmojiStatus) {
                                    i9 |= UPDATE_MASK_EMOJI_STATUS;
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserName) {
                                    i9 |= UPDATE_MASK_NAME;
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhoto) {
                                    TLRPC$TL_updateUserPhoto tLRPC$TL_updateUserPhoto = (TLRPC$TL_updateUserPhoto) tLRPC$Update;
                                    i9 |= UPDATE_MASK_AVATAR;
                                    getMessagesStorage().clearUserPhotos(tLRPC$TL_updateUserPhoto.user_id);
                                    if (this.dialogPhotos.get(tLRPC$TL_updateUserPhoto.user_id) != null) {
                                        this.dialogPhotos.get(tLRPC$TL_updateUserPhoto.user_id).reset();
                                    }
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUser) {
                                    i9 |= UPDATE_MASK_AVATAR;
                                    getMessagesStorage().clearUserPhotos(((TLRPC$TL_updateUser) tLRPC$Update).user_id);
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updateUserPhone) {
                                    i9 |= UPDATE_MASK_PHONE;
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else if (tLRPC$Update instanceof TL_stories$TL_updateReadStories) {
                                    TL_stories$TL_updateReadStories tL_stories$TL_updateReadStories = (TL_stories$TL_updateReadStories) tLRPC$Update;
                                    getStoriesController().markStoriesAsReadFromServer(DialogObject.getPeerDialogId(tL_stories$TL_updateReadStories.peer), tL_stories$TL_updateReadStories.max_id);
                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerSettings) {
                                    TLRPC$TL_updatePeerSettings tLRPC$TL_updatePeerSettings = (TLRPC$TL_updatePeerSettings) tLRPC$Update;
                                    if (arrayList17 == null) {
                                        arrayList17 = new ArrayList<>();
                                    }
                                    TLRPC$Peer tLRPC$Peer11 = tLRPC$TL_updatePeerSettings.peer;
                                    if ((tLRPC$Peer11 instanceof TLRPC$TL_peerUser) && (tLRPC$User = concurrentHashMap3.get(Long.valueOf(tLRPC$Peer11.user_id))) != null) {
                                        if (tLRPC$User.contact) {
                                            int indexOf = arrayList17.indexOf(Long.valueOf(-tLRPC$TL_updatePeerSettings.peer.user_id));
                                            if (indexOf != -1) {
                                                arrayList17.remove(indexOf);
                                            }
                                            if (!arrayList17.contains(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id))) {
                                                arrayList17.add(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id));
                                            }
                                        } else {
                                            int indexOf2 = arrayList17.indexOf(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id));
                                            if (indexOf2 != -1) {
                                                arrayList17.remove(indexOf2);
                                            }
                                            if (!arrayList17.contains(Long.valueOf(tLRPC$TL_updatePeerSettings.peer.user_id))) {
                                                arrayList17.add(Long.valueOf(-tLRPC$TL_updatePeerSettings.peer.user_id));
                                            }
                                        }
                                    }
                                    arrayList16 = arrayList18 == null ? new ArrayList() : arrayList18;
                                    arrayList16.add(tLRPC$Update);
                                } else {
                                    if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
                                        ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).message);
                                        if (decryptMessage == null || decryptMessage.isEmpty()) {
                                            longSparseArray16 = longSparseArray20;
                                            arrayList10 = arrayList17;
                                        } else {
                                            long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(tLRPC$TL_updateNewEncryptedMessage.message.chat_id);
                                            if (longSparseArray21 == null) {
                                                longSparseArray21 = new LongSparseArray();
                                            }
                                            ArrayList arrayList39 = (ArrayList) longSparseArray21.get(makeEncryptedDialogId);
                                            if (arrayList39 == null) {
                                                arrayList39 = new ArrayList();
                                                longSparseArray21.put(makeEncryptedDialogId, arrayList39);
                                            }
                                            int size6 = decryptMessage.size();
                                            int i17 = 0;
                                            while (i17 < size6) {
                                                LongSparseArray longSparseArray34 = longSparseArray20;
                                                TLRPC$Message tLRPC$Message3 = decryptMessage.get(i17);
                                                ImageLoader.saveMessageThumbs(tLRPC$Message3);
                                                if (arrayList24 == null) {
                                                    arrayList14 = arrayList17;
                                                    arrayList15 = new ArrayList<>();
                                                } else {
                                                    arrayList14 = arrayList17;
                                                    arrayList15 = arrayList24;
                                                }
                                                arrayList15.add(tLRPC$Message3);
                                                arrayList24 = arrayList15;
                                                LongSparseArray longSparseArray35 = longSparseArray21;
                                                boolean contains3 = this.createdDialogIds.contains(Long.valueOf(makeEncryptedDialogId));
                                                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message3, concurrentHashMap3, concurrentHashMap4, contains3, contains3);
                                                arrayList39.add(messageObject3);
                                                ArrayList arrayList40 = arrayList21 == null ? new ArrayList() : arrayList21;
                                                arrayList40.add(messageObject3);
                                                i17++;
                                                arrayList21 = arrayList40;
                                                longSparseArray20 = longSparseArray34;
                                                arrayList17 = arrayList14;
                                                longSparseArray21 = longSparseArray35;
                                            }
                                            longSparseArray16 = longSparseArray20;
                                            arrayList10 = arrayList17;
                                        }
                                    } else {
                                        longSparseArray16 = longSparseArray20;
                                        arrayList10 = arrayList17;
                                        if (tLRPC$Update instanceof TLRPC$TL_updateEncryptedChatTyping) {
                                            TLRPC$EncryptedChat encryptedChatDB = getEncryptedChatDB(((TLRPC$TL_updateEncryptedChatTyping) tLRPC$Update).chat_id, true);
                                            if (encryptedChatDB != null) {
                                                long makeEncryptedDialogId2 = DialogObject.makeEncryptedDialogId(tLRPC$TL_updateEncryptedChatTyping.chat_id);
                                                ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap7 = this.printingUsers.get(Long.valueOf(makeEncryptedDialogId2));
                                                if (concurrentHashMap7 == null) {
                                                    concurrentHashMap7 = new ConcurrentHashMap<>();
                                                    this.printingUsers.put(Long.valueOf(makeEncryptedDialogId2), concurrentHashMap7);
                                                }
                                                ArrayList<PrintingUser> arrayList41 = concurrentHashMap7.get(0);
                                                if (arrayList41 == null) {
                                                    arrayList41 = new ArrayList<>();
                                                    concurrentHashMap7.put(0, arrayList41);
                                                }
                                                int size7 = arrayList41.size();
                                                int i18 = 0;
                                                while (true) {
                                                    if (i18 >= size7) {
                                                        longSparseIntArray2 = longSparseIntArray6;
                                                        j6 = j10;
                                                        z8 = false;
                                                        break;
                                                    }
                                                    PrintingUser printingUser2 = arrayList41.get(i18);
                                                    longSparseIntArray2 = longSparseIntArray6;
                                                    int i19 = size7;
                                                    if (printingUser2.userId == encryptedChatDB.user_id) {
                                                        j6 = j10;
                                                        printingUser2.lastTime = j6;
                                                        printingUser2.action = new TLRPC$TL_sendMessageTypingAction();
                                                        z8 = true;
                                                        break;
                                                    }
                                                    i18++;
                                                    size7 = i19;
                                                    longSparseIntArray6 = longSparseIntArray2;
                                                }
                                                if (!z8) {
                                                    PrintingUser printingUser3 = new PrintingUser();
                                                    printingUser3.userId = encryptedChatDB.user_id;
                                                    printingUser3.lastTime = j6;
                                                    printingUser3.action = new TLRPC$TL_sendMessageTypingAction();
                                                    arrayList41.add(printingUser3);
                                                    z9 = true;
                                                }
                                                if (Math.abs(getConnectionsManager().getCurrentTime() - i) < 30) {
                                                    this.onlinePrivacy.put(Long.valueOf(encryptedChatDB.user_id), Integer.valueOf(i));
                                                }
                                            } else {
                                                longSparseIntArray2 = longSparseIntArray6;
                                                j6 = j10;
                                            }
                                            currentTimeMillis = j6;
                                            longSparseArray7 = longSparseArray29;
                                            sparseIntArray4 = sparseIntArray2;
                                        } else {
                                            longSparseIntArray2 = longSparseIntArray6;
                                            if (tLRPC$Update instanceof TLRPC$TL_updateEncryptedMessagesRead) {
                                                TLRPC$TL_updateEncryptedMessagesRead tLRPC$TL_updateEncryptedMessagesRead = (TLRPC$TL_updateEncryptedMessagesRead) tLRPC$Update;
                                                sparseIntArray4 = sparseIntArray2 == null ? new SparseIntArray() : sparseIntArray2;
                                                sparseIntArray4.put(tLRPC$TL_updateEncryptedMessagesRead.chat_id, tLRPC$TL_updateEncryptedMessagesRead.max_date);
                                                ArrayList arrayList42 = arrayList25;
                                                if (arrayList42 == null) {
                                                    arrayList42 = new ArrayList();
                                                }
                                                arrayList42.add(tLRPC$TL_updateEncryptedMessagesRead);
                                                currentTimeMillis = j10;
                                                arrayList25 = arrayList42;
                                                longSparseArray7 = longSparseArray29;
                                            } else {
                                                ArrayList arrayList43 = arrayList25;
                                                if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantAdd) {
                                                    TLRPC$TL_updateChatParticipantAdd tLRPC$TL_updateChatParticipantAdd = (TLRPC$TL_updateChatParticipantAdd) tLRPC$Update;
                                                    j10 = j10;
                                                    arrayList25 = arrayList43;
                                                    getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantAdd.chat_id, tLRPC$TL_updateChatParticipantAdd.user_id, 0, tLRPC$TL_updateChatParticipantAdd.inviter_id, tLRPC$TL_updateChatParticipantAdd.version);
                                                } else {
                                                    j10 = j10;
                                                    arrayList25 = arrayList43;
                                                    if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantDelete) {
                                                        TLRPC$TL_updateChatParticipantDelete tLRPC$TL_updateChatParticipantDelete = (TLRPC$TL_updateChatParticipantDelete) tLRPC$Update;
                                                        getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantDelete.chat_id, tLRPC$TL_updateChatParticipantDelete.user_id, 1, 0L, tLRPC$TL_updateChatParticipantDelete.version);
                                                    } else if ((tLRPC$Update instanceof TLRPC$TL_updateDcOptions) || (tLRPC$Update instanceof TLRPC$TL_updateConfig)) {
                                                        longSparseArray13 = longSparseArray21;
                                                        longSparseArray4 = longSparseArray22;
                                                        longSparseArray14 = longSparseArray28;
                                                        longSparseArray7 = longSparseArray29;
                                                        arrayList7 = arrayList23;
                                                        sparseIntArray3 = sparseIntArray2;
                                                        arrayList6 = arrayList10;
                                                        longSparseIntArray3 = longSparseIntArray10;
                                                        currentTimeMillis = j10;
                                                        longSparseIntArray4 = longSparseIntArray7;
                                                        longSparseArray9 = longSparseArray23;
                                                        arrayList8 = arrayList21;
                                                        longSparseArray10 = longSparseArray30;
                                                        longSparseArray11 = longSparseArray16;
                                                        hashMap2 = hashMap6;
                                                        hashMap3 = hashMap7;
                                                        getConnectionsManager().updateDcSettings();
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateEncryption) {
                                                        getSecretChatHelper().processUpdateEncryption((TLRPC$TL_updateEncryption) tLRPC$Update, concurrentHashMap3);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerBlocked) {
                                                        final TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked = (TLRPC$TL_updatePeerBlocked) tLRPC$Update;
                                                        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda403
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesController.this.lambda$processUpdateArray$365(tLRPC$TL_updatePeerBlocked);
                                                            }
                                                        });
                                                    } else {
                                                        if (tLRPC$Update instanceof TLRPC$TL_updateServiceNotification) {
                                                            final TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification = (TLRPC$TL_updateServiceNotification) tLRPC$Update;
                                                            if (tLRPC$TL_updateServiceNotification.popup && (str = tLRPC$TL_updateServiceNotification.message) != null && str.length() > 0) {
                                                                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda404
                                                                    @Override // java.lang.Runnable
                                                                    public final void run() {
                                                                        MessagesController.this.lambda$processUpdateArray$366(tLRPC$TL_updateServiceNotification);
                                                                    }
                                                                });
                                                            }
                                                            if ((tLRPC$TL_updateServiceNotification.flags & 2) != 0) {
                                                                TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                                                                tLRPC$TL_message.invert_media = tLRPC$TL_updateServiceNotification.invert_media;
                                                                int newMessageId = getUserConfig().getNewMessageId();
                                                                tLRPC$TL_message.id = newMessageId;
                                                                tLRPC$TL_message.local_id = newMessageId;
                                                                getUserConfig().saveConfig(false);
                                                                tLRPC$TL_message.unread = true;
                                                                tLRPC$TL_message.flags = LiteMode.FLAG_CHAT_BLUR;
                                                                int i20 = tLRPC$TL_updateServiceNotification.inbox_date;
                                                                if (i20 != 0) {
                                                                    tLRPC$TL_message.date = i20;
                                                                } else {
                                                                    tLRPC$TL_message.date = (int) (System.currentTimeMillis() / 1000);
                                                                }
                                                                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                                                                tLRPC$TL_message.from_id = tLRPC$TL_peerUser;
                                                                tLRPC$TL_peerUser.user_id = 777000L;
                                                                TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
                                                                tLRPC$TL_message.peer_id = tLRPC$TL_peerUser2;
                                                                tLRPC$TL_peerUser2.user_id = getUserConfig().getClientUserId();
                                                                tLRPC$TL_message.dialog_id = 777000L;
                                                                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$TL_updateServiceNotification.media;
                                                                if (tLRPC$MessageMedia != null) {
                                                                    tLRPC$TL_message.media = tLRPC$MessageMedia;
                                                                    tLRPC$TL_message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                                                                }
                                                                tLRPC$TL_message.message = tLRPC$TL_updateServiceNotification.message;
                                                                ArrayList<TLRPC$MessageEntity> arrayList44 = tLRPC$TL_updateServiceNotification.entities;
                                                                if (arrayList44 != null) {
                                                                    tLRPC$TL_message.entities = arrayList44;
                                                                    tLRPC$TL_message.flags |= 128;
                                                                }
                                                                ArrayList<TLRPC$Message> arrayList45 = arrayList24 == null ? new ArrayList<>() : arrayList24;
                                                                arrayList45.add(tLRPC$TL_message);
                                                                boolean contains4 = this.createdDialogIds.contains(Long.valueOf(tLRPC$TL_message.dialog_id));
                                                                MessageObject messageObject4 = new MessageObject(this.currentAccount, tLRPC$TL_message, concurrentHashMap3, concurrentHashMap4, contains4, contains4);
                                                                if (longSparseArray21 == null) {
                                                                    longSparseArray21 = new LongSparseArray();
                                                                }
                                                                ArrayList arrayList46 = (ArrayList) longSparseArray21.get(tLRPC$TL_message.dialog_id);
                                                                if (arrayList46 == null) {
                                                                    arrayList46 = new ArrayList();
                                                                    longSparseArray21.put(tLRPC$TL_message.dialog_id, arrayList46);
                                                                }
                                                                arrayList46.add(messageObject4);
                                                                ArrayList arrayList47 = arrayList21;
                                                                ArrayList arrayList48 = arrayList47 == null ? new ArrayList() : arrayList47;
                                                                arrayList48.add(messageObject4);
                                                                arrayList21 = arrayList48;
                                                                arrayList24 = arrayList45;
                                                            }
                                                        } else {
                                                            ArrayList arrayList49 = arrayList21;
                                                            if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
                                                                TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = (TLRPC$TL_updateFolderPeers) tLRPC$Update;
                                                                ArrayList arrayList50 = arrayList23 == null ? new ArrayList() : arrayList23;
                                                                arrayList50.add(tLRPC$TL_updateFolderPeers);
                                                                arrayList23 = arrayList50;
                                                                arrayList21 = arrayList49;
                                                            } else {
                                                                if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
                                                                    TLRPC$TL_updateWebPage tLRPC$TL_updateWebPage = (TLRPC$TL_updateWebPage) tLRPC$Update;
                                                                    longSparseArray17 = longSparseArray31;
                                                                    if (longSparseArray17 == null) {
                                                                        longSparseArray17 = new LongSparseArray<>();
                                                                    }
                                                                    TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_updateWebPage.webpage;
                                                                    longSparseArray17.put(tLRPC$WebPage.id, tLRPC$WebPage);
                                                                } else {
                                                                    longSparseArray17 = longSparseArray31;
                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
                                                                        TLRPC$TL_updateChannelWebPage tLRPC$TL_updateChannelWebPage = (TLRPC$TL_updateChannelWebPage) tLRPC$Update;
                                                                        if (longSparseArray17 == null) {
                                                                            longSparseArray17 = new LongSparseArray<>();
                                                                        }
                                                                        TLRPC$WebPage tLRPC$WebPage2 = tLRPC$TL_updateChannelWebPage.webpage;
                                                                        longSparseArray17.put(tLRPC$WebPage2.id, tLRPC$WebPage2);
                                                                    } else {
                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
                                                                            TLRPC$TL_updateChannelTooLong tLRPC$TL_updateChannelTooLong = (TLRPC$TL_updateChannelTooLong) tLRPC$Update;
                                                                            if (BuildVars.LOGS_ENABLED) {
                                                                                StringBuilder sb2 = new StringBuilder();
                                                                                sb2.append(tLRPC$Update);
                                                                                sb2.append(" channelId = ");
                                                                                longSparseArray19 = longSparseArray21;
                                                                                sb2.append(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                FileLog.d(sb2.toString());
                                                                            } else {
                                                                                longSparseArray19 = longSparseArray21;
                                                                            }
                                                                            int i21 = this.channelsPts.get(tLRPC$TL_updateChannelTooLong.channel_id, 0);
                                                                            if (i21 == 0) {
                                                                                i21 = getMessagesStorage().getChannelPtsSync(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                if (i21 == 0) {
                                                                                    TLRPC$Chat tLRPC$Chat4 = concurrentHashMap4.get(Long.valueOf(tLRPC$TL_updateChannelTooLong.channel_id));
                                                                                    if (tLRPC$Chat4 == null || tLRPC$Chat4.min) {
                                                                                        tLRPC$Chat4 = getChat(Long.valueOf(tLRPC$TL_updateChannelTooLong.channel_id));
                                                                                    }
                                                                                    if (tLRPC$Chat4 == null || tLRPC$Chat4.min) {
                                                                                        tLRPC$Chat4 = getMessagesStorage().getChatSync(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                        putChat(tLRPC$Chat4, true);
                                                                                    }
                                                                                    if (tLRPC$Chat4 != null && !tLRPC$Chat4.min) {
                                                                                        loadUnknownChannel(tLRPC$Chat4, 0L);
                                                                                    }
                                                                                } else {
                                                                                    this.channelsPts.put(tLRPC$TL_updateChannelTooLong.channel_id, i21);
                                                                                }
                                                                            }
                                                                            if (i21 != 0) {
                                                                                if ((tLRPC$TL_updateChannelTooLong.flags & 1) != 0) {
                                                                                    if (tLRPC$TL_updateChannelTooLong.pts > i21) {
                                                                                        getChannelDifference(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                    }
                                                                                } else {
                                                                                    getChannelDifference(tLRPC$TL_updateChannelTooLong.channel_id);
                                                                                }
                                                                            }
                                                                            longSparseArray4 = longSparseArray22;
                                                                            longSparseArray31 = longSparseArray17;
                                                                            longSparseArray6 = longSparseArray28;
                                                                            longSparseArray7 = longSparseArray29;
                                                                            arrayList7 = arrayList23;
                                                                            sparseIntArray3 = sparseIntArray2;
                                                                            longSparseArray11 = longSparseArray16;
                                                                            arrayList6 = arrayList10;
                                                                            longSparseIntArray3 = longSparseIntArray10;
                                                                            longSparseIntArray4 = longSparseIntArray7;
                                                                            arrayList8 = arrayList49;
                                                                            longSparseArray8 = longSparseArray19;
                                                                            currentTimeMillis = j10;
                                                                            longSparseArray9 = longSparseArray23;
                                                                        } else {
                                                                            LongSparseArray longSparseArray36 = longSparseArray21;
                                                                            if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
                                                                                TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = (TLRPC$TL_updateReadChannelInbox) tLRPC$Update;
                                                                                long j22 = -tLRPC$TL_updateReadChannelInbox.channel_id;
                                                                                Integer num4 = this.dialogs_read_inbox_max.get(Long.valueOf(j22));
                                                                                if (num4 == null) {
                                                                                    num4 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j22));
                                                                                }
                                                                                if (longSparseIntArray7 == null) {
                                                                                    longSparseIntArray7 = new LongSparseIntArray();
                                                                                }
                                                                                if (longSparseIntArray9 == null) {
                                                                                    longSparseIntArray9 = new LongSparseIntArray();
                                                                                }
                                                                                LongSparseIntArray longSparseIntArray12 = longSparseIntArray9;
                                                                                longSparseIntArray7.put(j22, tLRPC$TL_updateReadChannelInbox.max_id);
                                                                                longSparseIntArray12.put(j22, tLRPC$TL_updateReadChannelInbox.still_unread_count);
                                                                                this.dialogs_read_inbox_max.put(Long.valueOf(j22), Integer.valueOf(Math.max(num4.intValue(), tLRPC$TL_updateReadChannelInbox.max_id)));
                                                                                FileLog.d("TL_updateReadChannelInbox " + j22 + "  new unread = " + tLRPC$TL_updateReadChannelInbox.still_unread_count + " max id = " + tLRPC$TL_updateReadChannelInbox.max_id + " from get diff " + z);
                                                                                longSparseArray23 = longSparseArray23;
                                                                                arrayList21 = arrayList49;
                                                                                longSparseArray21 = longSparseArray36;
                                                                                longSparseArray31 = longSparseArray17;
                                                                                longSparseIntArray9 = longSparseIntArray12;
                                                                            } else {
                                                                                LongSparseArray longSparseArray37 = longSparseArray23;
                                                                                if ((tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) || (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics)) {
                                                                                    longSparseArray4 = longSparseArray22;
                                                                                    longSparseArray13 = longSparseArray36;
                                                                                    longSparseArray31 = longSparseArray17;
                                                                                    longSparseArray14 = longSparseArray28;
                                                                                    longSparseArray7 = longSparseArray29;
                                                                                    arrayList7 = arrayList23;
                                                                                    sparseIntArray3 = sparseIntArray2;
                                                                                    longSparseArray11 = longSparseArray16;
                                                                                    arrayList6 = arrayList10;
                                                                                    longSparseIntArray3 = longSparseIntArray10;
                                                                                    hashMap4 = hashMap7;
                                                                                    longSparseIntArray4 = longSparseIntArray7;
                                                                                    arrayList8 = arrayList49;
                                                                                    hashMap5 = hashMap6;
                                                                                    currentTimeMillis = j10;
                                                                                    longSparseArray9 = longSparseArray37;
                                                                                    longSparseArray10 = longSparseArray30;
                                                                                    arrayList11 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                    arrayList11.add(tLRPC$Update);
                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
                                                                                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = (TLRPC$TL_updateReadChannelOutbox) tLRPC$Update;
                                                                                    if (BuildVars.LOGS_ENABLED) {
                                                                                        StringBuilder sb3 = new StringBuilder();
                                                                                        sb3.append(tLRPC$Update);
                                                                                        sb3.append(" channelId = ");
                                                                                        longSparseArray18 = longSparseArray37;
                                                                                        sb3.append(tLRPC$TL_updateReadChannelOutbox.channel_id);
                                                                                        FileLog.d(sb3.toString());
                                                                                    } else {
                                                                                        longSparseArray18 = longSparseArray37;
                                                                                    }
                                                                                    longSparseIntArray6 = longSparseIntArray2 == null ? new LongSparseIntArray() : longSparseIntArray2;
                                                                                    long j23 = -tLRPC$TL_updateReadChannelOutbox.channel_id;
                                                                                    longSparseIntArray6.put(j23, tLRPC$TL_updateReadChannelOutbox.max_id);
                                                                                    Integer num5 = this.dialogs_read_outbox_max.get(Long.valueOf(j23));
                                                                                    if (num5 == null) {
                                                                                        num5 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j23));
                                                                                    }
                                                                                    this.dialogs_read_outbox_max.put(Long.valueOf(j23), Integer.valueOf(Math.max(num5.intValue(), tLRPC$TL_updateReadChannelOutbox.max_id)));
                                                                                    longSparseArray23 = longSparseArray18;
                                                                                    arrayList21 = arrayList49;
                                                                                    longSparseArray21 = longSparseArray36;
                                                                                    longSparseArray31 = longSparseArray17;
                                                                                } else {
                                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
                                                                                        TLRPC$TL_updateDeleteChannelMessages tLRPC$TL_updateDeleteChannelMessages = (TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update;
                                                                                        if (BuildVars.LOGS_ENABLED) {
                                                                                            FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateDeleteChannelMessages.channel_id);
                                                                                        }
                                                                                        if (longSparseArray22 == null) {
                                                                                            longSparseArray22 = new LongSparseArray();
                                                                                        }
                                                                                        long j24 = -tLRPC$TL_updateDeleteChannelMessages.channel_id;
                                                                                        ArrayList arrayList51 = (ArrayList) longSparseArray22.get(j24);
                                                                                        if (arrayList51 == null) {
                                                                                            arrayList51 = new ArrayList();
                                                                                            longSparseArray22.put(j24, arrayList51);
                                                                                        }
                                                                                        arrayList51.addAll(tLRPC$TL_updateDeleteChannelMessages.messages);
                                                                                    } else {
                                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
                                                                                            if (BuildVars.LOGS_ENABLED) {
                                                                                                FileLog.d(tLRPC$Update + " channelId = " + ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id);
                                                                                            }
                                                                                            arrayList13 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                            arrayList13.add(tLRPC$Update);
                                                                                        } else if ((tLRPC$Update instanceof TLRPC$TL_updateChat) || (tLRPC$Update instanceof TLRPC$TL_updateSentStoryReaction)) {
                                                                                            longSparseArray4 = longSparseArray22;
                                                                                            longSparseArray13 = longSparseArray36;
                                                                                            longSparseArray31 = longSparseArray17;
                                                                                            longSparseArray14 = longSparseArray28;
                                                                                            longSparseArray7 = longSparseArray29;
                                                                                            arrayList7 = arrayList23;
                                                                                            sparseIntArray3 = sparseIntArray2;
                                                                                            longSparseArray11 = longSparseArray16;
                                                                                            arrayList6 = arrayList10;
                                                                                            longSparseIntArray3 = longSparseIntArray10;
                                                                                            hashMap4 = hashMap7;
                                                                                            longSparseIntArray4 = longSparseIntArray7;
                                                                                            arrayList8 = arrayList49;
                                                                                            hashMap5 = hashMap6;
                                                                                            currentTimeMillis = j10;
                                                                                            longSparseArray9 = longSparseArray37;
                                                                                            longSparseArray10 = longSparseArray30;
                                                                                            arrayList11 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                            arrayList11.add(tLRPC$Update);
                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
                                                                                            TLRPC$TL_updateChannelMessageViews tLRPC$TL_updateChannelMessageViews = (TLRPC$TL_updateChannelMessageViews) tLRPC$Update;
                                                                                            if (BuildVars.LOGS_ENABLED) {
                                                                                                FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateChannelMessageViews.channel_id);
                                                                                            }
                                                                                            LongSparseArray<SparseIntArray> longSparseArray38 = longSparseArray30 == null ? new LongSparseArray<>() : longSparseArray30;
                                                                                            long j25 = -tLRPC$TL_updateChannelMessageViews.channel_id;
                                                                                            SparseIntArray sparseIntArray5 = longSparseArray38.get(j25);
                                                                                            if (sparseIntArray5 == null) {
                                                                                                sparseIntArray5 = new SparseIntArray();
                                                                                                longSparseArray38.put(j25, sparseIntArray5);
                                                                                            }
                                                                                            sparseIntArray5.put(tLRPC$TL_updateChannelMessageViews.id, tLRPC$TL_updateChannelMessageViews.views);
                                                                                            longSparseArray30 = longSparseArray38;
                                                                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
                                                                                            TLRPC$TL_updateChannelMessageForwards tLRPC$TL_updateChannelMessageForwards = (TLRPC$TL_updateChannelMessageForwards) tLRPC$Update;
                                                                                            if (BuildVars.LOGS_ENABLED) {
                                                                                                FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updateChannelMessageForwards.channel_id);
                                                                                            }
                                                                                            LongSparseArray<SparseIntArray> longSparseArray39 = longSparseArray29 == null ? new LongSparseArray<>() : longSparseArray29;
                                                                                            long j26 = -tLRPC$TL_updateChannelMessageForwards.channel_id;
                                                                                            SparseIntArray sparseIntArray6 = longSparseArray39.get(j26);
                                                                                            if (sparseIntArray6 == null) {
                                                                                                sparseIntArray6 = new SparseIntArray();
                                                                                                longSparseArray39.put(j26, sparseIntArray6);
                                                                                            }
                                                                                            sparseIntArray6.put(tLRPC$TL_updateChannelMessageForwards.id, tLRPC$TL_updateChannelMessageForwards.forwards);
                                                                                            longSparseArray7 = longSparseArray39;
                                                                                            longSparseArray23 = longSparseArray37;
                                                                                            arrayList21 = arrayList49;
                                                                                            longSparseArray21 = longSparseArray36;
                                                                                            longSparseArray31 = longSparseArray17;
                                                                                            sparseIntArray4 = sparseIntArray2;
                                                                                            longSparseArray20 = longSparseArray16;
                                                                                            arrayList17 = arrayList10;
                                                                                            currentTimeMillis = j10;
                                                                                            longSparseArray24 = longSparseArray5;
                                                                                            longSparseIntArray6 = longSparseIntArray2;
                                                                                            i8 = i2 + 1;
                                                                                            size3 = i11;
                                                                                            longSparseArray29 = longSparseArray7;
                                                                                        } else {
                                                                                            if (tLRPC$Update instanceof TLRPC$TL_updateChatParticipantAdmin) {
                                                                                                TLRPC$TL_updateChatParticipantAdmin tLRPC$TL_updateChatParticipantAdmin = (TLRPC$TL_updateChatParticipantAdmin) tLRPC$Update;
                                                                                                getMessagesStorage().updateChatInfo(tLRPC$TL_updateChatParticipantAdmin.chat_id, tLRPC$TL_updateChatParticipantAdmin.user_id, 2, tLRPC$TL_updateChatParticipantAdmin.is_admin ? 1L : 0L, tLRPC$TL_updateChatParticipantAdmin.version);
                                                                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateChatDefaultBannedRights) {
                                                                                                TLRPC$TL_updateChatDefaultBannedRights tLRPC$TL_updateChatDefaultBannedRights = (TLRPC$TL_updateChatDefaultBannedRights) tLRPC$Update;
                                                                                                TLRPC$Peer tLRPC$Peer12 = tLRPC$TL_updateChatDefaultBannedRights.peer;
                                                                                                long j27 = tLRPC$Peer12.channel_id;
                                                                                                if (j27 == 0) {
                                                                                                    j27 = tLRPC$Peer12.chat_id;
                                                                                                }
                                                                                                getMessagesStorage().updateChatDefaultBannedRights(j27, tLRPC$TL_updateChatDefaultBannedRights.default_banned_rights, tLRPC$TL_updateChatDefaultBannedRights.version);
                                                                                                arrayList13 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                arrayList13.add(tLRPC$Update);
                                                                                            } else {
                                                                                                boolean z12 = tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage;
                                                                                                if (z12 || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage)) {
                                                                                                    longSparseArray4 = longSparseArray22;
                                                                                                    longSparseArray13 = longSparseArray36;
                                                                                                    longSparseArray31 = longSparseArray17;
                                                                                                    longSparseArray14 = longSparseArray28;
                                                                                                    longSparseArray7 = longSparseArray29;
                                                                                                    arrayList7 = arrayList23;
                                                                                                    sparseIntArray3 = sparseIntArray2;
                                                                                                    longSparseArray11 = longSparseArray16;
                                                                                                    longSparseIntArray3 = longSparseIntArray10;
                                                                                                    hashMap4 = hashMap7;
                                                                                                    longSparseIntArray4 = longSparseIntArray7;
                                                                                                    arrayList8 = arrayList49;
                                                                                                    hashMap5 = hashMap6;
                                                                                                    currentTimeMillis = j10;
                                                                                                    longSparseArray9 = longSparseArray37;
                                                                                                    longSparseArray10 = longSparseArray30;
                                                                                                    if (z12) {
                                                                                                        tLRPC$Message2 = ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message;
                                                                                                        TLRPC$Chat tLRPC$Chat5 = concurrentHashMap4.get(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                                                                                        if (tLRPC$Chat5 == null) {
                                                                                                            tLRPC$Chat5 = getChat(Long.valueOf(tLRPC$Message2.peer_id.channel_id));
                                                                                                        }
                                                                                                        if (tLRPC$Chat5 == null) {
                                                                                                            z6 = true;
                                                                                                            putChat(getMessagesStorage().getChatSync(tLRPC$Message2.peer_id.channel_id), true);
                                                                                                        } else {
                                                                                                            z6 = true;
                                                                                                        }
                                                                                                    } else {
                                                                                                        z6 = true;
                                                                                                        tLRPC$Message2 = ((TLRPC$TL_updateEditMessage) tLRPC$Update).message;
                                                                                                        if (tLRPC$Message2.dialog_id == clientUserId) {
                                                                                                            tLRPC$Message2.unread = false;
                                                                                                            tLRPC$Message2.media_unread = false;
                                                                                                            tLRPC$Message2.out = true;
                                                                                                        }
                                                                                                    }
                                                                                                    if (!tLRPC$Message2.out) {
                                                                                                        long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Message2.from_id);
                                                                                                        if (peerDialogId == clientUserId) {
                                                                                                            tLRPC$Message2.out = z6;
                                                                                                        } else {
                                                                                                            TLRPC$TL_channels_sendAsPeers sendAsPeers = getSendAsPeers(MessageObject.getDialogId(tLRPC$Message2));
                                                                                                            if (sendAsPeers != null) {
                                                                                                                Iterator<TLRPC$TL_sendAsPeer> it2 = sendAsPeers.peers.iterator();
                                                                                                                while (true) {
                                                                                                                    if (!it2.hasNext()) {
                                                                                                                        break;
                                                                                                                    }
                                                                                                                    TLRPC$TL_sendAsPeer next2 = it2.next();
                                                                                                                    if (next2 != null && peerDialogId == DialogObject.getPeerDialogId(next2.peer)) {
                                                                                                                        tLRPC$Message2.out = true;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    if (!z) {
                                                                                                        int size8 = tLRPC$Message2.entities.size();
                                                                                                        for (int i22 = 0; i22 < size8; i22++) {
                                                                                                            TLRPC$MessageEntity tLRPC$MessageEntity2 = tLRPC$Message2.entities.get(i22);
                                                                                                            if (tLRPC$MessageEntity2 instanceof TLRPC$TL_messageEntityMentionName) {
                                                                                                                long j28 = ((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity2).user_id;
                                                                                                                TLRPC$User tLRPC$User5 = concurrentHashMap3.get(Long.valueOf(j28));
                                                                                                                if (tLRPC$User5 == null || tLRPC$User5.min) {
                                                                                                                    tLRPC$User5 = getUser(Long.valueOf(j28));
                                                                                                                }
                                                                                                                if (tLRPC$User5 == null || tLRPC$User5.min) {
                                                                                                                    tLRPC$User5 = getMessagesStorage().getUserSync(j28);
                                                                                                                    if (tLRPC$User5 == null || !tLRPC$User5.min) {
                                                                                                                        z7 = true;
                                                                                                                    } else {
                                                                                                                        z7 = true;
                                                                                                                        tLRPC$User5 = null;
                                                                                                                    }
                                                                                                                    putUser(tLRPC$User5, z7);
                                                                                                                }
                                                                                                                if (tLRPC$User5 == null) {
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    MessageObject.getDialogId(tLRPC$Message2);
                                                                                                    ConcurrentHashMap<Long, Integer> concurrentHashMap8 = tLRPC$Message2.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                                                                                                    Integer num6 = concurrentHashMap8.get(Long.valueOf(tLRPC$Message2.dialog_id));
                                                                                                    if (num6 == null) {
                                                                                                        num6 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message2.out, tLRPC$Message2.dialog_id));
                                                                                                        concurrentHashMap8.put(Long.valueOf(tLRPC$Message2.dialog_id), num6);
                                                                                                    }
                                                                                                    tLRPC$Message2.unread = num6.intValue() < tLRPC$Message2.id;
                                                                                                    if (tLRPC$Message2.dialog_id == clientUserId) {
                                                                                                        tLRPC$Message2.out = true;
                                                                                                        tLRPC$Message2.unread = false;
                                                                                                        tLRPC$Message2.media_unread = false;
                                                                                                    }
                                                                                                    if (tLRPC$Message2.out && tLRPC$Message2.message == null) {
                                                                                                        tLRPC$Message2.message = "";
                                                                                                        tLRPC$Message2.attachPath = "";
                                                                                                    }
                                                                                                    ImageLoader.saveMessageThumbs(tLRPC$Message2);
                                                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda405
                                                                                                        @Override // java.lang.Runnable
                                                                                                        public final void run() {
                                                                                                            MessagesController.this.lambda$processUpdateArray$367(tLRPC$Message2);
                                                                                                        }
                                                                                                    });
                                                                                                    boolean contains5 = this.createdDialogIds.contains(Long.valueOf(tLRPC$Message2.dialog_id));
                                                                                                    MessageObject messageObject5 = new MessageObject(this.currentAccount, tLRPC$Message2, concurrentHashMap3, concurrentHashMap4, contains5, contains5);
                                                                                                    getTranslateController().invalidateTranslation(messageObject5);
                                                                                                    if (longSparseArray14 == null) {
                                                                                                        longSparseArray14 = new LongSparseArray();
                                                                                                    }
                                                                                                    ArrayList arrayList52 = (ArrayList) longSparseArray14.get(tLRPC$Message2.dialog_id);
                                                                                                    if (arrayList52 == null) {
                                                                                                        arrayList52 = new ArrayList();
                                                                                                        longSparseArray14.put(tLRPC$Message2.dialog_id, arrayList52);
                                                                                                    }
                                                                                                    arrayList52.add(messageObject5);
                                                                                                    arrayList17 = arrayList10;
                                                                                                    hashMap6 = hashMap5;
                                                                                                    hashMap7 = hashMap4;
                                                                                                    longSparseArray21 = longSparseArray13;
                                                                                                    longSparseArray20 = longSparseArray11;
                                                                                                    arrayList21 = arrayList8;
                                                                                                    longSparseIntArray7 = longSparseIntArray4;
                                                                                                    longSparseArray30 = longSparseArray10;
                                                                                                    longSparseArray23 = longSparseArray9;
                                                                                                    longSparseIntArray6 = longSparseIntArray2;
                                                                                                    sparseIntArray4 = sparseIntArray3;
                                                                                                    longSparseIntArray10 = longSparseIntArray3;
                                                                                                    longSparseArray22 = longSparseArray4;
                                                                                                    arrayList23 = arrayList7;
                                                                                                    longSparseArray28 = longSparseArray14;
                                                                                                    longSparseArray24 = longSparseArray5;
                                                                                                    i8 = i2 + 1;
                                                                                                    size3 = i11;
                                                                                                    longSparseArray29 = longSparseArray7;
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
                                                                                                    TLRPC$TL_updatePinnedChannelMessages tLRPC$TL_updatePinnedChannelMessages = (TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update;
                                                                                                    if (BuildVars.LOGS_ENABLED) {
                                                                                                        FileLog.d(tLRPC$Update + " channelId = " + tLRPC$TL_updatePinnedChannelMessages.channel_id);
                                                                                                    }
                                                                                                    getMessagesStorage().updatePinnedMessages(-tLRPC$TL_updatePinnedChannelMessages.channel_id, tLRPC$TL_updatePinnedChannelMessages.messages, tLRPC$TL_updatePinnedChannelMessages.pinned, -1, 0, false, null);
                                                                                                } else if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
                                                                                                    TLRPC$TL_updatePinnedMessages tLRPC$TL_updatePinnedMessages = (TLRPC$TL_updatePinnedMessages) tLRPC$Update;
                                                                                                    getMessagesStorage().updatePinnedMessages(MessageObject.getPeerId(tLRPC$TL_updatePinnedMessages.peer), tLRPC$TL_updatePinnedMessages.messages, tLRPC$TL_updatePinnedMessages.pinned, -1, 0, false, null);
                                                                                                } else if (!(tLRPC$Update instanceof TLRPC$TL_updateGroupCallConnection)) {
                                                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateLangPack) {
                                                                                                        final TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack = (TLRPC$TL_updateLangPack) tLRPC$Update;
                                                                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda406
                                                                                                            @Override // java.lang.Runnable
                                                                                                            public final void run() {
                                                                                                                MessagesController.this.lambda$processUpdateArray$368(tLRPC$TL_updateLangPack);
                                                                                                            }
                                                                                                        });
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateLangPackTooLong) {
                                                                                                        LocaleController.getInstance().reloadCurrentRemoteLocale(this.currentAccount, ((TLRPC$TL_updateLangPackTooLong) tLRPC$Update).lang_code, false, null);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                                                                                                        arrayList13 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                        arrayList13.add(tLRPC$Update);
                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateContactsReset) {
                                                                                                        arrayList13 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                        arrayList13.add(tLRPC$Update);
                                                                                                    } else {
                                                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
                                                                                                            TLRPC$TL_updateChannelAvailableMessages tLRPC$TL_updateChannelAvailableMessages = (TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update;
                                                                                                            longSparseIntArray5 = longSparseIntArray10;
                                                                                                            if (longSparseIntArray5 == null) {
                                                                                                                longSparseIntArray5 = new LongSparseIntArray();
                                                                                                            }
                                                                                                            long j29 = -tLRPC$TL_updateChannelAvailableMessages.channel_id;
                                                                                                            int i23 = longSparseIntArray5.get(j29, 0);
                                                                                                            if (i23 == 0 || i23 < tLRPC$TL_updateChannelAvailableMessages.available_min_id) {
                                                                                                                longSparseIntArray5.put(j29, tLRPC$TL_updateChannelAvailableMessages.available_min_id);
                                                                                                            }
                                                                                                        } else {
                                                                                                            longSparseIntArray5 = longSparseIntArray10;
                                                                                                            if (tLRPC$Update instanceof TLRPC$TL_updateDialogUnreadMark) {
                                                                                                                ArrayList arrayList53 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                arrayList53.add(tLRPC$Update);
                                                                                                                arrayList18 = arrayList53;
                                                                                                            } else if (tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) {
                                                                                                                TLRPC$TL_updateMessagePoll tLRPC$TL_updateMessagePoll = (TLRPC$TL_updateMessagePoll) tLRPC$Update;
                                                                                                                if (Math.abs(SystemClock.elapsedRealtime() - getSendMessagesHelper().getVoteSendTime(tLRPC$TL_updateMessagePoll.poll_id)) < 600) {
                                                                                                                    longSparseArray4 = longSparseArray22;
                                                                                                                    longSparseIntArray4 = longSparseIntArray7;
                                                                                                                    longSparseArray31 = longSparseArray17;
                                                                                                                    longSparseIntArray3 = longSparseIntArray5;
                                                                                                                    longSparseArray6 = longSparseArray28;
                                                                                                                    longSparseArray7 = longSparseArray29;
                                                                                                                    arrayList7 = arrayList23;
                                                                                                                    sparseIntArray3 = sparseIntArray2;
                                                                                                                    longSparseArray11 = longSparseArray16;
                                                                                                                    arrayList6 = arrayList10;
                                                                                                                    arrayList8 = arrayList49;
                                                                                                                    longSparseArray8 = longSparseArray36;
                                                                                                                    currentTimeMillis = j10;
                                                                                                                    longSparseArray9 = longSparseArray37;
                                                                                                                } else {
                                                                                                                    getMessagesStorage().updateMessagePollResults(tLRPC$TL_updateMessagePoll.poll_id, tLRPC$TL_updateMessagePoll.poll, tLRPC$TL_updateMessagePoll.results);
                                                                                                                    ArrayList arrayList54 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                    arrayList54.add(tLRPC$Update);
                                                                                                                    arrayList18 = arrayList54;
                                                                                                                    arrayList21 = arrayList49;
                                                                                                                    longSparseArray21 = longSparseArray36;
                                                                                                                    longSparseArray31 = longSparseArray17;
                                                                                                                    longSparseIntArray10 = longSparseIntArray5;
                                                                                                                    longSparseArray23 = longSparseArray37;
                                                                                                                }
                                                                                                            } else {
                                                                                                                if (tLRPC$Update instanceof TLRPC$TL_updateMessageReactions) {
                                                                                                                    TLRPC$TL_updateMessageReactions tLRPC$TL_updateMessageReactions = (TLRPC$TL_updateMessageReactions) tLRPC$Update;
                                                                                                                    long peerId2 = MessageObject.getPeerId(tLRPC$TL_updateMessageReactions.peer);
                                                                                                                    LongSparseArray longSparseArray40 = longSparseArray22;
                                                                                                                    getMessagesStorage().updateMessageReactions(peerId2, tLRPC$TL_updateMessageReactions.msg_id, tLRPC$TL_updateMessageReactions.reactions);
                                                                                                                    if (tLRPC$TL_updateMessageReactions.updateUnreadState) {
                                                                                                                        SparseBooleanArray sparseBooleanArray = new SparseBooleanArray();
                                                                                                                        sparseBooleanArray.put(tLRPC$TL_updateMessageReactions.msg_id, MessageObject.hasUnreadReactions(tLRPC$TL_updateMessageReactions.reactions));
                                                                                                                        if (BuildVars.DEBUG_PRIVATE_VERSION) {
                                                                                                                            FileLog.d("check reactions for " + peerId2 + " " + tLRPC$TL_updateMessageReactions.top_msg_id);
                                                                                                                        }
                                                                                                                        longSparseArray11 = longSparseArray16;
                                                                                                                        longSparseIntArray4 = longSparseIntArray7;
                                                                                                                        longSparseArray31 = longSparseArray17;
                                                                                                                        longSparseArray14 = longSparseArray28;
                                                                                                                        arrayList8 = arrayList49;
                                                                                                                        longSparseArray10 = longSparseArray30;
                                                                                                                        currentTimeMillis = j10;
                                                                                                                        longSparseIntArray3 = longSparseIntArray5;
                                                                                                                        longSparseArray9 = longSparseArray37;
                                                                                                                        longSparseArray13 = longSparseArray36;
                                                                                                                        arrayList7 = arrayList23;
                                                                                                                        sparseIntArray3 = sparseIntArray2;
                                                                                                                        arrayList12 = arrayList10;
                                                                                                                        longSparseArray4 = longSparseArray40;
                                                                                                                        longSparseArray7 = longSparseArray29;
                                                                                                                        checkUnreadReactions(peerId2, tLRPC$TL_updateMessageReactions.top_msg_id, sparseBooleanArray);
                                                                                                                    } else {
                                                                                                                        longSparseIntArray4 = longSparseIntArray7;
                                                                                                                        longSparseArray31 = longSparseArray17;
                                                                                                                        longSparseIntArray3 = longSparseIntArray5;
                                                                                                                        longSparseArray4 = longSparseArray40;
                                                                                                                        longSparseArray14 = longSparseArray28;
                                                                                                                        longSparseArray7 = longSparseArray29;
                                                                                                                        arrayList7 = arrayList23;
                                                                                                                        sparseIntArray3 = sparseIntArray2;
                                                                                                                        longSparseArray11 = longSparseArray16;
                                                                                                                        arrayList12 = arrayList10;
                                                                                                                        arrayList8 = arrayList49;
                                                                                                                        longSparseArray13 = longSparseArray36;
                                                                                                                        currentTimeMillis = j10;
                                                                                                                        longSparseArray9 = longSparseArray37;
                                                                                                                        longSparseArray10 = longSparseArray30;
                                                                                                                    }
                                                                                                                    ArrayList arrayList55 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                    arrayList55.add(tLRPC$Update);
                                                                                                                    arrayList17 = arrayList12;
                                                                                                                    arrayList18 = arrayList55;
                                                                                                                } else {
                                                                                                                    longSparseArray4 = longSparseArray22;
                                                                                                                    longSparseIntArray4 = longSparseIntArray7;
                                                                                                                    longSparseArray31 = longSparseArray17;
                                                                                                                    longSparseIntArray3 = longSparseIntArray5;
                                                                                                                    longSparseArray14 = longSparseArray28;
                                                                                                                    longSparseArray7 = longSparseArray29;
                                                                                                                    arrayList7 = arrayList23;
                                                                                                                    sparseIntArray3 = sparseIntArray2;
                                                                                                                    longSparseArray11 = longSparseArray16;
                                                                                                                    arrayList6 = arrayList10;
                                                                                                                    arrayList8 = arrayList49;
                                                                                                                    longSparseArray13 = longSparseArray36;
                                                                                                                    currentTimeMillis = j10;
                                                                                                                    longSparseArray9 = longSparseArray37;
                                                                                                                    longSparseArray10 = longSparseArray30;
                                                                                                                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageExtendedMedia) {
                                                                                                                        TLRPC$TL_updateMessageExtendedMedia tLRPC$TL_updateMessageExtendedMedia = (TLRPC$TL_updateMessageExtendedMedia) tLRPC$Update;
                                                                                                                        if (!tLRPC$TL_updateMessageExtendedMedia.extended_media.isEmpty()) {
                                                                                                                            TLRPC$Message message = getMessagesStorage().getMessage(DialogObject.getPeerDialogId(tLRPC$TL_updateMessageExtendedMedia.peer), tLRPC$TL_updateMessageExtendedMedia.msg_id);
                                                                                                                            if (message != null) {
                                                                                                                                message.media.extended_media = new ArrayList<>(tLRPC$TL_updateMessageExtendedMedia.extended_media);
                                                                                                                                ArrayList<TLRPC$Message> arrayList56 = arrayList24 == null ? new ArrayList<>() : arrayList24;
                                                                                                                                arrayList56.add(message);
                                                                                                                                arrayList24 = arrayList56;
                                                                                                                            }
                                                                                                                            ArrayList arrayList57 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                            arrayList57.add(tLRPC$Update);
                                                                                                                            arrayList18 = arrayList57;
                                                                                                                        }
                                                                                                                        arrayList17 = arrayList6;
                                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGeoLiveViewed) {
                                                                                                                        getLocationController().setNewLocationEndWatchTime();
                                                                                                                        longSparseArray6 = longSparseArray14;
                                                                                                                        longSparseArray8 = longSparseArray13;
                                                                                                                        arrayList17 = arrayList6;
                                                                                                                        longSparseArray21 = longSparseArray8;
                                                                                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
                                                                                                                        TLRPC$TL_updateReadChannelDiscussionInbox tLRPC$TL_updateReadChannelDiscussionInbox = (TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update;
                                                                                                                        ArrayList arrayList58 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                        HashMap hashMap8 = hashMap6;
                                                                                                                        if (hashMap8 == null) {
                                                                                                                            hashMap8 = new HashMap();
                                                                                                                        }
                                                                                                                        MessagesStorage.TopicKey of = MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionInbox.channel_id, tLRPC$TL_updateReadChannelDiscussionInbox.top_msg_id);
                                                                                                                        hashMap8.put(of, Integer.valueOf(Math.max(((Integer) Utilities.getOrDefault(hashMap8, of, 0)).intValue(), tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id)));
                                                                                                                        arrayList58.add(tLRPC$Update);
                                                                                                                        arrayList17 = arrayList6;
                                                                                                                        arrayList18 = arrayList58;
                                                                                                                        hashMap6 = hashMap8;
                                                                                                                    } else {
                                                                                                                        HashMap hashMap9 = hashMap6;
                                                                                                                        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
                                                                                                                            TLRPC$TL_updateReadChannelDiscussionOutbox tLRPC$TL_updateReadChannelDiscussionOutbox = (TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update;
                                                                                                                            hashMap4 = hashMap7;
                                                                                                                            if (hashMap4 == null) {
                                                                                                                                hashMap4 = new HashMap<>();
                                                                                                                            }
                                                                                                                            hashMap5 = hashMap9;
                                                                                                                            hashMap4.put(MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id, tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), Integer.valueOf(Math.max(((Integer) Utilities.getOrDefault(hashMap4, MessagesStorage.TopicKey.of(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id, tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), 0)).intValue(), tLRPC$TL_updateReadChannelDiscussionOutbox.read_max_id)));
                                                                                                                            arrayList11 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                            arrayList11.add(tLRPC$Update);
                                                                                                                        } else {
                                                                                                                            hashMap5 = hashMap9;
                                                                                                                            hashMap4 = hashMap7;
                                                                                                                            arrayList11 = arrayList18 == null ? new ArrayList() : arrayList18;
                                                                                                                            arrayList11.add(tLRPC$Update);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                longSparseArray21 = longSparseArray13;
                                                                                                                longSparseArray20 = longSparseArray11;
                                                                                                                arrayList21 = arrayList8;
                                                                                                                longSparseIntArray7 = longSparseIntArray4;
                                                                                                                longSparseArray30 = longSparseArray10;
                                                                                                                longSparseArray23 = longSparseArray9;
                                                                                                                longSparseIntArray6 = longSparseIntArray2;
                                                                                                                sparseIntArray4 = sparseIntArray3;
                                                                                                                longSparseIntArray10 = longSparseIntArray3;
                                                                                                                longSparseArray22 = longSparseArray4;
                                                                                                                arrayList23 = arrayList7;
                                                                                                                longSparseArray28 = longSparseArray14;
                                                                                                                longSparseArray24 = longSparseArray5;
                                                                                                                i8 = i2 + 1;
                                                                                                                size3 = i11;
                                                                                                                longSparseArray29 = longSparseArray7;
                                                                                                            }
                                                                                                        }
                                                                                                        longSparseIntArray10 = longSparseIntArray5;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            longSparseArray4 = longSparseArray22;
                                                                                            longSparseArray31 = longSparseArray17;
                                                                                            longSparseArray6 = longSparseArray28;
                                                                                            longSparseArray7 = longSparseArray29;
                                                                                            arrayList7 = arrayList23;
                                                                                            sparseIntArray3 = sparseIntArray2;
                                                                                            longSparseArray11 = longSparseArray16;
                                                                                            arrayList6 = arrayList10;
                                                                                            longSparseIntArray3 = longSparseIntArray10;
                                                                                            longSparseIntArray4 = longSparseIntArray7;
                                                                                            arrayList8 = arrayList49;
                                                                                            longSparseArray8 = longSparseArray36;
                                                                                            currentTimeMillis = j10;
                                                                                            longSparseArray9 = longSparseArray37;
                                                                                        }
                                                                                        arrayList18 = arrayList13;
                                                                                    }
                                                                                    longSparseArray23 = longSparseArray37;
                                                                                    arrayList21 = arrayList49;
                                                                                    longSparseArray21 = longSparseArray36;
                                                                                    longSparseArray31 = longSparseArray17;
                                                                                }
                                                                                arrayList17 = arrayList6;
                                                                                arrayList18 = arrayList11;
                                                                                hashMap6 = hashMap5;
                                                                                hashMap7 = hashMap4;
                                                                                longSparseArray21 = longSparseArray13;
                                                                                longSparseArray20 = longSparseArray11;
                                                                                arrayList21 = arrayList8;
                                                                                longSparseIntArray7 = longSparseIntArray4;
                                                                                longSparseArray30 = longSparseArray10;
                                                                                longSparseArray23 = longSparseArray9;
                                                                                longSparseIntArray6 = longSparseIntArray2;
                                                                                sparseIntArray4 = sparseIntArray3;
                                                                                longSparseIntArray10 = longSparseIntArray3;
                                                                                longSparseArray22 = longSparseArray4;
                                                                                arrayList23 = arrayList7;
                                                                                longSparseArray28 = longSparseArray14;
                                                                                longSparseArray24 = longSparseArray5;
                                                                                i8 = i2 + 1;
                                                                                size3 = i11;
                                                                                longSparseArray29 = longSparseArray7;
                                                                            }
                                                                        }
                                                                        longSparseArray10 = longSparseArray30;
                                                                        arrayList17 = arrayList6;
                                                                        longSparseArray21 = longSparseArray8;
                                                                    }
                                                                }
                                                                arrayList21 = arrayList49;
                                                                longSparseArray31 = longSparseArray17;
                                                            }
                                                        }
                                                        longSparseArray7 = longSparseArray29;
                                                        sparseIntArray4 = sparseIntArray2;
                                                        longSparseArray20 = longSparseArray16;
                                                        arrayList17 = arrayList10;
                                                        currentTimeMillis = j10;
                                                        longSparseArray24 = longSparseArray5;
                                                        longSparseIntArray6 = longSparseIntArray2;
                                                        i8 = i2 + 1;
                                                        size3 = i11;
                                                        longSparseArray29 = longSparseArray7;
                                                    }
                                                }
                                                longSparseArray8 = longSparseArray21;
                                                longSparseArray4 = longSparseArray22;
                                                longSparseArray6 = longSparseArray28;
                                                longSparseArray7 = longSparseArray29;
                                                arrayList7 = arrayList23;
                                                sparseIntArray3 = sparseIntArray2;
                                                arrayList6 = arrayList10;
                                                longSparseIntArray3 = longSparseIntArray10;
                                                currentTimeMillis = j10;
                                                longSparseIntArray4 = longSparseIntArray7;
                                                longSparseArray9 = longSparseArray23;
                                                arrayList8 = arrayList21;
                                                longSparseArray10 = longSparseArray30;
                                                longSparseArray11 = longSparseArray16;
                                                arrayList17 = arrayList6;
                                                longSparseArray21 = longSparseArray8;
                                            }
                                        }
                                        longSparseArray20 = longSparseArray16;
                                        arrayList17 = arrayList10;
                                        longSparseArray24 = longSparseArray5;
                                        longSparseIntArray6 = longSparseIntArray2;
                                        i8 = i2 + 1;
                                        size3 = i11;
                                        longSparseArray29 = longSparseArray7;
                                    }
                                    longSparseArray7 = longSparseArray29;
                                    sparseIntArray4 = sparseIntArray2;
                                    longSparseArray20 = longSparseArray16;
                                    arrayList17 = arrayList10;
                                    currentTimeMillis = j10;
                                    longSparseArray24 = longSparseArray5;
                                    i8 = i2 + 1;
                                    size3 = i11;
                                    longSparseArray29 = longSparseArray7;
                                }
                                longSparseIntArray2 = longSparseIntArray6;
                                arrayList6 = arrayList17;
                                longSparseArray8 = longSparseArray21;
                                longSparseArray4 = longSparseArray22;
                                longSparseArray6 = longSparseArray28;
                                longSparseArray7 = longSparseArray29;
                                arrayList7 = arrayList23;
                                sparseIntArray3 = sparseIntArray2;
                                longSparseIntArray3 = longSparseIntArray10;
                                currentTimeMillis = j10;
                                longSparseIntArray4 = longSparseIntArray7;
                                longSparseArray9 = longSparseArray23;
                                arrayList8 = arrayList21;
                                longSparseArray10 = longSparseArray30;
                                longSparseArray11 = longSparseArray20;
                                arrayList17 = arrayList6;
                                longSparseArray21 = longSparseArray8;
                            }
                            hashMap6 = hashMap2;
                            hashMap7 = hashMap3;
                            longSparseArray6 = longSparseArray14;
                            longSparseArray8 = longSparseArray13;
                            arrayList17 = arrayList6;
                            longSparseArray21 = longSparseArray8;
                        }
                        longSparseArray7 = longSparseArray29;
                        sparseIntArray4 = sparseIntArray2;
                        currentTimeMillis = j10;
                        longSparseArray24 = longSparseArray5;
                        i8 = i2 + 1;
                        size3 = i11;
                        longSparseArray29 = longSparseArray7;
                    }
                    arrayList18 = arrayList16;
                    longSparseArray7 = longSparseArray29;
                    sparseIntArray4 = sparseIntArray2;
                    currentTimeMillis = j10;
                    longSparseArray24 = longSparseArray5;
                    i8 = i2 + 1;
                    size3 = i11;
                    longSparseArray29 = longSparseArray7;
                }
                longSparseArray7 = longSparseArray29;
                sparseIntArray4 = sparseIntArray2;
                currentTimeMillis = j10;
                i8 = i2 + 1;
                size3 = i11;
                longSparseArray29 = longSparseArray7;
            }
            longSparseArray20 = longSparseArray11;
            arrayList21 = arrayList8;
            longSparseIntArray7 = longSparseIntArray4;
            longSparseArray30 = longSparseArray10;
            longSparseArray23 = longSparseArray9;
            longSparseArray24 = longSparseArray5;
            longSparseIntArray6 = longSparseIntArray2;
            sparseIntArray4 = sparseIntArray3;
            longSparseIntArray10 = longSparseIntArray3;
            longSparseArray22 = longSparseArray4;
            longSparseArray28 = longSparseArray6;
            arrayList23 = arrayList7;
            i8 = i2 + 1;
            size3 = i11;
            longSparseArray29 = longSparseArray7;
        }
        final LongSparseIntArray longSparseIntArray13 = longSparseIntArray6;
        ArrayList<Long> arrayList59 = arrayList17;
        final SparseIntArray sparseIntArray7 = sparseIntArray4;
        final LongSparseArray longSparseArray41 = longSparseArray22;
        final LongSparseArray longSparseArray42 = longSparseArray23;
        final LongSparseArray<ArrayList<Integer>> longSparseArray43 = longSparseArray24;
        final LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray44 = longSparseArray27;
        LongSparseArray longSparseArray45 = longSparseArray28;
        final LongSparseArray<SparseIntArray> longSparseArray46 = longSparseArray29;
        LongSparseArray<SparseIntArray> longSparseArray47 = longSparseArray30;
        ArrayList arrayList60 = arrayList23;
        final LongSparseIntArray longSparseIntArray14 = longSparseIntArray10;
        final LongSparseArray longSparseArray48 = longSparseArray21;
        final LongSparseIntArray longSparseIntArray15 = longSparseIntArray7;
        final ArrayList arrayList61 = arrayList21;
        final LongSparseArray longSparseArray49 = longSparseArray20;
        if (longSparseArray48 != null) {
            int size9 = longSparseArray48.size();
            for (int i24 = 0; i24 < size9; i24++) {
                if (updatePrintingUsersWithNewMessages(longSparseArray48.keyAt(i24), (ArrayList) longSparseArray48.valueAt(i24))) {
                    z9 = true;
                }
            }
        }
        if (z9) {
            updatePrintingStrings();
        }
        if (arrayList59 != null) {
            arrayList4 = arrayList59;
            getContactsController().processContactsUpdates(arrayList4, concurrentHashMap3);
        } else {
            arrayList4 = arrayList59;
        }
        if (arrayList61 != null) {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda407
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$370(arrayList61);
                }
            });
        }
        if (arrayList22 != null) {
            getMessagesStorage().putMessages(arrayList22, true, true, false, getDownloadController().getAutodownloadMask(), 1, 0L);
        }
        if (arrayList24 != null) {
            getStatsController().incrementReceivedItemsCount(ApplicationLoader.getCurrentNetworkType(), 1, arrayList24.size());
            getMessagesStorage().putMessages(arrayList24, true, true, false, getDownloadController().getAutodownloadMask(), 0, 0L);
        }
        if (longSparseArray45 != null) {
            int size10 = longSparseArray45.size();
            int i25 = 0;
            while (i25 < size10) {
                TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
                LongSparseArray longSparseArray50 = longSparseArray45;
                ArrayList arrayList62 = (ArrayList) longSparseArray50.valueAt(i25);
                int size11 = arrayList62.size();
                for (int i26 = 0; i26 < size11; i26++) {
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList62.get(i26)).messageOwner);
                }
                getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, longSparseArray50.keyAt(i25), -2, 0, false, 0, 0L);
                i25++;
                longSparseArray45 = longSparseArray50;
            }
            longSparseArray = longSparseArray45;
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda408
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$processUpdateArray$372(longSparseArray);
                }
            });
        } else {
            longSparseArray = longSparseArray45;
        }
        if (longSparseArray47 == null && longSparseArray46 == null && longSparseArray44 == null) {
            longSparseArray2 = longSparseArray47;
            arrayList5 = arrayList60;
        } else {
            longSparseArray2 = longSparseArray47;
            getMessagesStorage().putChannelViews(longSparseArray2, longSparseArray46, longSparseArray44, true);
            arrayList5 = arrayList60;
        }
        if (arrayList5 != null) {
            int size12 = arrayList5.size();
            for (int i27 = 0; i27 < size12; i27++) {
                getMessagesStorage().setDialogsFolderId(((TLRPC$TL_updateFolderPeers) arrayList5.get(i27)).folder_peers, null, 0L, 0);
            }
        }
        final int i28 = i9;
        final ArrayList arrayList63 = arrayList18;
        HashMap hashMap10 = hashMap6;
        final LongSparseArray longSparseArray51 = longSparseArray25;
        final ArrayList<Long> arrayList64 = arrayList4;
        final ArrayList arrayList65 = arrayList5;
        HashMap<MessagesStorage.TopicKey, Integer> hashMap11 = hashMap7;
        final LongSparseIntArray longSparseIntArray16 = longSparseIntArray8;
        final LongSparseArray<TLRPC$WebPage> longSparseArray52 = longSparseArray31;
        final LongSparseArray<SparseIntArray> longSparseArray53 = longSparseArray2;
        final LongSparseArray longSparseArray54 = longSparseArray;
        final LongSparseArray longSparseArray55 = longSparseArray26;
        LongSparseArray<TLRPC$WebPage> longSparseArray56 = longSparseArray31;
        ArrayList arrayList66 = arrayList25;
        final boolean z13 = z9;
        final ArrayList arrayList67 = arrayList19;
        final ArrayList arrayList68 = arrayList20;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda395
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$380(i28, arrayList63, arrayList2, longSparseArray51, i, longSparseIntArray16, longSparseArray52, longSparseArray48, arrayList65, longSparseArray55, longSparseArray54, z13, arrayList64, arrayList67, longSparseArray53, longSparseArray46, longSparseArray44, arrayList68);
            }
        });
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda396
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$382(longSparseIntArray15, longSparseIntArray13, sparseIntArray7, longSparseArray43, longSparseArray41, longSparseArray49, longSparseArray42, longSparseIntArray14);
            }
        });
        if (longSparseArray56 != null) {
            getMessagesStorage().putWebPages(longSparseArray56);
        }
        if (longSparseIntArray15 == null) {
            longSparseIntArray = longSparseIntArray13;
            if (longSparseIntArray == null) {
                sparseIntArray = sparseIntArray7;
                longSparseArray3 = longSparseArray43;
                if (sparseIntArray == null && longSparseArray3 == null && longSparseIntArray9 == null) {
                    hashMap = hashMap10;
                    z2 = true;
                    if (hashMap != null) {
                        for (MessagesStorage.TopicKey topicKey : hashMap.keySet()) {
                            getMessagesStorage().updateRepliesMaxReadId(-topicKey.dialogId, (int) topicKey.topicId, ((Integer) hashMap.get(topicKey)).intValue(), -1, true);
                        }
                    }
                    if (hashMap11 != null) {
                        getMessagesStorage().updateTopicsWithReadMessages(hashMap11);
                        getTopicsController().updateReadOutbox(hashMap11);
                    }
                    if (longSparseArray3 != null) {
                        int currentTime = getConnectionsManager().getCurrentTime();
                        int size13 = longSparseArray3.size();
                        for (int i29 = 0; i29 < size13; i29++) {
                            getMessagesStorage().markMessagesContentAsRead(longSparseArray3.keyAt(i29), longSparseArray3.valueAt(i29), currentTime, i10);
                        }
                    }
                    if (longSparseArray41 != null) {
                        int size14 = longSparseArray41.size();
                        for (int i30 = 0; i30 < size14; i30++) {
                            final long keyAt = longSparseArray41.keyAt(i30);
                            final ArrayList arrayList69 = (ArrayList) longSparseArray41.valueAt(i30);
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda397
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdateArray$383(keyAt, arrayList69);
                                }
                            });
                        }
                    }
                    if (longSparseArray49 != null) {
                        final long clientUserId2 = getUserConfig().getClientUserId();
                        int size15 = longSparseArray49.size();
                        for (int i31 = 0; i31 < size15; i31++) {
                            final long keyAt2 = longSparseArray49.keyAt(i31);
                            final ArrayList arrayList70 = (ArrayList) longSparseArray49.valueAt(i31);
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda398
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdateArray$384(clientUserId2, arrayList70, keyAt2);
                                }
                            });
                        }
                    }
                    if (longSparseArray42 != null) {
                        int size16 = longSparseArray42.size();
                        for (int i32 = 0; i32 < size16; i32++) {
                            getMessagesStorage().markMessagesAsDeleted(longSparseArray42.keyAt(i32), (ArrayList) longSparseArray42.valueAt(i32), true, false, 1, 0);
                        }
                    }
                    if (longSparseIntArray14 != null) {
                        int size17 = longSparseIntArray14.size();
                        for (int i33 = 0; i33 < size17; i33++) {
                            final long keyAt3 = longSparseIntArray14.keyAt(i33);
                            final int valueAt = longSparseIntArray14.valueAt(i33);
                            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda399
                                @Override // java.lang.Runnable
                                public final void run() {
                                    MessagesController.this.lambda$processUpdateArray$385(keyAt3, valueAt);
                                }
                            });
                        }
                    }
                    if (arrayList66 != null) {
                        int size18 = arrayList66.size();
                        for (int i34 = 0; i34 < size18; i34++) {
                            TLRPC$TL_updateEncryptedMessagesRead tLRPC$TL_updateEncryptedMessagesRead2 = (TLRPC$TL_updateEncryptedMessagesRead) arrayList66.get(i34);
                            getMessagesStorage().createTaskForSecretChat(tLRPC$TL_updateEncryptedMessagesRead2.chat_id, tLRPC$TL_updateEncryptedMessagesRead2.max_date, tLRPC$TL_updateEncryptedMessagesRead2.date, 1, null);
                        }
                    }
                    return z2;
                }
                if (longSparseIntArray15 == null || longSparseIntArray != null || longSparseArray3 != null || longSparseIntArray9 != null) {
                    getMessagesStorage().updateDialogsWithReadMessages(longSparseIntArray15, longSparseIntArray, longSparseArray3, longSparseIntArray9, true);
                }
                z2 = true;
                getMessagesStorage().markMessagesAsRead(longSparseIntArray15, longSparseIntArray, sparseIntArray, true);
                hashMap = hashMap10;
                if (hashMap != null) {
                }
                if (hashMap11 != null) {
                }
                if (longSparseArray3 != null) {
                }
                if (longSparseArray41 != null) {
                }
                if (longSparseArray49 != null) {
                }
                if (longSparseArray42 != null) {
                }
                if (longSparseIntArray14 != null) {
                }
                if (arrayList66 != null) {
                }
                return z2;
            }
            longSparseArray3 = longSparseArray43;
        } else {
            longSparseArray3 = longSparseArray43;
            longSparseIntArray = longSparseIntArray13;
        }
        sparseIntArray = sparseIntArray7;
        if (longSparseIntArray15 == null) {
        }
        getMessagesStorage().updateDialogsWithReadMessages(longSparseIntArray15, longSparseIntArray, longSparseArray3, longSparseIntArray9, true);
        z2 = true;
        getMessagesStorage().markMessagesAsRead(longSparseIntArray15, longSparseIntArray, sparseIntArray, true);
        hashMap = hashMap10;
        if (hashMap != null) {
        }
        if (hashMap11 != null) {
        }
        if (longSparseArray3 != null) {
        }
        if (longSparseArray41 != null) {
        }
        if (longSparseArray49 != null) {
        }
        if (longSparseArray42 != null) {
        }
        if (longSparseIntArray14 != null) {
        }
        if (arrayList66 != null) {
        }
        return z2;
    }

    public /* synthetic */ void lambda$processUpdateArray$360(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$361(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$362(TLRPC$TL_updateUserTyping tLRPC$TL_updateUserTyping) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(tLRPC$TL_updateUserTyping.user_id), tLRPC$TL_updateUserTyping.action);
    }

    public /* synthetic */ void lambda$processUpdateArray$363(TLRPC$TL_updateChatUserTyping tLRPC$TL_updateChatUserTyping) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(-tLRPC$TL_updateChatUserTyping.chat_id), tLRPC$TL_updateChatUserTyping.action);
    }

    public /* synthetic */ void lambda$processUpdateArray$365(final TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$364(tLRPC$TL_updatePeerBlocked);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$364(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        long peerId = MessageObject.getPeerId(tLRPC$TL_updatePeerBlocked.peer_id);
        if (tLRPC$TL_updatePeerBlocked.blocked) {
            if (this.blockePeers.indexOfKey(peerId) < 0) {
                this.blockePeers.put(peerId, 1);
            }
        } else {
            this.blockePeers.delete(peerId);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getStoriesController().updateBlockUser(peerId, tLRPC$TL_updatePeerBlocked.blocked_my_stories_from, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$366(TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needShowAlert, 2, tLRPC$TL_updateServiceNotification.message, tLRPC$TL_updateServiceNotification.type);
    }

    public /* synthetic */ void lambda$processUpdateArray$367(TLRPC$Message tLRPC$Message) {
        getSendMessagesHelper().onMessageEdited(tLRPC$Message);
    }

    public /* synthetic */ void lambda$processUpdateArray$368(TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tLRPC$TL_updateLangPack.difference, this.currentAccount);
    }

    public /* synthetic */ void lambda$processUpdateArray$369(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, null);
    }

    public /* synthetic */ void lambda$processUpdateArray$370(final ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda77
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$369(arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$372(final LongSparseArray longSparseArray) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda432
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$371(longSparseArray);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdateArray$371(LongSparseArray longSparseArray) {
        getNotificationsController().processEditedMessages(longSparseArray);
        getTopicsController().processEditedMessages(longSparseArray);
    }

    public /* synthetic */ void lambda$processUpdateArray$373(TLRPC$User tLRPC$User) {
        getContactsController().addContactToPhoneBook(tLRPC$User, true);
    }

    public /* synthetic */ void lambda$processUpdateArray$374() {
        getNotificationsController().deleteNotificationChannelGlobal(0);
    }

    public /* synthetic */ void lambda$processUpdateArray$375() {
        getNotificationsController().deleteNotificationChannelGlobal(1);
    }

    public /* synthetic */ void lambda$processUpdateArray$376() {
        getNotificationsController().deleteNotificationChannelGlobal(2);
    }

    public /* synthetic */ void lambda$processUpdateArray$377(TLRPC$TL_updateChannel tLRPC$TL_updateChannel) {
        getChannelDifference(tLRPC$TL_updateChannel.channel_id, 1, 0L, null);
    }

    public /* synthetic */ void lambda$processUpdateArray$378(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public /* synthetic */ void lambda$processUpdateArray$379(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:1322:0x0654, code lost:
        if (r4 == r6) goto L292;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1324:0x0658, code lost:
        if (r9 == r5) goto L294;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1555:0x0b5c, code lost:
        if (r0 == 0) goto L593;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1557:0x0b5f, code lost:
        r0 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:1559:0x0b65, code lost:
        if (r4.getCallState() == 0) goto L593;
     */
    /* JADX WARN: Removed duplicated region for block: B:1328:0x0683  */
    /* JADX WARN: Removed duplicated region for block: B:1868:0x1357  */
    /* JADX WARN: Removed duplicated region for block: B:1873:0x1373  */
    /* JADX WARN: Removed duplicated region for block: B:1918:0x1486  */
    /* JADX WARN: Removed duplicated region for block: B:1920:0x1494  */
    /* JADX WARN: Removed duplicated region for block: B:1922:0x149a  */
    /* JADX WARN: Removed duplicated region for block: B:1925:0x14a6  */
    /* JADX WARN: Removed duplicated region for block: B:1935:0x14e2  */
    /* JADX WARN: Removed duplicated region for block: B:1938:0x14f8  */
    /* JADX WARN: Removed duplicated region for block: B:2085:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$380(int i, ArrayList arrayList, ArrayList arrayList2, LongSparseArray longSparseArray, int i2, LongSparseIntArray longSparseIntArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, ArrayList arrayList3, LongSparseArray longSparseArray4, LongSparseArray longSparseArray5, boolean z, ArrayList arrayList4, ArrayList arrayList5, LongSparseArray longSparseArray6, LongSparseArray longSparseArray7, LongSparseArray longSparseArray8, ArrayList arrayList6) {
        int i3;
        int i4;
        boolean z2;
        LongSparseArray longSparseArray9;
        LongSparseArray longSparseArray10;
        boolean z3;
        int i5;
        MessageObject messageObject;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray11;
        int i6;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray12;
        long j;
        boolean z4;
        int i7;
        int i8;
        ArrayList<TLRPC$User> arrayList7;
        int i9;
        ArrayList<TLRPC$User> arrayList8;
        ArrayList<TLRPC$User> arrayList9;
        ArrayList arrayList10;
        ApplicationLoader applicationLoader;
        TLRPC$ChatFull chatFull;
        TLRPC$UserFull tLRPC$UserFull;
        char c;
        long j2;
        long j3;
        long j4;
        boolean z5;
        int callStateForSubscription;
        boolean z6;
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        int i10;
        int i11;
        TLRPC$Dialog tLRPC$Dialog;
        ChatObject.Call groupCall;
        long j5;
        long j6;
        boolean z7;
        Boolean bool;
        Boolean bool2;
        Boolean bool3;
        TLRPC$User tLRPC$User;
        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto;
        boolean z8;
        long j7;
        ArrayList<Long> arrayList11;
        int i12;
        long j8;
        String str;
        int i13;
        String str2;
        ArrayList arrayList12 = arrayList;
        ArrayList arrayList13 = arrayList2;
        if (arrayList12 != null) {
            ArrayList<TLRPC$User> arrayList14 = new ArrayList<>();
            ArrayList<TLRPC$User> arrayList15 = new ArrayList<>();
            int size = arrayList.size();
            i3 = i;
            int i14 = 0;
            SharedPreferences.Editor editor = null;
            int i15 = 0;
            boolean z9 = false;
            while (i14 < size) {
                TLRPC$Update tLRPC$Update = (TLRPC$Update) arrayList12.get(i14);
                if (tLRPC$Update instanceof TLRPC$TL_updatePrivacy) {
                    TLRPC$TL_updatePrivacy tLRPC$TL_updatePrivacy = (TLRPC$TL_updatePrivacy) tLRPC$Update;
                    TLRPC$PrivacyKey tLRPC$PrivacyKey = tLRPC$TL_updatePrivacy.key;
                    if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyStatusTimestamp) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 0);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyChatInvite) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 1);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneCall) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 2);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneP2P) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 3);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyProfilePhoto) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 4);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyForwards) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 5);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyPhoneNumber) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 6);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyAddedByPhone) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 7);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyVoiceMessages) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 8);
                    } else if (tLRPC$PrivacyKey instanceof TLRPC$TL_privacyKeyAbout) {
                        getContactsController().setPrivacyRules(tLRPC$TL_updatePrivacy.rules, 9);
                    }
                } else if (tLRPC$Update instanceof TLRPC$TL_updateStarsRevenueStatus) {
                    BotStarsController.getInstance(this.currentAccount).onUpdate((TLRPC$TL_updateStarsRevenueStatus) tLRPC$Update);
                } else {
                    if (tLRPC$Update instanceof TLRPC$TL_updateUserStatus) {
                        TLRPC$TL_updateUserStatus tLRPC$TL_updateUserStatus = (TLRPC$TL_updateUserStatus) tLRPC$Update;
                        i7 = size;
                        TLRPC$User user = getUser(Long.valueOf(tLRPC$TL_updateUserStatus.user_id));
                        TLRPC$UserStatus tLRPC$UserStatus = tLRPC$TL_updateUserStatus.status;
                        if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                            tLRPC$UserStatus.expires = -100;
                        } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                            tLRPC$UserStatus.expires = -101;
                        } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                            tLRPC$UserStatus.expires = -102;
                        }
                        if (user != null) {
                            user.id = tLRPC$TL_updateUserStatus.user_id;
                            user.status = tLRPC$UserStatus;
                        }
                        TLRPC$TL_user tLRPC$TL_user = new TLRPC$TL_user();
                        tLRPC$TL_user.id = tLRPC$TL_updateUserStatus.user_id;
                        tLRPC$TL_user.status = tLRPC$TL_updateUserStatus.status;
                        arrayList15.add(tLRPC$TL_user);
                        if (tLRPC$TL_updateUserStatus.user_id == getUserConfig().getClientUserId()) {
                            getNotificationsController().setLastOnlineFromOtherDevice(tLRPC$TL_updateUserStatus.status.expires);
                        }
                    } else {
                        i7 = size;
                        if (tLRPC$Update instanceof TLRPC$TL_updatePeerWallpaper) {
                            ChatThemeController.getInstance(this.currentAccount).processUpdate((TLRPC$TL_updatePeerWallpaper) tLRPC$Update);
                        } else if (tLRPC$Update instanceof TLRPC$TL_updateUserEmojiStatus) {
                            TLRPC$TL_updateUserEmojiStatus tLRPC$TL_updateUserEmojiStatus = (TLRPC$TL_updateUserEmojiStatus) tLRPC$Update;
                            TLRPC$User user2 = getUser(Long.valueOf(tLRPC$TL_updateUserEmojiStatus.user_id));
                            if (user2 != null) {
                                user2.id = tLRPC$TL_updateUserEmojiStatus.user_id;
                                user2.emoji_status = tLRPC$TL_updateUserEmojiStatus.emoji_status;
                                if (UserObject.isUserSelf(user2)) {
                                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userEmojiStatusUpdated, user2);
                                }
                            }
                            TLRPC$TL_user tLRPC$TL_user2 = new TLRPC$TL_user();
                            tLRPC$TL_user2.id = tLRPC$TL_updateUserEmojiStatus.user_id;
                            tLRPC$TL_user2.emoji_status = tLRPC$TL_updateUserEmojiStatus.emoji_status;
                            arrayList14.add(tLRPC$TL_user2);
                        } else if (tLRPC$Update instanceof TLRPC$TL_updateUserName) {
                            TLRPC$TL_updateUserName tLRPC$TL_updateUserName = (TLRPC$TL_updateUserName) tLRPC$Update;
                            TLRPC$User user3 = getUser(Long.valueOf(tLRPC$TL_updateUserName.user_id));
                            if (user3 != null) {
                                if (!UserObject.isContact(user3)) {
                                    user3.first_name = tLRPC$TL_updateUserName.first_name;
                                    user3.last_name = tLRPC$TL_updateUserName.last_name;
                                }
                                if (user3.usernames != null) {
                                    for (int i16 = 0; i16 < user3.usernames.size(); i16++) {
                                        TLRPC$TL_username tLRPC$TL_username = user3.usernames.get(i16);
                                        if (tLRPC$TL_username != null && !TextUtils.isEmpty(tLRPC$TL_username.username)) {
                                            this.objectsByUsernames.remove(tLRPC$TL_username.username);
                                        }
                                    }
                                }
                                for (int i17 = 0; i17 < tLRPC$TL_updateUserName.usernames.size(); i17++) {
                                    String str3 = tLRPC$TL_updateUserName.usernames.get(i17).username;
                                    if (!TextUtils.isEmpty(str3) && tLRPC$TL_updateUserName.usernames.get(i17).active) {
                                        this.objectsByUsernames.put(str3, user3);
                                    }
                                }
                                ArrayList<TLRPC$TL_username> arrayList16 = tLRPC$TL_updateUserName.usernames;
                                if (arrayList16 != null) {
                                    i13 = 1;
                                    str2 = null;
                                    if (arrayList16.size() > 1) {
                                        user3.username = null;
                                        user3.usernames = tLRPC$TL_updateUserName.usernames;
                                    }
                                } else {
                                    i13 = 1;
                                    str2 = null;
                                }
                                ArrayList<TLRPC$TL_username> arrayList17 = tLRPC$TL_updateUserName.usernames;
                                user3.username = (arrayList17 == null || arrayList17.size() != i13) ? str2 : tLRPC$TL_updateUserName.usernames.get(0).username;
                                user3.usernames.clear();
                            }
                            TLRPC$TL_user tLRPC$TL_user3 = new TLRPC$TL_user();
                            tLRPC$TL_user3.id = tLRPC$TL_updateUserName.user_id;
                            tLRPC$TL_user3.first_name = tLRPC$TL_updateUserName.first_name;
                            tLRPC$TL_user3.last_name = tLRPC$TL_updateUserName.last_name;
                            ArrayList<TLRPC$TL_username> arrayList18 = tLRPC$TL_updateUserName.usernames;
                            if (arrayList18 != null && arrayList18.size() == 1) {
                                str = tLRPC$TL_updateUserName.usernames.get(0).username;
                                tLRPC$TL_user3.username = str;
                                arrayList14.add(tLRPC$TL_user3);
                            }
                            str = null;
                            tLRPC$TL_user3.username = str;
                            arrayList14.add(tLRPC$TL_user3);
                        } else {
                            if (tLRPC$Update instanceof TLRPC$TL_updateDialogPinned) {
                                TLRPC$TL_updateDialogPinned tLRPC$TL_updateDialogPinned = (TLRPC$TL_updateDialogPinned) tLRPC$Update;
                                TLRPC$DialogPeer tLRPC$DialogPeer = tLRPC$TL_updateDialogPinned.peer;
                                long peerDialogId = tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer ? DialogObject.getPeerDialogId(((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer) : 0L;
                                i8 = i14;
                                arrayList7 = arrayList15;
                                i9 = i7;
                                arrayList8 = arrayList14;
                                if (!pinDialog(peerDialogId, tLRPC$TL_updateDialogPinned.pinned, null, -1L)) {
                                    getUserConfig().setPinnedDialogsLoaded(tLRPC$TL_updateDialogPinned.folder_id, false);
                                    getUserConfig().saveConfig(false);
                                    loadPinnedDialogs(tLRPC$TL_updateDialogPinned.folder_id, peerDialogId, null);
                                }
                                arrayList10 = arrayList13;
                            } else {
                                i8 = i14;
                                arrayList7 = arrayList15;
                                i9 = i7;
                                arrayList8 = arrayList14;
                                if (tLRPC$Update instanceof TLRPC$TL_updatePinnedDialogs) {
                                    TLRPC$TL_updatePinnedDialogs tLRPC$TL_updatePinnedDialogs = (TLRPC$TL_updatePinnedDialogs) tLRPC$Update;
                                    getUserConfig().setPinnedDialogsLoaded(tLRPC$TL_updatePinnedDialogs.folder_id, false);
                                    getUserConfig().saveConfig(false);
                                    if ((tLRPC$TL_updatePinnedDialogs.flags & 1) != 0) {
                                        arrayList11 = new ArrayList<>();
                                        ArrayList<TLRPC$DialogPeer> arrayList19 = tLRPC$TL_updatePinnedDialogs.order;
                                        int size2 = arrayList19.size();
                                        int i18 = 0;
                                        while (i18 < size2) {
                                            TLRPC$DialogPeer tLRPC$DialogPeer2 = arrayList19.get(i18);
                                            if (tLRPC$DialogPeer2 instanceof TLRPC$TL_dialogPeer) {
                                                TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer2).peer;
                                                i12 = size2;
                                                j8 = tLRPC$Peer.user_id;
                                                if (j8 == 0) {
                                                    long j9 = tLRPC$Peer.chat_id;
                                                    if (j9 == 0) {
                                                        j9 = tLRPC$Peer.channel_id;
                                                    }
                                                    j8 = -j9;
                                                }
                                            } else {
                                                i12 = size2;
                                                j8 = 0;
                                            }
                                            arrayList11.add(Long.valueOf(j8));
                                            i18++;
                                            size2 = i12;
                                        }
                                        j7 = 0;
                                    } else {
                                        j7 = 0;
                                        arrayList11 = null;
                                    }
                                    loadPinnedDialogs(tLRPC$TL_updatePinnedDialogs.folder_id, j7, arrayList11);
                                    arrayList10 = arrayList2;
                                } else {
                                    if (tLRPC$Update instanceof TLRPC$TL_updateUserPhoto) {
                                        TLRPC$TL_updateUserPhoto tLRPC$TL_updateUserPhoto = (TLRPC$TL_updateUserPhoto) tLRPC$Update;
                                        TLRPC$User user4 = getUser(Long.valueOf(tLRPC$TL_updateUserPhoto.user_id));
                                        if (user4 != null) {
                                            user4.photo = tLRPC$TL_updateUserPhoto.photo;
                                        }
                                        TLRPC$TL_user tLRPC$TL_user4 = new TLRPC$TL_user();
                                        tLRPC$TL_user4.id = tLRPC$TL_updateUserPhoto.user_id;
                                        tLRPC$TL_user4.photo = tLRPC$TL_updateUserPhoto.photo;
                                        arrayList9 = arrayList8;
                                        arrayList9.add(tLRPC$TL_user4);
                                        if (UserObject.isUserSelf(user4)) {
                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                        }
                                    } else {
                                        arrayList9 = arrayList8;
                                        if (tLRPC$Update instanceof TLRPC$TL_updateNewStoryReaction) {
                                            TLRPC$TL_updateNewStoryReaction tLRPC$TL_updateNewStoryReaction = (TLRPC$TL_updateNewStoryReaction) tLRPC$Update;
                                            long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_updateNewStoryReaction.peer);
                                            int i19 = tLRPC$TL_updateNewStoryReaction.story_id;
                                            TLRPC$Message tLRPC$Message = new TLRPC$Message();
                                            tLRPC$Message.id = -i19;
                                            tLRPC$Message.dialog_id = peerDialogId2;
                                            tLRPC$Message.peer_id = getPeer(peerDialogId2);
                                            tLRPC$Message.date = getConnectionsManager().getCurrentTime();
                                            TLRPC$User user5 = getMessagesController().getUser(Long.valueOf(tLRPC$Message.dialog_id));
                                            if (user5 != null && getNotificationsSettings(this.currentAccount).getBoolean("EnableReactionsPreview", true)) {
                                                ReactionsLayoutInBubble.VisibleReaction flatten = ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$TL_updateNewStoryReaction.reaction).flatten();
                                                if (flatten.emojicon != null) {
                                                    z8 = false;
                                                    tLRPC$Message.message = LocaleController.formatString(R.string.PushReactStory, UserObject.getFirstName(user5), flatten.emojicon);
                                                } else {
                                                    z8 = false;
                                                    tLRPC$Message.message = LocaleController.formatString(R.string.PushReactStoryHidden, new Object[0]);
                                                }
                                            } else {
                                                z8 = false;
                                                tLRPC$Message.message = LocaleController.formatString(R.string.PushReactStoryHidden, new Object[0]);
                                            }
                                            ArrayList<MessageObject> arrayList20 = new ArrayList<>();
                                            MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, z8, z8);
                                            messageObject2.isStoryReactionPush = true;
                                            messageObject2.localType = 1;
                                            if (user5 != null && !UserObject.isDeleted(user5)) {
                                                messageObject2.localUserName = UserObject.getFirstName(user5);
                                            }
                                            arrayList20.add(messageObject2);
                                            getNotificationsController().processNewMessages(arrayList20, true, false, null);
                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateBroadcastRevenueTransactions) {
                                            TLRPC$TL_updateBroadcastRevenueTransactions tLRPC$TL_updateBroadcastRevenueTransactions = (TLRPC$TL_updateBroadcastRevenueTransactions) tLRPC$Update;
                                            ChannelMonetizationLayout channelMonetizationLayout = ChannelMonetizationLayout.instance;
                                            if (channelMonetizationLayout != null && channelMonetizationLayout.dialogId == DialogObject.getPeerDialogId(tLRPC$TL_updateBroadcastRevenueTransactions.peer)) {
                                                ChannelMonetizationLayout.instance.setupBalances(tLRPC$TL_updateBroadcastRevenueTransactions.balances);
                                                ChannelMonetizationLayout.instance.reloadTransactions();
                                            }
                                        } else if (tLRPC$Update instanceof TLRPC$TL_updateStarsBalance) {
                                            StarsController.getInstance(this.currentAccount).updateBalance(((TLRPC$TL_updateStarsBalance) tLRPC$Update).balance);
                                            StarsController.getInstance(this.currentAccount).invalidateTransactions(false);
                                        } else {
                                            if (tLRPC$Update instanceof TLRPC$TL_updateUser) {
                                                TLRPC$TL_updateUser tLRPC$TL_updateUser = (TLRPC$TL_updateUser) tLRPC$Update;
                                                TLRPC$User user6 = getUser(Long.valueOf(tLRPC$TL_updateUser.user_id));
                                                arrayList10 = arrayList2;
                                                if (arrayList10 != null) {
                                                    for (int i20 = 0; i20 < arrayList2.size(); i20++) {
                                                        TLRPC$User tLRPC$User2 = (TLRPC$User) arrayList10.get(i20);
                                                        if (tLRPC$User2 != null && tLRPC$User2.id == tLRPC$TL_updateUser.user_id) {
                                                            tLRPC$User = tLRPC$User2;
                                                            break;
                                                        }
                                                    }
                                                }
                                                tLRPC$User = null;
                                                if (tLRPC$User != null && (tLRPC$UserProfilePhoto = tLRPC$User.photo) != null) {
                                                    if (user6 != null) {
                                                        user6.photo = tLRPC$UserProfilePhoto;
                                                    }
                                                    TLRPC$TL_user tLRPC$TL_user5 = new TLRPC$TL_user();
                                                    tLRPC$TL_user5.id = tLRPC$User.id;
                                                    tLRPC$TL_user5.photo = tLRPC$User.photo;
                                                    arrayList9.add(tLRPC$TL_user5);
                                                }
                                                if (UserObject.isUserSelf(user6)) {
                                                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                                }
                                            } else {
                                                arrayList10 = arrayList2;
                                                if (tLRPC$Update instanceof TLRPC$TL_updateUserPhone) {
                                                    TLRPC$TL_updateUserPhone tLRPC$TL_updateUserPhone = (TLRPC$TL_updateUserPhone) tLRPC$Update;
                                                    final TLRPC$User user7 = getUser(Long.valueOf(tLRPC$TL_updateUserPhone.user_id));
                                                    if (user7 != null) {
                                                        user7.phone = tLRPC$TL_updateUserPhone.phone;
                                                        Utilities.phoneBookQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda41
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesController.this.lambda$processUpdateArray$373(user7);
                                                            }
                                                        });
                                                        if (UserObject.isUserSelf(user7)) {
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.mainUserInfoChanged, new Object[0]);
                                                        }
                                                    }
                                                    TLRPC$TL_user tLRPC$TL_user6 = new TLRPC$TL_user();
                                                    tLRPC$TL_user6.id = tLRPC$TL_updateUserPhone.user_id;
                                                    tLRPC$TL_user6.phone = tLRPC$TL_updateUserPhone.phone;
                                                    arrayList9.add(tLRPC$TL_user6);
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateNotifySettings) {
                                                    TLRPC$TL_updateNotifySettings tLRPC$TL_updateNotifySettings = (TLRPC$TL_updateNotifySettings) tLRPC$Update;
                                                    if (tLRPC$TL_updateNotifySettings.notify_settings instanceof TLRPC$TL_peerNotifySettings) {
                                                        i15 |= DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
                                                        SharedPreferences.Editor edit = editor == null ? this.notificationsPreferences.edit() : editor;
                                                        getConnectionsManager().getCurrentTime();
                                                        TLRPC$NotifyPeer tLRPC$NotifyPeer = tLRPC$TL_updateNotifySettings.peer;
                                                        if ((tLRPC$NotifyPeer instanceof TLRPC$TL_notifyPeer) || (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyForumTopic)) {
                                                            if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyPeer) {
                                                                TLRPC$Peer tLRPC$Peer2 = ((TLRPC$TL_notifyPeer) tLRPC$NotifyPeer).peer;
                                                                j5 = tLRPC$Peer2.user_id;
                                                                j6 = 0;
                                                                if (j5 == 0) {
                                                                    long j10 = tLRPC$Peer2.chat_id;
                                                                    j5 = j10 != 0 ? -j10 : -tLRPC$Peer2.channel_id;
                                                                }
                                                            } else {
                                                                TLRPC$TL_notifyForumTopic tLRPC$TL_notifyForumTopic = (TLRPC$TL_notifyForumTopic) tLRPC$NotifyPeer;
                                                                TLRPC$Peer tLRPC$Peer3 = tLRPC$TL_notifyForumTopic.peer;
                                                                long j11 = tLRPC$Peer3.user_id;
                                                                if (j11 != 0) {
                                                                    j5 = j11;
                                                                } else {
                                                                    long j12 = tLRPC$Peer3.chat_id;
                                                                    j5 = j12 != 0 ? -j12 : -tLRPC$Peer3.channel_id;
                                                                }
                                                                j6 = tLRPC$TL_notifyForumTopic.top_msg_id;
                                                            }
                                                            getNotificationsController().getNotificationsSettingsFacade().applyDialogNotificationsSettings(j5, j6, tLRPC$TL_updateNotifySettings.notify_settings);
                                                        } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyChats) {
                                                            TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings = tLRPC$TL_updateNotifySettings.notify_settings;
                                                            if ((tLRPC$PeerNotifySettings.flags & 1) != 0) {
                                                                edit.putBoolean("EnablePreviewGroup", tLRPC$PeerNotifySettings.show_previews);
                                                            }
                                                            if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                                int i21 = this.notificationsPreferences.getInt("EnableGroup2", 0);
                                                                int i22 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                                                if (i21 != i22) {
                                                                    edit.putInt("EnableGroup2", i22);
                                                                    edit.putBoolean("overwrite_group", true);
                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda42
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            MessagesController.this.lambda$processUpdateArray$374();
                                                                        }
                                                                    });
                                                                }
                                                            }
                                                            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0L, 0, false);
                                                        } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyUsers) {
                                                            TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings2 = tLRPC$TL_updateNotifySettings.notify_settings;
                                                            if ((tLRPC$PeerNotifySettings2.flags & 1) != 0) {
                                                                edit.putBoolean("EnablePreviewAll", tLRPC$PeerNotifySettings2.show_previews);
                                                            }
                                                            int i23 = tLRPC$TL_updateNotifySettings.notify_settings.flags;
                                                            if (this.notificationsPreferences.contains("EnableAllStories")) {
                                                                z7 = true;
                                                                bool = Boolean.valueOf(this.notificationsPreferences.getBoolean("EnableAllStories", true));
                                                            } else {
                                                                z7 = true;
                                                                bool = null;
                                                            }
                                                            Boolean valueOf = this.notificationsPreferences.contains("EnableHideStoriesSenders") ? Boolean.valueOf(this.notificationsPreferences.getBoolean("EnableHideStoriesSenders", z7)) : null;
                                                            TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings3 = tLRPC$TL_updateNotifySettings.notify_settings;
                                                            if ((tLRPC$PeerNotifySettings3.flags & 64) != 0) {
                                                                Boolean valueOf2 = Boolean.valueOf(tLRPC$PeerNotifySettings3.stories_muted ^ z7);
                                                                edit.putBoolean("EnableAllStories", valueOf2.booleanValue());
                                                                bool2 = valueOf2;
                                                            } else {
                                                                bool2 = null;
                                                            }
                                                            TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings4 = tLRPC$TL_updateNotifySettings.notify_settings;
                                                            if ((tLRPC$PeerNotifySettings4.flags & 128) != 0) {
                                                                bool3 = Boolean.valueOf(tLRPC$PeerNotifySettings4.stories_hide_sender);
                                                                edit.putBoolean("EnableHideStoriesSenders", bool3.booleanValue());
                                                            } else {
                                                                bool3 = null;
                                                            }
                                                            if ((bool == null) == (bool2 == null)) {
                                                                if ((valueOf == null) == (bool3 == null)) {
                                                                    if (bool != null) {
                                                                    }
                                                                    if (valueOf != null) {
                                                                    }
                                                                    getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0L, 1, false);
                                                                    if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                                        int i24 = this.notificationsPreferences.getInt("EnableAll2", 0);
                                                                        int i25 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                                                        if (i24 != i25) {
                                                                            edit.putInt("EnableAll2", i25);
                                                                            edit.putBoolean("overwrite_private", true);
                                                                            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda43
                                                                                @Override // java.lang.Runnable
                                                                                public final void run() {
                                                                                    MessagesController.this.lambda$processUpdateArray$375();
                                                                                }
                                                                            });
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            edit.putBoolean("overwrite_stories", true);
                                                            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0L, 1, false);
                                                            if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                            }
                                                        } else if (tLRPC$NotifyPeer instanceof TLRPC$TL_notifyBroadcasts) {
                                                            TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings5 = tLRPC$TL_updateNotifySettings.notify_settings;
                                                            if ((tLRPC$PeerNotifySettings5.flags & 1) != 0) {
                                                                edit.putBoolean("EnablePreviewChannel", tLRPC$PeerNotifySettings5.show_previews);
                                                            }
                                                            if ((tLRPC$TL_updateNotifySettings.notify_settings.flags & 4) != 0) {
                                                                int i26 = this.notificationsPreferences.getInt("EnableChannel2", 0);
                                                                int i27 = tLRPC$TL_updateNotifySettings.notify_settings.mute_until;
                                                                if (i26 != i27) {
                                                                    edit.putInt("EnableChannel2", i27);
                                                                    edit.putBoolean("overwrite_channel", true);
                                                                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda44
                                                                        @Override // java.lang.Runnable
                                                                        public final void run() {
                                                                            MessagesController.this.lambda$processUpdateArray$376();
                                                                        }
                                                                    });
                                                                }
                                                            }
                                                            getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(tLRPC$TL_updateNotifySettings.notify_settings.android_sound, edit, 0L, 0L, 2, false);
                                                        }
                                                        getMessagesStorage().updateMutedDialogsFiltersCounters();
                                                        editor = edit;
                                                    }
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateNewAuthorization) {
                                                    getUnconfirmedAuthController().processUpdate((TLRPC$TL_updateNewAuthorization) tLRPC$Update);
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
                                                    final TLRPC$TL_updateChannel tLRPC$TL_updateChannel = (TLRPC$TL_updateChannel) tLRPC$Update;
                                                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(-tLRPC$TL_updateChannel.channel_id);
                                                    TLRPC$Chat chat = getChat(Long.valueOf(tLRPC$TL_updateChannel.channel_id));
                                                    if (chat != null) {
                                                        if (tLRPC$Dialog2 == null && (chat instanceof TLRPC$TL_channel) && !chat.left) {
                                                            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda45
                                                                @Override // java.lang.Runnable
                                                                public final void run() {
                                                                    MessagesController.this.lambda$processUpdateArray$377(tLRPC$TL_updateChannel);
                                                                }
                                                            });
                                                        } else if (ChatObject.isNotInChat(chat) && tLRPC$Dialog2 != null && ((tLRPC$Dialog = this.promoDialog) == null || tLRPC$Dialog.id != tLRPC$Dialog2.id)) {
                                                            deleteDialog(tLRPC$Dialog2.id, 0);
                                                        }
                                                        if (((chat instanceof TLRPC$TL_channelForbidden) || chat.kicked) && (groupCall = getGroupCall(chat.id, false)) != null) {
                                                            TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall = new TLRPC$TL_updateGroupCall();
                                                            tLRPC$TL_updateGroupCall.chat_id = chat.id;
                                                            TLRPC$TL_groupCallDiscarded tLRPC$TL_groupCallDiscarded = new TLRPC$TL_groupCallDiscarded();
                                                            tLRPC$TL_updateGroupCall.call = tLRPC$TL_groupCallDiscarded;
                                                            TLRPC$GroupCall tLRPC$GroupCall = groupCall.call;
                                                            tLRPC$TL_groupCallDiscarded.id = tLRPC$GroupCall.id;
                                                            tLRPC$TL_groupCallDiscarded.access_hash = tLRPC$GroupCall.access_hash;
                                                            groupCall.processGroupCallUpdate(tLRPC$TL_updateGroupCall);
                                                            if (VoIPService.getSharedInstance() != null) {
                                                                VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall.call);
                                                            }
                                                        }
                                                    }
                                                    loadFullChat(tLRPC$TL_updateChannel.channel_id, 0, true);
                                                    i3 |= UPDATE_MASK_CHAT;
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChat) {
                                                    TLRPC$TL_updateChat tLRPC$TL_updateChat = (TLRPC$TL_updateChat) tLRPC$Update;
                                                    TLRPC$Chat chat2 = getChat(Long.valueOf(tLRPC$TL_updateChat.chat_id));
                                                    if (chat2 != null && ((chat2 instanceof TLRPC$TL_chatForbidden) || chat2.kicked)) {
                                                        ChatObject.Call groupCall2 = getGroupCall(chat2.id, false);
                                                        if (groupCall2 != null) {
                                                            TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall2 = new TLRPC$TL_updateGroupCall();
                                                            tLRPC$TL_updateGroupCall2.chat_id = chat2.id;
                                                            TLRPC$TL_groupCallDiscarded tLRPC$TL_groupCallDiscarded2 = new TLRPC$TL_groupCallDiscarded();
                                                            tLRPC$TL_updateGroupCall2.call = tLRPC$TL_groupCallDiscarded2;
                                                            TLRPC$GroupCall tLRPC$GroupCall2 = groupCall2.call;
                                                            tLRPC$TL_groupCallDiscarded2.id = tLRPC$GroupCall2.id;
                                                            tLRPC$TL_groupCallDiscarded2.access_hash = tLRPC$GroupCall2.access_hash;
                                                            groupCall2.processGroupCallUpdate(tLRPC$TL_updateGroupCall2);
                                                            if (VoIPService.getSharedInstance() != null) {
                                                                VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall2.call);
                                                            }
                                                        }
                                                        TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(-chat2.id);
                                                        if (tLRPC$Dialog3 != null) {
                                                            long j13 = tLRPC$Dialog3.id;
                                                            i11 = 0;
                                                            deleteDialog(j13, 0);
                                                            loadFullChat(tLRPC$TL_updateChat.chat_id, i11, true);
                                                            i3 |= UPDATE_MASK_CHAT;
                                                        }
                                                    }
                                                    i11 = 0;
                                                    loadFullChat(tLRPC$TL_updateChat.chat_id, i11, true);
                                                    i3 |= UPDATE_MASK_CHAT;
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateChatDefaultBannedRights) {
                                                    TLRPC$TL_updateChatDefaultBannedRights tLRPC$TL_updateChatDefaultBannedRights = (TLRPC$TL_updateChatDefaultBannedRights) tLRPC$Update;
                                                    TLRPC$Peer tLRPC$Peer4 = tLRPC$TL_updateChatDefaultBannedRights.peer;
                                                    long j14 = tLRPC$Peer4.channel_id;
                                                    if (j14 == 0) {
                                                        j14 = tLRPC$Peer4.chat_id;
                                                    }
                                                    final TLRPC$Chat chat3 = getChat(Long.valueOf(j14));
                                                    if (chat3 != null) {
                                                        chat3.default_banned_rights = tLRPC$TL_updateChatDefaultBannedRights.default_banned_rights;
                                                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda46
                                                            @Override // java.lang.Runnable
                                                            public final void run() {
                                                                MessagesController.this.lambda$processUpdateArray$378(chat3);
                                                            }
                                                        });
                                                    }
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateBotCommands) {
                                                    TLRPC$TL_updateBotCommands tLRPC$TL_updateBotCommands = (TLRPC$TL_updateBotCommands) tLRPC$Update;
                                                    getMediaDataController().updateBotInfo(MessageObject.getPeerId(tLRPC$TL_updateBotCommands.peer), tLRPC$TL_updateBotCommands);
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSets) {
                                                    TLRPC$TL_updateStickerSets tLRPC$TL_updateStickerSets = (TLRPC$TL_updateStickerSets) tLRPC$Update;
                                                    getMediaDataController().loadStickers(0, false, true);
                                                } else if (tLRPC$Update instanceof TLRPC$TL_updateStickerSetsOrder) {
                                                    TLRPC$TL_updateStickerSetsOrder tLRPC$TL_updateStickerSetsOrder = (TLRPC$TL_updateStickerSetsOrder) tLRPC$Update;
                                                    if (tLRPC$TL_updateStickerSetsOrder.masks) {
                                                        i10 = 1;
                                                    } else {
                                                        i10 = tLRPC$TL_updateStickerSetsOrder.emojis ? 5 : 0;
                                                    }
                                                    getMediaDataController().reorderStickers(i10, tLRPC$TL_updateStickerSetsOrder.order, false);
                                                } else {
                                                    boolean z10 = tLRPC$Update instanceof TLRPC$TL_updateRecentReactions;
                                                    if (z10) {
                                                        getMediaDataController().loadRecentAndTopReactions(true);
                                                    } else if (z10) {
                                                        getMediaDataController().loadSavedReactions(true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedReactionTags) {
                                                        getSavedReactionTags(0L, true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateFavedStickers) {
                                                        getMediaDataController().loadRecents(2, false, false, true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateContactsReset) {
                                                        getContactsController().forceImportContacts();
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateNewStickerSet) {
                                                        getMediaDataController().addNewStickerSet(((TLRPC$TL_updateNewStickerSet) tLRPC$Update).stickerset);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedGifs) {
                                                        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0L).commit();
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentStickers) {
                                                        this.emojiPreferences.edit().putLong("lastStickersLoadTime", 0L).commit();
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDraftMessage) {
                                                        TLRPC$TL_updateDraftMessage tLRPC$TL_updateDraftMessage = (TLRPC$TL_updateDraftMessage) tLRPC$Update;
                                                        TLRPC$Peer tLRPC$Peer5 = tLRPC$TL_updateDraftMessage.peer;
                                                        long j15 = tLRPC$Peer5.user_id;
                                                        if (j15 == 0) {
                                                            long j16 = tLRPC$Peer5.channel_id;
                                                            j15 = j16 != 0 ? -j16 : -tLRPC$Peer5.chat_id;
                                                        }
                                                        getMediaDataController().saveDraft(j15, tLRPC$TL_updateDraftMessage.top_msg_id, tLRPC$TL_updateDraftMessage.draft, null, true);
                                                        z9 = true;
                                                    } else if (tLRPC$Update instanceof TL_stories$TL_updateStoriesStealthMode) {
                                                        getStoriesController().setStealthMode(((TL_stories$TL_updateStoriesStealthMode) tLRPC$Update).stealth_mode);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedStickers) {
                                                        getMediaDataController().markFeaturedStickersAsRead(false, false);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadFeaturedEmojiStickers) {
                                                        getMediaDataController().markFeaturedStickersAsRead(true, false);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMoveStickerSetToTop) {
                                                        TLRPC$TL_updateMoveStickerSetToTop tLRPC$TL_updateMoveStickerSetToTop = (TLRPC$TL_updateMoveStickerSetToTop) tLRPC$Update;
                                                        getMediaDataController().moveStickerSetToTop(tLRPC$TL_updateMoveStickerSetToTop.stickerset, tLRPC$TL_updateMoveStickerSetToTop.emojis, tLRPC$TL_updateMoveStickerSetToTop.masks);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopic) {
                                                        TLRPC$TL_updateChannelPinnedTopic tLRPC$TL_updateChannelPinnedTopic = (TLRPC$TL_updateChannelPinnedTopic) tLRPC$Update;
                                                        ArrayList<Integer> currentPinnedOrder = getTopicsController().getCurrentPinnedOrder(tLRPC$TL_updateChannelPinnedTopic.channel_id);
                                                        currentPinnedOrder.remove(Integer.valueOf(tLRPC$TL_updateChannelPinnedTopic.topic_id));
                                                        if (tLRPC$TL_updateChannelPinnedTopic.pinned) {
                                                            currentPinnedOrder.add(0, Integer.valueOf(tLRPC$TL_updateChannelPinnedTopic.topic_id));
                                                        }
                                                        getTopicsController().applyPinnedOrder(tLRPC$TL_updateChannelPinnedTopic.channel_id, currentPinnedOrder);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedTopics) {
                                                        TLRPC$TL_updateChannelPinnedTopics tLRPC$TL_updateChannelPinnedTopics = (TLRPC$TL_updateChannelPinnedTopics) tLRPC$Update;
                                                        if ((tLRPC$TL_updateChannelPinnedTopics.flags & 1) != 0) {
                                                            getTopicsController().applyPinnedOrder(tLRPC$TL_updateChannelPinnedTopics.channel_id, tLRPC$TL_updateChannelPinnedTopics.order);
                                                        } else {
                                                            getTopicsController().reloadTopics(tLRPC$TL_updateChannelPinnedTopics.channel_id, false);
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCallSignalingData) {
                                                        TLRPC$TL_updatePhoneCallSignalingData tLRPC$TL_updatePhoneCallSignalingData = (TLRPC$TL_updatePhoneCallSignalingData) tLRPC$Update;
                                                        VoIPService sharedInstance = VoIPService.getSharedInstance();
                                                        if (sharedInstance != null) {
                                                            sharedInstance.onSignalingData(tLRPC$TL_updatePhoneCallSignalingData);
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCallParticipants) {
                                                        TLRPC$TL_updateGroupCallParticipants tLRPC$TL_updateGroupCallParticipants = (TLRPC$TL_updateGroupCallParticipants) tLRPC$Update;
                                                        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_updateGroupCallParticipants.call.id);
                                                        if (call != null) {
                                                            call.processParticipantsUpdate(tLRPC$TL_updateGroupCallParticipants, false);
                                                        }
                                                        if (VoIPService.getSharedInstance() != null) {
                                                            VoIPService.getSharedInstance().onGroupCallParticipantsUpdate(tLRPC$TL_updateGroupCallParticipants);
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateGroupCall) {
                                                        TLRPC$TL_updateGroupCall tLRPC$TL_updateGroupCall3 = (TLRPC$TL_updateGroupCall) tLRPC$Update;
                                                        ChatObject.Call call2 = this.groupCalls.get(tLRPC$TL_updateGroupCall3.call.id);
                                                        if (call2 != null) {
                                                            call2.processGroupCallUpdate(tLRPC$TL_updateGroupCall3);
                                                            TLRPC$Chat chat4 = getChat(Long.valueOf(call2.chatId));
                                                            if (chat4 != null) {
                                                                chat4.call_active = tLRPC$TL_updateGroupCall3.call instanceof TLRPC$TL_groupCall;
                                                            }
                                                        } else {
                                                            TLRPC$ChatFull chatFull2 = getChatFull(tLRPC$TL_updateGroupCall3.chat_id);
                                                            if (chatFull2 != null && ((tLRPC$TL_inputGroupCall = chatFull2.call) == null || (tLRPC$TL_inputGroupCall != null && tLRPC$TL_inputGroupCall.id != tLRPC$TL_updateGroupCall3.call.id))) {
                                                                loadFullChat(tLRPC$TL_updateGroupCall3.chat_id, 0, true);
                                                            }
                                                        }
                                                        if (VoIPService.getSharedInstance() != null) {
                                                            VoIPService.getSharedInstance().onGroupCallUpdated(tLRPC$TL_updateGroupCall3.call);
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePhoneCall) {
                                                        TLRPC$PhoneCall tLRPC$PhoneCall = ((TLRPC$TL_updatePhoneCall) tLRPC$Update).phone_call;
                                                        VoIPService sharedInstance2 = VoIPService.getSharedInstance();
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("Received call in update: " + tLRPC$PhoneCall);
                                                            FileLog.d("call id " + tLRPC$PhoneCall.id);
                                                        }
                                                        if (tLRPC$PhoneCall instanceof TLRPC$TL_phoneCallRequested) {
                                                            if (tLRPC$PhoneCall.date + (this.callRingTimeout / 1000) < getConnectionsManager().getCurrentTime()) {
                                                                if (BuildVars.LOGS_ENABLED) {
                                                                    FileLog.d("ignoring too old call");
                                                                }
                                                            } else {
                                                                int i28 = Build.VERSION.SDK_INT;
                                                                if (i28 < 21 || NotificationManagerCompat.from(ApplicationLoader.applicationContext).areNotificationsEnabled()) {
                                                                    z5 = false;
                                                                } else if (!ApplicationLoader.mainInterfacePaused && ApplicationLoader.isScreenOn) {
                                                                    z5 = true;
                                                                } else if (BuildVars.LOGS_ENABLED) {
                                                                    FileLog.d("Ignoring incoming call because notifications are disabled in system");
                                                                }
                                                                TelephonyManager telephonyManager = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService("phone");
                                                                if (i28 >= 31) {
                                                                    try {
                                                                        if (ContextCompat.checkSelfPermission(ApplicationLoader.applicationContext, "android.permission.READ_PHONE_STATE") == 0) {
                                                                            callStateForSubscription = telephonyManager.getCallStateForSubscription();
                                                                        }
                                                                    } catch (Throwable th) {
                                                                        FileLog.e(th);
                                                                    }
                                                                    z6 = true;
                                                                }
                                                                FileLog.e("updatePhoneCall: svc=" + sharedInstance2 + " callIShouldHavePutIntoIntent=" + VoIPService.callIShouldHavePutIntoIntent + " callStateIsIdle=" + z6);
                                                                if (sharedInstance2 != null || VoIPService.callIShouldHavePutIntoIntent != null || !z6) {
                                                                    if (BuildVars.LOGS_ENABLED) {
                                                                        FileLog.d("Auto-declining call " + tLRPC$PhoneCall.id + " because there's already active one");
                                                                    }
                                                                    TLRPC$TL_phone_discardCall tLRPC$TL_phone_discardCall = new TLRPC$TL_phone_discardCall();
                                                                    TLRPC$TL_inputPhoneCall tLRPC$TL_inputPhoneCall = new TLRPC$TL_inputPhoneCall();
                                                                    tLRPC$TL_phone_discardCall.peer = tLRPC$TL_inputPhoneCall;
                                                                    tLRPC$TL_inputPhoneCall.access_hash = tLRPC$PhoneCall.access_hash;
                                                                    tLRPC$TL_inputPhoneCall.id = tLRPC$PhoneCall.id;
                                                                    tLRPC$TL_phone_discardCall.reason = new TLRPC$TL_phoneCallDiscardReasonBusy();
                                                                    FileLog.e("discardCall " + tLRPC$TL_phone_discardCall.reason);
                                                                    getConnectionsManager().sendRequest(tLRPC$TL_phone_discardCall, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda47
                                                                        @Override // org.telegram.tgnet.RequestDelegate
                                                                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                                                            MessagesController.this.lambda$processUpdateArray$379(tLObject, tLRPC$TL_error);
                                                                        }
                                                                    });
                                                                } else {
                                                                    if (BuildVars.LOGS_ENABLED) {
                                                                        FileLog.d("Starting service for call " + tLRPC$PhoneCall.id);
                                                                    }
                                                                    VoIPService.callIShouldHavePutIntoIntent = tLRPC$PhoneCall;
                                                                    FileLog.e("set VoIPService.callIShouldHavePutIntoIntent = " + tLRPC$PhoneCall);
                                                                    Intent intent = new Intent(ApplicationLoader.applicationContext, VoIPService.class);
                                                                    intent.putExtra("is_outgoing", false);
                                                                    intent.putExtra("user_id", tLRPC$PhoneCall.participant_id == getUserConfig().getClientUserId() ? tLRPC$PhoneCall.admin_id : tLRPC$PhoneCall.participant_id);
                                                                    intent.putExtra("account", this.currentAccount);
                                                                    intent.putExtra("notifications_disabled", z5);
                                                                    if (!z5) {
                                                                        try {
                                                                            if (Build.VERSION.SDK_INT >= 26) {
                                                                                ApplicationLoader.applicationContext.startForegroundService(intent);
                                                                                if (!ApplicationLoader.mainInterfacePaused || !ApplicationLoader.isScreenOn) {
                                                                                    this.ignoreSetOnline = true;
                                                                                }
                                                                            }
                                                                        } catch (Throwable th2) {
                                                                            FileLog.e(th2);
                                                                        }
                                                                    }
                                                                    ApplicationLoader.applicationContext.startService(intent);
                                                                    if (!ApplicationLoader.mainInterfacePaused) {
                                                                    }
                                                                    this.ignoreSetOnline = true;
                                                                }
                                                            }
                                                        } else if (sharedInstance2 != null && tLRPC$PhoneCall != null) {
                                                            sharedInstance2.onCallUpdated(tLRPC$PhoneCall);
                                                        } else if (VoIPService.callIShouldHavePutIntoIntent != null) {
                                                            if (BuildVars.LOGS_ENABLED) {
                                                                FileLog.d("Updated the call while the service is starting");
                                                            }
                                                            if (tLRPC$PhoneCall.id == VoIPService.callIShouldHavePutIntoIntent.id) {
                                                                if (tLRPC$PhoneCall instanceof TLRPC$TL_phoneCallDiscarded) {
                                                                    tLRPC$PhoneCall = null;
                                                                }
                                                                VoIPService.callIShouldHavePutIntoIntent = tLRPC$PhoneCall;
                                                                FileLog.e("(2) set VoIPService.callIShouldHavePutIntoIntent = " + VoIPService.callIShouldHavePutIntoIntent);
                                                            }
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogUnreadMark) {
                                                        TLRPC$TL_updateDialogUnreadMark tLRPC$TL_updateDialogUnreadMark = (TLRPC$TL_updateDialogUnreadMark) tLRPC$Update;
                                                        TLRPC$DialogPeer tLRPC$DialogPeer3 = tLRPC$TL_updateDialogUnreadMark.peer;
                                                        if (tLRPC$DialogPeer3 instanceof TLRPC$TL_dialogPeer) {
                                                            TLRPC$Peer tLRPC$Peer6 = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer3).peer;
                                                            long j17 = tLRPC$Peer6.user_id;
                                                            if (j17 == 0) {
                                                                long j18 = tLRPC$Peer6.chat_id;
                                                                if (j18 == 0) {
                                                                    j18 = tLRPC$Peer6.channel_id;
                                                                }
                                                                j17 = -j18;
                                                            }
                                                            j4 = j17;
                                                        } else {
                                                            j4 = 0;
                                                        }
                                                        getMessagesStorage().setDialogUnread(j4, tLRPC$TL_updateDialogUnreadMark.unread);
                                                        TLRPC$Dialog tLRPC$Dialog4 = this.dialogs_dict.get(j4);
                                                        if (tLRPC$Dialog4 != null) {
                                                            boolean z11 = tLRPC$Dialog4.unread_mark;
                                                            boolean z12 = tLRPC$TL_updateDialogUnreadMark.unread;
                                                            if (z11 != z12) {
                                                                tLRPC$Dialog4.unread_mark = z12;
                                                                if (tLRPC$Dialog4.unread_count == 0 && !isDialogMuted(j4, 0L)) {
                                                                    if (tLRPC$Dialog4.unread_mark) {
                                                                        this.unreadUnmutedDialogs++;
                                                                    } else {
                                                                        this.unreadUnmutedDialogs--;
                                                                    }
                                                                }
                                                                i3 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                                                                i15 |= DIALOG_FILTER_FLAG_EXCLUDE_READ;
                                                            }
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) {
                                                        TLRPC$TL_updateMessagePoll tLRPC$TL_updateMessagePoll = (TLRPC$TL_updateMessagePoll) tLRPC$Update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdatePollResults, Long.valueOf(tLRPC$TL_updateMessagePoll.poll_id), tLRPC$TL_updateMessagePoll.poll, tLRPC$TL_updateMessagePoll.results);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerSettings) {
                                                        TLRPC$TL_updatePeerSettings tLRPC$TL_updatePeerSettings = (TLRPC$TL_updatePeerSettings) tLRPC$Update;
                                                        TLRPC$Peer tLRPC$Peer7 = tLRPC$TL_updatePeerSettings.peer;
                                                        if (tLRPC$Peer7 instanceof TLRPC$TL_peerUser) {
                                                            j3 = tLRPC$Peer7.user_id;
                                                        } else {
                                                            if (tLRPC$Peer7 instanceof TLRPC$TL_peerChat) {
                                                                j2 = tLRPC$Peer7.chat_id;
                                                            } else {
                                                                j2 = tLRPC$Peer7.channel_id;
                                                            }
                                                            j3 = -j2;
                                                        }
                                                        savePeerSettings(j3, tLRPC$TL_updatePeerSettings.settings, true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerLocated) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.newPeopleNearbyAvailable, tLRPC$Update);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessageReactions) {
                                                        TLRPC$TL_updateMessageReactions tLRPC$TL_updateMessageReactions = (TLRPC$TL_updateMessageReactions) tLRPC$Update;
                                                        long peerId = MessageObject.getPeerId(tLRPC$TL_updateMessageReactions.peer);
                                                        long pendingPaidReactions = StarsController.getInstance(this.currentAccount).getPendingPaidReactions(peerId, tLRPC$TL_updateMessageReactions.msg_id);
                                                        if (pendingPaidReactions != 0) {
                                                            c = 1;
                                                            MessageObject.addPaidReactions(this.currentAccount, tLRPC$TL_updateMessageReactions.reactions, (int) pendingPaidReactions, StarsController.getInstance(this.currentAccount).arePaidReactionsAnonymous(StarsController.MessageId.from(peerId, tLRPC$TL_updateMessageReactions.msg_id), tLRPC$TL_updateMessageReactions.reactions), true);
                                                        } else {
                                                            c = 1;
                                                        }
                                                        NotificationCenter notificationCenter = getNotificationCenter();
                                                        int i29 = NotificationCenter.didUpdateReactions;
                                                        Object[] objArr = new Object[3];
                                                        objArr[0] = Long.valueOf(peerId);
                                                        objArr[c] = Integer.valueOf(tLRPC$TL_updateMessageReactions.msg_id);
                                                        objArr[2] = tLRPC$TL_updateMessageReactions.reactions;
                                                        notificationCenter.lambda$postNotificationNameOnUIThread$1(i29, objArr);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateMessageExtendedMedia) {
                                                        TLRPC$TL_updateMessageExtendedMedia tLRPC$TL_updateMessageExtendedMedia = (TLRPC$TL_updateMessageExtendedMedia) tLRPC$Update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateExtendedMedia, Long.valueOf(DialogObject.getPeerDialogId(tLRPC$TL_updateMessageExtendedMedia.peer)), Integer.valueOf(tLRPC$TL_updateMessageExtendedMedia.msg_id), tLRPC$TL_updateMessageExtendedMedia.extended_media);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTheme) {
                                                        Theme.setThemeUploadInfo(null, null, (TLRPC$TL_theme) ((TLRPC$TL_updateTheme) tLRPC$Update).theme, this.currentAccount, true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilter) {
                                                        loadRemoteFilters(true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilterOrder) {
                                                        loadRemoteFilters(true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateDialogFilters) {
                                                        loadRemoteFilters(true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateRecentEmojiStatuses) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.recentEmojiStatusesUpdate, new Object[0]);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateWebViewResultSent) {
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.webViewResultSent, Long.valueOf(((TLRPC$TL_updateWebViewResultSent) tLRPC$Update).query_id));
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateAttachMenuBots) {
                                                        getMediaDataController().loadAttachMenuBots(false, true);
                                                    } else if (tLRPC$Update instanceof TL_bots$TL_updateBotMenuButton) {
                                                        TL_bots$TL_updateBotMenuButton tL_bots$TL_updateBotMenuButton = (TL_bots$TL_updateBotMenuButton) tLRPC$Update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateBotMenuButton, Long.valueOf(tL_bots$TL_updateBotMenuButton.bot_id), tL_bots$TL_updateBotMenuButton.button);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
                                                        TLRPC$TL_updateReadChannelDiscussionInbox tLRPC$TL_updateReadChannelDiscussionInbox = (TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.threadMessagesRead, Long.valueOf(-tLRPC$TL_updateReadChannelDiscussionInbox.channel_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.top_msg_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id), 0);
                                                        if ((tLRPC$TL_updateReadChannelDiscussionInbox.flags & 1) != 0) {
                                                            getMessagesStorage().updateRepliesMaxReadId(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_id, tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_post, tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id, 0, true);
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.commentsRead, Long.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.broadcast_post), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionInbox.read_max_id));
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
                                                        TLRPC$TL_updateReadChannelDiscussionOutbox tLRPC$TL_updateReadChannelDiscussionOutbox = (TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update;
                                                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.threadMessagesRead, Long.valueOf(-tLRPC$TL_updateReadChannelDiscussionOutbox.channel_id), Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionOutbox.top_msg_id), 0, Integer.valueOf(tLRPC$TL_updateReadChannelDiscussionOutbox.read_max_id));
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePeerHistoryTTL) {
                                                        TLRPC$TL_updatePeerHistoryTTL tLRPC$TL_updatePeerHistoryTTL = (TLRPC$TL_updatePeerHistoryTTL) tLRPC$Update;
                                                        long peerId2 = MessageObject.getPeerId(tLRPC$TL_updatePeerHistoryTTL.peer);
                                                        if (peerId2 > 0) {
                                                            TLRPC$UserFull userFull = getUserFull(peerId2);
                                                            if (userFull != null) {
                                                                int i30 = tLRPC$TL_updatePeerHistoryTTL.ttl_period;
                                                                userFull.ttl_period = i30;
                                                                if (i30 == 0) {
                                                                    userFull.flags &= -16385;
                                                                } else {
                                                                    userFull.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                                                }
                                                            }
                                                            tLRPC$UserFull = userFull;
                                                            chatFull = null;
                                                        } else {
                                                            chatFull = getChatFull(-peerId2);
                                                            if (chatFull != null) {
                                                                int i31 = tLRPC$TL_updatePeerHistoryTTL.ttl_period;
                                                                chatFull.ttl_period = i31;
                                                                if (chatFull instanceof TLRPC$TL_channelFull) {
                                                                    if (i31 == 0) {
                                                                        chatFull.flags &= -16777217;
                                                                    } else {
                                                                        chatFull.flags |= ConnectionsManager.FileTypePhoto;
                                                                    }
                                                                } else if (i31 == 0) {
                                                                    chatFull.flags &= -16385;
                                                                } else {
                                                                    chatFull.flags |= LiteMode.FLAG_ANIMATED_EMOJI_KEYBOARD_NOT_PREMIUM;
                                                                }
                                                            }
                                                            tLRPC$UserFull = null;
                                                        }
                                                        if (chatFull != null) {
                                                            NotificationCenter notificationCenter2 = getNotificationCenter();
                                                            int i32 = NotificationCenter.chatInfoDidLoad;
                                                            Boolean bool4 = Boolean.FALSE;
                                                            notificationCenter2.lambda$postNotificationNameOnUIThread$1(i32, chatFull, 0, bool4, bool4);
                                                            getMessagesStorage().updateChatInfo(chatFull, false);
                                                        } else if (tLRPC$UserFull != null) {
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(peerId2), tLRPC$UserFull);
                                                            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
                                                        }
                                                        getMessagesStorage().setDialogTtl(peerId2, tLRPC$TL_updatePeerHistoryTTL.ttl_period);
                                                        TLRPC$Dialog tLRPC$Dialog5 = this.dialogs_dict.get(peerId2);
                                                        if (tLRPC$Dialog5 != null) {
                                                            tLRPC$Dialog5.ttl_period = tLRPC$TL_updatePeerHistoryTTL.ttl_period;
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, 0);
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updatePendingJoinRequests) {
                                                        getMemberRequestsController().onPendingRequestsUpdated((TLRPC$TL_updatePendingJoinRequests) tLRPC$Update);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSavedRingtones) {
                                                        getMediaDataController().ringtoneDataStore.loadUserRingtones(true);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTranscribeAudio) {
                                                        FileLog.e("Received legacy TL_updateTranscribeAudio update");
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateTranscribedAudio) {
                                                        TLRPC$TL_updateTranscribedAudio tLRPC$TL_updateTranscribedAudio = (TLRPC$TL_updateTranscribedAudio) tLRPC$Update;
                                                        if (BuildVars.LOGS_ENABLED) {
                                                            FileLog.d("Transcription update received, pending=" + tLRPC$TL_updateTranscribedAudio.pending + " id=" + tLRPC$TL_updateTranscribedAudio.transcription_id + " text=" + tLRPC$TL_updateTranscribedAudio.text);
                                                        }
                                                        if ((!tLRPC$TL_updateTranscribedAudio.pending || !TextUtils.isEmpty(tLRPC$TL_updateTranscribedAudio.text)) && (tLRPC$TL_updateTranscribedAudio.pending || !TranscribeButton.finishTranscription(null, tLRPC$TL_updateTranscribedAudio.transcription_id, tLRPC$TL_updateTranscribedAudio.text))) {
                                                            getMessagesStorage().updateMessageVoiceTranscription(DialogObject.getPeerDialogId(tLRPC$TL_updateTranscribedAudio.peer), tLRPC$TL_updateTranscribedAudio.msg_id, tLRPC$TL_updateTranscribedAudio.text, tLRPC$TL_updateTranscribedAudio.transcription_id, !tLRPC$TL_updateTranscribedAudio.pending);
                                                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.voiceTranscriptionUpdate, null, Long.valueOf(tLRPC$TL_updateTranscribedAudio.transcription_id), tLRPC$TL_updateTranscribedAudio.text, null, Boolean.valueOf(!tLRPC$TL_updateTranscribedAudio.pending));
                                                        }
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateSentStoryReaction) {
                                                        TLRPC$TL_updateSentStoryReaction tLRPC$TL_updateSentStoryReaction = (TLRPC$TL_updateSentStoryReaction) tLRPC$Update;
                                                        getStoriesController().updateStoryReaction(DialogObject.getPeerDialogId(tLRPC$TL_updateSentStoryReaction.peer), tLRPC$TL_updateSentStoryReaction.story_id, tLRPC$TL_updateSentStoryReaction.reaction);
                                                    } else if (tLRPC$Update instanceof TLRPC$TL_updateChannelViewForumAsMessages) {
                                                        TLRPC$TL_updateChannelViewForumAsMessages tLRPC$TL_updateChannelViewForumAsMessages = (TLRPC$TL_updateChannelViewForumAsMessages) tLRPC$Update;
                                                        TLRPC$ChatFull chatFull3 = getChatFull(tLRPC$TL_updateChannelViewForumAsMessages.channel_id);
                                                        if (chatFull3 != null) {
                                                            boolean z13 = chatFull3.view_forum_as_messages;
                                                            boolean z14 = tLRPC$TL_updateChannelViewForumAsMessages.enabled;
                                                            if (z13 != z14) {
                                                                chatFull3.view_forum_as_messages = z14;
                                                                if (z14) {
                                                                    chatFull3.flags2 |= 64;
                                                                } else {
                                                                    chatFull3.flags2 &= -65;
                                                                }
                                                                getMessagesStorage().updateChatInfo(chatFull3, false);
                                                            }
                                                        } else {
                                                            getMessagesController().loadFullChat(tLRPC$TL_updateChannelViewForumAsMessages.channel_id, 0, true);
                                                        }
                                                        TLRPC$Dialog dialog = getDialog(-tLRPC$TL_updateChannelViewForumAsMessages.channel_id);
                                                        if (dialog != null) {
                                                            boolean z15 = dialog.view_forum_as_messages;
                                                            boolean z16 = tLRPC$TL_updateChannelViewForumAsMessages.enabled;
                                                            if (z15 != z16) {
                                                                dialog.view_forum_as_messages = z16;
                                                                getMessagesStorage().setDialogViewThreadAsMessages(-tLRPC$TL_updateChannelViewForumAsMessages.channel_id, tLRPC$TL_updateChannelViewForumAsMessages.enabled);
                                                            }
                                                        } else {
                                                            getMessagesStorage().setDialogViewThreadAsMessages(-tLRPC$TL_updateChannelViewForumAsMessages.channel_id, tLRPC$TL_updateChannelViewForumAsMessages.enabled);
                                                        }
                                                    } else if ((tLRPC$Update instanceof TLRPC$TL_updatePinnedSavedDialogs) || (tLRPC$Update instanceof TLRPC$TL_updateSavedDialogPinned)) {
                                                        getSavedMessagesController().processUpdate(tLRPC$Update);
                                                    } else if (!QuickRepliesController.getInstance(this.currentAccount).processUpdate(tLRPC$Update, null, 0) && (applicationLoader = ApplicationLoader.applicationLoaderInstance) != null) {
                                                        applicationLoader.processUpdate(this.currentAccount, tLRPC$Update);
                                                    }
                                                }
                                            }
                                            i14 = i8 + 1;
                                            arrayList12 = arrayList;
                                            arrayList13 = arrayList10;
                                            arrayList14 = arrayList9;
                                            arrayList15 = arrayList7;
                                            size = i9;
                                        }
                                    }
                                    arrayList10 = arrayList2;
                                    i14 = i8 + 1;
                                    arrayList12 = arrayList;
                                    arrayList13 = arrayList10;
                                    arrayList14 = arrayList9;
                                    arrayList15 = arrayList7;
                                    size = i9;
                                }
                            }
                            arrayList9 = arrayList8;
                            i14 = i8 + 1;
                            arrayList12 = arrayList;
                            arrayList13 = arrayList10;
                            arrayList14 = arrayList9;
                            arrayList15 = arrayList7;
                            size = i9;
                        }
                    }
                    i8 = i14;
                    arrayList7 = arrayList15;
                    i9 = i7;
                    arrayList9 = arrayList14;
                    arrayList10 = arrayList13;
                    i14 = i8 + 1;
                    arrayList12 = arrayList;
                    arrayList13 = arrayList10;
                    arrayList14 = arrayList9;
                    arrayList15 = arrayList7;
                    size = i9;
                }
                i8 = i14;
                arrayList7 = arrayList15;
                i9 = size;
                arrayList9 = arrayList14;
                arrayList10 = arrayList13;
                i14 = i8 + 1;
                arrayList12 = arrayList;
                arrayList13 = arrayList10;
                arrayList14 = arrayList9;
                arrayList15 = arrayList7;
                size = i9;
            }
            ArrayList<TLRPC$User> arrayList21 = arrayList15;
            ArrayList<TLRPC$User> arrayList22 = arrayList14;
            if (editor != null) {
                editor.commit();
                z4 = false;
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            } else {
                z4 = false;
            }
            getMessagesStorage().updateUsers(arrayList21, true, true, true);
            getMessagesStorage().updateUsers(arrayList22, z4, true, true);
            i4 = i15;
            z2 = z9;
        } else {
            i3 = i;
            i4 = 0;
            z2 = false;
        }
        if (longSparseArray != null) {
            int size3 = longSparseArray.size();
            for (int i33 = 0; i33 < size3; i33++) {
                ChatObject.Call call3 = this.groupCallsByChatId.get(longSparseArray.keyAt(i33));
                if (call3 != null) {
                    call3.processTypingsUpdate(getAccountInstance(), (ArrayList) longSparseArray.valueAt(i33), i2);
                }
            }
        }
        if (longSparseIntArray != null) {
            int size4 = longSparseIntArray.size();
            for (int i34 = 0; i34 < size4; i34++) {
                SendMessagesHelper.ImportingHistory importingHistory = getSendMessagesHelper().getImportingHistory(longSparseIntArray.keyAt(i34));
                if (importingHistory != null) {
                    importingHistory.setImportProgress(longSparseIntArray.valueAt(i34));
                }
            }
        }
        if (longSparseArray2 != null) {
            int i35 = 1;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceivedWebpagesInUpdates, longSparseArray2);
            int i36 = 0;
            int i37 = 3;
            while (i36 < i37) {
                if (i36 == i35) {
                    longSparseArray11 = this.reloadingScheduledWebpagesPending;
                    i6 = 1;
                } else if (i36 == 2) {
                    longSparseArray11 = this.reloadingSavedWebpagesPending;
                    i6 = 3;
                } else {
                    longSparseArray11 = this.reloadingWebpagesPending;
                    i6 = 0;
                }
                int size5 = longSparseArray2.size();
                int i38 = 0;
                while (i38 < size5) {
                    long keyAt = longSparseArray2.keyAt(i38);
                    ArrayList<MessageObject> arrayList23 = longSparseArray11.get(keyAt);
                    longSparseArray11.remove(keyAt);
                    if (arrayList23 != null) {
                        TLRPC$WebPage tLRPC$WebPage = (TLRPC$WebPage) longSparseArray2.valueAt(i38);
                        ArrayList<TLRPC$Message> arrayList24 = new ArrayList<>();
                        if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                            int size6 = arrayList23.size();
                            int i39 = 0;
                            j = 0;
                            while (i39 < size6) {
                                LongSparseArray<ArrayList<MessageObject>> longSparseArray13 = longSparseArray11;
                                arrayList23.get(i39).messageOwner.media.webpage = tLRPC$WebPage;
                                if (i39 == 0) {
                                    j = arrayList23.get(i39).getDialogId();
                                    ImageLoader.saveMessageThumbs(arrayList23.get(i39).messageOwner);
                                }
                                arrayList24.add(arrayList23.get(i39).messageOwner);
                                i39++;
                                longSparseArray11 = longSparseArray13;
                            }
                            longSparseArray12 = longSparseArray11;
                        } else {
                            longSparseArray11.put(tLRPC$WebPage.id, arrayList23);
                            longSparseArray12 = longSparseArray11;
                            j = 0;
                        }
                        if (!arrayList24.isEmpty()) {
                            getMessagesStorage().putMessages(arrayList24, true, true, false, getDownloadController().getAutodownloadMask(), i6, 0L);
                            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList23);
                        }
                    } else {
                        longSparseArray12 = longSparseArray11;
                    }
                    i38++;
                    longSparseArray11 = longSparseArray12;
                }
                i36++;
                i37 = 3;
                i35 = 1;
            }
        }
        if (i4 != 0) {
            int i40 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i40 >= dialogFilterArr.length) {
                    break;
                }
                DialogFilter dialogFilter = dialogFilterArr[i40];
                if (dialogFilter != null && (dialogFilter.flags & i4) != 0) {
                    longSparseArray9 = longSparseArray3;
                    z2 = true;
                    break;
                }
                i40++;
            }
        }
        longSparseArray9 = longSparseArray3;
        if (longSparseArray9 != null) {
            int size7 = longSparseArray3.size();
            boolean z17 = false;
            for (int i41 = 0; i41 < size7; i41++) {
                if (updateInterfaceWithMessages(longSparseArray9.keyAt(i41), (ArrayList) longSparseArray9.valueAt(i41), 0)) {
                    z17 = true;
                }
            }
            if (applyFoldersUpdates(arrayList3) || (!z17 && z2)) {
                sortDialogs(null);
            }
        } else {
            boolean applyFoldersUpdates = applyFoldersUpdates(arrayList3);
            if (!z2 && !applyFoldersUpdates) {
                longSparseArray10 = longSparseArray4;
                z3 = false;
                if (longSparseArray10 != null) {
                    int size8 = longSparseArray4.size();
                    for (int i42 = 0; i42 < size8; i42++) {
                        updateInterfaceWithMessages(longSparseArray10.keyAt(i42), (ArrayList) longSparseArray10.valueAt(i42), 1);
                    }
                }
                if (longSparseArray5 != null) {
                    int size9 = longSparseArray5.size();
                    for (int i43 = 0; i43 < size9; i43++) {
                        long keyAt2 = longSparseArray5.keyAt(i43);
                        ArrayList<MessageObject> arrayList25 = (ArrayList) longSparseArray5.valueAt(i43);
                        int size10 = arrayList25.size();
                        SparseBooleanArray sparseBooleanArray = null;
                        for (int i44 = 0; i44 < size10; i44++) {
                            MessageObject messageObject3 = arrayList25.get(i44);
                            if (keyAt2 > 0) {
                                if (sparseBooleanArray == null) {
                                    sparseBooleanArray = new SparseBooleanArray();
                                }
                                sparseBooleanArray.put(messageObject3.getId(), MessageObject.hasUnreadReactions(messageObject3.messageOwner));
                            }
                        }
                        if (keyAt2 > 0) {
                            checkUnreadReactions(keyAt2, 0L, sparseBooleanArray);
                        }
                        ArrayList<MessageObject> arrayList26 = this.dialogMessage.get(keyAt2);
                        if (arrayList26 != null) {
                            boolean z18 = z3;
                            for (int i45 = 0; i45 < arrayList26.size(); i45++) {
                                MessageObject messageObject4 = arrayList26.get(i45);
                                int size11 = arrayList25.size();
                                int i46 = 0;
                                while (true) {
                                    if (i46 >= size11) {
                                        break;
                                    }
                                    MessageObject messageObject5 = arrayList25.get(i46);
                                    if (messageObject4.getId() == messageObject5.getId()) {
                                        arrayList26.set(i45, messageObject5);
                                        TLRPC$Peer tLRPC$Peer8 = messageObject5.messageOwner.peer_id;
                                        if (tLRPC$Peer8 != null && tLRPC$Peer8.channel_id == 0) {
                                            this.dialogMessagesByIds.put(messageObject5.getId(), messageObject5);
                                        }
                                        z18 = true;
                                    } else if (messageObject4.getDialogId() == messageObject5.getDialogId() && (messageObject4.messageOwner.action instanceof TLRPC$TL_messageActionPinMessage) && (messageObject = messageObject4.replyMessageObject) != null && messageObject.getId() == messageObject5.getId()) {
                                        messageObject4.replyMessageObject = messageObject5;
                                        messageObject4.generatePinMessageText(null, null);
                                        z18 = true;
                                        break;
                                    } else {
                                        i46++;
                                    }
                                }
                            }
                            z3 = z18;
                        }
                        getMediaDataController().loadReplyMessagesForMessages(arrayList25, keyAt2, 0, 0L, null, 0, null);
                        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.replaceMessagesObjects, Long.valueOf(keyAt2), arrayList25, Boolean.FALSE);
                    }
                }
                if (z3) {
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                if (z) {
                    i3 |= UPDATE_MASK_USER_PRINT;
                }
                if (arrayList4 != null) {
                    i3 = i3 | UPDATE_MASK_NAME | UPDATE_MASK_USER_PHONE;
                }
                if (arrayList5 != null) {
                    int size12 = arrayList5.size();
                    for (int i47 = 0; i47 < size12; i47++) {
                        getMessagesStorage().updateChatParticipants((TLRPC$ChatParticipants) arrayList5.get(i47));
                    }
                }
                if (longSparseArray6 != null && longSparseArray7 == null && longSparseArray8 == null) {
                    i5 = 1;
                } else {
                    i5 = 1;
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
                }
                if (i3 != 0) {
                    NotificationCenter notificationCenter3 = getNotificationCenter();
                    int i48 = NotificationCenter.updateInterfaces;
                    Object[] objArr2 = new Object[i5];
                    objArr2[0] = Integer.valueOf(i3);
                    notificationCenter3.lambda$postNotificationNameOnUIThread$1(i48, objArr2);
                }
                if (arrayList6 == null) {
                    ImageLoader.getInstance().putThumbsToCache(arrayList6);
                    return;
                }
                return;
            }
            sortDialogs(null);
        }
        longSparseArray10 = longSparseArray4;
        z3 = true;
        if (longSparseArray10 != null) {
        }
        if (longSparseArray5 != null) {
        }
        if (z3) {
        }
        if (z) {
        }
        if (arrayList4 != null) {
        }
        if (arrayList5 != null) {
        }
        if (longSparseArray6 != null) {
        }
        i5 = 1;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didUpdateMessagesViews, longSparseArray6, longSparseArray7, longSparseArray8, Boolean.TRUE);
        if (i3 != 0) {
        }
        if (arrayList6 == null) {
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$382(final LongSparseIntArray longSparseIntArray, final LongSparseIntArray longSparseIntArray2, final SparseIntArray sparseIntArray, final LongSparseArray longSparseArray, final LongSparseArray longSparseArray2, final LongSparseArray longSparseArray3, final LongSparseArray longSparseArray4, final LongSparseIntArray longSparseIntArray3) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda214
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$processUpdateArray$381(longSparseIntArray, longSparseIntArray2, sparseIntArray, longSparseArray, longSparseArray2, longSparseArray3, longSparseArray4, longSparseIntArray3);
            }
        });
    }

    /* JADX WARN: Code restructure failed: missing block: B:338:0x02fe, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(getChat(java.lang.Long.valueOf(r3))) != false) goto L101;
     */
    /* JADX WARN: Removed duplicated region for block: B:235:0x00a8  */
    /* JADX WARN: Removed duplicated region for block: B:397:0x00d0 A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r15v10 */
    /* JADX WARN: Type inference failed for: r15v12 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$processUpdateArray$381(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, LongSparseArray longSparseArray4, LongSparseIntArray longSparseIntArray3) {
        int i;
        ArrayList<MessageObject> arrayList;
        int i2;
        int i3;
        int i4;
        long j;
        int i5;
        ArrayList<MessageObject> arrayList2;
        int i6 = 0;
        if (longSparseIntArray != null || longSparseIntArray2 != null) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesRead, longSparseIntArray, longSparseIntArray2);
            if (longSparseIntArray != null) {
                getNotificationsController().processReadMessages(longSparseIntArray, 0L, 0, 0, false);
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                int size = longSparseIntArray.size();
                int i7 = 0;
                int i8 = 0;
                while (i8 < size) {
                    long keyAt = longSparseIntArray.keyAt(i8);
                    int valueAt = longSparseIntArray.valueAt(i8);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                    int i9 = size;
                    if (tLRPC$Dialog == null || (i3 = tLRPC$Dialog.top_message) <= 0 || i3 > valueAt) {
                        i2 = i7;
                    } else {
                        i2 = i7;
                        ArrayList<MessageObject> arrayList3 = this.dialogMessage.get(tLRPC$Dialog.id);
                        if (arrayList3 != null) {
                            i7 = i2;
                            for (int i10 = 0; i10 < arrayList3.size(); i10++) {
                                MessageObject messageObject = arrayList3.get(i10);
                                if (messageObject != null && !messageObject.isOut()) {
                                    messageObject.setIsRead();
                                    i7 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                                }
                            }
                            if (keyAt == getUserConfig().getClientUserId()) {
                                edit.remove("diditem" + keyAt);
                                edit.remove("diditemo" + keyAt);
                            }
                            i8++;
                            size = i9;
                        }
                    }
                    i7 = i2;
                    if (keyAt == getUserConfig().getClientUserId()) {
                    }
                    i8++;
                    size = i9;
                }
                edit.commit();
                i6 = i7;
            } else {
                i6 = 0;
            }
            if (longSparseIntArray2 != null) {
                int size2 = longSparseIntArray2.size();
                int i11 = i6;
                for (int i12 = 0; i12 < size2; i12++) {
                    long keyAt2 = longSparseIntArray2.keyAt(i12);
                    int valueAt2 = longSparseIntArray2.valueAt(i12);
                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt2);
                    if (tLRPC$Dialog2 != null && valueAt2 > tLRPC$Dialog2.read_outbox_max_id) {
                        tLRPC$Dialog2.read_outbox_max_id = valueAt2;
                        i11 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                    }
                    if (tLRPC$Dialog2 != null && (i = tLRPC$Dialog2.top_message) > 0 && i <= valueAt2 && (arrayList = this.dialogMessage.get(tLRPC$Dialog2.id)) != null) {
                        for (int i13 = 0; i13 < arrayList.size(); i13++) {
                            MessageObject messageObject2 = arrayList.get(i13);
                            if (messageObject2 != null && messageObject2.isOut()) {
                                messageObject2.setIsRead();
                                i11 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                            }
                        }
                    }
                }
                i6 = i11;
            }
        }
        if (sparseIntArray != null) {
            int size3 = sparseIntArray.size();
            int i14 = i6;
            for (int i15 = 0; i15 < size3; i15++) {
                int keyAt3 = sparseIntArray.keyAt(i15);
                int valueAt3 = sparseIntArray.valueAt(i15);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesReadEncrypted, Integer.valueOf(keyAt3), Integer.valueOf(valueAt3));
                long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(keyAt3);
                if (this.dialogs_dict.get(makeEncryptedDialogId) != null && (arrayList2 = this.dialogMessage.get(makeEncryptedDialogId)) != null) {
                    for (int i16 = 0; i16 < arrayList2.size(); i16++) {
                        MessageObject messageObject3 = arrayList2.get(i16);
                        if (messageObject3 != null && messageObject3.messageOwner.date <= valueAt3) {
                            messageObject3.setIsRead();
                            i14 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                        }
                    }
                }
            }
            i4 = 1;
            i6 = i14;
        } else {
            i4 = 1;
        }
        if (longSparseArray != null) {
            int size4 = longSparseArray.size();
            for (int i17 = 0; i17 < size4; i17++) {
                long keyAt4 = longSparseArray.keyAt(i17);
                NotificationCenter notificationCenter = getNotificationCenter();
                int i18 = NotificationCenter.messagesReadContent;
                Object[] objArr = new Object[2];
                objArr[0] = Long.valueOf(keyAt4);
                objArr[i4] = (ArrayList) longSparseArray.valueAt(i17);
                notificationCenter.lambda$postNotificationNameOnUIThread$1(i18, objArr);
            }
        }
        int i19 = 3;
        if (longSparseArray2 != null) {
            int size5 = longSparseArray2.size();
            int i20 = 0;
            while (i20 < size5) {
                long keyAt5 = longSparseArray2.keyAt(i20);
                ArrayList arrayList4 = (ArrayList) longSparseArray2.valueAt(i20);
                if (arrayList4 == null) {
                    i5 = size5;
                } else {
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i21 = NotificationCenter.messagesDeleted;
                    Object[] objArr2 = new Object[i19];
                    objArr2[0] = arrayList4;
                    i5 = size5;
                    objArr2[i4] = Long.valueOf(-keyAt5);
                    objArr2[2] = Boolean.FALSE;
                    notificationCenter2.lambda$postNotificationNameOnUIThread$1(i21, objArr2);
                    if (keyAt5 == 0) {
                        int size6 = arrayList4.size();
                        for (int i22 = 0; i22 < size6; i22++) {
                            MessageObject messageObject4 = this.dialogMessagesByIds.get(((Integer) arrayList4.get(i22)).intValue());
                            if (messageObject4 != null) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("mark messages " + messageObject4.getId() + " deleted");
                                }
                                messageObject4.deleted = i4;
                            }
                        }
                    } else {
                        ArrayList<MessageObject> arrayList5 = this.dialogMessage.get(keyAt5);
                        if (arrayList5 != null) {
                            for (int i23 = 0; i23 < arrayList5.size(); i23++) {
                                MessageObject messageObject5 = arrayList5.get(i23);
                                if (messageObject5 != null) {
                                    int size7 = arrayList4.size();
                                    int i24 = 0;
                                    while (true) {
                                        if (i24 >= size7) {
                                            break;
                                        } else if (messageObject5.getId() == ((Integer) arrayList4.get(i24)).intValue()) {
                                            messageObject5.deleted = i4;
                                            break;
                                        } else {
                                            i24++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                i20++;
                size5 = i5;
                i19 = 3;
            }
            getNotificationsController().removeDeletedMessagesFromNotifications(longSparseArray2, false);
        }
        if (longSparseArray3 != null) {
            int size8 = longSparseArray3.size();
            for (int i25 = 0; i25 < size8; i25++) {
                long keyAt6 = longSparseArray3.keyAt(i25);
                ArrayList arrayList6 = (ArrayList) longSparseArray3.valueAt(i25);
                if (arrayList6 != null) {
                    NotificationCenter notificationCenter3 = getNotificationCenter();
                    int i26 = NotificationCenter.quickRepliesDeleted;
                    Object[] objArr3 = new Object[2];
                    objArr3[0] = arrayList6;
                    objArr3[i4] = Long.valueOf(keyAt6);
                    notificationCenter3.lambda$postNotificationNameOnUIThread$1(i26, objArr3);
                }
            }
        }
        if (longSparseArray4 != null) {
            int size9 = longSparseArray4.size();
            for (int i27 = 0; i27 < size9; i27++) {
                long keyAt7 = longSparseArray4.keyAt(i27);
                ArrayList arrayList7 = (ArrayList) longSparseArray4.valueAt(i27);
                if (arrayList7 != null) {
                    NotificationCenter notificationCenter4 = getNotificationCenter();
                    int i28 = NotificationCenter.messagesDeleted;
                    Object[] objArr4 = new Object[3];
                    objArr4[0] = arrayList7;
                    if (DialogObject.isChatDialog(keyAt7)) {
                        j = -keyAt7;
                    }
                    j = 0;
                    objArr4[i4] = Long.valueOf(j);
                    objArr4[2] = Boolean.TRUE;
                    notificationCenter4.lambda$postNotificationNameOnUIThread$1(i28, objArr4);
                }
            }
        }
        if (longSparseIntArray3 != null) {
            int size10 = longSparseIntArray3.size();
            for (int i29 = 0; i29 < size10; i29++) {
                long keyAt8 = longSparseIntArray3.keyAt(i29);
                int valueAt4 = longSparseIntArray3.valueAt(i29);
                long j2 = -keyAt8;
                NotificationCenter notificationCenter5 = getNotificationCenter();
                int i30 = NotificationCenter.historyCleared;
                Object[] objArr5 = new Object[2];
                objArr5[0] = Long.valueOf(j2);
                objArr5[i4] = Integer.valueOf(valueAt4);
                notificationCenter5.lambda$postNotificationNameOnUIThread$1(i30, objArr5);
                ArrayList<MessageObject> arrayList8 = this.dialogMessage.get(j2);
                if (arrayList8 != null) {
                    int i31 = 0;
                    while (true) {
                        if (i31 >= arrayList8.size()) {
                            break;
                        }
                        MessageObject messageObject6 = arrayList8.get(i31);
                        if (messageObject6 != null && messageObject6.getId() <= valueAt4) {
                            messageObject6.deleted = i4;
                            break;
                        }
                        i31++;
                    }
                }
            }
            getNotificationsController().removeDeletedHisoryFromNotifications(longSparseIntArray3);
        }
        if (i6 != 0) {
            NotificationCenter notificationCenter6 = getNotificationCenter();
            int i32 = NotificationCenter.updateInterfaces;
            Object[] objArr6 = new Object[i4];
            objArr6[0] = Integer.valueOf(i6);
            notificationCenter6.lambda$postNotificationNameOnUIThread$1(i32, objArr6);
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$383(long j, ArrayList arrayList) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, 0, 0), false);
    }

    public /* synthetic */ void lambda$processUpdateArray$384(long j, ArrayList arrayList, long j2) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, 5, (int) j2), false);
    }

    public /* synthetic */ void lambda$processUpdateArray$385(long j, int i) {
        getMessagesStorage().updateDialogsWithDeletedMessages(j, -j, new ArrayList<>(), getMessagesStorage().markMessagesAsDeleted(j, i, false, true), false);
    }

    public void checkUnreadReactions(final long j, final long j2, final SparseBooleanArray sparseBooleanArray) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda309
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkUnreadReactions$391(sparseBooleanArray, j2, j);
            }
        });
    }

    public /* synthetic */ void lambda$checkUnreadReactions$391(SparseBooleanArray sparseBooleanArray, final long j, final long j2) {
        int i;
        SQLiteCursor queryFinalized;
        final ArrayList arrayList = new ArrayList();
        StringBuilder sb = new StringBuilder();
        for (int i2 = 0; i2 < sparseBooleanArray.size(); i2++) {
            int keyAt = sparseBooleanArray.keyAt(i2);
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(keyAt);
        }
        SparseBooleanArray sparseBooleanArray2 = new SparseBooleanArray();
        try {
            if (j != 0) {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions WHERE message_id IN (%s) AND dialog_id = %d", sb, Long.valueOf(j2)), new Object[0]);
            } else {
                queryFinalized = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions_topics WHERE message_id IN (%s) AND dialog_id = %d AND topic_id = %d", sb, Long.valueOf(j2), Long.valueOf(j)), new Object[0]);
            }
            while (queryFinalized.next()) {
                sparseBooleanArray2.put(queryFinalized.intValue(0), queryFinalized.intValue(1) == 1);
            }
            queryFinalized.dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        int i3 = 0;
        int i4 = 0;
        boolean z = false;
        boolean z2 = false;
        while (i4 < sparseBooleanArray.size()) {
            int keyAt2 = sparseBooleanArray.keyAt(i4);
            boolean valueAt = sparseBooleanArray.valueAt(i4);
            if (sparseBooleanArray2.indexOfKey(keyAt2) < 0) {
                i = i3;
                z = true;
            } else if (sparseBooleanArray2.get(keyAt2) != valueAt) {
                i = i3 + (valueAt ? 1 : -1);
                z2 = true;
            } else {
                i = i3;
            }
            if (valueAt) {
                arrayList.add(Integer.valueOf(keyAt2));
            }
            if (j == 0) {
                try {
                    try {
                        SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions VALUES(?, ?, ?)");
                        executeFast.requery();
                        executeFast.bindInteger(1, keyAt2);
                        executeFast.bindInteger(2, valueAt ? 1 : 0);
                        executeFast.bindLong(3, j2);
                        executeFast.step();
                        executeFast.dispose();
                    } catch (SQLiteException e2) {
                        e = e2;
                        e.printStackTrace();
                        i4++;
                        i3 = i;
                    }
                } catch (SQLiteException e3) {
                    e = e3;
                }
            } else {
                SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions_topics VALUES(?, ?, ?, ?)");
                executeFast2.requery();
                executeFast2.bindInteger(1, keyAt2);
                try {
                    executeFast2.bindInteger(2, valueAt ? 1 : 0);
                    executeFast2.bindLong(3, j2);
                    executeFast2.bindLong(4, j);
                    executeFast2.step();
                    executeFast2.dispose();
                } catch (SQLiteException e4) {
                    e = e4;
                    e.printStackTrace();
                    i4++;
                    i3 = i;
                }
            }
            i4++;
            i3 = i;
        }
        if (!z) {
            if (z2) {
                final int i5 = i3;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda71
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$checkUnreadReactions$390(j, j2, i5);
                    }
                });
            }
        } else if (j == 0) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = getInputPeer(j2);
            tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda69
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$387(j2, j, arrayList, tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$TL_channels_getForumTopicsByID tLRPC$TL_channels_getForumTopicsByID = new TLRPC$TL_channels_getForumTopicsByID();
            tLRPC$TL_channels_getForumTopicsByID.topics.add(Integer.valueOf((int) j));
            tLRPC$TL_channels_getForumTopicsByID.channel = getMessagesController().getInputChannel(-j2);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(tLRPC$TL_channels_getForumTopicsByID, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda70
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkUnreadReactions$389(j2, j, arrayList, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$387(final long j, final long j2, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            final int i = tLRPC$TL_messages_peerDialogs.dialogs.size() == 0 ? 0 : tLRPC$TL_messages_peerDialogs.dialogs.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda379
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$386(j, i, j2, arrayList);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$386(long j, int i, long j2, ArrayList arrayList) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(j, 0L, i, false);
            return;
        }
        tLRPC$Dialog.unread_reactions_count = i;
        getMessagesStorage().updateUnreadReactionsCount(j, j2, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), arrayList);
    }

    public /* synthetic */ void lambda$checkUnreadReactions$389(final long j, final long j2, final ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_forumTopics tLRPC$TL_messages_forumTopics = (TLRPC$TL_messages_forumTopics) tLObject;
            final int i = tLRPC$TL_messages_forumTopics.topics.size() == 0 ? 0 : tLRPC$TL_messages_forumTopics.topics.get(0).unread_reactions_count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda457
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkUnreadReactions$388(j, j2, i, arrayList);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkUnreadReactions$388(long j, long j2, int i, ArrayList arrayList) {
        getMessagesController().getTopicsController().updateReactionsUnread(j, j2, i, false);
        getMessagesStorage().updateUnreadReactionsCount(j, j2, i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(j), Long.valueOf(j2), Integer.valueOf(i), arrayList);
    }

    public /* synthetic */ void lambda$checkUnreadReactions$390(long j, long j2, int i) {
        if (j == 0) {
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
            if (tLRPC$Dialog == null) {
                getMessagesStorage().updateDialogUnreadReactions(j2, 0L, i, true);
                return;
            }
            int i2 = tLRPC$Dialog.unread_reactions_count + i;
            tLRPC$Dialog.unread_reactions_count = i2;
            if (i2 < 0) {
                tLRPC$Dialog.unread_reactions_count = 0;
            }
            getMessagesStorage().updateUnreadReactionsCount(j2, 0L, tLRPC$Dialog.unread_reactions_count);
            return;
        }
        int updateReactionsUnread = getMessagesController().getTopicsController().updateReactionsUnread(j2, j, i, true);
        if (updateReactionsUnread >= 0) {
            getMessagesStorage().updateUnreadReactionsCount(j2, j, updateReactionsUnread, true);
        }
    }

    public boolean isDialogMuted(long j, long j2) {
        return isDialogMuted(j, j2, null);
    }

    public boolean isDialogNotificationsSoundEnabled(long j, long j2) {
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        return sharedPreferences.getBoolean("sound_enabled_" + NotificationsController.getSharedPrefKey(j, j2), true);
    }

    public boolean isDialogMuted(long j, long j2, TLRPC$Chat tLRPC$Chat) {
        Boolean bool;
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY + NotificationsController.getSharedPrefKey(j, j2), -1);
        boolean z = false;
        if (i == -1) {
            if (tLRPC$Chat != null) {
                if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                    z = true;
                }
                bool = Boolean.valueOf(z);
            } else {
                bool = null;
            }
            Boolean bool2 = bool;
            if (j2 != 0) {
                return isDialogMuted(j, 0L, tLRPC$Chat);
            }
            return !getNotificationsController().isGlobalNotificationsEnabled(j, bool2, false, false);
        } else if (i == 2) {
            return true;
        } else {
            if (i == 3) {
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, j2), 0) >= getConnectionsManager().getCurrentTime()) {
                    return true;
                }
            }
            return false;
        }
    }

    public void markReactionsAsRead(long j, long j2) {
        if (j2 == 0) {
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
            if (tLRPC$Dialog != null) {
                tLRPC$Dialog.unread_reactions_count = 0;
            }
        } else {
            this.topicsController.markAllReactionsAsRead(-j, j2);
        }
        getMessagesStorage().updateUnreadReactionsCount(j, j2, 0);
        TLRPC$TL_messages_readReactions tLRPC$TL_messages_readReactions = new TLRPC$TL_messages_readReactions();
        tLRPC$TL_messages_readReactions.peer = getInputPeer(j);
        if (j2 != 0) {
            tLRPC$TL_messages_readReactions.top_msg_id = (int) j2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda55
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$markReactionsAsRead$392(tLObject, tLRPC$TL_error);
            }
        });
        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_REACTIONS_READ));
    }

    public SponsoredMessagesInfo getSponsoredMessages(final long j) {
        SponsoredMessagesInfo sponsoredMessagesInfo = this.sponsoredMessages.get(j);
        if (sponsoredMessagesInfo == null || (!sponsoredMessagesInfo.loading && Math.abs(SystemClock.elapsedRealtime() - sponsoredMessagesInfo.loadTime) > 300000)) {
            TLRPC$Chat chat = getChat(Long.valueOf(-j));
            if (ChatObject.isChannel(chat)) {
                final SponsoredMessagesInfo sponsoredMessagesInfo2 = new SponsoredMessagesInfo();
                sponsoredMessagesInfo2.loading = true;
                this.sponsoredMessages.put(j, sponsoredMessagesInfo2);
                TLRPC$TL_channels_getSponsoredMessages tLRPC$TL_channels_getSponsoredMessages = new TLRPC$TL_channels_getSponsoredMessages();
                tLRPC$TL_channels_getSponsoredMessages.channel = getInputChannel(chat);
                getConnectionsManager().sendRequest(tLRPC$TL_channels_getSponsoredMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda290
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$getSponsoredMessages$395(j, sponsoredMessagesInfo2, tLObject, tLRPC$TL_error);
                    }
                });
                return null;
            }
            return null;
        }
        return sponsoredMessagesInfo;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.lang.Integer] */
    /* JADX WARN: Type inference failed for: r6v0 */
    /* JADX WARN: Type inference failed for: r6v1, types: [java.lang.Integer] */
    /* JADX WARN: Type inference failed for: r6v5 */
    public /* synthetic */ void lambda$getSponsoredMessages$395(final long j, final SponsoredMessagesInfo sponsoredMessagesInfo, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        final ?? r6;
        ArrayList arrayList;
        final ArrayList arrayList2 = null;
        if (tLObject instanceof TLRPC$messages_SponsoredMessages) {
            final TLRPC$messages_SponsoredMessages tLRPC$messages_SponsoredMessages = (TLRPC$messages_SponsoredMessages) tLObject;
            if (tLRPC$messages_SponsoredMessages.messages.isEmpty()) {
                arrayList = null;
            } else {
                if ((tLRPC$messages_SponsoredMessages instanceof TLRPC$TL_messages_sponsoredMessages) && (tLRPC$messages_SponsoredMessages.flags & 1) > 0) {
                    arrayList2 = Integer.valueOf(tLRPC$messages_SponsoredMessages.posts_between);
                }
                ArrayList arrayList3 = new ArrayList();
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda198
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSponsoredMessages$393(tLRPC$messages_SponsoredMessages);
                    }
                });
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                int i = 0;
                for (int i2 = 0; i2 < tLRPC$messages_SponsoredMessages.users.size(); i2++) {
                    TLRPC$User tLRPC$User = tLRPC$messages_SponsoredMessages.users.get(i2);
                    longSparseArray.put(tLRPC$User.id, tLRPC$User);
                }
                for (int i3 = 0; i3 < tLRPC$messages_SponsoredMessages.chats.size(); i3++) {
                    TLRPC$Chat tLRPC$Chat = tLRPC$messages_SponsoredMessages.chats.get(i3);
                    longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                int size = tLRPC$messages_SponsoredMessages.messages.size();
                int i4 = -10000000;
                while (i < size) {
                    TLRPC$TL_sponsoredMessage tLRPC$TL_sponsoredMessage = tLRPC$messages_SponsoredMessages.messages.get(i);
                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                    if (!tLRPC$TL_sponsoredMessage.entities.isEmpty()) {
                        tLRPC$TL_message.entities = tLRPC$TL_sponsoredMessage.entities;
                        tLRPC$TL_message.flags |= 128;
                    }
                    tLRPC$TL_message.peer_id = getPeer(j);
                    tLRPC$TL_message.flags |= LiteMode.FLAG_CHAT_BLUR;
                    tLRPC$TL_message.date = getConnectionsManager().getCurrentTime();
                    int i5 = i4 - 1;
                    tLRPC$TL_message.id = i4;
                    tLRPC$TL_message.message = tLRPC$TL_sponsoredMessage.message;
                    TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$TL_sponsoredMessage.media;
                    if (tLRPC$MessageMedia != null) {
                        tLRPC$TL_message.flags |= LiteMode.FLAG_CALLS_ANIMATIONS;
                    }
                    tLRPC$TL_message.media = tLRPC$MessageMedia;
                    MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true);
                    messageObject.sponsoredId = tLRPC$TL_sponsoredMessage.random_id;
                    messageObject.sponsoredTitle = tLRPC$TL_sponsoredMessage.title;
                    messageObject.sponsoredUrl = tLRPC$TL_sponsoredMessage.url;
                    messageObject.sponsoredRecommended = tLRPC$TL_sponsoredMessage.recommended;
                    messageObject.sponsoredPhoto = tLRPC$TL_sponsoredMessage.photo;
                    messageObject.sponsoredInfo = tLRPC$TL_sponsoredMessage.sponsor_info;
                    messageObject.sponsoredAdditionalInfo = tLRPC$TL_sponsoredMessage.additional_info;
                    messageObject.sponsoredButtonText = tLRPC$TL_sponsoredMessage.button_text;
                    messageObject.sponsoredCanReport = tLRPC$TL_sponsoredMessage.can_report;
                    messageObject.sponsoredColor = tLRPC$TL_sponsoredMessage.color;
                    messageObject.sponsoredMedia = tLRPC$TL_sponsoredMessage.media;
                    messageObject.setType();
                    messageObject.textLayoutBlocks = new ArrayList<>();
                    messageObject.generateThumbs(true);
                    arrayList3.add(messageObject);
                    i++;
                    tLRPC$messages_SponsoredMessages = tLRPC$messages_SponsoredMessages;
                    i4 = i5;
                }
                arrayList = arrayList2;
                arrayList2 = arrayList3;
            }
            r6 = arrayList;
        } else {
            r6 = 0;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda199
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSponsoredMessages$394(arrayList2, j, sponsoredMessagesInfo, r6);
            }
        });
    }

    public /* synthetic */ void lambda$getSponsoredMessages$393(TLRPC$messages_SponsoredMessages tLRPC$messages_SponsoredMessages) {
        putUsers(tLRPC$messages_SponsoredMessages.users, false);
        putChats(tLRPC$messages_SponsoredMessages.chats, false);
    }

    public /* synthetic */ void lambda$getSponsoredMessages$394(ArrayList arrayList, long j, SponsoredMessagesInfo sponsoredMessagesInfo, Integer num) {
        if (arrayList == null) {
            this.sponsoredMessages.remove(j);
            return;
        }
        sponsoredMessagesInfo.loadTime = SystemClock.elapsedRealtime();
        sponsoredMessagesInfo.messages = arrayList;
        sponsoredMessagesInfo.posts_between = num;
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadSponsoredMessages, Long.valueOf(j), arrayList);
    }

    public void clearSendAsPeers() {
        this.sendAsPeers.clear();
    }

    public TLRPC$TL_channels_sendAsPeers getSendAsPeers(final long j) {
        SendAsPeersInfo sendAsPeersInfo = this.sendAsPeers.get(j);
        if (sendAsPeersInfo != null && (sendAsPeersInfo.loading || Math.abs(SystemClock.elapsedRealtime() - sendAsPeersInfo.loadTime) <= 300000)) {
            return sendAsPeersInfo.sendAsPeers;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        if (chat != null && ChatObject.canSendAsPeers(chat)) {
            final SendAsPeersInfo sendAsPeersInfo2 = new SendAsPeersInfo(this, null);
            sendAsPeersInfo2.loading = true;
            this.sendAsPeers.put(j, sendAsPeersInfo2);
            TLRPC$TL_channels_getSendAs tLRPC$TL_channels_getSendAs = new TLRPC$TL_channels_getSendAs();
            tLRPC$TL_channels_getSendAs.peer = getInputPeer(j);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getSendAs, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda384
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getSendAsPeers$398(j, sendAsPeersInfo2, tLObject, tLRPC$TL_error);
                }
            });
        }
        return null;
    }

    public /* synthetic */ void lambda$getSendAsPeers$398(final long j, final SendAsPeersInfo sendAsPeersInfo, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers = null;
        if (tLObject != null) {
            final TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers2 = (TLRPC$TL_channels_sendAsPeers) tLObject;
            if (!tLRPC$TL_channels_sendAsPeers2.peers.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda235
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$getSendAsPeers$396(tLRPC$TL_channels_sendAsPeers2);
                    }
                });
                tLRPC$TL_channels_sendAsPeers = tLRPC$TL_channels_sendAsPeers2;
            }
        }
        final TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers3 = tLRPC$TL_channels_sendAsPeers;
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda236
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSendAsPeers$397(tLRPC$TL_channels_sendAsPeers3, j, sendAsPeersInfo);
            }
        });
    }

    public /* synthetic */ void lambda$getSendAsPeers$396(TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers) {
        putUsers(tLRPC$TL_channels_sendAsPeers.users, false);
        putChats(tLRPC$TL_channels_sendAsPeers.chats, false);
    }

    public /* synthetic */ void lambda$getSendAsPeers$397(TLRPC$TL_channels_sendAsPeers tLRPC$TL_channels_sendAsPeers, long j, SendAsPeersInfo sendAsPeersInfo) {
        if (tLRPC$TL_channels_sendAsPeers != null) {
            sendAsPeersInfo.loadTime = SystemClock.elapsedRealtime();
            sendAsPeersInfo.sendAsPeers = tLRPC$TL_channels_sendAsPeers;
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didLoadSendAsPeers, Long.valueOf(j), tLRPC$TL_channels_sendAsPeers);
            return;
        }
        this.sendAsPeers.remove(j);
    }

    public TLRPC$Peer getSendAsSelectedPeer(long j) {
        TLRPC$Peer tLRPC$Peer;
        TLRPC$ChatFull chatFull = getChatFull(-j);
        if (chatFull == null || (tLRPC$Peer = chatFull.default_send_as) == null) {
            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
            tLRPC$TL_peerUser.user_id = getAccountInstance().getUserConfig().clientUserId;
            return tLRPC$TL_peerUser;
        }
        return tLRPC$Peer;
    }

    public CharSequence getPrintingString(long j, long j2, boolean z) {
        LongSparseArray<CharSequence> longSparseArray;
        TLRPC$User user;
        TLRPC$UserStatus tLRPC$UserStatus;
        if ((!z || !DialogObject.isUserDialog(j) || (user = getUser(Long.valueOf(j))) == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires >= 0) && (longSparseArray = this.printingStrings.get(j)) != null) {
            return longSparseArray.get(j2);
        }
        return null;
    }

    public Integer getPrintingStringType(long j, long j2) {
        LongSparseArray<Integer> longSparseArray = this.printingStringsTypes.get(j);
        if (longSparseArray == null) {
            return null;
        }
        return longSparseArray.get(j2);
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (this.printingUsers.get(Long.valueOf(j)) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (next.isFromUser() && !arrayList2.contains(Long.valueOf(next.messageOwner.from_id.user_id))) {
                    arrayList2.add(Long.valueOf(next.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap<Integer, ArrayList<PrintingUser>> concurrentHashMap = this.printingUsers.get(Long.valueOf(j));
            if (concurrentHashMap != null) {
                ArrayList arrayList3 = null;
                z = false;
                for (Map.Entry<Integer, ArrayList<PrintingUser>> entry : concurrentHashMap.entrySet()) {
                    Integer key = entry.getKey();
                    ArrayList<PrintingUser> value = entry.getValue();
                    int i = 0;
                    while (i < value.size()) {
                        if (arrayList2.contains(Long.valueOf(value.get(i).userId))) {
                            value.remove(i);
                            i--;
                            if (value.isEmpty()) {
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                }
                                arrayList3.add(key);
                            }
                            z = true;
                        }
                        i++;
                    }
                }
                if (arrayList3 != null) {
                    int size = arrayList3.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        concurrentHashMap.remove(arrayList3.get(i2));
                    }
                    if (concurrentHashMap.isEmpty()) {
                        this.printingUsers.remove(Long.valueOf(j));
                    }
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:433:0x035c  */
    /* JADX WARN: Removed duplicated region for block: B:451:0x03bc  */
    /* JADX WARN: Removed duplicated region for block: B:504:0x04c2  */
    /* JADX WARN: Removed duplicated region for block: B:506:0x04c7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean updateInterfaceWithMessages(final long j, ArrayList<MessageObject> arrayList, int i) {
        MessageObject messageObject;
        long j2;
        boolean z;
        LongSparseArray<TLRPC$Chat> longSparseArray;
        boolean z2;
        boolean z3;
        int i2;
        boolean z4;
        TLRPC$Chat chat;
        long j3;
        TLRPC$ChatFull chatFull;
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        if (arrayList == null || arrayList.isEmpty()) {
            return false;
        }
        boolean z5 = i == 1;
        boolean z6 = i == 5;
        boolean isEncryptedDialog = DialogObject.isEncryptedDialog(j);
        long j4 = 0;
        if (z5 || z6) {
            messageObject = null;
            j2 = 0;
            z = false;
        } else {
            long j5 = 0;
            int i3 = 0;
            MessageObject messageObject2 = null;
            boolean z7 = false;
            z = false;
            while (i3 < arrayList.size()) {
                MessageObject messageObject3 = arrayList.get(i3);
                if (messageObject2 == null || ((!isEncryptedDialog && messageObject3.getId() > messageObject2.getId()) || (((isEncryptedDialog || (messageObject3.getId() < 0 && messageObject2.getId() < 0)) && messageObject3.getId() < messageObject2.getId()) || messageObject3.messageOwner.date > messageObject2.messageOwner.date))) {
                    long j6 = messageObject3.messageOwner.peer_id.channel_id;
                    if (j6 != j4) {
                        j5 = j6;
                    }
                    messageObject2 = messageObject3;
                }
                TLRPC$Message tLRPC$Message = messageObject3.messageOwner;
                if ((tLRPC$Message.action instanceof TLRPC$TL_messageActionGroupCall) && (chatFull = getChatFull(tLRPC$Message.peer_id.channel_id)) != null && ((tLRPC$TL_inputGroupCall = chatFull.call) == null || tLRPC$TL_inputGroupCall.id != messageObject3.messageOwner.action.call.id)) {
                    loadFullChat(messageObject3.messageOwner.peer_id.channel_id, 0, true);
                }
                if (!z7 && !messageObject3.isOut()) {
                    z7 = true;
                }
                if (messageObject3.isOut() && !messageObject3.isSending() && !messageObject3.isForwarded()) {
                    if (messageObject3.isNewGif()) {
                        if (MessageObject.isDocumentHasAttachedStickers(messageObject3.messageOwner.media.document) ? getMessagesController().saveGifsWithStickers : true) {
                            MediaDataController mediaDataController = getMediaDataController();
                            TLRPC$Message tLRPC$Message2 = messageObject3.messageOwner;
                            mediaDataController.addRecentGif(tLRPC$Message2.media.document, tLRPC$Message2.date, messageObject3.wasJustSent);
                        }
                    } else if (!messageObject3.isAnimatedEmoji() && (messageObject3.isSticker() || messageObject3.isAnimatedSticker())) {
                        MediaDataController mediaDataController2 = getMediaDataController();
                        TLRPC$Message tLRPC$Message3 = messageObject3.messageOwner;
                        mediaDataController2.addRecentSticker(0, messageObject3, tLRPC$Message3.media.document, tLRPC$Message3.date, false);
                    }
                }
                if (messageObject3.isOut() && messageObject3.isSent()) {
                    z = true;
                }
                i3++;
                j4 = 0;
            }
            messageObject = messageObject2;
            j2 = j5;
        }
        getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i, 0L, null, 0, null);
        if (i == 5) {
            QuickRepliesController.getInstance(this.currentAccount).checkLocalMessages(arrayList);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.didReceiveNewMessages, Long.valueOf(j), arrayList, Boolean.valueOf(z5), Integer.valueOf(i));
        if (messageObject == null || z5) {
            return false;
        }
        TLRPC$TL_dialog tLRPC$TL_dialog = (TLRPC$TL_dialog) this.dialogs_dict.get(j);
        if (messageObject.messageOwner.action instanceof TLRPC$TL_messageActionChatMigrateTo) {
            if (tLRPC$TL_dialog != null) {
                this.allDialogs.remove(tLRPC$TL_dialog);
                this.dialogsServerOnly.remove(tLRPC$TL_dialog);
                this.dialogsCanAddUsers.remove(tLRPC$TL_dialog);
                this.dialogsMyGroups.remove(tLRPC$TL_dialog);
                this.dialogsMyChannels.remove(tLRPC$TL_dialog);
                this.dialogsChannelsOnly.remove(tLRPC$TL_dialog);
                this.dialogsGroupsOnly.remove(tLRPC$TL_dialog);
                int i4 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i4 >= dialogFilterArr.length) {
                        break;
                    }
                    DialogFilter dialogFilter = dialogFilterArr[i4];
                    if (dialogFilter != null) {
                        dialogFilter.dialogs.remove(tLRPC$TL_dialog);
                        this.selectedDialogFilter[i4].dialogsForward.remove(tLRPC$TL_dialog);
                    }
                    i4++;
                }
                this.dialogsUsersOnly.remove(tLRPC$TL_dialog);
                this.dialogsForBlock.remove(tLRPC$TL_dialog);
                this.dialogsForward.remove(tLRPC$TL_dialog);
                this.dialogs_dict.remove(tLRPC$TL_dialog.id);
                this.dialogs_read_inbox_max.remove(Long.valueOf(tLRPC$TL_dialog.id));
                this.dialogs_read_outbox_max.remove(Long.valueOf(tLRPC$TL_dialog.id));
                int i5 = this.nextDialogsCacheOffset.get(tLRPC$TL_dialog.folder_id, 0);
                if (i5 > 0) {
                    this.nextDialogsCacheOffset.put(tLRPC$TL_dialog.folder_id, i5 - 1);
                }
                this.dialogMessage.remove(tLRPC$TL_dialog.id);
                ArrayList<TLRPC$Dialog> arrayList2 = this.dialogsByFolder.get(tLRPC$TL_dialog.folder_id);
                if (arrayList2 != null) {
                    arrayList2.remove(tLRPC$TL_dialog);
                }
                MessageObject messageObject4 = this.dialogMessagesByIds.get(tLRPC$TL_dialog.top_message);
                if (messageObject4 != null) {
                    j3 = 0;
                    if (messageObject4.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(tLRPC$TL_dialog.top_message);
                    }
                } else {
                    j3 = 0;
                }
                if (messageObject4 != null) {
                    long j7 = messageObject4.messageOwner.random_id;
                    if (j7 != j3) {
                        this.dialogMessagesByRandomIds.remove(j7);
                    }
                }
                z4 = false;
                tLRPC$TL_dialog.top_message = 0;
                getNotificationsController().removeNotificationsForDialog(tLRPC$TL_dialog.id);
                getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
            } else {
                z4 = false;
            }
            if (DialogObject.isChatDialog(j)) {
                ChatObject.Call groupCall = getGroupCall(-j, z4);
                if (groupCall != null && (chat = getChat(Long.valueOf(messageObject.messageOwner.action.channel_id))) != null) {
                    groupCall.migrateToChat(chat);
                }
                return false;
            }
            return z4;
        }
        if (tLRPC$TL_dialog == null) {
            TLRPC$Chat chat2 = getChat(Long.valueOf(j2));
            if (j2 != 0 && chat2 == null) {
                return false;
            }
            if (chat2 != null && (ChatObject.isNotInChat(chat2) || chat2.min)) {
                return false;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("not found dialog with id " + j + " dictCount = " + this.dialogs_dict.size() + " allCount = " + this.allDialogs.size());
            }
            final TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
            tLRPC$TL_dialog2.id = j;
            final int id = messageObject.getId();
            tLRPC$TL_dialog2.top_message = id;
            tLRPC$TL_dialog2.last_message_date = messageObject.messageOwner.date;
            tLRPC$TL_dialog2.flags = ChatObject.isChannel(chat2) ? 1 : 0;
            if (this.pendingUnreadCounter.get(j, 0) > 0) {
                tLRPC$TL_dialog2.unread_count = this.pendingUnreadCounter.get(j);
                this.pendingUnreadCounter.delete(j);
                if (!isDialogMuted(j, 0L)) {
                    this.unreadUnmutedDialogs++;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                    if (i6 >= dialogFilterArr2.length) {
                        break;
                    }
                    DialogFilter dialogFilter2 = dialogFilterArr2[i6];
                    if (dialogFilter2 != null && (dialogFilter2.flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        z3 = true;
                        break;
                    }
                    i6++;
                }
                this.dialogs_dict.put(j, tLRPC$TL_dialog2);
                this.allDialogs.add(tLRPC$TL_dialog2);
                ArrayList<MessageObject> arrayList3 = new ArrayList<>();
                for (i2 = 0; i2 < arrayList.size(); i2++) {
                    MessageObject messageObject5 = arrayList.get(i2);
                    if (messageObject5 != null && (messageObject5.getId() == messageObject.getId() || (messageObject5.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject5.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                        arrayList3.add(messageObject5);
                        if (messageObject5.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject5.getId(), messageObject5);
                            long j8 = messageObject5.messageOwner.random_id;
                            if (j8 != 0) {
                                this.dialogMessagesByRandomIds.put(j8, messageObject5);
                            }
                        }
                    }
                }
                this.dialogMessage.put(j, arrayList3);
                getTranslateController().checkDialogMessage(j);
                longSparseArray = null;
                if (z3) {
                    sortDialogs(null);
                    getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda314
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i7) {
                        MessagesController.this.lambda$updateInterfaceWithMessages$399(tLRPC$TL_dialog2, id, j, i7);
                    }
                });
            }
            z3 = false;
            this.dialogs_dict.put(j, tLRPC$TL_dialog2);
            this.allDialogs.add(tLRPC$TL_dialog2);
            ArrayList<MessageObject> arrayList32 = new ArrayList<>();
            while (i2 < arrayList.size()) {
            }
            this.dialogMessage.put(j, arrayList32);
            getTranslateController().checkDialogMessage(j);
            longSparseArray = null;
            if (z3) {
            }
            getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda314
                @Override // org.telegram.messenger.MessagesStorage.IntCallback
                public final void run(int i7) {
                    MessagesController.this.lambda$updateInterfaceWithMessages$399(tLRPC$TL_dialog2, id, j, i7);
                }
            });
        } else {
            longSparseArray = null;
            if ((tLRPC$TL_dialog.top_message <= 0 || messageObject.getId() <= 0 || messageObject.getId() <= tLRPC$TL_dialog.top_message) && ((tLRPC$TL_dialog.top_message >= 0 || messageObject.getId() >= 0 || messageObject.getId() >= tLRPC$TL_dialog.top_message) && this.dialogMessage.indexOfKey(j) >= 0 && tLRPC$TL_dialog.top_message >= 0 && tLRPC$TL_dialog.last_message_date > messageObject.messageOwner.date)) {
                z2 = false;
                if (z2) {
                    sortDialogs(longSparseArray);
                }
                if (z) {
                    getMediaDataController().increasePeerRaiting(j);
                }
                return z2;
            }
            MessageObject messageObject6 = this.dialogMessagesByIds.get(tLRPC$TL_dialog.top_message);
            if (messageObject6 != null && messageObject6.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.remove(tLRPC$TL_dialog.top_message);
            }
            if (messageObject6 != null) {
                long j9 = messageObject6.messageOwner.random_id;
                if (j9 != 0) {
                    this.dialogMessagesByRandomIds.remove(j9);
                }
            }
            tLRPC$TL_dialog.top_message = messageObject.getId();
            tLRPC$TL_dialog.last_message_date = messageObject.messageOwner.date;
            ArrayList<MessageObject> arrayList4 = new ArrayList<>(1);
            for (int i7 = 0; i7 < arrayList.size(); i7++) {
                MessageObject messageObject7 = arrayList.get(i7);
                if (messageObject7 != null && (messageObject7.getId() == messageObject.getId() || (messageObject7.hasValidGroupId() && messageObject.hasValidGroupId() && messageObject7.getGroupIdForUse() == messageObject.getGroupIdForUse()))) {
                    arrayList4.add(messageObject7);
                }
            }
            this.dialogMessage.put(j, arrayList4);
            getTranslateController().checkDialogMessage(j);
            if (messageObject.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                long j10 = messageObject.messageOwner.random_id;
                if (j10 != 0) {
                    this.dialogMessagesByRandomIds.put(j10, messageObject);
                }
            }
        }
        z2 = true;
        if (z2) {
        }
        if (z) {
        }
        return z2;
    }

    public /* synthetic */ void lambda$updateInterfaceWithMessages$399(TLRPC$Dialog tLRPC$Dialog, int i, long j, int i2) {
        if (i2 == -1) {
            if (i <= 0 || DialogObject.isEncryptedDialog(j)) {
                return;
            }
            loadUnknownDialog(getInputPeer(j), 0L);
        } else if (i2 != 0) {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs(null);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    public TLRPC$Dialog getDialog(long j) {
        return this.dialogs_dict.get(j);
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.put(j, tLRPC$Dialog);
        } else {
            this.deletingDialogs.put(j, tLRPC$Dialog);
            this.allDialogs.remove(tLRPC$Dialog);
            sortDialogs(null);
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog == null) {
            return;
        }
        if (z) {
            this.clearingHistoryDialogs.remove(j);
        } else {
            this.deletingDialogs.remove(j);
            if (!z2) {
                this.allDialogs.add(tLRPC$Dialog);
                sortDialogs(null);
            }
        }
        if (z2) {
            return;
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    public void updateFilterDialogs(DialogFilter dialogFilter) {
        TLRPC$EncryptedChat encryptedChat;
        if (dialogFilter == null) {
            return;
        }
        ArrayList<TLRPC$Dialog> arrayList = dialogFilter.dialogs;
        ArrayList<TLRPC$Dialog> arrayList2 = dialogFilter.dialogsForward;
        arrayList.clear();
        arrayList2.clear();
        this.sortingDialogFilter = dialogFilter;
        try {
            Collections.sort(this.allDialogs, this.dialogDateComparator);
        } catch (Exception e) {
            FileLog.e(e);
        }
        int size = this.allDialogs.size();
        for (int i = 0; i < size; i++) {
            TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(i);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialog) {
                long j = tLRPC$Dialog.id;
                if (DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                    j = encryptedChat.user_id;
                }
                if (dialogFilter.includesDialog(getAccountInstance(), j, tLRPC$Dialog)) {
                    if (canAddToForward(tLRPC$Dialog)) {
                        arrayList2.add(tLRPC$Dialog);
                    }
                    arrayList.add(tLRPC$Dialog);
                }
            }
        }
        try {
            Collections.sort(this.allDialogs, this.dialogComparator);
        } catch (Exception unused) {
        }
    }

    public boolean canAddToForward(TLRPC$Dialog tLRPC$Dialog) {
        boolean z = false;
        if (tLRPC$Dialog == null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id) && DialogObject.isChannel(tLRPC$Dialog)) {
            TLRPC$Chat chat = getChat(Long.valueOf(-tLRPC$Dialog.id));
            if (chat == null || !chat.megagroup ? !(!ChatObject.hasAdminRights(chat) || !ChatObject.canPost(chat)) : !(chat.gigagroup && !ChatObject.hasAdminRights(chat))) {
                z = true;
            }
            return z;
        }
        return true;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(22:7|(4:10|(2:12|13)(1:15)|14|8)|16|17|(18:183|(2:184|(3:186|(1:215)(6:188|189|190|191|(3:193|(4:195|(1:199)|200|(1:208)(4:202|(1:204)|205|206))(1:209)|207)|210)|211)(0))|22|23|(2:25|(1:31))|32|(6:34|(6:36|(4:38|(4:41|(2:47|48)|49|39)|53|(2:57|58))|59|(2:61|(3:63|(1:(2:93|(1:95)(1:96))(1:92))|(1:101)(1:100))(2:102|(1:(3:112|(2:120|(1:122)(1:123))|126)(4:109|110|111|58))(2:127|(2:129|(1:131)))))|132|(2:136|(1:138)(1:139)))|140|(1:155)|144|(3:151|152|58)(4:150|110|111|58))|156|157|(1:161)|(1:165)|166|(4:169|(2:171|172)(1:174)|173|167)|175|176|(1:178)|179|180)(0)|21|22|23|(0)|32|(0)|156|157|(2:159|161)|(2:163|165)|166|(1:167)|175|176|(0)|179|180) */
    /* JADX WARN: Removed duplicated region for block: B:272:0x00e6  */
    /* JADX WARN: Removed duplicated region for block: B:281:0x0107  */
    /* JADX WARN: Removed duplicated region for block: B:409:0x02c7  */
    /* JADX WARN: Removed duplicated region for block: B:415:0x02ed  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void sortDialogs(LongSparseArray<TLRPC$Chat> longSparseArray) {
        TLRPC$EncryptedChat encryptedChat;
        TLRPC$Dialog tLRPC$Dialog;
        int size;
        boolean z;
        int i;
        TLRPC$Dialog tLRPC$Dialog2;
        int i2;
        TLRPC$User currentUser;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights;
        TLRPC$Chat tLRPC$Chat;
        boolean z2;
        boolean z3;
        boolean z4;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3;
        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights;
        TLRPC$Message tLRPC$Message;
        int i3;
        TLRPC$Chat chat;
        if (longSparseArray == null && ApplicationLoader.mainInterfacePaused) {
            return;
        }
        this.dialogsServerOnly.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsMyGroups.clear();
        this.dialogsMyChannels.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogsForward.clear();
        for (int i4 = 0; i4 < this.dialogsByFolder.size(); i4++) {
            ArrayList<TLRPC$Dialog> valueAt = this.dialogsByFolder.valueAt(i4);
            if (valueAt != null) {
                valueAt.clear();
            }
        }
        this.unreadUnmutedDialogs = 0;
        long clientUserId = getUserConfig().getClientUserId();
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[0] != null || dialogFilterArr[1] != null) {
            int i5 = 0;
            while (true) {
                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                if (i5 < dialogFilterArr2.length) {
                    DialogFilter dialogFilter = dialogFilterArr2[i5];
                    this.sortingDialogFilter = dialogFilter;
                    if (dialogFilter != null) {
                        ArrayList<TLRPC$Dialog> arrayList = dialogFilter.dialogs;
                        ArrayList<TLRPC$Dialog> arrayList2 = dialogFilter.dialogsForward;
                        arrayList.clear();
                        arrayList2.clear();
                        try {
                            Collections.sort(this.allDialogs, this.dialogDateComparator);
                        } catch (Exception e) {
                            FileLog.e(e);
                        }
                        int size2 = this.allDialogs.size();
                        for (int i6 = 0; i6 < size2; i6++) {
                            TLRPC$Dialog tLRPC$Dialog3 = this.allDialogs.get(i6);
                            if (tLRPC$Dialog3 instanceof TLRPC$TL_dialog) {
                                long j = tLRPC$Dialog3.id;
                                if (DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                                    j = encryptedChat.user_id;
                                }
                                if (this.sortingDialogFilter.includesDialog(getAccountInstance(), j, tLRPC$Dialog3)) {
                                    if (canAddToForward(tLRPC$Dialog3)) {
                                        arrayList2.add(tLRPC$Dialog3);
                                    }
                                    arrayList.add(tLRPC$Dialog3);
                                }
                            }
                        }
                    }
                    i5++;
                }
            }
            Collections.sort(this.allDialogs, this.dialogComparator);
            this.isLeftPromoChannel = true;
            tLRPC$Dialog = this.promoDialog;
            if (tLRPC$Dialog != null) {
                long j2 = tLRPC$Dialog.id;
                if (j2 < 0 && (chat = getChat(Long.valueOf(-j2))) != null && !chat.left) {
                    this.isLeftPromoChannel = false;
                }
            }
            size = this.allDialogs.size();
            z = false;
            while (i < size) {
                TLRPC$Dialog tLRPC$Dialog4 = this.allDialogs.get(i);
                if (tLRPC$Dialog4 instanceof TLRPC$TL_dialog) {
                    ArrayList<MessageObject> arrayList3 = this.dialogMessage.get(tLRPC$Dialog4.id);
                    if (arrayList3 != null) {
                        int i7 = Integer.MIN_VALUE;
                        for (int i8 = 0; i8 < arrayList3.size(); i8++) {
                            MessageObject messageObject = arrayList3.get(i8);
                            if (messageObject != null && (tLRPC$Message = messageObject.messageOwner) != null && (i3 = tLRPC$Message.date) > i7) {
                                i7 = i3;
                            }
                        }
                        i = (i7 > Integer.MIN_VALUE && i7 < this.dialogsLoadedTillDate) ? i + 1 : 0;
                    }
                    if (!DialogObject.isEncryptedDialog(tLRPC$Dialog4.id)) {
                        this.dialogsServerOnly.add(tLRPC$Dialog4);
                        if (DialogObject.isChannel(tLRPC$Dialog4)) {
                            TLRPC$Chat chat2 = getChat(Long.valueOf(-tLRPC$Dialog4.id));
                            if (chat2 != null && ((z2 = chat2.creator) || (((z4 = chat2.megagroup) && (((tLRPC$TL_chatAdminRights3 = chat2.admin_rights) != null && (tLRPC$TL_chatAdminRights3.post_messages || tLRPC$TL_chatAdminRights3.add_admins)) || (tLRPC$TL_chatBannedRights = chat2.default_banned_rights) == null || !tLRPC$TL_chatBannedRights.invite_users)) || (!z4 && (tLRPC$TL_chatAdminRights2 = chat2.admin_rights) != null && tLRPC$TL_chatAdminRights2.add_admins)))) {
                                if (z2 || (((z3 = chat2.megagroup) && chat2.admin_rights != null) || (!z3 && chat2.admin_rights != null))) {
                                    if (chat2.megagroup) {
                                        this.dialogsMyGroups.add(tLRPC$Dialog4);
                                    } else {
                                        this.dialogsMyChannels.add(tLRPC$Dialog4);
                                    }
                                } else {
                                    this.dialogsCanAddUsers.add(tLRPC$Dialog4);
                                }
                            }
                            if (chat2 != null && chat2.megagroup) {
                                this.dialogsGroupsOnly.add(tLRPC$Dialog4);
                            } else {
                                this.dialogsChannelsOnly.add(tLRPC$Dialog4);
                            }
                        } else {
                            long j3 = tLRPC$Dialog4.id;
                            if (j3 < 0) {
                                if (longSparseArray != null && (tLRPC$Chat = longSparseArray.get(-j3)) != null && tLRPC$Chat.migrated_to != null) {
                                    this.allDialogs.remove(i);
                                    i--;
                                    size--;
                                } else {
                                    TLRPC$Chat chat3 = getChat(Long.valueOf(-tLRPC$Dialog4.id));
                                    if (chat3 != null && (((tLRPC$TL_chatAdminRights = chat3.admin_rights) != null && (tLRPC$TL_chatAdminRights.add_admins || tLRPC$TL_chatAdminRights.invite_users)) || chat3.creator)) {
                                        if (chat3.creator) {
                                            this.dialogsMyGroups.add(tLRPC$Dialog4);
                                        } else {
                                            this.dialogsCanAddUsers.add(tLRPC$Dialog4);
                                        }
                                    }
                                    this.dialogsGroupsOnly.add(tLRPC$Dialog4);
                                }
                            } else if (j3 != clientUserId) {
                                this.dialogsUsersOnly.add(tLRPC$Dialog4);
                                if (!UserObject.isReplyUser(tLRPC$Dialog4.id)) {
                                    this.dialogsForBlock.add(tLRPC$Dialog4);
                                }
                            }
                        }
                    }
                    if (canAddToForward(tLRPC$Dialog4) && tLRPC$Dialog4.folder_id == 0) {
                        if (tLRPC$Dialog4.id == clientUserId) {
                            this.dialogsForward.add(0, tLRPC$Dialog4);
                            z = true;
                        } else {
                            this.dialogsForward.add(tLRPC$Dialog4);
                        }
                    }
                }
                if ((getDialogUnreadCount(tLRPC$Dialog4) != 0 || tLRPC$Dialog4.unread_mark) && !isDialogMuted(tLRPC$Dialog4.id, 0L)) {
                    this.unreadUnmutedDialogs++;
                }
                TLRPC$Dialog tLRPC$Dialog5 = this.promoDialog;
                if (tLRPC$Dialog5 != null && tLRPC$Dialog4.id == tLRPC$Dialog5.id && this.isLeftPromoChannel) {
                    this.allDialogs.remove(i);
                    i--;
                    size--;
                } else {
                    addDialogToItsFolder(-1, tLRPC$Dialog4);
                }
            }
            tLRPC$Dialog2 = this.promoDialog;
            if (tLRPC$Dialog2 != null && this.isLeftPromoChannel) {
                this.allDialogs.add(0, tLRPC$Dialog2);
                addDialogToItsFolder(-2, this.promoDialog);
            }
            if (!z && (currentUser = getUserConfig().getCurrentUser()) != null) {
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.id = currentUser.id;
                tLRPC$TL_dialog.notify_settings = new TLRPC$TL_peerNotifySettings();
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_dialog.peer = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = currentUser.id;
                this.dialogsForward.add(0, tLRPC$TL_dialog);
            }
            for (i2 = 0; i2 < this.dialogsByFolder.size(); i2++) {
                int keyAt = this.dialogsByFolder.keyAt(i2);
                if (this.dialogsByFolder.valueAt(i2).isEmpty()) {
                    this.dialogsByFolder.remove(keyAt);
                }
            }
            this.hasArchivedChats = this.dialogsByFolder.get(1, null) != null;
        }
        Collections.sort(this.allDialogs, this.dialogComparator);
        this.isLeftPromoChannel = true;
        tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
        }
        size = this.allDialogs.size();
        z = false;
        while (i < size) {
        }
        tLRPC$Dialog2 = this.promoDialog;
        if (tLRPC$Dialog2 != null) {
            this.allDialogs.add(0, tLRPC$Dialog2);
            addDialogToItsFolder(-2, this.promoDialog);
        }
        if (!z) {
            TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
            tLRPC$TL_dialog2.id = currentUser.id;
            tLRPC$TL_dialog2.notify_settings = new TLRPC$TL_peerNotifySettings();
            TLRPC$TL_peerUser tLRPC$TL_peerUser2 = new TLRPC$TL_peerUser();
            tLRPC$TL_dialog2.peer = tLRPC$TL_peerUser2;
            tLRPC$TL_peerUser2.user_id = currentUser.id;
            this.dialogsForward.add(0, tLRPC$TL_dialog2);
        }
        while (i2 < this.dialogsByFolder.size()) {
        }
        this.hasArchivedChats = this.dialogsByFolder.get(1, null) != null;
    }

    private void addDialogToItsFolder(int i, TLRPC$Dialog tLRPC$Dialog) {
        int i2 = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder ? 0 : tLRPC$Dialog.folder_id;
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList<>();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(tLRPC$Dialog);
        } else if (i == -2) {
            if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC$TL_dialogFolder)) {
                arrayList.add(0, tLRPC$Dialog);
            } else {
                arrayList.add(1, tLRPC$Dialog);
            }
        } else {
            arrayList.add(i, tLRPC$Dialog);
        }
    }

    public String getRestrictionReason(ArrayList<TLRPC$RestrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$RestrictionReason tLRPC$RestrictionReason = arrayList.get(i);
            Set<String> set = this.ignoreRestrictionReasons;
            if ((set == null || !set.contains(tLRPC$RestrictionReason.reason)) && !"sensitive".equals(tLRPC$RestrictionReason.reason) && ("all".equals(tLRPC$RestrictionReason.platform) || !(ApplicationLoader.isStandaloneBuild() || BuildVars.isBetaApp() || !"android".equals(tLRPC$RestrictionReason.platform)))) {
                return tLRPC$RestrictionReason.text;
            }
        }
        return null;
    }

    public boolean isSensitive(ArrayList<TLRPC$RestrictionReason> arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$RestrictionReason tLRPC$RestrictionReason = arrayList.get(i);
                Set<String> set = this.ignoreRestrictionReasons;
                if ((set == null || !set.contains(tLRPC$RestrictionReason.reason)) && (("all".equals(tLRPC$RestrictionReason.platform) || !(ApplicationLoader.isStandaloneBuild() || BuildVars.isBetaApp() || !"android".equals(tLRPC$RestrictionReason.platform))) && "sensitive".equals(tLRPC$RestrictionReason.reason))) {
                    return true;
                }
            }
        }
        return false;
    }

    public void checkSensitive(final BaseFragment baseFragment, final long j, final Runnable runnable, final Runnable runnable2) {
        TLRPC$User user;
        ArrayList<TLRPC$RestrictionReason> arrayList = null;
        if (j < 0) {
            TLRPC$Chat chat = getChat(Long.valueOf(-j));
            if (chat != null) {
                arrayList = chat.restriction_reason;
            }
        } else if (j >= 0 && (user = getUser(Long.valueOf(j))) != null) {
            arrayList = user.restriction_reason;
        }
        if (!isSensitive(arrayList) || this.sensitiveAgreed.contains(Long.valueOf(j))) {
            if (runnable != null) {
                runnable.run();
                return;
            }
            return;
        }
        final AlertDialog alertDialog = new AlertDialog(baseFragment.getContext(), 3);
        alertDialog.showDelayed(200L);
        getContentSettings(new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda240
            @Override // org.telegram.messenger.Utilities.Callback
            public final void run(Object obj) {
                MessagesController.this.lambda$checkSensitive$404(alertDialog, baseFragment, j, runnable, runnable2, (TL_account$contentSettings) obj);
            }
        });
    }

    public /* synthetic */ void lambda$checkSensitive$404(AlertDialog alertDialog, final BaseFragment baseFragment, final long j, final Runnable runnable, final Runnable runnable2, final TL_account$contentSettings tL_account$contentSettings) {
        alertDialog.dismissUnless(200L);
        final boolean[] zArr = new boolean[1];
        FrameLayout frameLayout = new FrameLayout(baseFragment.getContext());
        if (tL_account$contentSettings != null && tL_account$contentSettings.sensitive_can_change) {
            CheckBoxCell checkBoxCell = new CheckBoxCell(baseFragment.getContext(), 1, baseFragment.getResourceProvider());
            checkBoxCell.setBackground(Theme.getSelectorDrawable(false));
            checkBoxCell.setText(LocaleController.getString(R.string.MessageShowSensitiveContentAlways), "", zArr[0], false);
            checkBoxCell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
            frameLayout.addView(checkBoxCell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
            checkBoxCell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda118
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    MessagesController.lambda$checkSensitive$400(zArr, view);
                }
            });
        }
        final boolean[] zArr2 = new boolean[1];
        new AlertDialog.Builder(baseFragment.getContext(), baseFragment.getResourceProvider()).setTitle(LocaleController.getString(R.string.MessageShowSensitiveContentChannelTitle)).setMessage(LocaleController.getString(R.string.MessageShowSensitiveContentChannelText)).setView(frameLayout).setCustomViewOffset(9).setNegativeButton(LocaleController.getString(R.string.Cancel), null).setPositiveButton(LocaleController.getString(R.string.MessageShowSensitiveContentButton), new DialogInterface.OnClickListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda119
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                MessagesController.this.lambda$checkSensitive$402(zArr2, j, zArr, tL_account$contentSettings, baseFragment, runnable, dialogInterface, i);
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda120
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                MessagesController.lambda$checkSensitive$403(zArr2, runnable2, dialogInterface);
            }
        }).show();
    }

    public static /* synthetic */ void lambda$checkSensitive$400(boolean[] zArr, View view) {
        boolean z = !zArr[0];
        zArr[0] = z;
        ((CheckBoxCell) view).setChecked(z, true);
    }

    public /* synthetic */ void lambda$checkSensitive$402(boolean[] zArr, long j, boolean[] zArr2, TL_account$contentSettings tL_account$contentSettings, final BaseFragment baseFragment, Runnable runnable, DialogInterface dialogInterface, int i) {
        zArr[0] = true;
        this.sensitiveAgreed.add(Long.valueOf(j));
        if (zArr2[0] && tL_account$contentSettings != null && tL_account$contentSettings.sensitive_can_change) {
            getMessagesController().setContentSettings(true);
            BulletinFactory.of(baseFragment).createSimpleBulletinDetail(R.raw.chats_infotip, AndroidUtilities.replaceArrows(AndroidUtilities.premiumText(LocaleController.getString(R.string.SensitiveContentSettingsToast), new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda370
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$checkSensitive$401(BaseFragment.this);
                }
            }), true)).show(true);
        }
        if (runnable != null) {
            runnable.run();
        }
    }

    public static /* synthetic */ void lambda$checkSensitive$401(BaseFragment baseFragment) {
        baseFragment.presentFragment(new ThemeActivity(0).highlightSensitiveRow());
    }

    public static /* synthetic */ void lambda$checkSensitive$403(boolean[] zArr, Runnable runnable, DialogInterface dialogInterface) {
        if (zArr[0] || runnable == null) {
            return;
        }
        runnable.run();
    }

    public static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment == null || baseFragment.getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(baseFragment.getParentActivity(), baseFragment.getResourceProvider());
        builder.setTitle(LocaleController.getString(R.string.DialogNotAvailable));
        HashMap hashMap = new HashMap();
        int i = Theme.key_dialogTopBackground;
        hashMap.put("info1.**", Integer.valueOf(baseFragment.getThemedColor(i)));
        hashMap.put("info2.**", Integer.valueOf(baseFragment.getThemedColor(i)));
        builder.setTopAnimation(R.raw.not_available, 52, false, baseFragment.getThemedColor(i), hashMap);
        builder.setTopAnimationIsNew(true);
        builder.setPositiveButton(LocaleController.getString(R.string.Close), null);
        builder.setMessage(str);
        baseFragment.showDialog(builder.create());
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, null);
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment, MessageObject messageObject) {
        return checkCanOpenChat(bundle, baseFragment, messageObject, null);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public boolean checkCanOpenChat(final Bundle bundle, final BaseFragment baseFragment, MessageObject messageObject, final Browser.Progress progress) {
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        String restrictionReason;
        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages;
        if (bundle != null && baseFragment != null) {
            long j = bundle.getLong("user_id", 0L);
            long j2 = bundle.getLong("chat_id", 0L);
            int i = bundle.getInt("message_id", 0);
            AlertDialog alertDialog = null;
            if (j != 0) {
                tLRPC$User = getUser(Long.valueOf(j));
                tLRPC$Chat = null;
            } else if (j2 != 0) {
                tLRPC$Chat = getChat(Long.valueOf(j2));
                tLRPC$User = null;
            } else {
                tLRPC$User = null;
                tLRPC$Chat = null;
            }
            if (tLRPC$User == null && tLRPC$Chat == null) {
                return true;
            }
            if (tLRPC$Chat != null) {
                restrictionReason = getRestrictionReason(tLRPC$Chat.restriction_reason);
            } else {
                restrictionReason = getRestrictionReason(tLRPC$User.restriction_reason);
            }
            if (restrictionReason != null) {
                showCantOpenAlert(baseFragment, restrictionReason);
                return false;
            } else if (i != 0 && messageObject != null && tLRPC$Chat != null && tLRPC$Chat.access_hash == 0) {
                long dialogId = messageObject.getDialogId();
                if (!DialogObject.isEncryptedDialog(dialogId)) {
                    if (progress != null) {
                        progress.init();
                    } else {
                        alertDialog = new AlertDialog(baseFragment.getParentActivity(), 3);
                    }
                    final AlertDialog alertDialog2 = alertDialog;
                    if (dialogId < 0) {
                        tLRPC$Chat = getChat(Long.valueOf(-dialogId));
                    }
                    if (dialogId > 0 || !ChatObject.isChannel(tLRPC$Chat)) {
                        TLRPC$TL_messages_getMessages tLRPC$TL_messages_getMessages2 = new TLRPC$TL_messages_getMessages();
                        tLRPC$TL_messages_getMessages2.id.add(Integer.valueOf(messageObject.getId()));
                        tLRPC$TL_messages_getMessages = tLRPC$TL_messages_getMessages2;
                    } else {
                        TLRPC$Chat chat = getChat(Long.valueOf(-dialogId));
                        TLRPC$TL_channels_getMessages tLRPC$TL_channels_getMessages = new TLRPC$TL_channels_getMessages();
                        tLRPC$TL_channels_getMessages.channel = getInputChannel(chat);
                        tLRPC$TL_channels_getMessages.id.add(Integer.valueOf(messageObject.getId()));
                        tLRPC$TL_messages_getMessages = tLRPC$TL_channels_getMessages;
                    }
                    final int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessages, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda428
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$checkCanOpenChat$406(alertDialog2, progress, baseFragment, bundle, tLObject, tLRPC$TL_error);
                        }
                    });
                    if (alertDialog2 != null) {
                        alertDialog2.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda429
                            @Override // android.content.DialogInterface.OnCancelListener
                            public final void onCancel(DialogInterface dialogInterface) {
                                MessagesController.this.lambda$checkCanOpenChat$407(sendRequest, baseFragment, dialogInterface);
                            }
                        });
                        baseFragment.setVisibleDialog(alertDialog2);
                        alertDialog2.show();
                    } else {
                        progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda430
                            @Override // java.lang.Runnable
                            public final void run() {
                                MessagesController.this.lambda$checkCanOpenChat$408(sendRequest, baseFragment);
                            }
                        });
                        progress.init();
                    }
                    return false;
                }
            } else if (i != 0 && messageObject != null && progress != null) {
                progress.init();
                progress.onCancel(ensureMessagesLoaded(-j2, i, new MessagesLoadedCallback() { // from class: org.telegram.messenger.MessagesController.2
                    {
                        MessagesController.this = this;
                    }

                    @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                    public void onMessagesLoaded(boolean z) {
                        progress.end();
                        baseFragment.presentFragment(new ChatActivity(bundle));
                    }

                    @Override // org.telegram.messenger.MessagesController.MessagesLoadedCallback
                    public void onError() {
                        progress.end();
                        baseFragment.presentFragment(new ChatActivity(bundle));
                    }
                }));
                return false;
            }
        }
        return true;
    }

    public /* synthetic */ void lambda$checkCanOpenChat$406(final AlertDialog alertDialog, final Browser.Progress progress, final BaseFragment baseFragment, final Bundle bundle, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda15
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkCanOpenChat$405(alertDialog, progress, tLObject, baseFragment, bundle);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkCanOpenChat$405(AlertDialog alertDialog, Browser.Progress progress, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        if (alertDialog != null) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
        if (progress != null) {
            progress.end();
        }
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        putUsers(tLRPC$messages_Messages.users, false);
        putChats(tLRPC$messages_Messages.chats, false);
        getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    public /* synthetic */ void lambda$checkCanOpenChat$407(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog(null);
    }

    public /* synthetic */ void lambda$checkCanOpenChat$408(int i, BaseFragment baseFragment) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog(null);
    }

    public void openChatOrProfileWith(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, int i, boolean z) {
        String restrictionReason;
        if ((tLRPC$User == null && tLRPC$Chat == null) || baseFragment == null) {
            return;
        }
        boolean z2 = true;
        if (tLRPC$Chat != null) {
            restrictionReason = getRestrictionReason(tLRPC$Chat.restriction_reason);
        } else {
            restrictionReason = getRestrictionReason(tLRPC$User.restriction_reason);
            if (i != 3 && tLRPC$User.bot) {
                if (LaunchActivity.getLastFragment().getLastStoryViewer() == null) {
                    i = 1;
                    z = true;
                } else {
                    i = 1;
                }
            }
        }
        boolean z3 = LaunchActivity.getLastFragment() instanceof DialogsActivity;
        if (restrictionReason != null) {
            showCantOpenAlert(baseFragment, restrictionReason);
            return;
        }
        Bundle bundle = new Bundle();
        if (tLRPC$Chat != null) {
            bundle.putLong("chat_id", tLRPC$Chat.id);
        } else {
            bundle.putLong("user_id", tLRPC$User.id);
        }
        if (i == 0) {
            baseFragment.presentFragment(new ProfileActivity(bundle));
        } else if (i == 2) {
            if (ChatObject.isForum(tLRPC$Chat)) {
                baseFragment.presentFragment(TopicsFragment.getTopicsOrChat(baseFragment, bundle), !z3, true);
            } else {
                baseFragment.presentFragment(new ChatActivity(bundle), !z3, true);
            }
        } else if (ChatObject.isForum(tLRPC$Chat)) {
            baseFragment.presentFragment(TopicsFragment.getTopicsOrChat(baseFragment, bundle), (!z || z3) ? false : false);
        } else {
            baseFragment.presentFragment(new ChatActivity(bundle), (!z || z3) ? false : false);
        }
    }

    public void openByUserName(String str, BaseFragment baseFragment, int i) {
        openByUserName(str, baseFragment, i, null);
    }

    public void openByUserName(String str, final BaseFragment baseFragment, final int i, final Browser.Progress progress) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User;
        if (str == null || baseFragment == null) {
            return;
        }
        TLObject userOrChat = getUserOrChat(str);
        if (userOrChat instanceof TLRPC$User) {
            TLRPC$User tLRPC$User2 = (TLRPC$User) userOrChat;
            if (!tLRPC$User2.min) {
                tLRPC$User = tLRPC$User2;
                tLRPC$Chat = null;
            }
            tLRPC$User = null;
            tLRPC$Chat = null;
        } else {
            if (userOrChat instanceof TLRPC$Chat) {
                TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) userOrChat;
                if (!tLRPC$Chat2.min) {
                    tLRPC$Chat = tLRPC$Chat2;
                    tLRPC$User = null;
                }
            }
            tLRPC$User = null;
            tLRPC$Chat = null;
        }
        if (tLRPC$User != null) {
            openChatOrProfileWith(tLRPC$User, null, baseFragment, i, false);
        } else if (tLRPC$Chat != null) {
            openChatOrProfileWith(null, tLRPC$Chat, baseFragment, 1, false);
        } else if (baseFragment.getParentActivity() == null) {
        } else {
            final AlertDialog[] alertDialogArr = {new AlertDialog(baseFragment.getParentActivity(), 3)};
            final boolean[] zArr = {false};
            getMessagesController().getUserNameResolver().resolve(str, new com.google.android.exoplayer2.util.Consumer() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda359
                @Override // com.google.android.exoplayer2.util.Consumer
                public final void accept(Object obj) {
                    MessagesController.this.lambda$openByUserName$409(progress, alertDialogArr, baseFragment, zArr, i, (Long) obj);
                }
            });
            if (progress != null) {
                progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda360
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.lambda$openByUserName$410(zArr);
                    }
                });
                progress.init();
                return;
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda361
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$openByUserName$412(alertDialogArr, zArr, baseFragment);
                }
            }, 500L);
        }
    }

    public /* synthetic */ void lambda$openByUserName$409(Browser.Progress progress, AlertDialog[] alertDialogArr, BaseFragment baseFragment, boolean[] zArr, int i, Long l) {
        try {
            if (progress != null) {
                progress.end();
            } else {
                alertDialogArr[0].dismiss();
            }
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog(null);
        if (zArr[0]) {
            return;
        }
        if (l != null) {
            if (l.longValue() < 0) {
                openChatOrProfileWith(null, getChat(Long.valueOf(-l.longValue())), baseFragment, 1, false);
            } else {
                openChatOrProfileWith(getUser(l), null, baseFragment, i, false);
            }
        } else if (baseFragment.getParentActivity() != null) {
            try {
                if (baseFragment instanceof ChatActivity) {
                    ((ChatActivity) baseFragment).shakeContent();
                }
                BulletinFactory.of(baseFragment).createErrorBulletin(LocaleController.getString("NoUsernameFound", R.string.NoUsernameFound)).show();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    public static /* synthetic */ void lambda$openByUserName$410(boolean[] zArr) {
        zArr[0] = true;
    }

    public static /* synthetic */ void lambda$openByUserName$412(AlertDialog[] alertDialogArr, final boolean[] zArr, BaseFragment baseFragment) {
        AlertDialog alertDialog = alertDialogArr[0];
        if (alertDialog == null) {
            return;
        }
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda72
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.lambda$openByUserName$411(zArr, dialogInterface);
            }
        });
        baseFragment.showDialog(alertDialogArr[0]);
    }

    public static /* synthetic */ void lambda$openByUserName$411(boolean[] zArr, DialogInterface dialogInterface) {
        zArr[0] = true;
    }

    public Runnable ensureMessagesLoaded(final long j, int i, final MessagesLoadedCallback messagesLoadedCallback) {
        int i2;
        int i3;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j, 0);
        } else {
            i2 = i;
        }
        final int generateClassGuid = ConnectionsManager.generateClassGuid();
        final long j2 = DialogObject.isChatDialog(j) ? -j : 0L;
        if (j2 != 0 && getMessagesController().getChat(Long.valueOf(j2)) == null) {
            final boolean[] zArr = new boolean[1];
            final Runnable[] runnableArr = new Runnable[1];
            final MessagesStorage messagesStorage = getMessagesStorage();
            final int i4 = i2;
            messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda280
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$ensureMessagesLoaded$414(zArr, messagesStorage, j2, runnableArr, j, i4, messagesLoadedCallback);
                }
            });
            return new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda281
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$ensureMessagesLoaded$415(zArr, runnableArr);
                }
            };
        }
        int i5 = AndroidUtilities.isTablet() ? 30 : 20;
        final int i6 = i5;
        final int i7 = i2;
        NotificationCenter.NotificationCenterDelegate notificationCenterDelegate = new NotificationCenter.NotificationCenterDelegate() { // from class: org.telegram.messenger.MessagesController.3
            {
                MessagesController.this = this;
            }

            @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
            public void didReceivedNotification(int i8, int i9, Object... objArr) {
                int i10 = NotificationCenter.messagesDidLoadWithoutProcess;
                if (i8 == i10 && ((Integer) objArr[0]).intValue() == generateClassGuid) {
                    int intValue = ((Integer) objArr[1]).intValue();
                    boolean booleanValue = ((Boolean) objArr[2]).booleanValue();
                    boolean booleanValue2 = ((Boolean) objArr[3]).booleanValue();
                    int intValue2 = ((Integer) objArr[4]).intValue();
                    int i11 = i6;
                    if (intValue < i11 / 2 && !booleanValue2 && booleanValue) {
                        int i12 = i7;
                        if (i12 != 0) {
                            MessagesController.this.loadMessagesInternal(j, 0L, false, i11, i12, 0, false, 0, generateClassGuid, 3, intValue2, 0, 0L, -1, 0, 0, 0, false, 0, true, false, false, null, 0L);
                            return;
                        } else {
                            MessagesController.this.loadMessagesInternal(j, 0L, false, i11, i12, 0, false, 0, generateClassGuid, 2, intValue2, 0, 0L, -1, 0, 0, 0, false, 0, true, false, false, null, 0L);
                            return;
                        }
                    }
                    MessagesController.this.getNotificationCenter().removeObserver(this, i10);
                    MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                    MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
                    if (messagesLoadedCallback2 != null) {
                        messagesLoadedCallback2.onMessagesLoaded(booleanValue);
                        return;
                    }
                    return;
                }
                int i13 = NotificationCenter.loadingMessagesFailed;
                if (i8 == i13 && ((Integer) objArr[0]).intValue() == generateClassGuid) {
                    MessagesController.this.getNotificationCenter().removeObserver(this, i10);
                    MessagesController.this.getNotificationCenter().removeObserver(this, i13);
                    MessagesLoadedCallback messagesLoadedCallback3 = messagesLoadedCallback;
                    if (messagesLoadedCallback3 != null) {
                        messagesLoadedCallback3.onError();
                    }
                }
            }
        };
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.messagesDidLoadWithoutProcess);
        getNotificationCenter().addObserver(notificationCenterDelegate, NotificationCenter.loadingMessagesFailed);
        if (i2 != 0) {
            i3 = generateClassGuid;
            loadMessagesInternal(j, 0L, true, i5, i2, 0, true, 0, i3, 3, 0, 0, 0L, -1, 0, 0, 0, false, 0, true, false, false, null, 0L);
        } else {
            i3 = generateClassGuid;
            loadMessagesInternal(j, 0L, true, i5, i2, 0, true, 0, i3, 2, 0, 0, 0L, -1, 0, 0, 0, false, 0, true, false, false, null, 0L);
        }
        final int i8 = i3;
        return new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda282
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$ensureMessagesLoaded$416(i8);
            }
        };
    }

    public /* synthetic */ void lambda$ensureMessagesLoaded$414(final boolean[] zArr, MessagesStorage messagesStorage, long j, final Runnable[] runnableArr, final long j2, final int i, final MessagesLoadedCallback messagesLoadedCallback) {
        if (zArr[0]) {
            return;
        }
        final TLRPC$Chat chat = messagesStorage.getChat(j);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda157
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$ensureMessagesLoaded$413(zArr, chat, runnableArr, j2, i, messagesLoadedCallback);
            }
        });
    }

    public /* synthetic */ void lambda$ensureMessagesLoaded$413(boolean[] zArr, TLRPC$Chat tLRPC$Chat, Runnable[] runnableArr, long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        if (zArr[0]) {
            return;
        }
        if (tLRPC$Chat != null) {
            getMessagesController().putChat(tLRPC$Chat, true);
            runnableArr[0] = ensureMessagesLoaded(j, i, messagesLoadedCallback);
        } else if (messagesLoadedCallback != null) {
            messagesLoadedCallback.onError();
        }
    }

    public static /* synthetic */ void lambda$ensureMessagesLoaded$415(boolean[] zArr, Runnable[] runnableArr) {
        zArr[0] = true;
        Runnable runnable = runnableArr[0];
        if (runnable != null) {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$ensureMessagesLoaded$416(int i) {
        getConnectionsManager().cancelRequestsForGuid(i);
    }

    public int getChatPendingRequestsOnClosed(long j) {
        SharedPreferences sharedPreferences = this.mainPreferences;
        return sharedPreferences.getInt("chatPendingRequests" + j, 0);
    }

    public void setChatPendingRequestsOnClose(long j, int i) {
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("chatPendingRequests" + j, i).apply();
    }

    public void deleteMessagesRange(final long j, final long j2, final int i, final int i2, boolean z, final Runnable runnable) {
        TLRPC$TL_messages_deleteHistory tLRPC$TL_messages_deleteHistory = new TLRPC$TL_messages_deleteHistory();
        tLRPC$TL_messages_deleteHistory.peer = getInputPeer(j);
        tLRPC$TL_messages_deleteHistory.flags = 12;
        tLRPC$TL_messages_deleteHistory.min_date = i;
        tLRPC$TL_messages_deleteHistory.max_date = i2;
        tLRPC$TL_messages_deleteHistory.revoke = z;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteHistory, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda91
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteMessagesRange$420(j, i, i2, j2, runnable, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$420(final long j, final int i, final int i2, final long j2, final Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda144
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$deleteMessagesRange$418(j, i, i2, j2, runnable);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda145
            @Override // java.lang.Runnable
            public final void run() {
                runnable.run();
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$418(long j, int i, int i2, final long j2, final Runnable runnable) {
        final ArrayList<Integer> cachedMessagesInRange = getMessagesStorage().getCachedMessagesInRange(j, i, i2);
        getMessagesStorage().markMessagesAsDeleted(j, cachedMessagesInRange, false, true, 0, 0);
        getMessagesStorage().updateDialogsWithDeletedMessages(j, 0L, cachedMessagesInRange, null, false);
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda389
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$deleteMessagesRange$417(cachedMessagesInRange, j2, runnable);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesRange$417(ArrayList arrayList, long j, Runnable runnable) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        runnable.run();
    }

    public void setCustomChatReactions(final long j, int i, List<TLRPC$Reaction> list, int i2, Boolean bool, final Utilities.Callback<TLRPC$TL_error> callback, final Runnable runnable) {
        final TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions = new TLRPC$TL_messages_setChatAvailableReactions();
        tLRPC$TL_messages_setChatAvailableReactions.peer = getInputPeer(-j);
        if (i == 2 || list.isEmpty()) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsNone();
        } else if (i == 0) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsAll();
        } else {
            TLRPC$TL_chatReactionsSome tLRPC$TL_chatReactionsSome = new TLRPC$TL_chatReactionsSome();
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = tLRPC$TL_chatReactionsSome;
            tLRPC$TL_chatReactionsSome.reactions.addAll(list);
        }
        if (bool != null) {
            tLRPC$TL_messages_setChatAvailableReactions.flags |= 2;
            tLRPC$TL_messages_setChatAvailableReactions.paid_enabled = bool.booleanValue();
        }
        tLRPC$TL_messages_setChatAvailableReactions.flags |= 1;
        tLRPC$TL_messages_setChatAvailableReactions.reactions_limit = i2;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda178
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setCustomChatReactions$423(j, tLRPC$TL_messages_setChatAvailableReactions, runnable, callback, tLObject, tLRPC$TL_error);
            }
        });
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            if (chatFull instanceof TLRPC$TL_channelFull) {
                chatFull.flags2 |= LiteMode.FLAG_ANIMATED_EMOJI_REACTIONS_NOT_PREMIUM;
            } else {
                chatFull.flags |= FileLoaderPriorityQueue.PRIORITY_VALUE_MAX;
            }
            chatFull.reactions_limit = i2;
            if (bool != null) {
                chatFull.paid_reactions_available = bool.booleanValue();
            }
            getMessagesStorage().updateChatInfo(chatFull, false);
        }
    }

    public /* synthetic */ void lambda$setCustomChatReactions$423(final long j, TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions, final Runnable runnable, final Utilities.Callback callback, TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            TLRPC$ChatFull chatFull = getChatFull(j);
            if (chatFull != null) {
                if (chatFull instanceof TLRPC$TL_chatFull) {
                    chatFull.flags |= 262144;
                }
                if (chatFull instanceof TLRPC$TL_channelFull) {
                    chatFull.flags |= 1073741824;
                }
                chatFull.available_reactions = tLRPC$TL_messages_setChatAvailableReactions.available_reactions;
                getMessagesStorage().updateChatInfo(chatFull, false);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda410
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setCustomChatReactions$421(runnable, j);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda411
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$setCustomChatReactions$422(Utilities.Callback.this, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setCustomChatReactions$421(Runnable runnable, long j) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(j), 0L);
    }

    public static /* synthetic */ void lambda$setCustomChatReactions$422(Utilities.Callback callback, TLRPC$TL_error tLRPC$TL_error) {
        if (callback != null) {
            callback.run(tLRPC$TL_error);
        }
    }

    public void setChatReactions(final long j, int i, List<String> list) {
        final TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions = new TLRPC$TL_messages_setChatAvailableReactions();
        tLRPC$TL_messages_setChatAvailableReactions.peer = getInputPeer(-j);
        if (i == 2) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsNone();
        } else if (i == 0) {
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = new TLRPC$TL_chatReactionsAll();
        } else {
            TLRPC$TL_chatReactionsSome tLRPC$TL_chatReactionsSome = new TLRPC$TL_chatReactionsSome();
            tLRPC$TL_messages_setChatAvailableReactions.available_reactions = tLRPC$TL_chatReactionsSome;
            for (int i2 = 0; i2 < list.size(); i2++) {
                TLRPC$TL_reactionEmoji tLRPC$TL_reactionEmoji = new TLRPC$TL_reactionEmoji();
                tLRPC$TL_reactionEmoji.emoticon = list.get(i2);
                tLRPC$TL_chatReactionsSome.reactions.add(tLRPC$TL_reactionEmoji);
            }
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setChatAvailableReactions, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda210
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChatReactions$425(j, tLRPC$TL_messages_setChatAvailableReactions, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChatReactions$425(final long j, TLRPC$TL_messages_setChatAvailableReactions tLRPC$TL_messages_setChatAvailableReactions, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            TLRPC$ChatFull chatFull = getChatFull(j);
            if (chatFull != null) {
                if (chatFull instanceof TLRPC$TL_chatFull) {
                    chatFull.flags |= 262144;
                }
                if (chatFull instanceof TLRPC$TL_channelFull) {
                    chatFull.flags |= 1073741824;
                }
                chatFull.available_reactions = tLRPC$TL_messages_setChatAvailableReactions.available_reactions;
                getMessagesStorage().updateChatInfo(chatFull, false);
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda372
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$setChatReactions$424(j);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setChatReactions$424(long j) {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(j), 0L);
    }

    public boolean matchesAdminRights(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights) {
        if (tLRPC$TL_chatAdminRights == null) {
            return true;
        }
        TLRPC$TL_chatAdminRights chatAdminRightsCached = getChatAdminRightsCached(tLRPC$Chat, tLRPC$User);
        if ((!tLRPC$TL_chatAdminRights.change_info || (chatAdminRightsCached != null && chatAdminRightsCached.change_info)) && ((!tLRPC$TL_chatAdminRights.post_messages || (chatAdminRightsCached != null && chatAdminRightsCached.post_messages)) && ((!tLRPC$TL_chatAdminRights.edit_messages || (chatAdminRightsCached != null && chatAdminRightsCached.edit_messages)) && ((!tLRPC$TL_chatAdminRights.delete_messages || (chatAdminRightsCached != null && chatAdminRightsCached.delete_messages)) && ((!tLRPC$TL_chatAdminRights.ban_users || (chatAdminRightsCached != null && chatAdminRightsCached.ban_users)) && ((!tLRPC$TL_chatAdminRights.invite_users || (chatAdminRightsCached != null && chatAdminRightsCached.invite_users)) && ((!tLRPC$TL_chatAdminRights.pin_messages || (chatAdminRightsCached != null && chatAdminRightsCached.pin_messages)) && ((!tLRPC$TL_chatAdminRights.add_admins || (chatAdminRightsCached != null && chatAdminRightsCached.add_admins)) && ((!tLRPC$TL_chatAdminRights.anonymous || (chatAdminRightsCached != null && chatAdminRightsCached.anonymous)) && ((!tLRPC$TL_chatAdminRights.manage_call || (chatAdminRightsCached != null && chatAdminRightsCached.manage_call)) && (!tLRPC$TL_chatAdminRights.other || (chatAdminRightsCached != null && chatAdminRightsCached.other)))))))))))) {
            if (!tLRPC$TL_chatAdminRights.manage_topics) {
                return true;
            }
            if (chatAdminRightsCached != null && chatAdminRightsCached.manage_topics) {
                return true;
            }
        }
        return false;
    }

    public TLRPC$TL_chatAdminRights getChatAdminRightsCached(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User) {
        TLRPC$ChatParticipants tLRPC$ChatParticipants;
        ArrayList<TLRPC$ChatParticipant> arrayList;
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        if (tLRPC$Chat != null && tLRPC$User != null) {
            if (UserObject.isUserSelf(tLRPC$User)) {
                return tLRPC$Chat.admin_rights;
            }
            TLRPC$ChatFull chatFull = getChatFull(tLRPC$Chat.id);
            if (chatFull != null && (tLRPC$ChatParticipants = chatFull.participants) != null && (arrayList = tLRPC$ChatParticipants.participants) != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$ChatParticipant tLRPC$ChatParticipant = arrayList.get(i);
                    if (tLRPC$ChatParticipant != null && tLRPC$ChatParticipant.user_id == tLRPC$User.id) {
                        if (!(tLRPC$ChatParticipant instanceof TLRPC$TL_chatChannelParticipant) || (tLRPC$ChannelParticipant = ((TLRPC$TL_chatChannelParticipant) tLRPC$ChatParticipant).channelParticipant) == null) {
                            return null;
                        }
                        return tLRPC$ChannelParticipant.admin_rights;
                    }
                }
            }
        }
        return null;
    }

    public boolean isInChatCached(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User) {
        TLRPC$ChatParticipants tLRPC$ChatParticipants;
        ArrayList<TLRPC$ChatParticipant> arrayList;
        if (tLRPC$Chat != null && tLRPC$User != null) {
            if (UserObject.isUserSelf(tLRPC$User)) {
                return !ChatObject.isNotInChat(tLRPC$Chat);
            }
            TLRPC$ChatFull chatFull = getChatFull(tLRPC$Chat.id);
            if (chatFull != null && (tLRPC$ChatParticipants = chatFull.participants) != null && (arrayList = tLRPC$ChatParticipants.participants) != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$ChatParticipant tLRPC$ChatParticipant = arrayList.get(i);
                    if (tLRPC$ChatParticipant != null && tLRPC$ChatParticipant.user_id == tLRPC$User.id) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public void getChannelParticipant(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, final Utilities.Callback<TLRPC$ChannelParticipant> callback) {
        if (tLRPC$Chat == null || tLRPC$User == null) {
            if (callback != null) {
                callback.run(null);
                return;
            }
            return;
        }
        TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
        tLRPC$TL_channels_getParticipant.channel = getInputChannel(tLRPC$Chat.id);
        tLRPC$TL_channels_getParticipant.participant = getInputPeer(tLRPC$User);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda329
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$getChannelParticipant$426(Utilities.Callback.this, tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$getChannelParticipant$426(Utilities.Callback callback, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (callback != null) {
            callback.run(tLObject instanceof TLRPC$TL_channels_channelParticipant ? ((TLRPC$TL_channels_channelParticipant) tLObject).participant : null);
        }
    }

    public void checkIsInChat(boolean z, TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, final IsInChatCheckedCallback isInChatCheckedCallback) {
        TLRPC$ChatFull chatFull;
        TLRPC$ChatParticipant tLRPC$ChatParticipant;
        ArrayList<TLRPC$ChatParticipant> arrayList;
        TLRPC$ChatParticipant tLRPC$ChatParticipant2;
        ArrayList<TLRPC$ChatParticipant> arrayList2;
        if (tLRPC$Chat == null || tLRPC$User == null) {
            if (isInChatCheckedCallback != null) {
                isInChatCheckedCallback.run(false, null, null);
            }
        } else if (tLRPC$Chat.megagroup || ChatObject.isChannel(tLRPC$Chat)) {
            if (z && (chatFull = getChatFull(tLRPC$Chat.id)) != null) {
                TLRPC$ChatParticipants tLRPC$ChatParticipants = chatFull.participants;
                if (tLRPC$ChatParticipants != null && (arrayList = tLRPC$ChatParticipants.participants) != null) {
                    int size = arrayList.size();
                    for (int i = 0; i < size; i++) {
                        tLRPC$ChatParticipant = chatFull.participants.participants.get(i);
                        if (tLRPC$ChatParticipant != null && tLRPC$ChatParticipant.user_id == tLRPC$User.id) {
                            break;
                        }
                    }
                }
                tLRPC$ChatParticipant = null;
                if (isInChatCheckedCallback != null && tLRPC$ChatParticipant != null) {
                    TLRPC$ChatParticipants tLRPC$ChatParticipants2 = chatFull.participants;
                    isInChatCheckedCallback.run(true, (tLRPC$ChatParticipants2 == null || tLRPC$ChatParticipants2.admin_id != tLRPC$User.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), null);
                    return;
                }
            }
            TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
            tLRPC$TL_channels_getParticipant.channel = getInputChannel(tLRPC$Chat.id);
            tLRPC$TL_channels_getParticipant.participant = getInputPeer(tLRPC$User);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda99
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.lambda$checkIsInChat$427(MessagesController.IsInChatCheckedCallback.this, tLObject, tLRPC$TL_error);
                }
            });
        } else {
            TLRPC$ChatFull chatFull2 = getChatFull(tLRPC$Chat.id);
            if (chatFull2 == null) {
                if (isInChatCheckedCallback != null) {
                    isInChatCheckedCallback.run(false, null, null);
                    return;
                }
                return;
            }
            TLRPC$ChatParticipants tLRPC$ChatParticipants3 = chatFull2.participants;
            if (tLRPC$ChatParticipants3 != null && (arrayList2 = tLRPC$ChatParticipants3.participants) != null) {
                int size2 = arrayList2.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    tLRPC$ChatParticipant2 = chatFull2.participants.participants.get(i2);
                    if (tLRPC$ChatParticipant2 != null && tLRPC$ChatParticipant2.user_id == tLRPC$User.id) {
                        break;
                    }
                }
            }
            tLRPC$ChatParticipant2 = null;
            if (isInChatCheckedCallback != null) {
                boolean z2 = tLRPC$ChatParticipant2 != null;
                TLRPC$ChatParticipants tLRPC$ChatParticipants4 = chatFull2.participants;
                isInChatCheckedCallback.run(z2, (tLRPC$ChatParticipants4 == null || tLRPC$ChatParticipants4.admin_id != tLRPC$User.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), null);
            }
        }
    }

    public static /* synthetic */ void lambda$checkIsInChat$427(IsInChatCheckedCallback isInChatCheckedCallback, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (isInChatCheckedCallback != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLObject instanceof TLRPC$TL_channels_channelParticipant ? ((TLRPC$TL_channels_channelParticipant) tLObject).participant : null;
            isInChatCheckedCallback.run((tLRPC$TL_error != null || tLRPC$ChannelParticipant == null || tLRPC$ChannelParticipant.left) ? false : true, tLRPC$ChannelParticipant != null ? tLRPC$ChannelParticipant.admin_rights : null, tLRPC$ChannelParticipant != null ? tLRPC$ChannelParticipant.rank : null);
        }
    }

    public void updateEmojiStatusUntilUpdate(long j, TLRPC$EmojiStatus tLRPC$EmojiStatus) {
        if (tLRPC$EmojiStatus instanceof TLRPC$TL_emojiStatusUntil) {
            this.emojiStatusUntilValues.put(j, Integer.valueOf(((TLRPC$TL_emojiStatusUntil) tLRPC$EmojiStatus).until));
        } else if (!this.emojiStatusUntilValues.containsKey(j)) {
            return;
        } else {
            this.emojiStatusUntilValues.remove(j);
        }
        updateEmojiStatusUntil();
    }

    public void updateEmojiStatusUntil() {
        int intValue;
        int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
        Long l = null;
        int i = 0;
        while (i < this.emojiStatusUntilValues.size()) {
            if (this.emojiStatusUntilValues.valueAt(i).intValue() > currentTimeMillis) {
                l = Long.valueOf(Math.min(l == null ? Long.MAX_VALUE : l.longValue(), intValue - currentTimeMillis));
            } else {
                this.emojiStatusUntilValues.removeAt(i);
                i--;
            }
            i++;
        }
        if (l != null) {
            Long valueOf = Long.valueOf(l.longValue() + 2);
            long j = currentTimeMillis;
            if (valueOf.longValue() + j != this.recentEmojiStatusUpdateRunnableTime + this.recentEmojiStatusUpdateRunnableTimeout) {
                AndroidUtilities.cancelRunOnUIThread(this.recentEmojiStatusUpdateRunnable);
                this.recentEmojiStatusUpdateRunnableTime = j;
                this.recentEmojiStatusUpdateRunnableTimeout = valueOf.longValue();
                Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda141
                    @Override // java.lang.Runnable
                    public final void run() {
                        MessagesController.this.lambda$updateEmojiStatusUntil$428();
                    }
                };
                this.recentEmojiStatusUpdateRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, valueOf.longValue() * 1000);
                return;
            }
            return;
        }
        Runnable runnable2 = this.recentEmojiStatusUpdateRunnable;
        if (runnable2 != null) {
            this.recentEmojiStatusUpdateRunnableTime = -1L;
            this.recentEmojiStatusUpdateRunnableTimeout = -1L;
            AndroidUtilities.cancelRunOnUIThread(runnable2);
        }
    }

    public /* synthetic */ void lambda$updateEmojiStatusUntil$428() {
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_EMOJI_STATUS));
        updateEmojiStatusUntil();
    }

    public String getMutedString(long j, long j2) {
        if (getMessagesController().isDialogMuted(j, j2)) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int i = sharedPreferences.getInt(NotificationsSettingsFacade.PROPERTY_NOTIFY_UNTIL + NotificationsController.getSharedPrefKey(j, j2), 0);
            return i >= getConnectionsManager().getCurrentTime() ? LocaleController.formatString("NotificationsMutedForHint", R.string.NotificationsMutedForHint, LocaleController.formatTTLString(i)) : LocaleController.getString(R.string.NotificationsMuted);
        }
        return LocaleController.getString(R.string.NotificationsUnmuted);
    }

    public int getDialogUnreadCount(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog == null) {
            return 0;
        }
        int i = tLRPC$Dialog.unread_count;
        TLRPC$Chat chat = getChat(Long.valueOf(-tLRPC$Dialog.id));
        return (chat == null || !chat.forum) ? i : this.topicsController.getForumUnreadCount(-tLRPC$Dialog.id)[0];
    }

    public TLRPC$TL_exportedContactToken getCachedContactToken() {
        TLRPC$TL_exportedContactToken tLRPC$TL_exportedContactToken = this.cachedContactToken;
        if (tLRPC$TL_exportedContactToken == null || tLRPC$TL_exportedContactToken.expires <= System.currentTimeMillis() / 1000) {
            return null;
        }
        return this.cachedContactToken;
    }

    public void requestContactToken(Utilities.Callback<TLRPC$TL_exportedContactToken> callback) {
        requestContactToken(0L, callback);
    }

    public void requestContactToken(final long j, final Utilities.Callback<TLRPC$TL_exportedContactToken> callback) {
        if (callback == null || this.requestingContactToken) {
            return;
        }
        TLRPC$TL_exportedContactToken tLRPC$TL_exportedContactToken = this.cachedContactToken;
        if (tLRPC$TL_exportedContactToken != null && tLRPC$TL_exportedContactToken.expires > System.currentTimeMillis() / 1000) {
            callback.run(this.cachedContactToken);
            return;
        }
        this.requestingContactToken = true;
        final long currentTimeMillis = System.currentTimeMillis();
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.TLRPC$TL_contacts_exportContactToken
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TLRPC$TL_exportedContactToken.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-127582169);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda425
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$requestContactToken$430(callback, j, currentTimeMillis, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$requestContactToken$430(final Utilities.Callback callback, long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_exportedContactToken) {
            this.cachedContactToken = (TLRPC$TL_exportedContactToken) tLObject;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda26
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$requestContactToken$429(callback);
                }
            }, Math.max(0L, j - (System.currentTimeMillis() - j2)));
            return;
        }
        this.requestingContactToken = false;
    }

    public /* synthetic */ void lambda$requestContactToken$429(Utilities.Callback callback) {
        callback.run(this.cachedContactToken);
        this.requestingContactToken = false;
    }

    public CacheByChatsController getCacheByChatsController() {
        return this.cacheByChatsController;
    }

    public int getFilterIdByDialogsType(int i) {
        if (i == 7 || i == 8) {
            DialogFilter dialogFilter = this.selectedDialogFilter[i - 7];
            if (dialogFilter == null) {
                return -1;
            }
            return dialogFilter.id;
        }
        return 0;
    }

    public void invalidateChatlistFolderUpdate(int i) {
        this.chatlistFoldersUpdates.remove(i);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatlistFolderUpdate, Integer.valueOf(i));
    }

    public void checkChatlistFolderUpdate(final int i, boolean z) {
        if (i < 0) {
            return;
        }
        final ChatlistUpdatesStat chatlistUpdatesStat = this.chatlistFoldersUpdates.get(i);
        if (chatlistUpdatesStat != null) {
            if (chatlistUpdatesStat.loading) {
                return;
            }
            if (System.currentTimeMillis() - chatlistUpdatesStat.lastRequestTime <= this.chatlistUpdatePeriod * 1000 && !z) {
                return;
            }
        }
        if (chatlistUpdatesStat == null) {
            chatlistUpdatesStat = new ChatlistUpdatesStat();
            this.chatlistFoldersUpdates.put(i, chatlistUpdatesStat);
        }
        chatlistUpdatesStat.loading = false;
        TL_chatlists$TL_chatlists_getChatlistUpdates tL_chatlists$TL_chatlists_getChatlistUpdates = new TL_chatlists$TL_chatlists_getChatlistUpdates();
        TL_chatlists$TL_inputChatlistDialogFilter tL_chatlists$TL_inputChatlistDialogFilter = new TL_chatlists$TL_inputChatlistDialogFilter();
        tL_chatlists$TL_chatlists_getChatlistUpdates.chatlist = tL_chatlists$TL_inputChatlistDialogFilter;
        tL_chatlists$TL_inputChatlistDialogFilter.filter_id = i;
        getConnectionsManager().sendRequest(tL_chatlists$TL_chatlists_getChatlistUpdates, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda301
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$checkChatlistFolderUpdate$432(i, chatlistUpdatesStat, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatlistFolderUpdate$432(final int i, final ChatlistUpdatesStat chatlistUpdatesStat, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda229
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$checkChatlistFolderUpdate$431(tLObject, i, chatlistUpdatesStat);
            }
        });
    }

    public /* synthetic */ void lambda$checkChatlistFolderUpdate$431(TLObject tLObject, int i, ChatlistUpdatesStat chatlistUpdatesStat) {
        if (tLObject instanceof TL_chatlists$TL_chatlists_chatlistUpdates) {
            TL_chatlists$TL_chatlists_chatlistUpdates tL_chatlists$TL_chatlists_chatlistUpdates = (TL_chatlists$TL_chatlists_chatlistUpdates) tLObject;
            putChats(tL_chatlists$TL_chatlists_chatlistUpdates.chats, false);
            putUsers(tL_chatlists$TL_chatlists_chatlistUpdates.users, false);
            this.chatlistFoldersUpdates.put(i, new ChatlistUpdatesStat(tL_chatlists$TL_chatlists_chatlistUpdates));
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.chatlistFolderUpdate, Integer.valueOf(i));
            return;
        }
        chatlistUpdatesStat.loading = false;
    }

    public TL_chatlists$TL_chatlists_chatlistUpdates getChatlistFolderUpdates(int i) {
        ChatlistUpdatesStat chatlistUpdatesStat = this.chatlistFoldersUpdates.get(i);
        if (chatlistUpdatesStat == null) {
            return null;
        }
        return chatlistUpdatesStat.lastValue;
    }

    public Pair<Runnable, Runnable> removeFolderTemporarily(final int i, ArrayList<Long> arrayList) {
        this.frozenDialogFilters = new ArrayList<>(this.dialogFilters);
        int i2 = 0;
        while (i2 < this.frozenDialogFilters.size()) {
            if (this.frozenDialogFilters.get(i2).id == i) {
                this.frozenDialogFilters.remove(i2);
                i2--;
            }
            i2++;
        }
        this.hiddenUndoChats.clear();
        if (arrayList != null) {
            this.hiddenUndoChats.addAll(arrayList);
        }
        final boolean z = !this.hiddenUndoChats.isEmpty();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        return new Pair<>(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda73
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$removeFolderTemporarily$433(i, z);
            }
        }, new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$removeFolderTemporarily$434(z);
            }
        });
    }

    public /* synthetic */ void lambda$removeFolderTemporarily$433(int i, boolean z) {
        int i2 = 0;
        while (i2 < this.dialogFilters.size()) {
            if (this.dialogFilters.get(i2).id == i) {
                this.dialogFilters.remove(i2);
                i2--;
            }
            i2++;
        }
        this.frozenDialogFilters = null;
        this.hiddenUndoChats.clear();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$removeFolderTemporarily$434(boolean z) {
        this.frozenDialogFilters = null;
        this.hiddenUndoChats.clear();
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isHiddenByUndo(long j) {
        return !this.hiddenUndoChats.isEmpty() && this.hiddenUndoChats.contains(Long.valueOf(j));
    }

    public void cancelUploadWallpaper() {
        Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
        if (overrideWallpaperInfo != null) {
            if (overrideWallpaperInfo.requestIds != null) {
                for (int i = 0; i < this.uploadingWallpaperInfo.requestIds.size(); i++) {
                    ConnectionsManager.getInstance(this.currentAccount).cancelRequest(this.uploadingWallpaperInfo.requestIds.get(i).intValue(), true);
                }
            }
            FileLoader.getInstance(this.currentAccount).cancelFileUpload(this.uploadingWallpaper, false);
            long j = this.uploadingWallpaperInfo.dialogId;
            if (j != 0) {
                if (j >= 0) {
                    TLRPC$UserFull userFull = getUserFull(j);
                    if (userFull != null) {
                        userFull.wallpaper = this.uploadingWallpaperInfo.prevUserWallpaper;
                        NotificationCenter.getInstance(this.currentAccount).lambda$postNotificationNameOnUIThread$1(NotificationCenter.userInfoDidLoad, Long.valueOf(this.uploadingWallpaperInfo.dialogId), userFull);
                    }
                } else {
                    TLRPC$ChatFull chatFull = getChatFull(-j);
                    if (chatFull != null) {
                        chatFull.wallpaper = this.uploadingWallpaperInfo.prevUserWallpaper;
                        NotificationCenter notificationCenter = NotificationCenter.getInstance(this.currentAccount);
                        int i2 = NotificationCenter.chatInfoDidLoad;
                        Boolean bool = Boolean.FALSE;
                        notificationCenter.lambda$postNotificationNameOnUIThread$1(i2, chatFull, 0, bool, bool);
                    }
                }
            }
            this.uploadingWallpaperInfo = null;
            this.uploadingWallpaper = null;
        }
    }

    public StoriesController getStoriesController() {
        StoriesController storiesController = this.storiesController;
        if (storiesController != null) {
            return storiesController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            StoriesController storiesController2 = this.storiesController;
            if (storiesController2 != null) {
                return storiesController2;
            }
            StoriesController storiesController3 = new StoriesController(this.currentAccount);
            this.storiesController = storiesController3;
            return storiesController3;
        }
    }

    public SavedMessagesController getSavedMessagesController() {
        SavedMessagesController savedMessagesController = this.savedMessagesController;
        if (savedMessagesController != null) {
            return savedMessagesController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            SavedMessagesController savedMessagesController2 = this.savedMessagesController;
            if (savedMessagesController2 != null) {
                return savedMessagesController2;
            }
            SavedMessagesController savedMessagesController3 = new SavedMessagesController(this.currentAccount);
            this.savedMessagesController = savedMessagesController3;
            return savedMessagesController3;
        }
    }

    public UnconfirmedAuthController getUnconfirmedAuthController() {
        UnconfirmedAuthController unconfirmedAuthController = this.unconfirmedAuthController;
        if (unconfirmedAuthController != null) {
            return unconfirmedAuthController;
        }
        synchronized (lockObjects[this.currentAccount]) {
            UnconfirmedAuthController unconfirmedAuthController2 = this.unconfirmedAuthController;
            if (unconfirmedAuthController2 != null) {
                return unconfirmedAuthController2;
            }
            UnconfirmedAuthController unconfirmedAuthController3 = new UnconfirmedAuthController(this.currentAccount);
            this.unconfirmedAuthController = unconfirmedAuthController3;
            return unconfirmedAuthController3;
        }
    }

    public boolean storiesEnabled() {
        char c;
        String str = this.storiesPosting;
        int hashCode = str.hashCode();
        if (hashCode == -1609594047) {
            if (str.equals("enabled")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != -318452137) {
            if (hashCode == 270940796 && str.equals("disabled")) {
                c = 3;
            }
            c = 65535;
        } else {
            if (str.equals("premium")) {
                c = 0;
            }
            c = 65535;
        }
        if (c != 0) {
            return c == 1;
        }
        return getUserConfig().isPremium();
    }

    public boolean storyEntitiesAllowed() {
        char c;
        String str = this.storiesEntities;
        int hashCode = str.hashCode();
        if (hashCode == -1609594047) {
            if (str.equals("enabled")) {
                c = 1;
            }
            c = 65535;
        } else if (hashCode != -318452137) {
            if (hashCode == 270940796 && str.equals("disabled")) {
                c = 3;
            }
            c = 65535;
        } else {
            if (str.equals("premium")) {
                c = 0;
            }
            c = 65535;
        }
        if (c != 0) {
            return c == 1;
        }
        return getUserConfig().isPremium();
    }

    public boolean storyEntitiesAllowed(TLRPC$User tLRPC$User) {
        char c;
        if (tLRPC$User == null || tLRPC$User.id != this.storiesChangelogUserId) {
            String str = this.storiesEntities;
            int hashCode = str.hashCode();
            if (hashCode == -1609594047) {
                if (str.equals("enabled")) {
                    c = 1;
                }
                c = 65535;
            } else if (hashCode != -318452137) {
                if (hashCode == 270940796 && str.equals("disabled")) {
                    c = 3;
                }
                c = 65535;
            } else {
                if (str.equals("premium")) {
                    c = 0;
                }
                c = 65535;
            }
            return c != 0 ? c == 1 : tLRPC$User != null && tLRPC$User.premium;
        }
        return true;
    }

    /* loaded from: classes3.dex */
    public static class ChannelRecommendations {
        public final ArrayList<TLRPC$Chat> chats = new ArrayList<>();
        public int more;
        public boolean wasPremium;

        public static boolean hasRecommendations(ChannelRecommendations channelRecommendations) {
            return (channelRecommendations == null || channelRecommendations.chats.isEmpty()) ? false : true;
        }

        public static boolean hasRecommendations(int i, long j) {
            return hasRecommendations(MessagesController.getInstance(i).getChannelRecommendations(j));
        }
    }

    public ChannelRecommendations getCachedChannelRecommendations(long j) {
        HashMap<Long, ChannelRecommendations> hashMap = this.cachedChannelRecommendations;
        if (hashMap == null) {
            return null;
        }
        return hashMap.get(Long.valueOf(j));
    }

    public ChannelRecommendations getChannelRecommendations(final long j) {
        ChannelRecommendations channelRecommendations;
        TLRPC$InputChannel inputChannel = getInputChannel(j);
        if (inputChannel != null || j == 0) {
            if (this.cachedChannelRecommendations == null) {
                this.cachedChannelRecommendations = new HashMap<>();
            }
            final boolean isPremium = getUserConfig().isPremium();
            if (this.cachedChannelRecommendations.containsKey(Long.valueOf(j))) {
                channelRecommendations = this.cachedChannelRecommendations.get(Long.valueOf(j));
                if (channelRecommendations != null && channelRecommendations.wasPremium == isPremium) {
                    return channelRecommendations;
                }
            } else {
                channelRecommendations = null;
            }
            this.cachedChannelRecommendations.put(Long.valueOf(j), null);
            TLRPC$TL_channels_getChannelRecommendations tLRPC$TL_channels_getChannelRecommendations = new TLRPC$TL_channels_getChannelRecommendations();
            if (j != 0) {
                tLRPC$TL_channels_getChannelRecommendations.flags |= 1;
                tLRPC$TL_channels_getChannelRecommendations.channel = inputChannel;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getChannelRecommendations, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda164
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getChannelRecommendations$436(isPremium, j, tLObject, tLRPC$TL_error);
                }
            });
            return channelRecommendations;
        }
        return null;
    }

    public /* synthetic */ void lambda$getChannelRecommendations$436(final boolean z, final long j, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda244
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getChannelRecommendations$435(tLObject, z, j);
            }
        });
    }

    public /* synthetic */ void lambda$getChannelRecommendations$435(TLObject tLObject, boolean z, long j) {
        if (tLObject instanceof TLRPC$messages_Chats) {
            ArrayList<TLRPC$Chat> arrayList = ((TLRPC$messages_Chats) tLObject).chats;
            putChats(arrayList, false);
            ChannelRecommendations channelRecommendations = new ChannelRecommendations();
            channelRecommendations.wasPremium = z;
            channelRecommendations.chats.addAll(arrayList);
            if (tLObject instanceof TLRPC$TL_messages_chatsSlice) {
                channelRecommendations.more = Math.max(0, ((TLRPC$TL_messages_chatsSlice) tLObject).count - arrayList.size());
            } else if (!getUserConfig().isPremium() && BuildVars.DEBUG_PRIVATE_VERSION) {
                channelRecommendations.more = 90;
            }
            this.cachedChannelRecommendations.put(Long.valueOf(j), channelRecommendations);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.channelRecommendationsLoaded, Long.valueOf(j));
        }
    }

    public boolean processDeletedReactionTags(TLRPC$Message tLRPC$Message) {
        TLRPC$TL_messageReactions tLRPC$TL_messageReactions;
        if (tLRPC$Message == null || DialogObject.getPeerDialogId(tLRPC$Message.peer_id) != getUserConfig().getClientUserId() || (tLRPC$TL_messageReactions = tLRPC$Message.reactions) == null || !tLRPC$TL_messageReactions.reactions_as_tags || tLRPC$TL_messageReactions.results == null) {
            return false;
        }
        long savedDialogId = MessageObject.getSavedDialogId(getUserConfig().getClientUserId(), tLRPC$Message);
        boolean z = false;
        for (int i = 0; i < tLRPC$Message.reactions.results.size(); i++) {
            if (updateSavedReactionTags(savedDialogId, ReactionsLayoutInBubble.VisibleReaction.fromTL(tLRPC$Message.reactions.results.get(i).reaction), false, false)) {
                z = true;
            }
        }
        return z;
    }

    public boolean updateSavedReactionTags(long j, ReactionsLayoutInBubble.VisibleReaction visibleReaction, boolean z, boolean z2) {
        if (this.reactionTags == null) {
            return false;
        }
        int i = 0;
        boolean z3 = false;
        while (i < 2) {
            long j2 = i == 0 ? 0L : j;
            boolean z4 = true;
            if (i != 1 || j2 != 0) {
                TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags = this.reactionTags.get(j2);
                if (tLRPC$TL_messages_savedReactionsTags == null) {
                    if (j2 != 0) {
                        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
                        tLRPC$TL_messages_savedReactionsTags = new TLRPC$TL_messages_savedReactionsTags();
                        longSparseArray.put(j2, tLRPC$TL_messages_savedReactionsTags);
                    }
                }
                int i2 = 0;
                boolean z5 = false;
                boolean z6 = false;
                while (i2 < tLRPC$TL_messages_savedReactionsTags.tags.size()) {
                    TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag = tLRPC$TL_messages_savedReactionsTags.tags.get(i2);
                    if (visibleReaction.isSame(tLRPC$TL_savedReactionTag.reaction)) {
                        int i3 = tLRPC$TL_savedReactionTag.count;
                        int max = Math.max(0, (z ? 1 : -1) + i3);
                        tLRPC$TL_savedReactionTag.count = max;
                        if (max <= 0) {
                            tLRPC$TL_messages_savedReactionsTags.tags.remove(i2);
                            i2--;
                        } else if (max == i3) {
                            z5 = true;
                        }
                        z3 = true;
                        z5 = true;
                        z6 = true;
                    }
                    i2++;
                }
                if (z5 || !z) {
                    z4 = z6;
                } else {
                    TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag2 = new TLRPC$TL_savedReactionTag();
                    tLRPC$TL_savedReactionTag2.reaction = visibleReaction.toTLReaction();
                    tLRPC$TL_savedReactionTag2.count = 1;
                    tLRPC$TL_messages_savedReactionsTags.tags.add(tLRPC$TL_savedReactionTag2);
                    z3 = true;
                }
                if (z2 && z4) {
                    updateSavedReactionTags(j2);
                }
                i++;
            }
            i++;
        }
        return z3;
    }

    public void updateSavedReactionTags(HashSet<Long> hashSet) {
        updateSavedReactionTags(0L);
        Iterator<Long> it = hashSet.iterator();
        while (it.hasNext()) {
            updateSavedReactionTags(it.next().longValue());
        }
    }

    public void updateSavedReactionTags(long j) {
        String str;
        long m;
        long m2;
        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
        if (longSparseArray == null) {
            return;
        }
        TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags = longSparseArray.get(j);
        if (tLRPC$TL_messages_savedReactionsTags == null) {
            if (j == 0) {
                return;
            }
            LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray2 = this.reactionTags;
            TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags2 = new TLRPC$TL_messages_savedReactionsTags();
            longSparseArray2.put(j, tLRPC$TL_messages_savedReactionsTags2);
            tLRPC$TL_messages_savedReactionsTags = tLRPC$TL_messages_savedReactionsTags2;
        }
        Collections.sort(tLRPC$TL_messages_savedReactionsTags.tags, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda142
            @Override // java.util.Comparator
            public final int compare(Object obj, Object obj2) {
                int lambda$updateSavedReactionTags$437;
                lambda$updateSavedReactionTags$437 = MessagesController.this.lambda$updateSavedReactionTags$437((TLRPC$TL_savedReactionTag) obj, (TLRPC$TL_savedReactionTag) obj2);
                return lambda$updateSavedReactionTags$437;
            }
        });
        long j2 = 0;
        for (int i = 0; i < tLRPC$TL_messages_savedReactionsTags.tags.size(); i++) {
            TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag = tLRPC$TL_messages_savedReactionsTags.tags.get(i);
            if (tLRPC$TL_savedReactionTag.count > 0) {
                TLRPC$Reaction tLRPC$Reaction = tLRPC$TL_savedReactionTag.reaction;
                if (tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) {
                    m2 = MessagesController$$ExternalSyntheticBackport8.m(r9, 0, Utilities.MD5(((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon).substring(0, 16).length(), 16);
                    j2 = MediaDataController.calcHash(j2, m2);
                } else if (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji) {
                    j2 = MediaDataController.calcHash(j2, ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction).document_id);
                }
                if (j == 0 && (1 & tLRPC$TL_savedReactionTag.flags) != 0 && (str = tLRPC$TL_savedReactionTag.title) != null) {
                    m = MessagesController$$ExternalSyntheticBackport9.m(r8, 0, Utilities.MD5(str).substring(0, 16).length(), 16);
                    j2 = MediaDataController.calcHash(j2, m);
                }
                j2 = MediaDataController.calcHash(j2, tLRPC$TL_savedReactionTag.count);
            }
        }
        tLRPC$TL_messages_savedReactionsTags.hash = j2;
        saveSavedReactionsTags(j, tLRPC$TL_messages_savedReactionsTags);
        getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
    }

    public /* synthetic */ int lambda$updateSavedReactionTags$437(TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag, TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag2) {
        int compare;
        int i = tLRPC$TL_savedReactionTag.count;
        int i2 = tLRPC$TL_savedReactionTag2.count;
        if (i == i2) {
            compare = Long.compare(getTagLongId(tLRPC$TL_savedReactionTag2.reaction) ^ Long.MIN_VALUE, getTagLongId(tLRPC$TL_savedReactionTag.reaction) ^ Long.MIN_VALUE);
            return compare;
        }
        return i2 - i;
    }

    public String getSavedTagName(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags;
        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tLRPC$TL_messages_savedReactionsTags = longSparseArray.get(0L)) == null) {
            return null;
        }
        for (int i = 0; i < tLRPC$TL_messages_savedReactionsTags.tags.size(); i++) {
            if (visibleReaction.isSame(tLRPC$TL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tLRPC$TL_messages_savedReactionsTags.tags.get(i).title;
            }
        }
        return null;
    }

    public int getSavedTagCount(long j, ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags;
        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tLRPC$TL_messages_savedReactionsTags = longSparseArray.get(j)) == null) {
            return 0;
        }
        for (int i = 0; i < tLRPC$TL_messages_savedReactionsTags.tags.size(); i++) {
            if (visibleReaction.isSame(tLRPC$TL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tLRPC$TL_messages_savedReactionsTags.tags.get(i).count;
            }
        }
        return 0;
    }

    public String getSavedTagName(TLRPC$Reaction tLRPC$Reaction) {
        TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags;
        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
        if (longSparseArray == null || (tLRPC$TL_messages_savedReactionsTags = longSparseArray.get(0L)) == null) {
            return null;
        }
        for (int i = 0; i < tLRPC$TL_messages_savedReactionsTags.tags.size(); i++) {
            if (ReactionsLayoutInBubble.reactionsEqual(tLRPC$Reaction, tLRPC$TL_messages_savedReactionsTags.tags.get(i).reaction)) {
                return tLRPC$TL_messages_savedReactionsTags.tags.get(i).title;
            }
        }
        return null;
    }

    public void renameSavedReactionTag(ReactionsLayoutInBubble.VisibleReaction visibleReaction, String str) {
        boolean z;
        boolean z2;
        String str2;
        long m;
        long m2;
        LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
        if (longSparseArray == null) {
            return;
        }
        TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags = longSparseArray.get(0L);
        if (tLRPC$TL_messages_savedReactionsTags == null) {
            LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray2 = this.reactionTags;
            TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags2 = new TLRPC$TL_messages_savedReactionsTags();
            longSparseArray2.put(0L, tLRPC$TL_messages_savedReactionsTags2);
            tLRPC$TL_messages_savedReactionsTags = tLRPC$TL_messages_savedReactionsTags2;
        }
        int i = 0;
        while (true) {
            if (i >= tLRPC$TL_messages_savedReactionsTags.tags.size()) {
                z = false;
                z2 = false;
                break;
            }
            TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag = tLRPC$TL_messages_savedReactionsTags.tags.get(i);
            if (visibleReaction.isSame(tLRPC$TL_savedReactionTag.reaction)) {
                if (TextUtils.isEmpty(str)) {
                    z = tLRPC$TL_savedReactionTag.title != null;
                    tLRPC$TL_savedReactionTag.flags &= -2;
                    tLRPC$TL_savedReactionTag.title = null;
                } else {
                    z = !TextUtils.equals(tLRPC$TL_savedReactionTag.title, str);
                    tLRPC$TL_savedReactionTag.flags |= 1;
                    tLRPC$TL_savedReactionTag.title = str;
                }
                z2 = true;
            } else {
                i++;
            }
        }
        if (!z2) {
            TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag2 = new TLRPC$TL_savedReactionTag();
            tLRPC$TL_savedReactionTag2.reaction = visibleReaction.toTLReaction();
            if (!TextUtils.isEmpty(str)) {
                tLRPC$TL_savedReactionTag2.title = str;
            }
            tLRPC$TL_savedReactionTag2.count = 1;
            tLRPC$TL_messages_savedReactionsTags.tags.add(tLRPC$TL_savedReactionTag2);
            z = true;
        }
        if (z) {
            TLRPC$TL_messages_updateSavedReactionTag tLRPC$TL_messages_updateSavedReactionTag = new TLRPC$TL_messages_updateSavedReactionTag();
            tLRPC$TL_messages_updateSavedReactionTag.reaction = visibleReaction.toTLReaction();
            if (!TextUtils.isEmpty(str)) {
                tLRPC$TL_messages_updateSavedReactionTag.flags |= 1;
                tLRPC$TL_messages_updateSavedReactionTag.title = str;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_updateSavedReactionTag, null);
            Collections.sort(tLRPC$TL_messages_savedReactionsTags.tags, new Comparator() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda322
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$renameSavedReactionTag$438;
                    lambda$renameSavedReactionTag$438 = MessagesController.this.lambda$renameSavedReactionTag$438((TLRPC$TL_savedReactionTag) obj, (TLRPC$TL_savedReactionTag) obj2);
                    return lambda$renameSavedReactionTag$438;
                }
            });
            long j = 0;
            for (int i2 = 0; i2 < tLRPC$TL_messages_savedReactionsTags.tags.size(); i2++) {
                TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag3 = tLRPC$TL_messages_savedReactionsTags.tags.get(i2);
                if (tLRPC$TL_savedReactionTag3.count > 0) {
                    TLRPC$Reaction tLRPC$Reaction = tLRPC$TL_savedReactionTag3.reaction;
                    if (tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) {
                        m2 = MessagesController$$ExternalSyntheticBackport11.m(r6, 0, Utilities.MD5(((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon).substring(0, 16).length(), 16);
                        j = MediaDataController.calcHash(j, m2);
                    } else if (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji) {
                        j = MediaDataController.calcHash(j, ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction).document_id);
                    }
                    if ((tLRPC$TL_savedReactionTag3.flags & 1) != 0 && (str2 = tLRPC$TL_savedReactionTag3.title) != null) {
                        m = MessagesController$$ExternalSyntheticBackport12.m(r6, 0, Utilities.MD5(str2).substring(0, 16).length(), 16);
                        j = MediaDataController.calcHash(j, m);
                    }
                    j = MediaDataController.calcHash(j, tLRPC$TL_savedReactionTag3.count);
                }
            }
            tLRPC$TL_messages_savedReactionsTags.hash = j;
            saveSavedReactionsTags(0L, tLRPC$TL_messages_savedReactionsTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, 0L);
        }
    }

    public /* synthetic */ int lambda$renameSavedReactionTag$438(TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag, TLRPC$TL_savedReactionTag tLRPC$TL_savedReactionTag2) {
        int compare;
        int i = tLRPC$TL_savedReactionTag.count;
        int i2 = tLRPC$TL_savedReactionTag2.count;
        if (i == i2) {
            compare = Long.compare(getTagLongId(tLRPC$TL_savedReactionTag2.reaction) ^ Long.MIN_VALUE, getTagLongId(tLRPC$TL_savedReactionTag.reaction) ^ Long.MIN_VALUE);
            return compare;
        }
        return i2 - i;
    }

    private long getTagLongId(TLRPC$Reaction tLRPC$Reaction) {
        long m;
        if (tLRPC$Reaction == null) {
            return 0L;
        }
        long j = tLRPC$Reaction.tag_long_id;
        if (j != 0) {
            return j;
        }
        if (tLRPC$Reaction instanceof TLRPC$TL_reactionEmoji) {
            m = MessagesController$$ExternalSyntheticBackport10.m(r0, 0, Utilities.MD5(((TLRPC$TL_reactionEmoji) tLRPC$Reaction).emoticon).substring(0, 16).length(), 16);
            tLRPC$Reaction.tag_long_id = m;
            return m;
        } else if (tLRPC$Reaction instanceof TLRPC$TL_reactionCustomEmoji) {
            long j2 = ((TLRPC$TL_reactionCustomEmoji) tLRPC$Reaction).document_id;
            tLRPC$Reaction.tag_long_id = j2;
            return j2;
        } else {
            return 0L;
        }
    }

    public TLRPC$TL_messages_savedReactionsTags getSavedReactionTags(long j) {
        return getSavedReactionTags(j, false);
    }

    public TLRPC$TL_messages_savedReactionsTags getSavedReactionTags(final long j, boolean z) {
        HashSet<Long> hashSet = this.loadingReactionTags;
        if (hashSet != null && hashSet.contains(Long.valueOf(j)) && !z) {
            LongSparseArray<TLRPC$TL_messages_savedReactionsTags> longSparseArray = this.reactionTags;
            if (longSparseArray == null) {
                return null;
            }
            return longSparseArray.get(j);
        }
        if (this.loadingReactionTags == null) {
            this.loadingReactionTags = new HashSet<>();
        }
        this.loadingReactionTags.add(Long.valueOf(j));
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda393
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$442(j);
            }
        });
        return null;
    }

    /* JADX WARN: Code restructure failed: missing block: B:50:0x003a, code lost:
        if (r0 == null) goto L12;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:57:0x004a  */
    /* JADX WARN: Type inference failed for: r0v1, types: [org.telegram.SQLite.SQLiteDatabase] */
    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3 */
    /* JADX WARN: Type inference failed for: r0v6, types: [org.telegram.SQLite.SQLiteCursor] */
    /* JADX WARN: Type inference failed for: r0v8 */
    /* JADX WARN: Type inference failed for: r0v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void lambda$getSavedReactionTags$442(final long j) {
        SQLiteCursor sQLiteCursor;
        ?? database = getMessagesStorage().getDatabase();
        SQLiteCursor sQLiteCursor2 = null;
        r1 = null;
        r1 = null;
        r1 = null;
        final TLRPC$messages_SavedReactionTags tLRPC$messages_SavedReactionTags = null;
        try {
            try {
                sQLiteCursor = database.queryFinalized("SELECT data FROM saved_reaction_tags WHERE topic_id = ?", Long.valueOf(j));
                try {
                    boolean next = sQLiteCursor.next();
                    database = sQLiteCursor;
                    if (next) {
                        NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                        database = sQLiteCursor;
                        if (byteBufferValue != null) {
                            tLRPC$messages_SavedReactionTags = TLRPC$messages_SavedReactionTags.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(true), true);
                            database = sQLiteCursor;
                        }
                    }
                } catch (Exception e) {
                    e = e;
                    FileLog.e(e);
                    database = sQLiteCursor;
                }
            } catch (Throwable th) {
                th = th;
                sQLiteCursor2 = database;
                if (sQLiteCursor2 != null) {
                    sQLiteCursor2.dispose();
                }
                throw th;
            }
        } catch (Exception e2) {
            e = e2;
            sQLiteCursor = null;
        } catch (Throwable th2) {
            th = th2;
            if (sQLiteCursor2 != null) {
            }
            throw th;
        }
        database.dispose();
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda155
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$441(tLRPC$messages_SavedReactionTags, j);
            }
        });
    }

    public /* synthetic */ void lambda$getSavedReactionTags$441(final TLRPC$messages_SavedReactionTags tLRPC$messages_SavedReactionTags, final long j) {
        if (this.reactionTags == null) {
            this.reactionTags = new LongSparseArray<>();
        }
        boolean z = tLRPC$messages_SavedReactionTags instanceof TLRPC$TL_messages_savedReactionsTags;
        if (z) {
            this.reactionTags.put(j, (TLRPC$TL_messages_savedReactionsTags) tLRPC$messages_SavedReactionTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
        }
        final TLRPC$TL_messages_getSavedReactionTags tLRPC$TL_messages_getSavedReactionTags = new TLRPC$TL_messages_getSavedReactionTags();
        if (z) {
            tLRPC$TL_messages_getSavedReactionTags.hash = tLRPC$messages_SavedReactionTags.hash;
        }
        if (j != 0) {
            tLRPC$TL_messages_getSavedReactionTags.flags |= 1;
            tLRPC$TL_messages_getSavedReactionTags.peer = getInputPeer(j);
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getSavedReactionTags, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda266
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getSavedReactionTags$440(j, tLRPC$messages_SavedReactionTags, tLRPC$TL_messages_getSavedReactionTags, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getSavedReactionTags$440(final long j, final TLRPC$messages_SavedReactionTags tLRPC$messages_SavedReactionTags, final TLRPC$TL_messages_getSavedReactionTags tLRPC$TL_messages_getSavedReactionTags, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda171
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getSavedReactionTags$439(tLObject, j, tLRPC$messages_SavedReactionTags, tLRPC$TL_messages_getSavedReactionTags);
            }
        });
    }

    public /* synthetic */ void lambda$getSavedReactionTags$439(TLObject tLObject, long j, TLRPC$messages_SavedReactionTags tLRPC$messages_SavedReactionTags, TLRPC$TL_messages_getSavedReactionTags tLRPC$TL_messages_getSavedReactionTags) {
        if (tLObject instanceof TLRPC$TL_messages_savedReactionsTags) {
            TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags = (TLRPC$TL_messages_savedReactionsTags) tLObject;
            this.reactionTags.put(j, tLRPC$TL_messages_savedReactionsTags);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
            saveSavedReactionsTags(j, tLRPC$TL_messages_savedReactionsTags);
        } else if ((tLObject instanceof TLRPC$TL_messages_savedReactionsTagsNotModified) && tLRPC$messages_SavedReactionTags == null && tLRPC$TL_messages_getSavedReactionTags.hash == 0) {
            TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags2 = new TLRPC$TL_messages_savedReactionsTags();
            this.reactionTags.put(j, tLRPC$TL_messages_savedReactionsTags2);
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.savedReactionTagsUpdate, Long.valueOf(j));
            saveSavedReactionsTags(j, tLRPC$TL_messages_savedReactionsTags2);
        }
    }

    private void saveSavedReactionsTags(final long j, final TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda213
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$saveSavedReactionsTags$443(j, tLRPC$TL_messages_savedReactionsTags);
            }
        });
    }

    public /* synthetic */ void lambda$saveSavedReactionsTags$443(long j, TLRPC$TL_messages_savedReactionsTags tLRPC$TL_messages_savedReactionsTags) {
        SQLiteDatabase database = getMessagesStorage().getDatabase();
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            try {
                database.executeFast("DELETE FROM saved_reaction_tags WHERE topic_id = " + j).stepThis().dispose();
                sQLitePreparedStatement = database.executeFast("REPLACE INTO saved_reaction_tags VALUES(?, ?)");
                sQLitePreparedStatement.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_savedReactionsTags.getObjectSize());
                tLRPC$TL_messages_savedReactionsTags.serializeToStream(nativeByteBuffer);
                sQLitePreparedStatement.bindLong(1, j);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                sQLitePreparedStatement.step();
            } catch (Exception e) {
                FileLog.e(e);
                if (sQLitePreparedStatement == null) {
                    return;
                }
            }
            sQLitePreparedStatement.dispose();
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
    }

    public void checkPeerColors(boolean z) {
        PeerColors peerColors;
        if (getUserConfig().getCurrentUser() == null) {
            return;
        }
        if (!this.loadingPeerColors && ((peerColors = this.peerColors) == null || peerColors.needUpdate() || z)) {
            this.loadingPeerColors = true;
            TLRPC$TL_help_getPeerColors tLRPC$TL_help_getPeerColors = new TLRPC$TL_help_getPeerColors();
            PeerColors peerColors2 = this.peerColors;
            tLRPC$TL_help_getPeerColors.hash = peerColors2 != null ? peerColors2.hash : 0;
            if (peerColors2 != null && peerColors2.needUpdate()) {
                tLRPC$TL_help_getPeerColors.hash = 0;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_help_getPeerColors, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda438
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkPeerColors$445(tLObject, tLRPC$TL_error);
                }
            });
        }
        if (this.loadingProfilePeerColors) {
            return;
        }
        PeerColors peerColors3 = this.profilePeerColors;
        if (peerColors3 == null || peerColors3.needUpdate() || z) {
            this.loadingProfilePeerColors = true;
            TLRPC$TL_help_getPeerProfileColors tLRPC$TL_help_getPeerProfileColors = new TLRPC$TL_help_getPeerProfileColors();
            PeerColors peerColors4 = this.profilePeerColors;
            tLRPC$TL_help_getPeerProfileColors.hash = peerColors4 != null ? peerColors4.hash : 0;
            if (peerColors4 != null && peerColors4.needUpdate()) {
                tLRPC$TL_help_getPeerProfileColors.hash = 0;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_help_getPeerProfileColors, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda439
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkPeerColors$447(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkPeerColors$445(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_help_peerColors) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda165
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPeerColors$444(tLObject);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkPeerColors$444(TLObject tLObject) {
        this.loadingPeerColors = false;
        this.peerColors = PeerColors.fromTL(0, (TLRPC$TL_help_peerColors) tLObject);
        this.mainPreferences.edit().putString("peerColors", this.peerColors.toString()).apply();
    }

    public /* synthetic */ void lambda$checkPeerColors$447(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_help_peerColors) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda103
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.this.lambda$checkPeerColors$446(tLObject);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkPeerColors$446(TLObject tLObject) {
        this.loadingProfilePeerColors = false;
        this.profilePeerColors = PeerColors.fromTL(1, (TLRPC$TL_help_peerColors) tLObject);
        this.mainPreferences.edit().putString("profilePeerColors", this.profilePeerColors.toString()).apply();
    }

    public void setStoryQuality(boolean z) {
        if (this.storyQualityFull != z) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            this.storyQualityFull = z;
            edit.putBoolean("storyQualityFull", z).apply();
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.storyQualityUpdate, new Object[0]);
        }
    }

    public void setSavedViewAs(boolean z) {
        if (this.savedViewAsChats != z) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            this.savedViewAsChats = z;
            edit.putBoolean("savedViewAsChats", z).apply();
        }
    }

    public void setFolderTags(boolean z) {
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        this.folderTags = z;
        edit.putBoolean("folderTags", z).apply();
    }

    public boolean isStoryQualityFullOnAccount() {
        return getUserConfig().isPremium() && this.storyQualityFull;
    }

    public static boolean isStoryQualityFull() {
        return getInstance(UserConfig.selectedAccount).isStoryQualityFullOnAccount();
    }

    public boolean isUserPremiumBlocked(long j) {
        return isUserPremiumBlocked(j, false);
    }

    public boolean isUserPremiumBlocked(long j, boolean z) {
        if (!getUserConfig().isPremium() && getUserConfig().getClientUserId() != j) {
            Boolean bool = this.cachedIsUserPremiumBlocked.get(j);
            if (bool != null) {
                return bool.booleanValue();
            }
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null && !user.contact_require_premium) {
                return false;
            }
            TLRPC$UserFull userFull = getUserFull(j);
            if (userFull != null) {
                return userFull.contact_require_premium;
            }
            if (getInputUser(j) == null || z) {
                return false;
            }
            this.loadingIsUserPremiumBlocked.add(Long.valueOf(j));
            AndroidUtilities.cancelRunOnUIThread(this.requestIsUserPremiumBlockedRunnable);
            AndroidUtilities.runOnUIThread(this.requestIsUserPremiumBlockedRunnable, 60L);
        }
        return false;
    }

    public void invalidateUserPremiumBlocked(long j, int i) {
        if (this.loadingFullUsers.contains(Long.valueOf(j))) {
            return;
        }
        int indexOfKey = this.loadedFullUsers.indexOfKey(j);
        if (indexOfKey >= 0) {
            this.loadedFullUsers.removeAt(indexOfKey);
        }
        loadFullUser(getUser(Long.valueOf(j)), i, true);
    }

    public void requestIsUserPremiumBlocked() {
        if (this.loadingIsUserPremiumBlocked.isEmpty()) {
            return;
        }
        TLRPC$TL_users_getIsPremiumRequiredToContact tLRPC$TL_users_getIsPremiumRequiredToContact = new TLRPC$TL_users_getIsPremiumRequiredToContact();
        final ArrayList arrayList = new ArrayList();
        Iterator<Long> it = this.loadingIsUserPremiumBlocked.iterator();
        while (it.hasNext()) {
            long longValue = it.next().longValue();
            TLRPC$InputUser inputUser = getInputUser(longValue);
            if (inputUser != null) {
                tLRPC$TL_users_getIsPremiumRequiredToContact.id.add(inputUser);
                arrayList.add(Long.valueOf(longValue));
            }
        }
        this.loadingIsUserPremiumBlocked.clear();
        if (tLRPC$TL_users_getIsPremiumRequiredToContact.id.isEmpty()) {
            return;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_users_getIsPremiumRequiredToContact, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda160
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$requestIsUserPremiumBlocked$449(arrayList, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$requestIsUserPremiumBlocked$449(final ArrayList arrayList, final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda56
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$requestIsUserPremiumBlocked$448(tLObject, arrayList);
            }
        });
    }

    public /* synthetic */ void lambda$requestIsUserPremiumBlocked$448(TLObject tLObject, ArrayList arrayList) {
        boolean z;
        if (tLObject instanceof TLRPC$Vector) {
            ArrayList<Object> arrayList2 = ((TLRPC$Vector) tLObject).objects;
            z = false;
            for (int i = 0; i < Math.min(arrayList.size(), arrayList2.size()); i++) {
                long longValue = ((Long) arrayList.get(i)).longValue();
                boolean z2 = arrayList2.get(i) instanceof TLRPC$TL_boolTrue;
                Boolean bool = this.cachedIsUserPremiumBlocked.get(longValue);
                if (bool == null || bool.booleanValue() != z2) {
                    this.cachedIsUserPremiumBlocked.put(longValue, Boolean.valueOf(z2));
                    z = true;
                }
                TLRPC$UserFull userFull = getUserFull(longValue);
                if (userFull != null && userFull.contact_require_premium != z2) {
                    userFull.contact_require_premium = z2;
                    getMessagesStorage().updateUserInfo(userFull, true);
                } else if (userFull == null) {
                    getMessagesStorage().updateUserInfoPremiumBlocked(longValue, z2);
                }
                z = true;
            }
        } else {
            z = false;
        }
        if (z) {
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.userIsPremiumBlockedUpadted, new Object[0]);
        }
    }

    public void disableAds(boolean z) {
        TLRPC$UserFull userFull = getUserFull(getUserConfig().getClientUserId());
        if (userFull == null) {
            return;
        }
        userFull.sponsored_enabled = false;
        getMessagesStorage().updateUserInfo(userFull, false);
        if (z) {
            TLRPC$TL_account_toggleSponsoredMessages tLRPC$TL_account_toggleSponsoredMessages = new TLRPC$TL_account_toggleSponsoredMessages();
            tLRPC$TL_account_toggleSponsoredMessages.enabled = false;
            getConnectionsManager().sendRequest(tLRPC$TL_account_toggleSponsoredMessages, null);
        }
    }

    public boolean isSponsoredDisabled() {
        TLRPC$UserFull userFull = getUserFull(getUserConfig().getClientUserId());
        if (userFull == null) {
            return false;
        }
        return !userFull.sponsored_enabled;
    }

    public TLRPC$messages_AvailableEffects getAvailableEffects() {
        if (!this.loadingAvailableEffects) {
            this.loadingAvailableEffects = true;
            this.effectsFetcher.fetch(this.currentAccount, 0, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda248
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$getAvailableEffects$450((TLRPC$messages_AvailableEffects) obj);
                }
            });
        }
        return this.availableEffects;
    }

    public /* synthetic */ void lambda$getAvailableEffects$450(TLRPC$messages_AvailableEffects tLRPC$messages_AvailableEffects) {
        if (this.availableEffects != tLRPC$messages_AvailableEffects) {
            this.availableEffects = tLRPC$messages_AvailableEffects;
            if (tLRPC$messages_AvailableEffects != null) {
                AnimatedEmojiDrawable.getDocumentFetcher(this.currentAccount).putDocuments(this.availableEffects.documents);
            }
            getNotificationCenter().lambda$postNotificationNameOnUIThread$1(NotificationCenter.availableEffectsUpdate, new Object[0]);
        }
        this.loadingAvailableEffects = false;
    }

    public boolean hasAvailableEffects() {
        TLRPC$messages_AvailableEffects tLRPC$messages_AvailableEffects = this.availableEffects;
        return (tLRPC$messages_AvailableEffects == null || tLRPC$messages_AvailableEffects.effects.isEmpty()) ? false : true;
    }

    public TLRPC$TL_availableEffect getEffect(long j) {
        getAvailableEffects();
        if (this.availableEffects != null) {
            for (int i = 0; i < this.availableEffects.effects.size(); i++) {
                if (this.availableEffects.effects.get(i).id == j) {
                    return this.availableEffects.effects.get(i);
                }
            }
            return null;
        }
        return null;
    }

    public TLRPC$Document getEffectDocument(long j) {
        if (this.availableEffects != null) {
            for (int i = 0; i < this.availableEffects.documents.size(); i++) {
                if (this.availableEffects.documents.get(i).id == j) {
                    return this.availableEffects.documents.get(i);
                }
            }
            return null;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes3.dex */
    public class 4 extends CacheFetcher<Integer, TLRPC$messages_AvailableEffects> {
        @Override // org.telegram.messenger.CacheFetcher
        public boolean emitLocal(Integer num) {
            return true;
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected boolean saveLastTimeRequested() {
            return true;
        }

        4() {
            MessagesController.this = r1;
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void getRemote(int i, Integer num, long j, final Utilities.Callback4<Boolean, TLRPC$messages_AvailableEffects, Long, Boolean> callback4) {
            TLRPC$TL_messages_getAvailableEffects tLRPC$TL_messages_getAvailableEffects = new TLRPC$TL_messages_getAvailableEffects();
            tLRPC$TL_messages_getAvailableEffects.hash = (int) j;
            MessagesController.this.getConnectionsManager().sendRequest(tLRPC$TL_messages_getAvailableEffects, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda1
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.4.lambda$getRemote$0(Utilities.Callback4.this, tLObject, tLRPC$TL_error);
                }
            });
        }

        public static /* synthetic */ void lambda$getRemote$0(Utilities.Callback4 callback4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
            String str;
            int i;
            TLRPC$TL_messages_availableEffects tLRPC$TL_messages_availableEffects;
            if (tLObject instanceof TLRPC$TL_messages_availableEffectsNotModified) {
                Boolean bool = Boolean.TRUE;
                callback4.run(bool, null, 0L, bool);
            } else if (tLObject instanceof TLRPC$TL_messages_availableEffects) {
                callback4.run(Boolean.FALSE, (TLRPC$TL_messages_availableEffects) tLObject, Long.valueOf(tLRPC$TL_messages_availableEffects.hash), Boolean.TRUE);
            } else {
                StringBuilder sb = new StringBuilder();
                sb.append("getting available effects error ");
                if (tLRPC$TL_error != null) {
                    str = tLRPC$TL_error.code + " " + tLRPC$TL_error.text;
                } else {
                    str = "";
                }
                sb.append(str);
                FileLog.e(sb.toString());
                callback4.run(Boolean.FALSE, null, 0L, Boolean.valueOf(tLRPC$TL_error == null || !((i = tLRPC$TL_error.code) == -2000 || i == -2001)));
            }
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void getLocal(final int i, Integer num, final Utilities.Callback2<Long, TLRPC$messages_AvailableEffects> callback2) {
            MessagesController.this.getMessagesStorage().getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.4.lambda$getLocal$1(i, callback2);
                }
            });
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Removed duplicated region for block: B:72:0x006a  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public static /* synthetic */ void lambda$getLocal$1(int i, Utilities.Callback2 callback2) {
            SQLiteCursor sQLiteCursor;
            TLRPC$messages_AvailableEffects tLRPC$messages_AvailableEffects;
            TLRPC$TL_messages_availableEffects tLRPC$TL_messages_availableEffects;
            NativeByteBuffer byteBufferValue;
            SQLiteCursor sQLiteCursor2 = null;
            try {
                try {
                    SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                    if (database != null) {
                        sQLiteCursor = database.queryFinalized("SELECT data FROM effects", new Object[0]);
                        try {
                            if (!sQLiteCursor.next() || (byteBufferValue = sQLiteCursor.byteBufferValue(0)) == null) {
                                tLRPC$messages_AvailableEffects = null;
                            } else {
                                tLRPC$messages_AvailableEffects = TLRPC$messages_AvailableEffects.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), true);
                                byteBufferValue.reuse();
                            }
                            if (tLRPC$messages_AvailableEffects instanceof TLRPC$TL_messages_availableEffects) {
                                callback2.run(Long.valueOf(tLRPC$TL_messages_availableEffects.hash), (TLRPC$TL_messages_availableEffects) tLRPC$messages_AvailableEffects);
                            } else {
                                callback2.run(0L, null);
                            }
                            sQLiteCursor2 = sQLiteCursor;
                        } catch (Exception e) {
                            e = e;
                            FileLog.e(e);
                            callback2.run(0L, null);
                            if (sQLiteCursor != null) {
                                sQLiteCursor.dispose();
                                return;
                            }
                            return;
                        }
                    }
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                } catch (Throwable th) {
                    th = th;
                    sQLiteCursor2 = i;
                    if (sQLiteCursor2 != null) {
                        sQLiteCursor2.dispose();
                    }
                    throw th;
                }
            } catch (Exception e2) {
                e = e2;
                sQLiteCursor = null;
            } catch (Throwable th2) {
                th = th2;
                if (sQLiteCursor2 != null) {
                }
                throw th;
            }
        }

        @Override // org.telegram.messenger.CacheFetcher
        public void setLocal(final int i, Integer num, final TLRPC$messages_AvailableEffects tLRPC$messages_AvailableEffects, long j) {
            MessagesStorage.getInstance(i).getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.messenger.MessagesController$4$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.4.lambda$setLocal$2(i, tLRPC$messages_AvailableEffects);
                }
            });
        }

        public static /* synthetic */ void lambda$setLocal$2(int i, TLRPC$messages_AvailableEffects tLRPC$messages_AvailableEffects) {
            try {
                SQLiteDatabase database = MessagesStorage.getInstance(i).getDatabase();
                if (database != null) {
                    database.executeFast("DELETE FROM effects").stepThis().dispose();
                    if (tLRPC$messages_AvailableEffects != null) {
                        SQLitePreparedStatement executeFast = database.executeFast("INSERT INTO effects VALUES(?)");
                        executeFast.requery();
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$messages_AvailableEffects.getObjectSize());
                        tLRPC$messages_AvailableEffects.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(1, nativeByteBuffer);
                        executeFast.step();
                        nativeByteBuffer.reuse();
                        executeFast.dispose();
                    }
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected long getSavedLastTimeRequested(int i) {
            SharedPreferences sharedPreferences = MessagesController.this.mainPreferences;
            return sharedPreferences.getLong("effects_last_" + i, 0L);
        }

        @Override // org.telegram.messenger.CacheFetcher
        protected void setSavedLastTimeRequested(int i, long j) {
            SharedPreferences.Editor edit = MessagesController.this.mainPreferences.edit();
            edit.putLong("effects_last_" + i, j).apply();
        }
    }

    public static boolean equals(TLRPC$MessageMedia tLRPC$MessageMedia, TLRPC$MessageMedia tLRPC$MessageMedia2) {
        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument) {
            return (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaDocument) && tLRPC$MessageMedia.document.id == tLRPC$MessageMedia2.document.id;
        }
        boolean z = tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPhoto;
        return z && z && tLRPC$MessageMedia.photo.id == tLRPC$MessageMedia2.photo.id;
    }

    public static TLRPC$InputDocument toInputDocument(TLRPC$Document tLRPC$Document) {
        TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
        tLRPC$TL_inputDocument.id = tLRPC$Document.id;
        tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
        tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
        return tLRPC$TL_inputDocument;
    }

    public static TLRPC$InputMedia toInputMedia(TLRPC$MessageMedia tLRPC$MessageMedia) {
        if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument) {
            TLRPC$TL_inputMediaDocument tLRPC$TL_inputMediaDocument = new TLRPC$TL_inputMediaDocument();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputMediaDocument.id = tLRPC$TL_inputDocument;
            TLRPC$Document tLRPC$Document = tLRPC$MessageMedia.document;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            return tLRPC$TL_inputMediaDocument;
        } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) {
            TLRPC$TL_inputMediaPhoto tLRPC$TL_inputMediaPhoto = new TLRPC$TL_inputMediaPhoto();
            TLRPC$TL_inputPhoto tLRPC$TL_inputPhoto = new TLRPC$TL_inputPhoto();
            tLRPC$TL_inputMediaPhoto.id = tLRPC$TL_inputPhoto;
            TLRPC$Photo tLRPC$Photo = tLRPC$MessageMedia.photo;
            tLRPC$TL_inputPhoto.id = tLRPC$Photo.id;
            tLRPC$TL_inputPhoto.access_hash = tLRPC$Photo.access_hash;
            tLRPC$TL_inputPhoto.file_reference = tLRPC$Photo.file_reference;
            return tLRPC$TL_inputMediaPhoto;
        } else {
            return null;
        }
    }

    public void openApp(TLRPC$User tLRPC$User, int i) {
        openApp(null, tLRPC$User, i, null);
    }

    public static /* synthetic */ void lambda$openApp$451(boolean[] zArr) {
        zArr[0] = true;
    }

    public void openApp(final BaseFragment baseFragment, final TLRPC$User tLRPC$User, final int i, final Browser.Progress progress) {
        if (tLRPC$User == null) {
            return;
        }
        final boolean[] zArr = {false};
        if (progress != null) {
            progress.onCancel(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda180
                @Override // java.lang.Runnable
                public final void run() {
                    MessagesController.lambda$openApp$451(zArr);
                }
            });
            progress.init();
        }
        final Runnable runnable = new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda181
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$openApp$452(baseFragment, progress, zArr, tLRPC$User, r6);
            }
        };
        MediaDataController mediaDataController = getMediaDataController();
        long j = tLRPC$User.id;
        TL_bots$BotInfo botInfoCached = mediaDataController.getBotInfoCached(j, j);
        final TL_bots$BotInfo[] tL_bots$BotInfoArr = {botInfoCached};
        if (tLRPC$User.bot_has_main_app) {
            runnable.run();
        } else if (botInfoCached == null) {
            MediaDataController mediaDataController2 = getMediaDataController();
            long j2 = tLRPC$User.id;
            mediaDataController2.loadBotInfo(j2, j2, false, i, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda182
                @Override // org.telegram.messenger.Utilities.Callback
                public final void run(Object obj) {
                    MessagesController.this.lambda$openApp$454(zArr, tL_bots$BotInfoArr, tLRPC$User, i, runnable, (TL_bots$BotInfo) obj);
                }
            });
        } else {
            runnable.run();
        }
    }

    public /* synthetic */ void lambda$openApp$452(BaseFragment baseFragment, Browser.Progress progress, boolean[] zArr, TLRPC$User tLRPC$User, TL_bots$BotInfo[] tL_bots$BotInfoArr) {
        EmptyBaseFragment safeLastFragment = baseFragment != null ? baseFragment : LaunchActivity.getSafeLastFragment();
        if (safeLastFragment == null) {
            return;
        }
        if (progress != null) {
            progress.end();
        }
        if (zArr[0]) {
            return;
        }
        if (tLRPC$User.bot_has_main_app) {
            if (safeLastFragment.getParentLayout() instanceof ActionBarLayout) {
                safeLastFragment = ((ActionBarLayout) safeLastFragment.getParentLayout()).getSheetFragment();
            }
            BaseFragment baseFragment2 = safeLastFragment;
            AndroidUtilities.hideKeyboard(baseFragment2.getFragmentView());
            int i = this.currentAccount;
            long j = tLRPC$User.id;
            WebViewRequestProps of = WebViewRequestProps.of(i, j, j, null, null, 4, 0, false, null, false, null, tLRPC$User, 0, false);
            LaunchActivity launchActivity = LaunchActivity.instance;
            if (launchActivity == null || launchActivity.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(of) == null) {
                if (AndroidUtilities.isTablet()) {
                    BotWebViewSheet botWebViewSheet = new BotWebViewSheet(baseFragment2.getContext(), baseFragment2.getResourceProvider());
                    botWebViewSheet.setDefaultFullsize(true);
                    botWebViewSheet.setNeedsContext(true);
                    botWebViewSheet.setParentActivity(baseFragment2.getParentActivity());
                    botWebViewSheet.requestWebView(null, of);
                    botWebViewSheet.show();
                    return;
                }
                BotWebViewAttachedSheet createBotViewer = baseFragment2.createBotViewer();
                createBotViewer.setDefaultFullsize(true);
                createBotViewer.setNeedsContext(false);
                createBotViewer.setParentActivity(baseFragment2.getParentActivity());
                createBotViewer.requestWebView(null, of);
                createBotViewer.show();
                return;
            }
            return;
        }
        TL_bots$BotInfo tL_bots$BotInfo = tL_bots$BotInfoArr[0];
        if (tL_bots$BotInfo != null && (tL_bots$BotInfo.menu_button instanceof TL_bots$TL_botMenuButton)) {
            if (safeLastFragment.getParentLayout() instanceof ActionBarLayout) {
                safeLastFragment = ((ActionBarLayout) safeLastFragment.getParentLayout()).getSheetFragment();
            }
            BaseFragment baseFragment3 = safeLastFragment;
            TL_bots$TL_botMenuButton tL_bots$TL_botMenuButton = (TL_bots$TL_botMenuButton) tL_bots$BotInfoArr[0].menu_button;
            AndroidUtilities.hideKeyboard(baseFragment3.getFragmentView());
            int i2 = this.currentAccount;
            long j2 = tLRPC$User.id;
            WebViewRequestProps of2 = WebViewRequestProps.of(i2, j2, j2, tL_bots$TL_botMenuButton.text, tL_bots$TL_botMenuButton.url, 2, 0, false, null, false, null, tLRPC$User, 0, false);
            LaunchActivity launchActivity2 = LaunchActivity.instance;
            if (launchActivity2 == null || launchActivity2.getBottomSheetTabs() == null || LaunchActivity.instance.getBottomSheetTabs().tryReopenTab(of2) == null) {
                if (AndroidUtilities.isTablet()) {
                    BotWebViewSheet botWebViewSheet2 = new BotWebViewSheet(baseFragment3.getContext(), baseFragment3.getResourceProvider());
                    botWebViewSheet2.setDefaultFullsize(false);
                    botWebViewSheet2.setNeedsContext(true);
                    botWebViewSheet2.setParentActivity(baseFragment3.getParentActivity());
                    botWebViewSheet2.requestWebView(null, of2);
                    botWebViewSheet2.show();
                    return;
                }
                BotWebViewAttachedSheet createBotViewer2 = baseFragment3.createBotViewer();
                createBotViewer2.setDefaultFullsize(false);
                createBotViewer2.setNeedsContext(false);
                createBotViewer2.setParentActivity(baseFragment3.getParentActivity());
                createBotViewer2.requestWebView(null, of2);
                createBotViewer2.show();
                return;
            }
            return;
        }
        safeLastFragment.presentFragment(ChatActivity.of(tLRPC$User.id));
    }

    public /* synthetic */ void lambda$openApp$454(final boolean[] zArr, final TL_bots$BotInfo[] tL_bots$BotInfoArr, TLRPC$User tLRPC$User, int i, final Runnable runnable, TL_bots$BotInfo tL_bots$BotInfo) {
        if (zArr[0]) {
            return;
        }
        tL_bots$BotInfoArr[0] = tL_bots$BotInfo;
        if (tL_bots$BotInfo == null) {
            TLRPC$UserFull userFull = getUserFull(tLRPC$User.id);
            if (userFull == null) {
                if (zArr[0]) {
                    return;
                }
                loadFullUser(tLRPC$User, i, true, new Utilities.Callback() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda158
                    @Override // org.telegram.messenger.Utilities.Callback
                    public final void run(Object obj) {
                        MessagesController.lambda$openApp$453(zArr, tL_bots$BotInfoArr, runnable, (TLRPC$UserFull) obj);
                    }
                });
                return;
            }
            tL_bots$BotInfoArr[0] = userFull.bot_info;
            runnable.run();
            return;
        }
        runnable.run();
    }

    public static /* synthetic */ void lambda$openApp$453(boolean[] zArr, TL_bots$BotInfo[] tL_bots$BotInfoArr, Runnable runnable, TLRPC$UserFull tLRPC$UserFull) {
        if (zArr[0]) {
            return;
        }
        if (tLRPC$UserFull != null) {
            tL_bots$BotInfoArr[0] = tLRPC$UserFull.bot_info;
        }
        AndroidUtilities.runOnUIThread(runnable);
    }

    public TL_account$contentSettings getContentSettings() {
        return this.contentSettings;
    }

    public void getContentSettings(Utilities.Callback<TL_account$contentSettings> callback) {
        if (this.contentSettings != null && System.currentTimeMillis() - this.contentSettingsLoadedTime < 3600000) {
            if (callback != null) {
                callback.run(this.contentSettings);
                return;
            }
            return;
        }
        if (this.contentSettingsCallbacks == null) {
            this.contentSettingsCallbacks = new ArrayList<>();
        }
        if (callback != null) {
            this.contentSettingsCallbacks.add(callback);
        }
        if (this.contentSettingsLoading) {
            return;
        }
        this.contentSettingsLoading = true;
        getConnectionsManager().sendRequest(new TLObject() { // from class: org.telegram.tgnet.tl.TL_account$getContentSettings
            @Override // org.telegram.tgnet.TLObject
            public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
                return TL_account$contentSettings.TLdeserialize(abstractSerializedData, i, z);
            }

            @Override // org.telegram.tgnet.TLObject
            public void serializeToStream(AbstractSerializedData abstractSerializedData) {
                abstractSerializedData.writeInt32(-1952756306);
            }
        }, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda330
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$getContentSettings$456(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$getContentSettings$456(final TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda243
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.this.lambda$getContentSettings$455(tLObject);
            }
        });
    }

    public /* synthetic */ void lambda$getContentSettings$455(TLObject tLObject) {
        if (tLObject instanceof TL_account$contentSettings) {
            this.contentSettings = (TL_account$contentSettings) tLObject;
            this.contentSettingsLoadedTime = System.currentTimeMillis();
        }
        this.contentSettingsLoading = false;
        ArrayList<Utilities.Callback<TL_account$contentSettings>> arrayList = this.contentSettingsCallbacks;
        if (arrayList != null) {
            Iterator<Utilities.Callback<TL_account$contentSettings>> it = arrayList.iterator();
            while (it.hasNext()) {
                it.next().run(this.contentSettings);
            }
            this.contentSettingsCallbacks.clear();
            this.contentSettingsCallbacks = null;
        }
    }

    public void invalidateContentSettings() {
        this.contentSettings = null;
        this.contentSettingsLoadedTime = 0L;
    }

    public void setContentSettings(boolean z) {
        TL_account$contentSettings tL_account$contentSettings = this.contentSettings;
        if (tL_account$contentSettings != null) {
            if (!tL_account$contentSettings.sensitive_can_change) {
                return;
            }
            tL_account$contentSettings.sensitive_enabled = z;
        }
        if (this.ignoreRestrictionReasons == null) {
            this.ignoreRestrictionReasons = new HashSet();
        }
        if (z) {
            this.ignoreRestrictionReasons.add("sensitive");
        } else {
            this.ignoreRestrictionReasons.remove("sensitive");
        }
        TL_account$setContentSettings tL_account$setContentSettings = new TL_account$setContentSettings();
        tL_account$setContentSettings.sensitive_enabled = z;
        getConnectionsManager().sendRequest(tL_account$setContentSettings, new RequestDelegate() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda271
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.lambda$setContentSettings$458(tLObject, tLRPC$TL_error);
            }
        });
    }

    public static /* synthetic */ void lambda$setContentSettings$458(TLObject tLObject, final TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.messenger.MessagesController$$ExternalSyntheticLambda388
            @Override // java.lang.Runnable
            public final void run() {
                MessagesController.lambda$setContentSettings$457(TLRPC$TL_error.this);
            }
        });
    }

    public static /* synthetic */ void lambda$setContentSettings$457(TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            BulletinFactory.showError(tLRPC$TL_error);
        }
    }

    public boolean showSensitiveContent() {
        if (this.contentSettings != null && System.currentTimeMillis() - this.contentSettingsLoadedTime < 3600000) {
            return this.contentSettings.sensitive_enabled;
        }
        Set<String> set = this.ignoreRestrictionReasons;
        return set == null || set.contains("sensitive");
    }
}
